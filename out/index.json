{"enums":[{"description":"Enumerations used by {{ClassFunction|Entity|SetUseType}}. Affects when {{HookFunction|ENTITY|Use}} is triggered.\n\nNot to be confused with {{Enum|USE}} used for {{HookFunction|ENTITY|Use}} and others.","enumFields":[{"description":"Fire a [[Enums/USE|USE_ON]] signal every tick as long as the player holds their use key and aims at the target.","name":"CONTINUOUS_USE","value":0},{"description":"Fires a [[Enums/USE|USE_ON]] signal when starting to use an entity, and a [[Enums/USE|USE_OFF]] signal when letting go.\n\n{{Warning|\nThere is no guarantee to receive both ON and OFF signals. A signal will only be sent when pushing or letting go of the use key while actually aiming at the entity, so an ON signal might not be followed by an OFF signal if the player is aiming somewhere else when releasing the key, and similarly, an OFF signal may not be preceded by an ON signal if the player started aiming at the entity only after pressing the key.\n\nTherefore, this method of input is unreliable and should not be used.}}\n","name":"ONOFF_USE","value":1},{"description":"Like a wheel turning. <!-- couldn't get this to do anything, how does it work? -->","name":"DIRECTIONAL_USE","value":2},{"description":"Fire a [[Enums/USE|USE_ON]] signal only once when player presses their use key while aiming at the target.","name":"SIMPLE_USE","value":3}],"isMembersOnly":true,"name":"_USE"},{"description":"Enumerations used by functions like {{ClassFunction|Weapon|SendWeaponAnim}} & {{ClassFunction|Entity|SelectWeightedSequence}}.\n\n{{Bug|Issue=3075|Category=No|Some activity enums are unlisted since they do not exist as variables in-game, but still link to existing player animations.}}","enumFields":[{"description":"","name":"ACT_INVALID","value":-1},{"description":"","name":"ACT_RESET","value":0},{"description":"","name":"ACT_IDLE","value":1},{"description":"","name":"ACT_TRANSITION","value":2},{"description":"","name":"ACT_COVER","value":3},{"description":"","name":"ACT_COVER_MED","value":4},{"description":"","name":"ACT_COVER_LOW","value":5},{"description":"","name":"ACT_WALK","value":6},{"description":"","name":"ACT_WALK_AIM","value":7},{"description":"","name":"ACT_WALK_CROUCH","value":8},{"description":"","name":"ACT_WALK_CROUCH_AIM","value":9},{"description":"","name":"ACT_RUN","value":10},{"description":"","name":"ACT_RUN_AIM","value":11},{"description":"","name":"ACT_RUN_CROUCH","value":12},{"description":"","name":"ACT_RUN_CROUCH_AIM","value":13},{"description":"","name":"ACT_RUN_PROTECTED","value":14},{"description":"","name":"ACT_SCRIPT_CUSTOM_MOVE","value":15},{"description":"","name":"ACT_RANGE_ATTACK1","value":16},{"description":"","name":"ACT_RANGE_ATTACK2","value":17},{"description":"","name":"ACT_RANGE_ATTACK1_LOW","value":18},{"description":"","name":"ACT_RANGE_ATTACK2_LOW","value":19},{"description":"","name":"ACT_DIESIMPLE","value":20},{"description":"","name":"ACT_DIEBACKWARD","value":21},{"description":"","name":"ACT_DIEFORWARD","value":22},{"description":"","name":"ACT_DIEVIOLENT","value":23},{"description":"","name":"ACT_DIERAGDOLL","value":24},{"description":"","name":"ACT_FLY","value":25},{"description":"","name":"ACT_HOVER","value":26},{"description":"","name":"ACT_GLIDE","value":27},{"description":"","name":"ACT_SWIM","value":28},{"description":"","name":"ACT_SWIM_IDLE","value":29},{"description":"","name":"ACT_JUMP","value":30},{"description":"","name":"ACT_HOP","value":31},{"description":"","name":"ACT_LEAP","value":32},{"description":"","name":"ACT_LAND","value":33},{"description":"","name":"ACT_CLIMB_UP","value":34},{"description":"","name":"ACT_CLIMB_DOWN","value":35},{"description":"","name":"ACT_CLIMB_DISMOUNT","value":36},{"description":"","name":"ACT_SHIPLADDER_UP","value":37},{"description":"","name":"ACT_SHIPLADDER_DOWN","value":38},{"description":"","name":"ACT_STRAFE_LEFT","value":39},{"description":"","name":"ACT_STRAFE_RIGHT","value":40},{"description":"","name":"ACT_ROLL_LEFT","value":41},{"description":"","name":"ACT_ROLL_RIGHT","value":42},{"description":"","name":"ACT_TURN_LEFT","value":43},{"description":"","name":"ACT_TURN_RIGHT","value":44},{"description":"","name":"ACT_CROUCH","value":45},{"description":"","name":"ACT_CROUCHIDLE","value":46},{"description":"","name":"ACT_STAND","value":47},{"description":"","name":"ACT_USE","value":48},{"description":"","name":"ACT_SIGNAL1","value":49},{"description":"","name":"ACT_SIGNAL2","value":50},{"description":"","name":"ACT_SIGNAL3","value":51},{"description":"","name":"ACT_SIGNAL_ADVANCE","value":52},{"description":"","name":"ACT_SIGNAL_FORWARD","value":53},{"description":"","name":"ACT_SIGNAL_GROUP","value":54},{"description":"","name":"ACT_SIGNAL_HALT","value":55},{"description":"","name":"ACT_SIGNAL_LEFT","value":56},{"description":"","name":"ACT_SIGNAL_RIGHT","value":57},{"description":"","name":"ACT_SIGNAL_TAKECOVER","value":58},{"description":"","name":"ACT_LOOKBACK_RIGHT","value":59},{"description":"","name":"ACT_LOOKBACK_LEFT","value":60},{"description":"","name":"ACT_COWER","value":61},{"description":"","name":"ACT_SMALL_FLINCH","value":62},{"description":"","name":"ACT_BIG_FLINCH","value":63},{"description":"","name":"ACT_MELEE_ATTACK1","value":64},{"description":"","name":"ACT_MELEE_ATTACK2","value":65},{"description":"","name":"ACT_RELOAD","value":66},{"description":"","name":"ACT_RELOAD_START","value":67},{"description":"","name":"ACT_RELOAD_FINISH","value":68},{"description":"","name":"ACT_RELOAD_LOW","value":69},{"description":"","name":"ACT_ARM","value":70},{"description":"","name":"ACT_DISARM","value":71},{"description":"","name":"ACT_DROP_WEAPON","value":72},{"description":"","name":"ACT_DROP_WEAPON_SHOTGUN","value":73},{"description":"","name":"ACT_PICKUP_GROUND","value":74},{"description":"","name":"ACT_PICKUP_RACK","value":75},{"description":"","name":"ACT_IDLE_ANGRY","value":76},{"description":"","name":"ACT_IDLE_RELAXED","value":77},{"description":"","name":"ACT_IDLE_STIMULATED","value":78},{"description":"","name":"ACT_IDLE_AGITATED","value":79},{"description":"","name":"ACT_IDLE_STEALTH","value":80},{"description":"","name":"ACT_IDLE_HURT","value":81},{"description":"","name":"ACT_WALK_RELAXED","value":82},{"description":"","name":"ACT_WALK_STIMULATED","value":83},{"description":"","name":"ACT_WALK_AGITATED","value":84},{"description":"","name":"ACT_WALK_STEALTH","value":85},{"description":"","name":"ACT_RUN_RELAXED","value":86},{"description":"","name":"ACT_RUN_STIMULATED","value":87},{"description":"","name":"ACT_RUN_AGITATED","value":88},{"description":"","name":"ACT_RUN_STEALTH","value":89},{"description":"","name":"ACT_IDLE_AIM_RELAXED","value":90},{"description":"","name":"ACT_IDLE_AIM_STIMULATED","value":91},{"description":"","name":"ACT_IDLE_AIM_AGITATED","value":92},{"description":"","name":"ACT_IDLE_AIM_STEALTH","value":93},{"description":"","name":"ACT_WALK_AIM_RELAXED","value":94},{"description":"","name":"ACT_WALK_AIM_STIMULATED","value":95},{"description":"","name":"ACT_WALK_AIM_AGITATED","value":96},{"description":"","name":"ACT_WALK_AIM_STEALTH","value":97},{"description":"","name":"ACT_RUN_AIM_RELAXED","value":98},{"description":"","name":"ACT_RUN_AIM_STIMULATED","value":99},{"description":"","name":"ACT_RUN_AIM_AGITATED","value":100},{"description":"","name":"ACT_RUN_AIM_STEALTH","value":101},{"description":"","name":"ACT_CROUCHIDLE_STIMULATED","value":102},{"description":"","name":"ACT_CROUCHIDLE_AIM_STIMULATED","value":103},{"description":"","name":"ACT_CROUCHIDLE_AGITATED","value":104},{"description":"","name":"ACT_WALK_HURT","value":105},{"description":"","name":"ACT_RUN_HURT","value":106},{"description":"","name":"ACT_SPECIAL_ATTACK1","value":107},{"description":"","name":"ACT_SPECIAL_ATTACK2","value":108},{"description":"","name":"ACT_COMBAT_IDLE","value":109},{"description":"","name":"ACT_WALK_SCARED","value":110},{"description":"","name":"ACT_RUN_SCARED","value":111},{"description":"","name":"ACT_VICTORY_DANCE","value":112},{"description":"","name":"ACT_DIE_HEADSHOT","value":113},{"description":"","name":"ACT_DIE_CHESTSHOT","value":114},{"description":"","name":"ACT_DIE_GUTSHOT","value":115},{"description":"","name":"ACT_DIE_BACKSHOT","value":116},{"description":"","name":"ACT_FLINCH_HEAD","value":117},{"description":"","name":"ACT_FLINCH_CHEST","value":118},{"description":"","name":"ACT_FLINCH_STOMACH","value":119},{"description":"","name":"ACT_FLINCH_LEFTARM","value":120},{"description":"","name":"ACT_FLINCH_RIGHTARM","value":121},{"description":"","name":"ACT_FLINCH_LEFTLEG","value":122},{"description":"","name":"ACT_FLINCH_RIGHTLEG","value":123},{"description":"","name":"ACT_FLINCH_PHYSICS","value":124},{"description":"","name":"ACT_IDLE_ON_FIRE","value":125},{"description":"","name":"ACT_WALK_ON_FIRE","value":126},{"description":"","name":"ACT_RUN_ON_FIRE","value":127},{"description":"","name":"ACT_RAPPEL_LOOP","value":128},{"description":"","name":"ACT_180_LEFT","value":129},{"description":"","name":"ACT_180_RIGHT","value":130},{"description":"","name":"ACT_90_LEFT","value":131},{"description":"","name":"ACT_90_RIGHT","value":132},{"description":"","name":"ACT_STEP_LEFT","value":133},{"description":"","name":"ACT_STEP_RIGHT","value":134},{"description":"","name":"ACT_STEP_BACK","value":135},{"description":"","name":"ACT_STEP_FORE","value":136},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK1","value":137},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK2","value":138},{"description":"","name":"ACT_GESTURE_MELEE_ATTACK1","value":139},{"description":"","name":"ACT_GESTURE_MELEE_ATTACK2","value":140},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK1_LOW","value":141},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK2_LOW","value":142},{"description":"","name":"ACT_MELEE_ATTACK_SWING_GESTURE","value":143},{"description":"","name":"ACT_GESTURE_SMALL_FLINCH","value":144},{"description":"","name":"ACT_GESTURE_BIG_FLINCH","value":145},{"description":"","name":"ACT_GESTURE_FLINCH_BLAST","value":146},{"description":"","name":"ACT_GESTURE_FLINCH_BLAST_SHOTGUN","value":147},{"description":"","name":"ACT_GESTURE_FLINCH_BLAST_DAMAGED","value":148},{"description":"","name":"ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN","value":149},{"description":"","name":"ACT_GESTURE_FLINCH_HEAD","value":150},{"description":"","name":"ACT_GESTURE_FLINCH_CHEST","value":151},{"description":"","name":"ACT_GESTURE_FLINCH_STOMACH","value":152},{"description":"","name":"ACT_GESTURE_FLINCH_LEFTARM","value":153},{"description":"","name":"ACT_GESTURE_FLINCH_RIGHTARM","value":154},{"description":"","name":"ACT_GESTURE_FLINCH_LEFTLEG","value":155},{"description":"","name":"ACT_GESTURE_FLINCH_RIGHTLEG","value":156},{"description":"","name":"ACT_GESTURE_TURN_LEFT","value":157},{"description":"","name":"ACT_GESTURE_TURN_RIGHT","value":158},{"description":"","name":"ACT_GESTURE_TURN_LEFT45","value":159},{"description":"","name":"ACT_GESTURE_TURN_RIGHT45","value":160},{"description":"","name":"ACT_GESTURE_TURN_LEFT90","value":161},{"description":"","name":"ACT_GESTURE_TURN_RIGHT90","value":162},{"description":"","name":"ACT_GESTURE_TURN_LEFT45_FLAT","value":163},{"description":"","name":"ACT_GESTURE_TURN_RIGHT45_FLAT","value":164},{"description":"","name":"ACT_GESTURE_TURN_LEFT90_FLAT","value":165},{"description":"","name":"ACT_GESTURE_TURN_RIGHT90_FLAT","value":166},{"description":"","name":"ACT_BARNACLE_HIT","value":167},{"description":"","name":"ACT_BARNACLE_PULL","value":168},{"description":"","name":"ACT_BARNACLE_CHOMP","value":169},{"description":"","name":"ACT_BARNACLE_CHEW","value":170},{"description":"","name":"ACT_DO_NOT_DISTURB","value":171},{"description":"","name":"ACT_VM_DRAW","value":172},{"description":"","name":"ACT_VM_HOLSTER","value":173},{"description":"","name":"ACT_VM_IDLE","value":174},{"description":"","name":"ACT_VM_FIDGET","value":175},{"description":"","name":"ACT_VM_PULLBACK","value":176},{"description":"","name":"ACT_VM_PULLBACK_HIGH","value":177},{"description":"","name":"ACT_VM_PULLBACK_LOW","value":178},{"description":"","name":"ACT_VM_THROW","value":179},{"description":"","name":"ACT_VM_PULLPIN","value":180},{"description":"","name":"ACT_VM_PRIMARYATTACK","value":181},{"description":"","name":"ACT_VM_SECONDARYATTACK","value":182},{"description":"","name":"ACT_VM_RELOAD","value":183},{"description":"","name":"ACT_VM_DRYFIRE","value":186},{"description":"","name":"ACT_VM_HITLEFT","value":187},{"description":"","name":"ACT_VM_HITLEFT2","value":188},{"description":"","name":"ACT_VM_HITRIGHT","value":189},{"description":"","name":"ACT_VM_HITRIGHT2","value":190},{"description":"","name":"ACT_VM_HITCENTER","value":191},{"description":"","name":"ACT_VM_HITCENTER2","value":192},{"description":"","name":"ACT_VM_MISSLEFT","value":193},{"description":"","name":"ACT_VM_MISSLEFT2","value":194},{"description":"","name":"ACT_VM_MISSRIGHT","value":195},{"description":"","name":"ACT_VM_MISSRIGHT2","value":196},{"description":"","name":"ACT_VM_MISSCENTER","value":197},{"description":"","name":"ACT_VM_MISSCENTER2","value":198},{"description":"","name":"ACT_VM_HAULBACK","value":199},{"description":"","name":"ACT_VM_SWINGHARD","value":200},{"description":"","name":"ACT_VM_SWINGMISS","value":201},{"description":"","name":"ACT_VM_SWINGHIT","value":202},{"description":"","name":"ACT_VM_IDLE_TO_LOWERED","value":203},{"description":"","name":"ACT_VM_IDLE_LOWERED","value":204},{"description":"","name":"ACT_VM_LOWERED_TO_IDLE","value":205},{"description":"","name":"ACT_VM_RECOIL1","value":206},{"description":"","name":"ACT_VM_RECOIL2","value":207},{"description":"","name":"ACT_VM_RECOIL3","value":208},{"description":"","name":"ACT_VM_PICKUP","value":209},{"description":"","name":"ACT_VM_RELEASE","value":210},{"description":"","name":"ACT_VM_ATTACH_SILENCER","value":211},{"description":"","name":"ACT_VM_DETACH_SILENCER","value":212},{"description":"","name":"ACT_SLAM_STICKWALL_IDLE","value":229},{"description":"","name":"ACT_SLAM_STICKWALL_ND_IDLE","value":230},{"description":"","name":"ACT_SLAM_STICKWALL_ATTACH","value":231},{"description":"","name":"ACT_SLAM_STICKWALL_ATTACH2","value":232},{"description":"","name":"ACT_SLAM_STICKWALL_ND_ATTACH","value":233},{"description":"","name":"ACT_SLAM_STICKWALL_ND_ATTACH2","value":234},{"description":"","name":"ACT_SLAM_STICKWALL_DETONATE","value":235},{"description":"","name":"ACT_SLAM_STICKWALL_DETONATOR_HOLSTER","value":236},{"description":"","name":"ACT_SLAM_STICKWALL_DRAW","value":237},{"description":"","name":"ACT_SLAM_STICKWALL_ND_DRAW","value":238},{"description":"","name":"ACT_SLAM_STICKWALL_TO_THROW","value":239},{"description":"","name":"ACT_SLAM_STICKWALL_TO_THROW_ND","value":240},{"description":"","name":"ACT_SLAM_STICKWALL_TO_TRIPMINE_ND","value":241},{"description":"","name":"ACT_SLAM_THROW_IDLE","value":242},{"description":"","name":"ACT_SLAM_THROW_ND_IDLE","value":243},{"description":"","name":"ACT_SLAM_THROW_THROW","value":244},{"description":"","name":"ACT_SLAM_THROW_THROW2","value":245},{"description":"","name":"ACT_SLAM_THROW_THROW_ND","value":246},{"description":"","name":"ACT_SLAM_THROW_THROW_ND2","value":247},{"description":"","name":"ACT_SLAM_THROW_DRAW","value":248},{"description":"","name":"ACT_SLAM_THROW_ND_DRAW","value":249},{"description":"","name":"ACT_SLAM_THROW_TO_STICKWALL","value":250},{"description":"","name":"ACT_SLAM_THROW_TO_STICKWALL_ND","value":251},{"description":"","name":"ACT_SLAM_THROW_DETONATE","value":252},{"description":"","name":"ACT_SLAM_THROW_DETONATOR_HOLSTER","value":253},{"description":"","name":"ACT_SLAM_THROW_TO_TRIPMINE_ND","value":254},{"description":"","name":"ACT_SLAM_TRIPMINE_IDLE","value":255},{"description":"","name":"ACT_SLAM_TRIPMINE_DRAW","value":256},{"description":"","name":"ACT_SLAM_TRIPMINE_ATTACH","value":257},{"description":"","name":"ACT_SLAM_TRIPMINE_ATTACH2","value":258},{"description":"","name":"ACT_SLAM_TRIPMINE_TO_STICKWALL_ND","value":259},{"description":"","name":"ACT_SLAM_TRIPMINE_TO_THROW_ND","value":260},{"description":"","name":"ACT_SLAM_DETONATOR_IDLE","value":261},{"description":"","name":"ACT_SLAM_DETONATOR_DRAW","value":262},{"description":"","name":"ACT_SLAM_DETONATOR_DETONATE","value":263},{"description":"","name":"ACT_SLAM_DETONATOR_HOLSTER","value":264},{"description":"","name":"ACT_SLAM_DETONATOR_STICKWALL_DRAW","value":265},{"description":"","name":"ACT_SLAM_DETONATOR_THROW_DRAW","value":266},{"description":"","name":"ACT_SHOTGUN_RELOAD_START","value":267},{"description":"","name":"ACT_SHOTGUN_RELOAD_FINISH","value":268},{"description":"","name":"ACT_SHOTGUN_PUMP","value":269},{"description":"","name":"ACT_SMG2_IDLE2","value":270},{"description":"","name":"ACT_SMG2_FIRE2","value":271},{"description":"","name":"ACT_SMG2_DRAW2","value":272},{"description":"","name":"ACT_SMG2_RELOAD2","value":273},{"description":"","name":"ACT_SMG2_DRYFIRE2","value":274},{"description":"","name":"ACT_SMG2_TOAUTO","value":275},{"description":"","name":"ACT_SMG2_TOBURST","value":276},{"description":"","name":"ACT_PHYSCANNON_UPGRADE","value":277},{"description":"","name":"ACT_RANGE_ATTACK_AR1","value":278},{"description":"","name":"ACT_RANGE_ATTACK_AR2","value":279},{"description":"","name":"ACT_RANGE_ATTACK_AR2_LOW","value":280},{"description":"","name":"ACT_RANGE_ATTACK_AR2_GRENADE","value":281},{"description":"","name":"ACT_RANGE_ATTACK_HMG1","value":282},{"description":"","name":"ACT_RANGE_ATTACK_ML","value":283},{"description":"","name":"ACT_RANGE_ATTACK_SMG1","value":284},{"description":"","name":"ACT_RANGE_ATTACK_SMG1_LOW","value":285},{"description":"","name":"ACT_RANGE_ATTACK_SMG2","value":286},{"description":"","name":"ACT_RANGE_ATTACK_SHOTGUN","value":287},{"description":"","name":"ACT_RANGE_ATTACK_SHOTGUN_LOW","value":288},{"description":"","name":"ACT_RANGE_ATTACK_PISTOL","value":289},{"description":"","name":"ACT_RANGE_ATTACK_PISTOL_LOW","value":290},{"description":"","name":"ACT_RANGE_ATTACK_SLAM","value":291},{"description":"","name":"ACT_RANGE_ATTACK_TRIPWIRE","value":292},{"description":"","name":"ACT_RANGE_ATTACK_THROW","value":293},{"description":"","name":"ACT_RANGE_ATTACK_SNIPER_RIFLE","value":294},{"description":"","name":"ACT_RANGE_ATTACK_RPG","value":295},{"description":"","name":"ACT_MELEE_ATTACK_SWING","value":296},{"description":"","name":"ACT_RANGE_AIM_LOW","value":297},{"description":"","name":"ACT_RANGE_AIM_SMG1_LOW","value":298},{"description":"","name":"ACT_RANGE_AIM_PISTOL_LOW","value":299},{"description":"","name":"ACT_RANGE_AIM_AR2_LOW","value":300},{"description":"","name":"ACT_COVER_PISTOL_LOW","value":301},{"description":"","name":"ACT_COVER_SMG1_LOW","value":302},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK_AR1","value":303},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK_AR2","value":304},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE","value":305},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK_HMG1","value":306},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK_ML","value":307},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK_SMG1","value":308},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK_SMG1_LOW","value":309},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK_SMG2","value":310},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK_SHOTGUN","value":311},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK_PISTOL","value":312},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW","value":313},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK_SLAM","value":314},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK_TRIPWIRE","value":315},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK_THROW","value":316},{"description":"","name":"ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE","value":317},{"description":"","name":"ACT_GESTURE_MELEE_ATTACK_SWING","value":318},{"description":"","name":"ACT_IDLE_RIFLE","value":319},{"description":"","name":"ACT_IDLE_SMG1","value":320},{"description":"","name":"ACT_IDLE_ANGRY_SMG1","value":321},{"description":"","name":"ACT_IDLE_PISTOL","value":322},{"description":"","name":"ACT_IDLE_ANGRY_PISTOL","value":323},{"description":"","name":"ACT_IDLE_ANGRY_SHOTGUN","value":324},{"description":"","name":"ACT_IDLE_STEALTH_PISTOL","value":325},{"description":"","name":"ACT_IDLE_PACKAGE","value":326},{"description":"","name":"ACT_WALK_PACKAGE","value":327},{"description":"","name":"ACT_IDLE_SUITCASE","value":328},{"description":"","name":"ACT_WALK_SUITCASE","value":329},{"description":"","name":"ACT_IDLE_SMG1_RELAXED","value":330},{"description":"","name":"ACT_IDLE_SMG1_STIMULATED","value":331},{"description":"","name":"ACT_WALK_RIFLE_RELAXED","value":332},{"description":"","name":"ACT_RUN_RIFLE_RELAXED","value":333},{"description":"","name":"ACT_WALK_RIFLE_STIMULATED","value":334},{"description":"","name":"ACT_RUN_RIFLE_STIMULATED","value":335},{"description":"","name":"ACT_IDLE_AIM_RIFLE_STIMULATED","value":336},{"description":"","name":"ACT_WALK_AIM_RIFLE_STIMULATED","value":337},{"description":"","name":"ACT_RUN_AIM_RIFLE_STIMULATED","value":338},{"description":"","name":"ACT_IDLE_SHOTGUN_RELAXED","value":339},{"description":"","name":"ACT_IDLE_SHOTGUN_STIMULATED","value":340},{"description":"","name":"ACT_IDLE_SHOTGUN_AGITATED","value":341},{"description":"","name":"ACT_WALK_ANGRY","value":342},{"description":"","name":"ACT_POLICE_HARASS1","value":343},{"description":"","name":"ACT_POLICE_HARASS2","value":344},{"description":"","name":"ACT_IDLE_MANNEDGUN","value":345},{"description":"","name":"ACT_IDLE_MELEE","value":346},{"description":"","name":"ACT_IDLE_ANGRY_MELEE","value":347},{"description":"","name":"ACT_IDLE_RPG_RELAXED","value":348},{"description":"","name":"ACT_IDLE_RPG","value":349},{"description":"","name":"ACT_IDLE_ANGRY_RPG","value":350},{"description":"","name":"ACT_COVER_LOW_RPG","value":351},{"description":"","name":"ACT_WALK_RPG","value":352},{"description":"","name":"ACT_RUN_RPG","value":353},{"description":"","name":"ACT_WALK_CROUCH_RPG","value":354},{"description":"","name":"ACT_RUN_CROUCH_RPG","value":355},{"description":"","name":"ACT_WALK_RPG_RELAXED","value":356},{"description":"","name":"ACT_RUN_RPG_RELAXED","value":357},{"description":"","name":"ACT_WALK_RIFLE","value":358},{"description":"","name":"ACT_WALK_AIM_RIFLE","value":359},{"description":"","name":"ACT_WALK_CROUCH_RIFLE","value":360},{"description":"","name":"ACT_WALK_CROUCH_AIM_RIFLE","value":361},{"description":"","name":"ACT_RUN_RIFLE","value":362},{"description":"","name":"ACT_RUN_AIM_RIFLE","value":363},{"description":"","name":"ACT_RUN_CROUCH_RIFLE","value":364},{"description":"","name":"ACT_RUN_CROUCH_AIM_RIFLE","value":365},{"description":"","name":"ACT_RUN_STEALTH_PISTOL","value":366},{"description":"","name":"ACT_WALK_AIM_SHOTGUN","value":367},{"description":"","name":"ACT_RUN_AIM_SHOTGUN","value":368},{"description":"","name":"ACT_WALK_PISTOL","value":369},{"description":"","name":"ACT_RUN_PISTOL","value":370},{"description":"","name":"ACT_WALK_AIM_PISTOL","value":371},{"description":"","name":"ACT_RUN_AIM_PISTOL","value":372},{"description":"","name":"ACT_WALK_STEALTH_PISTOL","value":373},{"description":"","name":"ACT_WALK_AIM_STEALTH_PISTOL","value":374},{"description":"","name":"ACT_RUN_AIM_STEALTH_PISTOL","value":375},{"description":"","name":"ACT_RELOAD_PISTOL","value":376},{"description":"","name":"ACT_RELOAD_PISTOL_LOW","value":377},{"description":"","name":"ACT_RELOAD_SMG1","value":378},{"description":"","name":"ACT_RELOAD_SMG1_LOW","value":379},{"description":"","name":"ACT_RELOAD_SHOTGUN","value":380},{"description":"","name":"ACT_RELOAD_SHOTGUN_LOW","value":381},{"description":"","name":"ACT_GESTURE_RELOAD","value":382},{"description":"","name":"ACT_GESTURE_RELOAD_PISTOL","value":383},{"description":"","name":"ACT_GESTURE_RELOAD_SMG1","value":384},{"description":"","name":"ACT_GESTURE_RELOAD_SHOTGUN","value":385},{"description":"","name":"ACT_BUSY_LEAN_LEFT","value":386},{"description":"","name":"ACT_BUSY_LEAN_LEFT_ENTRY","value":387},{"description":"","name":"ACT_BUSY_LEAN_LEFT_EXIT","value":388},{"description":"","name":"ACT_BUSY_LEAN_BACK","value":389},{"description":"","name":"ACT_BUSY_LEAN_BACK_ENTRY","value":390},{"description":"","name":"ACT_BUSY_LEAN_BACK_EXIT","value":391},{"description":"","name":"ACT_BUSY_SIT_GROUND","value":392},{"description":"","name":"ACT_BUSY_SIT_GROUND_ENTRY","value":393},{"description":"","name":"ACT_BUSY_SIT_GROUND_EXIT","value":394},{"description":"","name":"ACT_BUSY_SIT_CHAIR","value":395},{"description":"","name":"ACT_BUSY_SIT_CHAIR_ENTRY","value":396},{"description":"","name":"ACT_BUSY_SIT_CHAIR_EXIT","value":397},{"description":"","name":"ACT_BUSY_STAND","value":398},{"description":"","name":"ACT_BUSY_QUEUE","value":399},{"description":"","name":"ACT_DUCK_DODGE","value":400},{"description":"","name":"ACT_DIE_BARNACLE_SWALLOW","value":401},{"description":"","name":"ACT_GESTURE_BARNACLE_STRANGLE","value":402},{"description":"","name":"ACT_PHYSCANNON_DETACH","value":403},{"description":"","name":"ACT_PHYSCANNON_ANIMATE","value":404},{"description":"","name":"ACT_PHYSCANNON_ANIMATE_PRE","value":405},{"description":"","name":"ACT_PHYSCANNON_ANIMATE_POST","value":406},{"description":"","name":"ACT_DIE_FRONTSIDE","value":407},{"description":"","name":"ACT_DIE_RIGHTSIDE","value":408},{"description":"","name":"ACT_DIE_BACKSIDE","value":409},{"description":"","name":"ACT_DIE_LEFTSIDE","value":410},{"description":"","name":"ACT_OPEN_DOOR","value":411},{"description":"","name":"ACT_DI_ALYX_ZOMBIE_MELEE","value":412},{"description":"","name":"ACT_DI_ALYX_ZOMBIE_TORSO_MELEE","value":413},{"description":"","name":"ACT_DI_ALYX_HEADCRAB_MELEE","value":414},{"description":"","name":"ACT_DI_ALYX_ANTLION","value":415},{"description":"","name":"ACT_DI_ALYX_ZOMBIE_SHOTGUN64","value":416},{"description":"","name":"ACT_DI_ALYX_ZOMBIE_SHOTGUN26","value":417},{"description":"","name":"ACT_READINESS_RELAXED_TO_STIMULATED","value":418},{"description":"","name":"ACT_READINESS_RELAXED_TO_STIMULATED_WALK","value":419},{"description":"","name":"ACT_READINESS_AGITATED_TO_STIMULATED","value":420},{"description":"","name":"ACT_READINESS_STIMULATED_TO_RELAXED","value":421},{"description":"","name":"ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED","value":422},{"description":"","name":"ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK","value":423},{"description":"","name":"ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED","value":424},{"description":"","name":"ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED","value":425},{"description":"","name":"ACT_IDLE_CARRY","value":426},{"description":"","name":"ACT_WALK_CARRY","value":427},{"description":"","name":"ACT_STARTDYING","value":428},{"description":"","name":"ACT_DYINGLOOP","value":429},{"description":"","name":"ACT_DYINGTODEAD","value":430},{"description":"","name":"ACT_RIDE_MANNED_GUN","value":431},{"description":"","name":"ACT_VM_SPRINT_ENTER","value":432},{"description":"","name":"ACT_VM_SPRINT_IDLE","value":433},{"description":"","name":"ACT_VM_SPRINT_LEAVE","value":434},{"description":"","name":"ACT_FIRE_START","value":435},{"description":"","name":"ACT_FIRE_LOOP","value":436},{"description":"","name":"ACT_FIRE_END","value":437},{"description":"","name":"ACT_CROUCHING_GRENADEIDLE","value":438},{"description":"","name":"ACT_CROUCHING_GRENADEREADY","value":439},{"description":"","name":"ACT_CROUCHING_PRIMARYATTACK","value":440},{"description":"","name":"ACT_OVERLAY_GRENADEIDLE","value":441},{"description":"","name":"ACT_OVERLAY_GRENADEREADY","value":442},{"description":"","name":"ACT_OVERLAY_PRIMARYATTACK","value":443},{"description":"","name":"ACT_OVERLAY_SHIELD_UP","value":444},{"description":"","name":"ACT_OVERLAY_SHIELD_DOWN","value":445},{"description":"","name":"ACT_OVERLAY_SHIELD_UP_IDLE","value":446},{"description":"","name":"ACT_OVERLAY_SHIELD_ATTACK","value":447},{"description":"","name":"ACT_OVERLAY_SHIELD_KNOCKBACK","value":448},{"description":"","name":"ACT_SHIELD_UP","value":449},{"description":"","name":"ACT_SHIELD_DOWN","value":450},{"description":"","name":"ACT_SHIELD_UP_IDLE","value":451},{"description":"","name":"ACT_SHIELD_ATTACK","value":452},{"description":"","name":"ACT_SHIELD_KNOCKBACK","value":453},{"description":"","name":"ACT_CROUCHING_SHIELD_UP","value":454},{"description":"","name":"ACT_CROUCHING_SHIELD_DOWN","value":455},{"description":"","name":"ACT_CROUCHING_SHIELD_UP_IDLE","value":456},{"description":"","name":"ACT_CROUCHING_SHIELD_ATTACK","value":457},{"description":"","name":"ACT_CROUCHING_SHIELD_KNOCKBACK","value":458},{"description":"","name":"ACT_TURNRIGHT45","value":459},{"description":"","name":"ACT_TURNLEFT45","value":460},{"description":"","name":"ACT_TURN","value":461},{"description":"","name":"ACT_OBJ_ASSEMBLING","value":462},{"description":"","name":"ACT_OBJ_DISMANTLING","value":463},{"description":"","name":"ACT_OBJ_STARTUP","value":464},{"description":"","name":"ACT_OBJ_RUNNING","value":465},{"description":"","name":"ACT_OBJ_IDLE","value":466},{"description":"","name":"ACT_OBJ_PLACING","value":467},{"description":"","name":"ACT_OBJ_DETERIORATING","value":468},{"description":"","name":"ACT_OBJ_UPGRADING","value":469},{"description":"","name":"ACT_DEPLOY","value":470},{"description":"","name":"ACT_DEPLOY_IDLE","value":471},{"description":"","name":"ACT_UNDEPLOY","value":472},{"description":"","name":"ACT_GRENADE_ROLL","value":473},{"description":"","name":"ACT_GRENADE_TOSS","value":474},{"description":"","name":"ACT_HANDGRENADE_THROW1","value":475},{"description":"","name":"ACT_HANDGRENADE_THROW2","value":476},{"description":"","name":"ACT_HANDGRENADE_THROW3","value":477},{"description":"","name":"ACT_SHOTGUN_IDLE_DEEP","value":478},{"description":"","name":"ACT_SHOTGUN_IDLE4","value":479},{"description":"","name":"ACT_GLOCK_SHOOTEMPTY","value":480},{"description":"","name":"ACT_GLOCK_SHOOT_RELOAD","value":481},{"description":"","name":"ACT_RPG_DRAW_UNLOADED","value":482},{"description":"","name":"ACT_RPG_HOLSTER_UNLOADED","value":483},{"description":"","name":"ACT_RPG_IDLE_UNLOADED","value":484},{"description":"","name":"ACT_RPG_FIDGET_UNLOADED","value":485},{"description":"","name":"ACT_CROSSBOW_DRAW_UNLOADED","value":486},{"description":"","name":"ACT_CROSSBOW_IDLE_UNLOADED","value":487},{"description":"","name":"ACT_CROSSBOW_FIDGET_UNLOADED","value":488},{"description":"","name":"ACT_GAUSS_SPINUP","value":489},{"description":"","name":"ACT_GAUSS_SPINCYCLE","value":490},{"description":"","name":"ACT_TRIPMINE_GROUND","value":491},{"description":"","name":"ACT_TRIPMINE_WORLD","value":492},{"description":"","name":"ACT_VM_PRIMARYATTACK_SILENCED","value":493},{"description":"","name":"ACT_VM_RELOAD_SILENCED","value":494},{"description":"","name":"ACT_VM_DRYFIRE_SILENCED","value":495},{"description":"","name":"ACT_VM_IDLE_SILENCED","value":496},{"description":"","name":"ACT_VM_DRAW_SILENCED","value":497},{"description":"","name":"ACT_VM_IDLE_EMPTY_LEFT","value":498},{"description":"","name":"ACT_VM_DRYFIRE_LEFT","value":499},{"description":"","name":"ACT_PLAYER_IDLE_FIRE","value":500},{"description":"","name":"ACT_PLAYER_CROUCH_FIRE","value":501},{"description":"","name":"ACT_PLAYER_CROUCH_WALK_FIRE","value":502},{"description":"","name":"ACT_PLAYER_WALK_FIRE","value":503},{"description":"","name":"ACT_PLAYER_RUN_FIRE","value":504},{"description":"","name":"ACT_IDLETORUN","value":505},{"description":"","name":"ACT_RUNTOIDLE","value":506},{"description":"","name":"ACT_SPRINT","value":507},{"description":"","name":"ACT_GET_DOWN_STAND","value":508},{"description":"","name":"ACT_GET_UP_STAND","value":509},{"description":"","name":"ACT_GET_DOWN_CROUCH","value":510},{"description":"","name":"ACT_GET_UP_CROUCH","value":511},{"description":"","name":"ACT_PRONE_FORWARD","value":512},{"description":"","name":"ACT_PRONE_IDLE","value":513},{"description":"","name":"ACT_DEEPIDLE1","value":514},{"description":"","name":"ACT_DEEPIDLE2","value":515},{"description":"","name":"ACT_DEEPIDLE3","value":516},{"description":"","name":"ACT_DEEPIDLE4","value":517},{"description":"","name":"ACT_VM_RELOAD_DEPLOYED","value":518},{"description":"","name":"ACT_VM_RELOAD_IDLE","value":519},{"description":"","name":"ACT_VM_DRAW_DEPLOYED","value":520},{"description":"","name":"ACT_VM_DRAW_EMPTY","value":521},{"description":"","name":"ACT_VM_PRIMARYATTACK_EMPTY","value":522},{"description":"","name":"ACT_VM_RELOAD_EMPTY","value":523},{"description":"","name":"ACT_VM_IDLE_EMPTY","value":524},{"description":"","name":"ACT_VM_IDLE_DEPLOYED_EMPTY","value":525},{"description":"","name":"ACT_VM_IDLE_8","value":526},{"description":"","name":"ACT_VM_IDLE_7","value":527},{"description":"","name":"ACT_VM_IDLE_6","value":528},{"description":"","name":"ACT_VM_IDLE_5","value":529},{"description":"","name":"ACT_VM_IDLE_4","value":530},{"description":"","name":"ACT_VM_IDLE_3","value":531},{"description":"","name":"ACT_VM_IDLE_2","value":532},{"description":"","name":"ACT_VM_IDLE_1","value":533},{"description":"","name":"ACT_VM_IDLE_DEPLOYED","value":534},{"description":"","name":"ACT_VM_IDLE_DEPLOYED_8","value":535},{"description":"","name":"ACT_VM_IDLE_DEPLOYED_7","value":536},{"description":"","name":"ACT_VM_IDLE_DEPLOYED_6","value":537},{"description":"","name":"ACT_VM_IDLE_DEPLOYED_5","value":538},{"description":"","name":"ACT_VM_IDLE_DEPLOYED_4","value":539},{"description":"","name":"ACT_VM_IDLE_DEPLOYED_3","value":540},{"description":"","name":"ACT_VM_IDLE_DEPLOYED_2","value":541},{"description":"","name":"ACT_VM_IDLE_DEPLOYED_1","value":542},{"description":"","name":"ACT_VM_UNDEPLOY","value":543},{"description":"","name":"ACT_VM_UNDEPLOY_8","value":544},{"description":"","name":"ACT_VM_UNDEPLOY_7","value":545},{"description":"","name":"ACT_VM_UNDEPLOY_6","value":546},{"description":"","name":"ACT_VM_UNDEPLOY_5","value":547},{"description":"","name":"ACT_VM_UNDEPLOY_4","value":548},{"description":"","name":"ACT_VM_UNDEPLOY_3","value":549},{"description":"","name":"ACT_VM_UNDEPLOY_2","value":550},{"description":"","name":"ACT_VM_UNDEPLOY_1","value":551},{"description":"","name":"ACT_VM_UNDEPLOY_EMPTY","value":552},{"description":"","name":"ACT_VM_DEPLOY","value":553},{"description":"","name":"ACT_VM_DEPLOY_8","value":554},{"description":"","name":"ACT_VM_DEPLOY_7","value":555},{"description":"","name":"ACT_VM_DEPLOY_6","value":556},{"description":"","name":"ACT_VM_DEPLOY_5","value":557},{"description":"","name":"ACT_VM_DEPLOY_4","value":558},{"description":"","name":"ACT_VM_DEPLOY_3","value":559},{"description":"","name":"ACT_VM_DEPLOY_2","value":560},{"description":"","name":"ACT_VM_DEPLOY_1","value":561},{"description":"","name":"ACT_VM_DEPLOY_EMPTY","value":562},{"description":"","name":"ACT_VM_PRIMARYATTACK_8","value":563},{"description":"","name":"ACT_VM_PRIMARYATTACK_7","value":564},{"description":"","name":"ACT_VM_PRIMARYATTACK_6","value":565},{"description":"","name":"ACT_VM_PRIMARYATTACK_5","value":566},{"description":"","name":"ACT_VM_PRIMARYATTACK_4","value":567},{"description":"","name":"ACT_VM_PRIMARYATTACK_3","value":568},{"description":"","name":"ACT_VM_PRIMARYATTACK_2","value":569},{"description":"","name":"ACT_VM_PRIMARYATTACK_1","value":570},{"description":"","name":"ACT_VM_PRIMARYATTACK_DEPLOYED","value":571},{"description":"","name":"ACT_VM_PRIMARYATTACK_DEPLOYED_8","value":572},{"description":"","name":"ACT_VM_PRIMARYATTACK_DEPLOYED_7","value":573},{"description":"","name":"ACT_VM_PRIMARYATTACK_DEPLOYED_6","value":574},{"description":"","name":"ACT_VM_PRIMARYATTACK_DEPLOYED_5","value":575},{"description":"","name":"ACT_VM_PRIMARYATTACK_DEPLOYED_4","value":576},{"description":"","name":"ACT_VM_PRIMARYATTACK_DEPLOYED_3","value":577},{"description":"","name":"ACT_VM_PRIMARYATTACK_DEPLOYED_2","value":578},{"description":"","name":"ACT_VM_PRIMARYATTACK_DEPLOYED_1","value":579},{"description":"","name":"ACT_VM_PRIMARYATTACK_DEPLOYED_EMPTY","value":580},{"description":"","name":"ACT_DOD_DEPLOYED","value":581},{"description":"","name":"ACT_DOD_PRONE_DEPLOYED","value":582},{"description":"","name":"ACT_DOD_IDLE_ZOOMED","value":583},{"description":"","name":"ACT_DOD_WALK_ZOOMED","value":584},{"description":"","name":"ACT_DOD_CROUCH_ZOOMED","value":585},{"description":"","name":"ACT_DOD_CROUCHWALK_ZOOMED","value":586},{"description":"","name":"ACT_DOD_PRONE_ZOOMED","value":587},{"description":"","name":"ACT_DOD_PRONE_FORWARD_ZOOMED","value":588},{"description":"","name":"ACT_DOD_PRIMARYATTACK_DEPLOYED","value":589},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED","value":590},{"description":"","name":"ACT_DOD_RELOAD_DEPLOYED","value":591},{"description":"","name":"ACT_DOD_RELOAD_PRONE_DEPLOYED","value":592},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE","value":593},{"description":"","name":"ACT_DOD_SECONDARYATTACK_PRONE","value":594},{"description":"","name":"ACT_DOD_RELOAD_CROUCH","value":595},{"description":"","name":"ACT_DOD_RELOAD_PRONE","value":596},{"description":"","name":"ACT_DOD_STAND_IDLE","value":597},{"description":"","name":"ACT_DOD_STAND_AIM","value":598},{"description":"","name":"ACT_DOD_CROUCH_IDLE","value":599},{"description":"","name":"ACT_DOD_CROUCH_AIM","value":600},{"description":"","name":"ACT_DOD_CROUCHWALK_IDLE","value":601},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM","value":602},{"description":"","name":"ACT_DOD_WALK_IDLE","value":603},{"description":"","name":"ACT_DOD_WALK_AIM","value":604},{"description":"","name":"ACT_DOD_RUN_IDLE","value":605},{"description":"","name":"ACT_DOD_RUN_AIM","value":606},{"description":"","name":"ACT_DOD_STAND_AIM_PISTOL","value":607},{"description":"","name":"ACT_DOD_CROUCH_AIM_PISTOL","value":608},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM_PISTOL","value":609},{"description":"","name":"ACT_DOD_WALK_AIM_PISTOL","value":610},{"description":"","name":"ACT_DOD_RUN_AIM_PISTOL","value":611},{"description":"","name":"ACT_DOD_PRONE_AIM_PISTOL","value":612},{"description":"","name":"ACT_DOD_STAND_IDLE_PISTOL","value":613},{"description":"","name":"ACT_DOD_CROUCH_IDLE_PISTOL","value":614},{"description":"","name":"ACT_DOD_CROUCHWALK_IDLE_PISTOL","value":615},{"description":"","name":"ACT_DOD_WALK_IDLE_PISTOL","value":616},{"description":"","name":"ACT_DOD_RUN_IDLE_PISTOL","value":617},{"description":"","name":"ACT_DOD_SPRINT_IDLE_PISTOL","value":618},{"description":"","name":"ACT_DOD_PRONEWALK_IDLE_PISTOL","value":619},{"description":"","name":"ACT_DOD_STAND_AIM_C96","value":620},{"description":"","name":"ACT_DOD_CROUCH_AIM_C96","value":621},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM_C96","value":622},{"description":"","name":"ACT_DOD_WALK_AIM_C96","value":623},{"description":"","name":"ACT_DOD_RUN_AIM_C96","value":624},{"description":"","name":"ACT_DOD_PRONE_AIM_C96","value":625},{"description":"","name":"ACT_DOD_STAND_IDLE_C96","value":626},{"description":"","name":"ACT_DOD_CROUCH_IDLE_C96","value":627},{"description":"","name":"ACT_DOD_CROUCHWALK_IDLE_C96","value":628},{"description":"","name":"ACT_DOD_WALK_IDLE_C96","value":629},{"description":"","name":"ACT_DOD_RUN_IDLE_C96","value":630},{"description":"","name":"ACT_DOD_SPRINT_IDLE_C96","value":631},{"description":"","name":"ACT_DOD_PRONEWALK_IDLE_C96","value":632},{"description":"","name":"ACT_DOD_STAND_AIM_RIFLE","value":633},{"description":"","name":"ACT_DOD_CROUCH_AIM_RIFLE","value":634},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM_RIFLE","value":635},{"description":"","name":"ACT_DOD_WALK_AIM_RIFLE","value":636},{"description":"","name":"ACT_DOD_RUN_AIM_RIFLE","value":637},{"description":"","name":"ACT_DOD_PRONE_AIM_RIFLE","value":638},{"description":"","name":"ACT_DOD_STAND_IDLE_RIFLE","value":639},{"description":"","name":"ACT_DOD_CROUCH_IDLE_RIFLE","value":640},{"description":"","name":"ACT_DOD_CROUCHWALK_IDLE_RIFLE","value":641},{"description":"","name":"ACT_DOD_WALK_IDLE_RIFLE","value":642},{"description":"","name":"ACT_DOD_RUN_IDLE_RIFLE","value":643},{"description":"","name":"ACT_DOD_SPRINT_IDLE_RIFLE","value":644},{"description":"","name":"ACT_DOD_PRONEWALK_IDLE_RIFLE","value":645},{"description":"","name":"ACT_DOD_STAND_AIM_BOLT","value":646},{"description":"","name":"ACT_DOD_CROUCH_AIM_BOLT","value":647},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM_BOLT","value":648},{"description":"","name":"ACT_DOD_WALK_AIM_BOLT","value":649},{"description":"","name":"ACT_DOD_RUN_AIM_BOLT","value":650},{"description":"","name":"ACT_DOD_PRONE_AIM_BOLT","value":651},{"description":"","name":"ACT_DOD_STAND_IDLE_BOLT","value":652},{"description":"","name":"ACT_DOD_CROUCH_IDLE_BOLT","value":653},{"description":"","name":"ACT_DOD_CROUCHWALK_IDLE_BOLT","value":654},{"description":"","name":"ACT_DOD_WALK_IDLE_BOLT","value":655},{"description":"","name":"ACT_DOD_RUN_IDLE_BOLT","value":656},{"description":"","name":"ACT_DOD_SPRINT_IDLE_BOLT","value":657},{"description":"","name":"ACT_DOD_PRONEWALK_IDLE_BOLT","value":658},{"description":"","name":"ACT_DOD_STAND_AIM_TOMMY","value":659},{"description":"","name":"ACT_DOD_CROUCH_AIM_TOMMY","value":660},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM_TOMMY","value":661},{"description":"","name":"ACT_DOD_WALK_AIM_TOMMY","value":662},{"description":"","name":"ACT_DOD_RUN_AIM_TOMMY","value":663},{"description":"","name":"ACT_DOD_PRONE_AIM_TOMMY","value":664},{"description":"","name":"ACT_DOD_STAND_IDLE_TOMMY","value":665},{"description":"","name":"ACT_DOD_CROUCH_IDLE_TOMMY","value":666},{"description":"","name":"ACT_DOD_CROUCHWALK_IDLE_TOMMY","value":667},{"description":"","name":"ACT_DOD_WALK_IDLE_TOMMY","value":668},{"description":"","name":"ACT_DOD_RUN_IDLE_TOMMY","value":669},{"description":"","name":"ACT_DOD_SPRINT_IDLE_TOMMY","value":670},{"description":"","name":"ACT_DOD_PRONEWALK_IDLE_TOMMY","value":671},{"description":"","name":"ACT_DOD_STAND_AIM_MP40","value":672},{"description":"","name":"ACT_DOD_CROUCH_AIM_MP40","value":673},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM_MP40","value":674},{"description":"","name":"ACT_DOD_WALK_AIM_MP40","value":675},{"description":"","name":"ACT_DOD_RUN_AIM_MP40","value":676},{"description":"","name":"ACT_DOD_PRONE_AIM_MP40","value":677},{"description":"","name":"ACT_DOD_STAND_IDLE_MP40","value":678},{"description":"","name":"ACT_DOD_CROUCH_IDLE_MP40","value":679},{"description":"","name":"ACT_DOD_CROUCHWALK_IDLE_MP40","value":680},{"description":"","name":"ACT_DOD_WALK_IDLE_MP40","value":681},{"description":"","name":"ACT_DOD_RUN_IDLE_MP40","value":682},{"description":"","name":"ACT_DOD_SPRINT_IDLE_MP40","value":683},{"description":"","name":"ACT_DOD_PRONEWALK_IDLE_MP40","value":684},{"description":"","name":"ACT_DOD_STAND_AIM_MP44","value":685},{"description":"","name":"ACT_DOD_CROUCH_AIM_MP44","value":686},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM_MP44","value":687},{"description":"","name":"ACT_DOD_WALK_AIM_MP44","value":688},{"description":"","name":"ACT_DOD_RUN_AIM_MP44","value":689},{"description":"","name":"ACT_DOD_PRONE_AIM_MP44","value":690},{"description":"","name":"ACT_DOD_STAND_IDLE_MP44","value":691},{"description":"","name":"ACT_DOD_CROUCH_IDLE_MP44","value":692},{"description":"","name":"ACT_DOD_CROUCHWALK_IDLE_MP44","value":693},{"description":"","name":"ACT_DOD_WALK_IDLE_MP44","value":694},{"description":"","name":"ACT_DOD_RUN_IDLE_MP44","value":695},{"description":"","name":"ACT_DOD_SPRINT_IDLE_MP44","value":696},{"description":"","name":"ACT_DOD_PRONEWALK_IDLE_MP44","value":697},{"description":"","name":"ACT_DOD_STAND_AIM_GREASE","value":698},{"description":"","name":"ACT_DOD_CROUCH_AIM_GREASE","value":699},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM_GREASE","value":700},{"description":"","name":"ACT_DOD_WALK_AIM_GREASE","value":701},{"description":"","name":"ACT_DOD_RUN_AIM_GREASE","value":702},{"description":"","name":"ACT_DOD_PRONE_AIM_GREASE","value":703},{"description":"","name":"ACT_DOD_STAND_IDLE_GREASE","value":704},{"description":"","name":"ACT_DOD_CROUCH_IDLE_GREASE","value":705},{"description":"","name":"ACT_DOD_CROUCHWALK_IDLE_GREASE","value":706},{"description":"","name":"ACT_DOD_WALK_IDLE_GREASE","value":707},{"description":"","name":"ACT_DOD_RUN_IDLE_GREASE","value":708},{"description":"","name":"ACT_DOD_SPRINT_IDLE_GREASE","value":709},{"description":"","name":"ACT_DOD_PRONEWALK_IDLE_GREASE","value":710},{"description":"","name":"ACT_DOD_STAND_AIM_MG","value":711},{"description":"","name":"ACT_DOD_CROUCH_AIM_MG","value":712},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM_MG","value":713},{"description":"","name":"ACT_DOD_WALK_AIM_MG","value":714},{"description":"","name":"ACT_DOD_RUN_AIM_MG","value":715},{"description":"","name":"ACT_DOD_PRONE_AIM_MG","value":716},{"description":"","name":"ACT_DOD_STAND_IDLE_MG","value":717},{"description":"","name":"ACT_DOD_CROUCH_IDLE_MG","value":718},{"description":"","name":"ACT_DOD_CROUCHWALK_IDLE_MG","value":719},{"description":"","name":"ACT_DOD_WALK_IDLE_MG","value":720},{"description":"","name":"ACT_DOD_RUN_IDLE_MG","value":721},{"description":"","name":"ACT_DOD_SPRINT_IDLE_MG","value":722},{"description":"","name":"ACT_DOD_PRONEWALK_IDLE_MG","value":723},{"description":"","name":"ACT_DOD_STAND_AIM_30CAL","value":724},{"description":"","name":"ACT_DOD_CROUCH_AIM_30CAL","value":725},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM_30CAL","value":726},{"description":"","name":"ACT_DOD_WALK_AIM_30CAL","value":727},{"description":"","name":"ACT_DOD_RUN_AIM_30CAL","value":728},{"description":"","name":"ACT_DOD_PRONE_AIM_30CAL","value":729},{"description":"","name":"ACT_DOD_STAND_IDLE_30CAL","value":730},{"description":"","name":"ACT_DOD_CROUCH_IDLE_30CAL","value":731},{"description":"","name":"ACT_DOD_CROUCHWALK_IDLE_30CAL","value":732},{"description":"","name":"ACT_DOD_WALK_IDLE_30CAL","value":733},{"description":"","name":"ACT_DOD_RUN_IDLE_30CAL","value":734},{"description":"","name":"ACT_DOD_SPRINT_IDLE_30CAL","value":735},{"description":"","name":"ACT_DOD_PRONEWALK_IDLE_30CAL","value":736},{"description":"","name":"ACT_DOD_STAND_AIM_GREN_FRAG","value":737},{"description":"","name":"ACT_DOD_CROUCH_AIM_GREN_FRAG","value":738},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM_GREN_FRAG","value":739},{"description":"","name":"ACT_DOD_WALK_AIM_GREN_FRAG","value":740},{"description":"","name":"ACT_DOD_RUN_AIM_GREN_FRAG","value":741},{"description":"","name":"ACT_DOD_PRONE_AIM_GREN_FRAG","value":742},{"description":"","name":"ACT_DOD_SPRINT_AIM_GREN_FRAG","value":743},{"description":"","name":"ACT_DOD_PRONEWALK_AIM_GREN_FRAG","value":744},{"description":"","name":"ACT_DOD_STAND_AIM_GREN_STICK","value":745},{"description":"","name":"ACT_DOD_CROUCH_AIM_GREN_STICK","value":746},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM_GREN_STICK","value":747},{"description":"","name":"ACT_DOD_WALK_AIM_GREN_STICK","value":748},{"description":"","name":"ACT_DOD_RUN_AIM_GREN_STICK","value":749},{"description":"","name":"ACT_DOD_PRONE_AIM_GREN_STICK","value":750},{"description":"","name":"ACT_DOD_SPRINT_AIM_GREN_STICK","value":751},{"description":"","name":"ACT_DOD_PRONEWALK_AIM_GREN_STICK","value":752},{"description":"","name":"ACT_DOD_STAND_AIM_KNIFE","value":753},{"description":"","name":"ACT_DOD_CROUCH_AIM_KNIFE","value":754},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM_KNIFE","value":755},{"description":"","name":"ACT_DOD_WALK_AIM_KNIFE","value":756},{"description":"","name":"ACT_DOD_RUN_AIM_KNIFE","value":757},{"description":"","name":"ACT_DOD_PRONE_AIM_KNIFE","value":758},{"description":"","name":"ACT_DOD_SPRINT_AIM_KNIFE","value":759},{"description":"","name":"ACT_DOD_PRONEWALK_AIM_KNIFE","value":760},{"description":"","name":"ACT_DOD_STAND_AIM_SPADE","value":761},{"description":"","name":"ACT_DOD_CROUCH_AIM_SPADE","value":762},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM_SPADE","value":763},{"description":"","name":"ACT_DOD_WALK_AIM_SPADE","value":764},{"description":"","name":"ACT_DOD_RUN_AIM_SPADE","value":765},{"description":"","name":"ACT_DOD_PRONE_AIM_SPADE","value":766},{"description":"","name":"ACT_DOD_SPRINT_AIM_SPADE","value":767},{"description":"","name":"ACT_DOD_PRONEWALK_AIM_SPADE","value":768},{"description":"","name":"ACT_DOD_STAND_AIM_BAZOOKA","value":769},{"description":"","name":"ACT_DOD_CROUCH_AIM_BAZOOKA","value":770},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM_BAZOOKA","value":771},{"description":"","name":"ACT_DOD_WALK_AIM_BAZOOKA","value":772},{"description":"","name":"ACT_DOD_RUN_AIM_BAZOOKA","value":773},{"description":"","name":"ACT_DOD_PRONE_AIM_BAZOOKA","value":774},{"description":"","name":"ACT_DOD_STAND_IDLE_BAZOOKA","value":775},{"description":"","name":"ACT_DOD_CROUCH_IDLE_BAZOOKA","value":776},{"description":"","name":"ACT_DOD_CROUCHWALK_IDLE_BAZOOKA","value":777},{"description":"","name":"ACT_DOD_WALK_IDLE_BAZOOKA","value":778},{"description":"","name":"ACT_DOD_RUN_IDLE_BAZOOKA","value":779},{"description":"","name":"ACT_DOD_SPRINT_IDLE_BAZOOKA","value":780},{"description":"","name":"ACT_DOD_PRONEWALK_IDLE_BAZOOKA","value":781},{"description":"","name":"ACT_DOD_STAND_AIM_PSCHRECK","value":782},{"description":"","name":"ACT_DOD_CROUCH_AIM_PSCHRECK","value":783},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM_PSCHRECK","value":784},{"description":"","name":"ACT_DOD_WALK_AIM_PSCHRECK","value":785},{"description":"","name":"ACT_DOD_RUN_AIM_PSCHRECK","value":786},{"description":"","name":"ACT_DOD_PRONE_AIM_PSCHRECK","value":787},{"description":"","name":"ACT_DOD_STAND_IDLE_PSCHRECK","value":788},{"description":"","name":"ACT_DOD_CROUCH_IDLE_PSCHRECK","value":789},{"description":"","name":"ACT_DOD_CROUCHWALK_IDLE_PSCHRECK","value":790},{"description":"","name":"ACT_DOD_WALK_IDLE_PSCHRECK","value":791},{"description":"","name":"ACT_DOD_RUN_IDLE_PSCHRECK","value":792},{"description":"","name":"ACT_DOD_SPRINT_IDLE_PSCHRECK","value":793},{"description":"","name":"ACT_DOD_PRONEWALK_IDLE_PSCHRECK","value":794},{"description":"","name":"ACT_DOD_STAND_AIM_BAR","value":795},{"description":"","name":"ACT_DOD_CROUCH_AIM_BAR","value":796},{"description":"","name":"ACT_DOD_CROUCHWALK_AIM_BAR","value":797},{"description":"","name":"ACT_DOD_WALK_AIM_BAR","value":798},{"description":"","name":"ACT_DOD_RUN_AIM_BAR","value":799},{"description":"","name":"ACT_DOD_PRONE_AIM_BAR","value":800},{"description":"","name":"ACT_DOD_STAND_IDLE_BAR","value":801},{"description":"","name":"ACT_DOD_CROUCH_IDLE_BAR","value":802},{"description":"","name":"ACT_DOD_CROUCHWALK_IDLE_BAR","value":803},{"description":"","name":"ACT_DOD_WALK_IDLE_BAR","value":804},{"description":"","name":"ACT_DOD_RUN_IDLE_BAR","value":805},{"description":"","name":"ACT_DOD_SPRINT_IDLE_BAR","value":806},{"description":"","name":"ACT_DOD_PRONEWALK_IDLE_BAR","value":807},{"description":"","name":"ACT_DOD_STAND_ZOOM_RIFLE","value":808},{"description":"","name":"ACT_DOD_CROUCH_ZOOM_RIFLE","value":809},{"description":"","name":"ACT_DOD_CROUCHWALK_ZOOM_RIFLE","value":810},{"description":"","name":"ACT_DOD_WALK_ZOOM_RIFLE","value":811},{"description":"","name":"ACT_DOD_RUN_ZOOM_RIFLE","value":812},{"description":"","name":"ACT_DOD_PRONE_ZOOM_RIFLE","value":813},{"description":"","name":"ACT_DOD_STAND_ZOOM_BOLT","value":814},{"description":"","name":"ACT_DOD_CROUCH_ZOOM_BOLT","value":815},{"description":"","name":"ACT_DOD_CROUCHWALK_ZOOM_BOLT","value":816},{"description":"","name":"ACT_DOD_WALK_ZOOM_BOLT","value":817},{"description":"","name":"ACT_DOD_RUN_ZOOM_BOLT","value":818},{"description":"","name":"ACT_DOD_PRONE_ZOOM_BOLT","value":819},{"description":"","name":"ACT_DOD_STAND_ZOOM_BAZOOKA","value":820},{"description":"","name":"ACT_DOD_CROUCH_ZOOM_BAZOOKA","value":821},{"description":"","name":"ACT_DOD_CROUCHWALK_ZOOM_BAZOOKA","value":822},{"description":"","name":"ACT_DOD_WALK_ZOOM_BAZOOKA","value":823},{"description":"","name":"ACT_DOD_RUN_ZOOM_BAZOOKA","value":824},{"description":"","name":"ACT_DOD_PRONE_ZOOM_BAZOOKA","value":825},{"description":"","name":"ACT_DOD_STAND_ZOOM_PSCHRECK","value":826},{"description":"","name":"ACT_DOD_CROUCH_ZOOM_PSCHRECK","value":827},{"description":"","name":"ACT_DOD_CROUCHWALK_ZOOM_PSCHRECK","value":828},{"description":"","name":"ACT_DOD_WALK_ZOOM_PSCHRECK","value":829},{"description":"","name":"ACT_DOD_RUN_ZOOM_PSCHRECK","value":830},{"description":"","name":"ACT_DOD_PRONE_ZOOM_PSCHRECK","value":831},{"description":"","name":"ACT_DOD_DEPLOY_RIFLE","value":832},{"description":"","name":"ACT_DOD_DEPLOY_TOMMY","value":833},{"description":"","name":"ACT_DOD_DEPLOY_MG","value":834},{"description":"","name":"ACT_DOD_DEPLOY_30CAL","value":835},{"description":"","name":"ACT_DOD_PRONE_DEPLOY_RIFLE","value":836},{"description":"","name":"ACT_DOD_PRONE_DEPLOY_TOMMY","value":837},{"description":"","name":"ACT_DOD_PRONE_DEPLOY_MG","value":838},{"description":"","name":"ACT_DOD_PRONE_DEPLOY_30CAL","value":839},{"description":"","name":"ACT_DOD_PRIMARYATTACK_RIFLE","value":840},{"description":"","name":"ACT_DOD_SECONDARYATTACK_RIFLE","value":841},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_RIFLE","value":842},{"description":"","name":"ACT_DOD_SECONDARYATTACK_PRONE_RIFLE","value":843},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_RIFLE","value":844},{"description":"","name":"ACT_DOD_PRIMARYATTACK_DEPLOYED_RIFLE","value":845},{"description":"","name":"ACT_DOD_PRIMARYATTACK_BOLT","value":846},{"description":"","name":"ACT_DOD_SECONDARYATTACK_BOLT","value":847},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_BOLT","value":848},{"description":"","name":"ACT_DOD_SECONDARYATTACK_PRONE_BOLT","value":849},{"description":"","name":"ACT_DOD_PRIMARYATTACK_TOMMY","value":850},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_TOMMY","value":851},{"description":"","name":"ACT_DOD_SECONDARYATTACK_TOMMY","value":852},{"description":"","name":"ACT_DOD_SECONDARYATTACK_PRONE_TOMMY","value":853},{"description":"","name":"ACT_DOD_PRIMARYATTACK_MP40","value":854},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_MP40","value":855},{"description":"","name":"ACT_DOD_SECONDARYATTACK_MP40","value":856},{"description":"","name":"ACT_DOD_SECONDARYATTACK_PRONE_MP40","value":857},{"description":"","name":"ACT_DOD_PRIMARYATTACK_MP44","value":858},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_MP44","value":859},{"description":"","name":"ACT_DOD_PRIMARYATTACK_GREASE","value":860},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_GREASE","value":861},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PISTOL","value":862},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_PISTOL","value":863},{"description":"","name":"ACT_DOD_PRIMARYATTACK_C96","value":864},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_C96","value":865},{"description":"","name":"ACT_DOD_PRIMARYATTACK_MG","value":866},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_MG","value":867},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_MG","value":868},{"description":"","name":"ACT_DOD_PRIMARYATTACK_DEPLOYED_MG","value":869},{"description":"","name":"ACT_DOD_PRIMARYATTACK_30CAL","value":870},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_30CAL","value":871},{"description":"","name":"ACT_DOD_PRIMARYATTACK_DEPLOYED_30CAL","value":872},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_30CAL","value":873},{"description":"","name":"ACT_DOD_PRIMARYATTACK_GREN_FRAG","value":874},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_GREN_FRAG","value":875},{"description":"","name":"ACT_DOD_PRIMARYATTACK_GREN_STICK","value":876},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_GREN_STICK","value":877},{"description":"","name":"ACT_DOD_PRIMARYATTACK_KNIFE","value":878},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_KNIFE","value":879},{"description":"","name":"ACT_DOD_PRIMARYATTACK_SPADE","value":880},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_SPADE","value":881},{"description":"","name":"ACT_DOD_PRIMARYATTACK_BAZOOKA","value":882},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_BAZOOKA","value":883},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PSCHRECK","value":884},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_PSCHRECK","value":885},{"description":"","name":"ACT_DOD_PRIMARYATTACK_BAR","value":886},{"description":"","name":"ACT_DOD_PRIMARYATTACK_PRONE_BAR","value":887},{"description":"","name":"ACT_DOD_RELOAD_GARAND","value":888},{"description":"","name":"ACT_DOD_RELOAD_K43","value":889},{"description":"","name":"ACT_DOD_RELOAD_BAR","value":890},{"description":"","name":"ACT_DOD_RELOAD_MP40","value":891},{"description":"","name":"ACT_DOD_RELOAD_MP44","value":892},{"description":"","name":"ACT_DOD_RELOAD_BOLT","value":893},{"description":"","name":"ACT_DOD_RELOAD_M1CARBINE","value":894},{"description":"","name":"ACT_DOD_RELOAD_TOMMY","value":895},{"description":"","name":"ACT_DOD_RELOAD_GREASEGUN","value":896},{"description":"","name":"ACT_DOD_RELOAD_PISTOL","value":897},{"description":"","name":"ACT_DOD_RELOAD_FG42","value":898},{"description":"","name":"ACT_DOD_RELOAD_RIFLE","value":899},{"description":"","name":"ACT_DOD_RELOAD_RIFLEGRENADE","value":900},{"description":"","name":"ACT_DOD_RELOAD_C96","value":901},{"description":"","name":"ACT_DOD_RELOAD_CROUCH_BAR","value":902},{"description":"","name":"ACT_DOD_RELOAD_CROUCH_RIFLE","value":903},{"description":"","name":"ACT_DOD_RELOAD_CROUCH_RIFLEGRENADE","value":904},{"description":"","name":"ACT_DOD_RELOAD_CROUCH_BOLT","value":905},{"description":"","name":"ACT_DOD_RELOAD_CROUCH_MP44","value":906},{"description":"","name":"ACT_DOD_RELOAD_CROUCH_MP40","value":907},{"description":"","name":"ACT_DOD_RELOAD_CROUCH_TOMMY","value":908},{"description":"","name":"ACT_DOD_RELOAD_CROUCH_BAZOOKA","value":909},{"description":"","name":"ACT_DOD_RELOAD_CROUCH_PSCHRECK","value":910},{"description":"","name":"ACT_DOD_RELOAD_CROUCH_PISTOL","value":911},{"description":"","name":"ACT_DOD_RELOAD_CROUCH_M1CARBINE","value":912},{"description":"","name":"ACT_DOD_RELOAD_CROUCH_C96","value":913},{"description":"","name":"ACT_DOD_RELOAD_BAZOOKA","value":914},{"description":"","name":"ACT_DOD_ZOOMLOAD_BAZOOKA","value":915},{"description":"","name":"ACT_DOD_RELOAD_PSCHRECK","value":916},{"description":"","name":"ACT_DOD_ZOOMLOAD_PSCHRECK","value":917},{"description":"","name":"ACT_DOD_RELOAD_DEPLOYED_FG42","value":918},{"description":"","name":"ACT_DOD_RELOAD_DEPLOYED_30CAL","value":919},{"description":"","name":"ACT_DOD_RELOAD_DEPLOYED_MG","value":920},{"description":"","name":"ACT_DOD_RELOAD_DEPLOYED_MG34","value":921},{"description":"","name":"ACT_DOD_RELOAD_DEPLOYED_BAR","value":922},{"description":"","name":"ACT_DOD_RELOAD_PRONE_PISTOL","value":923},{"description":"","name":"ACT_DOD_RELOAD_PRONE_GARAND","value":924},{"description":"","name":"ACT_DOD_RELOAD_PRONE_M1CARBINE","value":925},{"description":"","name":"ACT_DOD_RELOAD_PRONE_BOLT","value":926},{"description":"","name":"ACT_DOD_RELOAD_PRONE_K43","value":927},{"description":"","name":"ACT_DOD_RELOAD_PRONE_MP40","value":928},{"description":"","name":"ACT_DOD_RELOAD_PRONE_MP44","value":929},{"description":"","name":"ACT_DOD_RELOAD_PRONE_BAR","value":930},{"description":"","name":"ACT_DOD_RELOAD_PRONE_GREASEGUN","value":931},{"description":"","name":"ACT_DOD_RELOAD_PRONE_TOMMY","value":932},{"description":"","name":"ACT_DOD_RELOAD_PRONE_FG42","value":933},{"description":"","name":"ACT_DOD_RELOAD_PRONE_RIFLE","value":934},{"description":"","name":"ACT_DOD_RELOAD_PRONE_RIFLEGRENADE","value":935},{"description":"","name":"ACT_DOD_RELOAD_PRONE_C96","value":936},{"description":"","name":"ACT_DOD_RELOAD_PRONE_BAZOOKA","value":937},{"description":"","name":"ACT_DOD_ZOOMLOAD_PRONE_BAZOOKA","value":938},{"description":"","name":"ACT_DOD_RELOAD_PRONE_PSCHRECK","value":939},{"description":"","name":"ACT_DOD_ZOOMLOAD_PRONE_PSCHRECK","value":940},{"description":"","name":"ACT_DOD_RELOAD_PRONE_DEPLOYED_BAR","value":941},{"description":"","name":"ACT_DOD_RELOAD_PRONE_DEPLOYED_FG42","value":942},{"description":"","name":"ACT_DOD_RELOAD_PRONE_DEPLOYED_30CAL","value":943},{"description":"","name":"ACT_DOD_RELOAD_PRONE_DEPLOYED_MG","value":944},{"description":"","name":"ACT_DOD_RELOAD_PRONE_DEPLOYED_MG34","value":945},{"description":"","name":"ACT_DOD_PRONE_ZOOM_FORWARD_RIFLE","value":946},{"description":"","name":"ACT_DOD_PRONE_ZOOM_FORWARD_BOLT","value":947},{"description":"","name":"ACT_DOD_PRONE_ZOOM_FORWARD_BAZOOKA","value":948},{"description":"","name":"ACT_DOD_PRONE_ZOOM_FORWARD_PSCHRECK","value":949},{"description":"","name":"ACT_DOD_PRIMARYATTACK_CROUCH","value":950},{"description":"","name":"ACT_DOD_PRIMARYATTACK_CROUCH_SPADE","value":951},{"description":"","name":"ACT_DOD_PRIMARYATTACK_CROUCH_KNIFE","value":952},{"description":"","name":"ACT_DOD_PRIMARYATTACK_CROUCH_GREN_FRAG","value":953},{"description":"","name":"ACT_DOD_PRIMARYATTACK_CROUCH_GREN_STICK","value":954},{"description":"","name":"ACT_DOD_SECONDARYATTACK_CROUCH","value":955},{"description":"","name":"ACT_DOD_SECONDARYATTACK_CROUCH_TOMMY","value":956},{"description":"","name":"ACT_DOD_SECONDARYATTACK_CROUCH_MP40","value":957},{"description":"","name":"ACT_DOD_HS_IDLE","value":958},{"description":"","name":"ACT_DOD_HS_CROUCH","value":959},{"description":"","name":"ACT_DOD_HS_IDLE_30CAL","value":960},{"description":"","name":"ACT_DOD_HS_IDLE_BAZOOKA","value":961},{"description":"","name":"ACT_DOD_HS_IDLE_PSCHRECK","value":962},{"description":"","name":"ACT_DOD_HS_IDLE_KNIFE","value":963},{"description":"","name":"ACT_DOD_HS_IDLE_MG42","value":964},{"description":"","name":"ACT_DOD_HS_IDLE_PISTOL","value":965},{"description":"","name":"ACT_DOD_HS_IDLE_STICKGRENADE","value":966},{"description":"","name":"ACT_DOD_HS_IDLE_TOMMY","value":967},{"description":"","name":"ACT_DOD_HS_IDLE_MP44","value":968},{"description":"","name":"ACT_DOD_HS_IDLE_K98","value":969},{"description":"","name":"ACT_DOD_HS_CROUCH_30CAL","value":970},{"description":"","name":"ACT_DOD_HS_CROUCH_BAZOOKA","value":971},{"description":"","name":"ACT_DOD_HS_CROUCH_PSCHRECK","value":972},{"description":"","name":"ACT_DOD_HS_CROUCH_KNIFE","value":973},{"description":"","name":"ACT_DOD_HS_CROUCH_MG42","value":974},{"description":"","name":"ACT_DOD_HS_CROUCH_PISTOL","value":975},{"description":"","name":"ACT_DOD_HS_CROUCH_STICKGRENADE","value":976},{"description":"","name":"ACT_DOD_HS_CROUCH_TOMMY","value":977},{"description":"","name":"ACT_DOD_HS_CROUCH_MP44","value":978},{"description":"","name":"ACT_DOD_HS_CROUCH_K98","value":979},{"description":"","name":"ACT_DOD_STAND_IDLE_TNT","value":980},{"description":"","name":"ACT_DOD_CROUCH_IDLE_TNT","value":981},{"description":"","name":"ACT_DOD_CROUCHWALK_IDLE_TNT","value":982},{"description":"","name":"ACT_DOD_WALK_IDLE_TNT","value":983},{"description":"","name":"ACT_DOD_RUN_IDLE_TNT","value":984},{"description":"","name":"ACT_DOD_SPRINT_IDLE_TNT","value":985},{"description":"","name":"ACT_DOD_PRONEWALK_IDLE_TNT","value":986},{"description":"","name":"ACT_DOD_PLANT_TNT","value":987},{"description":"","name":"ACT_DOD_DEFUSE_TNT","value":988},{"description":"","name":"ACT_VM_FIZZLE","value":989},{"description":"","name":"ACT_MP_STAND_IDLE","value":990},{"description":"","name":"ACT_MP_CROUCH_IDLE","value":991},{"description":"","name":"ACT_MP_CROUCH_DEPLOYED_IDLE","value":992},{"description":"","name":"ACT_MP_CROUCH_DEPLOYED","value":993},{"description":"","name":"ACT_MP_DEPLOYED_IDLE","value":995},{"description":"","name":"ACT_MP_RUN","value":996},{"description":"","name":"ACT_MP_WALK","value":997},{"description":"","name":"ACT_MP_AIRWALK","value":998},{"description":"","name":"ACT_MP_CROUCHWALK","value":999},{"description":"","name":"ACT_MP_SPRINT","value":1000},{"description":"","name":"ACT_MP_JUMP","value":1001},{"description":"","name":"ACT_MP_JUMP_START","value":1002},{"description":"","name":"ACT_MP_JUMP_FLOAT","value":1003},{"description":"","name":"ACT_MP_JUMP_LAND","value":1004},{"description":"","name":"ACT_MP_DOUBLEJUMP","value":1005},{"description":"","name":"ACT_MP_SWIM","value":1006},{"description":"","name":"ACT_MP_DEPLOYED","value":1007},{"description":"","name":"ACT_MP_SWIM_DEPLOYED","value":1008},{"description":"","name":"ACT_MP_VCD","value":1009},{"description":"","name":"ACT_MP_SWIM_IDLE","value":1010},{"description":"","name":"ACT_MP_ATTACK_STAND_PRIMARYFIRE","value":1011},{"description":"","name":"ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED","value":1012},{"description":"","name":"ACT_MP_ATTACK_STAND_SECONDARYFIRE","value":1013},{"description":"","name":"ACT_MP_ATTACK_STAND_GRENADE","value":1014},{"description":"","name":"ACT_MP_ATTACK_CROUCH_PRIMARYFIRE","value":1015},{"description":"","name":"ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED","value":1016},{"description":"","name":"ACT_MP_ATTACK_CROUCH_SECONDARYFIRE","value":1017},{"description":"","name":"ACT_MP_ATTACK_CROUCH_GRENADE","value":1018},{"description":"","name":"ACT_MP_ATTACK_SWIM_PRIMARYFIRE","value":1019},{"description":"","name":"ACT_MP_ATTACK_SWIM_SECONDARYFIRE","value":1020},{"description":"","name":"ACT_MP_ATTACK_SWIM_GRENADE","value":1021},{"description":"","name":"ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE","value":1022},{"description":"","name":"ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE","value":1023},{"description":"","name":"ACT_MP_ATTACK_AIRWALK_GRENADE","value":1024},{"description":"","name":"ACT_MP_RELOAD_STAND","value":1025},{"description":"","name":"ACT_MP_RELOAD_STAND_LOOP","value":1026},{"description":"","name":"ACT_MP_RELOAD_STAND_END","value":1027},{"description":"","name":"ACT_MP_RELOAD_CROUCH","value":1028},{"description":"","name":"ACT_MP_RELOAD_CROUCH_LOOP","value":1029},{"description":"","name":"ACT_MP_RELOAD_CROUCH_END","value":1030},{"description":"","name":"ACT_MP_RELOAD_SWIM","value":1031},{"description":"","name":"ACT_MP_RELOAD_SWIM_LOOP","value":1032},{"description":"","name":"ACT_MP_RELOAD_SWIM_END","value":1033},{"description":"","name":"ACT_MP_RELOAD_AIRWALK","value":1034},{"description":"","name":"ACT_MP_RELOAD_AIRWALK_LOOP","value":1035},{"description":"","name":"ACT_MP_RELOAD_AIRWALK_END","value":1036},{"description":"","name":"ACT_MP_ATTACK_STAND_PREFIRE","value":1037},{"description":"","name":"ACT_MP_ATTACK_STAND_POSTFIRE","value":1038},{"description":"","name":"ACT_MP_ATTACK_STAND_STARTFIRE","value":1039},{"description":"","name":"ACT_MP_ATTACK_CROUCH_PREFIRE","value":1040},{"description":"","name":"ACT_MP_ATTACK_CROUCH_POSTFIRE","value":1041},{"description":"","name":"ACT_MP_ATTACK_SWIM_PREFIRE","value":1042},{"description":"","name":"ACT_MP_ATTACK_SWIM_POSTFIRE","value":1043},{"description":"","name":"ACT_MP_STAND_PRIMARY","value":1044},{"description":"","name":"ACT_MP_CROUCH_PRIMARY","value":1045},{"description":"","name":"ACT_MP_RUN_PRIMARY","value":1046},{"description":"","name":"ACT_MP_WALK_PRIMARY","value":1047},{"description":"","name":"ACT_MP_AIRWALK_PRIMARY","value":1048},{"description":"","name":"ACT_MP_CROUCHWALK_PRIMARY","value":1049},{"description":"","name":"ACT_MP_JUMP_PRIMARY","value":1050},{"description":"","name":"ACT_MP_JUMP_START_PRIMARY","value":1051},{"description":"","name":"ACT_MP_JUMP_FLOAT_PRIMARY","value":1052},{"description":"","name":"ACT_MP_JUMP_LAND_PRIMARY","value":1053},{"description":"","name":"ACT_MP_SWIM_PRIMARY","value":1054},{"description":"","name":"ACT_MP_DEPLOYED_PRIMARY","value":1055},{"description":"","name":"ACT_MP_SWIM_DEPLOYED_PRIMARY","value":1056},{"description":"","name":"ACT_MP_ATTACK_STAND_PRIMARY","value":1059},{"description":"","name":"ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED","value":1060},{"description":"","name":"ACT_MP_ATTACK_CROUCH_PRIMARY","value":1061},{"description":"","name":"ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED","value":1062},{"description":"","name":"ACT_MP_ATTACK_SWIM_PRIMARY","value":1063},{"description":"","name":"ACT_MP_ATTACK_AIRWALK_PRIMARY","value":1064},{"description":"","name":"ACT_MP_RELOAD_STAND_PRIMARY","value":1065},{"description":"","name":"ACT_MP_RELOAD_STAND_PRIMARY_LOOP","value":1066},{"description":"","name":"ACT_MP_RELOAD_STAND_PRIMARY_END","value":1067},{"description":"","name":"ACT_MP_RELOAD_CROUCH_PRIMARY","value":1068},{"description":"","name":"ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP","value":1069},{"description":"","name":"ACT_MP_RELOAD_CROUCH_PRIMARY_END","value":1070},{"description":"","name":"ACT_MP_RELOAD_SWIM_PRIMARY","value":1071},{"description":"","name":"ACT_MP_RELOAD_SWIM_PRIMARY_LOOP","value":1072},{"description":"","name":"ACT_MP_RELOAD_SWIM_PRIMARY_END","value":1073},{"description":"","name":"ACT_MP_RELOAD_AIRWALK_PRIMARY","value":1074},{"description":"","name":"ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP","value":1075},{"description":"","name":"ACT_MP_RELOAD_AIRWALK_PRIMARY_END","value":1076},{"description":"","name":"ACT_MP_ATTACK_STAND_GRENADE_PRIMARY","value":1105},{"description":"","name":"ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY","value":1106},{"description":"","name":"ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY","value":1107},{"description":"","name":"ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY","value":1108},{"description":"","name":"ACT_MP_STAND_SECONDARY","value":1109},{"description":"","name":"ACT_MP_CROUCH_SECONDARY","value":1110},{"description":"","name":"ACT_MP_RUN_SECONDARY","value":1111},{"description":"","name":"ACT_MP_WALK_SECONDARY","value":1112},{"description":"","name":"ACT_MP_AIRWALK_SECONDARY","value":1113},{"description":"","name":"ACT_MP_CROUCHWALK_SECONDARY","value":1114},{"description":"","name":"ACT_MP_JUMP_SECONDARY","value":1115},{"description":"","name":"ACT_MP_JUMP_START_SECONDARY","value":1116},{"description":"","name":"ACT_MP_JUMP_FLOAT_SECONDARY","value":1117},{"description":"","name":"ACT_MP_JUMP_LAND_SECONDARY","value":1118},{"description":"","name":"ACT_MP_SWIM_SECONDARY","value":1119},{"description":"","name":"ACT_MP_ATTACK_STAND_SECONDARY","value":1120},{"description":"","name":"ACT_MP_ATTACK_CROUCH_SECONDARY","value":1121},{"description":"","name":"ACT_MP_ATTACK_SWIM_SECONDARY","value":1122},{"description":"","name":"ACT_MP_ATTACK_AIRWALK_SECONDARY","value":1123},{"description":"","name":"ACT_MP_RELOAD_STAND_SECONDARY","value":1124},{"description":"","name":"ACT_MP_RELOAD_STAND_SECONDARY_LOOP","value":1125},{"description":"","name":"ACT_MP_RELOAD_STAND_SECONDARY_END","value":1126},{"description":"","name":"ACT_MP_RELOAD_CROUCH_SECONDARY","value":1127},{"description":"","name":"ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP","value":1128},{"description":"","name":"ACT_MP_RELOAD_CROUCH_SECONDARY_END","value":1129},{"description":"","name":"ACT_MP_RELOAD_SWIM_SECONDARY","value":1130},{"description":"","name":"ACT_MP_RELOAD_SWIM_SECONDARY_LOOP","value":1131},{"description":"","name":"ACT_MP_RELOAD_SWIM_SECONDARY_END","value":1132},{"description":"","name":"ACT_MP_RELOAD_AIRWALK_SECONDARY","value":1133},{"description":"","name":"ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP","value":1134},{"description":"","name":"ACT_MP_RELOAD_AIRWALK_SECONDARY_END","value":1135},{"description":"","name":"ACT_MP_ATTACK_STAND_GRENADE_SECONDARY","value":1140},{"description":"","name":"ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY","value":1141},{"description":"","name":"ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY","value":1142},{"description":"","name":"ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY","value":1143},{"description":"","name":"ACT_MP_STAND_MELEE","value":1171},{"description":"","name":"ACT_MP_CROUCH_MELEE","value":1172},{"description":"","name":"ACT_MP_RUN_MELEE","value":1173},{"description":"","name":"ACT_MP_WALK_MELEE","value":1174},{"description":"","name":"ACT_MP_AIRWALK_MELEE","value":1175},{"description":"","name":"ACT_MP_CROUCHWALK_MELEE","value":1176},{"description":"","name":"ACT_MP_JUMP_MELEE","value":1177},{"description":"","name":"ACT_MP_JUMP_START_MELEE","value":1178},{"description":"","name":"ACT_MP_JUMP_FLOAT_MELEE","value":1179},{"description":"","name":"ACT_MP_JUMP_LAND_MELEE","value":1180},{"description":"","name":"ACT_MP_SWIM_MELEE","value":1181},{"description":"","name":"ACT_MP_ATTACK_STAND_MELEE","value":1182},{"description":"","name":"ACT_MP_ATTACK_STAND_MELEE_SECONDARY","value":1183},{"description":"","name":"ACT_MP_ATTACK_CROUCH_MELEE","value":1184},{"description":"","name":"ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY","value":1185},{"description":"","name":"ACT_MP_ATTACK_SWIM_MELEE","value":1186},{"description":"","name":"ACT_MP_ATTACK_AIRWALK_MELEE","value":1187},{"description":"","name":"ACT_MP_ATTACK_STAND_GRENADE_MELEE","value":1188},{"description":"","name":"ACT_MP_ATTACK_CROUCH_GRENADE_MELEE","value":1189},{"description":"","name":"ACT_MP_ATTACK_SWIM_GRENADE_MELEE","value":1190},{"description":"","name":"ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE","value":1191},{"description":"","name":"ACT_MP_GESTURE_FLINCH","value":1258},{"description":"","name":"ACT_MP_GESTURE_FLINCH_PRIMARY","value":1259},{"description":"","name":"ACT_MP_GESTURE_FLINCH_SECONDARY","value":1260},{"description":"","name":"ACT_MP_GESTURE_FLINCH_MELEE","value":1261},{"description":"","name":"ACT_MP_GESTURE_FLINCH_HEAD","value":1264},{"description":"","name":"ACT_MP_GESTURE_FLINCH_CHEST","value":1265},{"description":"","name":"ACT_MP_GESTURE_FLINCH_STOMACH","value":1266},{"description":"","name":"ACT_MP_GESTURE_FLINCH_LEFTARM","value":1267},{"description":"","name":"ACT_MP_GESTURE_FLINCH_RIGHTARM","value":1268},{"description":"","name":"ACT_MP_GESTURE_FLINCH_LEFTLEG","value":1269},{"description":"","name":"ACT_MP_GESTURE_FLINCH_RIGHTLEG","value":1270},{"description":"","name":"ACT_MP_GRENADE1_DRAW","value":1271},{"description":"","name":"ACT_MP_GRENADE1_IDLE","value":1272},{"description":"","name":"ACT_MP_GRENADE1_ATTACK","value":1273},{"description":"","name":"ACT_MP_GRENADE2_DRAW","value":1274},{"description":"","name":"ACT_MP_GRENADE2_IDLE","value":1275},{"description":"","name":"ACT_MP_GRENADE2_ATTACK","value":1276},{"description":"","name":"ACT_MP_PRIMARY_GRENADE1_DRAW","value":1277},{"description":"","name":"ACT_MP_PRIMARY_GRENADE1_IDLE","value":1278},{"description":"","name":"ACT_MP_PRIMARY_GRENADE1_ATTACK","value":1279},{"description":"","name":"ACT_MP_PRIMARY_GRENADE2_DRAW","value":1280},{"description":"","name":"ACT_MP_PRIMARY_GRENADE2_IDLE","value":1281},{"description":"","name":"ACT_MP_PRIMARY_GRENADE2_ATTACK","value":1282},{"description":"","name":"ACT_MP_SECONDARY_GRENADE1_DRAW","value":1283},{"description":"","name":"ACT_MP_SECONDARY_GRENADE1_IDLE","value":1284},{"description":"","name":"ACT_MP_SECONDARY_GRENADE1_ATTACK","value":1285},{"description":"","name":"ACT_MP_SECONDARY_GRENADE2_DRAW","value":1286},{"description":"","name":"ACT_MP_SECONDARY_GRENADE2_IDLE","value":1287},{"description":"","name":"ACT_MP_SECONDARY_GRENADE2_ATTACK","value":1288},{"description":"","name":"ACT_MP_MELEE_GRENADE1_DRAW","value":1289},{"description":"","name":"ACT_MP_MELEE_GRENADE1_IDLE","value":1290},{"description":"","name":"ACT_MP_MELEE_GRENADE1_ATTACK","value":1291},{"description":"","name":"ACT_MP_MELEE_GRENADE2_DRAW","value":1292},{"description":"","name":"ACT_MP_MELEE_GRENADE2_IDLE","value":1293},{"description":"","name":"ACT_MP_MELEE_GRENADE2_ATTACK","value":1294},{"description":"","name":"ACT_MP_STAND_BUILDING","value":1307},{"description":"","name":"ACT_MP_CROUCH_BUILDING","value":1308},{"description":"","name":"ACT_MP_RUN_BUILDING","value":1309},{"description":"","name":"ACT_MP_WALK_BUILDING","value":1310},{"description":"","name":"ACT_MP_AIRWALK_BUILDING","value":1311},{"description":"","name":"ACT_MP_CROUCHWALK_BUILDING","value":1312},{"description":"","name":"ACT_MP_JUMP_BUILDING","value":1313},{"description":"","name":"ACT_MP_JUMP_START_BUILDING","value":1314},{"description":"","name":"ACT_MP_JUMP_FLOAT_BUILDING","value":1315},{"description":"","name":"ACT_MP_JUMP_LAND_BUILDING","value":1316},{"description":"","name":"ACT_MP_SWIM_BUILDING","value":1317},{"description":"","name":"ACT_MP_ATTACK_STAND_BUILDING","value":1318},{"description":"","name":"ACT_MP_ATTACK_CROUCH_BUILDING","value":1319},{"description":"","name":"ACT_MP_ATTACK_SWIM_BUILDING","value":1320},{"description":"","name":"ACT_MP_ATTACK_AIRWALK_BUILDING","value":1321},{"description":"","name":"ACT_MP_ATTACK_STAND_GRENADE_BUILDING","value":1322},{"description":"","name":"ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING","value":1323},{"description":"","name":"ACT_MP_ATTACK_SWIM_GRENADE_BUILDING","value":1324},{"description":"","name":"ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING","value":1325},{"description":"","name":"ACT_MP_STAND_PDA","value":1345},{"description":"","name":"ACT_MP_CROUCH_PDA","value":1346},{"description":"","name":"ACT_MP_RUN_PDA","value":1347},{"description":"","name":"ACT_MP_WALK_PDA","value":1348},{"description":"","name":"ACT_MP_AIRWALK_PDA","value":1349},{"description":"","name":"ACT_MP_CROUCHWALK_PDA","value":1350},{"description":"","name":"ACT_MP_JUMP_PDA","value":1351},{"description":"","name":"ACT_MP_JUMP_START_PDA","value":1352},{"description":"","name":"ACT_MP_JUMP_FLOAT_PDA","value":1353},{"description":"","name":"ACT_MP_JUMP_LAND_PDA","value":1354},{"description":"","name":"ACT_MP_SWIM_PDA","value":1355},{"description":"","name":"ACT_MP_ATTACK_STAND_PDA","value":1356},{"description":"","name":"ACT_MP_ATTACK_SWIM_PDA","value":1357},{"description":"","name":"ACT_MP_GESTURE_VC_HANDMOUTH","value":1377},{"description":"","name":"ACT_MP_GESTURE_VC_FINGERPOINT","value":1378},{"description":"","name":"ACT_MP_GESTURE_VC_FISTPUMP","value":1379},{"description":"","name":"ACT_MP_GESTURE_VC_THUMBSUP","value":1380},{"description":"","name":"ACT_MP_GESTURE_VC_NODYES","value":1381},{"description":"","name":"ACT_MP_GESTURE_VC_NODNO","value":1382},{"description":"","name":"ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY","value":1383},{"description":"","name":"ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY","value":1384},{"description":"","name":"ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY","value":1385},{"description":"","name":"ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY","value":1386},{"description":"","name":"ACT_MP_GESTURE_VC_NODYES_PRIMARY","value":1387},{"description":"","name":"ACT_MP_GESTURE_VC_NODNO_PRIMARY","value":1388},{"description":"","name":"ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY","value":1389},{"description":"","name":"ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY","value":1390},{"description":"","name":"ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY","value":1391},{"description":"","name":"ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY","value":1392},{"description":"","name":"ACT_MP_GESTURE_VC_NODYES_SECONDARY","value":1393},{"description":"","name":"ACT_MP_GESTURE_VC_NODNO_SECONDARY","value":1394},{"description":"","name":"ACT_MP_GESTURE_VC_HANDMOUTH_MELEE","value":1395},{"description":"","name":"ACT_MP_GESTURE_VC_FINGERPOINT_MELEE","value":1396},{"description":"","name":"ACT_MP_GESTURE_VC_FISTPUMP_MELEE","value":1397},{"description":"","name":"ACT_MP_GESTURE_VC_THUMBSUP_MELEE","value":1398},{"description":"","name":"ACT_MP_GESTURE_VC_NODYES_MELEE","value":1399},{"description":"","name":"ACT_MP_GESTURE_VC_NODNO_MELEE","value":1400},{"description":"","name":"ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING","value":1413},{"description":"","name":"ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING","value":1414},{"description":"","name":"ACT_MP_GESTURE_VC_FISTPUMP_BUILDING","value":1415},{"description":"","name":"ACT_MP_GESTURE_VC_THUMBSUP_BUILDING","value":1416},{"description":"","name":"ACT_MP_GESTURE_VC_NODYES_BUILDING","value":1417},{"description":"","name":"ACT_MP_GESTURE_VC_NODNO_BUILDING","value":1418},{"description":"","name":"ACT_MP_GESTURE_VC_HANDMOUTH_PDA","value":1419},{"description":"","name":"ACT_MP_GESTURE_VC_FINGERPOINT_PDA","value":1420},{"description":"","name":"ACT_MP_GESTURE_VC_FISTPUMP_PDA","value":1421},{"description":"","name":"ACT_MP_GESTURE_VC_THUMBSUP_PDA","value":1422},{"description":"","name":"ACT_MP_GESTURE_VC_NODYES_PDA","value":1423},{"description":"","name":"ACT_MP_GESTURE_VC_NODNO_PDA","value":1424},{"description":"","name":"ACT_VM_UNUSABLE","value":1428},{"description":"","name":"ACT_VM_UNUSABLE_TO_USABLE","value":1429},{"description":"","name":"ACT_VM_USABLE_TO_UNUSABLE","value":1430},{"description":"","name":"ACT_GMOD_GESTURE_AGREE","value":1610},{"description":"","name":"ACT_GMOD_GESTURE_BECON","value":1611},{"description":"","name":"ACT_GMOD_GESTURE_BOW","value":1612},{"description":"","name":"ACT_GMOD_GESTURE_DISAGREE","value":1613},{"description":"","name":"ACT_GMOD_TAUNT_SALUTE","value":1614},{"description":"","name":"ACT_GMOD_GESTURE_WAVE","value":1615},{"description":"","name":"ACT_GMOD_TAUNT_PERSISTENCE","value":1616},{"description":"","name":"ACT_GMOD_TAUNT_MUSCLE","value":1617},{"description":"","name":"ACT_GMOD_TAUNT_LAUGH","value":1618},{"description":"","name":"ACT_GMOD_GESTURE_POINT","value":1619},{"description":"","name":"ACT_GMOD_TAUNT_CHEER","value":1620},{"description":"","name":"ACT_HL2MP_RUN_FAST","value":1621},{"description":"","name":"ACT_HL2MP_RUN_CHARGING","value":1622},{"description":"","name":"ACT_HL2MP_RUN_PANICKED","value":1623},{"description":"","name":"ACT_HL2MP_RUN_PROTECTED","value":1624},{"description":"","name":"ACT_HL2MP_IDLE_MELEE_ANGRY","value":1625},{"description":"","name":"ACT_HL2MP_ZOMBIE_SLUMP_IDLE","value":1626},{"description":"","name":"ACT_HL2MP_ZOMBIE_SLUMP_RISE","value":1627},{"description":"","name":"ACT_HL2MP_WALK_ZOMBIE_01","value":1628},{"description":"","name":"ACT_HL2MP_WALK_ZOMBIE_02","value":1629},{"description":"","name":"ACT_HL2MP_WALK_ZOMBIE_03","value":1630},{"description":"","name":"ACT_HL2MP_WALK_ZOMBIE_04","value":1631},{"description":"","name":"ACT_HL2MP_WALK_ZOMBIE_05","value":1632},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_ZOMBIE_01","value":1633},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_ZOMBIE_02","value":1634},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_ZOMBIE_03","value":1635},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_ZOMBIE_04","value":1636},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_ZOMBIE_05","value":1637},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_ZOMBIE_01","value":1638},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_ZOMBIE_02","value":1639},{"description":"","name":"ACT_GMOD_GESTURE_RANGE_ZOMBIE","value":1640},{"description":"","name":"ACT_GMOD_GESTURE_TAUNT_ZOMBIE","value":1641},{"description":"","name":"ACT_GMOD_TAUNT_DANCE","value":1642},{"description":"","name":"ACT_GMOD_TAUNT_ROBOT","value":1643},{"description":"","name":"ACT_GMOD_GESTURE_RANGE_ZOMBIE_SPECIAL","value":1644},{"description":"","name":"ACT_GMOD_GESTURE_RANGE_FRENZY","value":1645},{"description":"","name":"ACT_HL2MP_RUN_ZOMBIE_FAST","value":1646},{"description":"","name":"ACT_HL2MP_WALK_ZOMBIE_06","value":1647},{"description":"","name":"ACT_ZOMBIE_LEAP_START","value":1648},{"description":"","name":"ACT_ZOMBIE_LEAPING","value":1649},{"description":"","name":"ACT_ZOMBIE_CLIMB_UP","value":1650},{"description":"","name":"ACT_ZOMBIE_CLIMB_START","value":1651},{"description":"","name":"ACT_ZOMBIE_CLIMB_END","value":1652},{"description":"","name":"ACT_HL2MP_IDLE_MAGIC","value":1653},{"description":"","name":"ACT_HL2MP_WALK_MAGIC","value":1654},{"description":"","name":"ACT_HL2MP_RUN_MAGIC","value":1655},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_MAGIC","value":1656},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_MAGIC","value":1657},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_MAGIC","value":1658},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_MAGIC","value":1659},{"description":"","name":"ACT_HL2MP_JUMP_MAGIC","value":1660},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_MAGIC","value":1661},{"description":"","name":"ACT_HL2MP_SWIM_MAGIC","value":1662},{"description":"","name":"ACT_HL2MP_IDLE_REVOLVER","value":1663},{"description":"","name":"ACT_HL2MP_WALK_REVOLVER","value":1664},{"description":"","name":"ACT_HL2MP_RUN_REVOLVER","value":1665},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_REVOLVER","value":1666},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_REVOLVER","value":1667},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_REVOLVER","value":1668},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_REVOLVER","value":1669},{"description":"","name":"ACT_HL2MP_JUMP_REVOLVER","value":1670},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_REVOLVER","value":1671},{"description":"","name":"ACT_HL2MP_SWIM_REVOLVER","value":1672},{"description":"","name":"ACT_HL2MP_IDLE_CAMERA","value":1673},{"description":"","name":"ACT_HL2MP_WALK_CAMERA","value":1674},{"description":"","name":"ACT_HL2MP_RUN_CAMERA","value":1675},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_CAMERA","value":1676},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_CAMERA","value":1677},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_CAMERA","value":1678},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_CAMERA","value":1679},{"description":"","name":"ACT_HL2MP_JUMP_CAMERA","value":1680},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_CAMERA","value":1681},{"description":"","name":"ACT_HL2MP_SWIM_CAMERA","value":1682},{"description":"","name":"ACT_HL2MP_IDLE_ANGRY","value":1683},{"description":"","name":"ACT_HL2MP_WALK_ANGRY","value":1684},{"description":"","name":"ACT_HL2MP_RUN_ANGRY","value":1685},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_ANGRY","value":1686},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_ANGRY","value":1687},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_ANGRY","value":1688},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_ANGRY","value":1689},{"description":"","name":"ACT_HL2MP_JUMP_ANGRY","value":1690},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_ANGRY","value":1691},{"description":"","name":"ACT_HL2MP_SWIM_ANGRY","value":1692},{"description":"","name":"ACT_HL2MP_IDLE_SCARED","value":1693},{"description":"","name":"ACT_HL2MP_WALK_SCARED","value":1694},{"description":"","name":"ACT_HL2MP_RUN_SCARED","value":1695},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_SCARED","value":1696},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_SCARED","value":1697},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_SCARED","value":1698},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_SCARED","value":1699},{"description":"","name":"ACT_HL2MP_JUMP_SCARED","value":1700},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_SCARED","value":1701},{"description":"","name":"ACT_HL2MP_SWIM_SCARED","value":1702},{"description":"","name":"ACT_HL2MP_IDLE_ZOMBIE","value":1703},{"description":"","name":"ACT_HL2MP_WALK_ZOMBIE","value":1704},{"description":"","name":"ACT_HL2MP_RUN_ZOMBIE","value":1705},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_ZOMBIE","value":1706},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_ZOMBIE","value":1707},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_ZOMBIE","value":1708},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_ZOMBIE","value":1709},{"description":"","name":"ACT_HL2MP_JUMP_ZOMBIE","value":1710},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_ZOMBIE","value":1711},{"description":"","name":"ACT_HL2MP_SWIM_ZOMBIE","value":1712},{"description":"","name":"ACT_HL2MP_IDLE_SUITCASE","value":1713},{"description":"","name":"ACT_HL2MP_WALK_SUITCASE","value":1714},{"description":"","name":"ACT_HL2MP_RUN_SUITCASE","value":1715},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_SUITCASE","value":1716},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_SUITCASE","value":1717},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_SUITCASE","value":1718},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_SUITCASE","value":1719},{"description":"","name":"ACT_HL2MP_JUMP_SUITCASE","value":1720},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_SUITCASE","value":1721},{"description":"","name":"ACT_HL2MP_SWIM_SUITCASE","value":1722},{"description":"","name":"ACT_HL2MP_IDLE","value":1777},{"description":"","name":"ACT_HL2MP_WALK","value":1778},{"description":"","name":"ACT_HL2MP_RUN","value":1779},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH","value":1780},{"description":"","name":"ACT_HL2MP_WALK_CROUCH","value":1781},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK","value":1782},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD","value":1783},{"description":"","name":"ACT_HL2MP_JUMP","value":1784},{"description":"","name":"ACT_HL2MP_SWIM","value":1786},{"description":"","name":"ACT_HL2MP_IDLE_PISTOL","value":1787},{"description":"","name":"ACT_HL2MP_WALK_PISTOL","value":1788},{"description":"","name":"ACT_HL2MP_RUN_PISTOL","value":1789},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_PISTOL","value":1790},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_PISTOL","value":1791},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_PISTOL","value":1792},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_PISTOL","value":1793},{"description":"","name":"ACT_HL2MP_JUMP_PISTOL","value":1794},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_PISTOL","value":1795},{"description":"","name":"ACT_HL2MP_SWIM_PISTOL","value":1796},{"description":"","name":"ACT_HL2MP_IDLE_SMG1","value":1797},{"description":"","name":"ACT_HL2MP_WALK_SMG1","value":1798},{"description":"","name":"ACT_HL2MP_RUN_SMG1","value":1799},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_SMG1","value":1800},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_SMG1","value":1801},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_SMG1","value":1802},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_SMG1","value":1803},{"description":"","name":"ACT_HL2MP_JUMP_SMG1","value":1804},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_SMG1","value":1805},{"description":"","name":"ACT_HL2MP_SWIM_SMG1","value":1806},{"description":"","name":"ACT_HL2MP_IDLE_AR2","value":1807},{"description":"","name":"ACT_HL2MP_WALK_AR2","value":1808},{"description":"","name":"ACT_HL2MP_RUN_AR2","value":1809},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_AR2","value":1810},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_AR2","value":1811},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2","value":1812},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_AR2","value":1813},{"description":"","name":"ACT_HL2MP_JUMP_AR2","value":1814},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_AR2","value":1815},{"description":"","name":"ACT_HL2MP_SWIM_AR2","value":1816},{"description":"","name":"ACT_HL2MP_IDLE_SHOTGUN","value":1817},{"description":"","name":"ACT_HL2MP_WALK_SHOTGUN","value":1818},{"description":"","name":"ACT_HL2MP_RUN_SHOTGUN","value":1819},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_SHOTGUN","value":1820},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_SHOTGUN","value":1821},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN","value":1822},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_SHOTGUN","value":1823},{"description":"","name":"ACT_HL2MP_JUMP_SHOTGUN","value":1824},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_SHOTGUN","value":1825},{"description":"","name":"ACT_HL2MP_SWIM_SHOTGUN","value":1826},{"description":"","name":"ACT_HL2MP_IDLE_RPG","value":1827},{"description":"","name":"ACT_HL2MP_WALK_RPG","value":1828},{"description":"","name":"ACT_HL2MP_RUN_RPG","value":1829},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_RPG","value":1830},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_RPG","value":1831},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_RPG","value":1832},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_RPG","value":1833},{"description":"","name":"ACT_HL2MP_JUMP_RPG","value":1834},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_RPG","value":1835},{"description":"","name":"ACT_HL2MP_SWIM_RPG","value":1836},{"description":"","name":"ACT_HL2MP_IDLE_GRENADE","value":1837},{"description":"","name":"ACT_HL2MP_WALK_GRENADE","value":1838},{"description":"","name":"ACT_HL2MP_RUN_GRENADE","value":1839},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_GRENADE","value":1840},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_GRENADE","value":1841},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_GRENADE","value":1842},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_GRENADE","value":1843},{"description":"","name":"ACT_HL2MP_JUMP_GRENADE","value":1844},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_GRENADE","value":1845},{"description":"","name":"ACT_HL2MP_SWIM_GRENADE","value":1846},{"description":"","name":"ACT_HL2MP_IDLE_DUEL","value":1847},{"description":"","name":"ACT_HL2MP_WALK_DUEL","value":1848},{"description":"","name":"ACT_HL2MP_RUN_DUEL","value":1849},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_DUEL","value":1850},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_DUEL","value":1851},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_DUEL","value":1852},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_DUEL","value":1853},{"description":"","name":"ACT_HL2MP_JUMP_DUEL","value":1854},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_DUEL","value":1855},{"description":"","name":"ACT_HL2MP_SWIM_DUEL","value":1856},{"description":"","name":"ACT_HL2MP_IDLE_PHYSGUN","value":1857},{"description":"","name":"ACT_HL2MP_WALK_PHYSGUN","value":1858},{"description":"","name":"ACT_HL2MP_RUN_PHYSGUN","value":1859},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_PHYSGUN","value":1860},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_PHYSGUN","value":1861},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_PHYSGUN","value":1862},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_PHYSGUN","value":1863},{"description":"","name":"ACT_HL2MP_JUMP_PHYSGUN","value":1864},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_PHYSGUN","value":1865},{"description":"","name":"ACT_HL2MP_SWIM_PHYSGUN","value":1866},{"description":"","name":"ACT_HL2MP_IDLE_CROSSBOW","value":1867},{"description":"","name":"ACT_HL2MP_WALK_CROSSBOW","value":1868},{"description":"","name":"ACT_HL2MP_RUN_CROSSBOW","value":1869},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_CROSSBOW","value":1870},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_CROSSBOW","value":1871},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_CROSSBOW","value":1872},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_CROSSBOW","value":1873},{"description":"","name":"ACT_HL2MP_JUMP_CROSSBOW","value":1874},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_CROSSBOW","value":1875},{"description":"","name":"ACT_HL2MP_SWIM_CROSSBOW","value":1876},{"description":"","name":"ACT_HL2MP_IDLE_MELEE","value":1877},{"description":"","name":"ACT_HL2MP_WALK_MELEE","value":1878},{"description":"","name":"ACT_HL2MP_RUN_MELEE","value":1879},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_MELEE","value":1880},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_MELEE","value":1881},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE","value":1882},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_MELEE","value":1883},{"description":"","name":"ACT_HL2MP_JUMP_MELEE","value":1884},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_MELEE","value":1885},{"description":"","name":"ACT_HL2MP_SWIM_MELEE","value":1886},{"description":"","name":"ACT_HL2MP_IDLE_SLAM","value":1887},{"description":"","name":"ACT_HL2MP_WALK_SLAM","value":1888},{"description":"","name":"ACT_HL2MP_RUN_SLAM","value":1889},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_SLAM","value":1890},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_SLAM","value":1891},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_SLAM","value":1892},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_SLAM","value":1893},{"description":"","name":"ACT_HL2MP_JUMP_SLAM","value":1894},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_SLAM","value":1895},{"description":"","name":"ACT_HL2MP_SWIM_SLAM","value":1896},{"description":"","name":"ACT_VM_CRAWL","value":1897},{"description":"","name":"ACT_VM_CRAWL_EMPTY","value":1898},{"description":"","name":"ACT_VM_HOLSTER_EMPTY","value":1899},{"description":"","name":"ACT_VM_DOWN","value":1900},{"description":"","name":"ACT_VM_DOWN_EMPTY","value":1901},{"description":"","name":"ACT_VM_READY","value":1902},{"description":"","name":"ACT_VM_ISHOOT","value":1903},{"description":"","name":"ACT_VM_IIN","value":1904},{"description":"","name":"ACT_VM_IIN_EMPTY","value":1905},{"description":"","name":"ACT_VM_IIDLE","value":1906},{"description":"","name":"ACT_VM_IIDLE_EMPTY","value":1907},{"description":"","name":"ACT_VM_IOUT","value":1908},{"description":"","name":"ACT_VM_IOUT_EMPTY","value":1909},{"description":"","name":"ACT_VM_PULLBACK_HIGH_BAKE","value":1910},{"description":"","name":"ACT_VM_HITKILL","value":1911},{"description":"","name":"ACT_VM_DEPLOYED_IN","value":1912},{"description":"","name":"ACT_VM_DEPLOYED_IDLE","value":1913},{"description":"","name":"ACT_VM_DEPLOYED_FIRE","value":1914},{"description":"","name":"ACT_VM_DEPLOYED_DRYFIRE","value":1915},{"description":"","name":"ACT_VM_DEPLOYED_RELOAD","value":1916},{"description":"","name":"ACT_VM_DEPLOYED_RELOAD_EMPTY","value":1917},{"description":"","name":"ACT_VM_DEPLOYED_OUT","value":1918},{"description":"","name":"ACT_VM_DEPLOYED_IRON_IN","value":1919},{"description":"","name":"ACT_VM_DEPLOYED_IRON_IDLE","value":1920},{"description":"","name":"ACT_VM_DEPLOYED_IRON_FIRE","value":1921},{"description":"","name":"ACT_VM_DEPLOYED_IRON_DRYFIRE","value":1922},{"description":"","name":"ACT_VM_DEPLOYED_IRON_OUT","value":1923},{"description":"","name":"ACT_VM_DEPLOYED_LIFTED_IN","value":1924},{"description":"","name":"ACT_VM_DEPLOYED_LIFTED_IDLE","value":1925},{"description":"","name":"ACT_VM_DEPLOYED_LIFTED_OUT","value":1926},{"description":"","name":"ACT_VM_RELOADEMPTY","value":1927},{"description":"","name":"ACT_VM_IRECOIL1","value":1928},{"description":"","name":"ACT_VM_IRECOIL2","value":1929},{"description":"","name":"ACT_VM_FIREMODE","value":1930},{"description":"","name":"ACT_VM_ISHOOT_LAST","value":1931},{"description":"","name":"ACT_VM_IFIREMODE","value":1932},{"description":"","name":"ACT_VM_DFIREMODE","value":1933},{"description":"","name":"ACT_VM_DIFIREMODE","value":1934},{"description":"","name":"ACT_VM_SHOOTLAST","value":1935},{"description":"","name":"ACT_VM_ISHOOTDRY","value":1936},{"description":"","name":"ACT_VM_DRAW_M203","value":1937},{"description":"","name":"ACT_VM_DRAWFULL_M203","value":1938},{"description":"","name":"ACT_VM_READY_M203","value":1939},{"description":"","name":"ACT_VM_IDLE_M203","value":1940},{"description":"","name":"ACT_VM_RELOAD_M203","value":1941},{"description":"","name":"ACT_VM_HOLSTER_M203","value":1942},{"description":"","name":"ACT_VM_HOLSTERFULL_M203","value":1943},{"description":"","name":"ACT_VM_IIN_M203","value":1944},{"description":"","name":"ACT_VM_IIDLE_M203","value":1945},{"description":"","name":"ACT_VM_IOUT_M203","value":1946},{"description":"","name":"ACT_VM_CRAWL_M203","value":1947},{"description":"","name":"ACT_VM_DOWN_M203","value":1948},{"description":"","name":"ACT_VM_ISHOOT_M203","value":1949},{"description":"","name":"ACT_VM_RELOAD_INSERT","value":1950},{"description":"","name":"ACT_VM_RELOAD_INSERT_PULL","value":1951},{"description":"","name":"ACT_VM_RELOAD_END","value":1952},{"description":"","name":"ACT_VM_RELOAD_END_EMPTY","value":1953},{"description":"","name":"ACT_VM_RELOAD_INSERT_EMPTY","value":1954},{"description":"","name":"ACT_CROSSBOW_HOLSTER_UNLOADED","value":1955},{"description":"","name":"ACT_VM_FIRE_TO_EMPTY","value":1956},{"description":"","name":"ACT_VM_UNLOAD","value":1957},{"description":"","name":"ACT_VM_RELOAD2","value":1958},{"description":"","name":"ACT_GMOD_NOCLIP_LAYER","value":1959},{"description":"","name":"ACT_HL2MP_IDLE_FIST","value":1960},{"description":"","name":"ACT_HL2MP_WALK_FIST","value":1961},{"description":"","name":"ACT_HL2MP_RUN_FIST","value":1962},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_FIST","value":1963},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_FIST","value":1964},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_FIST","value":1965},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_FIST","value":1966},{"description":"","name":"ACT_HL2MP_JUMP_FIST","value":1967},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_FIST","value":1968},{"description":"","name":"ACT_HL2MP_SWIM_FIST","value":1969},{"description":"","name":"ACT_HL2MP_SIT","value":1970},{"description":"","name":"ACT_HL2MP_FIST_BLOCK","value":1971},{"description":"","name":"ACT_DRIVE_AIRBOAT","value":1972},{"description":"","name":"ACT_DRIVE_JEEP","value":1973},{"description":"","name":"ACT_GMOD_SIT_ROLLERCOASTER","value":1974},{"description":"","name":"ACT_HL2MP_IDLE_KNIFE","value":1975},{"description":"","name":"ACT_HL2MP_WALK_KNIFE","value":1976},{"description":"","name":"ACT_HL2MP_RUN_KNIFE","value":1977},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_KNIFE","value":1978},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_KNIFE","value":1979},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_KNIFE","value":1980},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_KNIFE","value":1981},{"description":"","name":"ACT_HL2MP_JUMP_KNIFE","value":1982},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_KNIFE","value":1983},{"description":"","name":"ACT_HL2MP_SWIM_KNIFE","value":1984},{"description":"","name":"ACT_HL2MP_IDLE_PASSIVE","value":1985},{"description":"","name":"ACT_HL2MP_WALK_PASSIVE","value":1986},{"description":"","name":"ACT_HL2MP_RUN_PASSIVE","value":1987},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_PASSIVE","value":1988},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_PASSIVE","value":1989},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_PASSIVE","value":1990},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_PASSIVE","value":1991},{"description":"","name":"ACT_HL2MP_JUMP_PASSIVE","value":1992},{"description":"","name":"ACT_HL2MP_SWIM_PASSIVE","value":1993},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_PASSIVE","value":1994},{"description":"","name":"ACT_HL2MP_IDLE_MELEE2","value":1995},{"description":"","name":"ACT_HL2MP_WALK_MELEE2","value":1996},{"description":"","name":"ACT_HL2MP_RUN_MELEE2","value":1997},{"description":"","name":"ACT_HL2MP_IDLE_CROUCH_MELEE2","value":1998},{"description":"","name":"ACT_HL2MP_WALK_CROUCH_MELEE2","value":1999},{"description":"","name":"ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE2","value":2000},{"description":"","name":"ACT_HL2MP_GESTURE_RELOAD_MELEE2","value":2001},{"description":"","name":"ACT_HL2MP_JUMP_MELEE2","value":2002},{"description":"","name":"ACT_HL2MP_SWIM_IDLE_MELEE2","value":2003},{"description":"","name":"ACT_HL2MP_SWIM_MELEE2","value":2004},{"description":"","name":"ACT_HL2MP_SIT_PISTOL","value":2005},{"description":"","name":"ACT_HL2MP_SIT_SHOTGUN","value":2006},{"description":"","name":"ACT_HL2MP_SIT_SMG1","value":2007},{"description":"","name":"ACT_HL2MP_SIT_AR2","value":2008},{"description":"","name":"ACT_HL2MP_SIT_PHYSGUN","value":2009},{"description":"","name":"ACT_HL2MP_SIT_GRENADE","value":2010},{"description":"","name":"ACT_HL2MP_SIT_RPG","value":2011},{"description":"","name":"ACT_HL2MP_SIT_CROSSBOW","value":2012},{"description":"","name":"ACT_HL2MP_SIT_MELEE","value":2013},{"description":"","name":"ACT_HL2MP_SIT_SLAM","value":2014},{"description":"","name":"ACT_HL2MP_SIT_FIST","value":2015},{"description":"","name":"ACT_GMOD_IN_CHAT","value":2019},{"description":"","name":"ACT_GMOD_GESTURE_ITEM_GIVE","value":2020},{"description":"","name":"ACT_GMOD_GESTURE_ITEM_DROP","value":2021},{"description":"","name":"ACT_GMOD_GESTURE_ITEM_PLACE","value":2022},{"description":"","name":"ACT_GMOD_GESTURE_ITEM_THROW","value":2023},{"description":"","name":"ACT_GMOD_GESTURE_MELEE_SHOVE_2HAND","value":2024},{"description":"","name":"ACT_GMOD_GESTURE_MELEE_SHOVE_1HAND","value":2025},{"description":"","name":"ACT_HL2MP_SWIM_IDLE","value":2026},{"description":"The largest activity number","name":"LAST_SHARED_ACTIVITY","value":2027}],"isMembersOnly":true,"name":"ACT"},{"description":"Used by {{LibraryFunction|game|AddAmmoType}}'s input structure - the {{Struct|AmmoData}}.\n\n{{Note|These enumerations do not exist in game and are listed here only for reference!}}","enumFields":[{"description":"Forces player to drop the object they are carrying if the object was hit by this ammo type.","name":"AMMO_FORCE_DROP_IF_CARRIED","value":1},{"description":"Uses [[Structures/AmmoData|AmmoData]].plydmg of the ammo type as the damage to deal to shot players instead of [[Structures/Bullet|Bullet]].Damage.","name":"AMMO_INTERPRET_PLRDAMAGE_AS_DAMAGE_TO_PLAYER","value":2}],"isMembersOnly":true,"name":"AMMO"},{"description":"Used by {{LibraryFunction|render|OverrideBlend}} to determine how texture RGBA information should be interpreted when rendered. \n\nFor more information refer to OpenGL's glBlendFunc page here: https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBlendFunc.xhtml  \n\nClientside only.","enumFields":[{"description":"","name":"BLEND_ZERO","value":0},{"description":"","name":"BLEND_ONE","value":1},{"description":"","name":"BLEND_DST_COLOR","value":2},{"description":"","name":"BLEND_ONE_MINUS_DST_COLOR","value":3},{"description":"","name":"BLEND_SRC_ALPHA","value":4},{"description":"","name":"BLEND_ONE_MINUS_SRC_ALPHA","value":5},{"description":"","name":"BLEND_DST_ALPHA","value":6},{"description":"","name":"BLEND_ONE_MINUS_DST_ALPHA","value":7},{"description":"","name":"BLEND_SRC_ALPHA_SATURATE","value":8},{"description":"","name":"BLEND_SRC_COLOR","value":9},{"description":"","name":"BLEND_ONE_MINUS_SRC_COLOR","value":10}],"isMembersOnly":true,"name":"BLEND"},{"description":"Used by {{LibraryFunction|render|OverrideBlend}}.","enumFields":[{"description":"","name":"BLENDFUNC_ADD","value":0},{"description":"","name":"BLENDFUNC_SUBTRACT","value":1},{"description":"","name":"BLENDFUNC_REVERSE_SUBTRACT","value":2}],"isMembersOnly":true,"name":"BLENDFUNC"},{"description":"Enumerations used by {{ClassFunction|Entity|GetBloodColor}} and {{ClassFunction|Entity|SetBloodColor}}.","enumFields":[{"description":"No blood","name":"DONT_BLEED","value":-1},{"description":"Normal red blood","name":"BLOOD_COLOR_RED","value":0},{"description":"Yellow blood","name":"BLOOD_COLOR_YELLOW","value":1},{"description":"Green-red blood","name":"BLOOD_COLOR_GREEN","value":2},{"description":"Sparks","name":"BLOOD_COLOR_MECH","value":3},{"description":"Yellow blood","name":"BLOOD_COLOR_ANTLION","value":4},{"description":"Green-red blood","name":"BLOOD_COLOR_ZOMBIE","value":5},{"description":"Bright green blood","name":"BLOOD_COLOR_ANTLION_WORKER","value":6}],"isMembersOnly":true,"name":"BLOOD_COLOR"},{"description":"Used by {{ClassFunction|Entity|BoneHasFlag}}.","enumFields":[{"description":"","name":"BONE_PHYSICALLY_SIMULATED","value":1},{"description":"","name":"BONE_PHYSICS_PROCEDURAL","value":2},{"description":"","name":"BONE_ALWAYS_PROCEDURAL","value":4},{"description":"","name":"BONE_SCREEN_ALIGN_SPHERE","value":8},{"description":"","name":"BONE_SCREEN_ALIGN_CYLINDER","value":16},{"description":"","name":"BONE_CALCULATE_MASK","value":31},{"description":"A hitbox is attached to this bone","name":"BONE_USED_BY_HITBOX","value":256},{"description":"An attachment is attached to this bone","name":"BONE_USED_BY_ATTACHMENT","value":512},{"description":"","name":"BONE_USED_BY_VERTEX_LOD0","value":1024},{"description":"","name":"BONE_USED_BY_VERTEX_LOD1","value":2048},{"description":"","name":"BONE_USED_BY_VERTEX_LOD2","value":4096},{"description":"","name":"BONE_USED_BY_VERTEX_LOD3","value":8192},{"description":"","name":"BONE_USED_BY_VERTEX_LOD4","value":16384},{"description":"","name":"BONE_USED_BY_VERTEX_LOD5","value":32768},{"description":"","name":"BONE_USED_BY_VERTEX_LOD6","value":65536},{"description":"","name":"BONE_USED_BY_VERTEX_LOD7","value":131072},{"description":"","name":"BONE_USED_BY_VERTEX_MASK","value":261120},{"description":"","name":"BONE_USED_BY_BONE_MERGE","value":262144},{"description":"Is this bone used by anything?<br/>( If any BONE_USED_BY_* flags are true )","name":"BONE_USED_BY_ANYTHING","value":524032},{"description":"","name":"BONE_USED_MASK","value":524032}],"isMembersOnly":true,"name":"BONE"},{"description":"Enumerations used by {{LibraryFunction|render|SetModelLighting}}.","enumFields":[{"description":"Place the light from the front","name":"BOX_FRONT","value":0},{"description":"Place the light behind","name":"BOX_BACK","value":1},{"description":"Place the light to the right","name":"BOX_RIGHT","value":2},{"description":"Place the light to the left","name":"BOX_LEFT","value":3},{"description":"Place the light to the top","name":"BOX_TOP","value":4},{"description":"Place the light to the bottom","name":"BOX_BOTTOM","value":5}],"isMembersOnly":true,"name":"BOX"},{"description":"Encompasses the range of {{Enum|KEY}}, {{Enum|MOUSE}} and {{Enum|JOYSTICK}}, all of which can be used by:\n* {{LibraryFunction|input|IsButtonDown}}\n* {{LibraryFunction|input|LookupKeyBinding}}\n* {{LibraryFunction|input|GetKeyName}}\n* {{LibraryFunction|input|GetKeyCode}}\n* {{HookFunction|GM|PlayerButtonDown}}\n* {{HookFunction|GM|PlayerButtonUp}}","enumFields":[{"description":"","name":"BUTTON_CODE_INVALID","value":-1},{"description":"","name":"BUTTON_CODE_NONE","value":0},{"description":"","name":"BUTTON_CODE_LAST","value":171},{"description":"","name":"BUTTON_CODE_COUNT","value":172}],"isMembersOnly":true,"name":"BUTTON_CODE"},{"description":"Enumerations used by {{ClassFunction|NPC|CapabilitiesAdd}}, {{HookFunction|WEAPON|GetCapabilities}} and {{ClassFunction|NPC|CapabilitiesGet}}. Serverside only.","enumFields":[{"description":"When hit by an explosion, we'll simply block it instead of spilling it to entities behind us, the sv_robust_explosions cvar can also enable this globally when set to 0","name":"CAP_SIMPLE_RADIUS_DAMAGE","value":-2147483648},{"description":"Walk/Run","name":"CAP_MOVE_GROUND","value":1},{"description":"Jump/Leap","name":"CAP_MOVE_JUMP","value":2},{"description":"Can fly  move all around","name":"CAP_MOVE_FLY","value":4},{"description":"climb ladders","name":"CAP_MOVE_CLIMB","value":8},{"description":"","name":"CAP_MOVE_SWIM","value":16},{"description":"","name":"CAP_MOVE_CRAWL","value":32},{"description":"Tries to shoot weapon while moving","name":"CAP_MOVE_SHOOT","value":64},{"description":"","name":"CAP_SKIP_NAV_GROUND_CHECK","value":128},{"description":"Open doors/push buttons/pull levers","name":"CAP_USE","value":256},{"description":"Can trigger auto doors","name":"CAP_AUTO_DOORS","value":1024},{"description":"Can open manual doors","name":"CAP_OPEN_DOORS","value":2048},{"description":"Can turn head  always bone controller 0","name":"CAP_TURN_HEAD","value":4096},{"description":"","name":"CAP_WEAPON_RANGE_ATTACK1","value":8192},{"description":"","name":"CAP_WEAPON_RANGE_ATTACK2","value":16384},{"description":"","name":"CAP_WEAPON_MELEE_ATTACK1","value":32768},{"description":"","name":"CAP_WEAPON_MELEE_ATTACK2","value":65536},{"description":"","name":"CAP_INNATE_RANGE_ATTACK1","value":131072},{"description":"","name":"CAP_INNATE_RANGE_ATTACK2","value":262144},{"description":"","name":"CAP_INNATE_MELEE_ATTACK1","value":524288},{"description":"","name":"CAP_INNATE_MELEE_ATTACK2","value":1048576},{"description":"","name":"CAP_USE_WEAPONS","value":2097152},{"description":"","name":"CAP_USE_SHOT_REGULATOR","value":16777216},{"description":"Has animated eyes/face","name":"CAP_ANIMATEDFACE","value":8388608},{"description":"Don't take damage from npc's that are D_LI","name":"CAP_FRIENDLY_DMG_IMMUNE","value":33554432},{"description":"Can form squads","name":"CAP_SQUAD","value":67108864},{"description":"Cover and Reload ducking","name":"CAP_DUCK","value":134217728},{"description":"Don't hit players","name":"CAP_NO_HIT_PLAYER","value":268435456},{"description":"Use arms to aim gun, not just body","name":"CAP_AIM_GUN","value":536870912},{"description":"","name":"CAP_NO_HIT_SQUADMATES","value":1073741824}],"isMembersOnly":true,"name":"CAP"},{"description":"Enumerations used by {{GlobalFunction|EmitSound}} and {{LibraryFunction|sound|Add}}.","enumFields":[{"description":"Used when playing sounds through console commands.","name":"CHAN_REPLACE","value":-1},{"description":"Automatic channel","name":"CHAN_AUTO","value":0},{"description":"Channel for weapon sounds","name":"CHAN_WEAPON","value":1},{"description":"Channel for NPC voices","name":"CHAN_VOICE","value":2},{"description":"Channel for items ( Health kits, etc )","name":"CHAN_ITEM","value":3},{"description":"Clothing, ragdoll impacts, footsteps, knocking/pounding/punching etc.","name":"CHAN_BODY","value":4},{"description":"Stream channel from the static or dynamic area","name":"CHAN_STREAM","value":5},{"description":"A constant/background sound that doesn't require any reaction.","name":"CHAN_STATIC","value":6},{"description":"TF2s Announcer dialogue channel","name":"CHAN_VOICE2","value":7},{"description":"Channel for network voice data","name":"CHAN_VOICE_BASE","value":8},{"description":"","name":"CHAN_USER_BASE","value":136}],"isMembersOnly":true,"name":"CHAN"},{"description":"Enumerations used by {{ClassFunction|NPC|Classify}}.","enumFields":[{"description":"None - default class for entities.","name":"CLASS_NONE","value":0},{"description":"Players.","name":"CLASS_PLAYER","value":1},{"description":"HL2 player allies - monster_barney, npc_citizen, hacked npc_manhack, and friendly npc_turret_floor.","name":"CLASS_PLAYER_ALLY","value":2},{"description":"HL2 vital player allies - npc_magnusson, npc_gman, npc_fisherman, npc_eli, npc_barney, npc_kleiner, npc_mossman, npc_alyx, npc_monk, npc_dog, and npc_vortigaunt at the end of EP2 (controlled by \"MakeGameEndAlly\" input).","name":"CLASS_PLAYER_ALLY_VITAL","value":3},{"description":"HL2 antlions - npc_antlion, npc_antlionguard, and npc_ichthyosaur.","name":"CLASS_ANTLION","value":4},{"description":"HL2 barnacles - npc_barnacle.","name":"CLASS_BARNACLE","value":5},{"description":"HL2 bullseyes - npc_bullseye.","name":"CLASS_BULLSEYE","value":6},{"description":"HL2 passive/non-rebel citizens - npc_citizen in the beginning of HL2.","name":"CLASS_CITIZEN_PASSIVE","value":7},{"description":"HL2 unused.","name":"CLASS_CITIZEN_REBEL","value":8},{"description":"HL2 combine troops - npc_combine, npc_advisor, apc_missile, npc_apcdriver, hostile npc_turret_floor, hostile npc_rollermine, npc_turret_ground when active, npc_turret_ceiling when active, and npc_strider when active (not being carried by the gunship).","name":"CLASS_COMBINE","value":9},{"description":"HL2 combine aircrafts - npc_combinegunship, npc_combinedropship, and npc_helicopter.","name":"CLASS_COMBINE_GUNSHIP","value":10},{"description":"HL2 unused.","name":"CLASS_CONSCRIPT","value":11},{"description":"HL2 headcrabs - visible npc_headcrab.","name":"CLASS_HEADCRAB","value":12},{"description":"HL2 manhacks - hostile npc_manhack not held by the gravity gun.","name":"CLASS_MANHACK","value":13},{"description":"HL2 metro police - npc_metropolice and npc_vehicledriver.","name":"CLASS_METROPOLICE","value":14},{"description":"HL2 combine military objects - func_guntarget, npc_spotlight, and active npc_combine_camera.","name":"CLASS_MILITARY","value":15},{"description":"HL2 combine scanners - npc_cscanner and npc_clawscanner.","name":"CLASS_SCANNER","value":16},{"description":"HL2 stalkers - npc_stalker.","name":"CLASS_STALKER","value":17},{"description":"HL2 vortigaunts - npc_vortigaunt before the end of EP2 (controlled by \"MakeGameEndAlly\" input).","name":"CLASS_VORTIGAUNT","value":18},{"description":"HL2 zombies - unslumped npc_zombie, npc_poisonzombie, npc_fastzombie, npc_fastzombie_torso, and npc_zombine.","name":"CLASS_ZOMBIE","value":19},{"description":"HL2 snipers - npc_sniper and proto_sniper.","name":"CLASS_PROTOSNIPER","value":20},{"description":"HL2 missiles - rpg_missile, apc_missile, and grenade_pathfollower.","name":"CLASS_MISSILE","value":21},{"description":"HL2 flares - env_flare.","name":"CLASS_FLARE","value":22},{"description":"HL2 animals - npc_crow, npc_seagull, and npc_pigeon.","name":"CLASS_EARTH_FAUNA","value":23},{"description":"HL2 friendly rollermines - hacked npc_rollermine.","name":"CLASS_HACKED_ROLLERMINE","value":24},{"description":"HL2 hunters - npc_hunter.","name":"CLASS_COMBINE_HUNTER","value":25},{"description":"HL:S turrets - monster_turret, monster_miniturret, monster_sentry.","name":"CLASS_MACHINE","value":26},{"description":"HL:S friendly humans - monster_scientist.","name":"CLASS_HUMAN_PASSIVE","value":27},{"description":"HL:S human military - monster_human_grunt and monster_apache.","name":"CLASS_HUMAN_MILITARY","value":28},{"description":"HL:S alien military - monster_alien_controller, monster_vortigaunt, monster_alien_grunt, monster_nihilanth, and monster_snark if it has an enemy of class CLASS_PLAYER, CLASS_HUMAN_PASSIVE, or CLASS_HUMAN_MILITARY.","name":"CLASS_ALIEN_MILITARY","value":29},{"description":"HL:S monsters - monster_tentacle, monster_barnacle, monster_zombie, monster_gargantua, monster_houndeye, monster_ichthyosaur, and monster_bigmomma.","name":"CLASS_ALIEN_MONSTER","value":30},{"description":"HL:S headcrabs - monster_headcrab.","name":"CLASS_ALIEN_PREY","value":31},{"description":"HL:S alien predators - monster_bullsquid, xen_tree, and xen_hull.","name":"CLASS_ALIEN_PREDATOR","value":32},{"description":"HL:S insects - montser_roach and monster_leech.","name":"CLASS_INSECT","value":33},{"description":"HL:S player bioweapons - hornet fired by a player.","name":"CLASS_PLAYER_BIOWEAPON","value":34},{"description":"HL:S enemy bioweapons - hornet fired by anyone but a player, or monster_snark with no enemy or an enemy without the class CLASS_PLAYER, CLASS_HUMAN_PASSIVE, or CLASS_HUMAN_MILITARY.","name":"CLASS_ALIEN_BIOWEAPON","value":35}],"isMembersOnly":true,"name":"CLASS"},{"description":"Enumerations used by {{ClassFunction|Entity|SetCollisionGroup}} and {{ClassFunction|Entity|GetCollisionGroup}}.","enumFields":[{"description":"Normal","name":"COLLISION_GROUP_NONE","value":0},{"description":"Collides with nothing but world and static stuff","name":"COLLISION_GROUP_DEBRIS","value":1},{"description":"Same as debris, but hits triggers. Useful for an item that can be shot, but doesn't collide.","name":"COLLISION_GROUP_DEBRIS_TRIGGER","value":2},{"description":"Collides with everything except other interactive debris or debris","name":"COLLISION_GROUP_INTERACTIVE_DEBRIS","value":3},{"description":"Collides with everything except interactive debris or debris","name":"COLLISION_GROUP_INTERACTIVE","value":4},{"description":"","name":"COLLISION_GROUP_PLAYER","value":5},{"description":"","name":"COLLISION_GROUP_BREAKABLE_GLASS","value":6},{"description":"","name":"COLLISION_GROUP_VEHICLE","value":7},{"description":"For HL2, same as Collision_Group_Player, for TF2, this filters out other players and CBaseObjects","name":"COLLISION_GROUP_PLAYER_MOVEMENT","value":8},{"description":"","name":"COLLISION_GROUP_NPC","value":9},{"description":"Doesn't collide with anything, no traces","name":"COLLISION_GROUP_IN_VEHICLE","value":10},{"description":"Doesn't collide with players and vehicles","name":"COLLISION_GROUP_WEAPON","value":11},{"description":"Only collides with vehicles","name":"COLLISION_GROUP_VEHICLE_CLIP","value":12},{"description":"","name":"COLLISION_GROUP_PROJECTILE","value":13},{"description":"Blocks entities not permitted to get near moving doors","name":"COLLISION_GROUP_DOOR_BLOCKER","value":14},{"description":"Let's the Player through, nothing else.","name":"COLLISION_GROUP_PASSABLE_DOOR","value":15},{"description":"Things that are dissolving are in this group","name":"COLLISION_GROUP_DISSOLVING","value":16},{"description":"Nonsolid on client and server, pushaway in player code","name":"COLLISION_GROUP_PUSHAWAY","value":17},{"description":"","name":"COLLISION_GROUP_NPC_ACTOR","value":18},{"description":"","name":"COLLISION_GROUP_NPC_SCRIPTED","value":19},{"description":"Doesn't collide with players/props","name":"COLLISION_GROUP_WORLD","value":20},{"description":"Amount of COLLISION_GROUP_ enumerations","name":"LAST_SHARED_COLLISION_GROUP","value":21}],"isMembersOnly":true,"name":"COLLISION_GROUP"},{"description":"Enumerations for NPC conditions, used by {{ClassFunction|NPC|SetCondition}}. Serverside only.\n\n{{Note|There are more conditions than listed here after '''COND_NO_CUSTOM_INTERRUPTS'''(70) but the name depends on what's returned by {{ClassFunction|NPC|ConditionName}}}}\n\n{{Warning|These enumerations do not exist in game, but are listed here anyway for reference}}","enumFields":[{"description":"","name":"COND_BEHIND_ENEMY","value":29},{"description":"","name":"COND_BETTER_WEAPON_AVAILABLE","value":46},{"description":"","name":"COND_CAN_MELEE_ATTACK1","value":23},{"description":"","name":"COND_CAN_MELEE_ATTACK2","value":24},{"description":"","name":"COND_CAN_RANGE_ATTACK1","value":21},{"description":"","name":"COND_CAN_RANGE_ATTACK2","value":22},{"description":"","name":"COND_ENEMY_DEAD","value":30},{"description":"","name":"COND_ENEMY_FACING_ME","value":28},{"description":"","name":"COND_ENEMY_OCCLUDED","value":13},{"description":"","name":"COND_ENEMY_TOO_FAR","value":27},{"description":"","name":"COND_ENEMY_UNREACHABLE","value":31},{"description":"","name":"COND_ENEMY_WENT_NULL","value":12},{"description":"","name":"COND_FLOATING_OFF_GROUND","value":61},{"description":"","name":"COND_GIVE_WAY","value":48},{"description":"","name":"COND_HAVE_ENEMY_LOS","value":15},{"description":"","name":"COND_HAVE_TARGET_LOS","value":16},{"description":"","name":"COND_HEALTH_ITEM_AVAILABLE","value":47},{"description":"","name":"COND_HEAR_BUGBAIT","value":52},{"description":"","name":"COND_HEAR_BULLET_IMPACT","value":56},{"description":"","name":"COND_HEAR_COMBAT","value":53},{"description":"","name":"COND_HEAR_DANGER","value":50},{"description":"","name":"COND_HEAR_MOVE_AWAY","value":58},{"description":"","name":"COND_HEAR_PHYSICS_DANGER","value":57},{"description":"","name":"COND_HEAR_PLAYER","value":55},{"description":"","name":"COND_HEAR_SPOOKY","value":59},{"description":"","name":"COND_HEAR_THUMPER","value":51},{"description":"","name":"COND_HEAR_WORLD","value":54},{"description":"","name":"COND_HEAVY_DAMAGE","value":18},{"description":"","name":"COND_IDLE_INTERRUPT","value":2},{"description":"","name":"COND_IN_PVS","value":1},{"description":"","name":"COND_LIGHT_DAMAGE","value":17},{"description":"","name":"COND_LOST_ENEMY","value":11},{"description":"","name":"COND_LOST_PLAYER","value":33},{"description":"","name":"COND_LOW_PRIMARY_AMMO","value":3},{"description":"","name":"COND_MOBBED_BY_ENEMIES","value":62},{"description":"","name":"COND_NEW_ENEMY","value":26},{"description":"","name":"COND_NO_CUSTOM_INTERRUPTS","value":70},{"description":"","name":"COND_NO_HEAR_DANGER","value":60},{"description":"","name":"COND_NO_PRIMARY_AMMO","value":4},{"description":"","name":"COND_NO_SECONDARY_AMMO","value":5},{"description":"","name":"COND_NO_WEAPON","value":6},{"description":"No additional conditions are being played","name":"COND_NONE","value":0},{"description":"","name":"COND_NOT_FACING_ATTACK","value":40},{"description":"Freezes NPC movement","name":"COND_NPC_FREEZE","value":67},{"description":"Unfreezes NPC movement","name":"COND_NPC_UNFREEZE","value":68},{"description":"","name":"COND_PHYSICS_DAMAGE","value":19},{"description":"","name":"COND_PLAYER_ADDED_TO_SQUAD","value":64},{"description":"","name":"COND_PLAYER_PUSHING","value":66},{"description":"","name":"COND_PLAYER_REMOVED_FROM_SQUAD","value":65},{"description":"","name":"COND_PROVOKED","value":25},{"description":"","name":"COND_RECEIVED_ORDERS","value":63},{"description":"","name":"COND_REPEATED_DAMAGE","value":20},{"description":"","name":"COND_SCHEDULE_DONE","value":36},{"description":"","name":"COND_SEE_DISLIKE","value":9},{"description":"","name":"COND_SEE_ENEMY","value":10},{"description":"","name":"COND_SEE_FEAR","value":8},{"description":"","name":"COND_SEE_HATE","value":7},{"description":"","name":"COND_SEE_NEMESIS","value":34},{"description":"","name":"COND_SEE_PLAYER","value":32},{"description":"","name":"COND_SMELL","value":37},{"description":"","name":"COND_TALKER_RESPOND_TO_QUESTION","value":69},{"description":"","name":"COND_TARGET_OCCLUDED","value":14},{"description":"","name":"COND_TASK_FAILED","value":35},{"description":"","name":"COND_TOO_CLOSE_TO_ATTACK","value":38},{"description":"","name":"COND_TOO_FAR_TO_ATTACK","value":39},{"description":"","name":"COND_WAY_CLEAR","value":49},{"description":"","name":"COND_WEAPON_BLOCKED_BY_FRIEND","value":42},{"description":"","name":"COND_WEAPON_HAS_LOS","value":41},{"description":"","name":"COND_WEAPON_PLAYER_IN_SPREAD","value":43},{"description":"","name":"COND_WEAPON_PLAYER_NEAR_TARGET","value":44},{"description":"","name":"COND_WEAPON_SIGHT_OCCLUDED","value":45}],"isMembersOnly":true,"name":"COND"},{"description":"Enumerations used by {{LibraryFunction|util|PointContents}} and as tracer masks.","enumFields":[{"description":"Things that are not solid","name":"CONTENTS_EMPTY","value":0},{"description":"Things that are solid","name":"CONTENTS_SOLID","value":1},{"description":"Glass","name":"CONTENTS_WINDOW","value":2},{"description":"","name":"CONTENTS_AUX","value":4},{"description":"Bullets go through, solids don't","name":"CONTENTS_GRATE","value":8},{"description":"","name":"CONTENTS_SLIME","value":16},{"description":"Hits world but not skybox","name":"CONTENTS_WATER","value":32},{"description":"Things that block line of sight","name":"CONTENTS_BLOCKLOS","value":64},{"description":"Things that block light","name":"CONTENTS_OPAQUE","value":128},{"description":"","name":"CONTENTS_TESTFOGVOLUME","value":256},{"description":"","name":"CONTENTS_TEAM4","value":512},{"description":"","name":"CONTENTS_TEAM3","value":1024},{"description":"","name":"CONTENTS_TEAM1","value":2048},{"description":"","name":"CONTENTS_TEAM2","value":4096},{"description":"","name":"CONTENTS_IGNORE_NODRAW_OPAQUE","value":8192},{"description":"","name":"CONTENTS_MOVEABLE","value":16384},{"description":"","name":"CONTENTS_AREAPORTAL","value":32768},{"description":"","name":"CONTENTS_PLAYERCLIP","value":65536},{"description":"","name":"CONTENTS_MONSTERCLIP","value":131072},{"description":"","name":"CONTENTS_CURRENT_0","value":262144},{"description":"","name":"CONTENTS_CURRENT_180","value":1048576},{"description":"","name":"CONTENTS_CURRENT_270","value":2097152},{"description":"","name":"CONTENTS_CURRENT_90","value":524288},{"description":"","name":"CONTENTS_CURRENT_DOWN","value":8388608},{"description":"","name":"CONTENTS_CURRENT_UP","value":4194304},{"description":"","name":"CONTENTS_DEBRIS","value":67108864},{"description":"","name":"CONTENTS_DETAIL","value":134217728},{"description":"Hitbox","name":"CONTENTS_HITBOX","value":1073741824},{"description":"Ladder","name":"CONTENTS_LADDER","value":536870912},{"description":"NPCs","name":"CONTENTS_MONSTER","value":33554432},{"description":"","name":"CONTENTS_ORIGIN","value":16777216},{"description":"Hits world but not skybox","name":"CONTENTS_TRANSLUCENT","value":268435456},{"description":"Last visible contents enumeration","name":"LAST_VISIBLE_CONTENTS","value":128},{"description":"Sum of all the visible contents enumerations","name":"ALL_VISIBLE_CONTENTS","value":255}],"isMembersOnly":true,"name":"CONTENTS"},{"description":"Enumerations used by {{GlobalFunction|GetRenderTargetEx}}. Clientside only.","enumFields":[{"description":"","name":"CREATERENDERTARGETFLAGS_HDR","value":1},{"description":"","name":"CREATERENDERTARGETFLAGS_AUTOMIPMAP","value":2},{"description":"","name":"CREATERENDERTARGETFLAGS_UNFILTERABLE_OK","value":4}],"isMembersOnly":true,"name":"CREATERENDERTARGETFLAGS"},{"description":"Citizen type, a KeyValue for npc_citizen( citizentype ), serverside only.","enumFields":[{"description":"Default citizen","name":"CT_DEFAULT","value":0},{"description":"","name":"CT_DOWNTRODDEN","value":1},{"description":"Refugee","name":"CT_REFUGEE","value":2},{"description":"Rebel","name":"CT_REBEL","value":3},{"description":"Odessa?","name":"CT_UNIQUE","value":4}],"isMembersOnly":true,"name":"CT"},{"description":"Enumerations used by {{ClassFunction|NPC|Disposition}} and {{HookFunction|ENTITY|GetRelationship}}.","enumFields":[{"description":"Error","name":"D_ER","value":0},{"description":"Hate","name":"D_HT","value":1},{"description":"Frightened / Fear","name":"D_FR","value":2},{"description":"Like","name":"D_LI","value":3},{"description":"Neutral","name":"D_NU","value":4}],"isMembersOnly":true,"name":"D"},{"description":"Enumerations used by {{ClassFunction|CTakeDamageInfo|GetDamageType}}, {{ClassFunction|CTakeDamageInfo|SetDamageType}} and {{ClassFunction|CTakeDamageInfo|IsDamageType}}","enumFields":[{"description":"Generic damage","name":"DMG_GENERIC","value":0},{"description":"Caused by physics interaction. Ignored by airboat drivers. Used by the Crowbar","name":"DMG_CRUSH","value":1},{"description":"Bullet damage","name":"DMG_BULLET","value":2},{"description":"Sharp objects, such as Manhacks or other NPCs attacks","name":"DMG_SLASH","value":4},{"description":"Damage from fire","name":"DMG_BURN","value":8},{"description":"Hit by a vehicle. This will need to be set for passengers of some vehicle to receive damage.","name":"DMG_VEHICLE","value":16},{"description":"Fall damage","name":"DMG_FALL","value":32},{"description":"Explosion damage. Will be ignored by most vehicle passengers.","name":"DMG_BLAST","value":64},{"description":"Crowbar damage","name":"DMG_CLUB","value":128},{"description":"Electrical damage, shows smoke at the damage position","name":"DMG_SHOCK","value":256},{"description":"Sonic damage,used by the Gargantua and Houndeye NPCs","name":"DMG_SONIC","value":512},{"description":"Laser","name":"DMG_ENERGYBEAM","value":1024},{"description":"Prevent a physics force","name":"DMG_PREVENT_PHYSICS_FORCE","value":2048},{"description":"Never creates gibs. (Used by the crossbow)","name":"DMG_NEVERGIB","value":4096},{"description":"Always create gibs","name":"DMG_ALWAYSGIB","value":8192},{"description":"Drown damage","name":"DMG_DROWN","value":16384},{"description":"Same as DMG_POISON","name":"DMG_PARALYZE","value":32768},{"description":"Neurotoxin damage","name":"DMG_NERVEGAS","value":65536},{"description":"Poison damage","name":"DMG_POISON","value":131072},{"description":"Radiation. Will be ignored by most vehicle passengers.","name":"DMG_RADIATION","value":262144},{"description":"Damage applied to the player to restore health after drowning","name":"DMG_DROWNRECOVER","value":524288},{"description":"Toxic chemicals or acid burns","name":"DMG_ACID","value":1048576},{"description":"In an oven","name":"DMG_SLOWBURN","value":2097152},{"description":"Don't create a ragdoll on death","name":"DMG_REMOVENORAGDOLL","value":4194304},{"description":"Damage done by the gravity gun","name":"DMG_PHYSGUN","value":8388608},{"description":"Plasma","name":"DMG_PLASMA","value":16777216},{"description":"Airboat gun damage","name":"DMG_AIRBOAT","value":33554432},{"description":"Forces the entity to dissolve on death. This is what the combine ball uses when it hits a target","name":"DMG_DISSOLVE","value":67108864},{"description":"This won't hurt the player underwater","name":"DMG_BLAST_SURFACE","value":134217728},{"description":"Direct damage to the entity that does not go through any damage value modifications","name":"DMG_DIRECT","value":268435456},{"description":"The pellets fired from a shotgun","name":"DMG_BUCKSHOT","value":536870912},{"description":"Damage from SniperRound/SniperPenetratedRound ammo types","name":"DMG_SNIPER","value":1073741824},{"description":"Damage from npc_missiledefense, npc_combinegunship, or monster_mortar","name":"DMG_MISSILEDEFENSE","value":2147483648}],"isMembersOnly":true,"name":"DMG"},{"description":"Enumerations used by {{ClassFunction|Panel|Dock}}.","enumFields":[{"description":"Don't dock","name":"NODOCK","value":0},{"description":"Fill parent","name":"FILL","value":1},{"description":"Dock to the left","name":"LEFT","value":2},{"description":"Dock to the right","name":"RIGHT","value":3},{"description":"Dock to the top","name":"TOP","value":4},{"description":"Dock to the bottom","name":"BOTTOM","value":5}],"isMembersOnly":true,"name":"DOCK"},{"description":"Internal globals for SimpleDoF. Clientside only.","enumFields":[{"description":"","name":"DOF_OFFSET","value":256},{"description":"","name":"DOF_SPACING","value":512}],"isMembersOnly":true,"name":"DOF"},{"description":"Enumerations used by {{ClassFunction|Entity|AddEffects}},  {{ClassFunction|Entity|RemoveEffects}} and  {{ClassFunction|Entity|IsEffectActive}}.","enumFields":[{"description":"Performs bone merge on client side","name":"EF_BONEMERGE","value":1},{"description":"For use with EF_BONEMERGE. If this is set, then it places this ents origin at its parent and uses the parent's bbox + the max extents of the aiment. Otherwise, it sets up the parent's bones every frame to figure out where to place the aiment, which is inefficient because it'll setup the parent's bones even if the parent is not in the PVS.","name":"EF_BONEMERGE_FASTCULL","value":128},{"description":"DLIGHT centered at entity origin","name":"EF_BRIGHTLIGHT","value":2},{"description":"Player flashlight","name":"EF_DIMLIGHT","value":4},{"description":"Don't interpolate the next frame","name":"EF_NOINTERP","value":8},{"description":"Disables shadow","name":"EF_NOSHADOW","value":16},{"description":"Prevents the entity from drawing and networking.","name":"EF_NODRAW","value":32},{"description":"Don't receive shadows","name":"EF_NORECEIVESHADOW","value":64},{"description":"Makes the entity blink","name":"EF_ITEM_BLINK","value":256},{"description":"Always assume that the parent entity is animating","name":"EF_PARENT_ANIMATES","value":512},{"description":"Internal flag that is set by {{ClassFunction|Entity|FollowBone}}","name":"EF_FOLLOWBONE","value":1024}],"isMembersOnly":true,"name":"EF"},{"description":"Enumerations used by {{ClassFunction|Entity|AddEFlags}}, {{ClassFunction|Entity|RemoveEFlags}} and {{ClassFunction|Entity|IsEFlagSet}}.","enumFields":[{"description":"This is set on bots that are frozen","name":"EFL_BOT_FROZEN","value":256},{"description":"","name":"EFL_CHECK_UNTOUCH","value":16777216},{"description":"Some dirty bits with respect to abs computations","name":"EFL_DIRTY_ABSANGVELOCITY","value":8192},{"description":"","name":"EFL_DIRTY_ABSTRANSFORM","value":2048},{"description":"","name":"EFL_DIRTY_ABSVELOCITY","value":4096},{"description":"(Client only) need shadow manager to update the shadow","name":"EFL_DIRTY_SHADOWUPDATE","value":32},{"description":"","name":"EFL_DIRTY_SPATIAL_PARTITION","value":32768},{"description":"","name":"EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS","value":16384},{"description":"Entity shouldn't block NPC line-of-sight","name":"EFL_DONTBLOCKLOS","value":33554432},{"description":"NPCs should not walk on this entity","name":"EFL_DONTWALKON","value":67108864},{"description":"Entity is dormant, no updates to client","name":"EFL_DORMANT","value":2},{"description":"The default behavior in ShouldTransmit is to not send an entity if it doesn't have a model. Certain entities want to be sent anyway because all the drawing logic is in the client DLL. They can set this flag and the engine will transmit them even if they don't have model","name":"EFL_FORCE_CHECK_TRANSMIT","value":128},{"description":"One of the child entities is a player","name":"EFL_HAS_PLAYER_CHILD","value":16},{"description":"This is set if the entity detects that it's in the skybox. This forces it to pass the \"in PVS\" for transmission","name":"EFL_IN_SKYBOX","value":131072},{"description":"","name":"EFL_IS_BEING_LIFTED_BY_BARNACLE","value":1048576},{"description":"This is a special entity that should not be deleted when we restart entities only","name":"EFL_KEEP_ON_RECREATE_ENTITIES","value":16},{"description":"This entity is marked for death -- This allows the game to actually delete ents at a safe time.\n\n{{Warning|You should never set this flag manually.}}\n","name":"EFL_KILLME","value":1},{"description":"Lets us know when the noclip command is active","name":"EFL_NOCLIP_ACTIVE","value":4},{"description":"Another entity is watching events on this entity (used by teleport)","name":"EFL_NOTIFY","value":64},{"description":"Don't attach the edict","name":"EFL_NO_AUTO_EDICT_ATTACH","value":1024},{"description":"Doesn't accept forces from physics damage","name":"EFL_NO_DAMAGE_FORCES","value":-2147483648},{"description":"Entitiy shouldn't dissolve","name":"EFL_NO_DISSOLVE","value":134217728},{"description":"","name":"EFL_NO_GAME_PHYSICS_SIMULATION","value":8388608},{"description":"Mega physcannon can't ragdoll these guys","name":"EFL_NO_MEGAPHYSCANNON_RAGDOLL","value":268435456},{"description":"Physcannon can't pick these up or punt them","name":"EFL_NO_PHYSCANNON_INTERACTION","value":1073741824},{"description":"","name":"EFL_NO_ROTORWASH_PUSH","value":2097152},{"description":"Avoid executing the entity's Think","name":"EFL_NO_THINK_FUNCTION","value":4194304},{"description":"Don't adjust this entity's velocity when transitioning into water","name":"EFL_NO_WATER_VELOCITY_CHANGE","value":536870912},{"description":"Non-networked entity","name":"EFL_SERVER_ONLY","value":512},{"description":"Set while a model is setting up its bones","name":"EFL_SETTING_UP_BONES","value":8},{"description":"Used to determine if an entity is floating","name":"EFL_TOUCHING_FLUID","value":524288},{"description":"Entities with this flag set show up in the partition even when not solid","name":"EFL_USE_PARTITION_WHEN_NOT_SOLID","value":262144}],"isMembersOnly":true,"name":"EFL"},{"description":"Enumerations used by {{LibraryFunction|concommand|Add}}, {{GlobalFunction|CreateClientConVar}} and {{GlobalFunction|CreateConVar}}.","enumFields":[{"description":"Save the {{Type|ConVar}} value into config.cfg\n\nReported as \"a\" by ''cvarlist'', except Lua {{Type|ConVar}}s\n","name":"FCVAR_ARCHIVE","value":128},{"description":"Save the {{Type|ConVar}} value into config.cfg on XBox","name":"FCVAR_ARCHIVE_XBOX","value":16777216},{"description":"Requires sv_cheats to be enabled to change the {{Type|ConVar}} or run the command\n\nReported as \"cheat\" by ''cvarlist''\n","name":"FCVAR_CHEAT","value":16384},{"description":"IVEngineClient::ClientCmd is allowed to execute this command\n\nReported as \"clientcmd_can_execute\" by ''cvarlist''\n","name":"FCVAR_CLIENTCMD_CAN_EXECUTE","value":1073741824},{"description":"{{Type|ConVar}} is defined by the client DLL.<br/>This flag is set automatically\n\nReported as \"cl\" by ''cvarlist''\n","name":"FCVAR_CLIENTDLL","value":8},{"description":"Force the {{Type|ConVar}} to be recorded by demo recordings.\n\nReported as \"demo\" by ''cvarlist''\n","name":"FCVAR_DEMO","value":65536},{"description":"Opposite of FCVAR_DEMO, ensures the {{Type|ConVar}} is not recorded in demos\n\nReported as \"norecord\" by ''cvarlist''\n","name":"FCVAR_DONTRECORD","value":131072},{"description":"{{Type|ConVar}} is defined by the game DLL.<br/>This flag is set automatically\n\nReported as \"sv\" by ''cvarlist''\n","name":"FCVAR_GAMEDLL","value":4},{"description":"Set automatically on all ConVars and console commands created by the client Lua state.\n\nReported as \"lua_client\" by ''cvarlist''\n","name":"FCVAR_LUA_CLIENT","value":262144},{"description":"Set automatically on all ConVars and console commands created by the server Lua state.\n\nReported as \"lua_server\" by ''cvarlist''\n","name":"FCVAR_LUA_SERVER","value":524288},{"description":"Tells the engine to never print this variable as a string since it contains control sequences\n\nReported as \"numeric\" by ''cvarlist''\n","name":"FCVAR_NEVER_AS_STRING","value":4096},{"description":"No flags","name":"FCVAR_NONE","value":0},{"description":"For serverside {{Type|ConVar}}s, notifies all players with blue chat text when the value gets changed\n\nReported as \"nf\" by ''cvarlist''\n","name":"FCVAR_NOTIFY","value":256},{"description":"Makes the {{Type|ConVar}} not changeable while connected to a server or in singleplayer","name":"FCVAR_NOT_CONNECTED","value":4194304},{"description":"Forces the {{Type|ConVar}} to only have printable characters ( No control characters )\n\nReported as \"print\" by ''cvarlist''\n","name":"FCVAR_PRINTABLEONLY","value":1024},{"description":"Makes the {{Type|ConVar}} value hidden from all clients ( For example sv_password )\n\nReported as \"prot\" by ''cvarlist''\n","name":"FCVAR_PROTECTED","value":32},{"description":"For serverside {{Type|ConVar}}s, it will send its value to all clients. The {{Type|ConVar}} with the same name must also exist on the client!\n\nReported as \"rep\" by ''cvarlist''\n","name":"FCVAR_REPLICATED","value":8192},{"description":"Prevents the server from querying value of this {{Type|ConVar}}","name":"FCVAR_SERVER_CANNOT_QUERY","value":536870912},{"description":"Makes the command only executable from the server console\n\nReported as \"server_can_execute\" by ''cvarlist''\n","name":"FCVAR_SERVER_CAN_EXECUTE","value":268435456},{"description":"Executing the command or changing the {{Type|ConVar}} is only allowed in singleplayer\n\nReported as \"sp\" by ''cvarlist''\n","name":"FCVAR_SPONLY","value":64},{"description":"Don't log the {{Type|ConVar}} changes to console/log files/users\n\nReported as \"log\" by ''cvarlist''\n","name":"FCVAR_UNLOGGED","value":2048},{"description":"If this is set, the convar will become anonymous and won't show up in the 'find' results.","name":"FCVAR_UNREGISTERED","value":1},{"description":"For clientside commands, sends the value to the server\n\nReported as \"user\" by ''cvarlist''\n","name":"FCVAR_USERINFO","value":512}],"isMembersOnly":true,"name":"FCVAR"},{"description":"Enumerations used by {{ClassFunction|IGModAudioChannel|FFT}}. Clientside only.","enumFields":[{"description":"128 levels","name":"FFT_256","value":0},{"description":"256 levels","name":"FFT_512","value":1},{"description":"512 levels","name":"FFT_1024","value":2},{"description":"1024 levels","name":"FFT_2048","value":3},{"description":"2048 levels","name":"FFT_4096","value":4},{"description":"4096 levels","name":"FFT_8192","value":5},{"description":"8192 levels","name":"FFT_16384","value":6},{"description":"16384 levels","name":"FFT_32768","value":7}],"isMembersOnly":true,"name":"FFT"},{"description":"Enumerations used by {{ClassFunction|Entity|AddFlags}}, {{ClassFunction|Entity|RemoveFlags}} and {{ClassFunction|Entity|IsFlagSet}}.","enumFields":[{"description":"Is the entity on ground or not","name":"FL_ONGROUND","value":1},{"description":"Is player ducking or not","name":"FL_DUCKING","value":2},{"description":"Is the player in the process of ducking or standing up","name":"FL_ANIMDUCKING","value":4},{"description":"The player is jumping out of water","name":"FL_WATERJUMP","value":8},{"description":"This player is controlling a func_train","name":"FL_ONTRAIN","value":16},{"description":"Indicates the entity is standing in rain","name":"FL_INRAIN","value":32},{"description":"Completely freezes the player","name":"FL_FROZEN","value":64},{"description":"This player is controlling something UI related in the world, this prevents his movement, but doesn't freeze mouse movement, jumping, etc.","name":"FL_ATCONTROLS","value":128},{"description":"Is this entity a player or not","name":"FL_CLIENT","value":256},{"description":"Bots have this flag","name":"FL_FAKECLIENT","value":512},{"description":"Is the player in water or not","name":"FL_INWATER","value":1024},{"description":"This entity can fly","name":"FL_FLY","value":2048},{"description":"This entity can swim","name":"FL_SWIM","value":4096},{"description":"This entity is a func_conveyor","name":"FL_CONVEYOR","value":8192},{"description":"NPCs have this flag (NPC: Ignore player push)","name":"FL_NPC","value":16384},{"description":"Whether the player has god mode enabled","name":"FL_GODMODE","value":32768},{"description":"Makes the entity invisible to AI","name":"FL_NOTARGET","value":65536},{"description":"This entity can be aimed at","name":"FL_AIMTARGET","value":131072},{"description":"Not all corners are valid","name":"FL_PARTIALGROUND","value":262144},{"description":"It's a static prop","name":"FL_STATICPROP","value":524288},{"description":"worldgraph has this ent listed as something that blocks a connection","name":"FL_GRAPHED","value":1048576},{"description":"This entity is a grenade, unused","name":"FL_GRENADE","value":2097152},{"description":"Changes the SV_Movestep() behavior to not do any processing","name":"FL_STEPMOVEMENT","value":4194304},{"description":"Doesn't generate touch functions, calls {{HookFunction|ENTITY|EndTouch}} when this flag gets set during a touch callback","name":"FL_DONTTOUCH","value":8388608},{"description":"Base velocity has been applied this frame (used to convert base velocity into momentum)","name":"FL_BASEVELOCITY","value":16777216},{"description":"This entity is a brush and part of the world","name":"FL_WORLDBRUSH","value":33554432},{"description":"This entity can be seen by NPCs","name":"FL_OBJECT","value":67108864},{"description":"This entity is about to get removed","name":"FL_KILLME","value":134217728},{"description":"This entity is on fire","name":"FL_ONFIRE","value":268435456},{"description":"The entity is currently dissolving","name":"FL_DISSOLVING","value":536870912},{"description":"This entity is about to become a ragdoll","name":"FL_TRANSRAGDOLL","value":1073741824},{"description":"This moving door can't be blocked by the player","name":"FL_UNBLOCKABLE_BY_PLAYER","value":-2147483648}],"isMembersOnly":true,"name":"FL"},{"description":"Enumerations used by {{GlobalFunction|AccessorFunc}}.","enumFields":[{"description":"Forces the function to take {{Type|string}}s only","name":"FORCE_STRING","value":1},{"description":"Forces the function to take {{Type|number}}s only","name":"FORCE_NUMBER","value":2},{"description":"Forces the function to take {{Type|boolean}}s only","name":"FORCE_BOOL","value":3}],"isMembersOnly":true,"name":"FORCE"},{"description":"Enumerations used by {{ClassFunction|Entity|SetSolidFlags}} and {{ClassFunction|Entity|GetSolidFlags}}.","enumFields":[{"description":"","name":"FSOLID_CUSTOMRAYTEST","value":1},{"description":"","name":"FSOLID_CUSTOMBOXTEST","value":2},{"description":"","name":"FSOLID_NOT_SOLID","value":4},{"description":"","name":"FSOLID_TRIGGER","value":8},{"description":"","name":"FSOLID_NOT_STANDABLE","value":16},{"description":"","name":"FSOLID_VOLUME_CONTENTS","value":32},{"description":"","name":"FSOLID_FORCE_WORLD_ALIGNED","value":64},{"description":"","name":"FSOLID_USE_TRIGGER_BOUNDS","value":128},{"description":"","name":"FSOLID_ROOT_PARENT_ALIGNED","value":256},{"description":"","name":"FSOLID_TRIGGER_TOUCH_DEBRIS","value":512},{"description":"","name":"FSOLID_MAX_BITS","value":10}],"isMembersOnly":true,"name":"FSOLID"},{"description":"Enumerations used by {{ClassFunction|PhysObj|AddGameFlag}}, {{ClassFunction|PhysObj|HasGameFlag}} and {{ClassFunction|PhysObj|ClearGameFlag}}.","enumFields":[{"description":"Won't receive physics forces from collisions and won't collide with other {{Type|PhysObj}} with the same flag set.","name":"FVPHYSICS_CONSTRAINT_STATIC","value":2},{"description":"Colliding with entities will cause 1000 damage with DMG_DISSOLVE as the damage type, but only if EFL_NO_DISSOLVE is not set.","name":"FVPHYSICS_DMG_DISSOLVE","value":512},{"description":"Does slice damage, not just blunt damage.","name":"FVPHYSICS_DMG_SLICE","value":1},{"description":"Will deal high physics damage even with a small mass.","name":"FVPHYSICS_HEAVY_OBJECT","value":32},{"description":"This {{Type|PhysObj}} is part of an entity with multiple {{Type|PhysObj}} , such as a ragdoll or a vehicle , and will be considered during collision damage events.","name":"FVPHYSICS_MULTIOBJECT_ENTITY","value":16},{"description":"Colliding with entities won't cause physics damage.","name":"FVPHYSICS_NO_IMPACT_DMG","value":1024},{"description":"Like FVPHYSICS_NO_NPC_IMPACT_DMG, but only checks for NPCs. Usually set on Combine Balls fired by Combine Soldiers.","name":"FVPHYSICS_NO_NPC_IMPACT_DMG","value":2048},{"description":"Doesn't allow the player to pick this {{Type|PhysObj}} with the Gravity Gun or +use pickup.","name":"FVPHYSICS_NO_PLAYER_PICKUP","value":128},{"description":"We won't collide with other {{Type|PhysObj}} associated to the same entity, only used for vehicles and ragdolls held by the Super Gravity Gun.","name":"FVPHYSICS_NO_SELF_COLLISIONS","value":32768},{"description":"This {{Type|PhysObj}} is part of a ragdoll.","name":"FVPHYSICS_PART_OF_RAGDOLL","value":8},{"description":"Set by the physics engine when two {{Type|PhysObj}} are penetrating each other. This is only automatically updated for non-static physics objects.","name":"FVPHYSICS_PENETRATING","value":64},{"description":"Set when the player is holding this {{Type|PhysObj}} with the Gravity Gun or +use pickup.","name":"FVPHYSICS_PLAYER_HELD","value":4},{"description":"This object was thrown by the Gravity Gun , stuns Antlion guards, Hunters, and squashes Antlion grubs.","name":"FVPHYSICS_WAS_THROWN","value":256}],"isMembersOnly":true,"name":"FVPHYSICS"},{"description":"Enumerations used by {{ClassFunction|Player|AnimResetGestureSlot}} and {{ClassFunction|Player|AnimRestartGesture}}.","enumFields":[{"description":"Slot for weapon gestures","name":"GESTURE_SLOT_ATTACK_AND_RELOAD","value":0},{"description":"","name":"GESTURE_SLOT_GRENADE","value":1},{"description":"Slot for jump gestures","name":"GESTURE_SLOT_JUMP","value":2},{"description":"Slot for swimming gestures","name":"GESTURE_SLOT_SWIM","value":3},{"description":"Slot for flinching gestures","name":"GESTURE_SLOT_FLINCH","value":4},{"description":"","name":"GESTURE_SLOT_VCD","value":5},{"description":"Slot for custom gestures","name":"GESTURE_SLOT_CUSTOM","value":6}],"isMembersOnly":true,"name":"GESTURE_SLOT"},{"description":"Enumerations used by {{LibraryFunction|game|SetGlobalState}} and {{LibraryFunction|game|GetGlobalState}}.\n\nServerside only.","enumFields":[{"description":"Initial state, the global state is off.","name":"GLOBAL_OFF","value":0},{"description":"The global state is enabled.","name":"GLOBAL_ON","value":1},{"description":"The global state is dead and is no longer active. It will be cleared.","name":"GLOBAL_DEAD","value":2}],"isMembersOnly":true,"name":"GLOBAL"},{"description":"Enumerations used by {{ClassFunction|IGModAudioChannel|GetState}}. Clientside only.","enumFields":[{"description":"The channel is stopped","name":"GMOD_CHANNEL_STOPPED","value":0},{"description":"The channel is playing","name":"GMOD_CHANNEL_PLAYING","value":1},{"description":"The channel is paused","name":"GMOD_CHANNEL_PAUSED","value":2},{"description":"The channel is buffering","name":"GMOD_CHANNEL_STALLED","value":3}],"isMembersOnly":true,"name":"GMOD_CHANNEL"},{"description":"Enumerations used by {{HookFunction|GM|ScalePlayerDamage}} and {{HookFunction|GM|ScaleNPCDamage}} and returned by {{ClassFunction|Player|LastHitGroup}}.","enumFields":[{"description":"1:1 damage. This hitgroup is not present on default player models.<br/>It is unknown how this is generated in {{HookFunction|GM|ScalePlayerDamage}}, but it occurs when shot by NPCs ( npc_combine_s ) for example.","name":"HITGROUP_GENERIC","value":0},{"description":"Head","name":"HITGROUP_HEAD","value":1},{"description":"Chest","name":"HITGROUP_CHEST","value":2},{"description":"Stomach","name":"HITGROUP_STOMACH","value":3},{"description":"Left arm","name":"HITGROUP_LEFTARM","value":4},{"description":"Right arm","name":"HITGROUP_RIGHTARM","value":5},{"description":"Left leg","name":"HITGROUP_LEFTLEG","value":6},{"description":"Right leg","name":"HITGROUP_RIGHTLEG","value":7},{"description":"Gear. Supposed to be belt area.<br/>This hitgroup is not present on default player models.","name":"HITGROUP_GEAR","value":10}],"isMembersOnly":true,"name":"HITGROUP"},{"description":"Enumerations used by {{ClassFunction|Player|PrintMessage}} and {{GlobalFunction|PrintMessage}}.","enumFields":[{"description":"No longer works; now same as HUD_PRINTCONSOLE","name":"HUD_PRINTNOTIFY","value":1},{"description":"Console","name":"HUD_PRINTCONSOLE","value":2},{"description":"Chat, also prints to console","name":"HUD_PRINTTALK","value":3},{"description":"Center of the screen","name":"HUD_PRINTCENTER","value":4}],"isMembersOnly":true,"name":"HUD"},{"description":"Enumerations used by {{ClassFunction|NPC|SetHullType}} and  {{ClassFunction|NPC|GetHullType}}. Serverside only.","enumFields":[{"description":"Hull of a Citizen","name":"HULL_HUMAN","value":0},{"description":"","name":"HULL_SMALL_CENTERED","value":1},{"description":"","name":"HULL_WIDE_HUMAN","value":2},{"description":"","name":"HULL_TINY","value":3},{"description":"","name":"HULL_WIDE_SHORT","value":4},{"description":"","name":"HULL_MEDIUM","value":5},{"description":"","name":"HULL_TINY_CENTERED","value":6},{"description":"","name":"HULL_LARGE","value":7},{"description":"","name":"HULL_LARGE_CENTERED","value":8},{"description":"","name":"HULL_MEDIUM_TALL","value":9}],"isMembersOnly":true,"name":"HULL"},{"description":"Enumerations used by {{GlobalFunction|GetRenderTargetEx}}. Clientside only.","enumFields":[{"description":"","name":"IMAGE_FORMAT_DEFAULT","value":-1},{"description":"","name":"IMAGE_FORMAT_RGBA8888","value":0},{"description":"","name":"IMAGE_FORMAT_ABGR8888","value":1},{"description":"","name":"IMAGE_FORMAT_RGB888","value":2},{"description":"","name":"IMAGE_FORMAT_BGR888","value":3},{"description":"","name":"IMAGE_FORMAT_RGB565","value":4},{"description":"","name":"IMAGE_FORMAT_ARGB8888","value":11},{"description":"","name":"IMAGE_FORMAT_BGRA8888","value":12},{"description":"","name":"IMAGE_FORMAT_RGBA16161616","value":25},{"description":"","name":"IMAGE_FORMAT_RGBA16161616F","value":24}],"isMembersOnly":true,"name":"IMAGE_FORMAT"},{"description":"Unlike {{Enum|BUTTON_CODE}}, these enums are abstracted to allow the user to bind actions to any key they might prefer.\n\nKeybinds using these actions work with two console commands, one starting with a plus and one with a minus symbol. A key press or release will call either the plus or minus command, adding or removing the corresponding enum in the current {{Type|CUserCmd}}.\n\nEnumerations used by:\n* {{ClassFunction|Player|KeyDown}}\n* {{ClassFunction|Player|KeyDownLast}}\n* {{ClassFunction|Player|KeyPressed}}\n* {{ClassFunction|Player|KeyReleased}}\n* {{ClassFunction|CMoveData|AddKey}}\n* {{ClassFunction|CMoveData|GetButtons}}\n* {{ClassFunction|CMoveData|GetOldButtons}}\n* {{ClassFunction|CMoveData|KeyDown}}\n* {{ClassFunction|CMoveData|KeyPressed}}\n* {{ClassFunction|CMoveData|KeyReleased}}\n* {{ClassFunction|CMoveData|KeyWasDown}}\n* {{ClassFunction|CMoveData|SetButtons}}\n* {{ClassFunction|CMoveData|SetOldButtons}}\n* {{ClassFunction|CUserCmd|GetButtons}}\n* {{ClassFunction|CUserCmd|KeyDown}}\n* {{ClassFunction|CUserCmd|RemoveKey}}\n* {{ClassFunction|CUserCmd|SetButtons}}\n* {{HookFunction|GM|KeyPress}}\n* {{HookFunction|GM|KeyRelease}}","enumFields":[{"description":"+attack bound key ( Default: Left Mouse Button )","name":"IN_ATTACK","value":1},{"description":"+jump bound key ( Default: Space )","name":"IN_JUMP","value":2},{"description":"+duck bound key ( Default: CTRL )","name":"IN_DUCK","value":4},{"description":"+forward bound key ( Default: W )","name":"IN_FORWARD","value":8},{"description":"+back bound key ( Default: S )","name":"IN_BACK","value":16},{"description":"+use bound key ( Default: E )","name":"IN_USE","value":32},{"description":"","name":"IN_CANCEL","value":64},{"description":"+left bound key ( Look left )","name":"IN_LEFT","value":128},{"description":"+right bound key ( Look right )","name":"IN_RIGHT","value":256},{"description":"+moveleft bound key ( Default: A )","name":"IN_MOVELEFT","value":512},{"description":"+moveright bound key ( Default: D )","name":"IN_MOVERIGHT","value":1024},{"description":"+attack2 bound key ( Default: Right Mouse Button )","name":"IN_ATTACK2","value":2048},{"description":"","name":"IN_RUN","value":4096},{"description":"+reload bound key ( Default: R )","name":"IN_RELOAD","value":8192},{"description":"+alt1 bound key","name":"IN_ALT1","value":16384},{"description":"+alt2 bound key","name":"IN_ALT2","value":32768},{"description":"+showscores bound key ( Default: Tab )","name":"IN_SCORE","value":65536},{"description":"+speed bound key ( Default: Shift )","name":"IN_SPEED","value":131072},{"description":"+walk bound key ( Slow walk )","name":"IN_WALK","value":262144},{"description":"+zoom bound key ( Suit Zoom )","name":"IN_ZOOM","value":524288},{"description":"For use in weapons. Set in the physgun when scrolling an object away from you.","name":"IN_WEAPON1","value":1048576},{"description":"For use in weapons. Set in the physgun when scrolling an object towards you.","name":"IN_WEAPON2","value":2097152},{"description":"","name":"IN_BULLRUSH","value":4194304},{"description":"+grenade1 bound key","name":"IN_GRENADE1","value":8388608},{"description":"+grenade2 bound key","name":"IN_GRENADE2","value":16777216}],"isMembersOnly":true,"name":"IN"},{"description":"Enumerations used by {{LibraryFunction|input|IsButtonDown}}.\n\nIt's also part of the {{Enum|BUTTON_CODE}}.","enumFields":[{"description":"","name":"JOYSTICK_FIRST","value":114},{"description":"rowspan{{eq}}2{{!}}Joystick buttons are in this range, but don't have individual enum names.","name":"JOYSTICK_FIRST_BUTTON","value":114},{"description":"style{{eq}}\"display:none\"{{!}}","name":"JOYSTICK_LAST_BUTTON","value":145},{"description":"rowspan{{eq}}2{{!}}Joystick POV buttons are in this range, but don't have individual enum names.","name":"JOYSTICK_FIRST_POV_BUTTON","value":146},{"description":"style{{eq}}\"display:none\"{{!}}","name":"JOYSTICK_LAST_POV_BUTTON","value":149},{"description":"rowspan{{eq}}2{{!}}Joystick axis buttons are in this range, but don't have individual enum names.","name":"JOYSTICK_FIRST_AXIS_BUTTON","value":150},{"description":"style{{eq}}\"display:none\"{{!}}","name":"JOYSTICK_LAST_AXIS_BUTTON","value":161},{"description":"","name":"JOYSTICK_LAST","value":161}],"isMembersOnly":true,"name":"JOYSTICK"},{"description":"Enumerations used by:\n* {{LibraryFunction|input|IsKeyDown}}\n* {{LibraryFunction|input|WasKeyPressed}}\n* {{LibraryFunction|input|WasKeyReleased}}\n* {{LibraryFunction|input|WasKeyTyped}}\n* {{LibraryFunction|input|IsKeyTrapping}}\n* {{LibraryFunction|input|GetKeyName}}\n* {{LibraryFunction|input|LookupBinding}}\n* {{HookFunction|PANEL|OnKeyCodePressed}}\n\nIt's also part of the {{Enum|BUTTON_CODE}}.","enumFields":[{"description":"","name":"KEY_FIRST","value":0},{"description":"","name":"KEY_NONE","value":0},{"description":"Normal number 0 key","name":"KEY_0","value":1},{"description":"Normal number 1 key","name":"KEY_1","value":2},{"description":"Normal number 2 key","name":"KEY_2","value":3},{"description":"Normal number 3 key","name":"KEY_3","value":4},{"description":"Normal number 4 key","name":"KEY_4","value":5},{"description":"Normal number 5 key","name":"KEY_5","value":6},{"description":"Normal number 6 key","name":"KEY_6","value":7},{"description":"Normal number 7 key","name":"KEY_7","value":8},{"description":"Normal number 8 key","name":"KEY_8","value":9},{"description":"Normal number 9 key","name":"KEY_9","value":10},{"description":"","name":"KEY_A","value":11},{"description":"","name":"KEY_B","value":12},{"description":"","name":"KEY_C","value":13},{"description":"","name":"KEY_D","value":14},{"description":"","name":"KEY_E","value":15},{"description":"","name":"KEY_F","value":16},{"description":"","name":"KEY_G","value":17},{"description":"","name":"KEY_H","value":18},{"description":"","name":"KEY_I","value":19},{"description":"","name":"KEY_J","value":20},{"description":"","name":"KEY_K","value":21},{"description":"","name":"KEY_L","value":22},{"description":"","name":"KEY_M","value":23},{"description":"","name":"KEY_N","value":24},{"description":"","name":"KEY_O","value":25},{"description":"","name":"KEY_P","value":26},{"description":"","name":"KEY_Q","value":27},{"description":"","name":"KEY_R","value":28},{"description":"","name":"KEY_S","value":29},{"description":"","name":"KEY_T","value":30},{"description":"","name":"KEY_U","value":31},{"description":"","name":"KEY_V","value":32},{"description":"","name":"KEY_W","value":33},{"description":"","name":"KEY_X","value":34},{"description":"","name":"KEY_Y","value":35},{"description":"","name":"KEY_Z","value":36},{"description":"Keypad number 0 key","name":"KEY_PAD_0","value":37},{"description":"Keypad number 1 key","name":"KEY_PAD_1","value":38},{"description":"Keypad number 2 key","name":"KEY_PAD_2","value":39},{"description":"Keypad number 3 key","name":"KEY_PAD_3","value":40},{"description":"Keypad number 4 key","name":"KEY_PAD_4","value":41},{"description":"Keypad number 5 key","name":"KEY_PAD_5","value":42},{"description":"Keypad number 6 key","name":"KEY_PAD_6","value":43},{"description":"Keypad number 7 key","name":"KEY_PAD_7","value":44},{"description":"Keypad number 8 key","name":"KEY_PAD_8","value":45},{"description":"Keypad number 9 key","name":"KEY_PAD_9","value":46},{"description":"Keypad division/slash key (/)","name":"KEY_PAD_DIVIDE","value":47},{"description":"Keypad asterisk key (*)","name":"KEY_PAD_MULTIPLY","value":48},{"description":"Keypad minus key","name":"KEY_PAD_MINUS","value":49},{"description":"Keypad plus key","name":"KEY_PAD_PLUS","value":50},{"description":"Keypad enter key","name":"KEY_PAD_ENTER","value":51},{"description":"Keypad dot key (.)","name":"KEY_PAD_DECIMAL","value":52},{"description":"","name":"KEY_LBRACKET","value":53},{"description":"","name":"KEY_RBRACKET","value":54},{"description":"","name":"KEY_SEMICOLON","value":55},{"description":"","name":"KEY_APOSTROPHE","value":56},{"description":"","name":"KEY_BACKQUOTE","value":57},{"description":"","name":"KEY_COMMA","value":58},{"description":"","name":"KEY_PERIOD","value":59},{"description":"","name":"KEY_SLASH","value":60},{"description":"","name":"KEY_BACKSLASH","value":61},{"description":"","name":"KEY_MINUS","value":62},{"description":"","name":"KEY_EQUAL","value":63},{"description":"","name":"KEY_ENTER","value":64},{"description":"","name":"KEY_SPACE","value":65},{"description":"","name":"KEY_BACKSPACE","value":66},{"description":"","name":"KEY_TAB","value":67},{"description":"","name":"KEY_CAPSLOCK","value":68},{"description":"","name":"KEY_NUMLOCK","value":69},{"description":"","name":"KEY_ESCAPE","value":70},{"description":"","name":"KEY_SCROLLLOCK","value":71},{"description":"","name":"KEY_INSERT","value":72},{"description":"","name":"KEY_DELETE","value":73},{"description":"","name":"KEY_HOME","value":74},{"description":"","name":"KEY_END","value":75},{"description":"","name":"KEY_PAGEUP","value":76},{"description":"","name":"KEY_PAGEDOWN","value":77},{"description":"","name":"KEY_BREAK","value":78},{"description":"The left Shift key, has been seen to be triggered by Right Shift in {{HookFunction|PANEL|OnKeyCodePressed}}","name":"KEY_LSHIFT","value":79},{"description":"","name":"KEY_RSHIFT","value":80},{"description":"","name":"KEY_LALT","value":81},{"description":"","name":"KEY_RALT","value":82},{"description":"","name":"KEY_LCONTROL","value":83},{"description":"","name":"KEY_RCONTROL","value":84},{"description":"The left Windows key or the Command key on Mac OSX","name":"KEY_LWIN","value":85},{"description":"The right Windows key or the Command key on Mac OSX","name":"KEY_RWIN","value":86},{"description":"","name":"KEY_APP","value":87},{"description":"","name":"KEY_UP","value":88},{"description":"","name":"KEY_LEFT","value":89},{"description":"","name":"KEY_DOWN","value":90},{"description":"","name":"KEY_RIGHT","value":91},{"description":"","name":"KEY_F1","value":92},{"description":"","name":"KEY_F2","value":93},{"description":"","name":"KEY_F3","value":94},{"description":"","name":"KEY_F4","value":95},{"description":"","name":"KEY_F5","value":96},{"description":"","name":"KEY_F6","value":97},{"description":"","name":"KEY_F7","value":98},{"description":"","name":"KEY_F8","value":99},{"description":"","name":"KEY_F9","value":100},{"description":"","name":"KEY_F10","value":101},{"description":"","name":"KEY_F11","value":102},{"description":"","name":"KEY_F12","value":103},{"description":"","name":"KEY_CAPSLOCKTOGGLE","value":104},{"description":"","name":"KEY_NUMLOCKTOGGLE","value":105},{"description":"","name":"KEY_LAST","value":106},{"description":"","name":"KEY_SCROLLLOCKTOGGLE","value":106},{"description":"","name":"KEY_COUNT","value":107},{"description":"","name":"KEY_XBUTTON_A","value":114},{"description":"","name":"KEY_XBUTTON_B","value":115},{"description":"","name":"KEY_XBUTTON_X","value":116},{"description":"","name":"KEY_XBUTTON_Y","value":117},{"description":"","name":"KEY_XBUTTON_LEFT_SHOULDER","value":118},{"description":"","name":"KEY_XBUTTON_RIGHT_SHOULDER","value":119},{"description":"","name":"KEY_XBUTTON_BACK","value":120},{"description":"","name":"KEY_XBUTTON_START","value":121},{"description":"","name":"KEY_XBUTTON_STICK1","value":122},{"description":"","name":"KEY_XBUTTON_STICK2","value":123},{"description":"","name":"KEY_XBUTTON_UP","value":146},{"description":"","name":"KEY_XBUTTON_RIGHT","value":147},{"description":"","name":"KEY_XBUTTON_DOWN","value":148},{"description":"","name":"KEY_XBUTTON_LEFT","value":149},{"description":"","name":"KEY_XSTICK1_RIGHT","value":150},{"description":"","name":"KEY_XSTICK1_LEFT","value":151},{"description":"","name":"KEY_XSTICK1_DOWN","value":152},{"description":"","name":"KEY_XSTICK1_UP","value":153},{"description":"","name":"KEY_XBUTTON_LTRIGGER","value":154},{"description":"","name":"KEY_XBUTTON_RTRIGGER","value":155},{"description":"","name":"KEY_XSTICK2_RIGHT","value":156},{"description":"","name":"KEY_XSTICK2_LEFT","value":157},{"description":"","name":"KEY_XSTICK2_DOWN","value":158},{"description":"","name":"KEY_XSTICK2_UP","value":159}],"isMembersOnly":true,"name":"KEY"},{"description":"Used by {{ClassFunction|Entity|SetRenderFX}} and returned by {{ClassFunction|Entity|GetRenderFX}}.\n\nMost of these require alpha value of entitys color to be less than 255 to have any visible effect.","enumFields":[{"description":"None. No change.","name":"kRenderFxNone","value":0},{"description":"Slowly pulses the entitys transparency, +-15 to the current alpha.","name":"kRenderFxPulseSlow","value":1},{"description":"Quickly pulses the entitys transparency, +-15 to the current alpha.","name":"kRenderFxPulseFast","value":2},{"description":"Slowly pulses the entitys transparency, +-60 to the current alpha.","name":"kRenderFxPulseSlowWide","value":3},{"description":"Quickly pulses the entitys transparency, +-60 to the current alpha.","name":"kRenderFxPulseFastWide","value":4},{"description":"Slowly fades away the entity, making it completely invisible.<br/>Starts from whatever alpha the entity currently has set.","name":"kRenderFxFadeSlow","value":5},{"description":"Quickly fades away the entity, making it completely invisible.<br/>Starts from whatever alpha the entity currently has set.","name":"kRenderFxFadeFast","value":6},{"description":"Slowly solidifies the entity, making it fully opaque.<br/>Starts from whatever alpha the entity currently has set.","name":"kRenderFxSolidSlow","value":7},{"description":"Quickly solidifies the entity, making it fully opaque.<br/>Starts from whatever alpha the entity currently has set.","name":"kRenderFxSolidFast","value":8},{"description":"Slowly switches the entitys transparency between its alpha and 0.","name":"kRenderFxStrobeSlow","value":9},{"description":"Quickly switches the entitys transparency between its alpha and 0.","name":"kRenderFxStrobeFast","value":10},{"description":"Very quickly switches the entitys transparency between its alpha and 0.","name":"kRenderFxStrobeFaster","value":11},{"description":"Same as Strobe Slow, but the interval is more randomized.","name":"kRenderFxFlickerSlow","value":12},{"description":"Same as Strobe Fast, but the interval is more randomized.","name":"kRenderFxFlickerFast","value":13},{"description":"","name":"kRenderFxNoDissipation","value":14},{"description":"Flickers ( randomizes ) the entitys transparency","name":"kRenderFxDistort","value":15},{"description":"Same as Distort, but fades the entity away the farther you are from it.","name":"kRenderFxHologram","value":16},{"description":"","name":"kRenderFxExplode","value":17},{"description":"","name":"kRenderFxGlowShell","value":18},{"description":"","name":"kRenderFxClampMinScale","value":19},{"description":"","name":"kRenderFxEnvRain","value":20},{"description":"","name":"kRenderFxEnvSnow","value":21},{"description":"","name":"kRenderFxSpotlight","value":22},{"description":"","name":"kRenderFxRagdoll","value":23},{"description":"Quickly pulses the entitys transparency, from 0 to 255.","name":"kRenderFxPulseFastWider","value":24}],"isMembersOnly":true,"name":"kRenderFx"},{"description":"Enumerations used as trace masks in {{Struct|Trace}} and {{Struct|HullTrace}}. These enumerations are simply combinations of {{Enum|CONTENTS}}.","enumFields":[{"description":"Anything that is not empty space","name":"MASK_ALL","value":4294967295},{"description":"Anything that blocks line of sight for AI","name":"MASK_BLOCKLOS","value":16449},{"description":"Anything that blocks line of sight for AI or NPCs","name":"MASK_BLOCKLOS_AND_NPCS","value":33570881},{"description":"Water that is moving (may not work)","name":"MASK_CURRENT","value":16515072},{"description":"Anything that blocks corpse movement","name":"MASK_DEADSOLID","value":65547},{"description":"Anything that blocks NPC movement","name":"MASK_NPCSOLID","value":33701899},{"description":"Anything that blocks NPC movement, except other NPCs","name":"MASK_NPCSOLID_BRUSHONLY","value":147467},{"description":"The world entity","name":"MASK_NPCWORLDSTATIC","value":131083},{"description":"Anything that blocks lighting","name":"MASK_OPAQUE","value":16513},{"description":"Anything that blocks lighting, including NPCs","name":"MASK_OPAQUE_AND_NPCS","value":33570945},{"description":"Anything that blocks player movement","name":"MASK_PLAYERSOLID","value":33636363},{"description":"World + Brushes + Player Clips","name":"MASK_PLAYERSOLID_BRUSHONLY","value":81931},{"description":"Anything that stops a bullet (including hitboxes)","name":"MASK_SHOT","value":1174421507},{"description":"Anything that stops a bullet (excluding hitboxes)","name":"MASK_SHOT_HULL","value":100679691},{"description":"Solids except for grates","name":"MASK_SHOT_PORTAL","value":33570819},{"description":"Anything that is (normally) solid","name":"MASK_SOLID","value":33570827},{"description":"World + Brushes","name":"MASK_SOLID_BRUSHONLY","value":16395},{"description":"Things that split area portals","name":"MASK_SPLITAREAPORTAL","value":48},{"description":"Anything that blocks line of sight for players","name":"MASK_VISIBLE","value":24705},{"description":"Anything that blocks line of sight for players, including NPCs","name":"MASK_VISIBLE_AND_NPCS","value":33579137},{"description":"Anything that has water-like physics","name":"MASK_WATER","value":16432}],"isMembersOnly":true,"name":"MASK"},{"description":"Enumerations used in {{Struct|TraceResult}} and by {{ClassFunction|Entity|GetMaterialType}}.","enumFields":[{"description":"Antlions","name":"MAT_ANTLION","value":65},{"description":"Similar to MAT_FLESH, only used by \"bloodyflesh\" surface property, has different impact sound","name":"MAT_BLOODYFLESH","value":66},{"description":"Concrete","name":"MAT_CONCRETE","value":67},{"description":"Dirt","name":"MAT_DIRT","value":68},{"description":"The egg sacs in the antlion tunnels in HL2: EP2","name":"MAT_EGGSHELL","value":69},{"description":"Flesh","name":"MAT_FLESH","value":70},{"description":"Grates, chainlink fences","name":"MAT_GRATE","value":71},{"description":"Alien flesh - headcrabs and vortigaunts","name":"MAT_ALIENFLESH","value":72},{"description":"Unused","name":"MAT_CLIP","value":73},{"description":"Snow","name":"MAT_SNOW","value":74},{"description":"Plastic","name":"MAT_PLASTIC","value":76},{"description":"Metal","name":"MAT_METAL","value":77},{"description":"Sand","name":"MAT_SAND","value":78},{"description":"Plants, only used by the \"foliage\" surface property","name":"MAT_FOLIAGE","value":79},{"description":"Electronics, only used by \"computer\" surface property","name":"MAT_COMPUTER","value":80},{"description":"Water, slime","name":"MAT_SLOSH","value":83},{"description":"Floor tiles","name":"MAT_TILE","value":84},{"description":"Grass","name":"MAT_GRASS","value":85},{"description":"Metallic vents","name":"MAT_VENT","value":86},{"description":"Wood","name":"MAT_WOOD","value":87},{"description":"Skybox or nodraw texture","name":"MAT_DEFAULT","value":88},{"description":"Glass","name":"MAT_GLASS","value":89},{"description":"\"wierd-looking jello effect for advisor shield.\"","name":"MAT_WARPSHIELD","value":90}],"isMembersOnly":true,"name":"MAT"},{"description":"Enumerations used by {{LibraryFunction|mesh|Begin}}. Clientside only.","enumFields":[{"description":"","name":"MATERIAL_LINES","value":1},{"description":"","name":"MATERIAL_LINE_LOOP","value":5},{"description":"","name":"MATERIAL_LINE_STRIP","value":4},{"description":"","name":"MATERIAL_POINTS","value":0},{"description":"","name":"MATERIAL_POLYGON","value":6},{"description":"","name":"MATERIAL_QUADS","value":7},{"description":"","name":"MATERIAL_TRIANGLES","value":2},{"description":"","name":"MATERIAL_TRIANGLE_STRIP","value":3}],"isMembersOnly":true,"name":"MATERIAL"},{"description":"Enumerations used by {{LibraryFunction|render|CullMode}}. Clientside only.","enumFields":[{"description":"Counter clock wise cull mode","name":"MATERIAL_CULLMODE_CCW","value":0},{"description":"Clock wise cull mode","name":"MATERIAL_CULLMODE_CW","value":1}],"isMembersOnly":true,"name":"MATERIAL_CULLMODE"},{"description":"Enumerations used by {{LibraryFunction|render|GetFogMode}} and {{LibraryFunction|render|FogMode}}. Clientside only.","enumFields":[{"description":"No fog","name":"MATERIAL_FOG_NONE","value":0},{"description":"Linear fog","name":"MATERIAL_FOG_LINEAR","value":1},{"description":"For use in conjunction with {{LibraryFunction|render|SetFogZ}}. Does not work if start distance is bigger than end distance. Ignores density setting. Seems to be broken? Used for underwater fog by the engine.","name":"MATERIAL_FOG_LINEAR_BELOW_FOG_Z","value":2}],"isMembersOnly":true,"name":"MATERIAL_FOG"},{"description":"Enumerations used by {{LibraryFunction|render|SetLocalModelLights}}. Clientside only.","enumFields":[{"description":"No light","name":"MATERIAL_LIGHT_DISABLE","value":0},{"description":"Point light","name":"MATERIAL_LIGHT_POINT","value":1},{"description":"Directional light","name":"MATERIAL_LIGHT_DIRECTIONAL","value":2},{"description":"Spot light","name":"MATERIAL_LIGHT_SPOT","value":3}],"isMembersOnly":true,"name":"MATERIAL_LIGHT"},{"description":"Enumerations used by {{GlobalFunction|GetRenderTargetEx}}. Clientside only.","enumFields":[{"description":"Do not create a depth-stencil buffer.<br>Use the default depth-stencil buffer if used as render target 0.","name":"MATERIAL_RT_DEPTH_SHARED","value":0},{"description":"Create a depth-stencil buffer.<br>Use the created depth-stencil buffer if used as render target 0.","name":"MATERIAL_RT_DEPTH_SEPARATE","value":1},{"description":"Do not create a depth-stencil buffer.<br>Disable depth and stencil buffer usage if used as render target 0.","name":"MATERIAL_RT_DEPTH_NONE","value":2},{"description":"Create a depth-stencil buffer.<br>Use the created depth-stencil buffer if used as render target 0.\n\nCreates a color texture despite the name.<br>\nSeems to behave the same as MATERIAL_RT_DEPTH_SEPARATE.","name":"MATERIAL_RT_DEPTH_ONLY","value":3}],"isMembersOnly":true,"name":"MATERIAL_RT_DEPTH"},{"description":"Enumerations used by:\n* {{LibraryFunction|input|IsMouseDown}}\n* {{LibraryFunction|input|WasMousePressed}}\n* {{LibraryFunction|input|WasMouseDoublePressed}}\n\nIt's also part of the {{Enum|BUTTON_CODE}}.","enumFields":[{"description":"First mouse button","name":"MOUSE_FIRST","value":107},{"description":"Left mouse button","name":"MOUSE_LEFT","value":107},{"description":"Right mouse button","name":"MOUSE_RIGHT","value":108},{"description":"Middle mouse button, aka the wheel press","name":"MOUSE_MIDDLE","value":109},{"description":"Mouse 4 button ( Sometimes, mouse wheel tilt left )","name":"MOUSE_4","value":110},{"description":"Mouse 5 button ( Sometimes, mouse wheel tilt right )","name":"MOUSE_5","value":111},{"description":"Mouse wheel scroll up","name":"MOUSE_WHEEL_UP","value":112},{"description":"Mouse wheel scroll down","name":"MOUSE_WHEEL_DOWN","value":113},{"description":"Last mouse button","name":"MOUSE_LAST","value":113},{"description":"Mouse button count","name":"MOUSE_COUNT","value":7}],"isMembersOnly":true,"name":"MOUSE"},{"description":"Enumerations used by {{ClassFunction|Entity|SetMoveCollide}} and {{ClassFunction|Entity|GetMoveCollide}}.","enumFields":[{"description":"Default behavior","name":"MOVECOLLIDE_DEFAULT","value":0},{"description":"Entity bounces, reflects, based on elasticity of surface and object - applies friction (adjust velocity)","name":"MOVECOLLIDE_FLY_BOUNCE","value":1},{"description":"{{HookFunction|ENTITY|Touch}} will modify the velocity however it likes","name":"MOVECOLLIDE_FLY_CUSTOM","value":2},{"description":"Entity slides along surfaces (no bounce) - applies friciton (adjusts velocity)","name":"MOVECOLLIDE_FLY_SLIDE","value":3},{"description":"Number of different movecollides","name":"MOVECOLLIDE_COUNT","value":4}],"isMembersOnly":true,"name":"MOVECOLLIDE"},{"description":"Enumerations used by {{ClassFunction|Entity|SetMoveType}} and {{ClassFunction|Entity|GetMoveType}}.","enumFields":[{"description":"Don't move","name":"MOVETYPE_NONE","value":0},{"description":"For players, in TF2 commander view, etc","name":"MOVETYPE_ISOMETRIC","value":1},{"description":"Player only, moving on the ground","name":"MOVETYPE_WALK","value":2},{"description":"Monster/NPC movement","name":"MOVETYPE_STEP","value":3},{"description":"Fly, no gravity","name":"MOVETYPE_FLY","value":4},{"description":"Fly, with gravity","name":"MOVETYPE_FLYGRAVITY","value":5},{"description":"Physics movetype","name":"MOVETYPE_VPHYSICS","value":6},{"description":"No clip to world, but pushes and crushes things","name":"MOVETYPE_PUSH","value":7},{"description":"Noclip","name":"MOVETYPE_NOCLIP","value":8},{"description":"For players, when moving on a ladder","name":"MOVETYPE_LADDER","value":9},{"description":"Spectator movetype. DO '''NOT''' use this to make player spectate","name":"MOVETYPE_OBSERVER","value":10},{"description":"Custom movetype, can be applied to the player to prevent the default movement code from running, while still calling the related hooks","name":"MOVETYPE_CUSTOM","value":11}],"isMembersOnly":true,"name":"MOVETYPE"},{"description":"Enumerations used by {{ClassFunction|CNavArea|GetAttributes}} and {{ClassFunction|CNavArea|HasAttributes}}.","enumFields":[{"description":"The nav area is invalid.","name":"NAV_MESH_INVALID","value":0},{"description":"Must crouch to use this node/area","name":"NAV_MESH_CROUCH","value":1},{"description":"Must jump to traverse this area (only used during generation)","name":"NAV_MESH_JUMP","value":2},{"description":"Do not adjust for obstacles, just move along area","name":"NAV_MESH_PRECISE","value":4},{"description":"Inhibit discontinuity jumping","name":"NAV_MESH_NO_JUMP","value":8},{"description":"Must stop when entering this area","name":"NAV_MESH_STOP","value":16},{"description":"Must run to traverse this area","name":"NAV_MESH_RUN","value":32},{"description":"Must walk to traverse this area","name":"NAV_MESH_WALK","value":64},{"description":"Avoid this area unless alternatives are too dangerous","name":"NAV_MESH_AVOID","value":128},{"description":"Area may become blocked, and should be periodically checked","name":"NAV_MESH_TRANSIENT","value":256},{"description":"Area should not be considered for hiding spot generation","name":"NAV_MESH_DONT_HIDE","value":512},{"description":"Bots hiding in this area should stand","name":"NAV_MESH_STAND","value":1024},{"description":"Hostages shouldn't use this area","name":"NAV_MESH_NO_HOSTAGES","value":2048},{"description":"This area represents stairs, do not attempt to climb or jump them - just walk up","name":"NAV_MESH_STAIRS","value":4096},{"description":"Don't merge this area with adjacent areas","name":"NAV_MESH_NO_MERGE","value":8192},{"description":"This nav area is the climb point on the tip of an obstacle","name":"NAV_MESH_OBSTACLE_TOP","value":16384},{"description":"This nav area is adjacent to a drop of at least CliffHeight","name":"NAV_MESH_CLIFF","value":32768},{"description":"Area has designer specified cost controlled by func_nav_cost entities","name":"NAV_MESH_FUNC_COST","value":536870912},{"description":"Area is in an elevator's path","name":"NAV_MESH_HAS_ELEVATOR","value":1073741824},{"description":"","name":"NAV_MESH_NAV_BLOCKER","value":-2147483648}],"isMembersOnly":true,"name":"NAV_MESH"},{"description":"Enumerations used by {{Type|CNavArea}} methods.\nThese Enums correspond to each corner of a {{Type|CNavArea}}\n\n{{Note|These enumerations do not exist in game and are listed here only for reference!}}","enumFields":[{"description":"North West Corner","name":"NORTH_WEST","value":0},{"description":"North East Corner","name":"NORTH_EAST","value":1},{"description":"South East Corner","name":"SOUTH_EAST","value":2},{"description":"South West Corner","name":"SOUTH_WEST","value":3},{"description":"Represents all corners, only applicable to certain functions, such as {{ClassFunction|CNavArea|PlaceOnGround}}.","name":"NUM_CORNERS","value":4}],"isMembersOnly":true,"name":"NavCorner"},{"description":"Enumerations used by {{Type|CNavArea}} methods.\nThese Enums correspond to each side of a {{Type|CNavArea}}\n\n{{Note|These enumerations do not exist in game and are listed here only for reference!}}","enumFields":[{"description":"North from given {{Type|CNavArea}}","name":"NORTH","value":0},{"description":"East from given {{Type|CNavArea}}","name":"EAST","value":1},{"description":"South from given {{Type|CNavArea}}","name":"SOUTH","value":2},{"description":"West from given {{Type|CNavArea}}","name":"WEST","value":3}],"isMembersOnly":true,"name":"NavDir"},{"description":"Enumerations used by {{ClassFunction|CNavArea|GetParentHow}}.\n\n{{Note|These enumerations do not exist in game and are listed here only for reference!}}","enumFields":[{"description":"","name":"GO_NORTH","value":0},{"description":"","name":"GO_EAST","value":1},{"description":"","name":"GO_SOUTH","value":2},{"description":"","name":"GO_WEST","value":3},{"description":"","name":"GO_LADDER_UP","value":4},{"description":"","name":"GO_LADDER_DOWN","value":5},{"description":"","name":"GO_JUMP","value":6},{"description":"","name":"GO_ELEVATOR_UP","value":7},{"description":"","name":"GO_ELEVATOR_DOWN","value":8}],"isMembersOnly":true,"name":"NavTraverseType"},{"description":"Enumerations used by {{LibraryFunction|notification|AddLegacy}}. Clientside only.","enumFields":[{"description":"[[File:NOTIFY_GENERIC_PREVIEW.png|middle]] Generic notification","name":"NOTIFY_GENERIC","value":0},{"description":"[[File:NOTIFY_ERROR_PREVIEW.png|middle]] Error notification","name":"NOTIFY_ERROR","value":1},{"description":"[[File:NOTIFY_UNDO_PREVIEW.png|middle]] Undo notification","name":"NOTIFY_UNDO","value":2},{"description":"[[File:NOTIFY_HINT_PREVIEW.png|middle]] Hint notification","name":"NOTIFY_HINT","value":3},{"description":"[[File:NOTIFY_CLEANUP_PREVIEW.png|middle]] Cleanup notification","name":"NOTIFY_CLEANUP","value":4}],"isMembersOnly":true,"name":"NOTIFY"},{"description":"Enumerations used by {{ClassFunction|NPC|SetNPCState}}. Serverside only.","enumFields":[{"description":"Invalid state","name":"NPC_STATE_INVALID","value":-1},{"description":"NPC default state","name":"NPC_STATE_NONE","value":0},{"description":"NPC is idle","name":"NPC_STATE_IDLE","value":1},{"description":"NPC is alert and searching for enemies","name":"NPC_STATE_ALERT","value":2},{"description":"NPC is in combat","name":"NPC_STATE_COMBAT","value":3},{"description":"NPC is executing scripted sequence","name":"NPC_STATE_SCRIPT","value":4},{"description":"NPC is playing dead (used for expressions)","name":"NPC_STATE_PLAYDEAD","value":5},{"description":"NPC is prone to death","name":"NPC_STATE_PRONE","value":6},{"description":"NPC is dead","name":"NPC_STATE_DEAD","value":7}],"isMembersOnly":true,"name":"NPC_STATE"},{"description":"{{Note|These only exist serverside.}}\n\nVarious count enums.","enumFields":[{"description":"Amount of {{Enum|CLASS}}. Used by {{GlobalFunction|Add_NPC_Class}}.","name":"NUM_AI_CLASSES","value":36},{"description":"Amount of {{Enum|HULL}}.","name":"NUM_HULLS","value":10}],"isMembersOnly":true,"name":"NUM"},{"description":"Enumerations used by {{ClassFunction|Player|SetObserverMode}}, {{ClassFunction|Player|GetObserverMode}} and {{ClassFunction|Player|Spectate}}.","enumFields":[{"description":"Not spectating","name":"OBS_MODE_NONE","value":0},{"description":"","name":"OBS_MODE_DEATHCAM","value":1},{"description":"TF2-like freezecam","name":"OBS_MODE_FREEZECAM","value":2},{"description":"Same as OBS_MODE_CHASE, but you can't rotate the view","name":"OBS_MODE_FIXED","value":3},{"description":"First person cam","name":"OBS_MODE_IN_EYE","value":4},{"description":"Chase cam, 3rd person cam, free rotation around the spectated target","name":"OBS_MODE_CHASE","value":5},{"description":"Free roam/noclip-alike. Does not work from {{HookFunction|GM|PlayerDeath}}","name":"OBS_MODE_ROAMING","value":6}],"isMembersOnly":true,"name":"OBS_MODE"},{"description":"Enumerations used by {{GlobalFunction|ParticleEffectAttach}}.","enumFields":[{"description":"Particle spawns in entity's origin and does not follow it","name":"PATTACH_ABSORIGIN","value":0},{"description":"Particle attaches to entity's origin and follows the entity","name":"PATTACH_ABSORIGIN_FOLLOW","value":1},{"description":"Create at a custom origin, but don't follow","name":"PATTACH_CUSTOMORIGIN","value":2},{"description":"Particle attaches to passed to {{GlobalFunction|ParticleEffectAttach}} attachment id, but does not follow the entity","name":"PATTACH_POINT","value":3},{"description":"Particle attaches to passed to {{GlobalFunction|ParticleEffectAttach}} attachment id and follows the entity","name":"PATTACH_POINT_FOLLOW","value":4},{"description":"Particle spawns in the beginning of coordinates ( Vector( 0, 0, 0 ) ), used for control points that don't attach to an entity","name":"PATTACH_WORLDORIGIN","value":5}],"isMembersOnly":true,"name":"PATTACH"},{"description":"Enumerations used by {{ClassFunction|Entity|SetAnimation}}","enumFields":[{"description":"","name":"PLAYER_IDLE","value":0},{"description":"","name":"PLAYER_WALK","value":1},{"description":"","name":"PLAYER_JUMP","value":2},{"description":"","name":"PLAYER_SUPERJUMP","value":3},{"description":"","name":"PLAYER_DIE","value":4},{"description":"Player attack according to current hold type, used in SWEPs","name":"PLAYER_ATTACK1","value":5},{"description":"","name":"PLAYER_IN_VEHICLE","value":6},{"description":"Player reload according to current hold type, used in SWEPs","name":"PLAYER_RELOAD","value":7},{"description":"","name":"PLAYER_START_AIMING","value":8},{"description":"","name":"PLAYER_LEAVE_AIMING","value":9}],"isMembersOnly":true,"name":"PLAYER_ANIM"},{"description":"Used by {{HookFunction|GM|DoAnimationEvent}} and {{ClassFunction|Player|DoCustomAnimEvent}}.","enumFields":[{"description":"Primary attack","name":"PLAYERANIMEVENT_ATTACK_PRIMARY","value":0},{"description":"Secondary attack","name":"PLAYERANIMEVENT_ATTACK_SECONDARY","value":1},{"description":"Grenade throw","name":"PLAYERANIMEVENT_ATTACK_GRENADE","value":2},{"description":"Reload","name":"PLAYERANIMEVENT_RELOAD","value":3},{"description":"Looping reload (single-reload shotguns)","name":"PLAYERANIMEVENT_RELOAD_LOOP","value":4},{"description":"Looping reload end","name":"PLAYERANIMEVENT_RELOAD_END","value":5},{"description":"Jump","name":"PLAYERANIMEVENT_JUMP","value":6},{"description":"Swim","name":"PLAYERANIMEVENT_SWIM","value":7},{"description":"Die","name":"PLAYERANIMEVENT_DIE","value":8},{"description":"","name":"PLAYERANIMEVENT_FLINCH_CHEST","value":9},{"description":"","name":"PLAYERANIMEVENT_FLINCH_HEAD","value":10},{"description":"","name":"PLAYERANIMEVENT_FLINCH_LEFTARM","value":11},{"description":"","name":"PLAYERANIMEVENT_FLINCH_RIGHTARM","value":12},{"description":"","name":"PLAYERANIMEVENT_FLINCH_LEFTLEG","value":13},{"description":"","name":"PLAYERANIMEVENT_FLINCH_RIGHTLEG","value":14},{"description":"","name":"PLAYERANIMEVENT_DOUBLEJUMP","value":15},{"description":"","name":"PLAYERANIMEVENT_CANCEL","value":16},{"description":"Spawn","name":"PLAYERANIMEVENT_SPAWN","value":17},{"description":"","name":"PLAYERANIMEVENT_SNAP_YAW","value":18},{"description":"Custom activity","name":"PLAYERANIMEVENT_CUSTOM","value":19},{"description":"Play activity in gesture slot","name":"PLAYERANIMEVENT_CUSTOM_GESTURE","value":20},{"description":"Play sequence","name":"PLAYERANIMEVENT_CUSTOM_SEQUENCE","value":21},{"description":"Play sequence in gesture slot","name":"PLAYERANIMEVENT_CUSTOM_GESTURE_SEQUENCE","value":22},{"description":"Cancel reload animation","name":"PLAYERANIMEVENT_CANCEL_RELOAD","value":23}],"isMembersOnly":true,"name":"PLAYERANIMEVENT"},{"description":"Enumerations used by {{GlobalFunction|ClientsideModel}}, ENT.RenderGroup in {{Struct|ENT}} and {{ClassFunction|Entity|GetRenderGroup}}.","enumFields":[{"description":"Huge static prop, possibly leftover from goldsrc","name":"RENDERGROUP_STATIC_HUGE","value":0},{"description":"Huge opaque entity, possibly leftover from goldsrc","name":"RENDERGROUP_OPAQUE_HUGE","value":1},{"description":"Static props?","name":"RENDERGROUP_STATIC","value":6},{"description":"For non transparent/solid entities.\n<br/>For scripted entities, this will have {{HookFunction|ENTITY|Draw}} called","name":"RENDERGROUP_OPAQUE","value":7},{"description":"For translucent/transparent entities\n<br/>For scripted entities, this will have {{HookFunction|ENTITY|DrawTranslucent}} called","name":"RENDERGROUP_TRANSLUCENT","value":8},{"description":"For both translucent/transparent and opaque/solid anim entities\n<br/>For scripted entities, this will have both, {{HookFunction|ENTITY|Draw}} and {{HookFunction|ENTITY|DrawTranslucent}} called","name":"RENDERGROUP_BOTH","value":9},{"description":"Solid weapon view models","name":"RENDERGROUP_VIEWMODEL","value":10},{"description":"Transparent overlays etc","name":"RENDERGROUP_VIEWMODEL_TRANSLUCENT","value":11},{"description":"For brush entities","name":"RENDERGROUP_OPAQUE_BRUSH","value":12},{"description":"Unclassfied. Won't get drawn.","name":"RENDERGROUP_OTHER","value":13}],"isMembersOnly":true,"name":"RENDERGROUP"},{"description":"Enumerations used by {{ClassFunction|Entity|SetRenderMode}} and {{ClassFunction|Entity|GetRenderMode}}.","enumFields":[{"description":"Normal render mode","name":"RENDERMODE_NORMAL","value":0},{"description":"","name":"RENDERMODE_TRANSCOLOR","value":1},{"description":"","name":"RENDERMODE_TRANSTEXTURE","value":2},{"description":"","name":"RENDERMODE_GLOW","value":3},{"description":"Use this to make alpha of {{GlobalFunction|Color}} work for your entity. For players, it must be set for their active weapon aswell.","name":"RENDERMODE_TRANSALPHA","value":4},{"description":"","name":"RENDERMODE_TRANSADD","value":5},{"description":"","name":"RENDERMODE_ENVIROMENTAL","value":6},{"description":"","name":"RENDERMODE_TRANSADDFRAMEBLEND","value":7},{"description":"","name":"RENDERMODE_TRANSALPHADD","value":8},{"description":"","name":"RENDERMODE_WORLDGLOW","value":9},{"description":"","name":"RENDERMODE_NONE","value":10}],"isMembersOnly":true,"name":"RENDERMODE"},{"description":"Enumerations used by {{GlobalFunction|GetRenderTargetEx}}. Clientside only.","enumFields":[{"description":"Only allowed for render targets that don't want a depth buffer (because if they have a depth buffer, the render target must be less than or equal to the size of the framebuffer).","name":"RT_SIZE_NO_CHANGE","value":0},{"description":"Don't play with the specified width and height other than making sure it fits in the framebuffer.","name":"RT_SIZE_DEFAULT","value":1},{"description":"Apply picmip to the render target's width and height.","name":"RT_SIZE_PICMIP","value":2},{"description":"frame_buffer_width / 4","name":"RT_SIZE_HDR","value":3},{"description":"Same size as frame buffer, or next lower power of 2 if we can't do that.","name":"RT_SIZE_FULL_FRAME_BUFFER","value":4},{"description":"Target of specified size, don't mess with dimensions","name":"RT_SIZE_OFFSCREEN","value":5},{"description":"Same size as the frame buffer, rounded up if necessary for systems that can't do non-power of two textures.","name":"RT_SIZE_FULL_FRAME_BUFFER_ROUNDED_UP","value":6}],"isMembersOnly":true,"name":"RT_SIZE"},{"description":"Enumerations for NPC schedules, used by {{HookFunction|ENTITY|StartEngineSchedule}} and {{ClassFunction|NPC|SetSchedule}}. Serverside only.","enumFields":[{"description":"The schedule enum limit","name":"LAST_SHARED_SCHEDULE","value":88},{"description":"Begins AI script based on NPC's ''m_hCine'' save value.","name":"SCHED_AISCRIPT","value":56},{"description":"Idle stance and face ideal yaw angles.","name":"SCHED_ALERT_FACE","value":5},{"description":"","name":"SCHED_ALERT_FACE_BESTSOUND","value":6},{"description":"","name":"SCHED_ALERT_REACT_TO_COMBAT_SOUND","value":7},{"description":"Rotate 180 degrees and back to check for enemies.","name":"SCHED_ALERT_SCAN","value":8},{"description":"Remain idle until an enemy is heard or found.","name":"SCHED_ALERT_STAND","value":9},{"description":"Walk until an enemy is heard or found.","name":"SCHED_ALERT_WALK","value":10},{"description":"Remain idle until provoked or an enemy is found.","name":"SCHED_AMBUSH","value":52},{"description":"Performs ACT_ARM.","name":"SCHED_ARM_WEAPON","value":48},{"description":"Back away from enemy. If not possible to back away then go behind enemy.","name":"SCHED_BACK_AWAY_FROM_ENEMY","value":24},{"description":"","name":"SCHED_BACK_AWAY_FROM_SAVE_POSITION","value":26},{"description":"Heavy damage was taken for the first time in a while.","name":"SCHED_BIG_FLINCH","value":23},{"description":"Begin chasing an enemy.","name":"SCHED_CHASE_ENEMY","value":17},{"description":"Failed to chase enemy.","name":"SCHED_CHASE_ENEMY_FAILED","value":18},{"description":"Face current enemy.","name":"SCHED_COMBAT_FACE","value":12},{"description":"Will walk around patrolling an area until an enemy is found.","name":"SCHED_COMBAT_PATROL","value":75},{"description":"","name":"SCHED_COMBAT_STAND","value":15},{"description":"","name":"SCHED_COMBAT_SWEEP","value":13},{"description":"","name":"SCHED_COMBAT_WALK","value":16},{"description":"When not moving, will perform ACT_COWER.","name":"SCHED_COWER","value":40},{"description":"Regular NPC death.","name":"SCHED_DIE","value":53},{"description":"Plays NPC death sound (doesn't kill NPC).","name":"SCHED_DIE_RAGDOLL","value":54},{"description":"Holsters active weapon. (Only works with NPC's that can holster weapons)","name":"SCHED_DISARM_WEAPON","value":49},{"description":"","name":"SCHED_DROPSHIP_DUSTOFF","value":79},{"description":"Preform Ducking animation. (Only works with npc_alyx)","name":"SCHED_DUCK_DODGE","value":84},{"description":"Search for a place to shoot current enemy.","name":"SCHED_ESTABLISH_LINE_OF_FIRE","value":35},{"description":"Fallback from an established line of fire.","name":"SCHED_ESTABLISH_LINE_OF_FIRE_FALLBACK","value":36},{"description":"Failed doing current schedule.","name":"SCHED_FAIL","value":81},{"description":"Failed to establish a line of fire.","name":"SCHED_FAIL_ESTABLISH_LINE_OF_FIRE","value":38},{"description":"","name":"SCHED_FAIL_NOSTOP","value":82},{"description":"Failed to take cover.","name":"SCHED_FAIL_TAKE_COVER","value":31},{"description":"Fall to ground when in the air.","name":"SCHED_FALL_TO_GROUND","value":78},{"description":"Will express fear face. (Only works on NPCs with expressions)","name":"SCHED_FEAR_FACE","value":14},{"description":"","name":"SCHED_FLEE_FROM_BEST_SOUND","value":29},{"description":"Plays ACT_FLINCH_PHYSICS.","name":"SCHED_FLINCH_PHYSICS","value":80},{"description":"Force walk to position (debug).","name":"SCHED_FORCED_GO","value":71},{"description":"Force run to position (debug).","name":"SCHED_FORCED_GO_RUN","value":72},{"description":"Pick up item if within a radius of 5 units.","name":"SCHED_GET_HEALTHKIT","value":66},{"description":"Take cover and reload weapon.","name":"SCHED_HIDE_AND_RELOAD","value":50},{"description":"Idle stance","name":"SCHED_IDLE_STAND","value":1},{"description":"Walk to position.","name":"SCHED_IDLE_WALK","value":2},{"description":"Walk to random position within a radius of 200 units.","name":"SCHED_IDLE_WANDER","value":3},{"description":"","name":"SCHED_INTERACTION_MOVE_TO_PARTNER","value":85},{"description":"","name":"SCHED_INTERACTION_WAIT_FOR_PARTNER","value":86},{"description":"","name":"SCHED_INVESTIGATE_SOUND","value":11},{"description":"","name":"SCHED_MELEE_ATTACK1","value":41},{"description":"","name":"SCHED_MELEE_ATTACK2","value":42},{"description":"Move away from player.","name":"SCHED_MOVE_AWAY","value":68},{"description":"Stop moving and continue enemy scan.","name":"SCHED_MOVE_AWAY_END","value":70},{"description":"Failed to move away; stop moving.","name":"SCHED_MOVE_AWAY_FAIL","value":69},{"description":"Move away from enemy while facing it and checking for new enemies.","name":"SCHED_MOVE_AWAY_FROM_ENEMY","value":25},{"description":"Move to the range the weapon is preferably used at.","name":"SCHED_MOVE_TO_WEAPON_RANGE","value":34},{"description":"Pick up a new weapon if within a radius of 5 units.","name":"SCHED_NEW_WEAPON","value":63},{"description":"Fail safe: Create the weapon that the NPC went to pick up if it was removed during pick up schedule.","name":"SCHED_NEW_WEAPON_CHEAT","value":64},{"description":"No schedule is being performed.","name":"SCHED_NONE","value":0},{"description":"Prevents movement until COND_NPC_UNFREEZE(68) is set.","name":"SCHED_NPC_FREEZE","value":73},{"description":"Run to random position and stop if enemy is heard or found.","name":"SCHED_PATROL_RUN","value":76},{"description":"Walk to random position and stop if enemy is heard or found.","name":"SCHED_PATROL_WALK","value":74},{"description":"","name":"SCHED_PRE_FAIL_ESTABLISH_LINE_OF_FIRE","value":37},{"description":"","name":"SCHED_RANGE_ATTACK1","value":43},{"description":"","name":"SCHED_RANGE_ATTACK2","value":44},{"description":"Stop moving and reload until danger is heard.","name":"SCHED_RELOAD","value":51},{"description":"Retreat from the established enemy.","name":"SCHED_RUN_FROM_ENEMY","value":32},{"description":"","name":"SCHED_RUN_FROM_ENEMY_FALLBACK","value":33},{"description":"","name":"SCHED_RUN_FROM_ENEMY_MOB","value":83},{"description":"Run to random position within a radius of 500 units.","name":"SCHED_RUN_RANDOM","value":77},{"description":"","name":"SCHED_SCENE_GENERIC","value":62},{"description":"","name":"SCHED_SCRIPTED_CUSTOM_MOVE","value":59},{"description":"","name":"SCHED_SCRIPTED_FACE","value":61},{"description":"","name":"SCHED_SCRIPTED_RUN","value":58},{"description":"","name":"SCHED_SCRIPTED_WAIT","value":60},{"description":"","name":"SCHED_SCRIPTED_WALK","value":57},{"description":"Shoot cover that the enemy is behind.","name":"SCHED_SHOOT_ENEMY_COVER","value":39},{"description":"Sets the NPC to a sleep-like state.","name":"SCHED_SLEEP","value":87},{"description":"","name":"SCHED_SMALL_FLINCH","value":22},{"description":"","name":"SCHED_SPECIAL_ATTACK1","value":45},{"description":"","name":"SCHED_SPECIAL_ATTACK2","value":46},{"description":"","name":"SCHED_STANDOFF","value":47},{"description":"","name":"SCHED_SWITCH_TO_PENDING_WEAPON","value":65},{"description":"","name":"SCHED_TAKE_COVER_FROM_BEST_SOUND","value":28},{"description":"Take cover from current enemy.","name":"SCHED_TAKE_COVER_FROM_ENEMY","value":27},{"description":"","name":"SCHED_TAKE_COVER_FROM_ORIGIN","value":30},{"description":"Chase set NPC target.","name":"SCHED_TARGET_CHASE","value":21},{"description":"Face NPC target.","name":"SCHED_TARGET_FACE","value":20},{"description":"Human victory dance.","name":"SCHED_VICTORY_DANCE","value":19},{"description":"","name":"SCHED_WAIT_FOR_SCRIPT","value":55},{"description":"","name":"SCHED_WAIT_FOR_SPEAK_FINISH","value":67},{"description":"Spot an enemy and go from an idle state to combat state.","name":"SCHED_WAKE_ANGRY","value":4}],"isMembersOnly":true,"name":"SCHED"},{"description":"Enumerations used by {{ClassFunction|Player|ScreenFade}}.","enumFields":[{"description":"Fade out after the hold time has passed","name":"IN","value":1},{"description":"Fade in, hold time passes, disappear","name":"OUT","value":2},{"description":"With white color, turns the screen black","name":"MODULATE","value":4},{"description":"No effects, never disappear","name":"STAYOUT","value":8},{"description":"Appear, Disappear, no effects","name":"PURGE","value":16}],"isMembersOnly":false,"name":"SCREENFADE"},{"description":"Enumerations used by Kinect SDK bindings.","enumFields":[{"description":"","name":"SHOULDER_RIGHT","value":8},{"description":"","name":"SHOULDER_LEFT","value":4},{"description":"","name":"HIP","value":0},{"description":"","name":"ELBOW_RIGHT","value":9},{"description":"","name":"KNEE_RIGHT","value":17},{"description":"","name":"WRIST_RIGHT","value":10},{"description":"","name":"ANKLE_LEFT","value":14},{"description":"","name":"FOOT_LEFT","value":15},{"description":"","name":"WRIST_LEFT","value":6},{"description":"","name":"FOOT_RIGHT","value":19},{"description":"","name":"HAND_RIGHT","value":11},{"description":"","name":"SHOULDER","value":2},{"description":"","name":"HIP_LEFT","value":12},{"description":"","name":"HIP_RIGHT","value":16},{"description":"","name":"HAND_LEFT","value":7},{"description":"","name":"ANKLE_RIGHT","value":18},{"description":"","name":"SPINE","value":1},{"description":"","name":"ELBOW_LEFT","value":5},{"description":"","name":"KNEE_LEFT","value":13},{"description":"","name":"HEAD","value":3}],"isMembersOnly":false,"name":"SENSORBONE"},{"description":"Enumerations describing certain spawnflags. Everything except for SF_PHYS* is serverside only.\n\n* SF_CITIZEN_* spawnflags represent spawnflags only usable on [https://developer.valvesoftware.com/wiki/Npc_citizen npc_citizen].\n* SF_NPC_* - Usable on all NPCs\n* SF_PHYSBOX_* - Usable on [https://developer.valvesoftware.com/wiki/Func_physbox func_physbox]\n* SF_PHYSPROP_* - Usable on [https://developer.valvesoftware.com/wiki/Prop_physics prop_physics] entities\n\n{{Note|This is not a full list of available spawnflags, there are ''a lot'' more, each unique to each entity, you can find out more on the Valve Developer Community website for the entities in question.}}","enumFields":[{"description":"Citizen that resupplies ammo","name":"SF_CITIZEN_AMMORESUPPLIER","value":524288},{"description":"\"Follow the player as soon as I spawn\"","name":"SF_CITIZEN_FOLLOW","value":65536},{"description":"\"Work outside the speech semaphore system\"","name":"SF_CITIZEN_IGNORE_SEMAPHORE","value":2097152},{"description":"Makes the citizen a medic","name":"SF_CITIZEN_MEDIC","value":131072},{"description":"Citizen cannot join players squad, and will not able to be commanded by the Half-Life 2 command system for Citizens","name":"SF_CITIZEN_NOT_COMMANDABLE","value":1048576},{"description":"Gives the citizen a random head","name":"SF_CITIZEN_RANDOM_HEAD","value":262144},{"description":"Gives the citizen a random female head","name":"SF_CITIZEN_RANDOM_HEAD_FEMALE","value":8388608},{"description":"Gives the citizen a random male head","name":"SF_CITIZEN_RANDOM_HEAD_MALE","value":4194304},{"description":"\"Use render bounds instead of human hull for guys sitting in chairs, etc\". Must be set before Spawn() is called to take effect","name":"SF_CITIZEN_USE_RENDER_BOUNDS","value":16777216},{"description":"Makes the floor turret friendly","name":"SF_FLOOR_TURRET_CITIZEN","value":512},{"description":"Do Alternate collision for this NPC (player avoidance)","name":"SF_NPC_ALTCOLLISION","value":4096},{"description":"[https://developer.valvesoftware.com/wiki/NPC_Sensing Think outside PVS]","name":"SF_NPC_ALWAYSTHINK","value":1024},{"description":"NPC Drops health kit when it dies","name":"SF_NPC_DROP_HEALTHKIT","value":8},{"description":"","name":"SF_NPC_FADE_CORPSE","value":512},{"description":"If not set, means *teleport* to ground","name":"SF_NPC_FALL_TO_GROUND","value":4},{"description":"No IDLE sounds until angry","name":"SF_NPC_GAG","value":2},{"description":"","name":"SF_NPC_LONG_RANGE","value":256},{"description":"Ignore player push - Don't give way to player","name":"SF_NPC_NO_PLAYER_PUSHAWAY","value":16384},{"description":"NPC Doesn't drop weapon on death","name":"SF_NPC_NO_WEAPON_DROP","value":8192},{"description":"Don't acquire enemies or avoid obstacles","name":"SF_NPC_START_EFFICIENT","value":16},{"description":"This entity is a template for the [https://developer.valvesoftware.com/wiki/Npc_template_maker npc_template_maker]. It will not spawn automatically and cannot be used with [https://developer.valvesoftware.com/wiki/Point_template point_template].","name":"SF_NPC_TEMPLATE","value":2048},{"description":"Wait for script","name":"SF_NPC_WAIT_FOR_SCRIPT","value":128},{"description":"Wait till seen","name":"SF_NPC_WAIT_TILL_SEEN","value":1},{"description":"If set, calls {{ClassFunction|PhysObj|EnableMotion}}( false ) on the func_physbox when the physics are created","name":"SF_PHYSBOX_MOTIONDISABLED","value":32768},{"description":"Gravity gun is NOT allowed to pick this up.","name":"SF_PHYSBOX_NEVER_PICK_UP","value":2097152},{"description":"If set, calls {{ClassFunction|PhysObj|EnableMotion}}( false ) on the func_physbox when the physics are created. See [https://developer.valvesoftware.com/wiki/Physics_optimization Physics optimization]","name":"SF_PHYSPROP_MOTIONDISABLED","value":8},{"description":"Prevent that physbox from being picked up","name":"SF_PHYSPROP_PREVENT_PICKUP","value":512},{"description":"Makes the rollermine friendly","name":"SF_ROLLERMINE_FRIENDLY","value":65536}],"isMembersOnly":true,"name":"SF"},{"description":"Enumerations used by {{HookFunction|ENTITY|PhysicsSimulate}}.","enumFields":[{"description":"Don't simulate physics","name":"SIM_NOTHING","value":0},{"description":"Vectors in local coordinate system","name":"SIM_LOCAL_ACCELERATION","value":1},{"description":"Vectors in local coordinate system","name":"SIM_LOCAL_FORCE","value":2},{"description":"Vectors in world coordinate system","name":"SIM_GLOBAL_ACCELERATION","value":3},{"description":"Vectors in world coordinate system","name":"SIM_GLOBAL_FORCE","value":4}],"isMembersOnly":true,"name":"SIM"},{"description":"Sound flags used by {{GlobalFunction|EmitSound}} and {{ClassFunction|Entity|EmitSound}}.","enumFields":[{"description":"To keep the compiler happy","name":"SND_NOFLAGS","value":0},{"description":"Change sound vol","name":"SND_CHANGE_VOL","value":1},{"description":"Change sound pitch","name":"SND_CHANGE_PITCH","value":2},{"description":"Stop the sound","name":"SND_STOP","value":4},{"description":"We're spawning, used in some cases for ambients. Not sent over net, only a param between dll and server.","name":"SND_SPAWNING","value":8},{"description":"Sound has an initial delay","name":"SND_DELAY","value":16},{"description":"Stop all looping sounds on the entity.","name":"SND_STOP_LOOPING","value":32},{"description":"This sound should be paused if the game is paused","name":"SND_SHOULDPAUSE","value":128},{"description":"","name":"SND_IGNORE_PHONEMES","value":256},{"description":"Used to change all sounds emitted by an entity, regardless of scriptname","name":"SND_IGNORE_NAME","value":512},{"description":"","name":"SND_DO_NOT_OVERWRITE_EXISTING_ON_CHANNEL","value":1024}],"isMembersOnly":true,"name":"SND"},{"description":"The sound's attenuation; how fast it drops away, enumerations used by {{GlobalFunction|EmitSound}} and {{ClassFunction|Entity|EmitSound}}.\n\n{{Validate}}\n\nThe engine starts running into trouble below 60dB.\n\n{{Warning|These enumerations do not exist in the game and are listed here purely for reference purposes only.}}","enumFields":[{"description":"Sound plays everywhere","name":"SNDLVL_NONE","value":0},{"description":"Rustling leaves","name":"SNDLVL_20dB","value":20},{"description":"Whispering","name":"SNDLVL_25dB","value":25},{"description":"Library","name":"SNDLVL_30dB","value":30},{"description":"","name":"SNDLVL_35dB","value":35},{"description":"","name":"SNDLVL_40dB","value":40},{"description":"Refrigerator","name":"SNDLVL_45dB","value":45},{"description":"Average home","name":"SNDLVL_50dB","value":50},{"description":"Stop the sound","name":"SNDLVL_55dB","value":55},{"description":"Normal conversation, clothes dryer","name":"SNDLVL_60dB","value":60},{"description":"Washing machine, dishwasher","name":"SNDLVL_65dB","value":65},{"description":"","name":"SNDLVL_STATIC","value":66},{"description":"Car, vacuum cleaner, mixer, electric sewing machine","name":"SNDLVL_70dB","value":70},{"description":"Busy traffic","name":"SNDLVL_75dB","value":75},{"description":"Mini-bike, alarm clock, noisy restaurant, office tabulator, outboard motor, passing snowmobile","name":"SNDLVL_80dB","value":80},{"description":"Average factory, electric shaver","name":"SNDLVL_85dB","value":85},{"description":"Screaming child, passing motorcycle, convertible ride on freeway","name":"SNDLVL_90dB","value":90},{"description":"","name":"SNDLVL_95dB","value":95},{"description":"Subway train, diesel truck, woodworking shop, pneumatic drill, boiler shop, jackhammer","name":"SNDLVL_100dB","value":100},{"description":"Helicopter, power mower","name":"SNDLVL_105dB","value":105},{"description":"Snowmobile (drivers seat), inboard motorboat, sandblasting","name":"SNDLVL_110dB","value":110},{"description":"Car horn, propeller aircraft","name":"SNDLVL_120dB","value":120},{"description":"Air raid siren","name":"SNDLVL_130dB","value":130},{"description":"Threshold of pain, gunshot, jet engine","name":"SNDLVL_140dB","value":140},{"description":"","name":"SNDLVL_150dB","value":150},{"description":"Rocket launching","name":"SNDLVL_180dB","value":180}],"isMembersOnly":true,"name":"SNDLVL"},{"description":"For use with {{ClassFunction|Entity|PhysicsInit}}, {{ClassFunction|Entity|SetSolid}} and {{ClassFunction|Entity|GetSolid}}.","enumFields":[{"description":"Does not collide with anything\n{{Note|No Physics Object will be created when using this.\n}}\n","name":"SOLID_NONE","value":0},{"description":"A BSP tree","name":"SOLID_BSP","value":1},{"description":"Uses the entity's axis-aligned bounding box for collisions","name":"SOLID_BBOX","value":2},{"description":"Uses the entity's object-aligned bounding box for collisions","name":"SOLID_OBB","value":3},{"description":"Same as SOLID_OBB but restricts orientation to the Z-axis\n{{Note|Seems to be broken.\n}}\n","name":"SOLID_OBB_YAW","value":4},{"description":"Always call into the entity for tests","name":"SOLID_CUSTOM","value":5},{"description":"Uses the {{Type|PhysObj}}ects of the entity","name":"SOLID_VPHYSICS","value":6}],"isMembersOnly":true,"name":"SOLID"},{"description":"Enumerations for use with {{LibraryFunction|render|SetStencilCompareFunction}}.\n\nThe comparison is between the reference value set by {{LibraryFunction|render|SetStencilReferenceValue}}, and the value of each pixel in the stencil buffer.\n\nClientside only.\n<noinclude>{{Note|These enumerations are also mirrored as {{Enum|STENCIL}}.}}</noinclude><includeonly>\nThese enumerations are mirrors of {{Enum|STENCILCOMPARISONFUNCTION}}.</includeonly>\n\nAlso see this corresponding MSDN entry: http://msdn.microsoft.com/en-us/library/windows/desktop/ff476101%28v=vs.85%29.aspx.","enumFields":[{"description":"Never passes.","name":"STENCILCOMPARISONFUNCTION_NEVER","value":1},{"description":"Passes where the reference value is less than the stencil value.","name":"STENCILCOMPARISONFUNCTION_LESS","value":2},{"description":"Passes where the reference value is equal to the stencil value.","name":"STENCILCOMPARISONFUNCTION_EQUAL","value":3},{"description":"Passes where the reference value is less than or equal to the stencil value.","name":"STENCILCOMPARISONFUNCTION_LESSEQUAL","value":4},{"description":"Passes where the reference value is greater than the stencil value.","name":"STENCILCOMPARISONFUNCTION_GREATER","value":5},{"description":"Passes where the reference value is not equal to the stencil value.","name":"STENCILCOMPARISONFUNCTION_NOTEQUAL","value":6},{"description":"Passes where the reference value is greater than or equal to the stencil value.","name":"STENCILCOMPARISONFUNCTION_GREATEREQUAL","value":7},{"description":"Always passes.","name":"STENCILCOMPARISONFUNCTION_ALWAYS","value":8}],"isMembersOnly":true,"name":"STENCILCOMPARISONFUNCTION"},{"description":"Enumerations for use with {{LibraryFunction|render|SetStencilPassOperation}}, {{LibraryFunction|render|SetStencilFailOperation}} and {{LibraryFunction|render|SetStencilZFailOperation}}. Clientside only.\n<noinclude>{{Note|These enumerations are also mirrored as {{Enum|STENCIL}}.}}</noinclude><includeonly>\nThese enumerations are mirrors of {{Enum|STENCILOPERATION}}.</includeonly>\n\nAlso see this corresponding MSDN entry: http://msdn.microsoft.com/en-us/library/windows/desktop/ff476219%28v=vs.85%29.aspx.","enumFields":[{"description":"Preserves the existing stencil buffer value.","name":"STENCILOPERATION_KEEP","value":1},{"description":"Sets the value in the stencil buffer to 0.","name":"STENCILOPERATION_ZERO","value":2},{"description":"Sets the value in the stencil buffer to the reference value, set using {{LibraryFunction|render|SetStencilReferenceValue}}.","name":"STENCILOPERATION_REPLACE","value":3},{"description":"Increments the value in the stencil buffer by 1, clamping the result.","name":"STENCILOPERATION_INCRSAT","value":4},{"description":"Decrements the value in the stencil buffer by 1, clamping the result.","name":"STENCILOPERATION_DECRSAT","value":5},{"description":"Inverts the value in the stencil buffer.","name":"STENCILOPERATION_INVERT","value":6},{"description":"Increments the value in the stencil buffer by 1, wrapping around on overflow.","name":"STENCILOPERATION_INCR","value":7},{"description":"Decrements the value in the stencil buffer by 1, wrapping around on overflow.","name":"STENCILOPERATION_DECR","value":8}],"isMembersOnly":true,"name":"STENCILOPERATION"},{"description":"Enumerations used in {{HookFunction|GM|PlayerStepSoundTime}} hook.","enumFields":[{"description":"Normal step","name":"STEPSOUNDTIME_NORMAL","value":0},{"description":"Step on ladder","name":"STEPSOUNDTIME_ON_LADDER","value":1},{"description":"Step in water, with water reaching knee","name":"STEPSOUNDTIME_WATER_KNEE","value":2},{"description":"Step in water, with water reaching foot","name":"STEPSOUNDTIME_WATER_FOOT","value":3}],"isMembersOnly":true,"name":"STEPSOUNDTIME"},{"description":"Used by {{HookFunction|ENTITY|Draw}} and {{HookFunction|ENTITY|DrawTranslucent}}.","enumFields":[{"description":"","name":"STUDIO_RENDER","value":1},{"description":"","name":"STUDIO_VIEWXFORMATTACHMENTS","value":2},{"description":"","name":"STUDIO_DRAWTRANSLUCENTSUBMODELS","value":4},{"description":"","name":"STUDIO_TWOPASS","value":8},{"description":"","name":"STUDIO_STATIC_LIGHTING","value":16},{"description":"","name":"STUDIO_WIREFRAME","value":32},{"description":"","name":"STUDIO_ITEM_BLINK","value":64},{"description":"","name":"STUDIO_NOSHADOWS","value":128},{"description":"","name":"STUDIO_WIREFRAME_VCOLLIDE","value":256},{"description":"Not a studio flag, but used to flag when we want studio stats","name":"STUDIO_GENERATE_STATS","value":16777216},{"description":"Not a studio flag, but used to flag model as using shadow depth material override","name":"STUDIO_SSAODEPTHTEXTURE","value":134217728},{"description":"Not a studio flag, but used to flag model as using shadow depth material override","name":"STUDIO_SHADOWDEPTHTEXTURE","value":1073741824},{"description":"Not a studio flag, but used to flag model as a non-sorting brush model","name":"STUDIO_TRANSPARENCY","value":2147483648}],"isMembersOnly":true,"name":"STUDIO"},{"description":"Surface flags, currently unused, these would've been returned by the {{Struct|TraceResult}}.","enumFields":[{"description":"Value will hold the light strength","name":"SURF_LIGHT","value":1},{"description":"This surface is a skybox, equivalent to HitSky in {{Struct|TraceResult}}","name":"SURF_SKY","value":4},{"description":"This surface is animated water","name":"SURF_WARP","value":8},{"description":"This surface is translucent","name":"SURF_TRANS","value":16},{"description":"This surface cannot have portals placed on, used by Portal's gun","name":"SURF_NOPORTAL","value":32},{"description":"This surface is a trigger, seems unused","name":"SURF_TRIGGER","value":64},{"description":"This surface is an invisible entity, equivalent to HitNoDraw in {{Struct|TraceResult}} ","name":"SURF_NODRAW","value":128},{"description":"Make a primary bsp splitter","name":"SURF_HINT","value":256},{"description":"This surface can be ignored by impact effects","name":"SURF_SKIP","value":512},{"description":"This surface has no lights calculated","name":"SURF_NOLIGHT","value":1024},{"description":"Calculate three lightmaps for the surface for bumpmapping","name":"SURF_BUMPLIGHT","value":2048},{"description":"No shadows are cast on this surface","name":"SURF_NOSHADOWS","value":4096},{"description":"No decals are applied to this surface","name":"SURF_NODECALS","value":8192},{"description":"Don't subdivide patches on this surface","name":"SURF_NOCHOP","value":16384},{"description":"This surface is part of an entity's hitbox","name":"SURF_HITBOX","value":32768}],"isMembersOnly":true,"name":"SURF"},{"description":"Default defined teams in Garry's Mod. This does not include any custom teams created in custom gamemodes. Enumerations to use with {{ClassFunction|Player|Team}}","enumFields":[{"description":"Connecting team ID, set when player connects to the server","name":"TEAM_CONNECTING","value":0},{"description":"Unassigned team ID, set right after player connected","name":"TEAM_UNASSIGNED","value":1001},{"description":"Spectator team ID","name":"TEAM_SPECTATOR","value":1002}],"isMembersOnly":true,"name":"TEAM"},{"description":"Enumerations used by {{LibraryFunction|render|PushFilterMin}} and {{LibraryFunction|render|PushFilterMag}}.\n\nSee [https://msdn.microsoft.com/en-us/library/windows/desktop/bb172615(v=vs.85).aspx this] and [https://en.wikipedia.org/wiki/Texture_filtering this page] for more information on texture filtering.","enumFields":[{"description":"","name":"NONE","value":0},{"description":"","name":"POINT","value":1},{"description":"","name":"LINEAR","value":2},{"description":"","name":"ANISOTROPIC","value":3}],"isMembersOnly":false,"name":"TEXFILTER"},{"description":"Enumerations used by {{LibraryFunction|draw|SimpleText}}, {{LibraryFunction|draw|DrawText}} and in {{Struct|TextData}}.","enumFields":[{"description":"Align the text on the left","name":"TEXT_ALIGN_LEFT","value":0},{"description":"Align the text in center","name":"TEXT_ALIGN_CENTER","value":1},{"description":"Align the text on the right","name":"TEXT_ALIGN_RIGHT","value":2},{"description":"Align the text on the top","name":"TEXT_ALIGN_TOP","value":3},{"description":"Align the text on the bottom","name":"TEXT_ALIGN_BOTTOM","value":4}],"isMembersOnly":true,"name":"TEXT_ALIGN"},{"description":"Bit flags used by {{GlobalFunction|GetRenderTargetEx}}. Clientside only. Information taken from [https://developer.valvesoftware.com/wiki/Valve_Texture_Format#Image_flags here]\n\n{{Warning|These enumerations do not exist in the game and are listed here purely for reference purposes only.}}","enumFields":[{"description":"Low quality, \"pixel art\" texture filtering.","name":"TEXTUREFLAGS_POINTSAMPLE","value":1},{"description":"Medium quality texture filtering.","name":"TEXTUREFLAGS_TRILINEAR","value":2},{"description":"Clamp S coordinates.","name":"TEXTUREFLAGS_CLAMPS","value":4},{"description":"Clamp T coordinates.","name":"TEXTUREFLAGS_CLAMPT","value":8},{"description":"High quality texture filtering.","name":"TEXTUREFLAGS_ANISOTROPIC","value":16},{"description":"Used in skyboxes. Makes sure edges are seamless.","name":"TEXTUREFLAGS_HINT_DXT5","value":32},{"description":"Purpose unknown.","name":"TEXTUREFLAGS_PWL_CORRECTED","value":64},{"description":"Texture is a normal map.","name":"TEXTUREFLAGS_NORMAL","value":128},{"description":"Render largest mipmap only. (Does not delete existing mipmaps, just disables them.)","name":"TEXTUREFLAGS_NOMIP","value":256},{"description":"Not affected by texture resolution settings.","name":"TEXTUREFLAGS_NOLOD","value":512},{"description":"No Minimum Mipmap","name":"TEXTUREFLAGS_ALL_MIPS","value":1024},{"description":"Texture is an procedural texture (code can modify it).","name":"TEXTUREFLAGS_PROCEDURAL","value":2048},{"description":"One bit alpha channel used.","name":"TEXTUREFLAGS_ONEBITALPHA","value":4096},{"description":"Eight bit alpha channel used.","name":"TEXTUREFLAGS_EIGHTBITALPHA","value":8192},{"description":"Texture is an environment map.","name":"TEXTUREFLAGS_ENVMAP","value":16384},{"description":"Texture is a render target.","name":"TEXTUREFLAGS_RENDERTARGET","value":32768},{"description":"Texture is a depth render target.","name":"TEXTUREFLAGS_DEPTHRENDERTARGET","value":65536},{"description":"","name":"TEXTUREFLAGS_NODEBUGOVERRIDE","value":131072},{"description":"","name":"TEXTUREFLAGS_SINGLECOPY","value":262144},{"description":"","name":"TEXTUREFLAGS_UNUSED_00080000","value":524288},{"description":"{{Deprecated}}\nImmediately destroy this texture when its reference count hits zero\n\n(aka TEXTUREFLAGS_UNUSED_00100000)\n","name":"TEXTUREFLAGS_IMMEDIATE_CLEANUP","value":1048576},{"description":"","name":"TEXTUREFLAGS_UNUSED_00200000","value":2097152},{"description":"","name":"TEXTUREFLAGS_UNUSED_00400000","value":4194304},{"description":"Do not buffer for Video Processing, generally render distance.","name":"TEXTUREFLAGS_NODEPTHBUFFER","value":8388608},{"description":"","name":"TEXTUREFLAGS_UNUSED_01000000","value":16777216},{"description":"Clamp U coordinates (for volumetric textures).","name":"TEXTUREFLAGS_CLAMPU","value":33554432},{"description":"Usable as a vertex texture","name":"TEXTUREFLAGS_VERTEXTEXTURE","value":67108864},{"description":"Texture is a SSBump. (SSB)","name":"TEXTUREFLAGS_SSBUMP","value":134217728},{"description":"","name":"TEXTUREFLAGS_UNUSED_10000000","value":268435456},{"description":"Clamp to border colour on all texture coordinates","name":"TEXTUREFLAGS_BORDER","value":536870912},{"description":"","name":"TEXTUREFLAGS_UNUSED_40000000","value":1073741824},{"description":"","name":"TEXTUREFLAGS_UNUSED_80000000","value":2147483648}],"isMembersOnly":true,"name":"TEXTUREFLAGS"},{"description":"Enumerations used by {{Struct|AmmoData}}.","enumFields":[{"description":"Generates no tracer effects","name":"TRACER_NONE","value":0},{"description":"Generates tracer effects","name":"TRACER_LINE","value":1},{"description":"Unused.","name":"TRACER_RAIL","value":2},{"description":"Unused.","name":"TRACER_BEAM","value":3},{"description":"Generates tracer and makes whizzing noises if the bullet flies past the player being shot at","name":"TRACER_LINE_AND_WHIZ","value":4}],"isMembersOnly":true,"name":"TRACER"},{"description":"Enumerations used in {{HookFunction|ENTITY|UpdateTransmitState}} hook.","enumFields":[{"description":"Always transmit the entity","name":"TRANSMIT_ALWAYS","value":0},{"description":"Never transmit the entity, default for point entities","name":"TRANSMIT_NEVER","value":1},{"description":"Transmit when entity is in players view","name":"TRANSMIT_PVS","value":2}],"isMembersOnly":true,"name":"TRANSMIT"},{"description":"Enumerations used by {{LibraryFunction|net|ReadType}} and returned by {{GlobalFunction|TypeID}}","enumFields":[{"description":"Invalid type","name":"TYPE_NONE","value":-1},{"description":"{{Deprecated|Use TYPE_NONE instead!|Category=No}}\n\nInvalid type\n","name":"TYPE_INVALID","value":-1},{"description":"{{Type|nil}}","name":"TYPE_NIL","value":0},{"description":"{{Type|boolean}}","name":"TYPE_BOOL","value":1},{"description":"{{Type|light userdata}}","name":"TYPE_LIGHTUSERDATA","value":2},{"description":"{{Type|number}}","name":"TYPE_NUMBER","value":3},{"description":"{{Type|string}}","name":"TYPE_STRING","value":4},{"description":"{{Type|table}}","name":"TYPE_TABLE","value":5},{"description":"{{Type|function}}","name":"TYPE_FUNCTION","value":6},{"description":"{{Type|userdata}}","name":"TYPE_USERDATA","value":7},{"description":"{{Type|thread}}","name":"TYPE_THREAD","value":8},{"description":"{{Type|Entity}} and entity sub-classes including {{Type|Player}}, {{Type|Weapon}}, {{Type|NPC}}, {{Type|Vehicle}}, {{Type|CSEnt}}, and {{Type|NextBot}}","name":"TYPE_ENTITY","value":9},{"description":"{{Type|Vector}}","name":"TYPE_VECTOR","value":10},{"description":"{{Type|Angle}}","name":"TYPE_ANGLE","value":11},{"description":"{{Type|PhysObj}}","name":"TYPE_PHYSOBJ","value":12},{"description":"{{Type|ISave}}","name":"TYPE_SAVE","value":13},{"description":"{{Type|IRestore}}","name":"TYPE_RESTORE","value":14},{"description":"{{Type|CTakeDamageInfo}}","name":"TYPE_DAMAGEINFO","value":15},{"description":"{{Type|CEffectData}}","name":"TYPE_EFFECTDATA","value":16},{"description":"{{Type|CMoveData}}","name":"TYPE_MOVEDATA","value":17},{"description":"{{Type|CRecipientFilter}}","name":"TYPE_RECIPIENTFILTER","value":18},{"description":"{{Type|CUserCmd}}","name":"TYPE_USERCMD","value":19},{"description":"{{Deprecated|Category=No}}\n\nLeftover from pre-GMod 13 days\n","name":"TYPE_SCRIPTEDVEHICLE","value":20},{"description":"{{Type|IMaterial}}","name":"TYPE_MATERIAL","value":21},{"description":"{{Type|Panel}}","name":"TYPE_PANEL","value":22},{"description":"{{Type|CLuaParticle}}","name":"TYPE_PARTICLE","value":23},{"description":"{{Type|CLuaEmitter}}","name":"TYPE_PARTICLEEMITTER","value":24},{"description":"{{Type|ITexture}}","name":"TYPE_TEXTURE","value":25},{"description":"{{Type|bf_read}}","name":"TYPE_USERMSG","value":26},{"description":"{{Type|ConVar}}","name":"TYPE_CONVAR","value":27},{"description":"{{Type|IMesh}}","name":"TYPE_IMESH","value":28},{"description":"{{Type|VMatrix}}","name":"TYPE_MATRIX","value":29},{"description":"{{Type|CSoundPatch}}","name":"TYPE_SOUND","value":30},{"description":"{{Type|pixelvis_handle_t}}","name":"TYPE_PIXELVISHANDLE","value":31},{"description":"dlight_t. Metatable of a {{Struct|DynamicLight}}","name":"TYPE_DLIGHT","value":32},{"description":"{{Type|IVideoWriter}}","name":"TYPE_VIDEO","value":33},{"description":"{{Type|File}}","name":"TYPE_FILE","value":34},{"description":"{{Type|CLuaLocomotion}}","name":"TYPE_LOCOMOTION","value":35},{"description":"{{Type|PathFollower}}","name":"TYPE_PATH","value":36},{"description":"{{Type|CNavArea}}","name":"TYPE_NAVAREA","value":37},{"description":"{{Type|IGModAudioChannel}}","name":"TYPE_SOUNDHANDLE","value":38},{"description":"{{Type|CNavLadder}}","name":"TYPE_NAVLADDER","value":39},{"description":"{{Type|CNewParticleEffect}}","name":"TYPE_PARTICLESYSTEM","value":40},{"description":"{{Type|ProjectedTexture}}","name":"TYPE_PROJECTEDTEXTURE","value":41},{"description":"{{Type|PhysCollide}}","name":"TYPE_PHYSCOLLIDE","value":42},{"description":"Amount of TYPE_* enums","name":"TYPE_COUNT","value":43},{"description":"Metatable of a {{Struct|Color}}.\n\n{{Note|This doesn't actually represent a unique type returned by {{GlobalFunction|TypeID}}, but instead is a hack for networking colors with {{LibraryFunction|net|WriteType}}.}}","name":"TYPE_COLOR","value":255}],"isMembersOnly":true,"name":"TYPE"},{"description":"Enumerations used by {{HookFunction|ENTITY|Use}}.\n\nNot to be confused with {{Enum|_USE}} used by {{ClassFunction|Entity|SetUseType}}.","enumFields":[{"description":"","name":"USE_OFF","value":0},{"description":"","name":"USE_ON","value":1},{"description":"","name":"USE_SET","value":2},{"description":"","name":"USE_TOGGLE","value":3}],"isMembersOnly":true,"name":"USE"},{"description":"Enumerations used by {{ClassFunction|NPC|SetCurrentWeaponProficiency}} and  \n{{ClassFunction|NPC|GetCurrentWeaponProficiency}}.","enumFields":[{"description":"The NPC will miss a large majority of their shots.","name":"WEAPON_PROFICIENCY_POOR","value":0},{"description":"The NPC will miss about half of their shots.","name":"WEAPON_PROFICIENCY_AVERAGE","value":1},{"description":"The NPC will sometimes miss their shots.","name":"WEAPON_PROFICIENCY_GOOD","value":2},{"description":"The NPC will rarely miss their shots.","name":"WEAPON_PROFICIENCY_VERY_GOOD","value":3},{"description":"The NPC will almost never miss their shots.","name":"WEAPON_PROFICIENCY_PERFECT","value":4}],"isMembersOnly":true,"name":"WEAPON_PROFICIENCY"}],"functionCollections":[{"classFields":[],"collectionType":"class","customConstructor":"","description":"ERROR","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"Test","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"DButton2"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Used to show an icon for any of the [http://steamcommunity.com/stats/GarrysMod/achievements Garry's Mod Steam achievements].\n\nIf the viewer has not unlocked the achievement on Steam, the icon will be grayed out.","examples":[],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Achievement number ID","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Sets the achievement to be displayed by {{Type|AchievementIcon}}.[[Category:AchievementIcon]]","examples":[],"isConstructor":false,"name":"SetAchievement","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Achievement number ID","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Sets the achievement to be displayed by {{Type|AchievementIcon}}.[[Category:AchievementIcon]]","examples":[],"isConstructor":false,"name":"SetAchievement","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"AchievementIcon"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"These hooks are used inside of a Lua effect. Lua effects are stored in either the <kbd>/lua/effects</kbd> directory or in a gamemode in <kbd>/gamemodes/&lt;gamemodename&gt;/entities/effects</kbd>.\n\nEffects are entities with the class CLuaEffect, and as such, {{Type|Entity}} functions are usable on them (using the <kbd>self</kbd> argument).\n\nAn EFFECT is made using either a combination of the {{HookFunction|EFFECT|Init}}, {{HookFunction|EFFECT|Render}} and optionally the {{HookFunction|EFFECT|Think}} hook. Another way is to create all particles in one go in the ''Init'' hook and don't use the other hooks at all.\n{{Example\n|Description=Creates a particle effect using a combination of the Init and the Think hooks.\n|Code=function EFFECT:Init( data )\n\tself.data = data\n\tself.particles = 4\nend\n\nfunction EFFECT:Think()\n\treturn true\nend\n\nfunction EFFECT:Render()\n\tlocal vOffset = self.data:GetOrigin() + Vector( 0, 0, 0.2 )\n\tlocal vAngle = self.data:GetAngles()\n\t\n\tlocal emitter = ParticleEmitter( vOffset, false )\n\t\tfor i=0, self.particles do\n\t\t\tlocal particle = emitter:Add( \"effects/softglow\", vOffset )\n\t\t\tif particle then\n\t\t\t\tparticle:SetAngles( vAngle )\n\t\t\t\tparticle:SetVelocity( Vector( 0, 0, 15 ) )\n\t\t\t\tparticle:SetColor( 255, 102, 0 )\n\t\t\t\tparticle:SetLifeTime( 0 )\n\t\t\t\tparticle:SetDieTime( 0.2 )\n\t\t\t\tparticle:SetStartAlpha( 255 )\n\t\t\t\tparticle:SetEndAlpha( 0 )\n\t\t\t\tparticle:SetStartSize( 1.6 )\n\t\t\t\tparticle:SetStartLength( 1 )\n\t\t\t\tparticle:SetEndSize( 1.2 )\n\t\t\t\tparticle:SetEndLength( 4 )\n\t\t\tend\n\t\tend\n\temitter:Finish()\nend\n}}\n{{Example\n|Description=Creates a particle effect using only the Init hook. To use this effect in a loop one needs to create a new instance of this effect every drawn frame.\n|Code=function EFFECT:Init( data )\n\tlocal vOffset = data:GetOrigin() + Vector( 0, 0, 0.2 )\n\tlocal vAngle = data:GetAngles()\n\tlocal emitter = ParticleEmitter( vOffset, false )\n\t\tfor i=0,4 do\n\t\t\tlocal particle = emitter:Add( \"effects/softglow\", vOffset )\n\t\t\tif particle then\n\t\t\t\tparticle:SetAngles( vAngle )\n\t\t\t\tparticle:SetVelocity( Vector( 0, 0, 15 ) )\n\t\t\t\tparticle:SetColor( 255, 102, 0 )\n\t\t\t\tparticle:SetLifeTime( 0 )\n\t\t\t\tparticle:SetDieTime( 0.2 )\n\t\t\t\tparticle:SetStartAlpha( 255 )\n\t\t\t\tparticle:SetEndAlpha( 0 )\n\t\t\t\tparticle:SetStartSize( 1.6 )\n\t\t\t\tparticle:SetStartLength( 1 )\n\t\t\t\tparticle:SetEndSize( 1.2 )\n\t\t\t\tparticle:SetEndLength( 4 )\n\t\t\tend\n\t\tend\n\temitter:Finish()\nend\n\nfunction EFFECT:Think()\n\treturn false\nend\n\nfunction EFFECT:Render()\nend\n}}","examples":[{"code":"function EFFECT:Init( data )\n\tself.data = data\n\tself.particles = 4\nend\n\nfunction EFFECT:Think()\n\treturn true\nend\n\nfunction EFFECT:Render()\n\tlocal vOffset = self.data:GetOrigin() + Vector( 0, 0, 0.2 )\n\tlocal vAngle = self.data:GetAngles()\n\t\n\tlocal emitter = ParticleEmitter( vOffset, false )\n\t\tfor i=0, self.particles do\n\t\t\tlocal particle = emitter:Add( \"effects/softglow\", vOffset )\n\t\t\tif particle then\n\t\t\t\tparticle:SetAngles( vAngle )\n\t\t\t\tparticle:SetVelocity( Vector( 0, 0, 15 ) )\n\t\t\t\tparticle:SetColor( 255, 102, 0 )\n\t\t\t\tparticle:SetLifeTime( 0 )\n\t\t\t\tparticle:SetDieTime( 0.2 )\n\t\t\t\tparticle:SetStartAlpha( 255 )\n\t\t\t\tparticle:SetEndAlpha( 0 )\n\t\t\t\tparticle:SetStartSize( 1.6 )\n\t\t\t\tparticle:SetStartLength( 1 )\n\t\t\t\tparticle:SetEndSize( 1.2 )\n\t\t\t\tparticle:SetEndLength( 4 )\n\t\t\tend\n\t\tend\n\temitter:Finish()\nend","description":"Creates a particle effect using a combination of the Init and the Think hooks."},{"code":"function EFFECT:Init( data )\n\tlocal vOffset = data:GetOrigin() + Vector( 0, 0, 0.2 )\n\tlocal vAngle = data:GetAngles()\n\tlocal emitter = ParticleEmitter( vOffset, false )\n\t\tfor i=0,4 do\n\t\t\tlocal particle = emitter:Add( \"effects/softglow\", vOffset )\n\t\t\tif particle then\n\t\t\t\tparticle:SetAngles( vAngle )\n\t\t\t\tparticle:SetVelocity( Vector( 0, 0, 15 ) )\n\t\t\t\tparticle:SetColor( 255, 102, 0 )\n\t\t\t\tparticle:SetLifeTime( 0 )\n\t\t\t\tparticle:SetDieTime( 0.2 )\n\t\t\t\tparticle:SetStartAlpha( 255 )\n\t\t\t\tparticle:SetEndAlpha( 0 )\n\t\t\t\tparticle:SetStartSize( 1.6 )\n\t\t\t\tparticle:SetStartLength( 1 )\n\t\t\t\tparticle:SetEndSize( 1.2 )\n\t\t\t\tparticle:SetEndLength( 4 )\n\t\t\tend\n\t\tend\n\temitter:Finish()\nend\n\nfunction EFFECT:Think()\n\treturn false\nend\n\nfunction EFFECT:Render()\nend","description":"Creates a particle effect using only the Init hook. To use this effect in a loop one needs to create a new instance of this effect every drawn frame."}],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"EndTouch","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Default position if we fail","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"The weapon to use.","isOptional":false,"isVarArg":false,"name":"ent","type":"Weapon"},{"default":"","description":"Attachment ID of on the weapon \"muzzle\", to use as the start position.\n\n{{Note|Please note that it is expected that the same attachment ID is used on both, the world and the view model.}}","isOptional":false,"isVarArg":false,"name":"attachment","type":"number"}],"description":"Used to get the \"real\" start position of a trace, for weapon tracer effects.\n\n\"real\" meaning in 3rd person, the 3rd person position will be used, in first person the first person position will be used.","examples":[],"isConstructor":false,"name":"GetTracerShootPos","realm":"client","returns":[{"description":"The \"real\" start position.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The effect data used to create the effect.","isOptional":false,"isVarArg":false,"name":"effectData","type":"CEffectData"}],"description":"Called when the effect is created.","examples":[],"isConstructor":false,"name":"Init","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Information regarding the collision. See {{Struct|CollisionData}}","isOptional":false,"isVarArg":false,"name":"colData","type":"CollisionData"},{"default":"","description":"The physics object of the entity that collided with the effect.","isOptional":false,"isVarArg":false,"name":"collider","type":"PhysObj"}],"description":"Called when the effect collides with anything.","examples":[],"isConstructor":false,"name":"PhysicsCollide","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the effect should be rendered.","examples":[],"isConstructor":false,"name":"Render","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"StartTouch","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the effect should think, return false to kill the effect.","examples":[],"isConstructor":false,"name":"Think","realm":"client","returns":[{"description":"Return false to remove this effect.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"Touch","realm":"client","returns":[]}],"isHook":true,"isPureAbstract":false,"name":"EFFECT"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Used to show a player's Steam avatar. You are recommended but not limited to pick one of the following sizes: 16, 32, 64, 84, 128, 184.","examples":[{"code":"local Avatar = vgui.Create( \"AvatarImage\", Panel )\nAvatar:SetSize( 64, 64 )\nAvatar:SetPos( 4, 4 )\nAvatar:SetPlayer( LocalPlayer(), 64 )","description":"Creates an AvatarImage with the LocalPlayer's avatar inside."}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The player to use avatar of.","isOptional":false,"isVarArg":false,"name":"player","type":"Player"},{"default":"","description":"The size of the avatar to use. Acceptable sizes are 32, 64, 184.","isOptional":false,"isVarArg":false,"name":"size","type":"number"}],"description":"Used by {{Type|AvatarImage}} to load an avatar for given player.[[Category:AvatarImage]]","examples":[],"isConstructor":false,"name":"SetPlayer","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The 64bit SteamID of the player to load avatar of","isOptional":false,"isVarArg":false,"name":"steamid","type":"string"},{"default":"","description":"The size of the avatar to use. Acceptable sizes are 32, 64, 184.","isOptional":false,"isVarArg":false,"name":"size","type":"number"}],"description":"Used by {{Type|AvatarImage}} panels to load an avatar by its 64-bit Steam ID (community ID).[[Category:AvatarImage]]","examples":[{"code":"-- Returns a random 64-bit Steam ID between STEAM_0:0:1 and STEAM_0:1:100000000\nfunction GetRandomSteamID()\n\treturn \"7656119\"..tostring(7960265728+math.random(1, 200000000))\nend\n\n-- Create the Steam User Grid\n-- Arg1: the size of each avatar\n-- Arg2: the size to load each avatar (16, 32, 64, 84, 128, 184)\nfunction CreateSteamUserGrid(av_size, av_res)\n\n\t-- Remove this block of code if you do not mind loading thousands of avatars\n\tif(av_size < 64) then\n\t\tError(\"Avatar size cannot be less than 64 square pixels.\\n\")\n\t\treturn\n\tend\n\t\n\t-- Delete existing grid\n\tif(SteamUserGrid) then SteamUserGrid:Remove() end\n\t\n\t-- The amount of avatars we can fit width-wise and height-wise\n\tlocal w_count = math.floor(ScrW()/av_size)\n\tlocal h_count = math.floor((ScrH()-25)/av_size)\t-- 25 = frame header size\n\t\t\n\t-- Container panel\n\tSteamUserGrid = vgui.Create(\"DFrame\")\n\tSteamUserGrid:SetSize(w_count*av_size, (h_count*av_size)+25)\n\tSteamUserGrid:Center()\n\tSteamUserGrid:SetTitle(\"Randomly Generated Grid of Steam Users\")\n\tSteamUserGrid:MakePopup()\n\t\n\t-- Loop variables\n\tlocal avatar, random_id\n\t\n\t-- Create enough avatars to fill up screen without overflowing\n\tfor i = 0, (w_count*h_count)-1 do\n\t\n\t\trandom_id = GetRandomSteamID()\n\t\t\n\t\t-- Add avatar to container panel\n\t\tavatar = vgui.Create(\"AvatarImage\", SteamUserGrid)\n\t\t\n\t\t-- Layout the avatars in a grid\n\t\tavatar:SetPos((i%w_count)*av_size, 25+math.floor(i/w_count)*av_size)\n\t\t\n\t\t-- Load the avatar image\n\t\tavatar:SetSteamID(random_id, av_res)\n\n\t\tavatar:SetSize(av_size, av_size)\n\t\t\n\t\t-- Open user's Steam page on avatar click\n\t\tavatar.OnMousePressed = function(self)\n\t\t\t\n\t\t\tlocal url = <nowiki>\"http://steamcommunity.com/profiles/\"</nowiki>..random_id\n\t\t\t\n\t\t\tgui.OpenURL(url)\n\t\t\t\n\t\tend\n\t\t\n\tend\n\t\nend","description":"Creates a grid of randomly generated Steam avatars which link to their corresponding Steam user pages."}],"isConstructor":false,"name":"SetSteamID","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player to use avatar of.","isOptional":false,"isVarArg":false,"name":"player","type":"Player"},{"default":"","description":"The size of the avatar to use. Acceptable sizes are 32, 64, 184.","isOptional":false,"isVarArg":false,"name":"size","type":"number"}],"description":"Used by {{Type|AvatarImage}} to load an avatar for given player.[[Category:AvatarImage]]","examples":[],"isConstructor":false,"name":"SetPlayer","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The 64bit SteamID of the player to load avatar of","isOptional":false,"isVarArg":false,"name":"steamid","type":"string"},{"default":"","description":"The size of the avatar to use. Acceptable sizes are 32, 64, 184.","isOptional":false,"isVarArg":false,"name":"size","type":"number"}],"description":"Used by {{Type|AvatarImage}} panels to load an avatar by its 64-bit Steam ID (community ID).[[Category:AvatarImage]]","examples":[{"code":"-- Returns a random 64-bit Steam ID between STEAM_0:0:1 and STEAM_0:1:100000000\nfunction GetRandomSteamID()\n\treturn \"7656119\"..tostring(7960265728+math.random(1, 200000000))\nend\n\n-- Create the Steam User Grid\n-- Arg1: the size of each avatar\n-- Arg2: the size to load each avatar (16, 32, 64, 84, 128, 184)\nfunction CreateSteamUserGrid(av_size, av_res)\n\n\t-- Remove this block of code if you do not mind loading thousands of avatars\n\tif(av_size < 64) then\n\t\tError(\"Avatar size cannot be less than 64 square pixels.\\n\")\n\t\treturn\n\tend\n\t\n\t-- Delete existing grid\n\tif(SteamUserGrid) then SteamUserGrid:Remove() end\n\t\n\t-- The amount of avatars we can fit width-wise and height-wise\n\tlocal w_count = math.floor(ScrW()/av_size)\n\tlocal h_count = math.floor((ScrH()-25)/av_size)\t-- 25 = frame header size\n\t\t\n\t-- Container panel\n\tSteamUserGrid = vgui.Create(\"DFrame\")\n\tSteamUserGrid:SetSize(w_count*av_size, (h_count*av_size)+25)\n\tSteamUserGrid:Center()\n\tSteamUserGrid:SetTitle(\"Randomly Generated Grid of Steam Users\")\n\tSteamUserGrid:MakePopup()\n\t\n\t-- Loop variables\n\tlocal avatar, random_id\n\t\n\t-- Create enough avatars to fill up screen without overflowing\n\tfor i = 0, (w_count*h_count)-1 do\n\t\n\t\trandom_id = GetRandomSteamID()\n\t\t\n\t\t-- Add avatar to container panel\n\t\tavatar = vgui.Create(\"AvatarImage\", SteamUserGrid)\n\t\t\n\t\t-- Layout the avatars in a grid\n\t\tavatar:SetPos((i%w_count)*av_size, 25+math.floor(i/w_count)*av_size)\n\t\t\n\t\t-- Load the avatar image\n\t\tavatar:SetSteamID(random_id, av_res)\n\n\t\tavatar:SetSize(av_size, av_size)\n\t\t\n\t\t-- Open user's Steam page on avatar click\n\t\tavatar.OnMousePressed = function(self)\n\t\t\t\n\t\t\tlocal url = <nowiki>\"http://steamcommunity.com/profiles/\"</nowiki>..random_id\n\t\t\t\n\t\t\tgui.OpenURL(url)\n\t\t\t\n\t\tend\n\t\t\n\tend\n\t\nend","description":"Creates a grid of randomly generated Steam avatars which link to their corresponding Steam user pages."}],"isConstructor":false,"name":"SetSteamID","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"AvatarImage"},{"classFields":[{"default":"","description":"The pitch component of the angle","isOptional":false,"name":"pitch","type":"number"},{"default":"","description":"The yaw component of the angle","isOptional":false,"name":"yaw","type":"number"},{"default":"","description":"The roll component of the angle","isOptional":false,"name":"roll","type":"number"},{"default":"","description":"The pitch component of the angle","isOptional":false,"name":"p","type":"number"},{"default":"","description":"The yaw component of the angle","isOptional":false,"name":"y","type":"number"},{"default":"","description":"The roll component of the angle","isOptional":false,"name":"r","type":"number"}],"collectionType":"class","customConstructor":"Angle","description":"List of all possible functions to manipulate angles.\n\nCreated by {{GlobalFunction|Angle}} & many more functions.\n{{ClassFields\n|Fields=\n{{ClassField|number|pitch|The pitch component of the angle}}\n{{ClassField|number|yaw|The yaw component of the angle}}\n{{ClassField|number|roll|The roll component of the angle}}\n{{ClassField|number|p|The pitch component of the angle}}\n{{ClassField|number|y|The yaw component of the angle}}\n{{ClassField|number|r|The roll component of the angle}}\n}}","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"0","description":"The pitch value of the angle.<br/>\nIf this is an {{Type|Angle}}, this function will return a copy of the given angle.<br/>\nIf this is a {{Type|string}}, this function will try to parse the string as a angle. If it fails, it returns a 0 angle.\n(See examples)","isOptional":true,"isVarArg":false,"name":"pitch","type":"number"},{"default":"0","description":"The yaw value of the angle.","isOptional":true,"isVarArg":false,"name":"yaw","type":"number"},{"default":"0","description":"The roll value of the angle.","isOptional":true,"isVarArg":false,"name":"roll","type":"number"}],"description":"Creates an {{Type|Angle}} object.","examples":[{"code":"print( Angle( 1, 2, 3 ) )\nprint( Angle( \"4 5 6\" ) )\nlocal test = Angle( 7, 8, 9 )\nprint( Angle( test ) )\n\nprint( Angle( \"4 5 test\" ) )\nprint( Angle() )","description":"Creates an angle and prints the value to the console."}],"isConstructor":true,"name":"constructor","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The angle to add.","isOptional":false,"isVarArg":false,"name":"angle","type":"Angle"}],"description":"Adds the values of the argument angle to the orignal angle. This functions the same as angle1 + angle2 without creating a new angle object, skipping object construction and garbage collection.","examples":[],"isConstructor":false,"name":"Add","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The number to divide by.","isOptional":false,"isVarArg":false,"name":"scalar","type":"number"}],"description":"Divides all values of the original angle by a scalar. This functions the same as angle1 / num without creating a new angle object, skipping object construction and garbage collection.","examples":[],"isConstructor":false,"name":"Div","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns a normal vector facing in the direction that the angle points.","examples":[],"isConstructor":false,"name":"Forward","realm":"shared","returns":[{"description":"The forward direction of the angle","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the pitch, yaw and roll are 0 or not.","examples":[],"isConstructor":false,"name":"IsZero","realm":"shared","returns":[{"description":"Whether the pitch, yaw and roll are 0 or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The number to multiply.","isOptional":false,"isVarArg":false,"name":"scalar","type":"number"}],"description":"Multiplies a scalar to all the values of the orignal angle. This functions the same as num * angle without creating a new angle object, skipping object construction and garbage collection.","examples":[],"isConstructor":false,"name":"Mul","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Normalizes the angles by applying a module with 360 to pitch, yaw and roll.","examples":[{"code":"local a = Angle( 0, 181, 1 )\na:Normalize()\nprint( a )","description":"Example usage of the function"}],"isConstructor":false,"name":"Normalize","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns a normal vector facing in the direction that points right relative to the angle's direction.","examples":[],"isConstructor":false,"name":"Right","realm":"shared","returns":[{"description":"The right direction of the angle","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The axis to rotate around.","isOptional":false,"isVarArg":false,"name":"axis","type":"Vector"},{"default":"","description":"The degrees to rotate around the specified axis.","isOptional":false,"isVarArg":false,"name":"rotation","type":"number"}],"description":"Rotates the angle around the specified axis by the specified degrees.","examples":[],"isConstructor":false,"name":"RotateAroundAxis","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The angle to copy the values from.","isOptional":false,"isVarArg":false,"name":"originalAngle","type":"Angle"}],"description":"Copies pitch, yaw and roll from the second angle to the first.","examples":[],"isConstructor":false,"name":"Set","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The component/axis to snap. Can be either \"p\"/\"pitch\", \"y\"/\"yaw\" or \"r\"/\"roll\".","isOptional":false,"isVarArg":false,"name":"axis","type":"string"},{"default":"","description":"The target angle snap interval","isOptional":false,"isVarArg":false,"name":"target","type":"number"}],"description":"Snaps the angle to nearest interval of degrees.\n\n{{Note|This will modify the original angle too!}}","examples":[{"code":"print( Angle( 0, 92, 0 ):SnapTo( \"y\", 90 ) )\nprint( Angle( 0, 115, 0 ):SnapTo( \"y\", 45 ) )\nprint( Angle( 12, 98, 167 ):SnapTo( \"p\", 30 ):SnapTo( \"y\", 45 ):SnapTo( \"r\", 45 ) )","description":"Example usage"}],"isConstructor":false,"name":"SnapTo","realm":"shared","returns":[{"description":"The snapped angle.","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The angle to subtract.","isOptional":false,"isVarArg":false,"name":"angle","type":"Angle"}],"description":"Subtracts the values of the argument angle to the orignal angle. This functions the same as angle1 - angle2 without creating a new angle object, skipping object construction and garbage collection.","examples":[],"isConstructor":false,"name":"Sub","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns a normal vector facing in the direction that points up relative to the angle's direction.","examples":[],"isConstructor":false,"name":"Up","realm":"shared","returns":[{"description":"The up direction of the angle.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Sets pitch, yaw and roll to 0.\nThis function is faster than doing it manually.","examples":[],"isConstructor":false,"name":"Zero","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"Angle"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"This library is used internally by Garry's Mod to help keep track of achievement progress and unlock the appropriate achievements once a certain number is reached.\n\nHowever, this library can also be used by anyone else to forcefully unlock certain achievements.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"{{Internal}}Adds one to the count of balloons burst. Once this count reaches 1000, the 'Popper' achievement is unlocked.","examples":[],"isConstructor":false,"name":"BalloonPopped","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of achievements in Garry's Mod.","examples":[],"isConstructor":false,"name":"Count","realm":"client and menu","returns":[{"description":"The amount of achievements available.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}Adds one to the count of balls eaten. Once this count reaches 200, the 'Ball Eater' achievement is unlocked.","examples":[],"isConstructor":false,"name":"EatBall","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of achievement to retrieve progress of. Note: IDs start from 0, not 1.","isOptional":false,"isVarArg":false,"name":"achievementID","type":"number"}],"description":"Retrieves progress of given achievement","examples":[{"code":"for i = 0, achievements.Count() - 1 do\n\tprint( achievements.GetCount( i ) )\nend","description":"Will print achievement progress for all of your achievements into console"}],"isConstructor":false,"name":"GetCount","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of achievement to retrieve description of. Note: IDs start from 0, not 1.","isOptional":false,"isVarArg":false,"name":"achievementID","type":"number"}],"description":"Retrieves description of given achievement","examples":[{"code":"for i = 0, achievements.Count() - 1 do\n\tprint( achievements.GetDesc( i ) )\nend","description":"Will print achievement descriptions for all of your achievements into console"}],"isConstructor":false,"name":"GetDesc","realm":"client and menu","returns":[{"description":"Description of an achievement","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of achievement to retrieve goal of. Note: IDs start from 0, not 1.","isOptional":false,"isVarArg":false,"name":"achievementID","type":"number"}],"description":"Retrieves progress goal of given achievement","examples":[{"code":"for i = 0, achievements.Count() - 1 do\n\tprint( achievements.GetCount( i ) .. \" / \" .. achievements.GetGoal( i ) )\nend","description":"Will print achievement progress and goals for all of your achievements into console"}],"isConstructor":false,"name":"GetGoal","realm":"client and menu","returns":[{"description":"Progress goal of an achievement","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of achievement to retrieve name of. Note: IDs start from 0, not 1.","isOptional":false,"isVarArg":false,"name":"achievementID","type":"number"}],"description":"Retrieves name of given achievement","examples":[{"code":"for i = 0, achievements.Count() - 1 do\n\tprint( achievements.GetName( i ) )\nend","description":"Will print all achievement names into console"}],"isConstructor":false,"name":"GetName","realm":"client and menu","returns":[{"description":"Name of an achievement","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}Adds one to the count of baddies killed. Once this count reaches 1000, the 'War Zone' achievement is unlocked.","examples":[],"isConstructor":false,"name":"IncBaddies","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}Adds one to the count of innocent animals killed. Once this count reaches 1000, the 'Innocent Bystander' achievement is unlocked.","examples":[],"isConstructor":false,"name":"IncBystander","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}Adds one to the count of friendly NPCs killed. Once this count reaches 1000, the 'Bad Friend' achievement is unlocked.","examples":[],"isConstructor":false,"name":"IncGoodies","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Internal Achievement ID number","isOptional":false,"isVarArg":false,"name":"AchievementID","type":"number"}],"description":"Used in GMod 12 in the achievements menu to show the user if they have unlocked certain achievements.","examples":[{"code":"print(\"Did you get achievement number 7?, \" .. achievements.IsAchieved(7))","description":"Prints true if you got the achievement."}],"isConstructor":false,"name":"IsAchieved","realm":"client and menu","returns":[{"description":"Returns true if the given achievementID is achieved.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}Adds one to the count of things removed. Once this count reaches 5000, the 'Destroyer' achievement is unlocked.","examples":[],"isConstructor":false,"name":"Remover","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}Adds one to the count of NPCs spawned. Once this count reaches 1000, the 'Procreator' achievement is unlocked.","examples":[],"isConstructor":false,"name":"SpawnedNPC","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}Adds one to the count of props spawned. Once this count reaches 5000, the 'Creator' achievement is unlocked.","examples":[],"isConstructor":false,"name":"SpawnedProp","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}Adds one to the count of ragdolls spawned. Once this count reaches 2000, the 'Dollhouse' achievement is unlocked.","examples":[],"isConstructor":false,"name":"SpawnedRagdoll","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}Adds one to the count of how many times the spawnmenu has been opened. Once this count reaches 100,000, the 'Menu User' achievement is unlocked.","examples":[],"isConstructor":false,"name":"SpawnMenuOpen","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"achievements"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"Allows you to set up a schedule for NPCs to follow. This lets you dictate their actions.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Name of the schedule.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Creates a schedule for scripted NPC.","examples":[],"isConstructor":false,"name":"New","realm":"server","returns":[{"description":"A table containing schedule information to be used with {{HookFunction|ENTITY|StartSchedule}}.","type":"number"}]}],"isHook":false,"isPureAbstract":false,"name":"ai_schedule"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"Used to create tasks for scripted NPCs.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Create a new empty task. Used by {{ClassFunction|Schedule|AddTask}} and {{ClassFunction|Schedule|EngTask}}.","examples":[],"isConstructor":false,"name":"New","realm":"server","returns":[{"description":"The new task object.","type":"Task"}]}],"isHook":false,"isPureAbstract":false,"name":"ai_task"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Base panel for elements using the [http://www.awesomium.com Awesomium] UI engine.","examples":[],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[],"description":"Stops the loading of the HTML panel's current page.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"StopLoading","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the panel's HTML material. Only works with {{Type|Awesomium}}, {{Type|HTML}} and {{Type|DHTML}} panels that have been fully loaded.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[{"code":"AddCSLuaFile()\n\nENT.Type = \"anim\"\nENT.Base = \"base_entity\"\n\nENT.PrintName = \"Web Screen\"\nENT.Author = \"Microflash\"\nENT.Spawnable = true\n\nif ( CLIENT ) then\n\tENT.Mat = nil\n\tENT.Panel = nil\nend\n\nfunction ENT:Initialize()\n\n\tif ( SERVER ) then\n\t\t\n\t\tself:SetModel(\"models/props_phx/rt_screen.mdl\")\n\t\tself:SetMoveType(MOVETYPE_VPHYSICS)\n\t\tself:SetSolid(SOLID_VPHYSICS)\n\t\t\n\t\tself:PhysicsInit(SOLID_VPHYSICS)\n\t\t\n\t\tself:Freeze()\n\t\t\n\telse\n\t\n\t\t-- Reset material and panel and load DHTML panel\n\t\tself.Mat = nil\n\t\tself.Panel = nil\n\t\tself:OpenPage()\n\t\t\n\tend\n\t\nend\n\nfunction ENT:Freeze()\n\tlocal phys = self:GetPhysicsObject()\n\tif (IsValid(phys)) then phys:EnableMotion(false) end\nend\n\n-- Load the DHTML reference panel\nfunction ENT:OpenPage()\n\n\t-- Iff for some reason a panel is already loaded, delete it\n\tif(self.Panel) then\n\t\n\t\tself.Panel:Remove()\n\t\tself.Panel = nil\n\t\n\tend\n\n\t-- Create a web page panel and fill the entire screen\n\tself.Panel = vgui.Create(\"DHTML\")\n\tself.Panel:Dock(FILL)\n\t\n\t-- Wiki page URL\n\tlocal url = <nowiki>\"http://wiki.garrysmod.com/page/Category:Material\"</nowiki>\n\t\n\t-- Load the wiki page\n\tself.Panel:OpenURL(url)\n\t\n\t-- Hide the panel\n\tself.Panel:SetAlpha(0)\n\tself.Panel:SetMouseInputEnabled(false)\n\t\n\t-- Disable HTML messages\n\tfunction self.Panel:ConsoleMessage(msg) end\n\nend\n\nfunction ENT:Draw()\n\n\t-- Iff the material has already been grabbed from the panel\n\tif(self.Mat) then\n\t\t\n\t\t-- Apply it to the screen/model\n\t\tif(render.MaterialOverrideByIndex) then\n\t\t\trender.MaterialOverrideByIndex(1, self.Mat)\n\t\telse\n\t\t\trender.ModelMaterialOverride(self.Mat)\n\t\tend\n\t\t\n\t-- Otherwise, check that the panel is valid and the HTML material is finished loading\n\telseif(self.Panel && self.Panel:GetHTMLMaterial()) then\n\n\t\t-- Get the html material\n\t\tlocal html_mat = self.Panel:GetHTMLMaterial()\n\t\t\n\t\t-- Used to make the material fit the model screen\n\t\t-- May need to be changed iff using a different model\n\t\t-- For the multiplication number it goes in segments of 512\n\t\t-- Based off the players screen resolution\n\t\tlocal scale_x, scale_y = ScrW()/2048, ScrH()/1024\n\t\t\n\t\t-- Create a new material with the proper scaling and shader\n\t\tlocal matdata =\n\t\t{\n\t\t\t[\"$basetexture\"]=html_mat:GetName(),\n\t\t\t[\"$basetexturetransform\"]=\"center 0 0 scale \"..scale_x..\" \"..scale_y..\" rotate 0 translate 0 0\",\n\t\t\t[\"$model\"]=1\n\t\t}\n\t\t-- Unique ID used for material name\n\t\tlocal uid = string.Replace(html_mat:GetName(), \"__vgui_texture_\", \"\")\n\t\t\n\t\t-- Create the model material\n\t\tself.Mat = CreateMaterial(\"WebMaterial_\"..uid, \"VertexLitGeneric\", matdata)\n\t\n\tend\n\n\t-- Render the model\n\tself:DrawModel()\n\t\n\t-- Reset the material override or else everything will have a HTML material!\n\trender.ModelMaterialOverride(nil)\n\nend\n\nfunction ENT:OnRemove()\n\t-- Make sure the panel is removed too\n\tif(self.Panel) then self.Panel:Remove() end\nend","description":"Defines a new entity which can display a web page on a TV screen."}],"isConstructor":false,"name":"GetHTMLMaterial","realm":"client","returns":[{"description":"The HTML material used by the panel. Typically starts with \"__vgui_texture_\" followed by an incremental number.","type":"IMaterial"}]},{"accessModifier":"public","arguments":[],"description":"Goes back one page in the HTML panel's history if available.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"GoBack","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Goes forward one page in the HTML panel's history if available.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"GoForward","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The offset in the panel's back/forward history, relative to the current page, that you would like to skip to. Because this is relative, 0 = current page while negative goes back and positive goes forward. For example, -2 will go back 2 pages in the history.","isOptional":false,"isVarArg":false,"name":"offset","type":"number"}],"description":"Goes to the page in the HTML panel's history at the specified relative offset.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"GoToHistoryOffset","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"objectName","type":"string"}],"description":"{{Internal}}\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"NewObject","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"objectName","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"callbackName","type":"string"}],"description":"{{Internal}}\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"NewObjectCallback","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"URL to open","isOptional":false,"isVarArg":false,"name":"URL","type":"string"}],"description":"[[Category:HTML]][[Category:Awesomium]]Instructs a HTML control to download and parse a HTML script using the passed URL.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"HTML Example\" )\nframe:SetSize( ScrW() * 0.75, ScrH() * 0.75 )\nframe:Center()\nframe:MakePopup()\n\nlocal html = vgui.Create( \"HTML\", frame )\nhtml:Dock( FILL )\nhtml:OpenURL( \"wiki.garrysmod.com\" )","description":"Displays the Garry's Mod wiki page."},{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"HTML Example\" )\nframe:SetSize( ScrW() * 0.75, ScrH() * 0.75 )\nframe:Center()\nframe:MakePopup()\n\nlocal html = vgui.Create( \"HTML\", frame )\nhtml:Dock( FILL )\nhtml:OpenURL( \"asset://garrysmod/html/loading.html\" )","description":"Displays the default loading screen from the html folder."}],"isConstructor":false,"name":"OpenURL","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"If true, the refresh will ignore cached content similar to \"ctrl+f5\" in most browsers.","isOptional":true,"isVarArg":false,"name":"ignoreCache","type":"boolean"}],"description":"Refreshes the HTML panel's current page.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"Refresh","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The code to set.","isOptional":false,"isVarArg":false,"name":"HTML_code","type":"string"}],"description":"[[Category:HTML]][[Category:Awesomium]]Allows you to set HTML code within a panel.","examples":[{"code":"local HTML = vgui.Create( \"HTML\", DPanel )\nHTML:SetHTML( \"<p>Put HTML code here</p>\" )\nHTML:SetSize( 390, 400 )","description":""}],"isConstructor":false,"name":"SetHTML","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Forcibly updates the panels' HTML Material, similar to when Paint is called on it.<br />This is only useful if the panel is not normally visible, i.e the panel exists purely for its HTML Material.\n{{Note|Only works on with panels that have a HTML Material. See {{ClassFunction|Panel|GetHTMLMaterial}} for more details.}}\n{{Note|A good place to call this is in the {{HookFunction|GM|PreRender}} hook}}\n[[Category:HTML]][[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"UpdateHTMLTexture","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the panel's HTML material. Only works with {{Type|Awesomium}}, {{Type|HTML}} and {{Type|DHTML}} panels that have been fully loaded.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[{"code":"AddCSLuaFile()\n\nENT.Type = \"anim\"\nENT.Base = \"base_entity\"\n\nENT.PrintName = \"Web Screen\"\nENT.Author = \"Microflash\"\nENT.Spawnable = true\n\nif ( CLIENT ) then\n\tENT.Mat = nil\n\tENT.Panel = nil\nend\n\nfunction ENT:Initialize()\n\n\tif ( SERVER ) then\n\t\t\n\t\tself:SetModel(\"models/props_phx/rt_screen.mdl\")\n\t\tself:SetMoveType(MOVETYPE_VPHYSICS)\n\t\tself:SetSolid(SOLID_VPHYSICS)\n\t\t\n\t\tself:PhysicsInit(SOLID_VPHYSICS)\n\t\t\n\t\tself:Freeze()\n\t\t\n\telse\n\t\n\t\t-- Reset material and panel and load DHTML panel\n\t\tself.Mat = nil\n\t\tself.Panel = nil\n\t\tself:OpenPage()\n\t\t\n\tend\n\t\nend\n\nfunction ENT:Freeze()\n\tlocal phys = self:GetPhysicsObject()\n\tif (IsValid(phys)) then phys:EnableMotion(false) end\nend\n\n-- Load the DHTML reference panel\nfunction ENT:OpenPage()\n\n\t-- Iff for some reason a panel is already loaded, delete it\n\tif(self.Panel) then\n\t\n\t\tself.Panel:Remove()\n\t\tself.Panel = nil\n\t\n\tend\n\n\t-- Create a web page panel and fill the entire screen\n\tself.Panel = vgui.Create(\"DHTML\")\n\tself.Panel:Dock(FILL)\n\t\n\t-- Wiki page URL\n\tlocal url = <nowiki>\"http://wiki.garrysmod.com/page/Category:Material\"</nowiki>\n\t\n\t-- Load the wiki page\n\tself.Panel:OpenURL(url)\n\t\n\t-- Hide the panel\n\tself.Panel:SetAlpha(0)\n\tself.Panel:SetMouseInputEnabled(false)\n\t\n\t-- Disable HTML messages\n\tfunction self.Panel:ConsoleMessage(msg) end\n\nend\n\nfunction ENT:Draw()\n\n\t-- Iff the material has already been grabbed from the panel\n\tif(self.Mat) then\n\t\t\n\t\t-- Apply it to the screen/model\n\t\tif(render.MaterialOverrideByIndex) then\n\t\t\trender.MaterialOverrideByIndex(1, self.Mat)\n\t\telse\n\t\t\trender.ModelMaterialOverride(self.Mat)\n\t\tend\n\t\t\n\t-- Otherwise, check that the panel is valid and the HTML material is finished loading\n\telseif(self.Panel && self.Panel:GetHTMLMaterial()) then\n\n\t\t-- Get the html material\n\t\tlocal html_mat = self.Panel:GetHTMLMaterial()\n\t\t\n\t\t-- Used to make the material fit the model screen\n\t\t-- May need to be changed iff using a different model\n\t\t-- For the multiplication number it goes in segments of 512\n\t\t-- Based off the players screen resolution\n\t\tlocal scale_x, scale_y = ScrW()/2048, ScrH()/1024\n\t\t\n\t\t-- Create a new material with the proper scaling and shader\n\t\tlocal matdata =\n\t\t{\n\t\t\t[\"$basetexture\"]=html_mat:GetName(),\n\t\t\t[\"$basetexturetransform\"]=\"center 0 0 scale \"..scale_x..\" \"..scale_y..\" rotate 0 translate 0 0\",\n\t\t\t[\"$model\"]=1\n\t\t}\n\t\t-- Unique ID used for material name\n\t\tlocal uid = string.Replace(html_mat:GetName(), \"__vgui_texture_\", \"\")\n\t\t\n\t\t-- Create the model material\n\t\tself.Mat = CreateMaterial(\"WebMaterial_\"..uid, \"VertexLitGeneric\", matdata)\n\t\n\tend\n\n\t-- Render the model\n\tself:DrawModel()\n\t\n\t-- Reset the material override or else everything will have a HTML material!\n\trender.ModelMaterialOverride(nil)\n\nend\n\nfunction ENT:OnRemove()\n\t-- Make sure the panel is removed too\n\tif(self.Panel) then self.Panel:Remove() end\nend","description":"Defines a new entity which can display a web page on a TV screen."}],"isConstructor":false,"name":"GetHTMLMaterial","realm":"client","returns":[{"description":"The HTML material used by the panel. Typically starts with \"__vgui_texture_\" followed by an incremental number.","type":"IMaterial"}]},{"accessModifier":"public","arguments":[],"description":"Goes back one page in the HTML panel's history if available.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"GoBack","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Goes forward one page in the HTML panel's history if available.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"GoForward","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The offset in the panel's back/forward history, relative to the current page, that you would like to skip to. Because this is relative, 0 = current page while negative goes back and positive goes forward. For example, -2 will go back 2 pages in the history.","isOptional":false,"isVarArg":false,"name":"offset","type":"number"}],"description":"Goes to the page in the HTML panel's history at the specified relative offset.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"GoToHistoryOffset","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"objectName","type":"string"}],"description":"{{Internal}}\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"NewObject","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"objectName","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"callbackName","type":"string"}],"description":"{{Internal}}\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"NewObjectCallback","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"URL to open","isOptional":false,"isVarArg":false,"name":"URL","type":"string"}],"description":"[[Category:HTML]][[Category:Awesomium]]Instructs a HTML control to download and parse a HTML script using the passed URL.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"HTML Example\" )\nframe:SetSize( ScrW() * 0.75, ScrH() * 0.75 )\nframe:Center()\nframe:MakePopup()\n\nlocal html = vgui.Create( \"HTML\", frame )\nhtml:Dock( FILL )\nhtml:OpenURL( \"wiki.garrysmod.com\" )","description":"Displays the Garry's Mod wiki page."},{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"HTML Example\" )\nframe:SetSize( ScrW() * 0.75, ScrH() * 0.75 )\nframe:Center()\nframe:MakePopup()\n\nlocal html = vgui.Create( \"HTML\", frame )\nhtml:Dock( FILL )\nhtml:OpenURL( \"asset://garrysmod/html/loading.html\" )","description":"Displays the default loading screen from the html folder."}],"isConstructor":false,"name":"OpenURL","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"If true, the refresh will ignore cached content similar to \"ctrl+f5\" in most browsers.","isOptional":true,"isVarArg":false,"name":"ignoreCache","type":"boolean"}],"description":"Refreshes the HTML panel's current page.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"Refresh","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The code to set.","isOptional":false,"isVarArg":false,"name":"HTML_code","type":"string"}],"description":"[[Category:HTML]][[Category:Awesomium]]Allows you to set HTML code within a panel.","examples":[{"code":"local HTML = vgui.Create( \"HTML\", DPanel )\nHTML:SetHTML( \"<p>Put HTML code here</p>\" )\nHTML:SetSize( 390, 400 )","description":""}],"isConstructor":false,"name":"SetHTML","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Forcibly updates the panels' HTML Material, similar to when Paint is called on it.<br />This is only useful if the panel is not normally visible, i.e the panel exists purely for its HTML Material.\n{{Note|Only works on with panels that have a HTML Material. See {{ClassFunction|Panel|GetHTMLMaterial}} for more details.}}\n{{Note|A good place to call this is in the {{HookFunction|GM|PreRender}} hook}}\n[[Category:HTML]][[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"UpdateHTMLTexture","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"Awesomium"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The ai library.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Then schedule name. In most cases, this will be the same as the {{Enum|SCHED}} name.","isOptional":false,"isVarArg":false,"name":"sched","type":"string"}],"description":"Translates a schedule name to its corresponding ID.","examples":[],"isConstructor":false,"name":"GetScheduleID","realm":"server","returns":[{"description":"The schedule ID, see {{Enum|SCHED}}. Returns -1 if the schedule name isn't valid.","type":"SCHED"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The task name.","isOptional":false,"isVarArg":false,"name":"task","type":"string"}],"description":"Translates a task name to its corresponding ID.","examples":[],"isConstructor":false,"name":"GetTaskID","realm":"server","returns":[{"description":"The task ID, see [https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502 ai_task.h]. Returns -1 if the schedule name isn't valid.","type":"number"}]}],"isHook":false,"isPureAbstract":false,"name":"ai"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"This is the object passed to {{LibraryFunction|usermessage|Hook}} when a message is received. It contains each value stored in the message in sequential order. You should read values from it in the order you wrote them.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Reads an returns an angle object from the bitstream.","examples":[],"isConstructor":false,"name":"ReadAngle","realm":"client","returns":[{"description":"The read angle","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Reads 1 bit an returns a bool representing the bit.","examples":[],"isConstructor":false,"name":"ReadBool","realm":"client","returns":[{"description":"bit","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Reads a signed char and returns a number from -127 to 127 representing the ascii value of that char.","examples":[],"isConstructor":false,"name":"ReadChar","realm":"client","returns":[{"description":"asciiVal","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Reads a short representing an entity index and returns the matching entity handle.","examples":[],"isConstructor":false,"name":"ReadEntity","realm":"client","returns":[{"description":"ent","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Reads a 4 byte float from the bitstream and returns it.","examples":[],"isConstructor":false,"name":"ReadFloat","realm":"client","returns":[{"description":"float","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Reads a 4 byte long from the bitstream and returns it.","examples":[],"isConstructor":false,"name":"ReadLong","realm":"client","returns":[{"description":"int","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Reads a 2 byte short from the bitstream and returns it.","examples":[],"isConstructor":false,"name":"ReadShort","realm":"client","returns":[{"description":"short","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Reads a null terminated string from the bitstream.","examples":[],"isConstructor":false,"name":"ReadString","realm":"client","returns":[{"description":"str","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Reads a special encoded vector from the bitstream and returns it, this function is not suitable to send normals.","examples":[],"isConstructor":false,"name":"ReadVector","realm":"client","returns":[{"description":"vec","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Reads a special encoded vector normal from the bitstream and returns it, this function is not suitable to send vectors that represent a position.","examples":[],"isConstructor":false,"name":"ReadVectorNormal","realm":"client","returns":[{"description":"normal","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Rewinds the bitstream so it can be read again.","examples":[],"isConstructor":false,"name":"Reset","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"bf_read"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Deprecated|Only exists for backwards compatibility with {{ClassFunction|Panel|SetActionFunction}}. Use {{Type|DButton}} instead.}}Creates a button that players can click on.","examples":[{"code":"local button = vgui.Create( \"Button\" )\nbutton:SetSize( 150, 30 )\nbutton:Center()\nbutton:SetVisible( true )\nbutton:SetText( \"Click Me\" )\nfunction button:OnMousePressed()\n\tprint( \"Hello World!\" )\nend","description":"Creates a button with the text \"Click Me\" that when pressed prints \"Hello World!\" in the console."}],"extends":"DLabel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Function to call when the {{Type|Button}} is clicked or the {{Type|Slider}} value is changed.\n\nArguments given are:\n* {{FuncArg|Panel|self|The panel itself}}\n* {{FuncArg|string|action|\"Command\" on button press, \"SliderMoved\" on slider move.}}\n* {{FuncArg|number|val|The new value of the {{Type|Slider}}. Will always equal 0 for buttons.}}\n* {{FuncArg|number||Always equals 0.}}","isOptional":false,"isVarArg":false,"name":"func","type":"Button | Slider | Slider"}],"description":"{{Deprecated|Only used in deprecated Derma controls.}}\nUsed in {{Type|Button}} to call a function when the button is clicked and in {{Type|Slider}} when the value changes.\n[[Category:Button]]\n[[Category:Slider]]","examples":[],"isConstructor":false,"name":"SetActionFunction","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Function to call when the {{Type|Button}} is clicked or the {{Type|Slider}} value is changed.\n\nArguments given are:\n* {{FuncArg|Panel|self|The panel itself}}\n* {{FuncArg|string|action|\"Command\" on button press, \"SliderMoved\" on slider move.}}\n* {{FuncArg|number|val|The new value of the {{Type|Slider}}. Will always equal 0 for buttons.}}\n* {{FuncArg|number||Always equals 0.}}","isOptional":false,"isVarArg":false,"name":"func","type":"Button | Slider | Slider"}],"description":"{{Deprecated|Only used in deprecated Derma controls.}}\nUsed in {{Type|Button}} to call a function when the button is clicked and in {{Type|Slider}} when the value changes.\n[[Category:Button]]\n[[Category:Slider]]","examples":[],"isConstructor":false,"name":"SetActionFunction","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"Button"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The baseclass library.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The child class.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Gets the base class of an an object.\n\nThis is used not just by entities, but also by widgets, panels, drive modes, weapons and gamemodes (with \"gamemode_\" prefix).\n\nThe keyword '''DEFINE_BASECLASS''' translates into a call to this function. In the engine, it is replaced with:\n<pre>local BaseClass = baseclass.Get</pre>","examples":[{"code":"AddCSLuaFile()\nDEFINE_BASECLASS( \"weapon_csbasegun\" ) //this is equivalent to local BaseClass = baseclass.Get( \"weapon_csbasegun\" )\n\n//omitted generic swep definitions\n\nfunction SWEP:Initialize()\n\tBaseClass.Initialize( self ) //calls SWEP:Initialize() from weapon_csbasegun\n\tself:SetHoldType( \"pistol\" )\nend\n\nfunction SWEP:Deploy()\n\tself:SetAccuracy( 0.9 )\n\treturn BaseClass.Deploy( self ) //calls SWEP:Deploy() from weapon_csbasegun and returns its result\nend\n\nfunction SWEP:SetupDataTables()\n\tBaseClass.SetupDataTables( self ) //calls SWEP:SetupDataTables() from weapon_csbasegun and inits its dtvars\nend","description":"Inherits the weapon from weapon_csbasegun and calls its base functions"}],"isConstructor":false,"name":"Get","realm":"shared and menu","returns":[{"description":"The base class's meta table.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of this base class. Must be completely unique.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The base class.","isOptional":false,"isVarArg":false,"name":"tab","type":"table"}],"description":"Add a new base class that can be derived by others. This is done automatically for:\n* widgets\n* panels\n* drive modes\n* entities\n* weapons\n* gamemodes (with prefix \"gamemode_\")","examples":[],"isConstructor":false,"name":"Set","realm":"shared and menu","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"baseclass"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal|Use {{Type|DCheckBoxLabel}} instead.}}Engine checkbox","examples":[],"extends":"","functions":[],"isHook":false,"isPureAbstract":true,"name":"CheckButton"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The bitwise library contains useful functions for bitwise operations.\nMake sure you're familiar with [https://code.tutsplus.com/articles/understanding-bitwise-operators--active-11301 Bitwise Operators]\n{{Example\n|Description=Displays some bitwise operator functionality.\n|Code=local mybits = 0\nmybits = bit.bor(mybits, 2) -- Add 2 4 and 8 to mybits\nmybits = bit.bor(mybits, 4)\nmybits = bit.bor(mybits, 8)\n\nprint(bit.band(mybits, 4) == 4) -- Does mybits have 4?\n\nmybits = bit.band(mybits, bit.bnot(4)) -- Remove 4 from mybits\n\nprint(bit.band(mybits, 4) == 4) -- Does mybits have 4?\n\nprint(bit.band(mybits, 2) == 2) -- Does mybits have 2?\n|Output=<pre>\ntrue\nfalse\ntrue\n</pre>\n}}","examples":[{"code":"local mybits = 0\nmybits = bit.bor(mybits, 2) -- Add 2 4 and 8 to mybits\nmybits = bit.bor(mybits, 4)\nmybits = bit.bor(mybits, 8)\n\nprint(bit.band(mybits, 4) == 4) -- Does mybits have 4?\n\nmybits = bit.band(mybits, bit.bnot(4)) -- Remove 4 from mybits\n\nprint(bit.band(mybits, 4) == 4) -- Does mybits have 4?\n\nprint(bit.band(mybits, 2) == 2) -- Does mybits have 2?","description":"Displays some bitwise operator functionality."}],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The value to be manipulated.","isOptional":false,"isVarArg":false,"name":"value","type":"number"},{"default":"","description":"Amounts of bits to shift.","isOptional":false,"isVarArg":false,"name":"shiftCount","type":"number"}],"description":"Returns the arithmetically shifted value.","examples":[],"isConstructor":false,"name":"arshift","realm":"shared and menu","returns":[{"description":"shiftedValue","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to be manipulated.","isOptional":false,"isVarArg":false,"name":"value","type":"number"},{"default":"nil","description":"Values bit to perform bitwise \"and\" with. Optional.","isOptional":true,"isVarArg":false,"name":"otherValues","type":"number"}],"description":"Performs the bitwise \"and\" for all values specified.","examples":[{"code":"a = 170    -- 10101010 in binary form\nb = 146    -- 10010010 in binary form\nprint( bit.band( a, b ) )","description":""}],"isConstructor":false,"name":"band","realm":"shared and menu","returns":[{"description":"Result of bitwise \"and\" operation.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to be inverted.","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Returns the bitwise not of the value.","examples":[],"isConstructor":false,"name":"bnot","realm":"shared and menu","returns":[{"description":"bitwiseNot","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The first value.","isOptional":false,"isVarArg":false,"name":"value1","type":"number"},{"default":"","description":"Extra values to be evaluated. (must all be numbers)","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Returns the bitwise OR of all values specified.","examples":[{"code":"local a = math.BinToInt(\"1000\")\nlocal b = math.BinToInt(\"0100\")\nlocal c = math.BinToInt(\"0001\")\n\nlocal result = bit.bor(a, b, c)\n\nprint(math.IntToBin(result))\nprint(result)","description":"Performs the bitwise OR operation between three values"},{"code":"NPC:CapabilitiesAdd( bit.bor(CAP_MOVE_GROUND, CAP_ANIMATEDFACE, CAP_TURN_HEAD) )","description":"If you were to add capabilities to an NPC."}],"isConstructor":false,"name":"bor","realm":"shared and menu","returns":[{"description":"The bitwise OR result between all numbers.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to be byte swapped.","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Swaps the byte order.","examples":[],"isConstructor":false,"name":"bswap","realm":"shared and menu","returns":[{"description":"swapped","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to be manipulated.","isOptional":false,"isVarArg":false,"name":"value","type":"number"},{"default":"nil","description":"Values bit xor with. Optional.","isOptional":true,"isVarArg":false,"name":"otherValues","type":"number"}],"description":"Returns the bitwise xor of all values specified.","examples":[],"isConstructor":false,"name":"bxor","realm":"shared and menu","returns":[{"description":"bitwiseXOr","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to be manipulated.","isOptional":false,"isVarArg":false,"name":"value","type":"number"},{"default":"","description":"Amounts of bits to shift left by.","isOptional":false,"isVarArg":false,"name":"shiftCount","type":"number"}],"description":"Returns the left shifted value.","examples":[],"isConstructor":false,"name":"lshift","realm":"shared and menu","returns":[{"description":"shiftedValue","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to be manipulated.","isOptional":false,"isVarArg":false,"name":"value","type":"number"},{"default":"","description":"Amounts of bits to rotate left by.","isOptional":false,"isVarArg":false,"name":"shiftCount","type":"number"}],"description":"Returns the left rotated value.","examples":[],"isConstructor":false,"name":"rol","realm":"shared and menu","returns":[{"description":"shiftedValue","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to be manipulated.","isOptional":false,"isVarArg":false,"name":"value","type":"number"},{"default":"","description":"Amounts of bits to rotate right by.","isOptional":false,"isVarArg":false,"name":"shiftCount","type":"number"}],"description":"Returns the right rotated value.","examples":[],"isConstructor":false,"name":"ror","realm":"shared and menu","returns":[{"description":"shiftedValue","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to be manipulated.","isOptional":false,"isVarArg":false,"name":"value","type":"number"},{"default":"","description":"Amounts of bits to shift right by.","isOptional":false,"isVarArg":false,"name":"shiftCount","type":"number"}],"description":"Returns the right shifted value.","examples":[],"isConstructor":false,"name":"rshift","realm":"shared and menu","returns":[{"description":"shiftedValue","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to be normalized.","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Normalizes the specified value and clamps it in the range of a signed 32bit integer.","examples":[],"isConstructor":false,"name":"tobit","realm":"shared and menu","returns":[{"description":"swapped","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to be normalized.","isOptional":false,"isVarArg":false,"name":"value","type":"number"},{"default":"8","description":"The number of digits. Optional","isOptional":true,"isVarArg":false,"name":"digits","type":"number"}],"description":"Returns the hexadecimal representation of the number with the specified digits.","examples":[],"isConstructor":false,"name":"tohex","realm":"shared and menu","returns":[{"description":"hexString","type":"string"}]}],"isHook":false,"isPureAbstract":false,"name":"bit"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"The spawn icon used for SWEPs and other SENTs, commonly featured as part of the spawn menu. Do note that at least one of your ContentIcon's parents must either be an {{Type|EditablePanel}} or derived from it (like a {{Type|DFrame}}, for example), else it won't be able to focus and thus be unclickable.\n\nThis control only exists in Sandbox derived gamemodes.","examples":[{"code":"","description":""}],"extends":"DButton","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the color set by {{ClassFunction|ContentIcon|SetColor}}","examples":[],"isConstructor":false,"name":"GetColor","realm":"client","returns":[{"description":"See {{Struct|Color}}","type":"Color"}]},{"accessModifier":"public","arguments":[],"description":"Returns the content type used to save and restore the content icon in a spawnlist.","examples":[],"isConstructor":false,"name":"GetContentType","realm":"client","returns":[{"description":"The content type, for example \"entity\" or \"weapon\".","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table of weapon classes for the content icon with \"NPC\" content type to be randomly chosen from when user tries to spawn the NPC.","examples":[],"isConstructor":false,"name":"GetNPCWeapon","realm":"client","returns":[{"description":"A table of weapon classes to be chosen from when user tries to spawn the NPC.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the internal \"name\" for the content icon, usually a class name for an entity.","examples":[],"isConstructor":false,"name":"GetSpawnName","realm":"client","returns":[{"description":"Internal \"name\" to be used when user left clicks the icon.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"A hook for override, by default does nothing. Called when user right clicks on the content icon, you are supposed to open a {{GlobalFunction|DermaMenu}} here with additional options.","examples":[],"isConstructor":false,"name":"OpenMenu","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether this content should be admin only or not","isOptional":false,"isVarArg":false,"name":"adminOnly","type":"boolean"}],"description":"Sets whether the content item is admin only. This makes the icon to display a admin icon in the top left corner of the icon.","examples":[],"isConstructor":false,"name":"SetAdminOnly","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The color to set. See {{Struct|Color}}","isOptional":false,"isVarArg":false,"name":"clr","type":"Color"}],"description":"Sets the color for the content icon. Currently is not used by the content icon panel.","examples":[],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The content type, for example \"entity\" or \"weapon\"","isOptional":false,"isVarArg":false,"name":"type","type":"string"}],"description":"Sets the content type used to save and restore the content icon in a spawnlist.","examples":[],"isConstructor":false,"name":"SetContentType","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Path to the icon to use.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"Sets the material to be displayed as the content icon.","examples":[],"isConstructor":false,"name":"SetMaterial","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"\"Nice\" name to display.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Sets the tool tip and the \"nice\" name to be displayed by the content icon.","examples":[],"isConstructor":false,"name":"SetName","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A table of weapon classes to be chosen from when user tries to spawn the NPC.","isOptional":false,"isVarArg":false,"name":"weapons","type":"table"}],"description":"Sets a table of weapon classes for the content icon with \"NPC\" content type to be randomly chosen from when user tries to spawn the NPC.","examples":[],"isConstructor":false,"name":"SetNPCWeapon","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Internal \"name\" to be used when user left clicks the icon.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Sets the internal \"name\" for the content icon, usually a class name for an entity.","examples":[],"isConstructor":false,"name":"SetSpawnName","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the actual color of the text.\n\nSee also {{ClassFunction|DLabel|GetTextColor}} and {{ClassFunction|DLabel|GetTextStyleColor}}.","examples":[],"isConstructor":false,"name":"GetColor","realm":"client","returns":[{"description":"The the actual color of the text.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The color to set. Uses the Color structure.","isOptional":false,"isVarArg":false,"name":"color","type":"table"}],"description":"Changes color of label. Alias of {{ClassFunction|DLabel|SetTextColor}}.","examples":[{"code":"local DLabel = vgui.Create( \"DLabel\" )\nDLabel:SetPos( 90, 50 )\nDLabel:SetColor(Color(255, 0, 0))\nDLabel:SetText( \"Hello world.\" )\nDLabel:SizeToContents()","description":"Creates a label and changes it color to red."}],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new name of the panel.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Sets the internal name of the panel.","examples":[],"isConstructor":false,"name":"SetName","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"ContentIcon"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A base for all context menu panels ( The ones used for tool options in sandbox )","examples":[],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"A two-membered table:\n* {{FuncArg|string|convar|The console variable to use. Calls {{ClassFunction|ContextBase|SetConVar}}.}}\n* {{FuncArg|string|label|The text to display inside the control's label.}}","isOptional":false,"isVarArg":false,"name":"contextData","type":"table"}],"description":"Called by spawnmenu functions (when creating a context menu) to fill this control with data.","examples":[],"isConstructor":false,"name":"ControlValues","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the {{Type|ConVar}} for the panel to change/handle, set by {{ClassFunction|ContextBase|SetConVar}}","examples":[],"isConstructor":false,"name":"ConVar","realm":"client","returns":[{"description":"The {{Type|ConVar}} for the panel to change.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|ConVar}} for the panel to change.","isOptional":false,"isVarArg":false,"name":"cvar","type":"string"}],"description":"Sets the {{Type|ConVar}} for the panel to change/handle.","examples":[],"isConstructor":false,"name":"SetConVar","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"You should override this function and use it to check whether your convar value changed.","examples":[],"isConstructor":false,"name":"TestForChanges","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The console variable to check.","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"{{Warning|This function does not exist on all panels}}\n\nSets this panel's convar. When the convar changes this panel will update automatically.\n\nFor developer implementation, see {{GlobalFunction|Derma_Install_Convar_Functions}}.","examples":[{"code":"local checkbox = vgui.Create( \"DCheckBoxLabel\", myFrame )\ncheckbox:SetConVar( \"sv_cheats\" )\ncheckbox:SetText( \"Enable cheats?\" )\ncheckbox:SetPos( 5, 25 )\ncheckbox:SizeToContents()","description":"Makes a checkbox linked to the '''sv_cheats''' convar."}],"isConstructor":false,"name":"SetConVar","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"ContextBase"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Used by the context menu in sandbox.\n\n{{Note|This panel is only available in Sandbox and Sandbox derived gamemodes!}}","examples":[],"extends":"DForm","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The control type to add. The complete list is:\n* header\n* textbox\n* label\n* checkbox/toggle\n* slider\n* propselect\n* matselect\n* ropematerial\n* button\n* numpad\n* color\n* combobox\n* listbox\n* materialgallery","isOptional":false,"isVarArg":false,"name":"type","type":"string"},{"default":"","description":"Each control takes their own table structure. You may search \"AddControl\" on GitHub for examples.\n\nHere is a full list of each type and the table members it requires:\n\n*header\n**description\n\n*textbox:\n**label (def: \"Untitled\")\n**command\n\n*label:\n**text\n\n*checkbox, toggle (same thing):\n**label (def: \"Untitled\")\n**command\n**help (boolean, if true assumes label is a language string (\"#tool.toolname.stuff\") and adds \".help\" at the end)\n\n*slider:\n**type (optional string, if equals \"float\" then 2 digits after the decimal will be used, otherwise 0)\n**label (def: \"Untitled\")\n**command\n**min (def: 0)\n**max (def: 100)\n*help (boolean, see above)\n\n*propselect:\n**(data goes directly to PropSelect's :ControlValues(data))\n\n*matselect:\n**(data goes directly to MatSelect's :ControlValues(data))\n\n*ropematerial:\n**convar (notice: NOT called command this time!)\n\n*button:\n**label / text (if label is missing will use text. Def: \"No Label\")\n**command\n\n*numpad:\n**command\n**command2\n**label\n**label2\n\n*color:\n**label\n**red (convar)\n**green (convar)\n**blue (convar)\n**alpha (convar)\n\n*combobox:\n**menubutton (if doesn't equal \"1\", becomes a listbox)\n**folder\n**options (optional, ha)\n**cvars (optional)\n\n*listbox:\n**height (if set, becomes {{Type|DListView}}, otherwise is {{Type|CtrlListBox}})\n**label (def: \"unknown\")\n**options (optional)\n\n*materialgallery:\n**width (def: 32)\n**height (def: 32)\n**rows (def: 4)\n**convar\n**options","isOptional":false,"isVarArg":false,"name":"controlinfo","type":"DListView[]"}],"description":"{{Deprecated|It is recommended to use {{Type|DForm}}'s members instead.}}\n\nAdds a control to the control panel.","examples":[],"isConstructor":false,"name":"AddControl","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"ControlPanel"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"This directs all drawing to be done to a certain 2D or 3D plane or position, until the corresponding \"End\" function is called.\n\nThe matrix functions exist, but are mostly unusable unless you're familiar with the source engine's layout for each aspect.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Origin of the shake.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"Angles of the shake.","isOptional":false,"isVarArg":false,"name":"angles","type":"Angle"},{"default":"","description":"The shake factor.","isOptional":false,"isVarArg":false,"name":"factor","type":"number"}],"description":"Shakes the screen at a certain position.","examples":[],"isConstructor":false,"name":"ApplyShake","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Switches the renderer back to the previous drawing mode from a 3D context.\n\nThis function is an alias of {{LibraryFunction|cam|End3D}}.\n\n{{Bug|Issue=1091|This will crash the game if there is no context to end.}}","examples":[],"isConstructor":false,"name":"End","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Switches the renderer back to the previous drawing mode from a 2D context.\n\n{{Bug|Issue=1091|This will crash the game if there is no context to end.}}","examples":[],"isConstructor":false,"name":"End2D","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Switches the renderer back to the previous drawing mode from a 3D context.\n\n{{Bug|Issue=1091|This will crash the game if there is no context to end.}}","examples":[],"isConstructor":false,"name":"End3D","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Switches the renderer back to the previous drawing mode from a 3D2D context.\n\n{{Bug|Issue=1091|This will crash the game if there is no context to end.}}","examples":[],"isConstructor":false,"name":"End3D2D","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Switches the renderer back to the previous drawing mode from a 3D orthographic rendering context.","examples":[],"isConstructor":false,"name":"EndOrthoView","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Determines whenever to ignore the depth buffer or not.","isOptional":false,"isVarArg":false,"name":"ignoreZ","type":"boolean"}],"description":"Tells the renderer to ignore the depth buffer and draw any upcoming operation \"ontop\" of everything that was drawn yet.","examples":[],"isConstructor":false,"name":"IgnoreZ","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Pops the current active rendering matrix from the stack and reinstates the previous one.","examples":[],"isConstructor":false,"name":"PopModelMatrix","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The matrix to push.","isOptional":false,"isVarArg":false,"name":"matrix","type":"VMatrix"}],"description":"Pushes the specified matrix onto the render matrix stack. Unlike opengl, this will replace the current model matrix.\n\n{{Bug|Issue=1663|This does not work with {{LibraryFunction|cam|Start3D2D}} in certain hooks.}}","examples":[{"code":"hook.Add(\"HUDPaint\", \"2d rotation test\", function()\n\tlocal w, h = ScrW(), ScrH()\n\tlocal t = RealTime()*50\n\t\n\tlocal mat = Matrix()\n\n\tmat:Translate(Vector(w/2, h/2))\n\tmat:Rotate(Angle(0,t,0))\n\tmat:Scale(Vector(1,1,1) * math.sin(t/100) *10)\n\tmat:Translate(-Vector(w/2, h/2))\n\n\tcam.PushModelMatrix(mat)\n\t\tsurface.SetFont(\"DermaDefault\")\n\t\tsurface.SetTextColor(255, 255, 255, 255)\n\t\tsurface.SetTextPos(w/2, h/2)\n\t\tsurface.DrawText(\"LOLLOLOLOL\")\n\tcam.PopModelMatrix()\t\nend)","description":"Rotates and scales text in the center of the screen."},{"code":"function draw.TextRotated(text, x, y, color, font, ang)\n\trender.PushFilterMag(TEXFILTER.ANISOTROPIC)\n\trender.PushFilterMin(TEXFILTER.ANISOTROPIC)\n\tsurface.SetFont(font)\n\tsurface.SetTextColor(color)\n\tsurface.SetTextPos(0, 0)\n\tlocal textWidth, textHeight = surface.GetTextSize( text )\n\tlocal rad = -math.rad( ang )\n\tx = x - ( math.cos( rad ) * textWidth / 2 + math.sin( rad ) * textHeight / 2 )\n\ty = y + ( math.sin( rad ) * textWidth / 2 + math.cos( rad ) * textHeight / 2 )\n\tlocal m = Matrix()\n\tm:SetAngles(Angle(0, ang, 0))\n\tm:SetTranslation(Vector(x, y, 0))\n\tcam.PushModelMatrix(m)\n\t\tsurface.DrawText(text)\n\tcam.PopModelMatrix()\n\trender.PopFilterMag()\n\trender.PopFilterMin()\nend","description":"Simple function to draw rotated text"}],"isConstructor":false,"name":"PushModelMatrix","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Render context config. See {{Struct|RenderCamData}}","isOptional":false,"isVarArg":false,"name":"dataTbl","type":"RenderCamData"}],"description":"Sets up a new rendering context. This is an extended version of {{LibraryFunction|cam|Start3D}} and {{LibraryFunction|cam|Start2D}}. Must be finished by {{LibraryFunction|cam|End3D}} or {{LibraryFunction|cam|End2D}}.\n\n{{Bug|Issue=2682|This will not update current view properties for 3D contexts.}}","examples":[],"isConstructor":false,"name":"Start","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Sets up a new 2D rendering context. Must be finished by {{LibraryFunction|cam|End2D}}.\n\nThis is almost always used with a render target from the {{Lib|render}}. To set its position use {{LibraryFunction|render|SetViewPort}} with a target already stored.\n\n{{Note|This will put an identity matrix at the top of the model matrix stack. If you are trying to use {{LibraryFunction|cam|PushModelMatrix}}, call it after this function and not before.}}\n{{RenderingContext|Start|2D}}","examples":[{"code":"local oldW, oldH = ScrW(), ScrH()\nrender.SetViewPort( 0, 100, 50, 50 )\ncam.Start2D()\n\tsurface.SetDrawColor( 255, 255, 255 )\n\tsurface.DrawLine( 10, 10, 100, 100 )\ncam.End2D()\nrender.SetViewPort( 0, 0, oldW, oldH )","description":"Sets the viewport then draws on the view with 2d methods"}],"isConstructor":false,"name":"Start2D","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"{{GlobalFunction|EyePos}}()","description":"Render cam position.","isOptional":true,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"{{GlobalFunction|EyeAngles}}()","description":"Render cam angles.","isOptional":true,"isVarArg":false,"name":"angles","type":"Angle"},{"default":"nil","description":"Field of view.","isOptional":true,"isVarArg":false,"name":"fov","type":"number"},{"default":"0","description":"X coordinate of where to start the new view port.","isOptional":true,"isVarArg":false,"name":"x","type":"number"},{"default":"0","description":"Y coordinate of where to start the new view port.","isOptional":true,"isVarArg":false,"name":"y","type":"number"},{"default":"{{GlobalFunction|ScrW}}()","description":"Width of the new viewport.","isOptional":true,"isVarArg":false,"name":"w","type":"number"},{"default":"{{GlobalFunction|ScrH}}()","description":"Height of the new viewport.","isOptional":true,"isVarArg":false,"name":"h","type":"number"},{"default":"nil","description":"Distance to near clipping plane.","isOptional":true,"isVarArg":false,"name":"zNear","type":"number"},{"default":"nil","description":"Distance to far clipping plane.","isOptional":true,"isVarArg":false,"name":"zFar","type":"number"}],"description":"Sets up a new 3D rendering context. Must be finished by {{LibraryFunction|cam|End3D}}.\n\nFor more advanced settings such as an orthographic view, use {{LibraryFunction|cam|Start}} instead.\n\n{{RenderingContext|Start|3D}}\n\n{{Bug|Issue=1995|Negative x/y values won't work.}}\n\n{{Bug|Issue=2682|This will not update current view properties.}}","examples":[{"code":"hook.Add( \"HUDPaint\", \"3d_camera_example\", function()\n\tcam.Start3D()\n\t\tfor id, ply in pairs( player.GetAll() ) do\n\t\t\tply:DrawModel()\n\t\tend\n\tcam.End3D()\nend )","description":"Set up a 3D rendering environment in a 2D rendering hook to render models on HUD."}],"isConstructor":false,"name":"Start3D","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Origin of the 3D2D context, ie. the top left corner, (0, 0).","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"Angles of the 3D2D context.<br>\n+x in the 2d context corresponds to +x of the angle (its forward direction).<br>\n+y in the 2d context corresponds to -y of the angle (its right direction).\n\nIf (dx, dy) are your desired (+x, +y) unit vectors, the angle you want is dx:AngleEx(dx:Cross(-dy)).","isOptional":false,"isVarArg":false,"name":"angles","type":"Angle"},{"default":"","description":"The scale of the render context.\nIf scale is 1 then 1 pixel in 2D context will equal to 1 unit in 3D context.","isOptional":false,"isVarArg":false,"name":"scale","type":"number"}],"description":"Sets up a new 2D rendering context. Must be finished by {{LibraryFunction|cam|End3D2D}}.\n\n{{RenderingContext|Start|2D}}\n{{RenderingContext|Function|3D}}","examples":[{"code":"hook.Add(\"PostDrawOpaqueRenderables\", \"example\", function()\n\tlocal trace = LocalPlayer():GetEyeTrace()\n\tlocal angle = trace.HitNormal:Angle()\n\t\t\n\trender.DrawLine( trace.HitPos, trace.HitPos + 8 * angle:Forward(), Color( 255, 0, 0 ), true )\n\trender.DrawLine( trace.HitPos, trace.HitPos + 8 * -angle:Right(), Color( 0, 255, 0 ), true )\n\trender.DrawLine( trace.HitPos, trace.HitPos + 8 * angle:Up(), Color( 0, 0, 255 ), true )\n\t\t\n\tcam.Start3D2D( trace.HitPos, angle, 1 )\n\t\tsurface.SetDrawColor( 255, 165, 0, 255 )\n\t\tsurface.DrawRect( 0, 0, 8, 8 )\n\t\trender.DrawLine( Vector( 0, 0, 0 ), Vector( 8, 8, 8 ), Color( 100, 149, 237, 255 ), true )\n\tcam.End3D2D()\nend )","description":""}],"isConstructor":false,"name":"Start3D2D","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The left plane offset.","isOptional":false,"isVarArg":false,"name":"leftOffset","type":"number"},{"default":"","description":"The top plane offset.","isOptional":false,"isVarArg":false,"name":"topOffset","type":"number"},{"default":"","description":"The right plane offset.","isOptional":false,"isVarArg":false,"name":"rightOffset","type":"number"},{"default":"","description":"The bottom plane offset.","isOptional":false,"isVarArg":false,"name":"bottomOffset","type":"number"}],"description":"Sets up a new 3d context using orthographic projection.","examples":[],"isConstructor":false,"name":"StartOrthoView","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"cam"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A preset manager, found at the top of almost every default tool's C-menu.\n\nThis control only exists in Sandbox derived gamemodes.","examples":[],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The convar to add.","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"Adds a convar to be managed by this control.","examples":[],"isConstructor":false,"name":"AddConVar","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Get a list of all Console Variables being managed by this panel.","examples":[],"isConstructor":false,"name":"GetConVars","realm":"client","returns":[{"description":"numbered table of convars","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to put in the label","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Set the name label text.","examples":[],"isConstructor":false,"name":"SetLabel","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"ControlPresets"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"List of all possible functions available for effect data. This is the object returned by the [[Global/EffectData|EffectData]] function and is required for [[util/Effect|util.Effect]] function.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the angles of the effect.","examples":[],"isConstructor":false,"name":"GetAngles","realm":"shared","returns":[{"description":"The angles of the effect","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Returns the attachment ID for the effect.","examples":[],"isConstructor":false,"name":"GetAttachment","realm":"shared","returns":[{"description":"The attachment ID of the effect.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns byte which represents the color of the effect.","examples":[],"isConstructor":false,"name":"GetColor","realm":"shared","returns":[{"description":"The color of the effect","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the damage type of the effect","examples":[],"isConstructor":false,"name":"GetDamageType","realm":"shared","returns":[{"description":"Damage type of the effect, see {{Enum|DMG}}","type":"DMG"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity index of the entity set for the effect.","examples":[],"isConstructor":false,"name":"GetEntIndex","realm":"server","returns":[{"description":"The entity index of the entity set for the effect.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity assigned to the effect.","examples":[],"isConstructor":false,"name":"GetEntity","realm":"shared","returns":[{"description":"The entity assigned to the effect","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns the flags of the effect.","examples":[],"isConstructor":false,"name":"GetFlags","realm":"shared","returns":[{"description":"The flags of the effect.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the hit box ID of the effect.","examples":[],"isConstructor":false,"name":"GetHitBox","realm":"shared","returns":[{"description":"The hit box ID of the effect.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the magnitude of the effect.","examples":[],"isConstructor":false,"name":"GetMagnitude","realm":"shared","returns":[{"description":"The magnitude of the effect.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the material ID of the effect.","examples":[],"isConstructor":false,"name":"GetMaterialIndex","realm":"shared","returns":[{"description":"The material ID of the effect.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the normalized direction vector of the effect.","examples":[],"isConstructor":false,"name":"GetNormal","realm":"shared","returns":[{"description":"The normalized direction vector of the effect.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the origin position of the effect.","examples":[],"isConstructor":false,"name":"GetOrigin","realm":"shared","returns":[{"description":"The origin position of the effect.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the radius of the effect.","examples":[],"isConstructor":false,"name":"GetRadius","realm":"shared","returns":[{"description":"The radius of the effect.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the scale of the effect.","examples":[],"isConstructor":false,"name":"GetScale","realm":"shared","returns":[{"description":"The scale of the effect","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the start position of the effect.","examples":[],"isConstructor":false,"name":"GetStart","realm":"shared","returns":[{"description":"The start position of the effect","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the surface property index of the effect.","examples":[],"isConstructor":false,"name":"GetSurfaceProp","realm":"shared","returns":[{"description":"The surface property index of the effect","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The new angles to be set.","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"Sets the angles of the effect.","examples":[],"isConstructor":false,"name":"SetAngles","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New attachment ID of the effect.","isOptional":false,"isVarArg":false,"name":"attachment","type":"number"}],"description":"Sets the attachment id of the effect to be created with this effect data.\n\n{{Note|This is internally stored as an integer, but only the first 5 bits will be networked.}}","examples":[],"isConstructor":false,"name":"SetAttachment","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Color represented by a byte.","isOptional":false,"isVarArg":false,"name":"color","type":"number"}],"description":"Sets the color of the effect.","examples":[],"isConstructor":false,"name":"SetColor","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Damage type, see {{Enum|DMG}}.","isOptional":false,"isVarArg":false,"name":"damageType","type":"DMG"}],"description":"Sets the damage type of the effect to be created with this effect data.","examples":[],"isConstructor":false,"name":"SetDamageType","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity index to be set.","isOptional":false,"isVarArg":false,"name":"entIndex","type":"number"}],"description":"Sets the entity of the effect via its index.","examples":[],"isConstructor":false,"name":"SetEntIndex","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity of the effect, mostly used for parenting.","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"}],"description":"Sets the entity of the effect to be created with this effect data.","examples":[],"isConstructor":false,"name":"SetEntity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The flags of the effect. Each effect has their own flags.","isOptional":false,"isVarArg":false,"name":"flags","type":"number"}],"description":"Sets the flags of the effect.\n\n{{Note|This is internally stored as an integer, but only the first 8 bits will be networked.}}","examples":[],"isConstructor":false,"name":"SetFlags","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The hit box index of the effect.","isOptional":false,"isVarArg":false,"name":"hitBoxIndex","type":"number"}],"description":"Sets the hit box index of the effect.\n\n{{Note|This is internally stored as an integer, but only the first 11 bits will be networked.}}","examples":[],"isConstructor":false,"name":"SetHitBox","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The magnitude of the effect.","isOptional":false,"isVarArg":false,"name":"magnitude","type":"number"}],"description":"Sets the magnitude of the effect.","examples":[],"isConstructor":false,"name":"SetMagnitude","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The material index of the effect.","isOptional":false,"isVarArg":false,"name":"materialIndex","type":"number"}],"description":"Sets the material index of the effect.\n\n{{Note|This is internally stored as an integer, but only the first 11 bits will be networked.}}","examples":[],"isConstructor":false,"name":"SetMaterialIndex","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The normalized direction vector of the effect.","isOptional":false,"isVarArg":false,"name":"normal","type":"Vector"}],"description":"Sets the normalized direction vector of the effect to be created with this effect data.","examples":[],"isConstructor":false,"name":"SetNormal","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Origin of the effect.","isOptional":false,"isVarArg":false,"name":"origin","type":"Vector"}],"description":"Sets the origin of the effect to be created with this effect data.","examples":[],"isConstructor":false,"name":"SetOrigin","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Radius of the effect.","isOptional":false,"isVarArg":false,"name":"radius","type":"number"}],"description":"Sets the radius of the effect to be created with this effect data.\n\n{{Note|This is clamped internally from 0 to 1023.}}","examples":[],"isConstructor":false,"name":"SetRadius","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Scale of the effect.","isOptional":false,"isVarArg":false,"name":"scale","type":"number"}],"description":"Sets the scale of the effect to be created with this effect data.","examples":[],"isConstructor":false,"name":"SetScale","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Start of the effect.","isOptional":false,"isVarArg":false,"name":"start","type":"Vector"}],"description":"Sets the start of the effect to be created with this effect data.","examples":[],"isConstructor":false,"name":"SetStart","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The surface property index of the effect.","isOptional":false,"isVarArg":false,"name":"surfaceProperties","type":"number"}],"description":"Sets the surface property index of the effect.","examples":[],"isConstructor":false,"name":"SetSurfaceProp","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"CEffectData"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A {{Type|DComboBox}} based dropdown menu with build in easy {{Type|ConVar}} support.\n\nThis control only exists in Sandbox derived gamemodes.","examples":[],"extends":"DComboBox","functions":[],"isHook":false,"isPureAbstract":true,"name":"CtrlListBox"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The chat library's purpose is to interface with the default chatbox.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The arguments. Arguments can be:\n* {{Type|table}} - {{Struct|Color}}. Will set the color for all following strings until the next Color argument.\n* {{Type|string}} - Text to be added to the chat box.\n* {{Type|Player}} - Adds the name of the player in the player's team color to the chat box.\n* {{Type|any}} - Any other type, such as {{Type|Entity}} will be converted to string and added as text.","isOptional":false,"isVarArg":true,"name":"arguments","type":"table | string | Player | any | Entity"}],"description":"Adds text to the local player's chat box (which only they can read).","examples":[{"code":"local ply = LocalPlayer()\nchat.AddText( Color( 100, 100, 255 ), ply, \", you are holding \", Color( 100, 255, 100 ), ply:GetActiveWeapon():GetClass() )","description":"Prints the player's name and current weapon to their chat area."}],"isConstructor":false,"name":"AddText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Closes the chat window.","examples":[],"isConstructor":false,"name":"Close","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the chatbox position.","examples":[{"code":"print( chat.GetChatBoxPos() )","description":"Prints the x and y coordinates of the chatbox."}],"isConstructor":false,"name":"GetChatBoxPos","realm":"client","returns":[{"description":"The X coordinate of the chatbox's position.","type":"number"},{"description":"The Y coordinate of the chatbox's position.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the chatbox size.","examples":[{"code":"print( chat.GetChatBoxSize() )","description":"Prints the width and the height of the chatbox."}],"isConstructor":false,"name":"GetChatBoxSize","realm":"client","returns":[{"description":"The width of the chatbox.","type":"number"},{"description":"The height of the chatbox.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"If equals 1, opens public chat, otherwise opens team chat","isOptional":false,"isVarArg":false,"name":"mode","type":"number"}],"description":"Opens the chat window.","examples":[],"isConstructor":false,"name":"Open","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Plays the chat \"tick\" sound.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"PlaySound","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"chat"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A derivative of the DModelPanel in which the user may modify the perspective of the model with their mouse and keyboard by clicking and dragging.\n\nThe keyboard keys {{Key|W}} {{Key|S}} {{Key|A}} {{Key|D}} {{Key|Up}} {{Key|Down}} {{Key|Left}} {{Key|Right}} {{Key|Space}} and {{Key|Ctrl}} can be used when the right mouse is held down, with {{Key|Shift}} acting as a speed multiplier. When the left mouse is used, the Shift key holds the current ''y'' angle steady.\n\nThis is used by {{Type|IconEditor}} for modifying spawn icons.","examples":[{"code":"local AdjustableModelPanel = vgui.Create( \"DAdjustableModelPanel\" )\nAdjustableModelPanel:SetPos( 10, 10 )\nAdjustableModelPanel:SetSize( 280, 280 )\nAdjustableModelPanel:SetLookAt( Vector( 0, 0, 0 ) )\nAdjustableModelPanel:SetModel( \"models/props_borealis/bluebarrel001.mdl\" )","description":"Creates an Adjustable Model Panel"}],"extends":"DModelPanel","functions":[{"accessModifier":"public","arguments":[],"description":"{{Internal}} Used by the panel to perform mouse capture operations when adjusting the model.","examples":[],"isConstructor":false,"name":"CaptureMouse","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}} Used to adjust the perspective in the model panel via the keyboard, when the right mouse button is used.","examples":[],"isConstructor":false,"name":"FirstPersonControls","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Gets whether mouse and keyboard-based adjustment of the perspective has been enabled. See {{ClassFunction|DAdjustableModelPanel|SetFirstPerson}} for more information.","examples":[],"isConstructor":false,"name":"GetFirstPerson","realm":"client","returns":[{"description":"Whether first person controls are enabled. See {{ClassFunction|DAdjustableModelPanel|FirstPersonControls}}.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to enable/disable first person controls. See {{ClassFunction|DAdjustableModelPanel|FirstPersonControls}}.","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Enables mouse and keyboard-based adjustment of the perspective.\n\nThis is set to ''true'' automatically each time mouse capture is enabled, and hence doesn't serve as a usable setting, other than to disable this functionality after the {{HookFunction|PANEL|OnMousePressed}} event.","examples":[],"isConstructor":false,"name":"SetFirstPerson","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DAdjustableModelPanel"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"List of all possible functions available for LuaEmitters. This is the object returned by the {{GlobalFunction|ParticleEmitter}} function.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The particles material. Can also be an {{Type|IMaterial}}.","isOptional":false,"isVarArg":false,"name":"material","type":"string"},{"default":"","description":"The position to spawn the particle on.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Creates a new {{Type|CLuaParticle}} with the given material and position.","examples":[],"isConstructor":false,"name":"Add","realm":"client","returns":[{"description":"The created particle, if any.","type":"CLuaParticle"}]},{"accessModifier":"public","arguments":[],"description":"Manually renders all particles the emitter has created.","examples":[],"isConstructor":false,"name":"Draw","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Removes the emitter and all its particles.","examples":[],"isConstructor":false,"name":"Finish","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of active particles of this emitter.","examples":[],"isConstructor":false,"name":"GetNumActiveParticles","realm":"client","returns":[{"description":"The amount of active particles of this emitter","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the position of this emitter. This is set when creating the emitter with {{GlobalFunction|ParticleEmitter}}.","examples":[],"isConstructor":false,"name":"GetPos","realm":"client","returns":[{"description":"Position of this particle emitter.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether this emitter is 3D or not. This is set when creating the emitter with {{GlobalFunction|ParticleEmitter}}.","examples":[],"isConstructor":false,"name":"Is3D","realm":"client","returns":[{"description":"Whether this emitter is 3D or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether this {{Type|CLuaEmitter}} is valid or not.","examples":[],"isConstructor":false,"name":"IsValid","realm":"client","returns":[{"description":"Whether this {{Type|CLuaEmitter}} is valid or not.","type":"CLuaEmitter"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum position of the box","isOptional":false,"isVarArg":false,"name":"mins","type":"Vector"},{"default":"","description":"The maximum position of the box","isOptional":false,"isVarArg":false,"name":"maxs","type":"Vector"}],"description":"Sets the bounding box for this emitter.\n\nUsually the bounding box is automatically determined by the particles, but this function overrides it.","examples":[],"isConstructor":false,"name":"SetBBox","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Min distance where the alpha becomes 0.","isOptional":false,"isVarArg":false,"name":"distanceMin","type":"number"},{"default":"","description":"Max distance where the alpha starts fading.","isOptional":false,"isVarArg":false,"name":"distanceMax","type":"number"}],"description":"This function sets the the distance between the render camera and the emitter at which the particles should start fading and at which distance fade ends ( alpha becomes 0 ).","examples":[],"isConstructor":false,"name":"SetNearClip","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether we should draw the particles ( false ) or not ( true )","isOptional":false,"isVarArg":false,"name":"noDraw","type":"boolean"}],"description":"Prevents all particles of the emitter from automatically drawing.","examples":[],"isConstructor":false,"name":"SetNoDraw","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Particle radius.","isOptional":false,"isVarArg":false,"name":"radius","type":"number"}],"description":"The function name has not much in common with its actual function, it applies a radius to every particles that affects the building of the bounding box, as it, usually is constructed by the particle that has the lowest x, y and z and the highest x, y and z, this function just adds/subtracts the radius and inflates the bounding box.","examples":[],"isConstructor":false,"name":"SetParticleCullRadius","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New position.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Sets the position of the particle emitter.","examples":[],"isConstructor":false,"name":"SetPos","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"CLuaEmitter"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A bar to select the opacity (alpha level) of a color.","examples":[{"code":"local DAlphaBar = vgui.Create( \"DAlphaBar\" )\nDAlphaBar:SetPos( 20, 30 )\nDAlphaBar:SetSize( 25, 125 )\nDAlphaBar:SetValue( 0.25 )\nDAlphaBar.OnChange = function( newvalue )\n\tprint( \"DAlphaBar value changed to \" .. newvalue )\nend","description":"Creates a DAlphaBar and sets its value to 25%."}],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the base color of the alpha bar. This is the color for which the alpha channel is being modified.","examples":[],"isConstructor":false,"name":"GetBarColor","realm":"client","returns":[{"description":"The current base color.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the alpha value of the alpha bar.","examples":[],"isConstructor":false,"name":"GetValue","realm":"client","returns":[{"description":"The current alpha value.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The new alpha value","isOptional":false,"isVarArg":false,"name":"alpha","type":"number"}],"description":"Called when user changes the desired alpha value with the control.","examples":[],"isConstructor":false,"name":"OnChange","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new {{Struct|Color}} to set. See {{GlobalFunction|Color}}.","isOptional":false,"isVarArg":false,"name":"clr","type":"Color"}],"description":"Sets the base color of the alpha bar. This is the color for which the alpha channel is being modified.","examples":[],"isConstructor":false,"name":"SetBarColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new alpha value to set","isOptional":false,"isVarArg":false,"name":"alpha","type":"number"}],"description":"Sets the alpha value or the alpha bar.","examples":[],"isConstructor":false,"name":"SetValue","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the value the panel holds.\n\nIn engine is only implemented for {{Type|CheckButton}}, {{Type|Label}} and {{Type|TextEntry}} as a string and for those elements has a hard coded limit of 8092 characters.","examples":[{"code":"local TextEntry = vgui.Create( \"TextEntry\" )\nTextEntry:SetText( \"Hello world!\" )\nprint( TextEntry:GetValue() )","description":"Returns the string typed in a TextEntry."}],"isConstructor":false,"name":"GetValue","realm":"client","returns":[{"description":"The value the panel holds.","type":"any"}]}],"isHook":false,"isPureAbstract":true,"name":"DAlphaBar"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The cleanup library allows you to control what happens to custom entities when the clean-up buttons are pressed in the Utilities tab of the Spawn menu (default Q).","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Who's cleanup list to add the entity to.","isOptional":false,"isVarArg":false,"name":"pl","type":"Player"},{"default":"","description":"The type of cleanup.","isOptional":false,"isVarArg":false,"name":"type","type":"string"},{"default":"","description":"The entity to add to the player's cleanup list.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Adds an entity to a player's cleanup list.","examples":[],"isConstructor":false,"name":"Add","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that called the console command.","isOptional":false,"isVarArg":false,"name":"pl","type":"Player"},{"default":"","description":"The console command that called this function.","isOptional":false,"isVarArg":false,"name":"command","type":"string"},{"default":"","description":"First and only arg is the cleanup type.","isOptional":false,"isVarArg":false,"name":"args","type":"table"}],"description":"{{Internal}} Called by the ''gmod_admin_cleanup'' console command. Allows admins to clean up the server.","examples":[],"isConstructor":false,"name":"CC_AdminCleanup","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that called the console command.","isOptional":false,"isVarArg":false,"name":"pl","type":"Player"},{"default":"","description":"The console command that called this function.","isOptional":false,"isVarArg":false,"name":"command","type":"string"},{"default":"","description":"First and only arg is the cleanup type.","isOptional":false,"isVarArg":false,"name":"args","type":"table"}],"description":"{{Internal}} Called by the ''gmod_cleanup'' console command. Allows players to cleanup their own props.","examples":[],"isConstructor":false,"name":"CC_Cleanup","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Gets the cleanup list.","examples":[],"isConstructor":false,"name":"GetList","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Gets the table of cleanup types.","examples":[],"isConstructor":false,"name":"GetTable","realm":"shared","returns":[{"description":"cleanup_types","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of type.","isOptional":false,"isVarArg":false,"name":"type","type":"string"}],"description":"Registers a new cleanup type.","examples":[],"isConstructor":false,"name":"Register","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Old entity","isOptional":false,"isVarArg":false,"name":"from","type":"Entity"},{"default":"","description":"New entity","isOptional":false,"isVarArg":false,"name":"to","type":"Entity"}],"description":"Replaces one entity in the cleanup module with another","examples":[],"isConstructor":false,"name":"ReplaceEntity","realm":"server","returns":[{"description":"Whether any action was taken.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Repopulates the clients cleanup menu","examples":[],"isConstructor":false,"name":"UpdateUI","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"cleanup"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The concommand library is used to create console commands which can be used to network (basic) information & events between the client and the server.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The command name to be used in console.<br><br>\n\nThis cannot be a name of existing console command or console variable. It will silently fail if it is.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The function to run when the concommand is executed. Arguments passed are:\n* {{FuncArg|Player|ply|The player the ran the concommand. NULL entity if command was entered with the dedicated server console.}}\n* {{FuncArg|string|cmd|The concommand string (if one callback is used for several concommands).}}\n* {{FuncArg|table|args|A table of all string arguments.}}\n* {{FuncArg|string|argStr|The arguments as a string.}}","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"},{"default":"nil","description":"The function to call which should return a table of options for autocompletion. ([[Autocomplete Tutorial|Autocompletion Tutorial]])\n\nThis only properly works on the client since it is '''not''' networked. Arguments passed are:\n* {{FuncArg|string|cmd|The concommand this autocompletion is for.}}\n* {{FuncArg|string|args|The arguments typed so far.}}","isOptional":true,"isVarArg":false,"name":"autoComplete","type":"Function"},{"default":"nil","description":"The text to display should a user run 'help cmdName'.","isOptional":true,"isVarArg":false,"name":"helpText","type":"string"},{"default":"0","description":"Concommand modifier flags. See {{Enum|FCVAR}}.","isOptional":true,"isVarArg":false,"name":"flags","type":"FCVAR"}],"description":"Creates a console command that runs a function in lua with optional autocompletion function and help text.\n\n{{Bug|Issue=1183|This will fail if the concommand was previously removed with {{LibraryFunction|concommand|Remove}} in a different realm (creating a command on the client that was removed from the server and vice-versa).}}","examples":[{"code":"concommand.Add(\"killyourself\",function( ply, cmd, args )\n    ply:Kill()\n    print(\"You killed yourself!\")\nend)","description":"Adds a concommand ''killyourself'' which will kill the user."},{"code":"concommand.Add( \"retrieveplayers\", function()  \n\tfor _, ply in ipairs( player.GetAll() ) do\n\t\tprint( ply:Nick() .. \", \" .. ply:SteamID() .. \"\\n\" )\n\tend\nend)","description":"A concommand that prints the SteamID and nickname of every player on the server."}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of command","isOptional":false,"isVarArg":false,"name":"command","type":"string"},{"default":"","description":"Arguments given to the command","isOptional":false,"isVarArg":false,"name":"arguments","type":"string"}],"description":"{{Internal}} Used by the engine to call the autocomplete function for a console command, and retrieve returned options.","examples":[],"isConstructor":false,"name":"AutoComplete","realm":"shared and menu","returns":[{"description":"Possibilities for auto-completion. This is the return value of the auto-complete callback.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the tables of all console command callbacks, and autocomplete functions, that were added to the game with {{LibraryFunction|concommand|Add}}.","examples":[],"isConstructor":false,"name":"GetTable","realm":"shared and menu","returns":[{"description":"Table of command callback functions.","type":"table"},{"description":"Table of command autocomplete functions.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the command to be removed.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Removes a console command.\n\n{{Bug|Issue=1183|This will not always remove the command from auto-complete.}}\n{{Bug|Issue=1183|{{LibraryFunction|concommand|Add}} will fail if the concommand was previously removed with this function in a different realm (creating a command on the client that was removed from the server and vice-versa).}}","examples":[{"code":"concommand.Remove(\"gmod_camera\")","description":"Removes the built-in concommand \"gmod_camera\" which would normally quickly select the camera swep"}],"isConstructor":false,"name":"Remove","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player to run concommand on","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Command name","isOptional":false,"isVarArg":false,"name":"cmd","type":"string"},{"default":"","description":"Command arguments.\nCan be table or string","isOptional":false,"isVarArg":false,"name":"args","type":"any"},{"default":"","description":"string of all arguments sent to the command","isOptional":false,"isVarArg":false,"name":"argumentString","type":"string"}],"description":"{{Internal|You might be looking for {{GlobalFunction|RunConsoleCommand}} or {{ClassFunction|Player|ConCommand}}.}} Used by the engine to run a console command's callback function, that was added with {{LibraryFunction|concommand|Add}}. An error is sent to the player's chat if no callback is found.","examples":[],"isConstructor":false,"name":"Run","realm":"shared and menu","returns":[{"description":"''true'' if the console command with the given name exists, and ''false'' if it doesn't.","type":"boolean"}]}],"isHook":false,"isPureAbstract":false,"name":"concommand"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Input which can bind a command to a key. Used for binding inputs and outputs of TOOLs.","examples":[{"code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize(250,100)\nframe:Center()\nframe:SetTitle(\"DBinder Example\")\nframe:MakePopup()\n\nlocal binder = vgui.Create( \"DBinder\", frame )\nbinder:SetSize( 200, 50 )\nbinder:SetPos( 25, 35 )\n\nfunction binder:OnChange( num )\n\tLocalPlayer():ChatPrint(\"New bound key: \"..input.GetKeyName( num ))\nend","description":"Creates a DBinder that prints to the player's chat when a new key is bound."}],"extends":"DButton","functions":[{"accessModifier":"public","arguments":[],"description":"Gets the code of the key currently bound by the DBinder. Same as {{ClassFunction|DBinder|GetValue}}.","examples":[],"isConstructor":false,"name":"GetSelectedNumber","realm":"client","returns":[{"description":"The key code of the bound key. See {{Enum|KEY}}.","type":"KEY"}]},{"accessModifier":"public","arguments":[],"description":"Gets the code of the key currently bound by the DBinder. Same as {{ClassFunction|DBinder|GetSelectedNumber}}.","examples":[],"isConstructor":false,"name":"GetValue","realm":"client","returns":[{"description":"The key code of the bound key. See {{Enum|KEY}}.","type":"KEY"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The new bound key. See {{LibraryFunction|input|GetKeyName}}.","isOptional":false,"isVarArg":false,"name":"iNum","type":"number"}],"description":"Called when the player selects a new bind.","examples":[],"isConstructor":false,"name":"OnChange","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key code of the key to bind. See {{Enum|KEY}}.","isOptional":false,"isVarArg":false,"name":"keyCode","type":"KEY"}],"description":"Sets the current key bound by the {{Type|DBinder}}, and updates the button's text as well as the {{Type|ConVar}}.","examples":[],"isConstructor":false,"name":"SetSelectedNumber","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key code of the key to bind. See {{Enum|KEY}}.","isOptional":false,"isVarArg":false,"name":"keyCode","type":"KEY"}],"description":"Alias of {{ClassFunction|DBinder|SetSelected}}.","examples":[],"isConstructor":false,"name":"SetValue","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}} Used to set the text of the DBinder to the current key binding, or ''NONE''.","examples":[],"isConstructor":false,"name":"UpdateText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the value the panel holds.\n\nIn engine is only implemented for {{Type|CheckButton}}, {{Type|Label}} and {{Type|TextEntry}} as a string and for those elements has a hard coded limit of 8092 characters.","examples":[{"code":"local TextEntry = vgui.Create( \"TextEntry\" )\nTextEntry:SetText( \"Hello world!\" )\nprint( TextEntry:GetValue() )","description":"Returns the string typed in a TextEntry."}],"isConstructor":false,"name":"GetValue","realm":"client","returns":[{"description":"The value the panel holds.","type":"any"}]}],"isHook":false,"isPureAbstract":true,"name":"DBinder"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A transparent gray speech bubble panel made up of a rounded box and point coming from the bottom.","examples":[{"code":"--Background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(300, 170)\nBGPanel:Center()\nBGPanel:SetDrawBackground(false)\n\n-- The bubble container\nlocal DBubbleContainer = vgui.Create(\"DBubbleContainer\", BGPanel)\n\n-- Set the dialog point 50 units from the left and make the entire bubble 280x150 pixels.\nDBubbleContainer:OpenForPos(50, 0, 280, 150)","description":"Creates a bubble container panel in the middle of the screen. The background {{Type|DPanel}} is used to allow better control of the dialog point position."},{"code":"-- Image of Bill\nlocal dimg = vgui.Create(\"DImage\")\ndimg:SetPos(0, ScrH()-512)\ndimg:SetImage(\"spawnicons/models/survivors/survivor_namvet_128.png\")\ndimg:SizeToContents()\n\n-- Determine placement of bubble container based on image dimensions\nlocal dimg_x, dimg_y = dimg:GetPos()\nlocal dimg_w, dimg_h = dimg:GetSize()\n\ndimg_x = dimg_x + dimg_w/2\ndimg_y = dimg_y + dimg_h/2.5\n\n-- Bubble container size\nlocal bubble_w, bubble_h = 150, 100\n\n-- Create bubble container\nlocal bubble = vgui.Create(\"DBubbleContainer\")\n\n-- Open it over Bill image\nbubble:OpenForPos(dimg_x, dimg_y+bubble_h-32, bubble_w, bubble_h)\n\n-- Add text to bubble\nlocal lbl = vgui.Create(\"DLabel\", bubble)\nlbl:SetPos(5, 5)\nlbl:SetSize(150, 50)\nlbl:SetWrap(true)\nlbl:SetFont(\"GModNotify\")\nlbl:SetText(\"Does this example get the point across?\")\nlbl:SetDark(true)","description":"Creates a panel with Bill from Left 4 Dead talking through a speech bubble."}],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The x position of the dialog point. If this is set to a value greater than half of the set width, the entire bubble container will be moved in addition to the dialog point.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The y position of the bubble container. Has no effect unless set to a value greater than the set height + 64 pixels.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The width of the bubble container.","isOptional":false,"isVarArg":false,"name":"w","type":"number"},{"default":"","description":"The height of the bubble container.","isOptional":false,"isVarArg":false,"name":"h","type":"number"}],"description":"Sets the speech bubble position and size along with the dialog point position.","examples":[{"code":"-- Length and width of background panel\nlocal size = 200\n\t\t\n-- Background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(size, size)\nBGPanel:Center()\n\n\nlocal bubble1 = vgui.Create(\"DBubbleContainer\", BGPanel)\n\n-- x = 100 (Set pointer in the middle of the speech bubble)\n-- y = 0 (Don't adjust height)\n-- w = 180 (20 pixel right margin)\n-- h = 184 (16 pixel bottom margin)\nbubble1:OpenForPos(size/2, 0, size-20, size-16)","description":"Creates a bubble container that properly fits a 200x200 background panel."}],"isConstructor":false,"name":"OpenForPos","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DBubbleContainer"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A standard Derma button.\n\nBy default, a {{Type|DButton}} is 22px tall.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 300, 250 )\nframe:Center()\nframe:MakePopup()\n\nlocal DermaButton = vgui.Create( \"DButton\", frame ) // Create the button and parent it to the frame\nDermaButton:SetText( \"Say hi\" )\t\t\t\t\t// Set the text on the button\nDermaButton:SetPos( 25, 50 )\t\t\t\t\t// Set the position on the frame\nDermaButton:SetSize( 250, 30 )\t\t\t\t\t// Set the size\nDermaButton.DoClick = function()\t\t\t\t// A custom function run when clicked ( note the . instead of : )\n\tRunConsoleCommand( \"say\", \"Hi\" )\t\t\t// Run the console command \"say hi\" when you click it ( command, args )\nend","description":"The DButton is exactly what you think it is - a button!"}],"extends":"DLabel","functions":[{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nReturns value set by {{ClassFunction|DButton|SetDrawBorder}}. See that page for more info.","examples":[],"isConstructor":false,"name":"GetDrawBorder","realm":"client","returns":[{"description":"value set by {{ClassFunction|DButton|SetDrawBorder}}.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the DButton is currently depressed (a user is clicking on it).","examples":[],"isConstructor":false,"name":"IsDown","realm":"client","returns":[{"description":"Whether or not the button is depressed.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The console command to be called.","isOptional":false,"isVarArg":false,"name":"command","type":"string"},{"default":"","description":"The arguments for the command.","isOptional":false,"isVarArg":false,"name":"args","type":"string"}],"description":"Sets a console command to be called when the button is clicked.\n\nThis overrides the button's ''DoClick'' method.","examples":[{"code":"local button = vgui.Create( \"DButton\" )\nbutton:SetSize( 100, 35 )\nbutton:SetText( \"Say your nickname\" )\nbutton:Center()\nbutton:MakePopup()\nbutton:SetConsoleCommand( \"say\", LocalPlayer():Nick() )","description":"Creates a button that makes the player say their name."}],"isConstructor":false,"name":"SetConsoleCommand","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"{{TrueFalse|Enable the button|Disable the button}}","isOptional":false,"isVarArg":false,"name":"disable","type":"boolean"}],"description":"{{Deprecated|Use {{ClassFunction|DButton|SetEnabled}} instead}}Sets whether or not the DButton is disabled.\n\nWhen disabled, the button is ''greyed out'' and cannot be clicked.","examples":[],"isConstructor":false,"name":"SetDisabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Does nothing.","isOptional":false,"isVarArg":false,"name":"draw","type":"boolean"}],"description":"{{Deprecated}}\n\nDoes absolutely nothing at all. Default value is automatically set to true.","examples":[],"isConstructor":false,"name":"SetDrawBorder","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"The image file to use, relative to ''/materials''. If this is nil, the image background is removed.","isOptional":true,"isVarArg":false,"name":"img","type":"string"}],"description":"Sets an image to be displayed as the button's background. Alias of {{ClassFunction|DButton|SetImage}}","examples":[],"isConstructor":false,"name":"SetIcon","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"The image file to use, relative to ''/materials''. If this is nil, the image background is removed.","isOptional":true,"isVarArg":false,"name":"img","type":"string"}],"description":"Sets an image to be displayed as the button's background.","examples":[],"isConstructor":false,"name":"SetImage","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A table supposed to contain the color values listed above.","isOptional":false,"isVarArg":false,"name":"skin","type":"table"}],"description":"A hook called from within {{Type|DLabel}}'s {{HookFunction|PANEL|ApplySchemeSettings}} to determine the color of the text on display.","examples":[],"isConstructor":false,"name":"UpdateColours","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the label is left clicked (on key release) by the player.\n\nThis will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.\n\nThis can be overridden; by default, it calls {{ClassFunction|DLabel|Toggle}}.\n\nSee also {{ClassFunction|DLabel|DoRightClick}}, {{ClassFunction|DLabel|DoMiddleClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.\n\n[[Category:DButton]]","examples":[{"code":"local lbl = vgui.Create( \"DLabel\" ) -- Creates our label\nlbl:SetFont( \"DermaLarge\" )\nlbl:SetText( \"Click me!\" )\nlbl:SizeToContents()\nlbl:Center()\nlbl:SetMouseInputEnabled( true ) -- We must accept mouse input\nfunction lbl:DoClick() -- Defines what should happen when the label is clicked\n\tprint(\"I was clicked!\")\n\tself:Remove()\nend","description":"Creates a label in the center of the screen, that prints ''I was clicked!'' to the console and disappears when clicked."}],"isConstructor":false,"name":"DoClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the label is middle mouse (Mouse wheel, also known as mouse 3) clicked (on key release) by the player.\n\nThis will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.\n\nSee also {{ClassFunction|DLabel|DoClick}}, {{ClassFunction|DLabel|DoRightClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.\n\n[[Category:DButton]]","examples":[],"isConstructor":false,"name":"DoMiddleClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the label is right clicked (on key release) by the player.\n\nThis will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.\n\nSee also {{ClassFunction|DLabel|DoClick}}, {{ClassFunction|DLabel|DoMiddleClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.\n\n\n[[Category:DButton]]","examples":[{"code":"local lbl = vgui.Create( \"DLabel\" )\nlbl:SetFont( \"DermaLarge\" )\nlbl:SetText( \"Click me!\" )\nlbl:SizeToContents()\nlbl:Center()\nlbl:SetMouseInputEnabled( true )\nfunction lbl:DoRightClick()\n\tprint(\"I was right clicked!\")\n\tself:Remove()\nend","description":"Creates a label in the center of the screen, that prints ''I was right clicked!'' to the console and disappears when right clicked."}],"isConstructor":false,"name":"DoRightClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"[[Category:DButton]] Returns the current font of the DLabel. This is set with {{ClassFunction|DLabel|SetFont}}.","examples":[],"isConstructor":false,"name":"GetFont","realm":"client","returns":[{"description":"The name of the font in use.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the font.\n\nSee [[Default_Fonts|here]] for a list of existing fonts.\nAlternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font.","isOptional":false,"isVarArg":false,"name":"fontName","type":"string"}],"description":"[[Category:DButton]] Sets the font of the label.","examples":[],"isConstructor":false,"name":"SetFont","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"''true'' to disable the DLabel, ''false'' to enable it.","isOptional":false,"isVarArg":false,"name":"disable","type":"boolean"}],"description":"{{Deprecated|Use {{ClassFunction|Panel|SetEnabled}} instead.}}\n\nSets the disabled state of the {{Type|DLabel}}.\n\nWhen disabled, the label does not respond to click, toggle or drag & drop actions.","examples":[],"isConstructor":false,"name":"SetDisabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A table supposed to contain the color values listed above.","isOptional":false,"isVarArg":false,"name":"skin","type":"table"}],"description":"A hook called from within {{ClassFunction|DLabel|ApplySchemeSettings}} to determine the color of the text on display.","examples":[],"isConstructor":false,"name":"UpdateColours","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the label is left clicked (on key release) by the player.\n\nThis will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.\n\nThis can be overridden; by default, it calls {{ClassFunction|DLabel|Toggle}}.\n\nSee also {{ClassFunction|DLabel|DoRightClick}}, {{ClassFunction|DLabel|DoMiddleClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.\n\n[[Category:DButton]]","examples":[{"code":"local lbl = vgui.Create( \"DLabel\" ) -- Creates our label\nlbl:SetFont( \"DermaLarge\" )\nlbl:SetText( \"Click me!\" )\nlbl:SizeToContents()\nlbl:Center()\nlbl:SetMouseInputEnabled( true ) -- We must accept mouse input\nfunction lbl:DoClick() -- Defines what should happen when the label is clicked\n\tprint(\"I was clicked!\")\n\tself:Remove()\nend","description":"Creates a label in the center of the screen, that prints ''I was clicked!'' to the console and disappears when clicked."}],"isConstructor":false,"name":"DoClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the label is middle mouse (Mouse wheel, also known as mouse 3) clicked (on key release) by the player.\n\nThis will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.\n\nSee also {{ClassFunction|DLabel|DoClick}}, {{ClassFunction|DLabel|DoRightClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.\n\n[[Category:DButton]]","examples":[],"isConstructor":false,"name":"DoMiddleClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the label is right clicked (on key release) by the player.\n\nThis will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.\n\nSee also {{ClassFunction|DLabel|DoClick}}, {{ClassFunction|DLabel|DoMiddleClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.\n\n\n[[Category:DButton]]","examples":[{"code":"local lbl = vgui.Create( \"DLabel\" )\nlbl:SetFont( \"DermaLarge\" )\nlbl:SetText( \"Click me!\" )\nlbl:SizeToContents()\nlbl:Center()\nlbl:SetMouseInputEnabled( true )\nfunction lbl:DoRightClick()\n\tprint(\"I was right clicked!\")\n\tself:Remove()\nend","description":"Creates a label in the center of the screen, that prints ''I was right clicked!'' to the console and disappears when right clicked."}],"isConstructor":false,"name":"DoRightClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"[[Category:DButton]] Returns the current font of the DLabel. This is set with {{ClassFunction|DLabel|SetFont}}.","examples":[],"isConstructor":false,"name":"GetFont","realm":"client","returns":[{"description":"The name of the font in use.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the name of the font that the panel renders its text with.\n\nThis is the same font name set with {{ClassFunction|Panel|SetFontInternal}}.","examples":[],"isConstructor":false,"name":"GetFont","realm":"client","returns":[{"description":"fontName","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the font.\n\nSee [[Default_Fonts|here]] for a list of existing fonts.\nAlternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font.","isOptional":false,"isVarArg":false,"name":"fontName","type":"string"}],"description":"[[Category:DButton]] Sets the font of the label.","examples":[],"isConstructor":false,"name":"SetFont","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DButton"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}\n\nUsed by {{Type|DCollapsibleCategory}}","examples":[],"extends":"DButton","functions":[],"isHook":false,"isPureAbstract":true,"name":"DCategoryHeader"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"This class is essentially what controls a {{Type|NextBot}} NPC. You can access it in a {{Type|NextBot}} NPC by using '''self.loco''' variable.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The vector we want to get to","isOptional":false,"isVarArg":false,"name":"goal","type":"Vector"},{"default":"","description":"If unsure then set this to 1","isOptional":false,"isVarArg":false,"name":"goalweight","type":"number"}],"description":"Sets the location we want to get to","examples":[],"isConstructor":false,"name":"Approach","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Removes the stuck status from the bot","examples":[],"isConstructor":false,"name":"ClearStuck","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The vector we want to face","isOptional":false,"isVarArg":false,"name":"goal","type":"Vector"}],"description":"Sets the direction we want to face","examples":[],"isConstructor":false,"name":"FaceTowards","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the acceleration speed","examples":[],"isConstructor":false,"name":"GetAcceleration","realm":"server","returns":[{"description":"Current acceleration speed","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current acceleration as a vector","examples":[],"isConstructor":false,"name":"GetCurrentAcceleration","realm":"server","returns":[{"description":"Current acceleration","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Gets the height the bot is scared to fall from","examples":[],"isConstructor":false,"name":"GetDeathDropHeight","realm":"server","returns":[{"description":"Current death drop height","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the deceleration speed","examples":[],"isConstructor":false,"name":"GetDeceleration","realm":"server","returns":[{"description":"Current deceleration speed","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Return unit vector in XY plane describing our direction of motion - even if we are currently not moving","examples":[],"isConstructor":false,"name":"GetGroundMotionVector","realm":"server","returns":[{"description":"A vector representing the X and Y movement","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Gets the height of the bot's jump","examples":[],"isConstructor":false,"name":"GetJumpHeight","realm":"server","returns":[{"description":"Current jump height","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns maximum jump height of this {{Type|CLuaLocomotion}}.","examples":[],"isConstructor":false,"name":"GetMaxJumpHeight","realm":"server","returns":[{"description":"The maximum jump height.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the max rate at which the NextBot can visually rotate.","examples":[],"isConstructor":false,"name":"GetMaxYawRate","realm":"server","returns":[{"description":"Maximum yaw rate","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the max height the bot can step up","examples":[],"isConstructor":false,"name":"GetStepHeight","realm":"server","returns":[{"description":"Current step height","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current movement velocity as a vector","examples":[],"isConstructor":false,"name":"GetVelocity","realm":"server","returns":[{"description":"Current velocity","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The area to test","isOptional":false,"isVarArg":false,"name":"area","type":"CNavArea"}],"description":"Returns whether this {{Type|CLuaLocomotion}} can reach and/or traverse/move in given {{Type|CNavArea}}.","examples":[],"isConstructor":false,"name":"IsAreaTraversable","realm":"server","returns":[{"description":"Whether this {{Type|CLuaLocomotion}} can traverse given {{Type|CNavArea}}.","type":"CLuaLocomotion | CNavArea"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if we're trying to move.","examples":[],"isConstructor":false,"name":"IsAttemptingToMove","realm":"server","returns":[{"description":"Whether we're trying to move or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns true of the locomotion engine is jumping or climbing","examples":[],"isConstructor":false,"name":"IsClimbingOrJumping","realm":"server","returns":[{"description":"Whether we're climbing or jumping or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the locomotion/nextbot is on ground or not.","examples":[],"isConstructor":false,"name":"IsOnGround","realm":"server","returns":[{"description":"Whether the locomotion/nextbot is on ground or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if we're stuck","examples":[],"isConstructor":false,"name":"IsStuck","realm":"server","returns":[{"description":"Whether we're stuck or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the target in question is on a ladder or not.","examples":[],"isConstructor":false,"name":"IsUsingLadder","realm":"server","returns":[{"description":"If the target is on a ladder or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Makes the bot jump","examples":[],"isConstructor":false,"name":"Jump","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"landingGoal","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"landingForward","type":"Vector"}],"description":"","examples":[],"isConstructor":false,"name":"JumpAcrossGap","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Speed acceleration (default is 400)","isOptional":false,"isVarArg":false,"name":"speed","type":"number"}],"description":"Sets the acceleration speed","examples":[],"isConstructor":false,"name":"SetAcceleration","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Height (default is 200)","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Sets the height the bot is scared to fall from.","examples":[],"isConstructor":false,"name":"SetDeathDropHeight","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New deceleration speed (default is 400)","isOptional":false,"isVarArg":false,"name":"deceleration","type":"number"}],"description":"Sets the deceleration speed.","examples":[],"isConstructor":false,"name":"SetDeceleration","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new desired speed","isOptional":false,"isVarArg":false,"name":"speed","type":"number"}],"description":"Sets movement speed.","examples":[],"isConstructor":false,"name":"SetDesiredSpeed","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Height (default is 58)","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Sets the height of the bot's jump","examples":[],"isConstructor":false,"name":"SetJumpHeight","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Desired new maximum yaw rate","isOptional":false,"isVarArg":false,"name":"yawRate","type":"number"}],"description":"Sets the max rate at which the NextBot can visually rotate. This will not affect moving or pathing.","examples":[],"isConstructor":false,"name":"SetMaxYawRate","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Height (default is 18)","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Sets the max height the bot can step up","examples":[],"isConstructor":false,"name":"SetStepHeight","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"velocity","type":"Vector"}],"description":"Sets the current movement velocity","examples":[],"isConstructor":false,"name":"SetVelocity","realm":"server","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"CLuaLocomotion"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A host for multiple {{Type|DCollapsibleCategory}} panels. As the name suggests, each one of them can be collapsed or expanded on demand by the user.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 500, 500 )\nframe:Center()\nframe:MakePopup()\n\nlocal CatList = vgui.Create( \"DCategoryList\", frame )\nCatList:Dock( FILL )\n\nlocal Cat = CatList:Add( \"Test category with text contents\" )\nCat:Add( \"Item 1\" )\nlocal button = Cat:Add( \"Item 2\" )\nbutton.DoClick = function()\n\tprint( \"Item 2 was clicked.\" )\nend\n\n-- The contents can be any panel, even a DPanelList\nlocal Cat2 = CatList:Add( \"Test category with panel contents\" )\nCat2:SetTall( 100 )\n\nlocal Contents = vgui.Create( \"DButton\" )\nContents:SetText( \"This is the content of the category\" )\nCat2:SetContents( Contents )\n\nCatList:InvalidateLayout( true )","description":"Creates a DCategoryList with a category and a DFrame, as seen above."}],"extends":"DScrollPanel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The name of the category to add.","isOptional":false,"isVarArg":false,"name":"categoryName","type":"string"}],"description":"Adds a {{Type|DCollapsibleCategory}} to the list.","examples":[],"isConstructor":false,"name":"Add","realm":"client","returns":[{"description":"The created {{Type|DCollapsibleCategory}}","type":"DCollapsibleCategory"}]},{"accessModifier":"public","arguments":[{"default":"","description":"VGUI element to add to the list.","isOptional":false,"isVarArg":false,"name":"element","type":"Panel"}],"description":"Adds an element to the list.","examples":[],"isConstructor":false,"name":"AddItem","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Calls {{ClassFunction|Panel|UnselectAll}} on all child elements, if they have it.","examples":[],"isConstructor":false,"name":"UnselectAll","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to be added (parented). Can also be:\n* {{FuncArg|string|Class Name|creates panel with the specified name and adds it to the panel.}}\n* {{FuncArg|table|PANEL table|creates a panel from table and adds it to the panel.}}","isOptional":false,"isVarArg":false,"name":"object","type":"Panel"}],"description":"Adds the specified object to the panel.","examples":[],"isConstructor":false,"name":"Add","realm":"client","returns":[{"description":"New panel","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to add.","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"Parents the passed panel to the DScrollPanel's canvas.","examples":[],"isConstructor":false,"name":"AddItem","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Recursively deselects this panel object and all of its children. This will cascade to all child objects at every level below the parent.","examples":[],"isConstructor":false,"name":"UnselectAll","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DCategoryList"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The constraint library allows you to control the constraint system built into the physics engine (rope, weld, ballsockets, etc).","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The entity to store the information on.","isOptional":false,"isVarArg":false,"name":"ent1","type":"Entity"},{"default":"","description":"The constraint to store in the entity's table.","isOptional":false,"isVarArg":false,"name":"constrt","type":"Entity"},{"default":"nil","description":"Optional. If different from ''ent1'', the info will also be stored in the table for this entity.","isOptional":true,"isVarArg":false,"name":"ent2","type":"Entity"},{"default":"nil","description":"Optional. Same as ''ent2''.","isOptional":true,"isVarArg":false,"name":"ent3","type":"Entity"},{"default":"nil","description":"Optional. Same as ''ent2''.","isOptional":true,"isVarArg":false,"name":"ent4","type":"Entity"}],"description":"Stores information about constraints in an entity's table.","examples":[],"isConstructor":false,"name":"AddConstraintTable","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to store the information on.","isOptional":false,"isVarArg":false,"name":"ent1","type":"Entity"},{"default":"","description":"The constraint to store in the entity's table.","isOptional":false,"isVarArg":false,"name":"constrt","type":"Entity"},{"default":"nil","description":"Optional. If different from ''ent1'', the info will also be stored in the table for this entity.","isOptional":true,"isVarArg":false,"name":"ent2","type":"Entity"},{"default":"nil","description":"Optional. Same as ''ent2''.","isOptional":true,"isVarArg":false,"name":"ent3","type":"Entity"},{"default":"nil","description":"Optional. Same as ''ent2''.","isOptional":true,"isVarArg":false,"name":"ent4","type":"Entity"}],"description":"Stores info about the constraints on the entity's table. The only difference between this and {{LibraryFunction|constraint|AddConstraintTable}} is that the constraint does not get deleted when the entity is removed.","examples":[],"isConstructor":false,"name":"AddConstraintTableNoDelete","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"First entity.","isOptional":false,"isVarArg":false,"name":"Ent1","type":"Entity"},{"default":"","description":"Second entity.","isOptional":false,"isVarArg":false,"name":"Ent2","type":"Entity"},{"default":"","description":"Bone of first entity (0 for non-ragdolls)","isOptional":false,"isVarArg":false,"name":"Bone1","type":"number"},{"default":"","description":"Bone of second entity (0 for non-ragdolls)","isOptional":false,"isVarArg":false,"name":"Bone2","type":"number"},{"default":"","description":"Position on the first entity, in its local space coordinates.","isOptional":false,"isVarArg":false,"name":"LPos1","type":"Vector"},{"default":"","description":"Position on the second entity, in its local space coordinates.","isOptional":false,"isVarArg":false,"name":"LPos2","type":"Vector"},{"default":"","description":"Amount of force until it breaks (0 = unbreakable)","isOptional":false,"isVarArg":false,"name":"forcelimit","type":"number"},{"default":"","description":"Amount of torque (rotation speed) until it breaks (0 = unbreakable)","isOptional":false,"isVarArg":false,"name":"torquelimit","type":"number"},{"default":"","description":"Minimum angle in rotations around the X axis local to the constraint.","isOptional":false,"isVarArg":false,"name":"xmin","type":"number"},{"default":"","description":"Minimum angle in rotations around the Y axis local to the constraint.","isOptional":false,"isVarArg":false,"name":"ymin","type":"number"},{"default":"","description":"Minimum angle in rotations around the Z axis local to the constraint.","isOptional":false,"isVarArg":false,"name":"zmin","type":"number"},{"default":"","description":"Maximum angle in rotations around the X axis local to the constraint.","isOptional":false,"isVarArg":false,"name":"xmax","type":"number"},{"default":"","description":"Maximum angle in rotations around the Y axis local to the constraint.","isOptional":false,"isVarArg":false,"name":"ymax","type":"number"},{"default":"","description":"Maximum angle in rotations around the Z axis local to the constraint.","isOptional":false,"isVarArg":false,"name":"zmax","type":"number"},{"default":"","description":"Rotational friction in the X axis local to the constraint.","isOptional":false,"isVarArg":false,"name":"xfric","type":"number"},{"default":"","description":"Rotational friction in the Y axis local to the constraint.","isOptional":false,"isVarArg":false,"name":"yfric","type":"number"},{"default":"","description":"Rotational friction in the Z axis local to the constraint.","isOptional":false,"isVarArg":false,"name":"zfric","type":"number"},{"default":"","description":"Only limit rotation, free movement.","isOptional":false,"isVarArg":false,"name":"onlyrotation","type":"number"},{"default":"","description":"Whether the entities should be no-collided.","isOptional":false,"isVarArg":false,"name":"nocollide","type":"number"}],"description":"Creates an advanced ballsocket (ragdoll) constraint.\n\nUses a https://developer.valvesoftware.com/wiki/Phys_ragdollconstraint","examples":[],"isConstructor":false,"name":"AdvBallsocket","realm":"server","returns":[{"description":"A phys_ragdollconstraint entity. Will return false if the constraint could not be created.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"First entity.","isOptional":false,"isVarArg":false,"name":"Ent1","type":"Entity"},{"default":"","description":"Second entity.","isOptional":false,"isVarArg":false,"name":"Ent2","type":"Entity"},{"default":"","description":"Bone of first entity (0 for non-ragdolls)","isOptional":false,"isVarArg":false,"name":"Bone1","type":"number"},{"default":"","description":"Bone of second entity (0 for non-ragdolls)","isOptional":false,"isVarArg":false,"name":"Bone2","type":"number"},{"default":"","description":"Position on the first entity, in its local space coordinates.","isOptional":false,"isVarArg":false,"name":"LPos1","type":"Vector"},{"default":"","description":"Position on the second entity, in its local space coordinates.","isOptional":false,"isVarArg":false,"name":"LPos2","type":"Vector"},{"default":"","description":"Amount of force until it breaks (0 = unbreakable)","isOptional":false,"isVarArg":false,"name":"forcelimit","type":"number"},{"default":"","description":"Amount of torque (rotational force) until it breaks (0 = unbreakable)","isOptional":false,"isVarArg":false,"name":"torquelimit","type":"number"},{"default":"","description":"Constraint friction.","isOptional":false,"isVarArg":false,"name":"friction","type":"number"},{"default":"","description":"Whether the entities should be no-collided.","isOptional":false,"isVarArg":false,"name":"nocollide","type":"number"},{"default":"","description":"If you include the LocalAxis then LPos2 will not be used in the final constraint. However, LPos2 is still a required argument.","isOptional":false,"isVarArg":false,"name":"LocalAxis","type":"Vector"},{"default":"","description":"Whether or not to add the constraint info on the entity table. See {{LibraryFunction|constraint|AddConstraintTable}}.","isOptional":false,"isVarArg":false,"name":"DontAddTable","type":"boolean"}],"description":"Creates an axis constraint.","examples":[],"isConstructor":false,"name":"Axis","realm":"server","returns":[{"description":"Constraint. Will return false if the constraint could not be created.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"First entity","isOptional":false,"isVarArg":false,"name":"Ent1","type":"Entity"},{"default":"","description":"Second entity","isOptional":false,"isVarArg":false,"name":"Ent2","type":"Entity"},{"default":"","description":"Bone of first entity (0 for non-ragdolls)","isOptional":false,"isVarArg":false,"name":"Bone1","type":"number"},{"default":"","description":"Bone of second entity (0 for non-ragdolls)","isOptional":false,"isVarArg":false,"name":"Bone2","type":"number"},{"default":"","description":"Centerposition of the joint, relative to the <b>second</b> entity.","isOptional":false,"isVarArg":false,"name":"LocalPos","type":"Vector"},{"default":"","description":"Amount of force until it breaks (0 = unbreakable)","isOptional":false,"isVarArg":false,"name":"forcelimit","type":"number"},{"default":"","description":"Amount of torque (rotation speed) until it breaks (0 = unbreakable)","isOptional":false,"isVarArg":false,"name":"torquelimit","type":"number"},{"default":"","description":"Whether the entities should be nocollided","isOptional":false,"isVarArg":false,"name":"nocollide","type":"number"}],"description":"Creates a ballsocket joint.","examples":[],"isConstructor":false,"name":"Ballsocket","realm":"server","returns":[{"description":"Constraint. Will return false if the constraint could not be created.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to check","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The bone of the entity to check (use 0 for mono boned ents)","isOptional":false,"isVarArg":false,"name":"bone","type":"number"}],"description":"Basic checks to make sure that the specified entity and bone are valid. Returns false if we should not be constraining the entity.","examples":[{"code":"function Weld( Ent1, Ent2, Bone1, Bone2, forcelimit, nocollide, deleteonbreak )\n if ( !CanConstrain( Ent1, Bone1 ) ) then return false end\n if ( !CanConstrain( Ent2, Bone2 ) ) then return false end","description":"From modules/constraint.lua"}],"isConstructor":false,"name":"CanConstrain","realm":"server","returns":[{"description":"shouldConstrain","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"material","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"Constraint","type":"Entity"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"Ent1","type":"Entity"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"LPos1","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"Bone1","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"Ent2","type":"Entity"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"LPos2","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"Bone2","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"kv","type":"table"}],"description":"Creates a rope without any constraint","examples":[],"isConstructor":false,"name":"CreateKeyframeRope","realm":"server","returns":[{"description":"rope","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to spawn the anchor at","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Creates an invisible, non-moveable anchor point in the world to which things can be attached.","examples":[],"isConstructor":false,"name":"CreateStaticAnchorPoint","realm":"server","returns":[{"description":"anchor","type":"Entity"},{"description":"physicsObject,","type":"PhysObj"},{"description":"bone","type":"number"},{"description":"LPos","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"First entity.","isOptional":false,"isVarArg":false,"name":"Ent1","type":"Entity"},{"default":"","description":"Second entity","isOptional":false,"isVarArg":false,"name":"Ent2","type":"Entity"},{"default":"","description":"Bone of first entity (0 for non-ragdolls)","isOptional":false,"isVarArg":false,"name":"Bone1","type":"number"},{"default":"","description":"Bone of second entity (0 for non-ragdolls)","isOptional":false,"isVarArg":false,"name":"Bone2","type":"number"},{"default":"","description":"Position of first end of the rope. Local to Ent1.","isOptional":false,"isVarArg":false,"name":"LPos1","type":"Vector"},{"default":"","description":"Position of second end of the rope. Local to Ent2.","isOptional":false,"isVarArg":false,"name":"LPos2","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"constant","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"damping","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"rdamping","type":"number"},{"default":"","description":"The material of the rope.","isOptional":false,"isVarArg":false,"name":"material","type":"string"},{"default":"","description":"Width of rope.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"stretchonly","type":"boolean"}],"description":"Creates an elastic constraint.","examples":[],"isConstructor":false,"name":"Elastic","realm":"server","returns":[{"description":"Constraint. Will return false if the constraint could not be created.","type":"Entity"},{"description":"rope.  Will return nil if the constraint could not be created.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The first entity to check","isOptional":false,"isVarArg":false,"name":"ent1","type":"Entity"},{"default":"","description":"The second entity to check","isOptional":false,"isVarArg":false,"name":"ent2","type":"Entity"},{"default":"","description":"The constraint type to look for (eg. \"Weld\", \"Elastic\", \"NoCollide\")","isOptional":false,"isVarArg":false,"name":"type","type":"string"},{"default":"","description":"The bone number for the first entity (0 for monoboned entities)","isOptional":false,"isVarArg":false,"name":"bone1","type":"number"},{"default":"","description":"The bone number for the second entity","isOptional":false,"isVarArg":false,"name":"bone2","type":"number"}],"description":"Returns the constraint of a specified type between two entities, if it exists","examples":[],"isConstructor":false,"name":"Find","realm":"server","returns":[{"description":"constraint","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to check","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The type of constraint (eg. \"Weld\", \"Elastic\", \"NoCollide\")","isOptional":false,"isVarArg":false,"name":"type","type":"string"}],"description":"Returns the first constraint of a specific type directly connected to the entity found","examples":[],"isConstructor":false,"name":"FindConstraint","realm":"server","returns":[{"description":"The constraint table, set with {{LibraryFunction|constraint|AddConstraintTable}}","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to check","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The type of constraint (eg. \"Weld\", \"Elastic\", \"NoCollide\")","isOptional":false,"isVarArg":false,"name":"type","type":"string"}],"description":"Returns the other entity involved in the first constraint of a specific type directly connected to the entity","examples":[],"isConstructor":false,"name":"FindConstraintEntity","realm":"server","returns":[{"description":"The other entity.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to check","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The type of constraint (eg. \"Weld\", \"Elastic\", \"NoCollide\")","isOptional":false,"isVarArg":false,"name":"type","type":"string"}],"description":"Returns a table of all constraints of a specific type directly connected to the entity","examples":[],"isConstructor":false,"name":"FindConstraints","realm":"server","returns":[{"description":"All the constraints of this entity.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity that will forget its constraints.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Make this entity forget any constraints it knows about. Note that this will not actually remove the constraints.","examples":[],"isConstructor":false,"name":"ForgetConstraints","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to check","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"nil","description":"Table used to return result. Optional.","isOptional":true,"isVarArg":false,"name":"ResultTable","type":"table"}],"description":"Returns a table of all entities recursively constrained to an entitiy.","examples":[{"code":"-- Remove this entity and everything constrained\nfunction TOOL:RightClick( trace )\n\tif ( !IsValid( trace.Entity ) or trace.Entity:IsPlayer() ) then return false end\n\t-- Loop through all the entities in the system\n\tfor _, Entity in pairs( constraint.GetAllConstrainedEntities( trace.Entity ) ) do\n\t\tDoRemoveEntity( Entity )\n\tend\n\treturn true\nend","description":"Adapted from stools/remover.lua"}],"isConstructor":false,"name":"GetAllConstrainedEntities","realm":"server","returns":[{"description":"A table containing all of the constrained entities. This includes all entities constrained to entities constrained to the supplied entity, etc.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to check","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Returns a table of all constraints directly connected to the entity","examples":[],"isConstructor":false,"name":"GetTable","realm":"server","returns":[{"description":"A list of all constraints connected to the entity.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to check","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Returns true if the entity has constraints attached to it","examples":[],"isConstructor":false,"name":"HasConstraints","realm":"server","returns":[{"description":"Whether the entity has any constraints or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that will be used to call {{LibraryFunction|numpad|OnDown}}.","isOptional":false,"isVarArg":false,"name":"pl","type":"Player"},{"default":"","description":"First entity.","isOptional":false,"isVarArg":false,"name":"Ent1","type":"Entity"},{"default":"","description":"Second entity.","isOptional":false,"isVarArg":false,"name":"Ent2","type":"Entity"},{"default":"","description":"Bone of first entity (0 for non-ragdolls),","isOptional":false,"isVarArg":false,"name":"Bone1","type":"number"},{"default":"","description":"Bone of second entity (0 for non-ragdolls).","isOptional":false,"isVarArg":false,"name":"Bone2","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"LPos1","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"LPos2","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"Length1","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"Length2","type":"number"},{"default":"","description":"The width of the rope.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The key binding, corresponding to an {{Enum|KEY}}","isOptional":false,"isVarArg":false,"name":"key","type":"KEY"},{"default":"","description":"Whether the hydraulic is fixed.","isOptional":false,"isVarArg":false,"name":"fixed","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"speed","type":"number"},{"default":"","description":"The material of the rope.","isOptional":false,"isVarArg":false,"name":"material","type":"string"}],"description":"Creates a Hydraulic constraint.","examples":[],"isConstructor":false,"name":"Hydraulic","realm":"server","returns":[{"description":"Constraint. Will return false if the constraint could not be created.","type":"Entity"},{"description":"rope. Will return nil if the constraint could not be created.","type":"Entity"},{"description":"controller. Can return nil depending on how the constraint was created. Will return nil if the constraint could not be created.","type":"Entity"},{"description":"slider. Can return nil depending on how the constraint was created. Will return nil if the constraint could not be created.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to keep upright","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The angle defined as \"upright\"","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"},{"default":"","description":"The bone of the entity to constrain (0 for boneless)","isOptional":false,"isVarArg":false,"name":"bone","type":"number"},{"default":"","description":"Basically, the strength of the constraint","isOptional":false,"isVarArg":false,"name":"angularLimit","type":"number"}],"description":"Creates a keep upright constraint.\n\n{{Note|This function only works on prop_physics or prop_ragdoll.}}","examples":[{"code":"constraint.Keepupright( ent, Phys:GetAngles(), 0, 999999 )","description":"From properties/keep_upright.lua (the right click menu)"}],"isConstructor":false,"name":"Keepupright","realm":"server","returns":[{"description":"The created constraint, if any or false if the constraint failed to set","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"First entity.","isOptional":false,"isVarArg":false,"name":"Ent1","type":"Entity"},{"default":"","description":"Second entity.","isOptional":false,"isVarArg":false,"name":"Ent2","type":"Entity"},{"default":"","description":"Bone of first entity (0 for non-ragdolls)","isOptional":false,"isVarArg":false,"name":"Bone1","type":"number"},{"default":"","description":"Bone of second entity (0 for non-ragdolls)","isOptional":false,"isVarArg":false,"name":"Bone2","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"LPos1","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"LPos2","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"friction","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"torque","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"forcetime","type":"number"},{"default":"","description":"Whether the entities should be no-collided.","isOptional":false,"isVarArg":false,"name":"nocollide","type":"number"},{"default":"","description":"Whether the constraint is on toggle.","isOptional":false,"isVarArg":false,"name":"toggle","type":"number"},{"default":"","description":"The player that will be used to call {{LibraryFunction|numpad|OnDown}} and {{LibraryFunction|numpad|OnUp}}.","isOptional":false,"isVarArg":false,"name":"pl","type":"Player"},{"default":"","description":"Amount of force until it breaks (0 = unbreakable)","isOptional":false,"isVarArg":false,"name":"forcelimit","type":"number"},{"default":"","description":"The key binding for \"forward\", corresponding to an {{Enum|KEY}}","isOptional":false,"isVarArg":false,"name":"numpadkey_fwd","type":"KEY"},{"default":"","description":"The key binding for \"backwards\", corresponding to an {{Enum|KEY}}","isOptional":false,"isVarArg":false,"name":"numpadkey_bwd","type":"KEY"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"direction","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"LocalAxis","type":"Vector"}],"description":"Creates a motor constraint.","examples":[],"isConstructor":false,"name":"Motor","realm":"server","returns":[{"description":"Constraint. Will return false if the constraint could not be created.","type":"Entity"},{"description":"axis. Will return nil if the constraint could not be created.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that will be used to call {{LibraryFunction|numpad|OnDown}}.","isOptional":false,"isVarArg":false,"name":"pl","type":"Player"},{"default":"","description":"First entity.","isOptional":false,"isVarArg":false,"name":"Ent1","type":"Entity"},{"default":"","description":"Second entity.","isOptional":false,"isVarArg":false,"name":"Ent2","type":"Entity"},{"default":"","description":"Bone of first entity (0 for non-ragdolls)","isOptional":false,"isVarArg":false,"name":"Bone1","type":"number"},{"default":"","description":"Bone of second entity (0 for non-ragdolls)","isOptional":false,"isVarArg":false,"name":"Bone2","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"LPos1","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"LPos2","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"Length1","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"Length2","type":"number"},{"default":"","description":"Width of the rope.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The key binding, corresponding to an {{Enum|KEY}}","isOptional":false,"isVarArg":false,"name":"key","type":"KEY"},{"default":"","description":"Whether the constraint is fixed.","isOptional":false,"isVarArg":false,"name":"fixed","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"period","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"amplitude","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"starton","type":"boolean"},{"default":"","description":"Material of the rope.","isOptional":false,"isVarArg":false,"name":"material","type":"string"}],"description":"Creates a muscle constraint.","examples":[],"isConstructor":false,"name":"Muscle","realm":"server","returns":[{"description":"Constraint. Will return false if the constraint could not be created.","type":"Entity"},{"description":"rope. Will return nil if the constraint could not be created.","type":"Entity"},{"description":"controller. Will return nil if the constraint could not be created.","type":"Entity"},{"description":"slider. Will return nil if the fixed argument is not 1 or if the constraint could not be created.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"First entity.","isOptional":false,"isVarArg":false,"name":"Ent1","type":"Entity"},{"default":"","description":"Second entity.","isOptional":false,"isVarArg":false,"name":"Ent2","type":"Entity"},{"default":"","description":"Bone of first entity (0 for non-ragdolls).","isOptional":false,"isVarArg":false,"name":"Bone1","type":"number"},{"default":"","description":"Bone of second entity (0 for non-ragdolls).","isOptional":false,"isVarArg":false,"name":"Bone2","type":"number"}],"description":"Creates an no-collide \"constraint\". Disables collision between two entities.","examples":[],"isConstructor":false,"name":"NoCollide","realm":"server","returns":[{"description":"Constraint. Will return false if the constraint could not be created.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"Ent1","type":"Entity"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"Ent4","type":"Entity"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"Bone1","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"Bone4","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"LPos1","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"LPos4","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"WPos2","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"WPos3","type":"Vector"},{"default":"","description":"Amount of force until it breaks (0 = unbreakable)","isOptional":false,"isVarArg":false,"name":"forcelimit","type":"number"},{"default":"","description":"Whether the constraint is rigid.","isOptional":false,"isVarArg":false,"name":"rigid","type":"boolean"},{"default":"","description":"Width of the rope.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"Material of the rope.","isOptional":false,"isVarArg":false,"name":"material","type":"string"}],"description":"Creates a pulley constraint.","examples":[],"isConstructor":false,"name":"Pulley","realm":"server","returns":[{"description":"Constraint. Will return false if the constraint could not be created.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to remove constraints from","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Attempts to remove all constraints associated with an entity","examples":[{"code":"-- Reload removes all constraints on the targetted entity\nfunction TOOL:Reload( trace )\n\tif ( !IsValid( trace.Entity ) or trace.Entity:IsPlayer() ) then return false end\n\treturn constraint.RemoveAll( trace.Entity )\nend","description":"From stools/remover.lua"}],"isConstructor":false,"name":"RemoveAll","realm":"server","returns":[{"description":"Whether any constraints were removed","type":"boolean"},{"description":"Number of constraints removed","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to check","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The constraint type to remove (eg. \"Weld\", \"Elastic\", \"NoCollide\")","isOptional":false,"isVarArg":false,"name":"type","type":"string"}],"description":"Attempts to remove all constraints of a specified type associated with an entity","examples":[{"code":"function TOOL:Reload( trace )\n if (!trace.Entity:IsValid() or trace.Entity:IsPlayer() ) then return false end\n local bool = constraint.RemoveConstraints( trace.Entity, \"Axis\" )\n return bool\nend","description":"From stools/axis.lua"}],"isConstructor":false,"name":"RemoveConstraints","realm":"server","returns":[{"description":"Whether we removed any constraints or not","type":"boolean"},{"description":"The amount of constraints removed","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"First entity","isOptional":false,"isVarArg":false,"name":"Ent1","type":"Entity"},{"default":"","description":"Second entity","isOptional":false,"isVarArg":false,"name":"Ent2","type":"Entity"},{"default":"","description":"Bone of first entity (0 for non-ragdolls)","isOptional":false,"isVarArg":false,"name":"Bone1","type":"number"},{"default":"","description":"Bone of second entity (0 for non-ragdolls)","isOptional":false,"isVarArg":false,"name":"Bone2","type":"number"},{"default":"","description":"Position of first end of the rope. Local to Ent1.","isOptional":false,"isVarArg":false,"name":"LPos1","type":"Vector"},{"default":"","description":"Position of second end of the rope. Local to Ent2.","isOptional":false,"isVarArg":false,"name":"LPos2","type":"Vector"},{"default":"","description":"Length of the rope.","isOptional":false,"isVarArg":false,"name":"length","type":"number"},{"default":"","description":"Amount to add to the length of the rope. Works as it does in the Rope tool.","isOptional":false,"isVarArg":false,"name":"addlength","type":"number"},{"default":"","description":"Amount of force until it breaks (0 = unbreakable).","isOptional":false,"isVarArg":false,"name":"forcelimit","type":"number"},{"default":"","description":"Width of the rope.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"Material of the rope.","isOptional":false,"isVarArg":false,"name":"material","type":"string"},{"default":"","description":"Whether the constraint is rigid.","isOptional":false,"isVarArg":false,"name":"rigid","type":"boolean"}],"description":"Creates a rope constraint - with rope!","examples":[],"isConstructor":false,"name":"Rope","realm":"server","returns":[{"description":"Constraint. Will be a keyframe_rope if you roping to the same bone on the same entity. Will return false if the constraint could not be created.","type":"Entity"},{"description":"rope. Will return nil if \"Constraint\" is a keyframe_rope or if the constraint could not be created.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"First entity.","isOptional":false,"isVarArg":false,"name":"Ent1","type":"Entity"},{"default":"","description":"Second entity.","isOptional":false,"isVarArg":false,"name":"Ent2","type":"Entity"},{"default":"","description":"Bone of first entity (0 for non-ragdolls),","isOptional":false,"isVarArg":false,"name":"Bone1","type":"number"},{"default":"","description":"Bone of second entity (0 for non-ragdolls).","isOptional":false,"isVarArg":false,"name":"Bone2","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"LPos1","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"LPos2","type":"Vector"},{"default":"","description":"The width of the rope.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The material of the rope.","isOptional":false,"isVarArg":false,"name":"material","type":"string"}],"description":"Creates a slider constraint.","examples":[],"isConstructor":false,"name":"Slider","realm":"server","returns":[{"description":"Constraint. Will return false if the constraint could not be created.","type":"Entity"},{"description":"rope. Will return nil if the constraint could not be created.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The first entity","isOptional":false,"isVarArg":false,"name":"ent1","type":"Entity"},{"default":"","description":"The second entity","isOptional":false,"isVarArg":false,"name":"ent2","type":"Entity"},{"default":"","description":"The bonenumber of the first entity (0 for monoboned entities) <br>\n<br>\nPhysObj number for ragdolls, see: {{ClassFunction|Entity|TranslateBoneToPhysBone}}.","isOptional":false,"isVarArg":false,"name":"bone1","type":"number"},{"default":"","description":"The bonenumber of the second entity","isOptional":false,"isVarArg":false,"name":"bone2","type":"number"},{"default":"","description":"The amount of force appliable to the constraint before it will break (0 is never)","isOptional":false,"isVarArg":false,"name":"forcelimit","type":"number"},{"default":"","description":"Should ent1 be nocollided to ent2 via this constraint","isOptional":false,"isVarArg":false,"name":"nocollide","type":"boolean"},{"default":"","description":"If true, when ent2 is removed, ent1 will also be removed","isOptional":false,"isVarArg":false,"name":"deleteent1onbreak","type":"boolean"}],"description":"Creates a weld constraint","examples":[{"code":"function TOOL:LeftClick( trace )\n /* Boilerplate stool code to extract ClientConVars to variables */\n local thruster = MakeThruster( ply, model, Ang, trace.HitPos, key, key_bk, force, toggle, effect, damageable, soundname )\n local weld = constraint.Weld( thruster, trace.Entity, 0, trace.PhysicsBone, 0, collision == 0, true )\n -- If you remove the entity thrusters are welded to, the thruster is removed as well\nend","description":"Adapted from stools/thruster.lua"}],"isConstructor":false,"name":"Weld","realm":"server","returns":[{"description":"constraint","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that will be used to call {{LibraryFunction|numpad|OnDown}} and {{LibraryFunction|numpad|OnUp}}.","isOptional":false,"isVarArg":false,"name":"pl","type":"Player"},{"default":"","description":"First entity.","isOptional":false,"isVarArg":false,"name":"Ent1","type":"Entity"},{"default":"","description":"Second entity.","isOptional":false,"isVarArg":false,"name":"Ent2","type":"Entity"},{"default":"","description":"Bone of first entity (0 for non-ragdolls),","isOptional":false,"isVarArg":false,"name":"Bone1","type":"number"},{"default":"","description":"Bone of second entity (0 for non-ragdolls).","isOptional":false,"isVarArg":false,"name":"Bone2","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"LPos1","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"LPos2","type":"Vector"},{"default":"","description":"The width of the rope.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The key binding for \"forward\", corresponding to an {{Enum|KEY}}","isOptional":false,"isVarArg":false,"name":"fwd_bind","type":"KEY"},{"default":"","description":"The key binding for \"backwards\", corresponding to an {{Enum|KEY}}","isOptional":false,"isVarArg":false,"name":"bwd_bind","type":"KEY"},{"default":"","description":"Forward speed.","isOptional":false,"isVarArg":false,"name":"fwd_speed","type":"number"},{"default":"","description":"Backwards speed.","isOptional":false,"isVarArg":false,"name":"bwd_speed","type":"number"},{"default":"","description":"The material of the rope.","isOptional":false,"isVarArg":false,"name":"material","type":"string"},{"default":"","description":"Whether the winch should be on toggle.","isOptional":false,"isVarArg":false,"name":"toggle","type":"boolean"}],"description":"Creates a Winch constraint.","examples":[],"isConstructor":false,"name":"Winch","realm":"server","returns":[{"description":"Constraint. Can return nil. Will return false if the constraint could not be created.","type":"Entity"},{"description":"rope. Will return nil if the constraint could not be created.","type":"Entity"},{"description":"controller. Can return nil.","type":"Entity"}]}],"isHook":false,"isPureAbstract":false,"name":"constraint"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The construct library is used to control the physical properties of entities.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Player that will have the numpad control over the magnet","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The position of the magnet","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"The angles of the magnet","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"},{"default":"","description":"The model of the maget","isOptional":false,"isVarArg":false,"name":"model","type":"string"},{"default":"","description":"Material of the magnet ( texture )","isOptional":false,"isVarArg":false,"name":"material","type":"string"},{"default":"","description":"The key to toggle the magnet, see {{Enum|KEY}}","isOptional":false,"isVarArg":false,"name":"key","type":"KEY"},{"default":"","description":"Maximum amount of objects the magnet can hold","isOptional":false,"isVarArg":false,"name":"maxObjects","type":"number"},{"default":"","description":"Strength of the magnet","isOptional":false,"isVarArg":false,"name":"strength","type":"number"},{"default":"0","description":"If > 0, disallows the magnet to pull objects towards it","isOptional":true,"isVarArg":false,"name":"nopull","type":"number"},{"default":"0","description":"If > 0, allows rotation of the objects attached","isOptional":true,"isVarArg":false,"name":"allowrot","type":"number"},{"default":"0","description":"If > 0, enabled from spawn","isOptional":true,"isVarArg":false,"name":"startOn","type":"number"},{"default":"","description":"If != 0, pressing the key toggles the magnet, otherwise you'll have to hold the key to keep it enabled","isOptional":true,"isVarArg":false,"name":"toggle","type":"number"},{"default":"Vector( 0, 0, 0 )","description":"Velocity to set on spawn","isOptional":true,"isVarArg":false,"name":"vel","type":"Vector"},{"default":"Angle( 0, 0, 0 )","description":"Angular velocity to set on spawn","isOptional":true,"isVarArg":false,"name":"aVel","type":"Angle"},{"default":"false","description":"Freeze the magnet on start","isOptional":true,"isVarArg":false,"name":"frozen","type":"boolean"}],"description":"Creates a magnet.","examples":[],"isConstructor":false,"name":"Magnet","realm":"server","returns":[{"description":"The magnet","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player. This variable is not used and can be left out.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The entity to apply properties to","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"You can use this or the argument below. This will be used in case you don't provide argument below.","isOptional":false,"isVarArg":false,"name":"physObjID","type":"number"},{"default":"","description":"The physics object to apply the properties to","isOptional":false,"isVarArg":false,"name":"physObj","type":"PhysObj"},{"default":"","description":"The table containing properties to apply. See {{Struct|PhysProperties}}","isOptional":false,"isVarArg":false,"name":"data","type":"PhysProperties"}],"description":"Sets props physical properties.","examples":[],"isConstructor":false,"name":"SetPhysProp","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player that will have the numpad control over the magnet","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The position of the magnet","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"The angles of the magnet","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"},{"default":"","description":"The model of the maget","isOptional":false,"isVarArg":false,"name":"model","type":"string"},{"default":"","description":"Material of the magnet ( texture )","isOptional":false,"isVarArg":false,"name":"material","type":"string"},{"default":"","description":"The key to toggle the magnet, see {{Enum|KEY}}","isOptional":false,"isVarArg":false,"name":"key","type":"KEY"},{"default":"","description":"Maximum amount of objects the magnet can hold","isOptional":false,"isVarArg":false,"name":"maxObjects","type":"number"},{"default":"","description":"Strength of the magnet","isOptional":false,"isVarArg":false,"name":"strength","type":"number"},{"default":"","description":"If != 0, pressing the key toggles the magnet, otherwise you'll have to hold the key to keep it enabled","isOptional":false,"isVarArg":false,"name":"toggle","type":"number"}],"description":"Creates a magnet.","examples":[],"isConstructor":false,"name":"Magnet","realm":"server","returns":[{"description":"The magnet","type":"Entity"}]}],"isHook":false,"isPureAbstract":false,"name":"construct"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"The DCheckBox is a checkbox. It allows you to get a boolean value from the user (true/false - yes/no)","examples":[{"code":"local DermaCheckbox = vgui.Create(\"DCheckBox\")// Create the checkbox\nDermaCheckbox:SetPos(25, 50)// Set the position\nDermaCheckbox:SetValue(0)// Initial value (will determine whether the box is ticked too)","description":"Creates a DCheckBox and sets its initial value."}],"extends":"DButton","functions":[{"accessModifier":"public","arguments":[],"description":"Gets the checked state of the checkbox.","examples":[],"isConstructor":false,"name":"GetChecked","realm":"client","returns":[{"description":"Whether the box is checked or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the state of the checkbox is being edited. This means whether the user is currently clicking (mouse-down) on the checkbox, and applies to both the left and right mouse buttons.","examples":[],"isConstructor":false,"name":"IsEditing","realm":"client","returns":[{"description":"Whether the checkbox is being clicked.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the CheckBox is checked or not.","isOptional":false,"isVarArg":false,"name":"bVal","type":"boolean"}],"description":"Called when the \"checked\" state is changed.","examples":[{"code":"function DCheckBox:OnChange(bVal)\n\tif (bVal) then\n\t\tprint(\"Checked!\")\n\telse\n\t\tprint(\"Unchecked!\")\n\tend\nend","description":"Creates a metamethod on the DCheckBox class to print any changes to the console."}],"isConstructor":false,"name":"OnChange","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the box should be checked or not.","isOptional":false,"isVarArg":false,"name":"checked","type":"boolean"}],"description":"Sets the checked state of the checkbox. Does not call the checkbox's {{ClassFunction|DCheckBox|OnChange}} and {{ClassFunction|Panel|ConVarChanged}} methods, unlike {{ClassFunction|DCheckBox|SetValue}}.","examples":[],"isConstructor":false,"name":"SetChecked","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the box should be checked or not.","isOptional":false,"isVarArg":false,"name":"checked","type":"boolean"}],"description":"Sets the checked state of the checkbox, and calls the checkbox's {{ClassFunction|DCheckBox|OnChange}} and {{ClassFunction|Panel|ConVarChanged}} methods.","examples":[],"isConstructor":false,"name":"SetValue","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Toggles the checked state of the checkbox, and calls the checkbox's {{ClassFunction|DCheckBox|OnChange}} and {{ClassFunction|Panel|ConVarChanged}} methods. This is called by {{ClassFunction|DCheckBox|DoClick}}.","examples":[],"isConstructor":false,"name":"Toggle","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Toggles the label's state. This can be set and retrieved with {{ClassFunction|DLabel|SetToggle}} and {{ClassFunction|DLabel|GetToggle}}.\n\nIn order to use toggle functionality, you must first call {{ClassFunction|DLabel|SetIsToggle}} with ''true'', as it is disabled by default.","examples":[],"isConstructor":false,"name":"Toggle","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DCheckBox"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"Retrieves the control panel for a given stool in the Q menu.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Clears ALL the control panels ( for tools )","examples":[],"isConstructor":false,"name":"Clear","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the panel.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Returns (or creates if not exists) a controlpanel.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"Get","realm":"client","returns":[{"description":"ControlPanel","type":"Panel"}]}],"isHook":false,"isPureAbstract":false,"name":"controlpanel"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"Used to store permanent variables/settings on clients that will persist between servers. They are stored in the cl.db SQLite database located in the root Garry's Mod folder.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The name of the cookie that you want to delete.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Deletes a cookie on the client.","examples":[],"isConstructor":false,"name":"Delete","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the cookie that you want to get.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"nil","description":"Value to return if the cookie does not exist.","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"any"}],"description":"Gets the value of a cookie on the client as a number.","examples":[],"isConstructor":false,"name":"GetNumber","realm":"shared and menu","returns":[{"description":"The cookie value","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the cookie that you want to get.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"nil","description":"Value to return if the cookie does not exist.","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"any"}],"description":"Gets the value of a cookie on the client as a string.","examples":[],"isConstructor":false,"name":"GetString","realm":"shared and menu","returns":[{"description":"The cookie value","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the cookie that you want to set.","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"","description":"Value to store in the cookie.","isOptional":false,"isVarArg":false,"name":"value","type":"string"}],"description":"Sets the value of a cookie, which is saved automatically by the {{Lib|sql}}.\n\nThese are stored in the *.db files - cl.db for clients, mn.db for menu state and sv.db for servers.\n[[Category:Menu]]","examples":[],"isConstructor":false,"name":"Set","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"cookie"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"The '''DCheckBoxLabel''' is a {{Type|DCheckBox}} with a {{Type|DLabel}} next to it. It allows you to get a boolean value from the user (true/false - yes/no)","examples":[{"code":"local DermaCheckbox = vgui.Create(\"DCheckBoxLabel\") // Create the checkbox\nDermaCheckbox:SetParent(DermaPanel)\nDermaCheckbox:SetPos(25, 50)                        // Set the position\nDermaCheckbox:SetText(\"God Mode\")                   // Set the text next to the box\nDermaCheckbox:SetConVar(\"sbox_godmode\")             // Change a ConVar when the box it ticked/unticked\nDermaCheckbox:SetValue(0)             // Initial value (will determine whether the box is ticked too)\nDermaCheckbox:SizeToContents()                      // Make its size the same as the contents","description":"Creates a DCheckBoxLabel, ties it to a convar, and sets its initial value."}],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[],"description":"Gets the checked state of the checkbox. This calls the checkbox's {{ClassFunction|DCheckBox|GetChecked}} function.","examples":[],"isConstructor":false,"name":"GetChecked","realm":"client","returns":[{"description":"Whether the box is checked or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Gets the indentation of the element on the X axis.","examples":[],"isConstructor":false,"name":"GetIndent","realm":"client","returns":[{"description":"How much the content is moved to the right in pixels","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the checkbox is checked or unchecked.","isOptional":false,"isVarArg":false,"name":"bVal","type":"boolean"}],"description":"Called when the \"checked\" state is changed.","examples":[{"code":"local Frame = vgui.Create( \"DFrame\" )\nFrame:SetSize( 300, 100 )\nFrame:SetPos( 200, 200 )\n\nlocal LabelBox = vgui.Create( \"DCheckBoxLabel\", Frame )\nLabelBox:SetPos( 10, 40 )\nLabelBox:SetText( \"This is a DLabel\" )\nfunction LabelBox:OnChange( val )\n\tif val then\n\t\tprint( \"The box has been ticked!\" )\n\telse\n\t\tprint( \"The box has been unticked!\" )\n\tend\nend","description":"Creates a a DCheckBoxLabel that prints to the console when ticked/unticked"}],"isConstructor":false,"name":"OnChange","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"true makes the text bright.","isOptional":false,"isVarArg":false,"name":"bright","type":"boolean"}],"description":"{{Deprecated|You really should be using {{ClassFunction|DCheckBoxLabel|SetTextColor}} instread}}\n\nSets the color of the {{Type|DCheckBoxLabel}}'s text to the bright text color defined in the skin.","examples":[],"isConstructor":false,"name":"SetBright","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the box should be checked or not.","isOptional":false,"isVarArg":false,"name":"checked","type":"boolean"}],"description":"Sets the checked state of the checkbox. Does not call {{ClassFunction|DCheckBoxLabel|OnChange}} or {{ClassFunction|Panel|ConVarChanged}}, unlike {{ClassFunction|DCheckBoxLabel|SetValue}}.","examples":[],"isConstructor":false,"name":"SetChecked","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the convar to set","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"Sets the console variable to be set when the checked state of the {{Type|DCheckBoxLabel}} changes.","examples":[],"isConstructor":false,"name":"SetConVar","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to be dark, false to be default","isOptional":false,"isVarArg":false,"name":"darkify","type":"boolean"}],"description":"{{Deprecated|You really should be using {{ClassFunction|DCheckBoxLabel|SetTextColor}} instread}}\n\nSets the text of the {{Type|DCheckBoxLabel}} to be dark colored.","examples":[],"isConstructor":false,"name":"SetDark","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Font name","isOptional":false,"isVarArg":false,"name":"font","type":"string"}],"description":"Sets the font of the text part of the {{Type|DCheckBoxLabel}}.","examples":[],"isConstructor":false,"name":"SetFont","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"How much in pixels to move the content to the right","isOptional":false,"isVarArg":false,"name":"ident","type":"number"}],"description":"Sets the indentation of the element on the X axis.","examples":[],"isConstructor":false,"name":"SetIndent","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text color. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Sets the text color for the {{Type|DCheckBoxLabel}}.","examples":[{"code":"local LabelBox = vgui.Create( \"DCheckBoxLabel\" )\nLabelBox:SetTextColor( Color(255,0,0) )","description":"Creates a DCheckBoxLabel and changes the text color to red."}],"isConstructor":false,"name":"SetTextColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the box should be checked or not.","isOptional":false,"isVarArg":false,"name":"checked","type":"boolean"}],"description":"Sets the checked state of the checkbox, and calls {{ClassFunction|DCheckBoxLabel|OnChange}} and the checkbox's {{ClassFunction|Panel|ConVarChanged}} methods.","examples":[],"isConstructor":false,"name":"SetValue","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Toggles the checked state of the {{Type|DCheckBoxLabel}}.","examples":[],"isConstructor":false,"name":"Toggle","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The console variable to check.","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"{{Warning|This function does not exist on all panels}}\n\nSets this panel's convar. When the convar changes this panel will update automatically.\n\nFor developer implementation, see {{GlobalFunction|Derma_Install_Convar_Functions}}.","examples":[{"code":"local checkbox = vgui.Create( \"DCheckBoxLabel\", myFrame )\ncheckbox:SetConVar( \"sv_cheats\" )\ncheckbox:SetText( \"Enable cheats?\" )\ncheckbox:SetPos( 5, 25 )\ncheckbox:SizeToContents()","description":"Makes a checkbox linked to the '''sv_cheats''' convar."}],"isConstructor":false,"name":"SetConVar","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DCheckBoxLabel"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"Coroutines are similar to threads, however they do not run simultaneously. They offer a way to split up tasks and dynamically pause & resume functions.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The function for the coroutine to use","isOptional":false,"isVarArg":false,"name":"func","type":"Function"}],"description":"Creates a coroutine of the given function.","examples":[{"code":"do\n\tlocal function displayer()\n\t\tlocal players\n\t\twhile true do -- endless loop: you must guarantee that coroutine.yield() is always called!\n\t\t\tplayers = player.GetAll()\n\t\t\tif not next( players ) then -- empty table\n\t\t\t\tcoroutine.yield() -- guarantee a pause in coroutine even with an empty table\n\t\t\telse\n\t\t\t\tfor _, ply in pairs( players ) do\n\t\t\t\t\tcoroutine.yield() -- We yield here so what you may do next will start immediatly when this for loop finishes.\n\t\t\t\t\tif IsValid( ply ) then -- The player ply may be disconnected now!\n\t\t\t\t\t\tprint( ply:Nick(), \"is located at\", ply:GetPos() )\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal co\n\thook.Add( \"Think\", \"DisplayPlayersLocation\", function()\n\t\tif not co or not coroutine.resume( co ) then\n\t\t\tco = coroutine.create( displayer )\n\t\t\tcoroutine.resume( co )\n\t\tend\n\tend )\nend","description":"Display the location of each player in an endless loop, but only one player per frame."}],"isConstructor":false,"name":"create","realm":"shared and menu","returns":[{"description":"coroutine","type":"thread"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Coroutine to resume.","isOptional":false,"isVarArg":false,"name":"coroutine","type":"thread"},{"default":"","description":"Arguments to be returned by {{LibraryFunction|coroutine|yield}}.","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Resumes the given coroutine and passes the given vararg to either the function arguments or the {{LibraryFunction|coroutine|yield}} that is inside that function and returns whatever yield is called with the next time or by the final return in the function.","examples":[],"isConstructor":false,"name":"resume","realm":"shared and menu","returns":[{"description":"If the executed thread code had no errors occur within it.","type":"boolean"},{"description":"If an error occured, this will be a string containing the error message. Otherwise, this will be arguments that were yielded.","type":"any"}]},{"accessModifier":"public","arguments":[],"description":"Returns the active coroutine or nil if we are not within a coroutine.","examples":[],"isConstructor":false,"name":"running","realm":"shared and menu","returns":[{"description":"coroutine","type":"thread"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Coroutine to check the status of.","isOptional":false,"isVarArg":false,"name":"coroutine","type":"thread"}],"description":"Returns the status of the coroutine passed to it, the possible statuses are \"suspended\", \"running\", and \"dead\".","examples":[],"isConstructor":false,"name":"status","realm":"shared and menu","returns":[{"description":"status","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The number of seconds to wait","isOptional":false,"isVarArg":false,"name":"duration","type":"number"}],"description":"Yields the coroutine for the given duration before continuing.\n\nThis only works inside a coroutine.\n\nThis function uses {{GlobalFunction|CurTime}} instead of {{GlobalFunction|RealTime}}.","examples":[],"isConstructor":false,"name":"wait","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Coroutine to resume.","isOptional":false,"isVarArg":false,"name":"coroutine","type":"Function"}],"description":"Returns a function which calling is equivalent with calling {{LibraryFunction|coroutine|resume}} with the coroutine and all extra parameters.","examples":[],"isConstructor":false,"name":"wrap","realm":"shared and menu","returns":[{"description":"func","type":"Function"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Arguments to be returned by the last call of {{LibraryFunction|coroutine|resume}}","isOptional":false,"isVarArg":true,"name":"returnValue","type":"any"}],"description":"Pauses the active coroutine and passes all additional variables to the call of {{LibraryFunction|coroutine|resume}} that resumed the coroutine last time, and returns all additional variables that were passed to the previous call of resume.","examples":[{"code":"local co = coroutine.create( function()\n\tcoroutine.yield( \"Hello world!\" )\nend )\nprint( coroutine.resume( co ) )","description":"Demonstrates the use of using varargs as a return value."}],"isConstructor":false,"name":"yield","realm":"shared and menu","returns":[{"description":"Arguments that were set previously by {{LibraryFunction|coroutine|resume}}","type":"any"}]}],"isHook":false,"isPureAbstract":false,"name":"coroutine"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The cvars library allows you to control what happens when a cvar (console variable) is changed.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The name of the convar to add the change callback to.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The function to be called when the convar changes. The arguments passed are:\n* {{FuncArg|string|convar|The name of the convar.}}\n* {{FuncArg|string|oldValue|The old value of the convar.}}\n* {{FuncArg|string|newValue|The new value of the convar.}}","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"},{"default":"nil","description":"If set, you will be able to remove the callback using {{LibraryFunction|cvars|RemoveChangeCallback}}.","isOptional":true,"isVarArg":false,"name":"identifier","type":"string"}],"description":"Adds a callback to be called when the named convar changes.\n\n{{Bug|Issue=1440|This does not callback convars in the menu state.}}\n\n{{Bug|Issue=3503|This does not callback convars on the client with FCVAR_GAMEDLL and convars on the server without FCVAR_GAMEDLL.}}","examples":[{"code":"cvars.AddChangeCallback(\"convar name\", function(convar_name, value_old, value_new)\n    print(convar_name, value_old, value_new)\nend)","description":"Called when convar changes."}],"isConstructor":false,"name":"AddChangeCallback","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of console variable","isOptional":false,"isVarArg":false,"name":"cvar","type":"string"},{"default":"false","description":"The value to return if the console variable does not exist","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"boolean"}],"description":"Retrieves console variable as a boolean.","examples":[],"isConstructor":false,"name":"Bool","realm":"shared and menu","returns":[{"description":"Retrieved value","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the {{Type|ConVar}}.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"false","description":"Whether or not to create the internal callback table for given {{Type|ConVar}} if there isn't one yet.<br/>\nThis argument is internal and should not be used.","isOptional":true,"isVarArg":false,"name":"createIfNotFound","type":"ConVar"}],"description":"Returns a table of the given {{Type|ConVar}}s callbacks.","examples":[],"isConstructor":false,"name":"GetConVarCallbacks","realm":"shared and menu","returns":[{"description":"A table of the convar's callbacks, or nil if the convar doesn't exist.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of console variable","isOptional":false,"isVarArg":false,"name":"cvar","type":"string"},{"default":"nil","description":"The value to return if the console variable does not exist","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"any"}],"description":"Retrieves console variable as a number.","examples":[],"isConstructor":false,"name":"Number","realm":"shared and menu","returns":[{"description":"Retrieved value","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Convar name","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The old value of the convar","isOptional":false,"isVarArg":false,"name":"oldVal","type":"string"},{"default":"","description":"The new value of the convar","isOptional":false,"isVarArg":false,"name":"newVal","type":"string"}],"description":"{{Internal|You are probably looking for {{LibraryFunction|cvars|AddChangeCallback}}.}}\n\nCalled by the engine when a convar value changes.","examples":[],"isConstructor":false,"name":"OnConVarChanged","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the convar to remove the callback from.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The callback's identifier.","isOptional":false,"isVarArg":false,"name":"indentifier","type":"string"}],"description":"Removes a callback for a convar using the the callback's identifier. The identifier should be the third argument specified for {{LibraryFunction|cvars|AddChangeCallback}}.","examples":[],"isConstructor":false,"name":"RemoveChangeCallback","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of console variable","isOptional":false,"isVarArg":false,"name":"cvar","type":"string"},{"default":"nil","description":"The value to return if the console variable does not exist","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"any"}],"description":"Retrieves console variable as a string.","examples":[],"isConstructor":false,"name":"String","realm":"shared and menu","returns":[{"description":"Retrieved value","type":"string"}]}],"isHook":false,"isPureAbstract":false,"name":"cvars"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"List of all possible functions available for Lua particles. This is the object returned by the {{ClassFunction|CLuaEmitter|Add}} function.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the air resistance of the particle.","examples":[],"isConstructor":false,"name":"GetAirResistance","realm":"client","returns":[{"description":"The air resistance of the particle","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current orientation of the particle.","examples":[],"isConstructor":false,"name":"GetAngles","realm":"client","returns":[{"description":"The angles of the particle","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Returns the angular velocity of the particle","examples":[],"isConstructor":false,"name":"GetAngleVelocity","realm":"client","returns":[{"description":"The angular velocity of the particle","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Returns the 'bounciness' of the particle.","examples":[],"isConstructor":false,"name":"GetBounce","realm":"client","returns":[{"description":"The 'bounciness' of the particle\n\n2 means it will gain 100% of its previous velocity,<br/>\n1 means it will not lose velocity,<br/>\n0.5 means it will lose half of its velocity with each bounce.<br/>\n<br/>","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the color of the particle.","examples":[],"isConstructor":false,"name":"GetColor","realm":"client","returns":[{"description":"Red part of the color","type":"number"},{"description":"Green part of the color","type":"number"},{"description":"Blue part of the color","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of time in seconds after which the particle will be destroyed.","examples":[],"isConstructor":false,"name":"GetDieTime","realm":"client","returns":[{"description":"The amount of time in seconds after which the particle will be destroyed","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the alpha value that the particle will reach on its death.","examples":[],"isConstructor":false,"name":"GetEndAlpha","realm":"client","returns":[{"description":"The alpha value the particle will fade to","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the length that the particle will reach on its death.","examples":[],"isConstructor":false,"name":"GetEndLength","realm":"client","returns":[{"description":"The length the particle will reach","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the size that the particle will reach on its death.","examples":[],"isConstructor":false,"name":"GetEndSize","realm":"client","returns":[{"description":"The size the particle will reach","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the gravity of the particle.","examples":[],"isConstructor":false,"name":"GetGravity","realm":"client","returns":[{"description":"The gravity of the particle.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the 'life time' of the particle, how long the particle existed since its creation.\n\nThis value will always be between 0 and {{ClassFunction|CLuaParticle|GetDieTime}}.<br/>\nIt changes automatically as time goes.\n\nIt can be manipulated using {{ClassFunction|CLuaParticle|SetLifeTime}}.<br/>\nIf the life time of the particle will be more than {{ClassFunction|CLuaParticle|GetDieTime}}, it will be removed.","examples":[],"isConstructor":false,"name":"GetLifeTime","realm":"client","returns":[{"description":"How long the particle existed, in seconds.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the absolute position of the particle.","examples":[],"isConstructor":false,"name":"GetPos","realm":"client","returns":[{"description":"The absolute position of the particle.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current rotation of the particle in radians, this should only be used for 2D particles.","examples":[],"isConstructor":false,"name":"GetRoll","realm":"client","returns":[{"description":"The current rotation of the particle in radians","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current rotation speed of the particle in radians, this should only be used for 2D particles.","examples":[],"isConstructor":false,"name":"GetRollDelta","realm":"client","returns":[{"description":"The current rotation speed of the particle in radians","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the alpha value which the particle has when it's created.","examples":[],"isConstructor":false,"name":"GetStartAlpha","realm":"client","returns":[{"description":"The alpha value which the particle has when it's created.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the length which the particle has when it's created.","examples":[],"isConstructor":false,"name":"GetStartLength","realm":"client","returns":[{"description":"The length which the particle has when it's created.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the size which the particle has when it's created.","examples":[],"isConstructor":false,"name":"GetStartSize","realm":"client","returns":[{"description":"The size which the particle has when it's created.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current velocity of the particle.","examples":[],"isConstructor":false,"name":"GetVelocity","realm":"client","returns":[{"description":"The current velocity of the particle.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"New air resistance.","isOptional":false,"isVarArg":false,"name":"airResistance","type":"number"}],"description":"Sets the air resistance of the the particle.","examples":[],"isConstructor":false,"name":"SetAirResistance","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New angle.","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"Sets the angles of the particle.","examples":[],"isConstructor":false,"name":"SetAngles","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New angular velocity.","isOptional":false,"isVarArg":false,"name":"angVel","type":"Angle"}],"description":"Sets the angular velocity of the the particle.","examples":[],"isConstructor":false,"name":"SetAngleVelocity","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New 'bounciness' of the particle\n\n2 means it will gain 100% of its previous velocity,<br/>\n1 means it will not lose velocity,<br/>\n0.5 means it will lose half of its velocity with each bounce.<br/>\n<br/>","isOptional":false,"isVarArg":false,"name":"bounce","type":"number"}],"description":"Sets the 'bounciness' of the the particle.","examples":[],"isConstructor":false,"name":"SetBounce","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the particle should collide with the world or not","isOptional":false,"isVarArg":false,"name":"shouldCollide","type":"boolean"}],"description":"Sets the whether the particle should collide with the world or not.","examples":[],"isConstructor":false,"name":"SetCollide","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Collide callback, the arguments are:<br/><br/>\n{{FuncArg|CLuaParticle|particle|The particle itself}}<br/>{{FuncArg|Vector|hitPos|Position of the collision}}<br/>{{FuncArg|Vector|hitNormal|Direction of the collision, perpendicular to the hit surface}}","isOptional":false,"isVarArg":false,"name":"collideFunc","type":"Function"}],"description":"Sets the function that gets called whenever the particle collides with the world.","examples":[{"code":"MyParticle:SetCollideCallback( function( part, hitpos, hitnormal ) --This is an in-line function\n    local efdata = EffectData() --Grab base EffectData table\n    efdata:SetOrigin( hitpos ) --Sets the origin of it to the hitpos of the particle\n    util.Effect( \"Explosion\", efdata ) --Create the effect\nend )","description":"Creates an explosion every time an particle collides with something."}],"isConstructor":false,"name":"SetCollideCallback","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The red component.","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"The green component.","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"The blue component.","isOptional":false,"isVarArg":false,"name":"b","type":"number"}],"description":"Sets the color of the particle.","examples":[],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new die time.","isOptional":false,"isVarArg":false,"name":"dieTime","type":"number"}],"description":"Sets the time where the particle will be removed.","examples":[],"isConstructor":false,"name":"SetDieTime","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new alpha value of the particle that it will reach when it dies.","isOptional":false,"isVarArg":false,"name":"endAlpha","type":"number"}],"description":"Sets the alpha value of the particle that it will reach when it dies.","examples":[],"isConstructor":false,"name":"SetEndAlpha","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new length of the particle that it will reach when it dies.","isOptional":false,"isVarArg":false,"name":"endLength","type":"number"}],"description":"Sets the length of the particle that it will reach when it dies.","examples":[],"isConstructor":false,"name":"SetEndLength","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new size of the particle that it will reach when it dies.","isOptional":false,"isVarArg":false,"name":"endSize","type":"number"}],"description":"Sets the size of the particle that it will reach when it dies.","examples":[],"isConstructor":false,"name":"SetEndSize","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The directional gravity.","isOptional":false,"isVarArg":false,"name":"gravity","type":"Vector"}],"description":"Sets the directional gravity aka. acceleration of the particle.","examples":[],"isConstructor":false,"name":"SetGravity","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new life time of the particle.","isOptional":false,"isVarArg":false,"name":"lifeTime","type":"number"}],"description":"Sets the 'life time' of the particle, how long the particle existed since its creation.\n\nThis value should always be between 0 and {{ClassFunction|CLuaParticle|GetDieTime}}.<br/>\nIt changes automatically as time goes.<br/>\nIf the life time of the particle will be more than {{ClassFunction|CLuaParticle|GetDieTime}}, it will be removed.","examples":[],"isConstructor":false,"name":"SetLifeTime","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the particle should be lighted.","isOptional":false,"isVarArg":false,"name":"useLighting","type":"boolean"}],"description":"Sets whether the particle should be lighted.","examples":[],"isConstructor":false,"name":"SetLighting","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Next think time.","isOptional":false,"isVarArg":false,"name":"nextThink","type":"number"}],"description":"Sets when the particles think function should be called next, this uses the synchronized server time returned by {{GlobalFunction|CurTime}}.","examples":[],"isConstructor":false,"name":"SetNextThink","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new particle position.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Sets the absolute position of the particle.","examples":[],"isConstructor":false,"name":"SetPos","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new rotation of the particle in radians.","isOptional":false,"isVarArg":false,"name":"roll","type":"number"}],"description":"Sets the roll of the particle in radians. This should only be used for 2D particles.","examples":[],"isConstructor":false,"name":"SetRoll","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new rotation speed of the particle in radians.","isOptional":false,"isVarArg":false,"name":"rollDelta","type":"number"}],"description":"Sets the rotation speed of the particle in radians. This should only be used for 2D particles.","examples":[],"isConstructor":false,"name":"SetRollDelta","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Initial alpha.","isOptional":false,"isVarArg":false,"name":"startAlpha","type":"number"}],"description":"Sets the initial alpha value of the particle.","examples":[],"isConstructor":false,"name":"SetStartAlpha","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Initial length.","isOptional":false,"isVarArg":false,"name":"startLength","type":"number"}],"description":"Sets the initial length value of the particle.","examples":[],"isConstructor":false,"name":"SetStartLength","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Initial size.","isOptional":false,"isVarArg":false,"name":"startSize","type":"number"}],"description":"Sets the initial size value of the particle.","examples":[],"isConstructor":false,"name":"SetStartSize","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Think function. It has only one argument:<br/>\n{{FuncArg|CLuaParticle|particle|The particle the think hook is set on}}","isOptional":false,"isVarArg":false,"name":"thinkFunc","type":"Function"}],"description":"Sets the think function of the particle.","examples":[{"code":"p:SetNextThink( 1e99 ) -- Makes sure the think hook is used on all particles of the particle emitter\np:SetThinkFunction( function( pa )\n\tpa:SetColor( math.random( 0, 255 ), math.random( 0, 255 ), math.random( 0, 255 ) ) -- Randomize it\n\tpa:SetNextThink( 1e99 ) -- Makes sure the think hook is actually ran.\nend )","description":"Example on how to use a think function, randomizes the colors of a particle"}],"isConstructor":false,"name":"SetThinkFunction","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new velocity of the particle.","isOptional":false,"isVarArg":false,"name":"vel","type":"Vector"}],"description":"Sets the velocity of the particle.","examples":[],"isConstructor":false,"name":"SetVelocity","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"Use velocity scaling.","isOptional":true,"isVarArg":false,"name":"doScale","type":"boolean"}],"description":"Scales the velocity based on the particle speed.","examples":[],"isConstructor":false,"name":"SetVelocityScale","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"CLuaParticle"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"The collapsible category allows you to create numerous sections of controls, and have the ability to contract/expand them.\n\nConsider using {{Type|DCategoryList}} if you plan on using more than 1 of these.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 300, 300 )\nframe:Center()\nframe:MakePopup()\n\nlocal DCollapsible = vgui.Create( \"DCollapsibleCategory\", frame )    // Create a collapsible category\nDCollapsible:SetPos( 25, 50 )                                             // Set position\nDCollapsible:SetSize( 250, 100 )                                          // Set size\nDCollapsible:SetExpanded( 0 )                                             // Is it expanded when you open the panel?\nDCollapsible:SetLabel( \"Collapsible Category\" )                           // Set the name ( label )\n   \nlocal DermaList = vgui.Create( \"DPanelList\", DermaPanel )   // Make a list of items to add to our category ( collection of controls )\nDermaList:SetSpacing( 5 )                             // Set the spacing between items\nDermaList:EnableHorizontal( false )                   // Only vertical items\nDermaList:EnableVerticalScrollbar( true )             // Enable the scrollbar if ( the contents are too wide\nDCollapsible:SetContents(DermaList)                   // Add DPanelList to our Collapsible Category\n   \nlocal CategoryContentOne = vgui.Create( \"DCheckBoxLabel\" )    // This section creates a checkbox and\nCategoryContentOne:SetText( \"God mode\" )                      // sets up its settings\nCategoryContentOne:SetConVar( \"sbox_godmode\" )\nCategoryContentOne:SetValue( 0 )\nCategoryContentOne:SizeToContents()\nDermaList:AddItem( CategoryContentOne )                       // Add the checkbox to the category\n   \nlocal CategoryContentTwo = vgui.Create( \"DLabel\" )            // Make some more content\nCategoryContentTwo:SetText( \"Hello\" )\nDermaList:AddItem( CategoryContentTwo )                       // Add it to the categoryDCollapsible:SetContents( DermaList )   // Set the contents of the category to the list","description":"Creates a DCollapsibleCategory panel."}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The name of the button","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Adds a new text button to the collapsible category, like the tool menu in Spawnmenu.","examples":[],"isConstructor":false,"name":"Add","realm":"client","returns":[{"description":"The {{Type|DButton}}","type":"DButton"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"anim","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"delta","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"data","type":"table"}],"description":"{{Internal}}\n\nInternal function that handles the open/close animations.","examples":[],"isConstructor":false,"name":"AnimSlide","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to open, false to collapse","isOptional":false,"isVarArg":false,"name":"expand","type":"boolean"}],"description":"Forces the category to open or collapse","examples":[],"isConstructor":false,"name":"DoExpansion","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the expand/collapse animation time set by {{ClassFunction|DCollapsibleCategory|SetAnimTime}}.","examples":[],"isConstructor":false,"name":"GetAnimTime","realm":"client","returns":[{"description":"The animation time in seconds","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the DCollapsibleCategory is expanded or not.","examples":[],"isConstructor":false,"name":"GetExpanded","realm":"client","returns":[{"description":"If expanded it will return true.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetList","realm":"client","returns":[{"description":"","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Doesn't actually do anything.\n\nReturns the number set by {{ClassFunction|DCollapsibleCategory|SetPadding}}.","examples":[],"isConstructor":false,"name":"GetPadding","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the background should be painted.","examples":[],"isConstructor":false,"name":"GetPaintBackground","realm":"client","returns":[{"description":"If the background is painted or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetStartHeight","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Called by {{ClassFunction|DCollapsibleCategory|Toggle}}.","examples":[],"isConstructor":false,"name":"OnToggle","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The time in seconds it takes to expand","isOptional":false,"isVarArg":false,"name":"time","type":"number"}],"description":"Sets the time in seconds it takes to expand the DCollapsibleCategory","examples":[],"isConstructor":false,"name":"SetAnimTime","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel, containing the contents for the DCollapsibleCategory, mostly an DScrollPanel","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"Sets the contents of the DCollapsibleCategory.","examples":[],"isConstructor":false,"name":"SetContents","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"true","description":"Whether it shall be expanded or not by default","isOptional":true,"isVarArg":false,"name":"expanded","type":"boolean"}],"description":"Sets whether the {{Type|DCollapsibleCategory}} is expanded or not upon opening the container.\n\nYou should use {{ClassFunction|DCollapsibleCategory|Toggle}} or {{ClassFunction|DCollapsibleCategory|DoExpansion}} instead.","examples":[],"isConstructor":false,"name":"SetExpanded","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The label/name of the DCollapsibleCategory.","isOptional":false,"isVarArg":false,"name":"label","type":"string"}],"description":"Sets the name of the DCollapsibleCategory.","examples":[],"isConstructor":false,"name":"SetLabel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"","examples":[],"isConstructor":false,"name":"SetList","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"padding","type":"number"}],"description":"Doesn't actually do anything.","examples":[],"isConstructor":false,"name":"SetPadding","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"paint","type":"boolean"}],"description":"Sets whether or not the background should be painted.","examples":[],"isConstructor":false,"name":"SetPaintBackground","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"","examples":[],"isConstructor":false,"name":"SetStartHeight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Toggles the expanded state of the {{Type|DCollapsibleCategory}}.","examples":[],"isConstructor":false,"name":"Toggle","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"UnselectAll","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nUsed internally to update the \"AltLine\" property on all \"child\" panels.","examples":[],"isConstructor":false,"name":"UpdateAltLines","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to be added (parented). Can also be:\n* {{FuncArg|string|Class Name|creates panel with the specified name and adds it to the panel.}}\n* {{FuncArg|table|PANEL table|creates a panel from table and adds it to the panel.}}","isOptional":false,"isVarArg":false,"name":"object","type":"Panel"}],"description":"Adds the specified object to the panel.","examples":[],"isConstructor":false,"name":"Add","realm":"client","returns":[{"description":"New panel","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Recursively deselects this panel object and all of its children. This will cascade to all child objects at every level below the parent.","examples":[],"isConstructor":false,"name":"UnselectAll","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DCollapsibleCategory"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The debug library is intended to help you debug your scripts, however it also has several other powerful uses.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Enters an interactive mode with the user, running each string that the user enters. Using simple commands and other debug facilities, the user can inspect global and local variables, change their values, evaluate expressions, and so on. A line containing only the word cont finishes this function, so that the caller continues its execution.\n\n* Commands for debug.debug are not lexically nested within any function, and so have no direct access to local variables.\n* This only works on the source dedicated server.\n* To exit this interactive mode, you can press Ctrl + Z then Enter OR type the word 'cont' on a single line and press enter.","examples":[],"isConstructor":false,"name":"debug","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Object to get environment of","isOptional":false,"isVarArg":false,"name":"object","type":"table"}],"description":"Returns the environment of the passed object. This can be set with {{LibraryFunction|debug|setfenv}}","examples":[],"isConstructor":false,"name":"getfenv","realm":"shared and menu","returns":[{"description":"Environment","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"nil","description":"Which thread to retrieve its hook from","isOptional":true,"isVarArg":false,"name":"thread","type":"thread"}],"description":"Returns the current hook settings of the passed thread. The thread argument can be omitted. This is unrelated to [[:Category:GM Hooks|gamemode hooks]]. More information on hooks can be found at http://www.lua.org/pil/23.2.html","examples":[],"isConstructor":false,"name":"gethook","realm":"shared and menu","returns":[{"description":"Hook function","type":"Function"},{"description":"Hook mask","type":"string"},{"description":"Hook count","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Takes either a function or a number representing the stack level as an argument. Stack level 0 always corresponds to the debug.getinfo call, 1 would be the function calling debug.getinfo, and so on.\n\nReturns useful information about that function in a table.","isOptional":false,"isVarArg":false,"name":"funcOrStackLevel","type":"Function"},{"default":"\"flnSu\"","description":"A string whose characters specify the information to be retrieved.\n\n* f - Populates the func field.\n* l - Populates the currentline field.\n* L - Populates the activelines field.\n* n - Populates the name and namewhat fields - only works if stack level is passed rather than function pointer.\n* S - Populates the location fields (lastlinedefined, linedefined, short_src, source and what).\n* u - Populates the argument and upvalue fields (isvararg, nparams, nups)","isOptional":true,"isVarArg":false,"name":"fields","type":"string"}],"description":"Returns debug information about a function.","examples":[{"code":"PrintTable( debug.getinfo( net.Receive ) )","description":"Let's find out information about net.Receive, such as which file it's defined in, the line it starts and the line it ends, and if it's defined in Lua, or C plus additional information."}],"isConstructor":false,"name":"getinfo","realm":"shared and menu","returns":[{"description":"A table as a {{Struct|DebugInfo}} containing information about the function you passed. Can return nil if the stack level didn't point to a valid stack frame.","type":"DebugInfo"}]},{"accessModifier":"public","arguments":[{"default":"Current thread","description":"The thread","isOptional":true,"isVarArg":false,"name":"thread","type":"thread"},{"default":"","description":"The level above the thread. \n0 = the function that was called (most always this function)'s arguments\n\n1 = the thread that had called this function.\n\n2 = the thread that had called the function that started the thread that called this function.\n\nA function defined in Lua can also be passed as the level. The index will specify the parameter's name to be returned (a parameter will have a value of nil).","isOptional":true,"isVarArg":false,"name":"level","type":"number"},{"default":"","description":"The variable's index you want to get.\n\n1 = the first local defined in the thread\n\n2 = the second local defined in the thread\n\netc...","isOptional":true,"isVarArg":false,"name":"index","type":"number"}],"description":"Gets the name and value of a local variable indexed from the level","examples":[{"code":"local name, value;\nlocal NIL = {} -- to represent nil variables\nlocal locals = {}\nlocal i = 1\nwhile( true ) do\n    name, value = debug.getlocal( 1, i )\n    if ( name == nil ) then break end\n    locals[ name ] = value == nil and NIL or value\n\ti = i + 1\nend\n\nfor k,v in pairs( locals ) do \n\tprint( k, v )\nend","description":"Gets all the local variables of the current thread and stores them in a table."},{"code":"local print = print\nlocal getlocal = debug.getlocal\n\nlocal function PrintFunctionParameters(func)\n\tlocal k = 2\n\tlocal param = getlocal(func, 1)\n\twhile param ~= nil do\n\t\tprint(param)\n\t\tparam = getlocal(func, k)\n\t\tk = k + 1\n\tend\nend\n\nPrintFunctionParameters(hook.Add)","description":"Prints the parameter names for {{LibraryFunction|hook|Add}}"}],"isConstructor":false,"name":"getlocal","realm":"shared and menu","returns":[{"description":"The name of the variable\n\nSometimes this will be \"(*temporary)\" if the local variable had no name. \n\n{{Note|Variables with names starting with '''(''' are '''internal variables'''.}}","type":"string"},{"description":"The value of the local variable.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The object to retrieve the metatable from.","isOptional":false,"isVarArg":false,"name":"object","type":"any"}],"description":"Returns the metatable of an object. This function ignores the metatable's __metatable field.","examples":[],"isConstructor":false,"name":"getmetatable","realm":"shared and menu","returns":[{"description":"The metatable of the given object.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the internal Lua registry table.\n\nThe Lua registry is used by the engine and binary modules to create references to Lua values. Avoid creating entries into the registry with a number as the key, as they are reserved for the reference system.\n\n{{Warning|Improper editing of the registry can result in unintended side effects, including crashing of the game.}}","examples":[],"isConstructor":false,"name":"getregistry","realm":"shared and menu","returns":[{"description":"The Lua registry","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Function to get the upvalue indexed from.","isOptional":false,"isVarArg":false,"name":"func","type":"Function"},{"default":"","description":"The index in the upvalue array. The max number of entries can be found in {{LibraryFunction|debug|getinfo}}'s \"[[Structures/DebugInfo|nups]]\" key.","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"Used for getting variable values in an index from the passed function. This does nothing for C functions.","examples":[{"code":"local foo = 5\nlocal bar = \"hello\"\nlocal test = { \"table\", true, \"variable\" }\n\nlocal function DoSomethingWithFoo()\n\t-- This code won't be run but the function\n\t-- has to reference the variable for\n\t-- it to be counted as an upvalue\n\tfoo = foo + 1\nend\n\nlocal function DoSomethingWithFooAndBar()\n\tfoo = foo / 2\n\tbar = bar .. \" world\"\nend\n\nlocal function DoSomethingWithBarAndTest()\n\ttest[1] = bar .. \"reader!\"\nend\n\n\n-- level = stack level to get local variables of\n-- returns a table with {{Type|string}} keys representing the variable name\nlocal function GetUpvalues( func )\n\tlocal info = debug.getinfo( func, \"uS\" )\n\tlocal variables = {}\n\n\t-- Upvalues can't be retrieved from C functions\n\tif ( info != nil && info.what == \"Lua\" ) then\n\t\tlocal upvalues = info.nups\n\n\t\tfor i = 1, upvalues do\n\t\t\tlocal key, value = debug.getupvalue( func, i )\n\t\t\tvariables[ key ] = value\n\t\tend\n\tend\n\n\treturn variables\nend\n\nprint( \"DoSomethingWithFoo:\" )\nPrintTable( GetUpvalues( DoSomethingWithFoo ) )\n\nprint( \"\\nDoSomethingWithFooAndBar:\" )\nPrintTable( GetUpvalues( DoSomethingWithFooAndBar ) )\n\nprint( \"\\nDoSomethingWithBarAndTest:\" )\nPrintTable( GetUpvalues( DoSomethingWithBarAndTest ) )","description":"Prints the upvalues of some local functions."}],"isConstructor":false,"name":"getupvalue","realm":"shared and menu","returns":[{"description":"Name of the upvalue. Will be nil if the index was out of range (< 1 or > {{LibraryFunction|debug|getinfo}}.nups), or the function was defined in C.","type":"string"},{"description":"Value of the upvalue.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Object to set environment of","isOptional":false,"isVarArg":false,"name":"object","type":"table"},{"default":"","description":"Environment to set","isOptional":false,"isVarArg":false,"name":"env","type":"table"}],"description":"Sets the environment of the passed object.","examples":[],"isConstructor":false,"name":"setfenv","realm":"shared and menu","returns":[{"description":"The object","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Thread to set the hook on. This argument can be omited","isOptional":false,"isVarArg":false,"name":"thread","type":"thread"},{"default":"","description":"Function for the hook to call","isOptional":false,"isVarArg":false,"name":"hook","type":"Function"},{"default":"","description":"The hook's mask","isOptional":false,"isVarArg":false,"name":"mask","type":"string"},{"default":"","description":"How often to call the hook (in instructions). 0 for every instruction","isOptional":false,"isVarArg":false,"name":"count","type":"number"}],"description":"Sets the given function as a Lua hook. This is completely different to gamemode hooks. The thread argument can be completely omitted and calling this function with no arguments will remove the current hook. This is used by default for infinite loop detection. More information on hooks can be found at http://www.lua.org/pil/23.2.html\n\nHooks are not always ran when code that has been compiled by LuaJIT's JIT compiler is being executed. This means that relying on them for infinite loop protection is unwise.","examples":[],"isConstructor":false,"name":"sethook","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"Current Thread","description":"The thread","isOptional":true,"isVarArg":false,"name":"thread","type":"thread"},{"default":"","description":"The level above the thread. \n0 is the function that was called (most always this function)'s arguments\n\n1 is the thread that had called this function.\n\n2 is the thread that had called the function that started the thread that called this function.","isOptional":true,"isVarArg":false,"name":"level","type":"number"},{"default":"","description":"The variable's index you want to get.\n\n1 = the first local defined in the thread\n\n2 = the second local defined in the thread","isOptional":true,"isVarArg":false,"name":"index","type":"number"},{"default":"nil","description":"The value to set the local to","isOptional":true,"isVarArg":false,"name":"value","type":"any"}],"description":"{{Delete|This function was removed due to security concerns.}}\n\nSets a local variable's value.","examples":[{"code":"local var1 = \"Luke, I am not your father.\"\nlocal var2 = \"PMFPMF\"\n\n(function()\n\tprint(\"Getting the locals now!\")\n\tPrintTable({debug.getlocal(2, 1)})\n\tPrintTable({debug.getlocal(2, 2)})\n\n\tprint(\"\\nSetting the locals now!\")\n\tprint(debug.setlocal(2, 1, \"I'm actually your mother.\"))\n\tprint(debug.setlocal(2, 2, \"Chemo-chi\"))\n\tprint(debug.setlocal(2, 3, \"nil should be returned here!\"))\n\n\tprint(\"\\nHere are the locals after being set!\")\n\tPrintTable({debug.getlocal(2, 1)})\n\tPrintTable({debug.getlocal(2, 2)})\nend)()","description":"Prints the local variables, sets them, then prints the variables again."}],"isConstructor":false,"name":"setlocal","realm":"shared and menu","returns":[{"description":"The name of the local variable if the local at the index exists, otherwise nil is returned.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Object to set the metatable for.","isOptional":false,"isVarArg":false,"name":"object","type":"any"},{"default":"","description":"The metatable to set for the object.\nIf this argument is nil, then the object's metatable is removed.","isOptional":false,"isVarArg":false,"name":"metatable","type":"table"}],"description":"Sets the object's metatable. Unlike {{GlobalFunction|setmetatable}}, this function works regardless of whether the first object passed is a valid table or not; this function even works on primitive datatypes such as numbers, functions, and even nil.","examples":[],"isConstructor":false,"name":"setmetatable","realm":"shared and menu","returns":[{"description":"true if the object's metatable was set successfully.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The function to index the upvalue from","isOptional":false,"isVarArg":false,"name":"func","type":"Function"},{"default":"","description":"The index from func","isOptional":false,"isVarArg":false,"name":"index","type":"number"},{"default":"nil","description":"The value to set the upvalue to.","isOptional":true,"isVarArg":false,"name":"val","type":"any"}],"description":"{{Delete|This function was removed due to security concerns.}}\n\nSets the variable indexed from func","examples":[{"code":"local function my_isfunction(f)\n\treturn type(f) == \"function\" or f == \"coolguy\"\t\nend\n\nprint(debug.setupvalue(hook.Add, 1, my_isfunction))","description":"An example demonstrating a function overwrite."}],"isConstructor":false,"name":"setupvalue","realm":"shared and menu","returns":[{"description":"Returns nil if there is no upvalue with the given index, otherwise it returns the upvalue's name.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Prints out the lua function call stack to the console.","examples":[{"code":"debug.Trace()","description":"Prints the current call stack."}],"isConstructor":false,"name":"Trace","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"current thread","description":"Thread (ie. error object from xpcall error handler) to build traceback for.","isOptional":true,"isVarArg":false,"name":"thread","type":"thread"},{"default":"nil","description":"Appended at the beginning of the traceback.","isOptional":true,"isVarArg":false,"name":"message","type":"string"},{"default":"1","description":"Which level to start the traceback.","isOptional":true,"isVarArg":false,"name":"level","type":"number"}],"description":"Returns a full execution stack trace.","examples":[{"code":"print(debug.traceback())","description":"Prints the traceback into console."},{"code":"function TracebackTest()\n     AnotherTracebackFunction()\nend\n\nfunction AnotherTracebackFunction()\n     print(debug.traceback())\nend","description":"Defines two functions that are later visible in the traceback. Enter \"lua_run TracebackTest()\" into the development console to achieve exact results."}],"isConstructor":false,"name":"traceback","realm":"shared and menu","returns":[{"description":"A dump of the execution stack.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The function to index the upvalue from","isOptional":false,"isVarArg":false,"name":"func","type":"Function"},{"default":"","description":"The index from func","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"{{Delete|This function was removed due to security concerns.}}\n\nReturns an unique identifier for the upvalue indexed from func","examples":[{"code":"print(type(debug.upvalueid(hook.Add, 1)))","description":"Small example showing the type of the returned data."}],"isConstructor":false,"name":"upvalueid","realm":"shared and menu","returns":[{"description":"A unique identifier","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"f1","type":"Function"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"n1","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"f2","type":"Function"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"n2","type":"number"}],"description":"{{Delete|This function was removed due to security concerns.}}\n\nMake the n1-th upvalue of the Lua closure f1 refer to the n2-th upvalue of the Lua closure f2.","examples":[],"isConstructor":false,"name":"upvaluejoin","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The level above the thread. \n0 is the function that was called (most always this function)'s arguments\n\n1 is the thread that had called this function.\n\n2 is the thread that had called the function that started the thread that called this function.","isOptional":false,"isVarArg":false,"name":"level","type":"number"},{"default":"","description":"The variable's index you want to get.\n\n1 = the first local defined in the thread\n\n2 = the second local defined in the thread","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"{{Delete|This function was removed due to security concerns.}}\n\nSets a local variable's value.","examples":[{"code":"local var1 = \"Luke, I am not your father.\"\nlocal var2 = \"PMFPMF\"\n\n(function()\n\tprint(\"Getting the locals now!\")\n\tPrintTable({debug.getlocal(2, 1)})\n\tPrintTable({debug.getlocal(2, 2)})\n\n\tprint(\"\\nSetting the locals now!\")\n\tprint(debug.setlocal(2, 1, \"I'm actually your mother.\"))\n\tprint(debug.setlocal(2, 2, \"Chemo-chi\"))\n\tprint(debug.setlocal(2, 3, \"nil should be returned here!\"))\n\n\tprint(\"\\nHere are the locals after being set!\")\n\tPrintTable({debug.getlocal(2, 1)})\n\tPrintTable({debug.getlocal(2, 2)})\nend)()","description":"Prints the local variables, sets them, then prints the variables again."}],"isConstructor":false,"name":"setlocal","realm":"shared and menu","returns":[{"description":"The name of the local variable if the local at the index exists, otherwise nil is returned.","type":"string"}]}],"isHook":false,"isPureAbstract":false,"name":"debug"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Colorful buttons. Used internally by {{Type|DColorPalette}}.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 500, 500 )\nframe:Center()\nframe:MakePopup()\n\nlocal DColorButton = vgui.Create( \"DColorButton\", frame )\nDColorButton:SetPos( 1, 28 )\nDColorButton:SetSize( 100, 30 )\nDColorButton:Paint( 100, 30 )\nDColorButton:SetText( \"DColorButton\" )\nDColorButton:SetColor( Color( 0, 110, 160 ) )\nfunction DColorButton:DoClick() -- Callback inherited from DLabel, which is DColorButton's base\n\tprint( \"I am clicked! My color is \", self:GetColor() )\nend","description":"Creates a DColorButton buton."}],"extends":"DLabel","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the color of the button","examples":[],"isConstructor":false,"name":"GetColor","realm":"client","returns":[{"description":"The {{Struct|Color}} of the button","type":"Color"}]},{"accessModifier":"public","arguments":[],"description":"Returns the unique ID set by {{ClassFunction|DColorButton|SetID}}.\n\nUsed internally by {{Type|DColorPalette}}","examples":[],"isConstructor":false,"name":"GetID","realm":"client","returns":[{"description":"The unique ID of the button","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the {{Type|DColorButton}} is currently being pressed (the user is holding it down).","examples":[],"isConstructor":false,"name":"IsDown","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"A {{Struct|Color}} to set the color as","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Sets the color of the {{Type|DColorButton}}.","examples":[],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A unique ID to give this button","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Used internally by {{Type|DColorPalette}} to detect which button is which.","examples":[],"isConstructor":false,"name":"SetID","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the actual color of the text.\n\nSee also {{ClassFunction|DLabel|GetTextColor}} and {{ClassFunction|DLabel|GetTextStyleColor}}.","examples":[],"isConstructor":false,"name":"GetColor","realm":"client","returns":[{"description":"The the actual color of the text.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The color to set. Uses the Color structure.","isOptional":false,"isVarArg":false,"name":"color","type":"table"}],"description":"Changes color of label. Alias of {{ClassFunction|DLabel|SetTextColor}}.","examples":[{"code":"local DLabel = vgui.Create( \"DLabel\" )\nDLabel:SetPos( 90, 50 )\nDLabel:SetColor(Color(255, 0, 0))\nDLabel:SetText( \"Hello world.\" )\nDLabel:SizeToContents()","description":"Creates a label and changes it color to red."}],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DColorButton"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"The '''DColorCombo''' allows the user to choose color, without alpha, using {{Type|DColorMixer}} or {{Type|DColorPalette}} in a tabbed view.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 500, 300 )\nframe:Center()\nframe:MakePopup()\n\nlocal DermaColorCombo = vgui.Create( \"DColorCombo\", frame )\nDermaColorCombo:SetPos( 5, 30 )\nDermaColorCombo:SetColor( Color( 255, 255, 255 ) )\n\nlocal DColorButton = frame:Add( \"DColorButton\" )\nDColorButton:SetPos( 300, 50 )\nDColorButton:SetSize( 64, 64 )\nfunction DermaColorCombo:OnValueChanged( col )\n\tDColorButton:SetColor( col )\nend","description":"Creates a DColorCombo and sets its initial value."}],"extends":"DPropertySheet","functions":[{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nCalled internally to create panels necessary for this panel to work.","examples":[],"isConstructor":false,"name":"BuildControls","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the color of the {{Type|DColorCombo}}.","examples":[],"isConstructor":false,"name":"GetColor","realm":"client","returns":[{"description":"A {{Struct|Color}}","type":"Color"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the panel is currently being edited\n\nMore of a internal method, it technically should only ever work (i.e. return true) inside {{ClassFunction|DColorCombo|OnValueChanged}}.","examples":[],"isConstructor":false,"name":"IsEditing","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"newcol","type":"table"}],"description":"Called when the value (color) of this panel was changed.","examples":[],"isConstructor":false,"name":"OnValueChanged","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"clr","type":"Color"}],"description":"Sets the color of this panel.","examples":[],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DColorCombo"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The debugoverlay library is mainly useful for 3D debugging, it can be used to draw shapes on the screen for debug purposes.\n\n{{Note|These functions will not do anything unless the '''developer''' console variable is set to non 0.}}\n\n{{Note|These function appear to not work in singleplayer}}","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Position origin","isOptional":false,"isVarArg":false,"name":"origin","type":"Vector"},{"default":"","description":"Angle of the axis","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"},{"default":"","description":"Size of the axis","isOptional":false,"isVarArg":false,"name":"size","type":"number"},{"default":"1","description":"Number of seconds to appear","isOptional":true,"isVarArg":false,"name":"lifetime","type":"number"},{"default":"false","description":"If true, will draw on top of everything; ignoring the Z buffer","isOptional":true,"isVarArg":false,"name":"ignoreZ","type":"boolean"}],"description":"Displays an axis indicator at the specified position.\n\n{{Note|This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0}}","examples":[],"isConstructor":false,"name":"Axis","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Position origin","isOptional":false,"isVarArg":false,"name":"origin","type":"Vector"},{"default":"","description":"Minimum bounds of the box","isOptional":false,"isVarArg":false,"name":"mins","type":"Vector"},{"default":"","description":"Maximum bounds of the box","isOptional":false,"isVarArg":false,"name":"maxs","type":"Vector"},{"default":"1","description":"Number of seconds to appear","isOptional":true,"isVarArg":false,"name":"lifetime","type":"number"},{"default":"Color( 255, 255, 255 )","description":"The color of the box. Uses the {{Struct|Color}}","isOptional":true,"isVarArg":false,"name":"color","type":"Color"}],"description":"Displays a solid coloured box at the specified position.\n\n{{Note|This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0.}}","examples":[],"isConstructor":false,"name":"Box","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"World position","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"The mins of the box (lowest corner)","isOptional":false,"isVarArg":false,"name":"mins","type":"Vector"},{"default":"","description":"The maxs of the box (highest corner)","isOptional":false,"isVarArg":false,"name":"maxs","type":"Vector"},{"default":"","description":"The angle to draw the box at","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"},{"default":"1","description":"Amount of seconds to show the box","isOptional":true,"isVarArg":false,"name":"lifetime","type":"number"},{"default":"Color( 255, 255, 255 )","description":"The color of the box. Uses the {{Struct|Color}}","isOptional":true,"isVarArg":false,"name":"color","type":"Color"}],"description":"Displays a solid colored rotated box at the specified position.\n\n{{Note|This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0.}}","examples":[],"isConstructor":false,"name":"BoxAngles","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Position origin","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"Size of the cross","isOptional":false,"isVarArg":false,"name":"size","type":"number"},{"default":"1","description":"Number of seconds the cross to appear","isOptional":true,"isVarArg":false,"name":"lifetime","type":"number"},{"default":"Color( 255, 255, 255 )","description":"The color of the cross. Uses the {{Struct|Color}}","isOptional":true,"isVarArg":false,"name":"color","type":"Color"},{"default":"false","description":"If true, will draw on top of everything; ignoring the Z buffer","isOptional":true,"isVarArg":false,"name":"ignoreZ","type":"boolean"}],"description":"Creates a coloured cross at the specified position for the specified time.\n\n{{Note|This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0.}}","examples":[],"isConstructor":false,"name":"Cross","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position in 3D to display the text.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"Line of text, will offset text on the to display the new line unobstructed","isOptional":false,"isVarArg":false,"name":"line","type":"number"},{"default":"","description":"The text to display","isOptional":false,"isVarArg":false,"name":"text","type":"string"},{"default":"1","description":"Number of seconds to appear","isOptional":true,"isVarArg":false,"name":"lifetime","type":"number"},{"default":"Color( 255, 255, 255 )","description":"The color of the box. Uses the {{Struct|Color}}","isOptional":true,"isVarArg":false,"name":"color","type":"Color"}],"description":"Displays 2D text at the specified coordinates.\n\n{{Note|This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0.}}","examples":[],"isConstructor":false,"name":"EntityTextAtPosition","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Draws a 3D grid of limited size in given position.\n\n{{Note|This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0.}}","examples":[],"isConstructor":false,"name":"Grid","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"First position of the line","isOptional":false,"isVarArg":false,"name":"pos1","type":"Vector"},{"default":"","description":"Second position of the line","isOptional":false,"isVarArg":false,"name":"pos2","type":"Vector"},{"default":"1","description":"Number of seconds to appear","isOptional":true,"isVarArg":false,"name":"lifetime","type":"number"},{"default":"Color( 255, 255, 255 )","description":"The color of the line. Uses the {{Struct|Color}}","isOptional":true,"isVarArg":false,"name":"color","type":"Color"},{"default":"false","description":"If true, will draw on top of everything; ignoring the Z buffer","isOptional":true,"isVarArg":false,"name":"ignoreZ","type":"boolean"}],"description":"Displays a coloured line at the specified position.\n\n{{Note|This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0.}}","examples":[],"isConstructor":false,"name":"Line","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position of the text, from 0 ( left ) to 1 ( right ).","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The position of the text, from 0 ( top ) to 1 ( bottom ).","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The text to display","isOptional":false,"isVarArg":false,"name":"text","type":"string"},{"default":"1","description":"Number of seconds to appear","isOptional":true,"isVarArg":false,"name":"lifetime","type":"number"},{"default":"Color( 255, 255, 255 )","description":"The color of the box. Uses the {{Struct|Color}}","isOptional":true,"isVarArg":false,"name":"color","type":"Color"}],"description":"Displays text triangle at the specified coordinates.\n\n{{Note|This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0.}}","examples":[],"isConstructor":false,"name":"ScreenText","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Position origin","isOptional":false,"isVarArg":false,"name":"origin","type":"Vector"},{"default":"","description":"Size of the sphere","isOptional":false,"isVarArg":false,"name":"size","type":"number"},{"default":"1","description":"Number of seconds to appear","isOptional":true,"isVarArg":false,"name":"lifetime","type":"number"},{"default":"Color( 255, 255, 255 )","description":"The color of the sphere. Uses the {{Struct|Color}}","isOptional":true,"isVarArg":false,"name":"color","type":"Color"},{"default":"false","description":"If true, will draw on top of everything; ignoring the Z buffer","isOptional":true,"isVarArg":false,"name":"ignoreZ","type":"boolean"}],"description":"Displays a coloured sphere at the specified position.\n\n{{Note|This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0.}}","examples":[],"isConstructor":false,"name":"Sphere","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The start position of the box.","isOptional":false,"isVarArg":false,"name":"vStart","type":"Vector"},{"default":"","description":"The end position of the box.","isOptional":false,"isVarArg":false,"name":"vEnd","type":"Vector"},{"default":"","description":"The \"minimum\" edge of the box.","isOptional":false,"isVarArg":false,"name":"vMins","type":"Vector"},{"default":"","description":"The \"maximum\" edge of the box.","isOptional":false,"isVarArg":false,"name":"vMaxs","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"},{"default":"1","description":"Number of seconds to appear","isOptional":true,"isVarArg":false,"name":"lifetime","type":"number"},{"default":"Color( 255, 255, 255 )","description":"The color of the box. Uses the {{Struct|Color}}","isOptional":true,"isVarArg":false,"name":"color","type":"Color"}],"description":"Displays \"swept\" box, two boxes connected with lines by their verices.\n\n{{Note|This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0.}}","examples":[],"isConstructor":false,"name":"SweptBox","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Position origin","isOptional":false,"isVarArg":false,"name":"origin","type":"Vector"},{"default":"","description":"String message to display","isOptional":false,"isVarArg":false,"name":"text","type":"string"},{"default":"1","description":"Number of seconds to appear","isOptional":true,"isVarArg":false,"name":"lifetime","type":"number"},{"default":"false","description":"Clip text that is obscured","isOptional":true,"isVarArg":false,"name":"viewCheck","type":"boolean"}],"description":"Displays text at the specified position.\n\n{{Note|This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0.}}","examples":[],"isConstructor":false,"name":"Text","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"First point of the triangle","isOptional":false,"isVarArg":false,"name":"pos1","type":"Vector"},{"default":"","description":"Second point of the triangle","isOptional":false,"isVarArg":false,"name":"pos2","type":"Vector"},{"default":"","description":"Third point of the triangle","isOptional":false,"isVarArg":false,"name":"pos3","type":"Vector"},{"default":"1","description":"Number of seconds to appear","isOptional":true,"isVarArg":false,"name":"lifetime","type":"number"},{"default":"Color( 255, 255, 255 )","description":"The color of the box. Uses the {{Struct|Color}}","isOptional":true,"isVarArg":false,"name":"color","type":"Color"},{"default":"false","description":"If true, will draw on top of everything; ignoring the Z buffer","isOptional":true,"isVarArg":false,"name":"ignoreZ","type":"boolean"}],"description":"Displays a colored triangle at the specified coordinates.\n\n{{Note|This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0.}}","examples":[],"isConstructor":false,"name":"Triangle","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"debugoverlay"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"The DColorCube allows a user to select saturation and value but not hue. Uses HSV colors","examples":[{"code":"local Frame = vgui.Create( \"DFrame\" )\nFrame:SetSize( 300, 300 )\nFrame:Center()\nFrame:MakePopup()\n\nDColorCube = vgui.Create( \"DColorCube\", Frame)\nDColorCube:SetPos( 50, 50 )\nDColorCube:SetSize( 200, 200 )\nDColorCube:SetBaseRGB( Color( 0, 255, 0 ) )","description":"Creates a DColorCube in a DFrame."},{"code":"-- Background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(200, 200)\nBGPanel:Center()\n\n-- Color label\nlocal color_label = Label(\"Color( 255, 255, 255 )\", BGPanel)\ncolor_label:SetPos(40, 160)\ncolor_label:SetSize(150, 20)\ncolor_label:SetHighlight(true)\ncolor_label:SetColor(Color(0, 0, 0))\n\n-- Color picker\nlocal color_picker = vgui.Create(\"DRGBPicker\", BGPanel)\ncolor_picker:SetPos(5, 5)\ncolor_picker:SetSize(30, 190)\n\n-- Color cube\nlocal color_cube = vgui.Create(\"DColorCube\", BGPanel)\ncolor_cube:SetPos(40, 5)\ncolor_cube:SetSize(155, 155)\n\n-- When the picked color is changed...\nfunction color_picker:OnChange(col)\n\t\n\t-- Get the hue of the RGB picker and the saturation and vibrance of the color cube\n\tlocal h = ColorToHSV(col)\n\tlocal _, s, v = ColorToHSV(color_cube:GetRGB())\n\t\n\t-- Mix them together and update the color cube\n\tcol = HSVToColor(h, s, v)\n\tcolor_cube:SetColor(col)\n\t\n\t-- Lastly, update the background color and label\n\tUpdateColors(col)\n\t\t\nend\n\nfunction color_cube:OnUserChanged(col)\n\n\t-- Update background color and label\n\tUpdateColors(col)\n\nend\n\n-- Updates display colors, label, and clipboard text\nfunction UpdateColors(col)\n\n\tBGPanel:SetBackgroundColor(col)\n\tcolor_label:SetText(\"Color( \"..col.r..\", \"..col.g..\", \"..col.b..\" )\")\n\tcolor_label:SetColor(Color((255-col.r), (255-col.g), (255-col.b)))\n\tSetClipboardText(color_label:GetText())\n\nend","description":"Creates a color cube that's hue is controlled by a {{Type|DRGBPicker}}, which outputs the color to the background panel, label, and your copy/paste buffer."}],"extends":"DSlider","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the base Color set by {{ClassFunction|DColorCube|SetBaseRGB}}.","examples":[],"isConstructor":false,"name":"GetBaseRGB","realm":"client","returns":[{"description":"A {{Struct|Color}}","type":"Color"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nReturns the value set by {{ClassFunction|DColorCube|SetHue}}.","examples":[],"isConstructor":false,"name":"GetHue","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the color cube's current set color.","examples":[{"code":"local color_cube = vgui.Create(\"DColorCube\")\ncolor_cube:SetSize(200, 200)\ncolor_cube:Center()\n\n-- Set color to cyan\ncolor_cube:SetColor(Color(0, 255, 255))\n\n-- 50% saturated, 50% valued\ncolor_cube:TranslateValues(0.5, 0.5)\n\n-- Print set color\nPrintTable(color_cube:GetRGB())","description":"Creates a color cube, sets the color to cyan, adjusts the saturation and value to 50% each, and prints out the final color."}],"isConstructor":false,"name":"GetRGB","realm":"client","returns":[{"description":"The set color, uses {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The new color, uses {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Function which is called when the color cube slider is moved (through user input). Meant to be overridden.","examples":[{"code":"-- Frame\nMainFrame = vgui.Create(\"DFrame\")\nMainFrame:SetSize(320, 200)\nMainFrame:Center()\nMainFrame:SetTitle(\"Choose the saturation and value\")\n\n-- Image of a ball\nlocal ball_img = vgui.Create(\"DImage\", MainFrame)\nball_img:SetPos(20, 45)\nball_img:SetSize(128, 128)\n\nball_img:SetImage(\"sprites/sent_ball\")\n\n-- Color cube\nlocal color_cube = vgui.Create(\"DColorCube\", MainFrame)\ncolor_cube:SetPos(160, 40)\ncolor_cube:SetSize(150, 150)\n\n-- Set color to blue\ncolor_cube:SetColor(Color(0, 0, 255))\n\n-- Called when slider is moved by user\nfunction color_cube:OnUserChanged(col)\n\t\n\t-- Update ball color\n\tball_img:SetImageColor(col)\n\nend","description":"Creates a color cube which controls the blue saturation and value of a ball image."}],"isConstructor":false,"name":"OnUserChanged","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The base color to set, uses {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Sets the base color and the color used to draw the color cube panel itself.\n\n{{Note|Calling this when using a color that isn't 100% saturated and valued ({{GlobalFunction|HSVToColor}} with saturation and value set to 1) causes the color cube to look inaccurate compared to the color that's returned by methods like {{ClassFunction|DColorCube|GetRGB}} and {{ClassFunction|DColorCube|OnUserChanged}}. You should use {{ClassFunction|DColorCube|SetColor}} instead}}","examples":[{"code":"-- Background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(200, 200)\nBGPanel:Center()\n\n-- Color cube\nlocal color_cube = vgui.Create(\"DColorCube\", BGPanel)\ncolor_cube:SetSize(180, 180)\ncolor_cube:Center()\n\n-- Base color set to white\ncolor_cube:SetBaseRGB(Color(255, 255, 255))\n\n-- Called when the color is changed by user input\nfunction color_cube:OnUserChanged(col)\n\n\t-- Update background panel color\n\tBGPanel:SetBackgroundColor(col)\n\t\nend","description":"Creates a background panel and color cube that controls the background color. Demonstrates how setting the base RGB explicitly can cause a disconnect between the color represented by the cube and the color output."}],"isConstructor":false,"name":"SetBaseRGB","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The color to set, uses {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Sets the base color of the color cube and updates the slider position.","examples":[{"code":"-- Get the color of the pixel at the center of the screen\nrender.CapturePixels()\nlocal p_r, p_g, p_b = render.ReadPixel(ScrW()/2, ScrH()/2)\n\n-- Background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos((ScrW()/2)-50, ScrH()/2-100)\nBGPanel:SetSize(100, 100)\n\n-- Color cube\nlocal color_cube = vgui.Create(\"DColorCube\", BGPanel)\ncolor_cube:SetSize(75, 75)\ncolor_cube:Center()\n\n-- Set the color to the center pixel color\ncolor_cube:SetColor(Color(p_r, p_g, p_b))\n\n-- Change background color too\nBGPanel:SetBackgroundColor(Color(p_r, p_g, p_b))","description":"Picks the color at the center screen pixel and applies it to the base color of a color cube and its background panel."}],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"hue","type":"number"}],"description":"{{Deprecated}}\n\nAppears to do nothing and unused.","examples":[],"isConstructor":false,"name":"SetHue","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A {{Struct|Color}}","isOptional":false,"isVarArg":false,"name":"clr","type":"Color"}],"description":"{{Internal}}\n\nUsed internally to set the real \"output\" color of the panel.","examples":[],"isConstructor":false,"name":"SetRGB","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The x position to sample color from/the percentage of saturation to remove from the color (ranges from 0.0 to 1.0).","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The y position to sample color from/the percentage of brightness or value to remove from the color (ranges from 0.0 to 1.0).","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"{{Internal}}\n\nUpdates the color cube RGB based on the given x and y position and returns its arguments. Similar to {{ClassFunction|DColorCube|UpdateColor}}.","examples":[{"code":"local color_cube = vgui.Create(\"DColorCube\")\ncolor_cube:SetSize(200, 200)\ncolor_cube:Center()\n\n-- Set base color to green\ncolor_cube:SetColor(Color(0, 255, 0))\n\n-- 20% desaturated, 40% darker\ncolor_cube:TranslateValues(0.2, 0.4)\n\n-- Get new color\nlocal new_color = color_cube:GetRGB()\n\n-- Update slider position\ncolor_cube:SetColor(new_color)\n\n-- Print out new color\nprint(\"Color( \"..new_color.r..\", \"..new_color.g..\", \"..new_color.b..\", \"..new_color.a..\" )\")","description":"Creates a green color cube and prints out the color at the (0.2, 0.4) position."}],"isConstructor":false,"name":"TranslateValues","realm":"client","returns":[{"description":"The given x position.","type":"number"},{"description":"The given y position.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"nil","description":"The x position to set color to/the percentage of saturation to remove from the color (ranges from 0.0 to 1.0).","isOptional":true,"isVarArg":false,"name":"x","type":"number"},{"default":"nil","description":"The y position to set color to/the percentage of brightness or value to remove from the color (ranges from 0.0 to 1.0).","isOptional":true,"isVarArg":false,"name":"y","type":"number"}],"description":"{{Internal}}\n\nUpdates the color cube RGB based on the given x and y position. Similar to {{ClassFunction|DColorCube|TranslateValues}}.","examples":[{"code":"local color_cube = vgui.Create(\"DColorCube\")\ncolor_cube:SetSize(200, 200)\ncolor_cube:Center()\n\n-- Set base color to yellow\ncolor_cube:SetColor(Color(255, 255, 0))\n\n-- 10% less saturation, 60% darker\ncolor_cube:UpdateColor(0.1, 0.6)\n\n-- Get new color\nlocal new_color = color_cube:GetRGB()\n\n-- Print new color\nprint(\"Color( \"..new_color.r..\", \"..new_color.g..\", \"..new_color.b..\", \"..new_color.a..\" )\")","description":"Creates a yellow color cube and updates/prints out the color at the (0.1, 0.6) position."}],"isConstructor":false,"name":"UpdateColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"For override by child panels, such as {{Type|DNumSlider}}.","examples":[],"isConstructor":false,"name":"TranslateValues","realm":"client","returns":[{"description":"x","type":"number"},{"description":"y","type":"number"}]}],"isHook":false,"isPureAbstract":true,"name":"DColorCube"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The derma library allows you to add custom derma controls and create & modify derma skins.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"},{"default":"","description":"The default color in case of failure.","isOptional":false,"isVarArg":false,"name":"defaultVal","type":"table"}],"description":"Gets the color from a Derma skin of a panel and returns default color if not found","examples":[],"isConstructor":false,"name":"Color","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the newly created control","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Description of the control","isOptional":false,"isVarArg":false,"name":"description","type":"string"},{"default":"","description":"Table containing control methods and properties","isOptional":false,"isVarArg":false,"name":"tab","type":"table"},{"default":"","description":"Derma control to base the new control off of","isOptional":false,"isVarArg":false,"name":"base","type":"string"}],"description":"Defines a new Derma control with an optional base.\n\nThis calls {{LibraryFunction|vgui|Register}} internally, but also does the following:\n* Adds the control to {{LibraryFunction|derma|GetControlList}}\n* Adds a key \"Derma\" - This is returned by {{LibraryFunction|derma|GetControlList}}\n* Makes a global table with the name of the control (This is technically deprecated and should not be relied upon)\n* If reloading (i.e. called this function with name of an existing panel), updates all existing instances of panels with this name. (Updates functions, calls {{HookFunction|PANEL|PreAutoRefresh}} and {{HookFunction|PANEL|PostAutoRefresh}}, etc.)","examples":[{"code":"local PANEL = {}\n\nfunction PANEL:OnChange()\n    print(self:GetValue())\nend\n\nderma.DefineControl(\"MyTextEntry\", \"Printing text entry control\", PANEL, \"DTextEntry\")","description":"Defines a new control based off of DTextEntry that prints to the console whenever it is changed"}],"isConstructor":false,"name":"DefineControl","realm":"client and menu","returns":[{"description":"A table containing the new control's methods and properties","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the skin","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Description of the skin","isOptional":false,"isVarArg":false,"name":"descriptions","type":"string"},{"default":"","description":"Table containing skin data","isOptional":false,"isVarArg":false,"name":"skin","type":"table"}],"description":"Defines a new skin so that it is usable by Derma. The default skin can be found in \"garrysmod/lua/skins/default.lua\"","examples":[],"isConstructor":false,"name":"DefineSkin","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the {{LibraryFunction|derma|Controls}} table, a list of all derma controls registered with {{LibraryFunction|derma|DefineControl}}.","examples":[],"isConstructor":false,"name":"GetControlList","realm":"client and menu","returns":[{"description":"A listing of all available derma-based controls. See {{LibraryFunction|derma|Controls}} for structure and contents.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the default skin table, which can be changed with the hook [[GM/ForceDermaSkin]]","examples":[],"isConstructor":false,"name":"GetDefaultSkin","realm":"client and menu","returns":[{"description":"Skin table","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of skin","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Returns the skin table of the skin with the supplied name","examples":[],"isConstructor":false,"name":"GetNamedSkin","realm":"client and menu","returns":[{"description":"Skin table","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns a copy of the table containing every Derma skin","examples":[],"isConstructor":false,"name":"GetSkinTable","realm":"client and menu","returns":[{"description":"Table of every Derma skin","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Clears all cached panels so that they reassess which skin they should be using.","examples":[],"isConstructor":false,"name":"RefreshSkins","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns how many times {{LibraryFunction|derma|RefreshSkins}} has been called.","examples":[],"isConstructor":false,"name":"SkinChangeIndex","realm":"client and menu","returns":[{"description":"Amount of times {{LibraryFunction|derma|RefreshSkins}} has been called.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The type of hook to run","isOptional":false,"isVarArg":false,"name":"type","type":"string"},{"default":"","description":"The name of the hook to run","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The panel to call the hook for","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"},{"default":"","description":"The width of the panel","isOptional":false,"isVarArg":false,"name":"w","type":"number"},{"default":"","description":"The height of the panel","isOptional":false,"isVarArg":false,"name":"h","type":"number"}],"description":"Calls the specified hook for the given panel","examples":[],"isConstructor":false,"name":"SkinHook","realm":"client and menu","returns":[{"description":"The returned variable from the skin hook","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The identifier of the texture","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Panel to get the skin of.","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"},{"default":"nil","description":"What to return if we failed to retrieve the texture","isOptional":true,"isVarArg":false,"name":"fallback","type":"any"}],"description":"Returns a function to draw a specified texture of panels skin.","examples":[],"isConstructor":false,"name":"SkinTexture","realm":"client and menu","returns":[{"description":"A function that is created with the {{Lib|GWEN}} to draw a texture.","type":"Function"}]}],"isHook":false,"isPureAbstract":false,"name":"derma"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A class used to store the inputs from {{Type|CUserCmd}} and other information related to the current movement simulation, such as velocity, position and so on.\n\nThis can only be accessed during {{HookFunction|GM|SetupMove}} , {{HookFunction|GM|Move}} , {{HookFunction|GM|PlayerTick}} and {{HookFunction|GM|FinishMove}}.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Keys to add, see {{Enum|IN}}","isOptional":false,"isVarArg":false,"name":"keys","type":"IN"}],"description":"Adds keys to the move data, as if player pressed them.","examples":[],"isConstructor":false,"name":"AddKey","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Gets the aim angle. Seems to be same as {{ClassFunction|CMoveData|GetAngles}}.","examples":[],"isConstructor":false,"name":"GetAbsMoveAngles","realm":"shared","returns":[{"description":"Aiming angle","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Gets the aim angle. On client is the same as {{ClassFunction|Entity|GetAngles}}.","examples":[],"isConstructor":false,"name":"GetAngles","realm":"shared","returns":[{"description":"Aiming angle","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Gets which buttons are down","examples":[],"isConstructor":false,"name":"GetButtons","realm":"shared","returns":[{"description":"An integer representing which buttons are down, see {{Enum|IN}}","type":"IN"}]},{"accessModifier":"public","arguments":[],"description":"Returns the radius that constrains the players movement.","examples":[],"isConstructor":false,"name":"GetConstraintRadius","realm":"shared","returns":[{"description":"The constraint radius","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the players forward speed.","examples":[],"isConstructor":false,"name":"GetForwardSpeed","realm":"shared","returns":[{"description":"speed","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the number passed to \"impulse\" console command","examples":[],"isConstructor":false,"name":"GetImpulseCommand","realm":"shared","returns":[{"description":"The impulse","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the maximum client speed of the player","examples":[],"isConstructor":false,"name":"GetMaxClientSpeed","realm":"shared","returns":[{"description":"The maximum client speed","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the maximum speed of the player.","examples":[],"isConstructor":false,"name":"GetMaxSpeed","realm":"shared","returns":[{"description":"The maximum speed","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the angle the player is moving at. For more info, see {{ClassFunction|CMoveData|SetMoveAngles}}.","examples":[],"isConstructor":false,"name":"GetMoveAngles","realm":"shared","returns":[{"description":"The move direction","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Gets the aim angle. Only works clientside, server returns same as {{ClassFunction|CMoveData|GetAngles}}.","examples":[],"isConstructor":false,"name":"GetOldAngles","realm":"shared","returns":[{"description":"The aim angle","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Get which buttons were down last frame","examples":[],"isConstructor":false,"name":"GetOldButtons","realm":"shared","returns":[{"description":"An integer representing which buttons were down, see {{Enum|IN}}","type":"IN"}]},{"accessModifier":"public","arguments":[],"description":"Gets the player's position.","examples":[{"code":"function GM:SetupMove( ply, movedata )\n    print( movedata:GetOrigin() )\nend","description":"Print's the players position."}],"isConstructor":false,"name":"GetOrigin","realm":"shared","returns":[{"description":"The player's position.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the strafe speed of the player.","examples":[],"isConstructor":false,"name":"GetSideSpeed","realm":"shared","returns":[{"description":"speed","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the vertical speed of the player. ( Z axis of {{ClassFunction|CMoveData|GetVelocity}} )","examples":[],"isConstructor":false,"name":"GetUpSpeed","realm":"shared","returns":[{"description":"Vertical speed","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the players velocity.\n\n{{Bug|Issue=3413|This will return Vector(0,0,0) sometimes when walking on props.}}","examples":[{"code":"function GM:Move( ply, movedata )\n    print( movedata:GetVelocity() )\nend","description":"Prints the player's velocity."}],"isConstructor":false,"name":"GetVelocity","realm":"shared","returns":[{"description":"The players velocity","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to test, see {{Enum|IN}}","isOptional":false,"isVarArg":false,"name":"key","type":"IN"}],"description":"Returns whether the key is down or not","examples":[],"isConstructor":false,"name":"KeyDown","realm":"shared","returns":[{"description":"Is the key down or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to test, see {{Enum|IN}}","isOptional":false,"isVarArg":false,"name":"key","type":"IN"}],"description":"Returns whether the key was pressed. If you want to check if the key is held down, try {{ClassFunction|CMoveData|KeyDown}}","examples":[],"isConstructor":false,"name":"KeyPressed","realm":"shared","returns":[{"description":"Was the key pressed or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"A key to test, see {{Enum|IN}}","isOptional":false,"isVarArg":false,"name":"key","type":"IN"}],"description":"Returns whether the key was released","examples":[],"isConstructor":false,"name":"KeyReleased","realm":"shared","returns":[{"description":"Was the key released or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to test, seee {{Enum|IN}}","isOptional":false,"isVarArg":false,"name":"key","type":"IN"}],"description":"Returns whether the key was down or not.<br/><br/>\nUnlike {{ClassFunction|CMoveData|KeyDown}}, it will return false if {{ClassFunction|CMoveData|KeyPressed}} is true and it will return true if {{ClassFunction|CMoveData|KeyReleased}} is true.","examples":[],"isConstructor":false,"name":"KeyWasDown","realm":"shared","returns":[{"description":"Was the key down or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"New absolute move angles","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"Sets absolute move angles.( ? ) Doesn't seem to do anything.","examples":[],"isConstructor":false,"name":"SetAbsMoveAngles","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The angles.","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"Sets angles.\n\n{{Bug|Issue=2382|This function does nothing.}}","examples":[],"isConstructor":false,"name":"SetAngles","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A number representing which buttons are down, see {{Enum|IN}}","isOptional":false,"isVarArg":false,"name":"buttons","type":"IN"}],"description":"Sets the pressed buttons on the move data","examples":[],"isConstructor":false,"name":"SetButtons","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new constraint radius","isOptional":false,"isVarArg":false,"name":"radius","type":"number"}],"description":"Sets the radius that constrains the players movement.<br/>\nIt is unknown what this function does as changing its values doesn't affect player movement.","examples":[],"isConstructor":false,"name":"SetConstraintRadius","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New forward speed","isOptional":false,"isVarArg":false,"name":"speed","type":"number"}],"description":"Sets players forward speed.","examples":[],"isConstructor":false,"name":"SetForwardSpeed","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The impulse to set","isOptional":false,"isVarArg":false,"name":"impulse","type":"number"}],"description":"Sets the impulse command. This isn't actually utilised in the engine anywhere.","examples":[],"isConstructor":false,"name":"SetImpulseCommand","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new maximum speed","isOptional":false,"isVarArg":false,"name":"maxSpeed","type":"number"}],"description":"Sets the maximum player speed. Player won't be able to run or sprint faster then this value.<br/>\nThis also automatically sets {{ClassFunction|CMoveData|SetMaxSpeed}} when used in the {{HookFunction|GM|SetupMove}} hook. You must set it manually in the {{HookFunction|GM|Move}} hook.<br/>\nThis must be called on both client and server to avoid prediction errors.<br/>\nThis will '''not''' reduce speed in air.\n{{Note|Setting this to 0 will not make the player stationary. It won't do anything.}}","examples":[{"code":"hook.Add(\"SetupMove\",\"MySpeed\", function( ply, mv )\n    mv:SetMaxClientSpeed( 100 )\nend )","description":"Doesn't let the player to run or sprint faster than 100 units per second."},{"code":"hook.Add( \"Move\", \"testestst\", function( ply, mv, usrcmd )\n\tlocal speed = mv:GetMaxSpeed() * 2\n\tmv:SetMaxSpeed( speed )\n\tmv:SetMaxClientSpeed( speed )\nend )","description":"Doubles the players speed properly."}],"isConstructor":false,"name":"SetMaxClientSpeed","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new maximum speed","isOptional":false,"isVarArg":false,"name":"maxSpeed","type":"number"}],"description":"Sets the maximum speed of the player. This must match with {{ClassFunction|CMoveData|SetMaxClientSpeed}} both, on server and client.<br/>\nDoesn't seem to be doing anything on it's own, use {{ClassFunction|CMoveData|SetMaxClientSpeed}} instead.","examples":[],"isConstructor":false,"name":"SetMaxSpeed","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The aim direction.","isOptional":false,"isVarArg":false,"name":"dir","type":"Angle"}],"description":"Sets the serverside move angles, making the movement keys act as if player was facing that direction.\n\n{{Bug|Issue=1181|This does nothing clientside.}}","examples":[],"isConstructor":false,"name":"SetMoveAngles","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The old angles","isOptional":false,"isVarArg":false,"name":"aimAng","type":"Angle"}],"description":"Sets old aim angles. ( ? ) Doesn't seem to be doing anything.","examples":[],"isConstructor":false,"name":"SetOldAngles","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A number representing which buttons were down, see {{Enum|IN}}","isOptional":false,"isVarArg":false,"name":"buttons","type":"IN"}],"description":"Sets the 'old' pressed buttons on the move data. These buttons are used to work out which buttons have been released, which have just been pressed and which are being held down.","examples":[],"isConstructor":false,"name":"SetOldButtons","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Sets the players position.","examples":[{"code":"function GM:SetupMove( ply, movedata )\n    movedata:SetOrigin( vector_origin )\nend","description":"Make the player freeze at the origin of the map."}],"isConstructor":false,"name":"SetOrigin","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Strafe speed","isOptional":false,"isVarArg":false,"name":"speed","type":"number"}],"description":"Sets players strafe speed.","examples":[],"isConstructor":false,"name":"SetSideSpeed","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Vertical speed to set","isOptional":false,"isVarArg":false,"name":"speed","type":"number"}],"description":"Sets vertical speed of the player. ( Z axis of {{ClassFunction|CMoveData|SetVelocity}} )","examples":[],"isConstructor":false,"name":"SetUpSpeed","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The velocity to set","isOptional":false,"isVarArg":false,"name":"velocity","type":"Vector"}],"description":"Sets the player's velocity","examples":[{"code":"function GM:SetupMove( ply, movedata )\n    movedata:SetVelocity( VectorRand() * 800 )\nend","description":"Make the player shake to hell and back."}],"isConstructor":false,"name":"SetVelocity","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"CMoveData"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The drag'n'drop library, used internally by certain base panels to allow for drag'n'drop functionality, like spawnmenu's customizations.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"true if the mouse was released, false if we right clicked.","isOptional":false,"isVarArg":false,"name":"bDoDrop","type":"boolean"},{"default":"","description":"The command value. This should be the ID of the clicked dropdown menu ( if right clicked, or nil )","isOptional":false,"isVarArg":false,"name":"command","type":"number"},{"default":"","description":"The local to the panel mouse cursor X position when the click happened.","isOptional":false,"isVarArg":false,"name":"mx","type":"number"},{"default":"","description":"The local to the panel  mouse cursor Y position when the click happened.","isOptional":false,"isVarArg":false,"name":"my","type":"number"}],"description":"{{Internal}}\nCalls the receiver function of hovered panel.","examples":[],"isConstructor":false,"name":"CallReceiverFunction","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Clears all the internal drag'n'drop variables.","examples":[],"isConstructor":false,"name":"Clear","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}Handles the drop action of drag'n'drop library.","examples":[],"isConstructor":false,"name":"Drop","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"If set, the function will return only the panels with this {{ClassFunction|Panel|Droppable}} name.","isOptional":true,"isVarArg":false,"name":"name","type":"string"}],"description":"Returns a table of currently dragged panels.","examples":[],"isConstructor":false,"name":"GetDroppable","realm":"client and menu","returns":[{"description":"A table of all panels that are being currently dragged, if any.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"If returns true, calls {{LibraryFunction|dragndrop|StopDragging}} in {{LibraryFunction|dragndrop|Drop}}. Seems to be broken and does nothing. Is it for override?","examples":[],"isConstructor":false,"name":"HandleDroppedInGame","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\nHandles the hover think. Called from {{LibraryFunction|dragndrop|Think}}.","examples":[],"isConstructor":false,"name":"HoverThink","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns whether the user is dragging something with the drag'n'drop system.","examples":[],"isConstructor":false,"name":"IsDragging","realm":"client and menu","returns":[{"description":"True if the user is dragging something with the drag'n'drop system.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\nStarts the drag'n'drop.","examples":[],"isConstructor":false,"name":"StartDragging","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Stops the drag'n'drop and calls {{LibraryFunction|dragndrop|Clear}}.","examples":[],"isConstructor":false,"name":"StopDragging","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\nHandles all the drag'n'drop processes. Calls {{LibraryFunction|dragndrop|UpdateReceiver}} and {{LibraryFunction|dragndrop|HoverThink}}.","examples":[],"isConstructor":false,"name":"Think","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\nUpdates the receiver to drop the panels onto. Called from {{LibraryFunction|dragndrop|Think}}.","examples":[],"isConstructor":false,"name":"UpdateReceiver","realm":"client and menu","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"dragndrop"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The draw library's purpose is to simplify the usage of the [[surface]] library.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Text to be drawn.","isOptional":false,"isVarArg":false,"name":"text","type":"string"},{"default":"\"DermaDefault\"","description":"Name of font to draw the text in. See {{LibraryFunction|surface|CreateFont}} to create your own, or [[Default Fonts]] for a list of default fonts.","isOptional":true,"isVarArg":false,"name":"font","type":"string"},{"default":"0","description":"The X Coordinate.","isOptional":true,"isVarArg":false,"name":"x","type":"number"},{"default":"0","description":"The Y Coordinate.","isOptional":true,"isVarArg":false,"name":"y","type":"number"},{"default":"Color( 255, 255, 255, 255 )","description":"Color to draw the text in. Uses the {{Struct|Color}}.","isOptional":true,"isVarArg":false,"name":"color","type":"Color"},{"default":"TEXT_ALIGN_LEFT","description":"Where to align the text horizontally. Uses the {{Enum|TEXT_ALIGN}}.","isOptional":true,"isVarArg":false,"name":"xAlign","type":"TEXT_ALIGN"}],"description":"Simple draw text at position, but this will expand newlines and tabs.\n\n{{RenderingContext|Function|2D}}\n\nSee also {{Type|MarkupObject}} for limited width and markup support.","examples":[{"code":"hook.Add(\"HUDPaint\", \"HelloThere\", function() \n\tdraw.DrawText(\"Hello there!\", \"TargetID\", ScrW() * 0.5, ScrH() * 0.25, Color(255,255,255,255), TEXT_ALIGN_CENTER)\nend)","description":"Makes a message saying \"Hello there!\" pop up in the center of your screen."}],"isConstructor":false,"name":"DrawText","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the font to get the height of.","isOptional":false,"isVarArg":false,"name":"font","type":"string"}],"description":"Returns the height of the specified font in pixels.\n\n{{RenderingContext|Function|2D}}","examples":[],"isConstructor":false,"name":"GetFontHeight","realm":"client and menu","returns":[{"description":"fontHeight","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Sets drawing texture to a default white texture (vgui/white) via {{LibraryFunction|surface|SetMaterial}}. Useful for resetting the drawing texture.\n\n{{RenderingContext|Function|2D}}","examples":[],"isConstructor":false,"name":"NoTexture","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Radius of the rounded corners, works best with a multiple of 2.","isOptional":false,"isVarArg":false,"name":"cornerRadius","type":"number"},{"default":"","description":"The x coordinate of the top left of the rectangle.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The y coordinate of the top left of the rectangle.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The width of the rectangle.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The height of the rectangle.","isOptional":false,"isVarArg":false,"name":"height","type":"number"},{"default":"","description":"The color to fill the rectangle with. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Draws a rounded rectangle.\n{{Note|If you intend to draw a non-rounded rectangle, then it's more efficient to use {{LibraryFunction|surface|DrawRect}}.}}\n\n{{RenderingContext|Function|2D}}","examples":[],"isConstructor":false,"name":"RoundedBox","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Radius of the rounded corners, works best with a power of 2 number.","isOptional":false,"isVarArg":false,"name":"cornerRadius","type":"number"},{"default":"","description":"The x coordinate of the top left of the rectangle.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The y coordinate of the top left of the rectangle.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The width of the rectangle.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The height of the rectangle.","isOptional":false,"isVarArg":false,"name":"height","type":"number"},{"default":"","description":"The color to fill the rectangle with. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"},{"default":"false","description":"Whether the top left corner should be rounded.","isOptional":true,"isVarArg":false,"name":"roundTopLeft","type":"boolean"},{"default":"false","description":"Whether the top right corner should be rounded.","isOptional":true,"isVarArg":false,"name":"roundTopRight","type":"boolean"},{"default":"false","description":"Whether the bottom left corner should be rounded.","isOptional":true,"isVarArg":false,"name":"roundBottomLeft","type":"boolean"},{"default":"false","description":"Whether the bottom right corner should be rounded.","isOptional":true,"isVarArg":false,"name":"roundBottomRight","type":"boolean"}],"description":"Draws a rounded rectangle. This function also lets you specify which corners are drawn rounded.\n\n{{RenderingContext|Function|2D}}","examples":[],"isConstructor":false,"name":"RoundedBoxEx","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to be drawn.","isOptional":false,"isVarArg":false,"name":"text","type":"string"},{"default":"\"DermaDefault\"","description":"The font. See {{LibraryFunction|surface|CreateFont}} to create your own, or see [[Default Fonts]] for a list of default fonts.","isOptional":true,"isVarArg":false,"name":"font","type":"string"},{"default":"0","description":"The X Coordinate.","isOptional":true,"isVarArg":false,"name":"x","type":"number"},{"default":"0","description":"The Y Coordinate.","isOptional":true,"isVarArg":false,"name":"y","type":"number"},{"default":"Color( 255, 255, 255, 255 )","description":"The color of the text. Uses the {{Struct|Color}}.","isOptional":true,"isVarArg":false,"name":"color","type":"Color"},{"default":"TEXT_ALIGN_LEFT","description":"The alignment of the X coordinate using {{Enum|TEXT_ALIGN}}.","isOptional":true,"isVarArg":false,"name":"xAlign","type":"TEXT_ALIGN"},{"default":"TEXT_ALIGN_TOP","description":"The alignment of the Y coordinate using {{Enum|TEXT_ALIGN}}.","isOptional":true,"isVarArg":false,"name":"yAlign","type":"TEXT_ALIGN"}],"description":"Draws text on the screen.\n\n{{RenderingContext|Function|2D}}","examples":[],"isConstructor":false,"name":"SimpleText","realm":"client and menu","returns":[{"description":"The width of the text. Same value as if you were calling {{LibraryFunction|surface|GetTextSize}}.","type":"number"},{"description":"The height of the text. Same value as if you were calling {{LibraryFunction|surface|GetTextSize}}.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to draw.","isOptional":false,"isVarArg":false,"name":"Text","type":"string"},{"default":"\"DermaDefault\"","description":"The font name to draw with. See {{LibraryFunction|surface|CreateFont}} to create your own, or [[Default_Fonts|here]] for a list of default fonts.","isOptional":true,"isVarArg":false,"name":"font","type":"string"},{"default":"0","description":"The X Coordinate.","isOptional":true,"isVarArg":false,"name":"x","type":"number"},{"default":"0","description":"The Y Coordinate.","isOptional":true,"isVarArg":false,"name":"y","type":"number"},{"default":"Color( 255, 255, 255, 255 )","description":"The color of the text. Uses the {{Struct|Color}}.","isOptional":true,"isVarArg":false,"name":"color","type":"Color"},{"default":"TEXT_ALIGN_LEFT","description":"The alignment of the X Coordinate using {{Enum|TEXT_ALIGN}}.","isOptional":true,"isVarArg":false,"name":"xAlign","type":"TEXT_ALIGN"},{"default":"TEXT_ALIGN_TOP","description":"The alignment of the Y Coordinate using {{Enum|TEXT_ALIGN}}.","isOptional":true,"isVarArg":false,"name":"yAlign","type":"TEXT_ALIGN"},{"default":"","description":"Width of the outline.","isOptional":true,"isVarArg":false,"name":"outlinewidth","type":"number"},{"default":"Color( 255, 255, 255, 255 )","description":"Color of the outline. Uses the {{Struct|Color}}.","isOptional":true,"isVarArg":false,"name":"outlinecolor","type":"Color"}],"description":"Creates a simple line of text that is outlined.\n\n{{RenderingContext|Function|2D}}","examples":[],"isConstructor":false,"name":"SimpleTextOutlined","realm":"client and menu","returns":[{"description":"The width of the text. Same value as if you were calling {{LibraryFunction|surface|GetTextSize}}.","type":"number"},{"description":"The height of the text. Same value as if you were calling {{LibraryFunction|surface|GetTextSize}}.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The text properties. See the {{Struct|TextData}}","isOptional":false,"isVarArg":false,"name":"textdata","type":"TextData"}],"description":"Works like {{LibraryFunction|draw|SimpleText}} but uses a table structure instead.\n\n{{RenderingContext|Function|2D}}","examples":[{"code":"hook.Add( \"HUDPaint\", \"drawTextExample\", function()\n\tdraw.Text( {\n\t\ttext = \"test\",\n\t\tpos = { 50, 50 }\n\t} )\nend )","description":"Example usage"}],"isConstructor":false,"name":"Text","realm":"client and menu","returns":[{"description":"Width of drawn text","type":"number"},{"description":"Height of drawn text","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The text properties. See {{Struct|TextData}}","isOptional":false,"isVarArg":false,"name":"textdata","type":"TextData"},{"default":"","description":"How far away the shadow appears.","isOptional":false,"isVarArg":false,"name":"distance","type":"number"},{"default":"200","description":"How visible the shadow is (0-255).","isOptional":true,"isVarArg":false,"name":"alpha","type":"number"}],"description":"Works like {{LibraryFunction|draw|Text}}, but draws the text as a shadow.\n\n{{RenderingContext|Function|2D}}","examples":[],"isConstructor":false,"name":"TextShadow","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The texture properties. See {{Struct|TextureData}}","isOptional":false,"isVarArg":false,"name":"texturedata","type":"TextureData"}],"description":"Draws a texture with a table structure.\n\n{{RenderingContext|Function|2D}}","examples":[{"code":"local TexturedQuadStructure = {\n\ttexture = surface.GetTextureID( 'phoenix_storms/amraam' ),\n\tcolor   = Color( 255, 0, 255, 255 ),\n\tx \t= 0,\n\ty \t= 0,\n\tw \t= 512,\n\th \t= 512\n}\ndraw.TexturedQuad( TexturedQuadStructure )","description":"Example usage"}],"isConstructor":false,"name":"TexturedQuad","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Size of border, should be multiple of 2. Ideally this will be 8 or 16.","isOptional":false,"isVarArg":false,"name":"bordersize","type":"number"},{"default":"","description":"The X Coordinate.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The Y Coordinate.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"Text to draw.","isOptional":false,"isVarArg":false,"name":"text","type":"string"},{"default":"","description":"Font to draw in. See {{LibraryFunction|surface|CreateFont}} to create your own, or [[Default_Fonts|here]] for a list of default fonts.","isOptional":false,"isVarArg":false,"name":"font","type":"string"},{"default":"","description":"The box color. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"boxcolor","type":"Color"},{"default":"","description":"The text color. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"textcolor","type":"Color"}],"description":"Draws a rounded box with text in it.\n\n{{RenderingContext|Function|2D}}","examples":[],"isConstructor":false,"name":"WordBox","realm":"client and menu","returns":[{"description":"The width of the word box.","type":"number"},{"description":"The height of the word box.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to draw.","isOptional":false,"isVarArg":false,"name":"Text","type":"string"},{"default":"","description":"Width of the outline.","isOptional":false,"isVarArg":false,"name":"outlinewidth","type":"number"}],"description":"Creates a simple line of text that is outlined.\n\n{{RenderingContext|Function|2D}}","examples":[],"isConstructor":false,"name":"SimpleTextOutlined","realm":"client and menu","returns":[{"description":"The width of the text. Same value as if you were calling {{LibraryFunction|surface|GetTextSize}}.","type":"number"},{"description":"The height of the text. Same value as if you were calling {{LibraryFunction|surface|GetTextSize}}.","type":"number"}]}],"isHook":false,"isPureAbstract":false,"name":"draw"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A standard Derma color mixer","examples":[{"code":"local Frame = vgui.Create(\"DFrame\")\nFrame:SetSize(267,186) --good size for example\nFrame:Center()\nFrame:MakePopup()\n\nlocal Mixer = vgui.Create(\"DColorMixer\", Frame)\nMixer:Dock(FILL)\t\t\t--Make Mixer fill place of Frame\nMixer:SetPalette(true)  \t\t--Show/hide the palette\t\t\tDEF:true\nMixer:SetAlphaBar(true) \t\t--Show/hide the alpha bar\t\tDEF:true\nMixer:SetWangs(true)\t \t\t--Show/hide the R G B A indicators \tDEF:true\nMixer:SetColor(Color(30,100,160))\t--Set the default color","description":"Creates a DColorMixer in a DFrame, as seen above"}],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[],"description":"{{Internal}}","examples":[],"isConstructor":false,"name":"ConVarThink","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"cvar","type":"string"}],"description":"{{Internal}}","examples":[],"isConstructor":false,"name":"DoConVarThink","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Return true if alpha bar is shown, false if not.","examples":[],"isConstructor":false,"name":"GetAlphaBar","realm":"client","returns":[{"description":"Return true if shown, false if not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current selected color.","examples":[],"isConstructor":false,"name":"GetColor","realm":"client","returns":[{"description":"The current selected color as a {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[],"description":"Returns the {{Type|ConVar}} name for the alpha channel of the color.\n\nSee also:\n* {{ClassFunction|DColorMixer|GetConVarR}} - For the red channel\n* {{ClassFunction|DColorMixer|GetConVarG}} - For the green channel\n* {{ClassFunction|DColorMixer|GetConVarB}} - For the blue channel","examples":[],"isConstructor":false,"name":"GetConVarA","realm":"client","returns":[{"description":"The {{Type|ConVar}} name for the alpha channel of the color","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the {{Type|ConVar}} name for the blue channel of the color.\n\nSee also:\n* {{ClassFunction|DColorMixer|GetConVarR}} - For the red channel\n* {{ClassFunction|DColorMixer|GetConVarG}} - For the green channel\n* {{ClassFunction|DColorMixer|GetConVarA}} - For the alpha channel","examples":[],"isConstructor":false,"name":"GetConVarB","realm":"client","returns":[{"description":"The {{Type|ConVar}} name for the blue channel of the color","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the {{Type|ConVar}} name for the green channel of the color.\n\nSee also:\n* {{ClassFunction|DColorMixer|GetConVarR}} - For the red channel\n* {{ClassFunction|DColorMixer|GetConVarB}} - For the blue channel\n* {{ClassFunction|DColorMixer|GetConVarA}} - For the alpha channel","examples":[],"isConstructor":false,"name":"GetConVarG","realm":"client","returns":[{"description":"The {{Type|ConVar}} name for the green channel of the color","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the {{Type|ConVar}} name for the red channel of the color.\n\nSee also:\n* {{ClassFunction|DColorMixer|GetConVarG}} - For the green channel\n* {{ClassFunction|DColorMixer|GetConVarB}} - For the blue channel\n* {{ClassFunction|DColorMixer|GetConVarA}} - For the alpha channel","examples":[],"isConstructor":false,"name":"GetConVarR","realm":"client","returns":[{"description":"The {{Type|ConVar}} name for the red channel of the color","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Return true if palette is shown, false if not.","examples":[],"isConstructor":false,"name":"GetPalette","realm":"client","returns":[{"description":"Return true if shown, false if not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the color as a normalized {{Type|Vector}}.","examples":[],"isConstructor":false,"name":"GetVector","realm":"client","returns":[{"description":"A vector representing the color of the {{Type|DColorMixer}}, each value being in range of 0 to 1. Alpha is not included.","type":"DColorMixer"}]},{"accessModifier":"public","arguments":[],"description":"Return true if the wangs are shown, false if not.","examples":[],"isConstructor":false,"name":"GetWangs","realm":"client","returns":[{"description":"Return true if shown, false if not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Show / Hide the alpha bar","isOptional":false,"isVarArg":false,"name":"show","type":"boolean"}],"description":"Show/Hide the alpha bar in DColorMixer","examples":[],"isConstructor":false,"name":"SetAlphaBar","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"{{Struct|Color}}","isOptional":false,"isVarArg":false,"name":"clr","type":"Color"}],"description":"Sets the base color of the {{Type|DColorCube}} part of the {{Type|DColorMixer}}.\n\nSee also {{ClassFunction|DColorCube|SetBaseRGB}}","examples":[],"isConstructor":false,"name":"SetBaseColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The color to set. See {{GlobalFunction|Color}}","isOptional":false,"isVarArg":false,"name":"color","type":"table"}],"description":"Sets the color of the {{Type|DColorMixer}}","examples":[],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|ConVar}} name for the alpha channel of the color","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"Sets the {{Type|ConVar}} name for the alpha channel of the color.\n\nSee also:\n* {{ClassFunction|DColorMixer|SetConVarR}} - For the red channel\n* {{ClassFunction|DColorMixer|SetConVarG}} - For the green channel\n* {{ClassFunction|DColorMixer|SetConVarB}} - For the blue channel","examples":[],"isConstructor":false,"name":"SetConVarA","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|ConVar}} name for the blue channel of the color","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"Sets the {{Type|ConVar}} name for the blue channel of the color.\n\nSee also:\n* {{ClassFunction|DColorMixer|SetConVarR}} - For the red channel\n* {{ClassFunction|DColorMixer|SetConVarG}} - For the green channel\n* {{ClassFunction|DColorMixer|SetConVarA}} - For the alpha channel","examples":[],"isConstructor":false,"name":"SetConVarB","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|ConVar}} name for the green channel of the color","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"Sets the {{Type|ConVar}} name for the green channel of the color.\n\nSee also:\n* {{ClassFunction|DColorMixer|SetConVarR}} - For the red channel\n* {{ClassFunction|DColorMixer|SetConVarB}} - For the blue channel\n* {{ClassFunction|DColorMixer|SetConVarA}} - For the alpha channel","examples":[],"isConstructor":false,"name":"SetConVarG","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|ConVar}} name for the red channel of the color","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"Sets the {{Type|ConVar}} name for the red channel of the color.\n\nSee also:\n* {{ClassFunction|DColorMixer|SetConVarG}} - For the green channel\n* {{ClassFunction|DColorMixer|SetConVarB}} - For the blue channel\n* {{ClassFunction|DColorMixer|SetConVarA}} - For the alpha channel","examples":[],"isConstructor":false,"name":"SetConVarR","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"Set to non empty string to show the label and its text.\n\nGive it an empty string or nothing and the label will be hidden.","isOptional":true,"isVarArg":false,"name":"text","type":"string"}],"description":"Sets the label's text to show.","examples":[],"isConstructor":false,"name":"SetLabel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Show or hide the palette panel?","isOptional":false,"isVarArg":false,"name":"enabled","type":"boolean"}],"description":"Show or hide the palette panel","examples":[],"isConstructor":false,"name":"SetPalette","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The color to set. It is expected that the vector will have values be from 0 to 1. (i.e. be normalized)","isOptional":false,"isVarArg":false,"name":"vec","type":"Vector"}],"description":"Sets the color of {{Type|DColorMixer}} from a {{Type|Vector}}. Alpha is not included.","examples":[],"isConstructor":false,"name":"SetVector","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Show / Hide the colors indicators","isOptional":false,"isVarArg":false,"name":"show","type":"boolean"}],"description":"Show / Hide the colors indicators in DColorMixer","examples":[],"isConstructor":false,"name":"SetWangs","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n{{Deprecated}}\n\nDoes nothing.","examples":[],"isConstructor":false,"name":"TranslateValues","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"clr","type":"table"}],"description":"{{Internal}}\n\nUse {{ClassFunction|DColorMixer|SetColor}} instead!","examples":[],"isConstructor":false,"name":"UpdateColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|ConVar}} name","isOptional":false,"isVarArg":false,"name":"cvar","type":"string"},{"default":"","description":"The color part to set the cvar to. \"r\", \"g\", \"b\" or \"a\".","isOptional":false,"isVarArg":false,"name":"part","type":"string"},{"default":"","description":"The {{Struct|Color}}","isOptional":false,"isVarArg":false,"name":"clr","type":"Color"}],"description":"{{Internal}}\n{{Stub}}","examples":[],"isConstructor":false,"name":"UpdateConVar","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Struct|Color}}","isOptional":false,"isVarArg":false,"name":"clr","type":"Color"}],"description":"{{Internal}}\n{{Stub}}","examples":[],"isConstructor":false,"name":"UpdateConVars","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new color. See {{Struct|Color}}","isOptional":false,"isVarArg":false,"name":"col","type":"Color"}],"description":"Called when the player changes the color of the {{Type|DColorMixer}}.","examples":[],"isConstructor":false,"name":"ValueChanged","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DColorMixer"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The drive library is for adding custom control modes to the new \"remote control\" entity piloting system in Garry's Mod 13.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The view, see {{Struct|ViewData}}","isOptional":false,"isVarArg":false,"name":"view","type":"ViewData"}],"description":"{{Internal}}\nOptionally alter the view.","examples":[],"isConstructor":false,"name":"CalcView","realm":"shared","returns":[{"description":"true if succeeded","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The user command","isOptional":false,"isVarArg":false,"name":"cmd","type":"CUserCmd"}],"description":"{{Internal}}\nClientside, the client creates the cmd (usercommand) from their input device (mouse, keyboard) and then it's sent to the server. Restrict view angles here.","examples":[],"isConstructor":false,"name":"CreateMove","realm":"shared","returns":[{"description":"true if succeeded","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player to affect","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"{{Internal}}\nDestroys players current driving method.","examples":[],"isConstructor":false,"name":"DestroyMethod","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The entity","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Player has stopped driving the entity.","examples":[],"isConstructor":false,"name":"End","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The move data","isOptional":false,"isVarArg":false,"name":"mv","type":"CMoveData"}],"description":"{{Internal}}\nThe move is finished. Copy mv back into the target.","examples":[],"isConstructor":false,"name":"FinishMove","realm":"shared","returns":[{"description":"true if succeeded","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"{{Internal}}\nReturns ( or creates if inexistent ) a driving method.","examples":[],"isConstructor":false,"name":"GetMethod","realm":"shared","returns":[{"description":"A method object.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The move data","isOptional":false,"isVarArg":false,"name":"mv","type":"CMoveData"}],"description":"{{Internal}}\nThe move is executed here.","examples":[],"isConstructor":false,"name":"Move","realm":"shared","returns":[{"description":"true if succeeded","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player to affect","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The entity to drive","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The driving mode","isOptional":false,"isVarArg":false,"name":"mode","type":"string"}],"description":"Starts driving for the player.","examples":[],"isConstructor":false,"name":"PlayerStartDriving","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player to affect","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Stops the player from driving anything. ( For example a prop in sandbox )","examples":[],"isConstructor":false,"name":"PlayerStopDriving","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the drive.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The data required to create the drive. This includes the functions used by the drive.","isOptional":false,"isVarArg":false,"name":"data","type":"table"},{"default":"","description":"The base of the drive.","isOptional":false,"isVarArg":false,"name":"base","type":"string"}],"description":"Registers a new entity drive.","examples":[{"code":"drive.Register( \"drive_noclip\", \n{\n\t--\n\t-- Called before each move. You should use your entity and cmd to \n\t-- fill mv with information you need for your move.\n\t--\n\tStartMove =  function( self, mv, cmd )\n\n\t\t--\n\t\t-- Update move position and velocity from our entity\n\t\t--\n\t\tmv:SetOrigin( self.Entity:GetNetworkOrigin() )\n\t\tmv:SetVelocity( self.Entity:GetAbsVelocity() )\n\n\tend,\n\n\t--\n\t-- Runs the actual move. On the client when there's \n\t-- prediction errors this can be run multiple times.\n\t-- You should try to only change mv.\n\t--\n\tMove = function( self, mv )\n\n\t\t--\n\t\t-- Set up a speed, go faster if shift is held down\n\t\t--\n\t\tlocal speed = 0.0005 * FrameTime()\n\t\tif ( mv:KeyDown( IN_SPEED ) ) then speed = 0.005 * FrameTime() end\n\n\t\t--\n\t\t-- Get information from the movedata\n\t\t--\n\t\tlocal ang = mv:GetMoveAngles()\n\t\tlocal pos = mv:GetOrigin()\n\t\tlocal vel = mv:GetVelocity()\n\n\t\t--\n\t\t-- Add velocities. This can seem complicated. On the first line\n\t\t-- we're basically saying get the forward vector, then multiply it\n\t\t-- by our forward speed (which will be > 0 if we're holding W, < 0 if we're\n\t\t-- holding S and 0 if we're holding neither) - and add that to velocity.\n\t\t-- We do that for right and up too, which gives us our free movement.\n\t\t--\n\t\tvel = vel + ang:Forward() * mv:GetForwardSpeed() * speed\n\t\tvel = vel + ang:Right() * mv:GetSideSpeed() * speed\n\t\tvel = vel + ang:Up() * mv:GetUpSpeed() * speed\n\n\t\t--\n\t\t-- We don't want our velocity to get out of hand so we apply\n\t\t-- a little bit of air resistance. If no keys are down we apply\n\t\t-- more resistance so we slow down more.\n\t\t--\n\t\tif ( math.abs(mv:GetForwardSpeed()) + math.abs(mv:GetSideSpeed()) + math.abs(mv:GetUpSpeed()) < 0.1 ) then\n\t\t\tvel = vel * 0.90\n\t\telse\n\t\t\tvel = vel * 0.99\n\t\tend\n\n\t\t--\n\t\t-- Add the velocity to the position (this is the movement)\n\t\t--\n\t\tpos = pos + vel\n\n\t\t--\n\t\t-- We don't set the newly calculated values on the entity itself\n\t\t-- we instead store them in the movedata. These get applied in FinishMove.\n\t\t--\n\t\tmv:SetVelocity( vel )\n\t\tmv:SetOrigin( pos )\n\n\tend,\n\n\t--\n\t-- The move is finished. Use mv to set the new positions\n\t-- on your entities/players.\n\t--\n\tFinishMove =  function( self, mv )\n\n\t\t--\n\t\t-- Update our entity!\n\t\t--\n\t\tself.Entity:SetNetworkOrigin( mv:GetOrigin() )\n\t\tself.Entity:SetAbsVelocity( mv:GetVelocity() )\n\t\tself.Entity:SetAngles( mv:GetMoveAngles() )\n\n\t\t--\n\t\t-- If we have a physics object update that too. But only on the server.\n\t\t--\n\t\tif ( SERVER && IsValid( self.Entity:GetPhysicsObject() ) ) then\n\n\t\t\tself.Entity:GetPhysicsObject():EnableMotion( true )\n\t\t\tself.Entity:GetPhysicsObject():SetPos( mv:GetOrigin() );\n\t\t\tself.Entity:GetPhysicsObject():Wake()\n\t\t\tself.Entity:GetPhysicsObject():EnableMotion( false )\n\n\t\tend\n\n\tend,\n\n\t--\n\t-- Calculates the view when driving the entity\n\t--\n\tCalcView =  function( self, view )\n\n\t\t--\n\t\t-- Use the utility method on drive_base.lua to give us a 3rd person view\n\t\t--\n\t\tlocal idealdist = math.max( 10, self.Entity:BoundingRadius() ) * 4\n\n\t\tself:CalcView_ThirdPerson( view, idealdist, 2, { self.Entity } )\n\n\tend,\n\n}, \"drive_base\" );","description":"Adds a noclip drive type."}],"isConstructor":false,"name":"Register","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The entity","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called when the player first starts driving this entity","examples":[],"isConstructor":false,"name":"Start","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The move data","isOptional":false,"isVarArg":false,"name":"mv","type":"CMoveData"},{"default":"","description":"The user command","isOptional":false,"isVarArg":false,"name":"cmd","type":"CUserCmd"}],"description":"{{Internal}}\nThe user command is received by the server and then converted into a move. This is also run clientside when in multiplayer, for prediction to work.","examples":[],"isConstructor":false,"name":"StartMove","realm":"shared","returns":[{"description":"true if succeeded","type":"boolean"}]}],"isHook":false,"isPureAbstract":false,"name":"drive"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"The '''DColorPalette''' allows the player to select a color from a list of given colors.\n\nThis panel supports saving across sessions via the panel cookie system.<br/>\nUse {{ClassFunction|Panel|SetCookieName}} to change \"save files\".","examples":[{"code":"local Frame = vgui.Create( \"DFrame\" )\nFrame:SetSize( 170, 200 )\nFrame:Center()\nFrame:MakePopup()\n\nlocal DColorPalette = vgui.Create( \"DColorPalette\", Frame )\nDColorPalette:SetPos( 5, 50 )\nDColorPalette:SetSize( 160, 50 )\n\nlocal DColorButton = vgui.Create( \"DColorButton\", Frame )\nDColorButton:SetSize( 50, 50 )\nDColorButton:SetPos( 60, 100 )\n\n-- This function is assigned AFTER DColorButton is created so we can use the DColorButton\nDColorPalette.OnValueChanged = function( s, value )\n\tDColorButton:SetColor( value )\nend","description":"Creates a DColorPalette in a DFrame, clicking on a color will change the DColorButton's color to the selected color"}],"extends":"DIconLayout","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The new color via the {{Struct|Color}}","isOptional":false,"isVarArg":false,"name":"clr","type":"Color"},{"default":"","description":"The {{Type|DColorButton}} that was pressed.","isOptional":false,"isVarArg":false,"name":"btn","type":"DColorButton"}],"description":"{{Deprecated}}\n\nBasically the same functionality as {{ClassFunction|DColorPalette|OnValueChanged}}, you should use that instead!","examples":[],"isConstructor":false,"name":"DoClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the size of each palette button. Set by {{ClassFunction|DColorPalette|SetButtonSize}}.","examples":[],"isConstructor":false,"name":"GetButtonSize","realm":"client","returns":[{"description":"The size of each palette button","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the {{Type|ConVar}} name for the alpha channel of the color.\n\nSee also:\n* {{ClassFunction|DColorPalette|GetConVarR}} - For the red channel\n* {{ClassFunction|DColorPalette|GetConVarG}} - For the green channel\n* {{ClassFunction|DColorPalette|GetConVarB}} - For the blue channel","examples":[],"isConstructor":false,"name":"GetConVarA","realm":"client","returns":[{"description":"The {{Type|ConVar}} name for the alpha channel of the color","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the {{Type|ConVar}} name for the blue channel of the color.\n\nSee also:\n* {{ClassFunction|DColorPalette|GetConVarR}} - For the red channel\n* {{ClassFunction|DColorPalette|GetConVarG}} - For the green channel\n* {{ClassFunction|DColorPalette|GetConVarA}} - For the alpha channel","examples":[],"isConstructor":false,"name":"GetConVarB","realm":"client","returns":[{"description":"The {{Type|ConVar}} name for the blue channel of the color","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the {{Type|ConVar}} name for the green channel of the color.\n\nSee also:\n* {{ClassFunction|DColorPalette|GetConVarR}} - For the red channel\n* {{ClassFunction|DColorPalette|GetConVarB}} - For the blue channel\n* {{ClassFunction|DColorPalette|GetConVarA}} - For the alpha channel","examples":[],"isConstructor":false,"name":"GetConVarG","realm":"client","returns":[{"description":"The {{Type|ConVar}} name for the green channel of the color","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the {{Type|ConVar}} name for the red channel of the color.\n\nSee also:\n* {{ClassFunction|DColorPalette|GetConVarG}} - For the green channel\n* {{ClassFunction|DColorPalette|GetConVarB}} - For the blue channel\n* {{ClassFunction|DColorPalette|GetConVarA}} - For the alpha channel","examples":[],"isConstructor":false,"name":"GetConVarR","realm":"client","returns":[{"description":"The {{Type|ConVar}} name for the red channel of the color","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetNumRows","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nUsed internally to make sure changes on one palette affect other palettes with same name.","examples":[],"isConstructor":false,"name":"NetworkColorChange","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|DColorButton}} that was pressed.","isOptional":false,"isVarArg":false,"name":"pnl","type":"DColorButton"}],"description":"Called when a palette button has been pressed","examples":[],"isConstructor":false,"name":"OnRightClickButton","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new color of the {{Type|DColorPalette}}","isOptional":false,"isVarArg":false,"name":"newcol","type":"table"}],"description":"Called when the color is changed after clicking a new value.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( ScrW() - 100, ScrH() - 100 )\nframe:Center()\nframe:MakePopup()\n\nlocal palette = vgui.Create( \"DColorPalette\", frame )\npalette:Dock( FILL )\n\nfunction palette:OnValueChanged( newcol )\n\tPrintTable( newcol )\nend","description":"Creates a DFrame with a color palette that prints values after being changed."}],"isConstructor":false,"name":"OnValueChanged","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resets this entire color palette to a default preset one, without saving.\n\nSee {{ClassFunction|DColorPalette|ResetSavedColors}} for version that also saves the changes.","examples":[],"isConstructor":false,"name":"Reset","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resets this entire color palette to a default preset one and saves the changes.\n\nSee {{ClassFunction|DColorPalette|Reset}} for version that does not save the changes.","examples":[],"isConstructor":false,"name":"ResetSavedColors","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The button to save the color of. Used to get the ID of the button.","isOptional":false,"isVarArg":false,"name":"btn","type":"Panel"},{"default":"","description":"The color to save to this button's index","isOptional":false,"isVarArg":false,"name":"clr","type":"table"}],"description":"Saves the color of given button across sessions.\n\nThe color is saved as a panel cookie, see {{ClassFunction|Panel|SetCookie}} and {{ClassFunction|Panel|SetCookieName}}.\n \nIt is expected that the amount of colors per palette ({{ClassFunction|Panel|SetCookieName}}) is the same every time.","examples":[],"isConstructor":false,"name":"SaveColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Sets the new size","isOptional":false,"isVarArg":false,"name":"size","type":"number"}],"description":"Sets the size of each palette button.\n\nThis is best kept to such a number, where this equation would return a whole number:<br>\nWidthOfColorPalette/ButtonSize=WholeNumber\n\nIf not, there will be ugly whitespace on the right side of the panel.","examples":[],"isConstructor":false,"name":"SetButtonSize","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"clr","type":"table"}],"description":"{{Deprecated}}\n\nCurrently does nothing. Intended to \"select\" the color.","examples":[],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A number indexed table where each value is a {{Struct|Color}}","isOptional":false,"isVarArg":false,"name":"tab","type":"Color"}],"description":"Clears the palette and adds new buttons with given colors.","examples":[],"isConstructor":false,"name":"SetColorButtons","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|ConVar}} name for the alpha channel of the color","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"Sets the {{Type|ConVar}} name for the alpha channel of the color.\n\nSee also:\n* {{ClassFunction|DColorPalette|SetConVarR}} - For the red channel\n* {{ClassFunction|DColorPalette|SetConVarG}} - For the green channel\n* {{ClassFunction|DColorPalette|SetConVarB}} - For the blue channel","examples":[],"isConstructor":false,"name":"SetConVarA","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|ConVar}} name for the blue channel of the color","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"Sets the {{Type|ConVar}} name for the blue channel of the color.\n\nSee also:\n* {{ClassFunction|DColorPalette|SetConVarR}} - For the red channel\n* {{ClassFunction|DColorPalette|SetConVarG}} - For the green channel\n* {{ClassFunction|DColorPalette|SetConVarA}} - For the alpha channel","examples":[],"isConstructor":false,"name":"SetConVarB","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|ConVar}} name for the green channel of the color","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"Sets the {{Type|ConVar}} name for the green channel of the color.\n\nSee also:\n* {{ClassFunction|DColorPalette|SetConVarR}} - For the red channel\n* {{ClassFunction|DColorPalette|SetConVarB}} - For the blue channel\n* {{ClassFunction|DColorPalette|SetConVarA}} - For the alpha channel","examples":[],"isConstructor":false,"name":"SetConVarG","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|ConVar}} name for the red channel of the color","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"Sets the {{Type|ConVar}} name for the red channel of the color.\n\nSee also:\n* {{ClassFunction|DColorPalette|SetConVarG}} - For the green channel\n* {{ClassFunction|DColorPalette|SetConVarB}} - For the blue channel\n* {{ClassFunction|DColorPalette|SetConVarA}} - For the alpha channel","examples":[],"isConstructor":false,"name":"SetConVarR","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"rows","type":"number"}],"description":"","examples":[],"isConstructor":false,"name":"SetNumRows","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the console variable to set","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The key of the 3rd argument to set the convar to\nPossible values: \"r\", \"g\", \"b\", \"a\"","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"","description":"The {{Struct|Color}} to retrieve the info from.","isOptional":false,"isVarArg":false,"name":"clr","type":"Color"}],"description":"{{Internal}}\n\nInternal helper function for {{ClassFunction|DColorPalette|UpdateConVars}}.","examples":[],"isConstructor":false,"name":"UpdateConVar","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A {{Struct|Color}}","isOptional":false,"isVarArg":false,"name":"clr","type":"Color"}],"description":"{{Internal}}\n\nUpdates all the console variables set by {{ClassFunction|DColorPalette|SetConVarR}} and so on with given color.\n\nCalled internally when a palette color is clicked.","examples":[],"isConstructor":false,"name":"UpdateConVars","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DColorPalette"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Similar to {{Type|DPropertySheet}}, but with tabs on the left.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 500, 300 )\nframe:Center()\nframe:MakePopup()\n\nlocal sheet = vgui.Create( \"DColumnSheet\", frame )\nsheet:Dock( FILL )\n\nlocal panel1 = vgui.Create( \"DPanel\", sheet )\npanel1:Dock( FILL )\npanel1.Paint = function( self, w, h ) draw.RoundedBox( 4, 0, 0, w, h, Color( 0, 128, 255 ) ) end \nsheet:AddSheet( \"test\", panel1, \"icon16/cross.png\" )\n\nlocal panel2 = vgui.Create( \"DPanel\", sheet )\npanel2:Dock( FILL )\npanel2.Paint = function( self, w, h ) draw.RoundedBox( 4, 0, 0, w, h, Color( 255, 128, 0 ) ) end \nsheet:AddSheet( \"test 2\", panel2, \"icon16/tick.png\" )","description":"Example of how you'd use this panel"}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Name of the column/tab","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Panel to be used as contents of the tab. This normally would be a {{Type|DPanel}}","isOptional":false,"isVarArg":false,"name":"pnl","type":"DPanel"},{"default":"nil","description":"Icon for the tab. This will ideally be a [[Silkicons|silkicon]], but any material name can be used.","isOptional":true,"isVarArg":false,"name":"icon","type":"string"}],"description":"Adds a new column/tab.","examples":[],"isConstructor":false,"name":"AddSheet","realm":"client","returns":[{"description":"A table containing the following keys:\n* {{FuncArg|Panel|Button|The created tab button that will switch to the given panel}}\n* {{FuncArg|Panel|Panel|The given panel to switch to when the button is pressed}}","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the active button of this {{Type|DColumnSheet}}.","examples":[],"isConstructor":false,"name":"GetActiveButton","realm":"client","returns":[{"description":"The active button","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The button to make active button","isOptional":false,"isVarArg":false,"name":"active","type":"Panel"}],"description":"{{Internal}}\n\nMakes a button an active button for this {{Type|DColumnSheet}}.","examples":[],"isConstructor":false,"name":"SetActiveButton","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Makes the tabs/buttons show only the image and no text.","examples":[],"isConstructor":false,"name":"UseButtonOnlyStyle","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DColumnSheet"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The duplicator library allows you to specify what should be saved when someone attempts to duplicate your custom entity with the duplicator tool. It can also be used by 3rd party duplicator tools to make use of the built in system.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"An entity's classname","isOptional":false,"isVarArg":false,"name":"classname","type":"string"}],"description":"Allow this entity to be duplicated","examples":[],"isConstructor":false,"name":"Allow","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player whose entity this is","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The entity in question","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Calls every function registered with {{LibraryFunction|duplicator|RegisterBoneModifier}} on each bone the ent has.","examples":[],"isConstructor":false,"name":"ApplyBoneModifiers","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player whose entity this is","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The entity in question","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Calls every function registered with {{LibraryFunction|duplicator|RegisterEntityModifier}} on the entity.","examples":[],"isConstructor":false,"name":"ApplyEntityModifiers","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity the modification is stored on","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The key of the stored entity modifier","isOptional":false,"isVarArg":false,"name":"key","type":"any"}],"description":"Clears/removes the chosen entity modifier from the entity.","examples":[],"isConstructor":false,"name":"ClearEntityModifier","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to duplicate. The function will automatically copy all constrained entities.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"{}","description":"A preexisting table to add entities and constraints in from.\nUses the same table format as the table returned from this function.","isOptional":true,"isVarArg":false,"name":"tableToAdd","type":"table"}],"description":"Copies the entity, and all of its constraints and entities, then returns them in a table.","examples":[],"isConstructor":false,"name":"Copy","realm":"server","returns":[{"description":"A table containing duplication info which includes the following members:\n* {{FuncArg|table|Entities}}\n* {{FuncArg|table|Constraints}}\n* {{FuncArg|Vector|Mins}}\n* {{FuncArg|Vector|Maxs}}\n\nThe values of Mins & Maxs from the table are returned from {{LibraryFunction|duplicator|WorkoutSize}}","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"A table of entities to save/copy.","isOptional":false,"isVarArg":false,"name":"ents","type":"table"}],"description":"Copies the passed table of entities to save for later.","examples":[],"isConstructor":false,"name":"CopyEnts","realm":"server","returns":[{"description":"A table containing duplication info which includes the following members:\n* {{FuncArg|table|Entities}}\n* {{FuncArg|table|Constraints}}\n* {{FuncArg|Vector|Mins}}\n* {{FuncArg|Vector|Maxs}}","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity table to save","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Returns a table with some entity data that can be used to create a new entity with {{LibraryFunction|duplicator|CreateEntityFromTable}}","examples":[],"isConstructor":false,"name":"CopyEntTable","realm":"server","returns":[{"description":"See {{Struct|EntityCopyData}}","type":"EntityCopyData"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Saved/copied constraint table","isOptional":false,"isVarArg":false,"name":"constraint","type":"table"},{"default":"","description":"The list of entities that are to be constrained","isOptional":false,"isVarArg":false,"name":"entityList","type":"table"}],"description":"{{Internal}} Creates a constraint from a saved/copied constraint table.","examples":[],"isConstructor":false,"name":"CreateConstraintFromTable","realm":"server","returns":[{"description":"The newly created constraint entity","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who wants to create something","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The duplication data to build the entity with. See {{Struct|EntityCopyData}}","isOptional":false,"isVarArg":false,"name":"entTable","type":"EntityCopyData"}],"description":"\"Create an entity from a table.\" <br/>\nThis creates an entity using the data in EntTable.<br/>\nIf an entity factory has been registered for the entity's Class, it will be called. <br/>\nOtherwise, {{LibraryFunction|duplicator|GenericDuplicatorFunction}} will be called instead.","examples":[],"isConstructor":false,"name":"CreateEntityFromTable","realm":"server","returns":[{"description":"The newly created entity","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to be bone manipulated","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"Table with a {{Struct|BoneManipulationData}} for every bone (that has manipulations applied) using the bone ID as the table index.","isOptional":false,"isVarArg":false,"name":"bones","type":"BoneManipulationData"}],"description":"\"Restores the bone's data.\"<br/>\nLoops through Bones and calls {{ClassFunction|Entity|ManipulateBoneScale}}, {{ClassFunction|Entity|ManipulateBoneAngles}} and {{ClassFunction|Entity|ManipulateBonePosition}} on ent with the table keys and the subtable values s, a and p respectively.","examples":[],"isConstructor":false,"name":"DoBoneManipulator","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to restore the flexes on","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The flexes to restore","isOptional":false,"isVarArg":false,"name":"flex","type":"table"},{"default":"nil","description":"The flex scale to apply. (Flex scale is unchanged if omitted)","isOptional":true,"isVarArg":false,"name":"scale","type":"number"}],"description":"Restores the flex data using {{ClassFunction|Entity|SetFlexWeight}} and {{ClassFunction|Entity|SetFlexScale}}","examples":[],"isConstructor":false,"name":"DoFlex","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to be applied upon","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The data to be applied onto the entity","isOptional":false,"isVarArg":false,"name":"data","type":"table"}],"description":"\"Applies generic every-day entity stuff for ent from table data.\"<br/>\nDepending on the values of Model, Angle, Pos, Skin, Flex, Bonemanip, ModelScale, ColGroup, Name, and BodyG ({{Type|table}} of multiple values) in the data table, this calls {{ClassFunction|Entity|SetModel}}, {{ClassFunction|Entity|SetAngles}}, {{ClassFunction|Entity|SetPos}}, {{ClassFunction|Entity|SetSkin}}, {{LibraryFunction|duplicator|DoFlex}}, {{LibraryFunction|duplicator|DoBoneManipulator}}, {{ClassFunction|Entity|SetModelScale}}, {{ClassFunction|Entity|SetCollisionGroup}}, {{ClassFunction|Entity|SetName}}, {{ClassFunction|Entity|SetBodygroup}} on ent.<br/>\nIf ent has a RestoreNetworkVars function, it is called with data.DT.","examples":[],"isConstructor":false,"name":"DoGeneric","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to be applied upon","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"nil","description":"The player who owns the entity. Unused in function as of early 2013","isOptional":true,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The data to be applied onto the entity","isOptional":true,"isVarArg":false,"name":"data","type":"table"}],"description":"\"Applies bone data, generically.\"<br/>\nIf data contains a PhysicsObjects table, it moves, re-angles and if relevent freezes all specified bones, first converting from local coordinates to world coordinates.","examples":[],"isConstructor":false,"name":"DoGenericPhysics","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the entity class factory","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Returns the entity class factory registered with {{LibraryFunction|duplicator|RegisterEntityClass}}.","examples":[],"isConstructor":false,"name":"FindEntityClass","realm":"shared","returns":[{"description":"Is compromised of the following members:\n* {{FuncArg|function|Func|The function that creates the entity}}\n* {{FuncArg|table|Args|Arguments to pass to the function}}","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who wants to create something","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The duplication data to build the entity with","isOptional":false,"isVarArg":false,"name":"data","type":"table"}],"description":"\"Generic function for duplicating stuff\" <br/>\nThis is called when {{LibraryFunction|duplicator|CreateEntityFromTable}} can't find an entity factory to build with. It calls {{LibraryFunction|duplicator|DoGeneric}} and {{LibraryFunction|duplicator|DoGenericPhysics}} to apply standard duplicator stored things such as the model and position.","examples":[],"isConstructor":false,"name":"GenericDuplicatorFunction","realm":"server","returns":[{"description":"The newly created entity","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to start from","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The table the entities will be inserted into","isOptional":false,"isVarArg":false,"name":"entStorageTable","type":"table"},{"default":"","description":"The table the constraints will be inserted into","isOptional":false,"isVarArg":false,"name":"constraintStorageTable","type":"table"}],"description":"{{Internal}} Fills entStorageTable with all of the entities in a group connected with constraints. Fills constraintStorageTable with all of the constrains constraining the group.","examples":[],"isConstructor":false,"name":"GetAllConstrainedEntitiesAndConstraints","realm":"server","returns":[{"description":"entStorageTable","type":"table"},{"description":"constraintStorageTable","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"An entity's classname","isOptional":false,"isVarArg":false,"name":"classname","type":"string"}],"description":"Returns whether the entity can be duplicated or not","examples":[],"isConstructor":false,"name":"IsAllowed","realm":"shared","returns":[{"description":"Returns true if the entity can be duplicated (nil otherwise)","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who wants to create something","isOptional":false,"isVarArg":false,"name":"Player","type":"Player"},{"default":"","description":"A table of duplicator data to create the entities from","isOptional":false,"isVarArg":false,"name":"EntityList","type":"table"},{"default":"","description":"A table of duplicator data to create the constraints from","isOptional":false,"isVarArg":false,"name":"ConstraintList","type":"table"}],"description":"\"Given entity list and constraint list, create all entities and return their tables\"\n\nCalls {{LibraryFunction|duplicator|CreateEntityFromTable}} on each sub-table of EntityList. If an entity is actually created, it calls {{HookFunction|ENTITY|OnDuplicated}} with the entity's duplicator data, then {{LibraryFunction|duplicator|ApplyEntityModifiers}}, {{LibraryFunction|duplicator|ApplyBoneModifiers}} and finally  {{HookFunction|ENTITY|PostEntityPaste}} is called.\n\nThe constraints are then created with {{LibraryFunction|duplicator|CreateConstraintFromTable}}.","examples":[{"code":"function TOOL:LeftClick( trace )\n\tif (SERVER) then\n\t\tduplicator.Paste(self:GetOwner(),Dupe.Entities,Dupe.Constraints)\n\t\tprint(\"PASTED\")\n\tend\n\treturn true\nend\n \nfunction TOOL:RightClick( trace )\n\tif (SERVER and IsValid(trace.Entity)) then\n\t\tDupe = duplicator.Copy(trace.Entity)\n\t\tprint(\"COPIED\")\n\tend\n\treturn true\nend","description":"Code used for a TOOL to copy duplication data on right click and paste it with its original info on left click."}],"isConstructor":false,"name":"Paste","realm":"server","returns":[{"description":"List of created entities","type":"table"},{"description":"List of created constraints","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The type of the key doesn't appear to matter, but it is preferable to use a string.","isOptional":false,"isVarArg":false,"name":"key","type":"any"},{"default":"","description":"Function called on each bone that an ent has. Called during {{LibraryFunction|duplicator|ApplyBoneModifiers}}.\nFunction parameters are:\n* {{FuncArg|Player|ply}}\n* {{FuncArg|Entity|ent}}\n* {{FuncArg|number|boneID}}\n* {{FuncArg|PhysObj|bone}}\n* {{FuncArg|table|data}}\n\n\nThe data table that is passed to boneModifier is set with {{LibraryFunction|duplicator|StoreBoneModifier}}","isOptional":false,"isVarArg":false,"name":"boneModifier","type":"Function"}],"description":"Registers a function to be called on each of an entity's bones when {{LibraryFunction|duplicator|ApplyBoneModifiers}} is called.\n\n{{Note|This function is available to call on the client, but registered functions aren't used anywhere!}}","examples":[],"isConstructor":false,"name":"RegisterBoneModifier","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique name of new constraint","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Function to be called when this constraint is created","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"},{"default":"","description":"Arguments passed to the callback function","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Register a function used for creating a duplicated constraint.","examples":[{"code":"duplicator.RegisterConstraint( \"Weld\", Weld, \"Ent1\", \"Ent2\", \"Bone1\", \"Bone2\", \"forcelimit\", \"nocollide\", \"deleteonbreak\" )","description":"This is from lua/includes/modules/constraint.lua, it registers the Weld Constraint."}],"isConstructor":false,"name":"RegisterConstraint","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The ClassName of the entity you wish to register a factory for","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The factory function you want to have called. It should have the arguments (Player, ...) where ... is whatever arguments you request to be passed.","isOptional":false,"isVarArg":false,"name":"func","type":"Function"},{"default":"","description":"Strings of the names of arguments you want passed to function the from the {{Struct|EntityCopyData}}. As a special case, \"Data\" will pass the whole structure.","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"This allows you to specify a specific function to be run when your SENT is pasted with the duplicator, instead of relying on the generic automatic functions.\n\n{{Note|Automatically calls {{LibraryFunction|duplicator|Allow}} for the entity class.}}","examples":[{"code":"duplicator.RegisterEntityClass(\"prop_physics\", function(ply, data)\n\tPrintTable(data)\n\tduplicator.GenericDuplicatorFunction(ply, data)\nend, \"Data\")","description":"Prints the datatable and then lets the duplicator do it's job"}],"isConstructor":false,"name":"RegisterEntityClass","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"An identifier for your modification. This is not limited, so be verbose. \"Person's 'Unbreakable' mod\" is far less likely to cause conflicts than \"unbreakable\"","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The function to be called for your modification. It should have the arguments (Player, Entity, Data), where data is what you pass to {{LibraryFunction|duplicator|StoreEntityModifier}}.","isOptional":false,"isVarArg":false,"name":"func","type":"Function"}],"description":"This allows you to register tweaks to entities. For instance, if you were making an \"unbreakable\" addon, you would use this to enable saving the \"unbreakable\" state of entities between duplications.\n\nThis function registers a piece of generic code that is run on all entities with this modifier. In order to have it actually run, use {{LibraryFunction|duplicator|StoreEntityModifier}}.\n\nThis function does nothing when run clientside.","examples":[],"isConstructor":false,"name":"RegisterEntityModifier","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Help to remove certain map created entities before creating the saved entities\nThis is obviously so we don't get duplicate props everywhere.\nIt should be called before calling Paste.","examples":[],"isConstructor":false,"name":"RemoveMapCreatedEntities","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The angle to offset all pastes from","isOptional":false,"isVarArg":false,"name":"v","type":"Angle"}],"description":"\"When a copy is copied it will be translated according to these.\nIf you set them - make sure to set them back to 0 0 0!\"","examples":[],"isConstructor":false,"name":"SetLocalAng","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to offset all pastes from","isOptional":false,"isVarArg":false,"name":"v","type":"Vector"}],"description":"\"When a copy is copied it will be translated according to these.\nIf you set them - make sure to set them back to 0 0 0!\"","examples":[],"isConstructor":false,"name":"SetLocalPos","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to add bone mod data to","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The bone ID.\nSee {{ClassFunction|Entity|GetPhysicsObjectNum}}","isOptional":false,"isVarArg":false,"name":"boneID","type":"number"},{"default":"","description":"The key for the bone modification","isOptional":false,"isVarArg":false,"name":"key","type":"any"},{"default":"","description":"The bone modification data that is passed to the bone modification function","isOptional":false,"isVarArg":false,"name":"data","type":"table"}],"description":"Stores bone mod data for a registered bone modification function","examples":[],"isConstructor":false,"name":"StoreBoneModifier","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to store modifier in","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"},{"default":"","description":"Unique modifier name as defined in {{LibraryFunction|duplicator|RegisterEntityModifier}}","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Modifier data","isOptional":false,"isVarArg":false,"name":"data","type":"table"}],"description":"Stores an entity modifier into an entity for saving","examples":[],"isConstructor":false,"name":"StoreEntityModifier","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A table of entity duplication datums.","isOptional":false,"isVarArg":false,"name":"Ents","type":"table"}],"description":"\"Work out the AABB size\"","examples":[],"isConstructor":false,"name":"WorkoutSize","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to be applied upon","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The data to be applied onto the entity","isOptional":false,"isVarArg":false,"name":"data","type":"table"}],"description":"\"Applies bone data, generically.\"<br/>\nIf data contains a PhysicsObjects table, it moves, re-angles and if relevent freezes all specified bones, first converting from local coordinates to world coordinates.","examples":[],"isConstructor":false,"name":"DoGenericPhysics","realm":"server","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"duplicator"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The effects library allows you to manually add scripted effects.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Effect name.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"{{Internal|You are looking for {{LibraryFunction|util|Effect}}.}}Returns the table of the effect specified.","examples":[],"isConstructor":false,"name":"Create","realm":"client","returns":[{"description":"Effect table.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Effect table.","isOptional":false,"isVarArg":false,"name":"effect_table","type":"table"},{"default":"","description":"Effect name.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"{{Internal}}Registers a new effect.","examples":[],"isConstructor":false,"name":"Register","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"effects"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"An object returned by {{Lib|navmesh}} functions.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Adds this {{Type|CNavArea}} to the closed list, a list of areas that have been checked by A* pathfinding algorithm.\n\nUsed in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].<br/>\nMore information can be found on the [[Simple Pathfinding]] page.","examples":[],"isConstructor":false,"name":"AddToClosedList","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Adds this {{Type|CNavArea}} to the Open List.\n\nUsed in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].<br/>\nMore information can be found on the [[Simple Pathfinding]] page.","examples":[],"isConstructor":false,"name":"AddToOpenList","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Clears the open and closed lists for a new search.\n\nUsed in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].<br/>\nMore information can be found on the [[Simple Pathfinding]] page.","examples":[],"isConstructor":false,"name":"ClearSearchLists","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"navarea","type":"CNavArea"}],"description":"Returns the height difference between the edges of two connected navareas.","examples":[],"isConstructor":false,"name":"ComputeAdjacentConnectionHeightChange","realm":"server","returns":[{"description":"The height change","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to compute direction towards.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Returns the {{Enum|NavDir}} direction that the given vector faces on this {{Type|CNavArea}}.","examples":[],"isConstructor":false,"name":"ComputeDirection","realm":"server","returns":[{"description":"The direction the vector is in relation to this {{Type|CNavArea}}. See {{Enum|NavDir}}.","type":"NavDir"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The nav area to test against.","isOptional":false,"isVarArg":false,"name":"navArea","type":"CNavArea"}],"description":"Returns the height difference on the Z axis of the two {{Type|CNavArea}}s. This is calculated from the center most point on both {{Type|CNavArea}}s.","examples":[],"isConstructor":false,"name":"ComputeGroundHeightChange","realm":"server","returns":[{"description":"The ground height change.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|CNavArea}} or {{Type|CNavLadder}} this area leads to.","isOptional":false,"isVarArg":false,"name":"area","type":"CNavArea | CNavLadder"}],"description":"Connects this {{Type|CNavArea}} to another {{Type|CNavArea}} or {{Type|CNavLadder}} with a one way connection. ( From this area to the target )\n\nSee {{ClassFunction|CNavLadder|ConnectTo}} for making the connection from ladder to area.","examples":[],"isConstructor":false,"name":"ConnectTo","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to test.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Returns true if this {{Type|CNavArea}} contains the given vector.","examples":[],"isConstructor":false,"name":"Contains","realm":"server","returns":[{"description":"True if the vector was inside and false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|CNavArea}} or {{Type|CNavLadder}} this to disconnect from.","isOptional":false,"isVarArg":false,"name":"area","type":"CNavArea | CNavLadder"}],"description":"Disconnects this nav area from given area or ladder. (Only disconnects one way)","examples":[],"isConstructor":false,"name":"Disconnect","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Draws this navarea on debug overlay.","examples":[],"isConstructor":false,"name":"Draw","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Draws the hiding spots on debug overlay. This includes sniper/exposed spots too!","examples":[],"isConstructor":false,"name":"DrawSpots","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns a table of all the {{Type|CNavArea}}s that have a  ( one and two way ) connection '''from''' this {{Type|CNavArea}}.\n\nIf an area has a one-way incoming connection to this {{Type|CNavArea}}, then it will '''not''' be returned from this function, use {{ClassFunction|CNavArea|GetIncomingConnections}} to get all one-way incoming connections.\n\nSee {{ClassFunction|CNavArea|GetAdjacentAreasAtSide}} for a function that only returns areas from one side/direction.","examples":[],"isConstructor":false,"name":"GetAdjacentAreas","realm":"server","returns":[{"description":"A table of all {{Type|CNavArea}} that have a ( one and two way ) connection '''from''' this {{Type|CNavArea}}. <br/>Returns an empty table if this area has no outgoing connections to any other areas.","type":"CNavArea[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The direction, in which to look for {{Type|CNavArea}}s, see {{Enum|NavDir}}.","isOptional":false,"isVarArg":false,"name":"navDir","type":"NavDir"}],"description":"Returns a table of all the {{Type|CNavArea}}s that have a ( one and two way ) connection '''from''' this {{Type|CNavArea}} in given direction.\n\nIf an area has a one-way incoming connection to this {{Type|CNavArea}}, then it will '''not''' be returned from this function, use {{ClassFunction|CNavArea|GetIncomingConnections}} to get all incoming connections.\n\nSee {{ClassFunction|CNavArea|GetAdjacentAreas}} for a function that returns all areas from all sides/directions.","examples":[],"isConstructor":false,"name":"GetAdjacentAreasAtSide","realm":"server","returns":[{"description":"A table of all {{Type|CNavArea}} that have a ( one and two way ) connection '''from''' this {{Type|CNavArea}} in given direction.<br/>Returns an empty table if this area has no outgoing connections to any other areas in given direction.","type":"CNavArea[]"}]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of {{Type|CNavArea}}s that have a connection ( one and two way ) '''from''' this {{Type|CNavArea}}.\n\nSee {{ClassFunction|CNavArea|GetAdjacentCountAtSide}} for a function that only returns area count from one side/direction.","examples":[],"isConstructor":false,"name":"GetAdjacentCount","realm":"server","returns":[{"description":"The amount of {{Type|CNavArea}}s that have a connection ( one and two way ) '''from''' this {{Type|CNavArea}}.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The direction, in which to look for {{Type|CNavArea}}s, see {{Enum|NavDir}}.","isOptional":false,"isVarArg":false,"name":"navDir","type":"NavDir"}],"description":"Returns the amount of {{Type|CNavArea}}s that have a connection ( one or two way ) '''from''' this {{Type|CNavArea}} in given direction.\n\nSee {{ClassFunction|CNavArea|GetAdjacentCount}} for a function that returns {{Type|CNavArea}} count from/in all sides/directions.","examples":[],"isConstructor":false,"name":"GetAdjacentCountAtSide","realm":"server","returns":[{"description":"The amount of {{Type|CNavArea}}s that have a connection ( one or two way ) '''from''' this {{Type|CNavArea}} in given direction.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the attribute mask for the given {{Type|CNavArea}}.","examples":[],"isConstructor":false,"name":"GetAttributes","realm":"server","returns":[{"description":"Attribute mask for this {{Type|CNavArea}}, see {{Enum|NAV_MESH}} for the specific flags.\n\n\n{{Note|A navmesh that was generated with nav_quicksave set to 1 will have all {{Type|CNavArea}}s attribute masks set to 0}}","type":"CNavArea | CNavArea"}]},{"accessModifier":"public","arguments":[],"description":"Returns the center most vector point for the given {{Type|CNavArea}}.","examples":[],"isConstructor":false,"name":"GetCenter","realm":"server","returns":[{"description":"The center vector.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The given position, can be outside of the Nav Area bounds.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Returns the closest point of this Nav Area from the given position.","examples":[],"isConstructor":false,"name":"GetClosestPointOnArea","realm":"server","returns":[{"description":"The closest position on this Nav Area.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The target corner to get the position of, takes {{Enum|NavCorner}}.","isOptional":false,"isVarArg":false,"name":"cornerid","type":"NavCorner"}],"description":"Returns the vector position of the corner for the given {{Type|CNavArea}}.","examples":[],"isConstructor":false,"name":"GetCorner","realm":"server","returns":[{"description":"The corner position.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the cost from starting area this area when pathfinding. Set by {{ClassFunction|CNavArea|SetCostSoFar}}.\n\nUsed in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].<br/>\nMore information can be found on the [[Simple Pathfinding]] page.","examples":[],"isConstructor":false,"name":"GetCostSoFar","realm":"server","returns":[{"description":"The cost so far.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table of very bad hiding spots in this area","examples":[],"isConstructor":false,"name":"GetExposedSpots","realm":"server","returns":[{"description":"A table of {{Type|Vector}}s","type":"Vector[]"}]},{"accessModifier":"public","arguments":[],"description":"Returns size info about the nav area.","examples":[],"isConstructor":false,"name":"GetExtentInfo","realm":"server","returns":[{"description":"Returns a table containing the following keys:\n* {{FuncArg|Vector|hi|}}\n* {{FuncArg|Vector|lo|}}\n* {{FuncArg|number|SizeX|}}\n* {{FuncArg|number|SizeY|}}\n* {{FuncArg|number|SizeZ|}}","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table of good hiding spots in this area","examples":[],"isConstructor":false,"name":"GetHidingSpots","realm":"server","returns":[{"description":"A table of {{Type|Vector}}s","type":"Vector[]"}]},{"accessModifier":"public","arguments":[],"description":"Returns this {{Type|CNavArea}}s unique ID.","examples":[],"isConstructor":false,"name":"GetID","realm":"server","returns":[{"description":"The unique ID.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table of all the {{Type|CNavArea}}s that have a one-way connection '''to''' this {{Type|CNavArea}}.\n\nIf a {{Type|CNavArea}} has a two-way connection '''to or from''' this {{Type|CNavArea}} then it will not be returned from this function, use {{ClassFunction|CNavArea|GetAdjacentAreas}} to get outgoing ( one and two way ) connections.\n\nSee {{ClassFunction|CNavArea|GetIncomingConnectionsAtSide}} for a function that returns one-way incoming connections from  only one side/direction.","examples":[],"isConstructor":false,"name":"GetIncomingConnections","realm":"server","returns":[{"description":"A table of all {{Type|CNavArea}}s with one-way connection '''to''' this {{Type|CNavArea}}.<br/>Returns an empty table if there are no one-way incoming connections '''to''' this {{Type|CNavArea}}.","type":"CNavArea[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The direction, from which to look for {{Type|CNavArea}}s, see {{Enum|NavDir}}.","isOptional":false,"isVarArg":false,"name":"navDir","type":"NavDir"}],"description":"Returns a table of all the {{Type|CNavArea}}s that have a one-way connection '''to''' this {{Type|CNavArea}} from given direction.\n\nIf a {{Type|CNavArea}} has a two-way connection '''to or from''' this {{Type|CNavArea}} then it will not be returned from this function, use {{ClassFunction|CNavArea|GetAdjacentAreas}} to get outgoing ( one and two way ) connections.\n\nSee {{ClassFunction|CNavArea|GetIncomingConnections}} for a function that returns one-way incoming connections from  all sides/directions.","examples":[],"isConstructor":false,"name":"GetIncomingConnectionsAtSide","realm":"server","returns":[{"description":"A table of all {{Type|CNavArea}}s with one-way connection '''to''' this {{Type|CNavArea}} from given direction.<br/>Returns an empty table if there are no one-way incoming connections '''to''' this {{Type|CNavArea}} from given direction.","type":"CNavArea[]"}]},{"accessModifier":"public","arguments":[],"description":"Returns all {{Type|CNavLadder}}s that have a ( one or two way ) connection '''from''' this {{Type|CNavArea}}.\n\nSee {{ClassFunction|CNavArea|GetLaddersAtSide}} for a function that only returns {{Type|CNavLadder}}s in given direction.","examples":[],"isConstructor":false,"name":"GetLadders","realm":"server","returns":[{"description":"The {{Type|CNavLadder}}s that have a ( one or two way ) connection '''from''' this {{Type|CNavArea}}.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The direction, in which to look for {{Type|CNavLadder}}s.\n\n0 = Up ( LadderDirectionType::LADDER_UP )\n1 = Down ( LadderDirectionType::LADDER_DOWN )","isOptional":false,"isVarArg":false,"name":"navDir","type":"number"}],"description":"Returns all {{Type|CNavLadder}}s that have a ( one or two way ) connection '''from''' ( one and two way ) this {{Type|CNavArea}} in given direction.\n\nSee {{ClassFunction|CNavArea|GetLadders}} for a function that returns {{Type|CNavLadder}} from/in all sides/directions.","examples":[],"isConstructor":false,"name":"GetLaddersAtSide","realm":"server","returns":[{"description":"The {{Type|CNavLadder}}s that have a ( one or two way ) connection '''from''' this {{Type|CNavArea}} in given direction.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the parent {{Type|CNavArea}}","examples":[],"isConstructor":false,"name":"GetParent","realm":"server","returns":[{"description":"The parent {{Type|CNavArea}}","type":"CNavArea"}]},{"accessModifier":"public","arguments":[],"description":"Returns how this {{Type|CNavArea}} is connected to its parent.","examples":[],"isConstructor":false,"name":"GetParentHow","realm":"server","returns":[{"description":"See {{Enum|NavTraverseType}}","type":"NavTraverseType"}]},{"accessModifier":"public","arguments":[],"description":"Returns the Place of the nav area.","examples":[],"isConstructor":false,"name":"GetPlace","realm":"server","returns":[{"description":"The place of the nav area, or no value if it doesn't have a place set.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The direction, in which to look for {{Type|CNavArea}}s, see {{Enum|NavDir}}.","isOptional":false,"isVarArg":false,"name":"navDir","type":"NavDir"}],"description":"Returns a random {{Type|CNavArea}} that has an outgoing ( one or two way ) connection '''from''' this {{Type|CNavArea}} in given direction.","examples":[],"isConstructor":false,"name":"GetRandomAdjacentAreaAtSide","realm":"server","returns":[{"description":"The random {{Type|CNavArea}} that has an outgoing ( one or two way ) connection '''from''' this {{Type|CNavArea}} in given direction, if any.","type":"CNavArea | CNavArea"}]},{"accessModifier":"public","arguments":[],"description":"Returns a random point on the nav area.","examples":[],"isConstructor":false,"name":"GetRandomPoint","realm":"server","returns":[{"description":"The random point on the nav area.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the width this Nav Area.","examples":[],"isConstructor":false,"name":"GetSizeX","realm":"server","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the height of this Nav Area.","examples":[],"isConstructor":false,"name":"GetSizeY","realm":"server","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the total cost when passing from starting area to the goal area through this node. Set by {{ClassFunction|CNavArea|SetTotalCost}}.\n\nUsed in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].<br/>\nMore information can be found on the [[Simple Pathfinding]] page.","examples":[],"isConstructor":false,"name":"GetTotalCost","realm":"server","returns":[{"description":"The total cost","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to get the elevation from, the z value from this position is ignored and only the X and Y values are used to this task.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Returns the elevation of this Nav Area at the given position.","examples":[],"isConstructor":false,"name":"GetZ","realm":"server","returns":[{"description":"The elevation.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Attribute mask to check for, see {{Enum|NAV_MESH}}","isOptional":false,"isVarArg":false,"name":"attribs","type":"NAV_MESH"}],"description":"Returns true if the given {{Type|CNavArea}} has this attribute flag set.","examples":[],"isConstructor":false,"name":"HasAttributes","realm":"server","returns":[{"description":"True if the {{Type|CNavArea}} matches the given mask. False otherwise.","type":"CNavArea"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"teamID","type":"number"},{"default":"false","description":"","isOptional":true,"isVarArg":false,"name":"ignoreNavBlockers","type":"boolean"}],"description":"","examples":[],"isConstructor":false,"name":"IsBlocked","realm":"server","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether this node is in the Closed List.\n\nUsed in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].<br/>\nMore information can be found on the [[Simple Pathfinding]] page.","examples":[],"isConstructor":false,"name":"IsClosed","realm":"server","returns":[{"description":"Whether this node is in the Closed List.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|CNavArea}} to test against.","isOptional":false,"isVarArg":false,"name":"navArea","type":"CNavArea"}],"description":"Returns whether this {{Type|CNavArea}} has an outgoing ( one or two way ) connection '''to''' given {{Type|CNavArea}}.\n\nSee {{ClassFunction|CNavArea|IsConnectedAtSide}} for a function that only checks for outgoing connections in one direction.","examples":[],"isConstructor":false,"name":"IsConnected","realm":"server","returns":[{"description":"Whether this {{Type|CNavArea}} has an outgoing ( one or two way ) connection '''to''' given {{Type|CNavArea}}.","type":"CNavArea | CNavArea"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|CNavArea}} to test against.","isOptional":false,"isVarArg":false,"name":"navArea","type":"CNavArea"},{"default":"","description":"The direction, in which to look for the connection. See {{Enum|NavDir}}","isOptional":false,"isVarArg":false,"name":"navDirType","type":"NavDir"}],"description":"Returns whether this {{Type|CNavArea}} has an outgoing ( one or two way ) connection '''to''' given {{Type|CNavArea}} in given direction.\n\nSee {{ClassFunction|CNavArea|IsConnected}} for a function that checks all sides.","examples":[],"isConstructor":false,"name":"IsConnectedAtSide","realm":"server","returns":[{"description":"Whether this {{Type|CNavArea}} has an outgoing ( one or two way ) connection '''to''' given {{Type|CNavArea}} in given direction.","type":"CNavArea | CNavArea"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The Nav Area to test.","isOptional":false,"isVarArg":false,"name":"navArea","type":"CNavArea"}],"description":"Returns whether this Nav Area is in the same plane as the given one.","examples":[],"isConstructor":false,"name":"IsCoplanar","realm":"server","returns":[{"description":"Whether we're coplanar or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether this Nav Area is flat within the tolerance of the '''nav_coplanar_slope_limit_displacement''' and '''nav_coplanar_slope_limit''' convars.","examples":[],"isConstructor":false,"name":"IsFlat","realm":"server","returns":[{"description":"Whether this CNavArea is mostly flat.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether this area is in the Open List.\n\nUsed in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].<br/>\nMore information can be found on the [[Simple Pathfinding]] page.","examples":[],"isConstructor":false,"name":"IsOpen","realm":"server","returns":[{"description":"Whether this area is in the Open List.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the Open List is empty or not.\n\nUsed in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].<br/>\nMore information can be found on the [[Simple Pathfinding]] page.","examples":[],"isConstructor":false,"name":"IsOpenListEmpty","realm":"server","returns":[{"description":"Whether the Open List is empty or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The overlapping position to test.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"0","description":"The tolerance of the overlapping, set to 0 for no tolerance.","isOptional":true,"isVarArg":false,"name":"tolerance","type":"number"}],"description":"Returns if this position overlaps the Nav Area within the given tolerance.","examples":[],"isConstructor":false,"name":"IsOverlapping","realm":"server","returns":[{"description":"Whether the given position overlaps the Nav Area or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|CNavArea}} to test against.","isOptional":false,"isVarArg":false,"name":"navArea","type":"CNavArea"}],"description":"Returns true if this {{Type|CNavArea}} is overlapping the given {{Type|CNavArea}}.","examples":[],"isConstructor":false,"name":"IsOverlappingArea","realm":"server","returns":[{"description":"True if the given {{Type|CNavArea}} overlaps this {{Type|CNavArea}} at any point.","type":"CNavArea | CNavArea"}]},{"accessModifier":"public","arguments":[],"description":"Returns if we're shaped like a square.","examples":[],"isConstructor":false,"name":"IsRoughlySquare","realm":"server","returns":[{"description":"If we're a square or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Whether this Nav Area is placed underwater.","examples":[],"isConstructor":false,"name":"IsUnderwater","realm":"server","returns":[{"description":"Whether we're underwater or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether this {{Type|CNavArea}} is valid or not.","examples":[],"isConstructor":false,"name":"IsValid","realm":"server","returns":[{"description":"Whether this {{Type|CNavArea}} is valid or not.","type":"CNavArea"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to check.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Returns whether we can be seen from the given position.","examples":[],"isConstructor":false,"name":"IsVisible","realm":"server","returns":[{"description":"Whether we can be seen or not.","type":"boolean"},{"description":"If we can be seen, this is returned with either the center or one of the corners of the Nav Area.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The corner(s) to drop, uses {{Enum|NavCorner}}","isOptional":false,"isVarArg":false,"name":"corner","type":"NavCorner"}],"description":"Drops a corner or all corners of a {{Type|CNavArea}} to the ground below it.","examples":[],"isConstructor":false,"name":"PlaceOnGround","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Removes a CNavArea from the Open List with the lowest cost to traverse to from the starting node, and returns it.\n\nUsed in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].<br/>\nMore information can be found on the [[Simple Pathfinding]] page.","examples":[],"isConstructor":false,"name":"PopOpenList","realm":"server","returns":[{"description":"The CNavArea from the Open List with the lowest cost to traverse to from the starting node.","type":"CNavArea"}]},{"accessModifier":"public","arguments":[],"description":"Removes the given nav area.","examples":[],"isConstructor":false,"name":"Remove","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Removes this node from the Closed List.\n\nUsed in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].<br/>\nMore information can be found on the [[Simple Pathfinding]] page.","examples":[],"isConstructor":false,"name":"RemoveFromClosedList","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The attribute bitflag. See {{Enum|NAV_MESH}}","isOptional":false,"isVarArg":false,"name":"attribs","type":"NAV_MESH"}],"description":"Sets the attributes for given CNavArea.","examples":[],"isConstructor":false,"name":"SetAttributes","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The corner to set, uses {{Enum|NavCorner}}","isOptional":false,"isVarArg":false,"name":"corner","type":"NavCorner"},{"default":"","description":"The new position to set.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Sets the position of a corner of a nav area.","examples":[],"isConstructor":false,"name":"SetCorner","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The cost so far","isOptional":false,"isVarArg":false,"name":"cost","type":"number"}],"description":"Sets the cost from starting area this area when pathfinding.\n\nUsed in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].<br/>\nMore information can be found on the [[Simple Pathfinding]] page.","examples":[],"isConstructor":false,"name":"SetCostSoFar","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new parent to set","isOptional":false,"isVarArg":false,"name":"parent","type":"CNavArea"}],"description":"Sets the new parent of this {{Type|CNavArea}}.","examples":[],"isConstructor":false,"name":"SetParent","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Set to \"\" to remove place from the nav area.","isOptional":false,"isVarArg":false,"name":"place","type":"string"}],"description":"Sets the Place of the nav area.\n\nThere is a limit of 256 Places per nav file.","examples":[],"isConstructor":false,"name":"SetPlace","realm":"server","returns":[{"description":"Returns true of operation succeeded, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The total cost of the path to set.\n\nMust be above or equal 0.","isOptional":false,"isVarArg":false,"name":"cost","type":"number"}],"description":"Sets the total cost when passing from starting area to the goal area through this node.\n\nUsed in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].<br/>\nMore information can be found on the [[Simple Pathfinding]] page.","examples":[],"isConstructor":false,"name":"SetTotalCost","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Moves this open list to appropriate position based on its {{ClassFunction|CNavArea|GetTotalCost}} compared to the total cost of other areas in the open list.\n\nUsed in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].<br/>\nMore information can be found on the [[Simple Pathfinding]] page.","examples":[],"isConstructor":false,"name":"UpdateOnOpenList","realm":"server","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"CNavArea"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A field with multiple selectable values.","examples":[{"code":"local DComboBox = vgui.Create( \"DComboBox\" )\nDComboBox:SetPos( 5, 5 )\nDComboBox:SetSize( 100, 20 )\nDComboBox:SetValue( \"options\" )\nDComboBox:AddChoice( \"option A\" )\nDComboBox:AddChoice( \"option B\" )\nDComboBox:AddChoice( \"option C\" )\nDComboBox.OnSelect = function( panel, index, value )\n\tprint( value ..\" was selected!\" )\nend","description":"Creates a Combo Box."},{"code":"local comboBox = vgui.Create(\"DComboBox\")\ncomboBox:SetPos(5, 5)\ncomboBox:SetSize(100, 20)\ncomboBox:SetValue(\"All Players\")\n\ncomboBox.OnSelect = function(_, _, value)\n\tprint(value..\" was selected!\")\nend\n\nfor k,v in pairs(player.GetAll()) do\n\tcomboBox:AddChoice(v:Name())\nend","description":"Create a Combo Box with all players"}],"extends":"DButton","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The text show to the user.","isOptional":false,"isVarArg":false,"name":"value","type":"string"},{"default":"nil","description":"The data accompanying this string. If left empty, the value argument is used instead.\n\nCan be accessed with the second argument of {{ClassFunction|DComboBox|GetSelected}}, {{ClassFunction|DComboBox|GetOptionData}} and as an argument of {{ClassFunction|DComboBox|OnSelect}}.","isOptional":true,"isVarArg":false,"name":"data","type":"any"},{"default":"false","description":"Should this be the default selected text show to the user or not.","isOptional":true,"isVarArg":false,"name":"select","type":"boolean"},{"default":"nil","description":"Adds an icon for this choice.\n{{NextUpdate}}","isOptional":true,"isVarArg":false,"name":"icon","type":"Panel"}],"description":"Adds a choice to the combo box.","examples":[],"isConstructor":false,"name":"AddChoice","realm":"client","returns":[{"description":"The index of the new option.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to display at the top of the combo box.","isOptional":false,"isVarArg":false,"name":"value","type":"string"},{"default":"","description":"The option index.","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"Selects a combo box option by its index and changes the text displayed at the top of the combo box.","examples":[],"isConstructor":false,"name":"ChooseOption","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Selects the option with given index.","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"Selects an option within a combo box based on its table index.","examples":[{"code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(200, 100)\n\n-- Text output\nlocal lbl = vgui.Create(\"DLabel\", BGPanel)\nlbl:SetPos(10, 80)\nlbl:SetSize(180, 20)\nlbl:SetDark(true)\nlbl:SetText(\"You choose...\")\n\n-- Combo box\nlocal cbox = vgui.Create(\"DComboBox\", BGPanel)\ncbox:SetPos(5, 5)\ncbox:SetSize(190, 20)\n\ncbox:SetValue(\"What's your favorite lunch meal?\")\n\n-- Choices\ncbox:AddChoice(\"BBQ Chicken\")\ncbox:AddChoice(\"Fish and Chips\")\ncbox:AddChoice(\"Pizza\")\ncbox:AddChoice(\"Potato Salad\")\ncbox:AddChoice(\"Roast Beef Sandwich\")\ncbox:AddChoice(\"Spaghetti\")\n\n-- No preference: data is set to -1\ncbox:AddChoice(\"I don't have a favorite.\", -1)\n\nfunction cbox:OnSelect(index, value, data)\n\n\t-- No preference? Choose a random choice\n\tif(data == -1) then\t\t\t\t\n\t\tself:ChooseOptionID(math.random(1, 6))\n\t\t\n\t-- Otherwise update the text label with our choice\n\telse\n\t\tlbl:SetText(\"You choose \"..value..\".\")\n\tend\n\t\nend","description":"A simple combo box menu which gives choices for a favorite lunch meal, including a non-preference choice which randomly chooses an option."}],"isConstructor":false,"name":"ChooseOptionID","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Clears the combo box's text value, choices, and data values.","examples":[],"isConstructor":false,"name":"Clear","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Closes the combo box menu. Called when the combo box is clicked while open.","examples":[],"isConstructor":false,"name":"CloseMenu","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The option index.","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"Returns an option's data based on the given index.","examples":[],"isConstructor":false,"name":"GetOptionData","realm":"client","returns":[{"description":"The option's data value.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The option index.","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"Returns an option's text based on the given index.","examples":[{"code":"local cbox = vgui.Create(\"DComboBox\")\ncbox:SetPos(5, 5)\ncbox:SetSize(200, 20)\n\ncbox:SetValue(\"Colors\")\ncbox:AddChoice(\"Red\")\ncbox:AddChoice(\"Green\")\ncbox:AddChoice(\"Blue\")\ncbox:AddChoice(\"Yellow\")\n\nprint(cbox:GetOptionText(3))","description":"Create a combo box listing some colors and print the 3rd option's text."}],"isConstructor":false,"name":"GetOptionText","realm":"client","returns":[{"description":"The option's text value.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The data to look up the name of.\n\nIf given a {{Type|number}} and no matching data was found, the function will test given data against each {{GlobalFunction|tonumber}}'d data entry.","isOptional":false,"isVarArg":false,"name":"data","type":"string"}],"description":"Returns an option's text based on the given data.","examples":[],"isConstructor":false,"name":"GetOptionTextByData","realm":"client","returns":[{"description":"The option's text value.\n\nIf no matching data was found, the data itself will be returned. If multiple identical data entries exist, the first instance will be returned.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the currently selected option's text and data","examples":[],"isConstructor":false,"name":"GetSelected","realm":"client","returns":[{"description":"The option's text value.","type":"string"},{"description":"The option's stored data.","type":"any"}]},{"accessModifier":"public","arguments":[],"description":"Returns the index (ID) of the currently selected option.","examples":[],"isConstructor":false,"name":"GetSelectedID","realm":"client","returns":[{"description":"The ID of the currently selected option.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns an whether the items in the dropdown will be alphabetically sorted or not.\n\nSee {{ClassFunction|DComboBox|SetSortItems}}.","examples":[],"isConstructor":false,"name":"GetSortItems","realm":"client","returns":[{"description":"True if enabled, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the combo box's menu is opened.","examples":[],"isConstructor":false,"name":"IsMenuOpen","realm":"client","returns":[{"description":"True if the menu is open, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The index of the option for use with other {{Type|DComboBox}} functions.","isOptional":false,"isVarArg":false,"name":"index","type":"number"},{"default":"","description":"The name of the option.","isOptional":false,"isVarArg":false,"name":"value","type":"string"},{"default":"","description":"The data assigned to the option.","isOptional":false,"isVarArg":false,"name":"data","type":"any"}],"description":"Called when an option in the combo box is selected.","examples":[{"code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize( 500, 500 )\nframe:Center()\nframe:MakePopup()\n\n-- Background panel\nlocal BGPanel = vgui.Create( \"DPanel\", frame )\nBGPanel:Dock( FILL )\n\nlocal cbox = vgui.Create( \"DComboBox\", BGPanel )\ncbox:SetPos( 5, 5 )\ncbox:SetSize( 190, 20 )\ncbox:SetValue( \"Pick a color\" ) -- Default text\n\n-- Color choices\ncbox:AddChoice( \"Red\", Color( 255, 0, 0 ) )\ncbox:AddChoice( \"Orange\", Color( 255, 128, 0 ) )\ncbox:AddChoice( \"Yellow\", Color( 255, 255, 0 ) )\ncbox:AddChoice( \"Green\", Color( 0, 255, 0 ) )\ncbox:AddChoice( \"Blue\", Color( 0, 0, 255 ) )\ncbox:AddChoice( \"Indigo\", Color( 64, 0, 255 ) )\ncbox:AddChoice( \"Violet\", Color( 128, 0, 255 ) )\ncbox:AddChoice( \"Pink\", Color( 255, 0, 255 ) )\n\nfunction cbox:OnSelect( index, text, data )\n\n\t-- Set background panel color\n\tBGPanel:SetBackgroundColor( data )\n\nend","description":"Creates a combo box that controls the color of the background panel."}],"isConstructor":false,"name":"OnSelect","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Opens the combo box drop down menu. Called when the combo box is clicked.","examples":[],"isConstructor":false,"name":"OpenMenu","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"true to enable, false to disable","isOptional":false,"isVarArg":false,"name":"sort","type":"boolean"}],"description":"Sets whether or not the items should be sorted alphabetically in the dropdown menu of the {{Type|DComboBox}}. If set to false, items will appear in the order they were added by {{ClassFunction|DComboBox|AddChoice}} calls.\n\nThis is enabled by default.","examples":[],"isConstructor":false,"name":"SetSortItems","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text in the DComboBox.","isOptional":false,"isVarArg":false,"name":"value","type":"string"}],"description":"Sets the text shown in the combo box when the menu is not collapsed.","examples":[{"code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(200, 30)\n\nlocal cbox = vgui.Create(\"DComboBox\", BGPanel)\ncbox:SetPos(5, 5)\ncbox:SetSize(190, 20)\n\ncbox:SetValue(\"What do you think of this server?\")\n\n-- Responses\ncbox:AddChoice(\"It's the best server of all time!\")\ncbox:AddChoice(\"It's pretty good.\")\ncbox:AddChoice(\"It's okay.\")\ncbox:AddChoice(\"It's not that good.\")\ncbox:AddChoice(\"Don't bother me with this.\")\n\nfunction cbox:OnSelect(index, value, data)\n\n\t-- Clear combo box and set a thank you message\n\tself:Clear()\n\tself:SetText(\"Thank you for your feedback!\")\n\t\n\t-- Here you would send the feedback to the server using a net message\n\t-- The choice is stored in the 'data' variable\n\nend","description":"A simple feedback combo box which has the value set to a thank you message once a choice is clicked."}],"isConstructor":false,"name":"SetValue","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Marks all of the panel's children for deletion.","examples":[],"isConstructor":false,"name":"Clear","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DComboBox"},{"classFields":[],"collectionType":"global","customConstructor":"","description":"This is the list of global functions.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The table to add the accessor functions too.","isOptional":false,"isVarArg":false,"name":"tab","type":"table"},{"default":"","description":"The key of the table to be get/set.","isOptional":false,"isVarArg":false,"name":"key","type":"any"},{"default":"","description":"The name of the functions (will be prefixed with Get and Set).","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"nil","description":"The type the setter should force to (uses {{Enum|FORCE}}).","isOptional":true,"isVarArg":false,"name":"force","type":"FORCE"}],"description":"Adds simple Get/Set accessor functions on the specified table.<br />\nCan also force the value to be set to a number, bool or string.","examples":[{"code":"local meta = FindMetaTable(\"Player\")\nAccessorFunc(meta, \"foo_bar\", \"FooBar\", FORCE_BOOL)\n\nlocal ply = player.GetByID(1)\nply:SetFooBar(true)\n\nprint(not ply:GetFooBar())","description":"Adds the GetFooBar and SetFooBar functions to the Player metatable and then uses them."}],"isConstructor":false,"name":"AccessorFunc","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the new enum/global variable.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Defines a global entity class variable with an automatic value in order to prevent collisions with other {{Enum|CLASS}}. You should prefix your variable with CLASS_ for consistency.","examples":[{"code":"Add_NPC_Class( \"CLASS_TESTER\" )\nprint( CLASS_TESTER )","description":"Creates a global variable named CLASS_TESTER and prints its value."}],"isConstructor":false,"name":"Add_NPC_Class","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Path to the image.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"Adds the specified image path to the main menu background pool. Image can be png or jpeg.","examples":[],"isConstructor":false,"name":"AddBackgroundImage","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the console command to add.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The help text.","isOptional":false,"isVarArg":false,"name":"helpText","type":"string"},{"default":"","description":"Concommand flags using {{Enum|FCVAR}}","isOptional":false,"isVarArg":false,"name":"flags","type":"FCVAR"}],"description":"{{Internal|Use {{LibraryFunction|concommand|Add}} instead.}}Tells the engine to register a console command. If the command was ran, the engine calls {{LibraryFunction|concommand|Run}}.","examples":[],"isConstructor":false,"name":"AddConsoleCommand","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"current file","description":"The name/path to the Lua file that should be sent, relative to the garrysmod/lua folder. If no parameter is specified, it sends the current file.\n\nThe file path can be relative to the script it is ran from. For example, if your script is in lua/myfolder/stuff.lua, calling {{GlobalFunction|AddCSLuaFile}}(\"otherstuff.lua\") and {{GlobalFunction|AddCSLuaFile}}(\"myfolder/otherstuff.lua\") is the same thing.","isOptional":true,"isVarArg":false,"name":"file","type":"string"}],"description":"Marks a Lua file to be sent to clients when they join the server. Doesn't do anything on the client - this means you can use it in a shared file without problems.\n\n{{Warning|If the file trying to be added is empty, an error will occur, and the file will not be sent to the client.}}\n\n{{Note|This function is not needed for scripts located in '''lua/autorun/''' and '''lua/autorun/client/''': they are automatically sent to clients.}}","examples":[{"code":"AddCSLuaFile( \"cl_init.lua\" )","description":"Adds the cl_init.lua file in the \"lua\" folder to be downloaded by connecting clients. This is required, and is normally done in init.lua."},{"code":"AddCSLuaFile()","description":"Adds the current file to the list of files to be downloaded by clients. This is usually done at the top of a shared file."}],"isConstructor":false,"name":"AddCSLuaFile","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the file.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Loads the specified image from the /cache folder, used in combination {{LibraryFunction|steamworks|Download}}.<br />\nMost addons will provide a 512x512 png image.","examples":[],"isConstructor":false,"name":"AddonMaterial","realm":"client and menu","returns":[{"description":"The material, returns nil if the cached file is not an image.","type":"IMaterial"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The origin to add.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Adds the specified vector to the PVS which is currently building. This allows all objects in visleafs visible from that vector to be drawn.","examples":[{"code":"hook.Add(\"SetupPlayerVisibility\", \"AddRTCamera\", function(pPlayer, pViewEntity)\n\t-- Adds any view entity\n\tif (pViewEntity:IsValid()) then\n\t\tAddOriginToPVS(pViewEntity:GetPos())\n\tend\nend)","description":"Adds an RTCamera's current position to all player's PVS, causing props near it to always render on an rtscreen"}],"isConstructor":false,"name":"AddOriginToPVS","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"'''This argument is no longer used'''; it has no effect on anything. You can use nil in this argument.","isOptional":true,"isVarArg":false,"name":"entindex","type":"number"},{"default":"","description":"The text for the world tip to display.","isOptional":true,"isVarArg":false,"name":"text","type":"string"},{"default":"SysTime() + 0.05","description":"'''This argument is no longer used'''; when you add a World Tip it will always last only 0.05 seconds. You can use nil in this argument.","isOptional":true,"isVarArg":false,"name":"dieTime","type":"number"},{"default":"ent:GetPos()","description":"Where in the world you want the World Tip to be drawn. If you add a valid Entity in the next argument, this argument will have no effect on the actual World Tip.","isOptional":true,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"nil","description":"Which entity you want to associate with the World Tip. This argument is optional. If set to a valid entity, this will override the position set in ''pos'' with the Entity's position.","isOptional":true,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"This function creates a World Tip, similar to the one shown when aiming at a Thruster where it shows you its force.\n\nThis function will make a World Tip that will only last 50 milliseconds (1/20th of a second), so you must call it continuously as long as you want the World Tip to be shown. It is common to call it inside a Think hook.\n\nContrary to what the function's name implies, it is impossible to create more than one World Tip at the same time. A new World Tip will overwrite the old one, so only use this function when you know nothing else will also be using it.<br />\nSee {{HookFunction|SANDBOX|PaintWorldTips}} for more information.\n\n{{Note|This function is only available in Sandbox and its derivatives}}","examples":[{"code":"hook.Add( \"Think\", \"draw World Tip\", function()\n\tlocal ply = Entity( 1 )\n\tlocal tr = ply:GetEyeTrace()\n\t\n\tlocal pos = tr.HitPos -- will be unused if ent is valid\n\tlocal ent = tr.Entity\n\t\n\tAddWorldTip( nil, \"Hello world!\", nil, pos, ent )\nend )","description":"Creates a World Tip where the player is looking. If the player is looking at an entity, the World Tip is positioned on the entity."}],"isConstructor":false,"name":"AddWorldTip","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns an angle with a randomized pitch, yaw and roll. The pitch is between -90 and 90 degrees, while yaw and roll are between -180 and 180 degrees.","examples":[{"code":"print( AngleRand() )","description":"Prints out a random angle."}],"isConstructor":false,"name":"AngleRand","realm":"shared and menu","returns":[{"description":"The randomly generated angle.","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The expression to assert.","isOptional":false,"isVarArg":false,"name":"expression","type":"any"},{"default":"\"assertion failed!\"","description":"The error message to throw when assertion fails. This is only type-checked if the assertion fails.","isOptional":true,"isVarArg":false,"name":"errorMessage","type":"string"},{"default":"nil","description":"Any arguments past the error message will be returned by a successful assert.","isOptional":false,"isVarArg":true,"name":"returns","type":"any"}],"description":"If the result of the first argument is false or nil, an error is thrown with the second argument as the message.","examples":[{"code":"local ABC = assert(print)\nprint(ABC)","description":"The assertion is successful, and the result of the first argument is returned."},{"code":"assert(print == 1, \"print is not equal to 1!\")","description":"Since the first argument evaluates to false, an error is thrown."},{"code":"print(assert(5))\nprint(assert(true, \"foo\", 2, {}))","description":"Examples of return behaviour."}],"isConstructor":false,"name":"assert","realm":"shared and menu","returns":[{"description":"If successful, returns the first argument.","type":"any"},{"description":"If successful, returns the error message. This will be nil if the second argument wasn't specified.\n\nSince the second argument is only type-checked if the assertion fails, this doesn't have to be a string.","type":"any"},{"description":"Returns any arguments past the error message.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The code to be executed. Capped at length of 254 characters.","isOptional":false,"isVarArg":false,"name":"code","type":"string"}],"description":"Sends the specified Lua code to all connected clients and executes it.","examples":[{"code":"BroadcastLua( [[print( \"Hello World!\" )]] )","description":"Print \"Hello World!\" in the clients' console"}],"isConstructor":false,"name":"BroadcastLua","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Dumps the networked variables of all entities into one table and returns it.","examples":[],"isConstructor":false,"name":"BuildNetworkedVarsTable","realm":"shared","returns":[{"description":"Format:\n* key = {{Type|Entity}} for NWVars or {{Type|number}} (always 0) for global vars\n* value = {{Type|table}} formatted as:\n** key = {{Type|string}} var name\n** value = any type var value","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nUsed internally to check if the current server the player is on can be added to favorites or not. Does not check if the server is ALREADY in the favorites.","examples":[],"isConstructor":false,"name":"CanAddServerToFavorites","realm":"menu","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Aborts joining of the server you are currently joining.","examples":[],"isConstructor":false,"name":"CancelLoading","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Apparently does nothing.","isOptional":false,"isVarArg":false,"name":"currentgm","type":"string"}],"description":"Sets the active main menu background image to a random entry from the background images pool. Images are added with {{GlobalFunction|AddBackgroundImage}}.","examples":[],"isConstructor":false,"name":"ChangeBackground","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel that has been hovered over","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"}],"description":"Automatically called by the engine when a panel is hovered over with the mouse","examples":[],"isConstructor":false,"name":"ChangeTooltip","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Empties the pool of main menu background images.","examples":[],"isConstructor":false,"name":"ClearBackgroundImages","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The file path to the model.\n\n{{Warning|Model must be precached with {{LibraryFunction|util|PrecacheModel}} on the server before usage.}}","isOptional":false,"isVarArg":false,"name":"model","type":"string"},{"default":"RENDERGROUP_OTHER","description":"The rendergroup of the entity, see {{Enum|RENDERGROUP}}.","isOptional":true,"isVarArg":false,"name":"renderGroup","type":"RENDERGROUP"}],"description":"Creates a non physical entity that only exists on the client. See also {{LibraryFunction|ents|CreateClientProp}}.\n\n{{Bug|Issue=861|Parented clientside models will become detached if the parent entity leaves the PVS.}}\n\n{{Bug|Issue=1387|Clientside entities are not garbage-collected, thus you must store a reference to the object and call {{ClassFunction|CSEnt|Remove}} manually.}}\n\n{{Bug|Issue=3184|Clientside models will occasionally delete themselves during high server lag.}}","examples":[],"isConstructor":false,"name":"ClientsideModel","realm":"client","returns":[{"description":"Created client-side model. ( C_BaseFlex )","type":"CSEnt"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The file path to the model.\n\n{{Warning|Model must be precached with {{LibraryFunction|util|PrecacheModel}} on the server before usage.}}","isOptional":false,"isVarArg":false,"name":"model","type":"string"},{"default":"RENDER_GROUP_OPAQUE","description":"The {{Enum|RENDERGROUP}} to assign.","isOptional":true,"isVarArg":false,"name":"renderGroup","type":"RENDERGROUP"}],"description":"Creates a fully clientside ragdoll.\n\n{{Note|The ragdoll initially starts as hidden and with shadows disabled, see the example for how to enable it.<br/>There's no need to call {{ClassFunction|Entity|Spawn}} on this entity.<br/>The physics won't initialize at all if the model hasn't been precached serverside first.}}\n\n{{Bug|Issue=1387|Clientside entities are not garbage-collected, thus you must store a reference to the object and call {{ClassFunction|CSEnt|Remove}} manually.}}","examples":[{"code":"local ragdoll = ClientsideRagdoll( \"models/player/breen.mdl\" )\nragdoll:SetNoDraw( false )\nragdoll:DrawShadow( true )","description":"Creates a new ragdoll with the player model of breen and enables rendering and shadows."}],"isConstructor":false,"name":"ClientsideRagdoll","realm":"client","returns":[{"description":"The newly created client-side ragdoll. ( C_ClientRagdoll )","type":"CSEnt"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the scene.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The entity to play the scene on.","isOptional":false,"isVarArg":false,"name":"targetEnt","type":"Entity"}],"description":"Creates a scene entity based on the scene name and the entity.","examples":[{"code":"ClientsideScene( \"scenes/eli_lab/mo_gowithalyx01.vcd\", LocalPlayer() )","description":"Plays \"I guess you should go with Alyx\" line from HL2."}],"isConstructor":false,"name":"ClientsideScene","realm":"client","returns":[{"description":"C_SceneEntity","type":"CSEnt"}]},{"accessModifier":"public","arguments":[],"description":"Closes all Derma menus that have been passed to {{GlobalFunction|RegisterDermaMenuForClose}} and calls {{HookFunction|GM|CloseDermaMenus}}","examples":[],"isConstructor":false,"name":"CloseDermaMenus","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"\"collect\"","description":"The action to run.\n\nValid actions are \"collect\", \"stop\", \"restart\", \"count\", \"step\", \"setpause\" and \"setstepmul\".","isOptional":true,"isVarArg":false,"name":"action","type":"string"},{"default":"","description":"The argument of the specified action, only applicable for \"step\", \"setpause\" and \"setstepmul\".","isOptional":true,"isVarArg":false,"name":"arg","type":"number"}],"description":"Executes the specified action on the garbage collector.","examples":[{"code":"print( collectgarbage( \"count\" ) )","description":"The current floored dynamic memory usage of Lua, in kilobytes."}],"isConstructor":false,"name":"collectgarbage","realm":"shared and menu","returns":[{"description":"If the action is count this is the number of kilobytes of memory used by Lua.\nIf the action is step this is true if a garbage collection cycle was finished.\n\nIf the action is setpause this is the previous value for the GC's pause.\nIf the action is setstepmul this is the previous value for the GC's step.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"An integer from 0-255 describing the red value of the color.","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"An integer from 0-255 describing the green value of the color.","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"An integer from 0-255 describing the blue value of the color.","isOptional":false,"isVarArg":false,"name":"b","type":"number"},{"default":"255","description":"An integer from 0-255 describing the alpha (transparency) of the color.","isOptional":true,"isVarArg":false,"name":"a","type":"number"}],"description":"Creates a {{Struct|Color}}.","examples":[{"code":"PrintTable(Color(1, 2, 3, 4))","description":"Creates a color and prints the components to the console."},{"code":"local col = Color( 0, 255, 0, 255)\n\ncol.r = 255\n\nPrintTable(col)","description":"Color variables can have individual channels set using the arguments"},{"code":"local str = tostring( Color( 255, 0, 0 ) )\nprint( str )","description":"Transforms a color object to a string, then prints it."},{"code":"if Color( 255, 0, 0 ) == Color( 255, 0, 0 ) then\n\tprint( \"equal\" )\nelse\n\tprint( \"unequal\" )\nend","description":"Prints \"equal\" if both colors are equal, otherwise \"unequal\" will be printed."}],"isConstructor":false,"name":"Color","realm":"shared and menu","returns":[{"description":"The created {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Struct|Color}} from which to take RGB values. This color will not be modified.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"},{"default":"","description":"The new alpha value, a number between 0 and 255. Values above 255 will be clamped.","isOptional":false,"isVarArg":false,"name":"alpha","type":"number"}],"description":"Returns a new {{Struct|Color}} with the RGB components of the given {{Struct|Color}} and the alpha value specified.","examples":[{"code":"local red = Color( 255, 0, 0, 255 )\nlocal red2 = ColorAlpha( red, 125 )\nprint( red.r, red.g, red.b, red.a )\nprint( red2.r, red2.g, red2.b, red2.a )","description":""}],"isConstructor":false,"name":"ColorAlpha","realm":"shared and menu","returns":[{"description":"The new {{Struct|Color}} with the modified alpha value","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"false","description":"Should alpha be randomized.","isOptional":true,"isVarArg":false,"name":"a","type":"boolean"}],"description":"Creates a {{Struct|Color}} with randomized red, green, and blue components. If the alpha argument is true, alpha will also be randomized.","examples":[],"isConstructor":false,"name":"ColorRand","realm":"shared and menu","returns":[{"description":"The created {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Converts a {{Struct|Color}} into HSV color space.","examples":[{"code":"print(ColorToHSV(Color(255, 255, 0)))","description":"Creates a color and prints the HSV values to the console."}],"isConstructor":false,"name":"ColorToHSV","realm":"shared and menu","returns":[{"description":"The hue in degrees.","type":"number"},{"description":"The saturation in the range 0-1.","type":"number"},{"description":"The value in the range 0-1.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Path to the file, relative to the garrysmod/lua/ directory.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"Attempts to compile the given file. If successful, returns a function that can be called to perform the actual execution of the script.","examples":[{"code":"local example = CompileFile(\"example.lua\")\nexample()","description":"Assuming our file is named example.lua and located in the garrysmod/lua/ directory, the following code would execute the script."}],"isConstructor":false,"name":"CompileFile","realm":"shared","returns":[{"description":"The function which executes the script.","type":"Function"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The code to compile.","isOptional":false,"isVarArg":false,"name":"code","type":"string"},{"default":"","description":"An identifier in case an error is thrown. (The same identifier can be used multiple times)","isOptional":false,"isVarArg":false,"name":"identifier","type":"string"},{"default":"true","description":"If false this function will return an error string instead of throwing an error.","isOptional":true,"isVarArg":false,"name":"HandleError","type":"boolean"}],"description":"This function will compile the code argument as lua code and return a function that will execute that code. \n\nPlease note that this function will not automatically execute the given code after compiling it.","examples":[{"code":"local code = \"MsgN('Hi)\"\nlocal func = CompileString(code, \"TestCode\", false)\nMsgN(func)","description":"Code that will not compile, with ErrorHandling set to false."},{"code":"local code = \"MsgN('Hi')\"\nlocal func = CompileString(code, \"TestCode\")\n\nif func then -- Compile String returns nil if 3rd argument is true and code has errors.\n   func()\nend","description":"Code that will compile."},{"code":"local code = [[\n\tlocal args = { ... } \n\tprint( unpack( args ) )\n\tprint( args[ 2 ] + args[ 3 ])\n\tprint( args[ 4 ] .. args[ 5 ])\n\n\tlocal first, second = ...\n\tprint( first, second )\n]]\nlocal func = CompileString( code, \"VarargCodeTest\" )\nfunc( 1, 2, 3, \"A\", \"B\", \"C\" )","description":"Compiled code with custom arguments; captured with the varargs identifier."}],"isConstructor":false,"name":"CompileString","realm":"shared and menu","returns":[{"description":"A function that, when called, will execute the given code. Returns nil if there was an error.","type":"Function"},{"description":"The error string. Will be nil if there were no errors or the function handles errors (third argument is true).","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Text that the console commands must begin with.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Returns a table of console command names beginning with the given text.","examples":[],"isConstructor":false,"name":"ConsoleAutoComplete","realm":"menu","returns":[{"description":"Table of console command names.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the {{Type|ConVar}}.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Returns whether a {{Type|ConVar}} with the given name exists or not","examples":[],"isConstructor":false,"name":"ConVarExists","realm":"shared and menu","returns":[{"description":"True if the {{Type|ConVar}} exists, false otherwise.","type":"ConVar"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the ConVar to be created and able to be accessed.<br><br>\n\nThis cannot be a name of existing console command or console variable. It will silently fail if it is.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Default value of the ConVar.","isOptional":false,"isVarArg":false,"name":"defaultVal","type":"string"},{"default":"true","description":"Should the ConVar be saved across sessions","isOptional":true,"isVarArg":false,"name":"shouldsave","type":"boolean"},{"default":"false","description":"Should the ConVar and its containing data be sent to the server when it has changed. This make the convar accessible from server using {{ClassFunction|Player|GetInfoNum}} and similar functions.","isOptional":true,"isVarArg":false,"name":"userinfo","type":"boolean"},{"default":"\"\"","description":"Help text to display in the console.","isOptional":true,"isVarArg":false,"name":"helptext","type":"string"}],"description":"Makes a clientside-only console variable\n\n{{Note|This function is a wrapper of {{GlobalFunction|CreateConVar}}, with the difference being that FCVAR_ARCHIVE and FCVAR_USERINFO are added automatically when '''shouldsave''' and '''userinfo''' are true, respectively.}}\n\nAlthough this function is shared, it should only be used clientside.","examples":[{"code":"CreateClientConVar(\"superspeed_enabled\", \"0\", true, false)","description":"Creates a ConVar that does nothing and saves."}],"isConstructor":false,"name":"CreateClientConVar","realm":"shared and menu","returns":[{"description":"Created convar.","type":"ConVar"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the convar.<br><br>\n\nThis cannot be a name of an engine console command or console variable. It will silently fail if it is. If it is the same name as another lua ConVar, it will return that ConVar object.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Default value of the convar. Can also be a number.","isOptional":false,"isVarArg":false,"name":"value","type":"string"},{"default":"FCVAR_NONE","description":"Flags of the convar, see {{Enum|FCVAR}}, either as bitflag or as table.","isOptional":true,"isVarArg":false,"name":"flags","type":"FCVAR"},{"default":"\"\"","description":"The help text to show in the console.","isOptional":true,"isVarArg":false,"name":"helptext","type":"string"}],"description":"Creates a console variable ({{Type|ConVar}}), in general these are for things like gamemode/server settings.","examples":[],"isConstructor":false,"name":"CreateConVar","realm":"shared and menu","returns":[{"description":"The convar created.","type":"ConVar"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The material name. Must be unique.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The shader name. See [[:Category: Shaders]].","isOptional":false,"isVarArg":false,"name":"shaderName","type":"string"},{"default":"","description":"Key-value table that contains shader parameters and proxies.\n\n*See: [https://developer.valvesoftware.com/wiki/Category:List_of_Shader_Parameters List of Shader Parameters on Valve Developers Wiki] and each shader's page from [[:Category: Shaders]].\n\n{{Note|Unlike {{ClassFunction|IMaterial|SetTexture}}, this table will not accept {{Type|ITexture}} values. Instead, use the texture's name (see {{ClassFunction|ITexture|GetName}}).}}","isOptional":false,"isVarArg":false,"name":"materialData","type":"ITexture[]"}],"description":"Creates a new material with the specified name and shader.\n\n{{Note|Materials created with this function can be used in {{ClassFunction|Entity|SetMaterial}} and {{ClassFunction|Entity|SetSubMaterial}} by prepending a \"!\" to their material name argument.}}\n\n{{Bug|Issue=1531|.pngs must be loaded with {{GlobalFunction|Material}} before being used with this function.}}\n\n{{Bug|Issue=2511|This does not work with [https://developer.valvesoftware.com/wiki/Patch patch materials].}}\n\n{{Bug|Issue=3103|This will not create a new material if another material object with the same name already exists.}}","examples":[{"code":"CreateMaterial( \"colortexshp\", \"VertexLitGeneric\", {\n  [\"$basetexture\"] = \"color/white\",\n  [\"$model\"] = 1,\n  [\"$translucent\"] = 1,\n  [\"$vertexalpha\"] = 1,\n  [\"$vertexcolor\"] = 1\n} )","description":"Alternative to {{LibraryFunction|render|SetColorMaterial}}, mainly for use with {{ClassFunction|Entity|SetMaterial}}"}],"isConstructor":false,"name":"CreateMaterial","realm":"client and menu","returns":[{"description":"Created material","type":"IMaterial"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Model path to get the collision objects of.","isOptional":false,"isVarArg":false,"name":"modelName","type":"string"}],"description":"Creates {{Type|PhysCollide}} objects for every physics object the model has. The model must be precached with {{LibraryFunction|util|PrecacheModel}} before being used with this function.","examples":[],"isConstructor":false,"name":"CreatePhysCollidesFromModel","realm":"shared","returns":[{"description":"Table of {{Type|PhysCollide}} objects. The number of entries will match the model's physics object count. See also {{ClassFunction|Entity|GetPhysicsObjectCount}}. Returns no value if the model doesn't exist, or has not been precached.","type":"PhysCollide[]"}]},{"accessModifier":"public","arguments":[],"description":"Returns the uptime of the server in seconds (to at least 4 decimal places)\n\nThis is a synchronised value and affected by various factors such as host_timescale (or {{LibraryFunction|game|GetTimeScale}}) and the server being paused - either by sv_pausable or all players disconnecting.\n\nYou should use this function for timing in-game events but not for real-world events.\n\nSee also: {{GlobalFunction|RealTime}}, {{GlobalFunction|SysTime}}\n\n{{Note|This is internally defined as a float, and as such it will be affected by precision loss if your server uptime is more than 6 hours, which will cause jittery movement of players and props and inaccuracy of timers, it is highly encouraged to refresh or change the map when that happens (a server restart is not necessary).<br/><br/>This is '''NOT''' easy as it sounds to fix in the engine, so please refrain from posting issues about this}}\n\n{{Bug|Issue=3026|This returns 0 in {{HookFunction|GM|PlayerAuthed}}.}}","examples":[{"code":"local delay = 0\nhook.Add( \"Think\", \"CurTimeDelay\", function()\n if CurTime() < delay then return end\n\tprint( \"This message will repeat every 5 seconds.\" )\n\t delay = CurTime() + 5\n end)","description":"Simple delay timer."}],"isConstructor":false,"name":"CurTime","realm":"shared and menu","returns":[{"description":"Time synced with the game server.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns an {{Type|CTakeDamageInfo}} object.\n\n{{Bug|Issue=2771|This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once.}}","examples":[],"isConstructor":false,"name":"DamageInfo","realm":"shared","returns":[{"description":"The {{Type|CTakeDamageInfo}} object.","type":"CTakeDamageInfo"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The location on the right hand screen to write the debug info to. Starts at 0, no upper limit","isOptional":false,"isVarArg":false,"name":"slot","type":"number"},{"default":"","description":"The debugging information to be written to the screen","isOptional":false,"isVarArg":false,"name":"info","type":"string"}],"description":"Writes text to the right hand side of the screen, like the old error system. Messages disappear after a couple of seconds.","examples":[],"isConstructor":false,"name":"DebugInfo","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The child class.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Gets the base class of an an object.\n\nThis is used not just by entities, but also by widgets, panels, drive modes, weapons and gamemodes (with \"gamemode_\" prefix).\n\nThe keyword '''DEFINE_BASECLASS''' translates into a call to this function. In the engine, it is replaced with:\n<pre>local BaseClass = baseclass.Get</pre>","examples":[{"code":"AddCSLuaFile()\nDEFINE_BASECLASS( \"weapon_csbasegun\" ) //this is equivalent to local BaseClass = baseclass.Get( \"weapon_csbasegun\" )\n\n//omitted generic swep definitions\n\nfunction SWEP:Initialize()\n\tBaseClass.Initialize( self ) //calls SWEP:Initialize() from weapon_csbasegun\n\tself:SetHoldType( \"pistol\" )\nend\n\nfunction SWEP:Deploy()\n\tself:SetAccuracy( 0.9 )\n\treturn BaseClass.Deploy( self ) //calls SWEP:Deploy() from weapon_csbasegun and returns its result\nend\n\nfunction SWEP:SetupDataTables()\n\tBaseClass.SetupDataTables( self ) //calls SWEP:SetupDataTables() from weapon_csbasegun and inits its dtvars\nend","description":"Inherits the weapon from weapon_csbasegun and calls its base functions"}],"isConstructor":false,"name":"DEFINE_BASECLASS","realm":"shared and menu","returns":[{"description":"The base class's meta table.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Gamemode name to derive from.","isOptional":false,"isVarArg":false,"name":"base","type":"string"}],"description":"Retrieves data from a gamemode to use in yours. This also sets a BaseClass field on your GM table to the gamemode you are deriving from. It appears that this function works by running the init and cl_init Lua files of the target gamemode, then overriding functions that appear in both the target and your gamemode with your gamemode's functions.","examples":[{"code":"DeriveGamemode(\"sandbox\")","description":"Retrieves data from sandbox."}],"isConstructor":false,"name":"DeriveGamemode","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the animation to create","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Panel to run the animation on","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"},{"default":"","description":"Function to call to process the animation<br/>\nArguments:\n* {{FuncArg|Panel|pnl|the panel passed to Derma_Anim}}\n* {{FuncArg|table|anim|the anim table}}\n* {{FuncArg|number|delta|the fraction of the progress through the animation}}\n* {{FuncArg|any|data|optional data passed to the run metatable method}}","isOptional":false,"isVarArg":false,"name":"func","type":"Function"}],"description":"Creates a new derma animation.","examples":[{"code":"local function inQuad(fraction, beginning, change)\n\treturn change * (fraction ^ 2) + beginning\nend\n\nlocal main = vgui.Create(\"DFrame\")\nmain:SetTitle(\"Derma_Anim Example\")\nmain:SetSize(250, 200)\nmain:SetPos(200)\nmain:MakePopup()\nlocal anim = Derma_Anim(\"EaseInQuad\", main, function(pnl, anim, delta, data)\n\tpnl:SetPos(inQuad(delta, 200, 600), 300) -- Change the X coordinate from 200 to 200+600\nend)\nanim:Start(2) -- Animate for two seconds\nmain.Think = function(self)\n\tif anim:Active() then\n\t\tanim:Run()\n\tend\nend","description":"Applies an [http://easings.net/#easeInQuad easeInQuad] easing to the panel to make it glide naturally across the screen."}],"isConstructor":false,"name":"Derma_Anim","realm":"client and menu","returns":[{"description":"A lua metatable containing four methods:\n* Run() - Should be called each frame you want the animation to be ran.\n* Active() - Returns if the animation is currently active (has not finished and stop has not been called)\n* Stop() - Halts the animation at its current progress.\n* Start( Length, Data ) - Prepares the animation to be ran for Length seconds. Must be called once before calling Run(). The data parameter will be passed to the func function.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to draw the background blur around","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"},{"default":"","description":"Time that the blur began being painted","isOptional":false,"isVarArg":false,"name":"startTime","type":"number"}],"description":"Draws background blur around the given panel.","examples":[{"code":"function PANEL:Init()\n    self.startTime = SysTime()\nend\n\nfunction PANEL:Paint()\n    Derma_DrawBackgroundBlur(self, self.startTime)\nend","description":"Blur being drawn around a panel"}],"isConstructor":false,"name":"Derma_DrawBackgroundBlur","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to add the hook to","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"},{"default":"","description":"Name of panel function to create","isOptional":false,"isVarArg":false,"name":"functionName","type":"string"},{"default":"","description":"Name of Derma skin hook to call within the function","isOptional":false,"isVarArg":false,"name":"hookName","type":"string"},{"default":"","description":"Type of element to call Derma skin hook for","isOptional":false,"isVarArg":false,"name":"typeName","type":"string"}],"description":"Creates panel method that calls the supplied Derma skin hook via {{LibraryFunction|derma|SkinHook}}","examples":[{"code":"Derma_Hook( PANEL, \"Paint\", \"Paint\", \"Panel\" )","description":"Creates PANEL.Paint function to call Derma skin hook 'Paint' with type 'Panel'"}],"isConstructor":false,"name":"Derma_Hook","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel the functions should be added to.","isOptional":false,"isVarArg":false,"name":"target","type":"Panel"}],"description":"Makes the panel (usually an input of sorts) respond to changes in console variables by adding next functions to the panel:\n* {{ClassFunction|Panel|SetConVar}}\n* {{ClassFunction|Panel|ConVarChanged}}\n* {{ClassFunction|Panel|ConVarStringThink}}\n* {{ClassFunction|Panel|ConVarNumberThink}}\n\nThe console variable value is saved in the ''m_strConVar'' property of the panel.\n\nThe panel should call\n{{ClassFunction|Panel|ConVarStringThink}} or \n{{ClassFunction|Panel|ConVarNumberThink}} \nin its {{HookFunction|PANEL|Think}} hook and should call {{ClassFunction|Panel|ConVarChanged}} when the panel's value has changed.","examples":[{"code":"local PANEL = {}\n\nDerma_Install_Convar_Functions( PANEL )\n\nfunction PANEL:Init()\n\t-- Init function here\nend\nfunction PANEL:Think()\n\tself:ConVarStringThink()\nend","description":"Adds the functions to a panel (snippet of vgui/dcheckbox.lua)"}],"isConstructor":false,"name":"Derma_Install_Convar_Functions","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text within the created panel.","isOptional":false,"isVarArg":false,"name":"Text","type":"string"},{"default":"","description":"The title of the created panel.","isOptional":false,"isVarArg":false,"name":"Title","type":"string"},{"default":"","description":"The text of the button to close the panel.","isOptional":false,"isVarArg":false,"name":"Button","type":"string"}],"description":"Creates a derma window to display information","examples":[{"code":"","description":""}],"isConstructor":false,"name":"Derma_Message","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"\"Message Text (Second Parameter)\"","description":"The message to display.","isOptional":true,"isVarArg":false,"name":"text","type":"string"},{"default":"\"Message Title (First Parameter)\"","description":"The title to give the message box.","isOptional":true,"isVarArg":false,"name":"title","type":"string"},{"default":"","description":"The text to display on the first button.","isOptional":true,"isVarArg":false,"name":"btn1text","type":"string"},{"default":"nil","description":"The function to run if the user clicks the first button.","isOptional":true,"isVarArg":false,"name":"btn1func","type":"Function"},{"default":"nil","description":"The text to display on the second button.","isOptional":true,"isVarArg":false,"name":"btn2text","type":"string"},{"default":"nil","description":"The function to run if the user clicks the second button.","isOptional":true,"isVarArg":false,"name":"btn2func","type":"Function"},{"default":"nil","description":"The text to display on the third button","isOptional":true,"isVarArg":false,"name":"btn3text","type":"string"},{"default":"nil","description":"The function to run if the user clicks the third button.","isOptional":true,"isVarArg":false,"name":"btn3func","type":"Function"},{"default":"nil","description":"The text to display on the third button","isOptional":true,"isVarArg":false,"name":"btn4text","type":"string"},{"default":"nil","description":"The function to run if the user clicks the fourth button.","isOptional":true,"isVarArg":false,"name":"btn4func","type":"Function"}],"description":"Shows a message box in the middle of the screen, with up to 4 buttons they can press.","examples":[],"isConstructor":false,"name":"Derma_Query","realm":"client and menu","returns":[{"description":"The Panel object of the created window.","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The title of the created panel.","isOptional":false,"isVarArg":false,"name":"title","type":"string"},{"default":"","description":"The text above the input box","isOptional":false,"isVarArg":false,"name":"subtitle","type":"string"},{"default":"","description":"The default text for the input box.","isOptional":false,"isVarArg":false,"name":"defaultVal","type":"string"},{"default":"","description":"The function to be called once the user has confirmed their input.","isOptional":false,"isVarArg":false,"name":"confirm","type":"Function"},{"default":"nil","description":"The function to be called once the user has cancelled their input","isOptional":true,"isVarArg":false,"name":"cancel","type":"Function"},{"default":"\"OK\"","description":"Allows you to override text of the \"OK\" button","isOptional":true,"isVarArg":false,"name":"confirmText","type":"string"},{"default":"\"Cancel\"","description":"Allows you to override text of the \"Cancel\" button","isOptional":true,"isVarArg":false,"name":"cancelText","type":"string"}],"description":"Creates a derma window asking players to input a string.","examples":[{"code":"Derma_StringRequest(\n\t\"Console Print\", \n\t\"Input the string to print to console\",\n\t\"\",\n\tfunction(text) print(text) end,\n\tfunction(text) print(\"Cancelled input\") end\n)","description":"Asks the user to input a string which is then printed to their console"}],"isConstructor":false,"name":"Derma_StringRequest","realm":"client and menu","returns":[{"description":"The created {{Type|DFrame}}","type":"DFrame"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to parent the created menu to.","isOptional":false,"isVarArg":false,"name":"parent","type":"Panel"}],"description":"Creates a {{Type|DMenu}} and closes any current menus.","examples":[{"code":"local menu = DermaMenu() \nmenu:AddOption(\"Die\", function() RunConsoleCommand(\"kill\") end)\nmenu:AddOption(\"Close\", function() print(\"Close pressed\") end) -- The menu will remove itself, we don't have to do anything.\nmenu:Open()","description":"Creates a DMenu with buttons to commit suicide or close it."}],"isConstructor":false,"name":"DermaMenu","realm":"client and menu","returns":[{"description":"The created {{Type|DMenu}}","type":"DMenu"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether or not clipping should be disabled","isOptional":false,"isVarArg":false,"name":"disable","type":"boolean"}],"description":"Sets whether rendering should be limited to being inside a panel or not.\n\nSee also {{LibraryFunction|surface|DisableClipping}} and {{ClassFunction|Panel|NoClipping}}.","examples":[{"code":"function PANEL:Paint()\n    DisableClipping(true)\n    draw.RoundedBox(0, -50, -50, 25, 25, color_white)\n    DisableClipping(false)\nend","description":"Renders a white box outside of the panel"}],"isConstructor":false,"name":"DisableClipping","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Cancels current DOF post-process effect started with {{GlobalFunction|DOF_Start}}","examples":[],"isConstructor":false,"name":"DOF_Kill","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Cancels any existing DOF post-process effects.\nBegins the DOF post-process effect.","examples":[],"isConstructor":false,"name":"DOF_Start","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Enables or disables depth-of-field mode","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"A hacky method used to fix some bugs regarding DoF.\n\n{{Internal}}\n{{Stub}}","examples":[],"isConstructor":false,"name":"DOFModeHack","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}} Draws the currently active main menu background image and handles transitioning between background images.\n\nThis is called by default in the menu panel's Paint hook.","examples":[],"isConstructor":false,"name":"DrawBackground","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Determines how much to darken the effect. A lower number will make the glow come from lower light levels. A value of 1 will make the bloom effect unnoticeable. Negative values will make even pitch black areas glow.","isOptional":false,"isVarArg":false,"name":"Darken","type":"number"},{"default":"","description":"Will affect how bright the glowing spots are. A value of 0 will make the bloom effect unnoticeable.","isOptional":false,"isVarArg":false,"name":"Multiply","type":"number"},{"default":"","description":"The size of the bloom effect along the horizontal axis.","isOptional":false,"isVarArg":false,"name":"SizeX","type":"number"},{"default":"","description":"The size of the bloom effect along the vertical axis.","isOptional":false,"isVarArg":false,"name":"SizeY","type":"number"},{"default":"","description":"Determines how much to exaggerate the effect.","isOptional":false,"isVarArg":false,"name":"Passes","type":"number"},{"default":"","description":"Will multiply the colors of the glowing spots, making them more vivid.","isOptional":false,"isVarArg":false,"name":"ColorMultiply","type":"number"},{"default":"","description":"How much red to multiply with the glowing color. Should be between 0 and 1","isOptional":false,"isVarArg":false,"name":"Red","type":"number"},{"default":"","description":"How much green to multiply with the glowing color. Should be between 0 and 1","isOptional":false,"isVarArg":false,"name":"Green","type":"number"},{"default":"","description":"How much blue to multiply with the glowing color. Should be between 0 and 1","isOptional":false,"isVarArg":false,"name":"Blue","type":"number"}],"description":"Draws the bloom shader, which creates a glowing effect from bright objects.","examples":[{"code":"function GM:RenderScreenspaceEffects()\n\tDrawBloom( 0.65, 2, 9, 9, 1, 1, 1, 1, 1 )\nend","description":"Draws bloom effect with default settings."}],"isConstructor":false,"name":"DrawBloom","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Color modification parameters. See {{ShaderLink|g_colourmodify}} and the example below. Note that if you leave out a field, it will retain its last value which may have changed if another caller uses this function.","isOptional":false,"isVarArg":false,"name":"modifyParameters","type":"table"}],"description":"Draws the Color Modify shader, which can be used to adjust colors on screen.","examples":[{"code":"local tab = {\n\t[ \"$pp_colour_addr\" ] = 0.02,\n\t[ \"$pp_colour_addg\" ] = 0.02,\n\t[ \"$pp_colour_addb\" ] = 0,\n\t[ \"$pp_colour_brightness\" ] = 0,\n\t[ \"$pp_colour_contrast\" ] = 1,\n\t[ \"$pp_colour_colour\" ] = 3,\n\t[ \"$pp_colour_mulr\" ] = 0,\n\t[ \"$pp_colour_mulg\" ] = 0.02,\n\t[ \"$pp_colour_mulb\" ] = 0\n}\n\nfunction GM:RenderScreenspaceEffects()\n\n\tDrawColorModify( tab )\n\nend","description":"Draws color modify with bright yellow and green colors."}],"isConstructor":false,"name":"DrawColorModify","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"This will be the material that is drawn onto the screen.","isOptional":false,"isVarArg":false,"name":"Material","type":"string"},{"default":"","description":"This will adjust how much the material will refract your screen.","isOptional":false,"isVarArg":false,"name":"RefractAmount","type":"number"}],"description":"Draws a material overlay on the screen.","examples":[{"code":"function GM:RenderScreenspaceEffects()\n\n\tDrawMaterialOverlay(\"models/props_c17/fisheyelens\", -0.06)\n\nend","description":"Creates a fisheye effect on your screen."}],"isConstructor":false,"name":"DrawMaterialOverlay","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"How much alpha to change per frame.","isOptional":false,"isVarArg":false,"name":"AddAlpha","type":"number"},{"default":"","description":"How much alpha the frames will have. A value of 0 will not render the motion blur effect.","isOptional":false,"isVarArg":false,"name":"DrawAlpha","type":"number"},{"default":"","description":"Determines the amount of time between frames to capture.","isOptional":false,"isVarArg":false,"name":"Delay","type":"number"}],"description":"Creates a motion blur effect by drawing your screen multiple times.","examples":[{"code":"function GM:RenderScreenspaceEffects()\n\n DrawMotionBlur(0.4, 0.8, 0.01)\n\nend","description":"Creates a motion blur effect."}],"isConstructor":false,"name":"DrawMotionBlur","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"How much contrast to create.","isOptional":false,"isVarArg":false,"name":"Contrast","type":"number"},{"default":"","description":"How large the contrast effect will be.","isOptional":false,"isVarArg":false,"name":"Distance","type":"number"}],"description":"Draws the sharpen shader, which creates more contrast.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"DrawSharpen","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Determines the threshold of edges. A value of 0 will make your screen completely black.","isOptional":false,"isVarArg":false,"name":"Threshold","type":"number"}],"description":"Draws the sobel shader, which detects edges and draws a black border.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"DrawSobel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"$darken property for sunbeams material","isOptional":false,"isVarArg":false,"name":"darken","type":"number"},{"default":"","description":"$multiply property for sunbeams material","isOptional":false,"isVarArg":false,"name":"multiplier","type":"number"},{"default":"","description":"$sunsize property for sunbeams material","isOptional":false,"isVarArg":false,"name":"sunSize","type":"number"},{"default":"","description":"$sunx property for sunbeams material","isOptional":false,"isVarArg":false,"name":"sunX","type":"number"},{"default":"","description":"$suny property for sunbeams material","isOptional":false,"isVarArg":false,"name":"sunY","type":"number"}],"description":"Renders the post-processing effect of beams of light originating from the map's sun. Utilises the \"pp/sunbeams\" material","examples":[],"isConstructor":false,"name":"DrawSunbeams","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Scale of the texture. A smaller number creates a larger texture.","isOptional":false,"isVarArg":false,"name":"Scale","type":"number"},{"default":"","description":"This will be the texture to use in the effect. Make sure you use {{GlobalFunction|Material}} to get the texture number","isOptional":false,"isVarArg":false,"name":"BaseTexture","type":"number"}],"description":"Draws the texturize shader, which replaces each pixel on your screen with a different part of the texture depending on its brightness. See [[Shaders/g_texturize|g_texturize]] for information on making the texture.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"DrawTexturize","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"An integer determining how many times to draw the effect. A higher number creates more blur.","isOptional":false,"isVarArg":false,"name":"Passes","type":"number"},{"default":"","description":"The amount of screen which should be blurred on the top and bottom.","isOptional":false,"isVarArg":false,"name":"Height","type":"number"}],"description":"Draws the toy town shader, which blurs the top and bottom of your screen. This can make very large objects look like toys, hence the name.","examples":[{"code":"function GM:RenderScreenspaceEffects()\n\n DrawToyTown(2, ScrH()/2)\n\nend","description":"Draws toy town effect."}],"isConstructor":false,"name":"DrawToyTown","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to drop.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Drops the specified entity if it is being held by any player with Gravity Gun or +use pickup.","examples":[],"isConstructor":false,"name":"DropEntityIfHeld","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"An unsigned Integer. Usually an [[Entity/EntIndex|entity index]] is used here.","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"Creates or replaces a dynamic light with the given id.\n\n{{Note|Only 32 lights can be active at once.}}","examples":[{"code":"hook.Add( \"Think\", \"Think_Lights!\", function()\n\tlocal dlight = DynamicLight( LocalPlayer():EntIndex() )\n\tif ( dlight ) then\n\t\tdlight.pos = LocalPlayer():GetShootPos()\n\t\tdlight.r = 255\n\t\tdlight.g = 255\n\t\tdlight.b = 255\n\t\tdlight.brightness = 2\n\t\tdlight.Decay = 1000\n\t\tdlight.Size = 256\n\t\tdlight.DieTime = CurTime() + 1\n\tend\nend )","description":"Emits a bright white light from local players eyes."}],"isConstructor":false,"name":"DynamicLight","realm":"client","returns":[{"description":"A DynamicLight structured table. See {{Struct|DynamicLight}}","type":"DynamicLight"}]},{"accessModifier":"public","arguments":[],"description":"Returns a {{Type|CEffectData}} object to be used with {{LibraryFunction|util|Effect}}.\n\n{{Bug|Issue=2771|This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once.}}","examples":[],"isConstructor":false,"name":"EffectData","realm":"shared","returns":[{"description":"The {{Type|CEffectData}} object.","type":"CEffectData"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The condition to check if true or false.","isOptional":false,"isVarArg":false,"name":"condition","type":"any"},{"default":"","description":"If the condition isn't nil/false, returns this value.","isOptional":false,"isVarArg":false,"name":"truevar","type":"any"},{"default":"","description":"If the condition is nil/false, returns this value.","isOptional":false,"isVarArg":false,"name":"falsevar","type":"any"}],"description":"An 'if then else'. This is ''almost'' equivalent to (''condition'' and ''truevar'' or ''falsevar'') in Lua. The difference is that if ''truevar'' evaluates to false, the plain Lua method stated would return ''falsevar'' regardless of ''condition'' whilst this function would take ''condition'' into account.","examples":[{"code":"local ply = Entity( 1 )\nprint( \"Player \" .. Either( ply:IsAdmin(), \"is\", \"is not\" ) .. \" an admin\" )\n\nprint( \"Player \" .. ( ply:IsAdmin() and \"is\" or \"is not\" ) .. \" an admin\" )","description":"The following two ''print'' statements have identical results."},{"code":"print(\"You are: \"..( LocalPlayer():Alive() and \"alive\" or \"dead\" ))\n\n// conditional:\n\nprint( \"Halflife? \"..( (LocalPlayer():Health()==50) and \"halflife\" or \"not halflife\") )","description":"Plain Lua alias version."}],"isConstructor":false,"name":"Either","realm":"shared and menu","returns":[{"description":"The result.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The sound to play","isOptional":false,"isVarArg":false,"name":"soundName","type":"string"},{"default":"","description":"The position to play at","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"The entity to emit the sound from. Must be {{ClassFunction|Entity|EntIndex}}","isOptional":false,"isVarArg":false,"name":"entity","type":"number"},{"default":"CHAN_AUTO","description":"The sound channel, see {{Enum|CHAN}}.","isOptional":true,"isVarArg":false,"name":"channel","type":"CHAN"},{"default":"1","description":"The volume of the sound, from 0 to 1","isOptional":true,"isVarArg":false,"name":"volume","type":"number"},{"default":"75","description":"The sound level of the sound, see {{Enum|SNDLVL}}","isOptional":true,"isVarArg":false,"name":"soundLevel","type":"SNDLVL"},{"default":"0","description":"The flags of the sound, see {{Enum|SND}}","isOptional":true,"isVarArg":false,"name":"soundFlags","type":"SND"},{"default":"100","description":"The pitch of the sound, 0-255","isOptional":true,"isVarArg":false,"name":"pitch","type":"number"}],"description":"Plays a sentence from scripts/sentences.txt\n\n{{Bug|Seems to work only on serverside.|Fixed=}}","examples":[{"code":"EmitSentence( \"COMBINE_DIE\" .. math.random( 0, 3 ), Entity(1):GetPos(), 1, CHAN_AUTO, 1, 75, 0, 100 )","description":"Plays random combine death sound on first player."}],"isConstructor":false,"name":"EmitSentence","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The sound to play","isOptional":false,"isVarArg":false,"name":"soundName","type":"string"},{"default":"","description":"The position to play at","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"The entity to emit the sound from. Can be an {{ClassFunction|Entity|EntIndex}} or one of the following:\n* 0 - Plays sound on the world (Position set to 0,0,0)\n* -1 - Plays sound on the local player (on server acts as 0)\n* -2 - Plays UI sound (Position set to 0,0,0, no spatial sound,on server acts as 0)","isOptional":false,"isVarArg":false,"name":"entity","type":"number"},{"default":"CHAN_AUTO","description":"The sound channel, see {{Enum|CHAN}}.","isOptional":true,"isVarArg":false,"name":"channel","type":"CHAN"},{"default":"1","description":"The volume of the sound, from 0 to 1","isOptional":true,"isVarArg":false,"name":"volume","type":"number"},{"default":"75","description":"The sound level of the sound, see {{Enum|SNDLVL}}","isOptional":true,"isVarArg":false,"name":"soundLevel","type":"SNDLVL"},{"default":"0","description":"The flags of the sound, see {{Enum|SND}}","isOptional":true,"isVarArg":false,"name":"soundFlags","type":"SND"},{"default":"100","description":"The pitch of the sound, 0-255","isOptional":true,"isVarArg":false,"name":"pitch","type":"number"}],"description":"Emits the specified sound at the specified position.\n\n{{Bug|Sounds must be precached serverside manually before they can be played. util.PrecacheSound does not work for this purpose, Entity.EmitSound does the trick}}\n{{Bug|This does not work with soundscripts. TODO: Is this a bug or intended?}}","examples":[{"code":"EmitSound( Sound(\"garrysmod/save_load1.wav\"), Entity(1):GetPos(), 1, CHAN_AUTO, 1, 75, 0, 100 )","description":"Plays magical sound on first player."}],"isConstructor":false,"name":"EmitSound","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"This is the panel that has a tool tip.","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"}],"description":"Removes the currently active tool tip from the screen.","examples":[],"isConstructor":false,"name":"EndTooltip","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The error message to throw.","isOptional":false,"isVarArg":false,"name":"message","type":"string"},{"default":"1","description":"The level to throw the error at.","isOptional":true,"isVarArg":false,"name":"errorLevel","type":"number"}],"description":"Throws a Lua error and breaks out of the current call stack.","examples":[{"code":"error(\"garry\")","description":""}],"isConstructor":false,"name":"error","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Converts all arguments to strings and prints them with no spacing.","isOptional":false,"isVarArg":true,"name":"arguments","type":"any"}],"description":"Throws a Lua error but does not break out of the current call stack.\n\n{{Bug|Issue=1810|Using this function in the menu state exits the menu.}}\n\n{{Bug|Issue=2247|This function has a character limit of 511.}}","examples":[{"code":"local num = 11\nif ( num <= 10 and num >= 0 ) then\n\tprint( \"The number is\", num )\nelse\n\tErrorNoHalt( \"Number out of range!\\n\" )\n\tprint(\"This line will be printed\")\nend","description":"An example of the use of this function"}],"isConstructor":false,"name":"ErrorNoHalt","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the angles of the current render context as calculated by {{HookFunction|GM|CalcView}}.\n\n{{Bug|Issue=2516|This function is only reliable inside rendering hooks.}}","examples":[{"code":"print(EyeAngles())","description":"Print the view angles"},{"code":"print(EyeAngles():Forward())","description":"Identical to {{GlobalFunction|EyeVector}}"}],"isConstructor":false,"name":"EyeAngles","realm":"client","returns":[{"description":"The angle of the currently rendered scene.","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Returns the origin of the current render context as calculated by {{HookFunction|GM|CalcView}}.\n\n{{Bug|Issue=2516|This function is only reliable inside rendering hooks.}}","examples":[{"code":"print(EyePos())","description":"Print the view position"},{"code":"hook.Add(\"PreDrawTranslucentRenderables\", \"FixEyePos\", function() EyePos() end)\nhook.Add( \"Think\", \"Use Eyepos outside of render function\", function()\n\tlocal start = EyePos()\n\tlocal dir = gui.ScreenToVector(gui.MousePos())\n\tlocal trace = util.TraceLine{\n\t\tstart = start,\n\t\tendpos = start + ( dir * 10000 ),\n\t\tfilter = { ply },\n\t}\n\tdebugoverlay.Box( trace.HitPos, Vector( -5, -5, -5 ), Vector( 5, 5, 5 ) )\nend )","description":"Ensuring EyePos returns the correct value outside of render hooks."}],"isConstructor":false,"name":"EyePos","realm":"client","returns":[{"description":"Camera position.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the normal vector of the current render context as calculated by {{HookFunction|GM|CalcView}}, similar to {{GlobalFunction|EyeAngles}}.\n\n{{Bug|Issue=2516|This function is only reliable inside rendering hooks.}}","examples":[{"code":"print( EyeVector() )","description":"Print the view angles"}],"isConstructor":false,"name":"EyeVector","realm":"client","returns":[{"description":"View direction of the currently rendered scene.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The object type to retrieve the meta table of.","isOptional":false,"isVarArg":false,"name":"metaName","type":"string"}],"description":"Returns the meta table for the class with the matching name.\n\nInternally returns {{LibraryFunction|debug|getregistry}}()[metaName]\n\nYou can learn more about meta tables on the [[Meta Tables]] page.\n\nYou can find a list of meta tables that can be retrieved with this function on {{Enum|TYPE}}. The name in the description is the string to use with this function.","examples":[{"code":"local meta = FindMetaTable(\"Player\")\n\nfunction meta:IsSick()\n\treturn true\nend\n\n-- Sometime later...\nlocal ply = Entity(1)\nif ( ply:IsSick() ) then\n\tply:ChatPrint( \"Get well soon, \" .. ply:Nick() .. \"!\" )\n\tply:ChatPrint( \"I just don't understand how you're always sick...\" )\nend","description":"Adds a very simple function for checking if a player is sick to the player metatable."}],"isConstructor":false,"name":"FindMetaTable","realm":"shared and menu","returns":[{"description":"The corresponding meta table.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to find tool-tip of","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"}],"description":"Returns the tool-tip text and tool-tip-panel (if any) of the given panel as well as itself","examples":[],"isConstructor":false,"name":"FindTooltip","realm":"client and menu","returns":[{"description":"tool-tip text","type":"string"},{"description":"tool-tip panel","type":"Panel"},{"description":"panel that the function was called with","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to be formatted.<br>\nFollows this format: http://www.cplusplus.com/reference/cstdio/printf/","isOptional":false,"isVarArg":false,"name":"format","type":"string"},{"default":"","description":"Values to be formatted into the string.","isOptional":false,"isVarArg":true,"name":"formatParameters","type":"any"}],"description":"Formats the specified values into the string given. Same as {{LibraryFunction|string|format}}.","examples":[],"isConstructor":false,"name":"Format","realm":"shared and menu","returns":[{"description":"The formatted string","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the number of frames rendered since the game was launched.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"FrameNumber","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the {{GlobalFunction|CurTime}}-based time in seconds it took to render the last frame.\n\nThis should be used for frame/tick based timing, such as movement prediction or animations.\n\nFor real-time-based frame time that isn't affected by host_timescale, use {{GlobalFunction|RealFrameTime}}. RealFrameTime is more suited for things like GUIs or HUDs.","examples":[{"code":"print(FrameTime())","description":"Print the frame time"},{"code":"print(\"Tick: \"..(1/FrameTime()))","description":"Get the servers/clients tickrate/fps"}],"isConstructor":false,"name":"FrameTime","realm":"shared and menu","returns":[{"description":"time (in seconds)","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Server's name.","isOptional":false,"isVarArg":false,"name":"servername","type":"string"},{"default":"","description":"Server's loading screen URL, or \"\" if the URL is not set.","isOptional":false,"isVarArg":false,"name":"serverurl","type":"string"},{"default":"","description":"Server's current map's name.","isOptional":false,"isVarArg":false,"name":"mapname","type":"string"},{"default":"","description":"Max player count of server.","isOptional":false,"isVarArg":false,"name":"maxplayers","type":"number"},{"default":"","description":"The local player's {{ClassFunction|Player|SteamID64}}.","isOptional":false,"isVarArg":false,"name":"steamid","type":"string"},{"default":"","description":"Server's current gamemode's folder name.","isOptional":false,"isVarArg":false,"name":"gamemode","type":"string"}],"description":"Callback function for when the client has joined a server. This function shows the server's loading URL by default.","examples":[{"code":"local OldGameDetails = GameDetails\nfunction GameDetails( servername, serverurl, mapname, maxplayers, steamid, gamemode )\n\tprint( 1, servername )\n\tprint( 2, serverurl )\n\tprint( 3, mapname )\n\tprint( 4, maxplayers )\n\tprint( 5, steamid )\n\tprint( 6, gamemode )\n\tOldGameDetails( servername, serverurl, mapname, maxplayers, steamid, gamemode )\nend","description":"Prints GameDetails of the server you join to console, and preserves default behavior."}],"isConstructor":false,"name":"GameDetails","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|This function was deprecated in Lua 5.1 and is removed in Lua 5.2. Use {{GlobalFunction|collectgarbage}}( \"count\" ) instead.}} Returns the current floored dynamic memory usage of Lua in kilobytes.","examples":[],"isConstructor":false,"name":"gcinfo","realm":"shared and menu","returns":[{"description":"The current floored dynamic memory usage of Lua, in kilobytes.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the ConVar to get","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Gets the ConVar with the specified name. This function caches the ConVar object internally.","examples":[],"isConstructor":false,"name":"GetConVar","realm":"shared and menu","returns":[{"description":"The ConVar object","type":"ConVar"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the ConVar to get","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"{{Internal}}Gets the ConVar with the specified name. This function doesn't cache the convar.","examples":[],"isConstructor":false,"name":"GetConVar_Internal","realm":"shared and menu","returns":[{"description":"The ConVar object","type":"ConVar"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the ConVar to get.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"{{Deprecated|Store the {{Type|ConVar}} object retrieved with {{GlobalFunction|GetConVar}} and call {{ClassFunction|ConVar|GetInt}} or {{ClassFunction|ConVar|GetFloat}} on it.}}Gets the numeric value ConVar with the specified name.","examples":[],"isConstructor":false,"name":"GetConVarNumber","realm":"shared and menu","returns":[{"description":"The ConVar's value.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the ConVar to get.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"{{Deprecated|Store the {{Type|ConVar}} object retrieved with {{GlobalFunction|GetConVar}} and call {{ClassFunction|ConVar|GetString}} on it.}}Gets the string value ConVar with the specified name.","examples":[],"isConstructor":false,"name":"GetConVarString","realm":"shared and menu","returns":[{"description":"The ConVar's value.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the default loading screen URL (asset://garrysmod/html/loading.html)","examples":[],"isConstructor":false,"name":"GetDefaultLoadingHTML","realm":"menu","returns":[{"description":"Default loading url (asset://garrysmod/html/loading.html)","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The file name of the demo.","isOptional":false,"isVarArg":false,"name":"filename","type":"string"}],"description":"Retrieves data about the demo with the specified filename. Similar to {{GlobalFunction|GetSaveFileDetails}}.","examples":[],"isConstructor":false,"name":"GetDemoFileDetails","realm":"menu","returns":[{"description":"Demo data.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table with the names of files needed from the server you are currently joining.","examples":[{"code":"PrintTable( GetDownloadables() )","description":"Returns a table with the file names."}],"isConstructor":false,"name":"GetDownloadables","realm":"menu","returns":[{"description":"table of file names","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"1","description":"The object to get the enviroment from. Can also be a number that specifies the function at that stack level: Level 1 is the function calling getfenv.","isOptional":true,"isVarArg":false,"name":"location","type":"Function"}],"description":"Returns the environment table of either the stack level or the function specified.","examples":[],"isConstructor":false,"name":"getfenv","realm":"shared and menu","returns":[{"description":"The environment.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique index to identify the global value with.","isOptional":false,"isVarArg":false,"name":"index","type":"string"},{"default":"Angle( 0, 0, 0 )","description":"The value to return if the global value is not set.","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"Angle"}],"description":"Returns an angle that is shared between the server and all clients.","examples":[],"isConstructor":false,"name":"GetGlobalAngle","realm":"shared","returns":[{"description":"The global value, or default if the global is not set.","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique index to identify the global value with.","isOptional":false,"isVarArg":false,"name":"index","type":"string"},{"default":"false","description":"The value to return if the global value is not set.","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"boolean"}],"description":"Returns a boolean that is shared between the server and all clients.","examples":[],"isConstructor":false,"name":"GetGlobalBool","realm":"shared","returns":[{"description":"The global value, or the default if the global value is not set.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique index to identify the global value with.","isOptional":false,"isVarArg":false,"name":"index","type":"string"},{"default":"NULL","description":"The value to return if the global value is not set.","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"Entity"}],"description":"Returns an entity that is shared between the server and all clients.","examples":[],"isConstructor":false,"name":"GetGlobalEntity","realm":"shared","returns":[{"description":"The global value, or the default if the global value is not set.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique index to identify the global value with.","isOptional":false,"isVarArg":false,"name":"index","type":"string"},{"default":"0","description":"The value to return if the global value is not set.","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"number"}],"description":"Returns a float that is shared between the server and all clients.","examples":[],"isConstructor":false,"name":"GetGlobalFloat","realm":"shared","returns":[{"description":"The global value, or the default if the global value is not set.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique index to identify the global value with.","isOptional":false,"isVarArg":false,"name":"index","type":"string"},{"default":"0","description":"The value to return if the global value is not set.","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"number"}],"description":"Returns an integer that is shared between the server and all clients.\n\n{{Bug|Issue=3374|This function will not round decimal values as it actually networks a float internally.}}","examples":[{"code":"print(GetGlobalInt(\"RoundNumber\", 0))","description":"Prints the current round number if set, otherwise 0."}],"isConstructor":false,"name":"GetGlobalInt","realm":"shared","returns":[{"description":"The global value, or the default if the global value is not set.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique index to identify the global value with.","isOptional":false,"isVarArg":false,"name":"index","type":"string"},{"default":"\"\"","description":"The value to return if the global value is not set.","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"string"}],"description":"Returns a string that is shared between the server and all clients.","examples":[{"code":"print( GetGlobalString(\"ServerName\", \"Garry's Mod 13\") )","description":"Prints the current server name if set, otherwise \"Garry's Mod 13\"."}],"isConstructor":false,"name":"GetGlobalString","realm":"shared","returns":[{"description":"The global value, or the default if the global value is not set.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique index to identify the global value with.","isOptional":false,"isVarArg":false,"name":"Index","type":"string"},{"default":"","description":"The value to return if the global value is not set.","isOptional":false,"isVarArg":false,"name":"Default","type":"Vector"}],"description":"Returns a vector that is shared between the server and all clients.","examples":[],"isConstructor":false,"name":"GetGlobalVector","realm":"shared","returns":[{"description":"The global value, or the default if the global value is not set.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the name of the current server.","examples":[],"isConstructor":false,"name":"GetHostName","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the panel that is used as a wrapper for the HUD.\n\nSee also {{LibraryFunction|vgui|GetWorldPanel}}","examples":[],"isConstructor":false,"name":"GetHUDPanel","realm":"client","returns":[{"description":"The HUD panel","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns the loading screen panel and creates it if it doesn't exist.","examples":[],"isConstructor":false,"name":"GetLoadPanel","realm":"menu","returns":[{"description":"The loading screen panel","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current status of the server join progress.","examples":[],"isConstructor":false,"name":"GetLoadStatus","realm":"menu","returns":[{"description":"The current status","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table with the names of all maps and categories that you have on your client.","examples":[],"isConstructor":false,"name":"GetMapList","realm":"menu","returns":[{"description":"table of map names and categories","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to return the metatable of.","isOptional":false,"isVarArg":false,"name":"object","type":"any"}],"description":"Returns the metatable of an object. This function obeys the metatable's __metatable field, and will return that field if the metatable has it set.\n\nUse {{LibraryFunction|debug|getmetatable}} if you want the true metatable of the object.","examples":[{"code":"print(getmetatable(Pupil).__index.GetName(Pupil))\n-- getmetatable(Pupil) will return Pupil_meta.\n-- Same as print(Pupil:GetName())\n-- This is what the Lua interpreter basically does. (When __index is a table.)\n\ngetmetatable(Pupil).SetName = function(self, newName)\n self.name = newName\nend\n-- We're adding a new method to Pupil's metatable\n\nprint(getmetatable(Pupil).GetName(Pupil))\n-- Still the same, because Pupil_meta.__index is Pupil_meta.","description":"Use a table's metatable and alter it."}],"isConstructor":false,"name":"getmetatable","realm":"shared and menu","returns":[{"description":"The metatable of the value. This is not always a table.","type":"any"}]},{"accessModifier":"public","arguments":[],"description":"Returns the menu overlay panel, a container for panels like the error panel created in {{HookFunction|GM|OnLuaError}}.","examples":[],"isConstructor":false,"name":"GetOverlayPanel","realm":"menu","returns":[{"description":"The overlay panel","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The internal name of the render target.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The width of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The height of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size.","isOptional":false,"isVarArg":false,"name":"height","type":"number"},{"default":"false","description":"Sets whenever the rt should be additive.","isOptional":true,"isVarArg":false,"name":"additive","type":"boolean"}],"description":"Creates or gets the rendertarget with the given name.\n\nSee {{GlobalFunction|GetRenderTargetEx}} for an advanced version of this function with more options.\n\n{{Bug|Issue=2885|This crashes when used on a cubemap texture.}}","examples":[],"isConstructor":false,"name":"GetRenderTarget","realm":"client","returns":[{"description":"The render target","type":"ITexture"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The internal name of the render target.\n\n{{Warning|The name is treated like a path and gets its extension discarded.<br>\"name.1\" and \"name.2\" are considered the same name and will result in the same render target being reused.}}","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The width of the render target, must be power of 2.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The height of the render target, must be power of 2.","isOptional":false,"isVarArg":false,"name":"height","type":"number"},{"default":"","description":"Bitflag that influences the sizing of the render target, see {{Enum|RT_SIZE}}.","isOptional":false,"isVarArg":false,"name":"sizeMode","type":"RT_SIZE"},{"default":"","description":"Bitflag that determines the depth buffer usage of the render target {{Enum|MATERIAL_RT_DEPTH}}.","isOptional":false,"isVarArg":false,"name":"depthMode","type":"MATERIAL_RT_DEPTH"},{"default":"","description":"Bitflag that configurates the texture, see {{Enum|TEXTUREFLAGS}}.\n\nList of flags can also be found on the Valve's Developer Wiki:\nhttps://developer.valvesoftware.com/wiki/Valve_Texture_Format","isOptional":false,"isVarArg":false,"name":"textureFlags","type":"TEXTUREFLAGS"},{"default":"","description":"Flags that controll the HDR behaviour of the render target, see {{Enum|CREATERENDERTARGETFLAGS}}.","isOptional":false,"isVarArg":false,"name":"rtFlags","type":"CREATERENDERTARGETFLAGS"},{"default":"","description":"Image format, see {{Enum|IMAGE_FORMAT}}.","isOptional":false,"isVarArg":false,"name":"imageFormat","type":"IMAGE_FORMAT"}],"description":"Creates (or gets if it already exsits) the rendertarget with the given name, this function allows to adjust the creation of a rendertarget more than {{GlobalFunction|GetRenderTarget}}.\n\nSee also {{LibraryFunction|render|PushRenderTarget}} and {{LibraryFunction|render|SetRenderTarget}}.","examples":[],"isConstructor":false,"name":"GetRenderTargetEx","realm":"client","returns":[{"description":"The new render target.","type":"ITexture"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The file name of the save.","isOptional":false,"isVarArg":false,"name":"filename","type":"string"}],"description":"Retrieves data about the save with the specified filename. Similar to {{GlobalFunction|GetDemoFileDetails}}.","examples":[],"isConstructor":false,"name":"GetSaveFileDetails","realm":"menu","returns":[{"description":"Save data.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity the client is using to see from (such as the player itself, the camera, or another entity).","examples":[],"isConstructor":false,"name":"GetViewEntity","realm":"client","returns":[{"description":"The view entity.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Hue in degrees.","isOptional":false,"isVarArg":false,"name":"hue","type":"number"},{"default":"","description":"Saturation from 0 - 1.","isOptional":false,"isVarArg":false,"name":"saturation","type":"number"},{"default":"","description":"Value from 0 - 1.","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Converts a color from HSV color space into RGB color space and returns a {{Struct|Color}}.\n\n{{Bug|Issue=2407|The returned color will not have the color metatable.}}","examples":[{"code":"local function DrawRainbowText( frequency, str, font, x, y )\n\t\n\tsurface.SetFont( font )\n\t\n\tfor i = 1, #str do\n\t\tsurface.SetTextColor( HSVToColor( i * frequency % 360, 1, 1 ) )\n\t\tlocal w = surface.GetTextSize( string.sub( str, 1, i - 1 ) )\n\t\tsurface.SetTextPos( x + w, y )\n\t\tsurface.DrawText( string.sub( str, i, i ) )\n\tend\n\t\nend","description":"A helper function for drawing rainbow text."},{"code":"local function ChatPrintRainbow( frequency, str )\n\t\n\tlocal text = {}\n\t\n\tfor i = 1, #str do\n\t\ttable.insert( text, HSVToColor( i * frequency % 360, 1, 1 ) )\n\t\ttable.insert( text, string.sub( str, i, i ) )\n\tend\n\n\tchat.AddText( unpack( text ) )\n\t\nend","description":"A helper function for printing rainbow text in the chat."},{"code":"local function ConsolePrintRainbow( frequency, str )\n\t\n\tlocal text = {}\n\t\n\tfor i = 1, #str do\n\t\ttable.insert( text, HSVToColor( i * frequency % 360, 1, 1 ) )\n\t\ttable.insert( text, string.sub( str, i, i ) )\n\tend\n\t\n\ttable.insert( text, \"\\n\" )\n\t\n\tMsgC( unpack( text ) )\n\t\nend","description":"A helper function for printing rainbow text in the console."}],"isConstructor":false,"name":"HSVToColor","realm":"shared and menu","returns":[{"description":"The {{Struct|Color}} created from the HSV color space.","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The request parameters. See {{Struct|HTTPRequest}}.","isOptional":false,"isVarArg":false,"name":"parameters","type":"HTTPRequest"}],"description":"Launches an asynchronous http request with the given parameters.\n\n{{Bug|Issue=2232|This cannot send or receive multiple headers at once.}}\n\n{{Bug|Issue=3190|This can crash on Linux.}}","examples":[],"isConstructor":false,"name":"HTTP","realm":"shared and menu","returns":[{"description":"true if we made a request, nil if we failed.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the script to be executed. The path must be either relative to the current file, or be an absolute path (relative to and excluding the lua/ folder).\n\n{{Note|Please make sure your file names are unique, the filesystem is shared across all addons, so a file named \"lua/config.lua\" in your addon may be overwritten by the same file in another addon.}}","isOptional":false,"isVarArg":false,"name":"fileName","type":"string"}],"description":"Executes a Lua script.\n\n{{Note|Addon files (.gma files) do not support relative parent folders (''..'' notation).}}\n\n{{Warning|The file you are attempting to include MUST NOT be empty or the include will fail. Files over a certain size may fail as well.}}\n\n{{Warning|If the file you are including is clientside or shared, it '''must''' be {{GlobalFunction|AddCSLuaFile}}'d or this function will error saying the file doesn't exist.}}\n\n{{Bug|Issue=1976|{{GlobalFunction|pcall}}ing this function will break autorefresh.}}","examples":[{"code":"-- Correct usage:\n-- Will look for \"lua/myLuaFolder/myLuaFile.lua\" in all addons and then the base game lua/ folder\ninclude( \"myLuaFolder/myLuaFile.lua\" )\n\n-- This is incorrect, and will NOT work\ninclude(               \"lua/myLuaFolder/myLuaFile.lua\" )\ninclude(         \"addons/lua/myLuaFolder/myLuaFile.lua\" )\ninclude( \"addons/MyAddon/lua/myLuaFolder/myLuaFile.lua\" )\ninclude(       \"MyAddon/lua/myLuaFolder/myLuaFile.lua\" )","description":"Demonstrates correct and incorrect usage."}],"isConstructor":false,"name":"include","realm":"shared and menu","returns":[{"description":"Anything that the executed Lua script returns.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The filename of the Lua file you want to include.","isOptional":false,"isVarArg":false,"name":"filename","type":"string"}],"description":"{{Deprecated|To send the target file to the client simply call AddCSLuaFile() in the target file itself.}}\n\nThis function works exactly the same as {{GlobalFunction|include}} both clientside and serverside.\n\nThe only difference is that on the serverside it also calls {{GlobalFunction|AddCSLuaFile}} on the filename, so that it gets sent to the client.","examples":[],"isConstructor":false,"name":"IncludeCS","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to iterate over.","isOptional":false,"isVarArg":false,"name":"tab","type":"table"}],"description":"Returns an iterator function for a for loop, to return ordered key-value pairs from a table.\n\nThis will only iterate though '''numerical''' keys, and these must also be '''sequential'''; starting at 1 with no gaps.\n\nFor unordered pairs, see {{GlobalFunction|pairs}}.<br/>\nFor pairs sorted by key in alphabetical order, see {{GlobalFunction|SortedPairs}}.","examples":[{"code":"local tbl = { two = 2, one = 1, \"alpha\", \"bravo\", [3] = \"charlie\", [5] = \"echo\", [6] = \"foxtrot\" }\n\nprint( \"pairs:\" )\nfor k, v in pairs( tbl ) do\n\tprint( k, v )\nend\nprint( \"\\nipairs:\" )\nfor k, v in ipairs( tbl ) do\n\tprint( k, v )\nend","description":"Demonstrates how this differs from {{GlobalFunction|pairs}}."},{"code":"local NUM = 32\nlocal Count = 0\nfor k, v in ipairs( ClientUndos ) do\n\tlocal Item = ComboBox:AddItem( tostring( v.Name ) )\n\tItem.DoClick = function() RunConsoleCommand( \"gmod_undonum\", tostring( v.Key ) ) end\n\n\tCount = Count + 1\n\tif ( Count > NUM ) then break end\nend","description":"From ''UpdateUI'' in [https://github.com/garrynewman/garrysmod/blob/master/garrysmod/lua/includes/modules/undo.lua#L43 undo.lua], this adds the first 32 undo entries to the ''Undo'' panel in the spawnmenu."}],"isConstructor":false,"name":"ipairs","realm":"shared and menu","returns":[{"description":"The iterator function.","type":"Function"},{"description":"The table being iterated over","type":"table"},{"description":"The origin index '''=0'''","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is an {{Type|Angle}}.","examples":[],"isConstructor":false,"name":"isangle","realm":"shared and menu","returns":[{"description":"True if the variable is an {{Type|Angle}}.","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is a {{Type|boolean}}.","examples":[],"isConstructor":false,"name":"isbool","realm":"shared and menu","returns":[{"description":"True if the variable is a {{Type|boolean}}.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The object to be tested","isOptional":false,"isVarArg":false,"name":"Object","type":"any"}],"description":"Returns whether the given object does or doesn't have a ''metatable'' of a color.\n\n'''Important:''' Engine functions (i.e. those not written in plain Lua) that return color objects do not currently set the color metatable and this function will return false if you use it on them.","examples":[],"isConstructor":false,"name":"IsColor","realm":"shared and menu","returns":[{"description":"Whether the given object is a color or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Class name of the entity to check","isOptional":false,"isVarArg":false,"name":"className","type":"string"}],"description":"Returns if the given NPC class name is an enemy.\n\nReturns true if the entity name is one of the following:\n* \"npc_combine_s\"\n* \"npc_cscanner\"\n* \"npc_manhack\"\n* \"npc_hunter\"\n* \"npc_antlion\"\n* \"npc_antlionguard\"\n* \"npc_antlion_worker\"\n* \"npc_fastzombie_torso\"\n* \"npc_fastzombie\"\n* \"npc_headcrab\"\n* \"npc_headcrab_fast\"\n* \"npc_poisonzombie\"\n* \"npc_headcrab_poison\"\n* \"npc_zombie\"\n* \"npc_zombie_torso\"\n* \"npc_zombine\"\n* \"npc_gman\"\n* \"npc_breen\"","examples":[],"isConstructor":false,"name":"IsEnemyEntityName","realm":"shared and menu","returns":[{"description":"Is an enemy","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to check.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is an {{Type|Entity}}. Alias of {{GlobalFunction|isentity}}.","examples":[],"isConstructor":false,"name":"IsEntity","realm":"shared","returns":[{"description":"True if the variable is an {{Type|Entity}}.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is an {{Type|Entity}}.","examples":[],"isConstructor":false,"name":"isentity","realm":"shared and menu","returns":[{"description":"True if the variable is an {{Type|Entity}}.","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns if this is the first time this hook was predicted.\n\nThis is useful for one-time logic in your SWEPs PrimaryAttack, SecondaryAttack and Reload and other [[:Category:Predicted_Hooks|predicted hooks]] (to prevent those hooks from being called rapidly in succession). It's also useful in a Move hook for when the client predicts movement.\n\nVisit [[Prediction]] for more information about this behavior.\n\n{{Note|This is already used internally for {{ClassFunction|Entity|EmitSound}}, {{ClassFunction|Weapon|SendWeaponAnim}} and {{ClassFunction|Entity|FireBullets}}, but NOT in  {{LibraryFunction|util|Effect}}.}}","examples":[{"code":"-- Note that for some reason KeyPress and KeyRelease are called multiple times\n-- for the same key event in multiplayer.\nfunction GM:KeyPress(ply, key)\n   if not IsFirstTimePredicted() then return end\n   if not IsValid(ply) or ply != LocalPlayer() then return end\n\n   if key == IN_SPEED and ply:IsActiveTraitor() then\n      timer.Simple(0.05, function() RunConsoleCommand(\"+voicerecord\") end)\n   end\nend","description":"An override for {{HookFunction|GM|KeyPress}} in the gamemode Trouble in Terrorist Town, to work around the hook being called multiple times."}],"isConstructor":false,"name":"IsFirstTimePredicted","realm":"shared","returns":[{"description":"Whether or not this is the first time being predicted.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Class name of the entity to check","isOptional":false,"isVarArg":false,"name":"className","type":"string"}],"description":"Returns if the given NPC class name is a friend.\n\nReturns true if the entity name is one of the following:\n* \"npc_monk\"\n* \"npc_alyx\"\n* \"npc_barney\"\n* \"npc_citizen\"\n* \"npc_kleiner\"\n* \"npc_magnusson\"\n* \"npc_eli\"\n* \"npc_mossman\"\n* \"npc_vortigaunt\"","examples":[],"isConstructor":false,"name":"IsFriendEntityName","realm":"shared and menu","returns":[{"description":"Is a friend","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is a {{Type|function}}.","examples":[],"isConstructor":false,"name":"isfunction","realm":"shared and menu","returns":[{"description":"True if the variable is a {{Type|function}}.","type":"Function"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the client is currently playing either a singleplayer or multiplayer game.","examples":[],"isConstructor":false,"name":"IsInGame","realm":"menu","returns":[{"description":"True if we are in a game.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns whether the passed object is a {{Type|VMatrix}}.","examples":[],"isConstructor":false,"name":"ismatrix","realm":"shared and menu","returns":[{"description":"True if the variable is a {{Type|VMatrix}}.","type":"VMatrix"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The game string/app ID to check.","isOptional":false,"isVarArg":false,"name":"game","type":"string"}],"description":"Checks whether or not a game is currently mounted. Uses data given by {{LibraryFunction|engine|GetGames}}. Currently does not work correctly serverside on dedicated servers.","examples":[{"code":"IsMounted('cstrike')","description":"Check if Counter-Strike: Source is mounted."}],"isConstructor":false,"name":"IsMounted","realm":"shared and menu","returns":[{"description":"True if the game is mounted.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is a {{Type|number}}.","examples":[],"isConstructor":false,"name":"isnumber","realm":"shared and menu","returns":[{"description":"True if the variable is a {{Type|number}}.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is a {{Type|Panel}}.","examples":[],"isConstructor":false,"name":"ispanel","realm":"shared and menu","returns":[{"description":"True if the variable is a {{Type|Panel}}.","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is a {{Type|string}}.","examples":[],"isConstructor":false,"name":"isstring","realm":"shared and menu","returns":[{"description":"True if the variable is a {{Type|string}}.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is a {{Type|table}}.","examples":[],"isConstructor":false,"name":"istable","realm":"shared and menu","returns":[{"description":"True if the variable is a {{Type|table}}.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table containing entities to check","isOptional":false,"isVarArg":false,"name":"table","type":"table"}],"description":"Returns whether or not every element within a table is a valid entity","examples":[],"isConstructor":false,"name":"IsTableOfEntitiesValid","realm":"shared and menu","returns":[{"description":"All entities valid","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The model name to be checked","isOptional":false,"isVarArg":false,"name":"modelName","type":"string"}],"description":"Returns whether or not a model is useless by checking that the file path is that of a proper model.\n\nIf the string \".mdl\" is not found in the model name, the function will return true.\n\nThe function will also return true if any of the following strings are found in the given model name:\n* \"_gesture\"\n* \"_anim\"\n* \"_gst\"\n* \"_pst\"\n* \"_shd\"\n* \"_ss\"\n* \"_posture\"\n* \"_anm\"\n* \"ghostanim\"\n* \"_paths\"\n* \"_shared\"\n* \"anim_\"\n* \"gestures_\"\n* \"shared_ragdoll_\"","examples":[],"isConstructor":false,"name":"IsUselessModel","realm":"shared and menu","returns":[{"description":"Whether or not the model is useless","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table or object to be validated.","isOptional":false,"isVarArg":false,"name":"toBeValidated","type":"any"}],"description":"Returns whether an object is valid or not. (Such as {{Type|Entity}}s, {{Type|Panel}}s, custom {{Type|table}} objects and more)<br />Checks that an object is not nil, has an IsValid method and if this method returns true.\n\n{{Note|Due to vehicles being technically valid the moment they're spawned, also use {{ClassFunction|Vehicle|IsValidVehicle}} to make sure they're fully initialized}}","examples":[],"isConstructor":false,"name":"IsValid","realm":"shared and menu","returns":[{"description":"True if the object is valid.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is a {{Type|Vector}}.","examples":[],"isConstructor":false,"name":"isvector","realm":"shared and menu","returns":[{"description":"True if the variable is a {{Type|Vector}}.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The IP of the server to join","isOptional":false,"isVarArg":false,"name":"IP","type":"string"}],"description":"Joins the server with the specified IP.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"JoinServer","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to add javascript function 'language.Update' to.","isOptional":false,"isVarArg":false,"name":"htmlPanel","type":"Panel"}],"description":"Adds javascript function 'language.Update' to an HTML panel as a method to call Lua's {{LibraryFunction|language|GetPhrase}} function.","examples":[],"isConstructor":false,"name":"JS_Language","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to add javascript function 'util.MotionSensorAvailable' to.","isOptional":false,"isVarArg":false,"name":"htmlPanel","type":"Panel"}],"description":"Adds javascript function 'util.MotionSensorAvailable' to an HTML panel as a method to call Lua's {{LibraryFunction|motionsensor|IsAvailable}} function.","examples":[],"isConstructor":false,"name":"JS_Utility","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to add javascript functions to.","isOptional":false,"isVarArg":false,"name":"htmlPanel","type":"Panel"}],"description":"Adds workshop related javascript functions to an HTML panel, used by the \"Dupes\" and \"Saves\" tabs in the spawnmenu.","examples":[],"isConstructor":false,"name":"JS_Workshop","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new language code.","isOptional":false,"isVarArg":false,"name":"lang","type":"string"}],"description":"Callback function for when the client's language changes. Called by the engine.","examples":[{"code":"local OldLanguageChanged = LanguageChanged\nfunction LanguageChanged( lang )\n\tprint( \"New language: \" .. lang )\n\tOldLanguageChanged( lang )\nend","description":"Prints the new language code whenever the language changes."}],"isConstructor":false,"name":"LanguageChanged","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The fraction for finding the result. This number is clamped between 0 and 1.","isOptional":false,"isVarArg":false,"name":"t","type":"number"},{"default":"","description":"The starting number. The result will be equal to this if delta is 0.","isOptional":false,"isVarArg":false,"name":"from","type":"number"},{"default":"","description":"The ending number. The result will be equal to this if delta is 1.","isOptional":false,"isVarArg":false,"name":"to","type":"number"}],"description":"Performs a linear interpolation from the start number to the end number.\n\nThis function provides a very efficient and easy way to smooth out movements.","examples":[],"isConstructor":false,"name":"Lerp","realm":"shared and menu","returns":[{"description":"The result of the linear interpolation, (1 - t) * from + t * to.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Ratio of progress through values","isOptional":false,"isVarArg":false,"name":"ratio","type":"number"},{"default":"","description":"Angle to begin from","isOptional":false,"isVarArg":false,"name":"angleStart","type":"Angle"},{"default":"","description":"Angle to end at","isOptional":false,"isVarArg":false,"name":"angleEnd","type":"Angle"}],"description":"Returns point between first and second angle using given fraction and linear interpolation","examples":[{"code":"local startAngle = Angle(0, 0, 0)\nlocal endAngle = Angle(0, 180, 0)\nlocal ratio = 0\n\ntimer.Create(\"Turn\", 0.1, 10, function()\n    ratio = ratio + 0.1\n    entity:SetAngles(Lerp(ratio, startAngle, endAngle))\nend)","description":"Turns an entity 180 degrees uses lerp over ten seconds"}],"isConstructor":false,"name":"LerpAngle","realm":"shared and menu","returns":[{"description":"angle","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Fraction ranging from 0 to 1","isOptional":false,"isVarArg":false,"name":"fraction","type":"number"},{"default":"","description":"The initial Vector","isOptional":false,"isVarArg":false,"name":"from","type":"Vector"},{"default":"","description":"The desired Vector","isOptional":false,"isVarArg":false,"name":"to","type":"Vector"}],"description":"Linear interpolation between two vectors. It is commonly used to smooth movement between two vectors.","examples":[{"code":"local output = LerpVector( 0.5, Vector( 0, 0, 100 ), Vector( 0, 0, 200 ) )","description":"Get the middle point (50%) between two vectors."}],"isConstructor":false,"name":"LerpVector","realm":"shared and menu","returns":[{"description":"The lerped vector.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}This function is used to get the last map and category to which the map belongs from the cookie saved with {{GlobalFunction|SaveLastMap}}.","examples":[],"isConstructor":false,"name":"LoadLastMap","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Loads all preset settings for the {{Lib|presets}} and returns them in a table","examples":[{"code":"PrintTable(LoadPresets())","description":"Prints all of the presets in to the console"}],"isConstructor":false,"name":"LoadPresets","realm":"client","returns":[{"description":"Preset data","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The token to find a translation for.","isOptional":false,"isVarArg":false,"name":"localisationToken","type":"string"},{"default":"","description":"The default value to be returned if no translation was found.","isOptional":false,"isVarArg":false,"name":"defaultVal","type":"string"}],"description":"Returns a localisation for the given token, if none is found it will return the default(second) parameter.","examples":[],"isConstructor":false,"name":"Localize","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the player object of the current client.\n\nLocalPlayer() will return NULL until all entities have been initialized. See {{HookFunction|GM|InitPostEntity}}.","examples":[{"code":"print( LocalPlayer() )","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"LocalPlayer","realm":"client","returns":[{"description":"The player object representing the client.","type":"Player"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The position vector in the source coordinate system, that should be translated to world coordinates","isOptional":false,"isVarArg":false,"name":"localPos","type":"Vector"},{"default":"","description":"The angle in the source coordinate system, that should be converted to a world angle. If you don't need to convert an angle, you can supply an arbitrary valid angle (e.g. <kbd>{{GlobalFunction|Angle}}()</kbd>).","isOptional":false,"isVarArg":false,"name":"localAng","type":"Angle"},{"default":"","description":"The origin point of the source coordinate system, in world coordinates","isOptional":false,"isVarArg":false,"name":"originPos","type":"Vector"},{"default":"","description":"The angles of the source coordinate system, as a world angle","isOptional":false,"isVarArg":false,"name":"originAngle","type":"Angle"}],"description":"Translates the specified position and angle from the specified local coordinate system into worldspace coordinates.\n\nIf you're working with an entity's local vectors, use {{ClassFunction|Entity|LocalToWorld}} and/or {{ClassFunction|Entity|LocalToWorldAngles}} instead.\n\nSee also: {{GlobalFunction|WorldToLocal}}, the reverse of this function.","examples":[],"isConstructor":false,"name":"LocalToWorld","realm":"shared","returns":[{"description":"The world position of the supplied local position.","type":"Vector"},{"description":"The world angles of the supplied local angle.","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The model to precache","isOptional":false,"isVarArg":false,"name":"model","type":"string"}],"description":"Runs {{LibraryFunction|util|PrecacheModel}} and returns the string","examples":[{"code":"local CAMERA_MODEL = Model( \"models/dav0r/camera.mdl\" )\nfunction ENT:Initialize()\n self:SetModel( CAMERA_MODEL )\n ...","description":"From entities/gmod_cameraprop.lua"}],"isConstructor":false,"name":"Model","realm":"shared and menu","returns":[{"description":"The same string entered as an argument","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the module. This will be used to access the module table in the runtime environment.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Calls each function passed with the new table as an argument.","isOptional":false,"isVarArg":true,"name":"loaders","type":"any"}],"description":"Creates a table with the specified module name and sets the function environment for said table.\n\nAny passed loaders are called with the table as an argument. An example of this is {{LibraryFunction|package|seeall}}.","examples":[],"isConstructor":false,"name":"module","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"List of values to print.","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Writes every given argument to the console.\n\nAutomatically attempts to convert each argument to a string. (See {{GlobalFunction|tostring}})\n\nUnlike {{GlobalFunction|print}}, arguments are not separated by anything. They are simply concatenated.\n\nAdditionally, a newline isn't added automatically to the end, so subsequent Msg or print operations will continue the same line of text in the console. See {{GlobalFunction|MsgN}} for a version that does add a newline.\n\nThe text is blue on the server, orange on the client, and green on the menu: [[File:msg server client colors.png]]","examples":[{"code":"Msg(\"Hello\", \" World!\")","description":"Prints \"Hello World!\" to the console."}],"isConstructor":false,"name":"Msg","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"List of values to print.","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Works exactly like {{GlobalFunction|Msg}} except that, if called on the server, will print to all players consoles plus the server console.","examples":[],"isConstructor":false,"name":"MsgAll","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Values to print. If you put in a color, all text after that color will be printed in that color.","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Just like {{GlobalFunction|Msg}}, except it can also print colored text, just like {{LibraryFunction|chat|AddText}}.","examples":[{"code":"MsgC( Color( 255, 0, 0 ), \"Hello World!\" )","description":"Prints \"Hello World!\" in red to the console."},{"code":"MsgC( Color( 137, 222, 255 ), \"Default server color\" )\nMsgC( Color( 255, 222, 102 ), \"Default client color\" )","description":"Shows the built in colors for server and client"}],"isConstructor":false,"name":"MsgC","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"List of values to print. They can be of any type and will be converted to strings with {{GlobalFunction|tostring}}.","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Same as {{GlobalFunction|print}}, except it concatinates the arguments without inserting any whitespace in between them.\n\nSee also {{GlobalFunction|Msg}}, which doesn't add a newline (''\"\\n\"'') at the end.","examples":[{"code":"MsgN(\"Hello,\")\nMsgN(\"World!\")","description":"Prints \"Hello, World!\" in two lines to the console."}],"isConstructor":false,"name":"MsgN","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of color","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Returns named color defined in resource/ClientScheme.res.","examples":[],"isConstructor":false,"name":"NamedColor","realm":"client","returns":[{"description":"A {{Struct|Color}} or nil","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"false","description":"If true, the userdata will get its own metatable automatically.","isOptional":true,"isVarArg":false,"name":"addMetatable","type":"boolean"}],"description":"Returns a new userdata object.","examples":[],"isConstructor":false,"name":"newproxy","realm":"shared and menu","returns":[{"description":"The newly created userdata.","type":"userdata"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table","isOptional":false,"isVarArg":false,"name":"tab","type":"table"},{"default":"nil","description":"The previous key in the table.","isOptional":true,"isVarArg":false,"name":"prevKey","type":"any"}],"description":"Returns the next key and value pair in a table.\n\n{{Note|Table keys in Lua have no specific order, and will be returned in whatever order they exist in memory. This may not always be in ascending order or alphabetical order. If you need to iterate over an array in order, use {{GlobalFunction|ipairs}}.}}","examples":[{"code":"local function IsEmptyTable( t )\n\treturn next( t ) == nil\nend\n\nlocal mytable = {}\nprint( \"mytable is empty:\", IsEmptyTable( mytable ) )\nmytable[\"hello\"]=true\nprint( \"mytable is empty:\", IsEmptyTable( mytable ) )","description":"Returns whether the table is empty or not"}],"isConstructor":false,"name":"next","realm":"shared and menu","returns":[{"description":"The next key for the table. If the previous key was nil, this will be the first key in the table. If the previous key was the last key in the table, this will be nil.","type":"any"},{"description":"The value associated with that key. If the previous key was the last key in the table, this will be nil.","type":"any"}]},{"accessModifier":"public","arguments":[],"description":"Returns the number of files needed from the server you are currently joining.","examples":[],"isConstructor":false,"name":"NumDownloadables","realm":"menu","returns":[{"description":"The number of downloadables","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Model to return amount of skins of","isOptional":false,"isVarArg":false,"name":"modelName","type":"string"}],"description":"Returns the amount of skins the specified model has","examples":[],"isConstructor":false,"name":"NumModelSkins","realm":"client","returns":[{"description":"Amount of skins","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the model.","isOptional":false,"isVarArg":false,"name":"modelName","type":"string"},{"default":"","description":"Number of pose parameters the model has.","isOptional":false,"isVarArg":false,"name":"numPostParams","type":"number"},{"default":"","description":"Number of sequences the model has.","isOptional":false,"isVarArg":false,"name":"numSeq","type":"number"},{"default":"","description":"Number of attachments the model has.","isOptional":false,"isVarArg":false,"name":"numAttachments","type":"number"},{"default":"","description":"Number of bone controllers the model has.","isOptional":false,"isVarArg":false,"name":"numBoneControllers","type":"number"},{"default":"","description":"Number of skins that the model has.","isOptional":false,"isVarArg":false,"name":"numSkins","type":"number"},{"default":"","description":"Size of the model.","isOptional":false,"isVarArg":false,"name":"size","type":"number"}],"description":"{{Internal}} Called by the engine when a model has been loaded. Caches model information with the {{Lib|sql}}.","examples":[],"isConstructor":false,"name":"OnModelLoaded","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The subdirectory to open in the garrysmod folder.","isOptional":false,"isVarArg":false,"name":"folder","type":"string"}],"description":"Opens a folder with the given name in the garrysmod folder using the operating system's file browser.\n\n{{Bug|Issue=1532|Currently broken on macOS and Linux.}}","examples":[{"code":"OpenFolder( \"saves\" )","description":"Opens the \"saves\" folder."}],"isConstructor":false,"name":"OpenFolder","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Bounding box min resultant","isOptional":false,"isVarArg":false,"name":"vector1","type":"Vector"},{"default":"","description":"Bounding box max resultant","isOptional":false,"isVarArg":false,"name":"vector2","type":"Vector"}],"description":"Modifies the given vectors so that all of vector2's axis are larger than vector1's by switching them around. Also known as ordering vectors.\n\n{{Note|This function will irreversibly modify the given vectors}}","examples":[],"isConstructor":false,"name":"OrderVectors","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to iterate over","isOptional":false,"isVarArg":false,"name":"tab","type":"table"}],"description":"Returns an iterator function({{GlobalFunction|next}}) for a for loop that will return the values of the specified table in an arbitrary order.\n\nFor alphabetical '''key''' order use {{GlobalFunction|SortedPairs}}.<br/>\nFor alphabetical '''value''' order use {{GlobalFunction|SortedPairsByValue}}.","examples":[{"code":"for k, v in pairs( player.GetAll() ) do\n\tprint( v:Nick() )\nend","description":"Iterates through all players on the server and prints their names."}],"isConstructor":false,"name":"pairs","realm":"shared and menu","returns":[{"description":"The iterator ({{GlobalFunction|next}})","type":"Function"},{"description":"The table being iterated over","type":"table"},{"description":"'''nil''' (for the constructor)","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The particle file.","isOptional":false,"isVarArg":false,"name":"file","type":"string"}],"description":"Calls {{LibraryFunction|game|AddParticles}} and returns given string.","examples":[],"isConstructor":false,"name":"Particle","realm":"shared and menu","returns":[{"description":"The particle file.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the particle effect.","isOptional":false,"isVarArg":false,"name":"particleName","type":"string"},{"default":"","description":"The start position of the effect.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"The orientation of the effect.","isOptional":false,"isVarArg":false,"name":"angles","type":"Angle"},{"default":"NULL","description":"If set, the particle will be parented to the entity.","isOptional":true,"isVarArg":false,"name":"parent","type":"Entity"}],"description":"Creates a particle effect.\n\n{{Note|The particle effect must be precached with {{GlobalFunction|PrecacheParticleSystem}} and the file its from must be added via {{LibraryFunction|game|AddParticles}} before it can be used!}}","examples":[{"code":"game.AddParticles( \"particles/explosion.pcf\" )\nPrecacheParticleSystem( \"ExplosionCore_wall\" )\n\nif ( SERVER ) then\n\t-- A test console command to see if the particle works, spawns the particle where the player is looking at. \n\tconcommand.Add( \"particleitup\", function( ply, cmd, args )\n\t\tParticleEffect( \"ExplosionCore_wall\", ply:GetEyeTrace().HitPos, Angle( 0, 0, 0 ) )\n\tend )\nend","description":"Example usage of the function. Precaches '''ExplosionCore_wall''' particle from '''particles/explosion.pcf''', a Team Fortress 2 particle file.\n\nYou can then test the particle by using the '''particleitup''' console command.\n\nYou can find a list of particles inside a .pcf file using the [https://developer.valvesoftware.com/wiki/Particle_Editor Particle Editor Tool]"}],"isConstructor":false,"name":"ParticleEffect","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the particle effect.","isOptional":false,"isVarArg":false,"name":"particleName","type":"string"},{"default":"","description":"Attachment type using {{Enum|PATTACH}}.","isOptional":false,"isVarArg":false,"name":"attachType","type":"PATTACH"},{"default":"","description":"The entity to be used in the way specified by the attachType.","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"},{"default":"","description":"The id of the attachment to be used in the way specified by the attachType.","isOptional":false,"isVarArg":false,"name":"attachmentID","type":"number"}],"description":"Creates a particle effect with specialized parameters.\n\n{{Note|The particle effect must be precached with {{GlobalFunction|PrecacheParticleSystem}} and the file its from must be added via {{LibraryFunction|game|AddParticles}} before it can be used!}}","examples":[],"isConstructor":false,"name":"ParticleEffectAttach","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The start position of the emitter.\n\nThis is only used to determine particle drawing order for translucent particles.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"Whenever to render the particles in 2D or 3D mode.","isOptional":false,"isVarArg":false,"name":"use3D","type":"boolean"}],"description":"Creates a new {{Type|CLuaEmitter}}.\n\n{{Note|Do not forget to delete the emitter with {{ClassFunction|CLuaEmitter|Finish}} once you are done with it}}","examples":[{"code":"local tr =  LocalPlayer():GetEyeTrace()\nlocal pos = tr.HitPos + tr.HitNormal * 100 -- The origin position of the effect\n\nlocal emitter = ParticleEmitter( pos ) -- Particle emitter in this position\n\nfor i = 0, 100 do -- Do 100 particles\n\tlocal part = emitter:Add( \"effects/spark\", pos ) -- Create a new particle at pos\n\tif ( part ) then\n\t\tpart:SetDieTime( 1 ) -- How long the particle should \"live\"\n\n\t\tpart:SetStartAlpha( 255 ) -- Starting alpha of the particle\n\t\tpart:SetEndAlpha( 0 ) -- Particle size at the end if its lifetime\n\n\t\tpart:SetStartSize( 5 ) -- Starting size\n\t\tpart:SetEndSize( 0 ) -- Size when removed\n\n\t\tpart:SetGravity( Vector( 0, 0, -250 ) ) -- Gravity of the particle\n\t\tpart:SetVelocity( VectorRand() * 50 ) -- Initial velocity of the particle\n\tend\nend\n\nemitter:Finish()","description":"Creates a simple spark particle effect 100 units above where the local player is looking at."}],"isConstructor":false,"name":"ParticleEmitter","realm":"client","returns":[{"description":"The new particle emitter.","type":"CLuaEmitter"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the path to create.\nThis is going to be \"Follow\" or \"Chase\" right now.","isOptional":false,"isVarArg":false,"name":"type","type":"string"}],"description":"Creates a path for the bot to follow","examples":[],"isConstructor":false,"name":"Path","realm":"server","returns":[{"description":"The path","type":"PathFollower"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Function to be executed and of which the errors should be caught of","isOptional":false,"isVarArg":false,"name":"func","type":"Function"},{"default":"","description":"Arguments to call the function with.","isOptional":false,"isVarArg":true,"name":"arguments","type":"any"}],"description":"Calls a function and catches an error that can be thrown while the execution of the call.\n\n{{Bug|Issue=1976|Using this function with {{GlobalFunction|include}} will break autorefresh.}}\n\n{{Bug|Issue=2498|This does not stop {{GlobalFunction|Error}} and {{GlobalFunction|ErrorNoHalt}} from sending error messages to the server (if called clientside) or calling the {{HookFunction|GM|OnLuaError}} hook. The success boolean returned will always return true and thus you will not get the error message returned. {{GlobalFunction|error}} does not exhibit these behaviours.}}\n\n{{Bug|Issue=3112|This does not stop errors incurred by {{GlobalFunction|include}}.}}","examples":[{"code":"local succ, err = pcall(function() aisj() end)\nprint(succ, err)","description":"Catch an error."}],"isConstructor":false,"name":"pcall","realm":"shared and menu","returns":[{"description":"If the function had no errors occur within it.","type":"boolean"},{"description":"If an error occurred, this will be a string containing the error message. Otherwise, this will be the return values of the function passed in.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Model that is being rendered to the spawn icon","isOptional":false,"isVarArg":false,"name":"model","type":"Entity"},{"default":"","description":"Position that the model is being rendered at","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Moves the given model to the given position and returns view information based on its properties","examples":[],"isConstructor":false,"name":"PositionSpawnIcon","realm":"client","returns":[{"description":"Table of information of the view which can be used for rendering","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the particle system.","isOptional":false,"isVarArg":false,"name":"particleSystemName","type":"string"}],"description":"Precaches the particle with the specified name.","examples":[{"code":"game.AddParticles( \"particles/explosion.pcf\" )\nPrecacheParticleSystem( \"ExplosionCore_wall\" )\n\nif ( SERVER ) then\n\t-- A test console command to see if the particle works, spawns the particle where the player is looking at. \n\tconcommand.Add( \"particleitup\", function( ply, cmd, args )\n\t\tParticleEffect( \"ExplosionCore_wall\", ply:GetEyeTrace().HitPos, Angle( 0, 0, 0 ) )\n\tend )\nend","description":"Example usage of the function. Precaches \"ExplosionCore_wall\" particle from \"particles/explosion.pcf\", a Team Fortress 2 particle file.\n\nYou can find a list of particles inside a .pcf file using the [https://developer.valvesoftware.com/wiki/Particle_Editor Particle Editor Tool]"}],"isConstructor":false,"name":"PrecacheParticleSystem","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Path to the scene file to precache.","isOptional":false,"isVarArg":false,"name":"scene","type":"string"}],"description":"Precaches a scene file.","examples":[],"isConstructor":false,"name":"PrecacheScene","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path to the custom sentences.txt.","isOptional":false,"isVarArg":false,"name":"filename","type":"string"}],"description":"Load and precache a custom sentence file.","examples":[{"code":"PrecacheSentenceFile( \"data/customsentences.txt\" )","description":"Precache a file named \"customsentences.txt\" in the data directory."}],"isConstructor":false,"name":"PrecacheSentenceFile","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The group to precache.","isOptional":false,"isVarArg":false,"name":"group","type":"string"}],"description":"Precache a sentence group in a sentences.txt definition file.","examples":[{"code":"PrecacheSentenceGroup( \"METROPOLICE\" )","description":"Precache all metropolice sentences."}],"isConstructor":false,"name":"PrecacheSentenceGroup","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"List of values to print.","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Writes every given argument to the console.<br />\nAutomatically attempts to convert each argument to a string. (See {{GlobalFunction|tostring}})<br />\nSeparates arguments with a tab character (''\"\\t\"'').","examples":[{"code":"print(\"Hello World!\", \"Yay!\")","description":"Prints \"Hello World! Yay!\" to the console."}],"isConstructor":false,"name":"print","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Which type of message should be sent to the players (see {{Enum|HUD}})","isOptional":false,"isVarArg":false,"name":"type","type":"HUD"},{"default":"","description":"Message to be sent to the players","isOptional":false,"isVarArg":false,"name":"message","type":"string"}],"description":"Displays a message in the chat, console, or center of screen of every player.\n\nThis uses the archaic user message system ({{Lib|umsg}}) and hence is limited to &asymp;250 characters.","examples":[{"code":"PrintMessage(HUD_PRINTTALK, \"I'm new here.\")","description":"Prints into the every player's chat: \"I'm new here.\""}],"isConstructor":false,"name":"PrintMessage","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to be printed","isOptional":false,"isVarArg":false,"name":"tableToPrint","type":"table"},{"default":"0","description":"Number of tabs to start indenting at. Increases by 2 when entering another table.","isOptional":true,"isVarArg":false,"name":"indent","type":"number"},{"default":"{}","description":"Internal argument, you shouldn't normally change this. Used to check if a nested table has already been printed so it doesn't get caught in a loop.","isOptional":true,"isVarArg":false,"name":"done","type":"table"}],"description":"Recursively prints the contents of a table to the console.","examples":[{"code":"local tbl = {\n \"test\",\n 3829.4,\n {\"foo\", \"baah\", 20/5},\n true\n}\nPrintTable(tbl)","description":"Prints the table we created."}],"isConstructor":false,"name":"PrintTable","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Function to run","isOptional":false,"isVarArg":false,"name":"func","type":"Function"}],"description":"Runs a function without stopping the whole script on error.\n\nThis function is similar to {{GlobalFunction|pcall}} and {{GlobalFunction|xpcall}} except the errors are still printed and sent to the error handler (i.e. sent to server console if clientside and {{HookFunction|GM|OnLuaError}} called).","examples":[],"isConstructor":false,"name":"ProtectedCall","realm":"shared","returns":[{"description":"Were there any errors or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to create iterator for","isOptional":false,"isVarArg":false,"name":"table","type":"table"},{"default":"","description":"Whether the iterator should iterate descending or not","isOptional":false,"isVarArg":false,"name":"descending","type":"boolean"}],"description":"Returns an iterator function that can be used to loop through a table in random order","examples":[{"code":"local tab = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}\n\nfor k, v in RandomPairs(tab) do\n    print(v)\nend","description":"Creates a table and prints its contents in random order"}],"isConstructor":false,"name":"RandomPairs","realm":"shared and menu","returns":[{"description":"Iterator function","type":"Function"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The first value to compare.","isOptional":false,"isVarArg":false,"name":"value1","type":"any"},{"default":"","description":"The second value to compare.","isOptional":false,"isVarArg":false,"name":"value2","type":"any"}],"description":"Compares the two values without calling their __eq operator.","examples":[],"isConstructor":false,"name":"rawequal","realm":"shared and menu","returns":[{"description":"Whether or not the two values are equal.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to get the value from.","isOptional":false,"isVarArg":false,"name":"table","type":"table"},{"default":"","description":"The index to get the value from.","isOptional":false,"isVarArg":false,"name":"index","type":"any"}],"description":"Gets the value with the specified key from the table without calling the __index method.","examples":[],"isConstructor":false,"name":"rawget","realm":"shared and menu","returns":[{"description":"The value.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to get the value from.","isOptional":false,"isVarArg":false,"name":"table","type":"table"},{"default":"","description":"The index to get the value from.","isOptional":false,"isVarArg":false,"name":"index","type":"any"},{"default":"","description":"The value to set for the specified key.","isOptional":false,"isVarArg":false,"name":"value","type":"any"}],"description":"Sets the value with the specified key from the table without calling the __newindex method.","examples":[],"isConstructor":false,"name":"rawset","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the real frame-time which is unaffected by host_timescale. To be used for GUI effects (for example)","examples":[],"isConstructor":false,"name":"RealFrameTime","realm":"client","returns":[{"description":"Real frame time","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the uptime of the game/server in seconds (to at least 4 decimal places)\n\n{{Note|This is '''not''' synchronised or affected by the game.}}\n\nYou should use this function (or SysTime) for timing real-world events such as user interaction, but not for timing game events such as animations.\n\nSee also: {{GlobalFunction|CurTime}}, {{GlobalFunction|SysTime}}","examples":[],"isConstructor":false,"name":"RealTime","realm":"shared","returns":[{"description":"Uptime of the server.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Creates a new {{Type|CRecipientFilter}}.","examples":[{"code":"local rf = RecipientFilter()\nrf:AddAllPlayers()\nprint( rf:GetCount() )\nPrintTable( rf:GetPlayers() )","description":"Example usage of the function"}],"isConstructor":false,"name":"RecipientFilter","realm":"server","returns":[{"description":"The new created recipient filter.","type":"CRecipientFilter"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\nAdds a frame to the currently recording demo.","examples":[],"isConstructor":false,"name":"RecordDemoFrame","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Menu to be registered for closure","isOptional":false,"isVarArg":false,"name":"menu","type":"Panel"}],"description":"Registers a Derma element to be closed the next time {{GlobalFunction|CloseDermaMenus}} is called","examples":[],"isConstructor":false,"name":"RegisterDermaMenuForClose","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Saves position of your cursor on screen. You can restore it by using {{GlobalFunction|RestoreCursorPosition}}.\n\nDespite this function being available on server, it will not do anything on server.","examples":[],"isConstructor":false,"name":"RememberCursorPosition","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Does the removing of the tooltip panel. Called by {{GlobalFunction|EndTooltip}}.","examples":[],"isConstructor":false,"name":"RemoveTooltip","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the angle that the clients view is being rendered at","examples":[],"isConstructor":false,"name":"RenderAngles","realm":"client","returns":[{"description":"Render Angles","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Origin to render the effect at","isOptional":false,"isVarArg":false,"name":"origin","type":"Vector"},{"default":"","description":"Angle to render the effect at","isOptional":false,"isVarArg":false,"name":"angle","type":"Angle"},{"default":"","description":"Point to focus the effect at","isOptional":false,"isVarArg":false,"name":"usableFocusPoint","type":"Vector"},{"default":"","description":"Angle size of the effect","isOptional":false,"isVarArg":false,"name":"angleSize","type":"number"},{"default":"","description":"Amount of radial steps to render the effect with","isOptional":false,"isVarArg":false,"name":"radialSteps","type":"number"},{"default":"","description":"Amount of render passes","isOptional":false,"isVarArg":false,"name":"passes","type":"number"},{"default":"","description":"Whether to cycle the frame or not","isOptional":false,"isVarArg":false,"name":"spin","type":"boolean"},{"default":"","description":"Table of view data","isOptional":false,"isVarArg":false,"name":"inView","type":"table"},{"default":"","description":"FOV to render the effect with","isOptional":false,"isVarArg":false,"name":"fov","type":"number"}],"description":"Renders a Depth of Field effect","examples":[],"isConstructor":false,"name":"RenderDoF","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Origin to render the effect at","isOptional":false,"isVarArg":false,"name":"viewOrigin","type":"Vector"},{"default":"","description":"Angles to render the effect at","isOptional":false,"isVarArg":false,"name":"viewAngles","type":"Angle"}],"description":"Renders the stereoscopic post-process effect","examples":[],"isConstructor":false,"name":"RenderStereoscopy","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Origin to render the effect at","isOptional":false,"isVarArg":false,"name":"viewOrigin","type":"Vector"},{"default":"","description":"Angles to render the effect at","isOptional":false,"isVarArg":false,"name":"viewAngles","type":"Angle"},{"default":"","description":"Field of View to render the effect at","isOptional":false,"isVarArg":false,"name":"viewFOV","type":"number"}],"description":"Renders the Super Depth of Field post-process effect","examples":[],"isConstructor":false,"name":"RenderSuperDoF","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the module to be loaded.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"First tries to load a binary module with the given name, if unsuccessful, it tries to load a Lua module with the given name.\n\n{{Bug|Issue=1041|Request=813|Running this function with {{GlobalFunction|pcall}} or {{GlobalFunction|xpcall}} will still print an error that counts towards sv_kickerrornum.}}","examples":[],"isConstructor":false,"name":"require","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Restores position of your cursor on screen. You can save it by using {{GlobalFunction|RememberCursorPosition}}.\n\nDespite this function being available on server, it will not do anything on server.","examples":[],"isConstructor":false,"name":"RestoreCursorPosition","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The command to be executed.","isOptional":false,"isVarArg":false,"name":"command","type":"string"},{"default":"","description":"The arguments. Note, that unlike {{ClassFunction|Player|ConCommand}}, you must pass each argument as a new string, not separating them with a space.","isOptional":false,"isVarArg":true,"name":"arguments","type":"any"}],"description":"Executes the given console command with the parameters.\n\n{{Note|Some commands/convars are blocked from being ran/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see [[Blocked ConCommands]].}}","examples":[{"code":"RunConsoleCommand(\"sv_gravity\", \"400\")","description":"Changes the gravity to 400 (default 600)."}],"isConstructor":false,"name":"RunConsoleCommand","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The menu command to run\n\nShould be one of the following:\n* Disconnect - Disconnects from the current server.\n* OpenBenchmarkDialog - Opens the \"Video Hardware Stress Test\" dialog.\n* OpenChangeGameDialog - Does not work in GMod.\n* OpenCreateMultiplayerGameDialog - Opens the Source dialog for creating a listen server.\n* OpenCustomMapsDialog - Does nothing.\n* OpenFriendsDialog - Does nothing.\n* OpenGameMenu - Does not work in GMod.\n* OpenLoadCommentaryDialog - Opens the \"Developer Commentary\" selection dialog. Useless in GMod.\n* OpenLoadDemoDialog - Does nothing.\n* OpenLoadGameDialog - Opens the Source \"Load Game\" dialog.\n* OpenNewGameDialog - Opens the \"New Game\" dialog. Useless in GMod.\n* OpenOptionsDialog - Opens the options dialog.\n* OpenPlayerListDialog - Opens the \"Mute Players\" dialog that shows all players connected to the server and allows to mute them.\n* OpenSaveGameDialog - Opens the Source \"Save Game\" dialog.\n* OpenServerBrowser - Opens the legacy server browser.\n* Quit - Quits the game ''without'' confirmation (unlike other Source games).\n* QuitNoConfirm - Quits the game without confirmation (like other Source games).\n* ResumeGame - Closes the menu and returns to the game.\n* engine <concommand> - Runs a console command. Equivalent to {{GlobalFunction|RunConsoleCommand}}( <concommand> ).","isOptional":false,"isVarArg":false,"name":"command","type":"string"}],"description":"Runs a menu command. Equivalent to {{GlobalFunction|RunConsoleCommand}}( \"gamemenucommand\", command ) unless the command starts with the \"engine\" keyword in which case it is equivalent to {{GlobalFunction|RunConsoleCommand}}( command ).","examples":[{"code":"RunGameUICommand( \"OpenOptionsDialog\" )","description":"Opens the options dialog."},{"code":"RunGameUICommand( \"engine gameui_hide\" )","description":"Hides the game UI (menu). Equivalent to {{GlobalFunction|RunConsoleCommand}}( \"gameui_hide\" )"}],"isConstructor":false,"name":"RunGameUICommand","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The code to execute.","isOptional":false,"isVarArg":false,"name":"code","type":"string"},{"default":"\"RunString\"","description":"The name that should appear in any error messages caused by this code.","isOptional":true,"isVarArg":false,"name":"identifier","type":"string"},{"default":"true","description":"If false, this function will return a string containing any error messages instead of throwing an error.","isOptional":true,"isVarArg":false,"name":"handleError","type":"boolean"}],"description":"Evaluates and executes the given code, will throw an error on failure.\n{{Note|Local variables are not passed to the given code.}}","examples":[],"isConstructor":false,"name":"RunString","realm":"shared and menu","returns":[{"description":"If handleError is false, the error message (if any).","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Alias of {{GlobalFunction|RunString}}.\n\n{{Deprecated|Use {{GlobalFunction|RunString}} instead.}}","examples":[],"isConstructor":false,"name":"RunStringEx","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity to safely remove.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Removes the given entity unless it is a player or the world entity","examples":[],"isConstructor":false,"name":"SafeRemoveEntity","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity to be removed","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"},{"default":"","description":"Delay for entity removal in seconds","isOptional":false,"isVarArg":false,"name":"delay","type":"number"}],"description":"Removes entity after delay using {{GlobalFunction|SafeRemoveEntity}}","examples":[],"isConstructor":false,"name":"SafeRemoveEntityDelayed","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the map.","isOptional":false,"isVarArg":false,"name":"map","type":"string"},{"default":"","description":"The name of the category to which this map belongs.","isOptional":false,"isVarArg":false,"name":"category","type":"string"}],"description":"{{Internal}}\nThis function is used to save the last map and category to which the map belongs as a [[:Category:cookie|cookie]].","examples":[],"isConstructor":false,"name":"SaveLastMap","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Presets to be saved","isOptional":false,"isVarArg":false,"name":"presets","type":"table"}],"description":"Overwrites all presets with the supplied table. Used by the {{Lib|presets}} for preset saving","examples":[],"isConstructor":false,"name":"SavePresets","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The number you want to scale.","isOptional":false,"isVarArg":false,"name":"Size","type":"number"}],"description":"Returns a number based on the Size argument and your screen's width. The screen's width is always equal to size 640. This function is primarily used for scaling font sizes.","examples":[{"code":"print( ScreenScale(96) )\nprint( ScreenScale(400) )\nprint( ScreenScale(640) )","description":"Prints a scaled number based on the number 96, 400 and 640."}],"isConstructor":false,"name":"ScreenScale","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Gets the height of the game's window (in pixels).","examples":[{"code":"print(ScrH())","description":"Prints the Height of the window."},{"code":"hook.Add(\"HUDPaint\", \"WhiteBox\", function()\n    surface.SetDrawColor(Color(255,255,255,255))\n    surface.DrawRect(0, 0, ScrW() / 2, ScrH() / 2)\nend)","description":"Draws a white box on the top left corner of your screen"}],"isConstructor":false,"name":"ScrH","realm":"client and menu","returns":[{"description":"The height of the game's window in pixels","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the width of the game's window (in pixels).","examples":[{"code":"print( ScrW() )","description":"Prints the width of the screen"}],"isConstructor":false,"name":"ScrW","realm":"client and menu","returns":[{"description":"The width of the game's window in pixels","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Can be a {{Type|number}} or {{Type|string}}.\n* If it's a string and starts with \"#\", the function will return the amount of values in the vararg (ignoring the rest of the string).\n* If it's a positive number, the function will return all values starting from the given index.\n* If the number is negative, it will return the amount specified from the end instead of the beginning.","isOptional":false,"isVarArg":false,"name":"parameter","type":"number | string"},{"default":"","description":"The vararg. These are the values from which you want to select.","isOptional":false,"isVarArg":true,"name":"vararg","type":"any"}],"description":"Used to select single values from a vararg or get the count of values in it.","examples":[{"code":"print( select( '#', 'a', true, false, {}, 1 ) )","description":"This code shows how it works with the \"#\" modifier:"},{"code":"print( select( 2, 1, 2, 3, 4, 5 ) )","description":"This prints from the 2nd vararg passed to the last"},{"code":"print( select( -2, 1, 2, 3, 4, 5 ) )","description":"This prints the last 2 arguments passed"}],"isConstructor":false,"name":"select","realm":"shared and menu","returns":[{"description":"Returns a {{Type|number}} or {{Type|vararg}}, depending on the select method.","type":"number | any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the usermessage","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Can be a {{Type|CRecipientFilter}}, {{Type|table}} or {{Type|Player}} object.","isOptional":false,"isVarArg":false,"name":"recipients","type":"CRecipientFilter | table | Player"},{"default":"","description":"Data to send in the usermessage","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Send a usermessage","examples":[],"isConstructor":false,"name":"SendUserMessage","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to be printed to console.","isOptional":false,"isVarArg":false,"name":"parameter","type":"string"}],"description":"Prints \"ServerLog: PARAM\" without a newline, to the server log and console.","examples":[],"isConstructor":false,"name":"ServerLog","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to add to the clipboard.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Adds the given string to the computers clipboard, which can then be pasted in or outside of GMod with Ctrl + V.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"SetClipboardText","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The function to set the enviroment for or a number representing stack level.","isOptional":false,"isVarArg":false,"name":"location","type":"Function"},{"default":"","description":"Table to be used as enviroment.","isOptional":false,"isVarArg":false,"name":"enviroment","type":"table"}],"description":"Sets the enviroment for a function or a stack level, if a function is passed, the return value will be the function, otherwise nil.","examples":[],"isConstructor":false,"name":"setfenv","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index to identify the global angle with","isOptional":false,"isVarArg":false,"name":"index","type":"any"},{"default":"","description":"Angle to be networked","isOptional":false,"isVarArg":false,"name":"angle","type":"Angle"}],"description":"Defines an angle to be automatically networked to clients\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on!}}","examples":[],"isConstructor":false,"name":"SetGlobalAngle","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index to identify the global boolean with","isOptional":false,"isVarArg":false,"name":"index","type":"any"},{"default":"","description":"Boolean to be networked","isOptional":false,"isVarArg":false,"name":"bool","type":"boolean"}],"description":"Defined a boolean to be automatically networked to clients\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on!}}","examples":[],"isConstructor":false,"name":"SetGlobalBool","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index to identify the global entity with","isOptional":false,"isVarArg":false,"name":"index","type":"any"},{"default":"","description":"Entity to be networked","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Defines an entity to be automatically networked to clients\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on!}}","examples":[],"isConstructor":false,"name":"SetGlobalEntity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index to identify the global float with","isOptional":false,"isVarArg":false,"name":"index","type":"any"},{"default":"","description":"Float to be networked","isOptional":false,"isVarArg":false,"name":"float","type":"number"}],"description":"Defines a floating point number to be automatically networked to clients\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on!}}","examples":[],"isConstructor":false,"name":"SetGlobalFloat","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique index to identify the global value with.","isOptional":false,"isVarArg":false,"name":"index","type":"string"},{"default":"","description":"The value to set the global value to","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Sets an integer that is shared between the server and all clients.\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on!}}\n{{Bug|Issue=3374|This function will not round decimal values as it actually networks a float internally.}}","examples":[{"code":"SetGlobalInt(\"RoundNumber\", 4)","description":"Sets the current round number."}],"isConstructor":false,"name":"SetGlobalInt","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index to identify the global string with","isOptional":false,"isVarArg":false,"name":"index","type":"any"},{"default":"","description":"String to be networked","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Defines a string with a maximum of 199 characters to be automatically networked to clients\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on!}}","examples":[],"isConstructor":false,"name":"SetGlobalString","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index to identify the global vector with","isOptional":false,"isVarArg":false,"name":"index","type":"any"},{"default":"","description":"Vector to be networked","isOptional":false,"isVarArg":false,"name":"vec","type":"Vector"}],"description":"Defines a vector to be automatically networked to clients\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on!}}","examples":[],"isConstructor":false,"name":"SetGlobalVector","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The table who's metatable to change.","isOptional":false,"isVarArg":false,"name":"Tab","type":"table"},{"default":"","description":"The metatable to assign.<br />If it's nil, the metatable will be removed.","isOptional":false,"isVarArg":false,"name":"Metatable","type":"table"}],"description":"Sets, changes or removes a table's metatable. Returns Tab (the first argument).","examples":[{"code":"local Pupil_meta = {\n\tGetName = function(self)\n\t\treturn self.name\n\tend\n}\nPupil_meta.__index = Pupil_meta\n-- If a key cannot be found in an object, it will look in it's metatable's __index metamethod.\n\nlocal Pupil = {\n\tname = \"John Doe\"\n}\n\nsetmetatable(Pupil, Pupil_meta)\n\nprint( Pupil:GetName() )\n-- This will look for the \"GetName\" key in Pupil, but it doesn't have one. So it will look in it's metatable (Pupil_meta) __index key instead.","description":"Creates a metatable and assigns it to a table."}],"isConstructor":false,"name":"setmetatable","realm":"shared and menu","returns":[{"description":"The first argument.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Constraint system to use","isOptional":false,"isVarArg":false,"name":"constraintSystem","type":"Entity"}],"description":"Called by the engine to set which constraint system [https://developer.valvesoftware.com/wiki/Phys_constraintsystem] the next created constraints should use","examples":[],"isConstructor":false,"name":"SetPhysConstraintSystem","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to sort","isOptional":false,"isVarArg":false,"name":"table","type":"table"},{"default":"false","description":"Reverse the sorting order","isOptional":true,"isVarArg":false,"name":"desc","type":"boolean"}],"description":"This function can be used in a for loop instead of {{GlobalFunction|pairs}}. It sorts all '''keys''' alphabetically.\n\nFor sorting by specific '''value member''', use {{GlobalFunction|SortedPairsByMemberValue}}.<br/>\nFor sorting by '''value''', use {{GlobalFunction|SortedPairsByValue}}.","examples":[{"code":"for id, text in SortedPairs( { \"e\", \"b\", \"d\", \"c\", \"a\" } ) do\n    print(id, text)\nend\n\nprint( \"---\" )\n\nfor id, text in SortedPairs( { e = 1, b = 2, d = 3, c = 4, a = 5 } ) do\n    print(id, text)\nend","description":"Example of usage."}],"isConstructor":false,"name":"SortedPairs","realm":"shared and menu","returns":[{"description":"Iterator function","type":"Function"},{"description":"The table being iterated over","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to create iterator for.","isOptional":false,"isVarArg":false,"name":"table","type":"table"},{"default":"","description":"Key of the value member to sort by.","isOptional":false,"isVarArg":false,"name":"memberKey","type":"any"},{"default":"false","description":"Whether the iterator should iterate in descending order or not.","isOptional":true,"isVarArg":false,"name":"descending","type":"boolean"}],"description":"Returns an iterator function that can be used to loop through a table in order of member values, when the values of the table are also tables and contain that member.\n\nTo sort by '''value''', use {{GlobalFunction|SortedPairsByValue}}.<br/>\nTo sort by '''keys''', use {{GlobalFunction|SortedPairs}}.","examples":[{"code":"local tab = {\n\t{\n\t\tName = \"Adam\",\n\t\tAge = 16\n\t},\n\t{\n\t\tName = \"Charles\",\n\t\tAge = 18\n\t}\n}\n\nfor k, v in SortedPairsByMemberValue(tab, \"Age\", true) do\n\tprint(v.Name)\nend","description":"Creates a table and prints its contents in order of the age member descending"}],"isConstructor":false,"name":"SortedPairsByMemberValue","realm":"shared and menu","returns":[{"description":"Iterator function","type":"Function"},{"description":"The table the iterator was created for.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to create iterator for","isOptional":false,"isVarArg":false,"name":"table","type":"table"},{"default":"false","description":"Whether the iterator should iterate in descending order or not","isOptional":true,"isVarArg":false,"name":"descending","type":"boolean"}],"description":"Returns an iterator function that can be used to loop through a table in order of its '''values'''.\n\nTo sort by specific '''value member''', use {{GlobalFunction|SortedPairsByMemberValue}}.<br/>\nTo sort by '''keys''', use {{GlobalFunction|SortedPairs}}.","examples":[],"isConstructor":false,"name":"SortedPairsByValue","realm":"shared and menu","returns":[{"description":"Iterator function","type":"Function"},{"description":"The table which will be iterated over","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The soundpath to precache","isOptional":false,"isVarArg":false,"name":"soundPath","type":"string"}],"description":"Runs {{LibraryFunction|util|PrecacheSound}} and returns the string","examples":[{"code":"local BounceSound = Sound( \"garrysmod/balloon_pop_cute.wav\" )\nfunction ENT:PhysicsCollide( data, physobj )\n -- Play sound on bounce\n if ( data.Speed > 60 && data.DeltaTime > 0.2 ) then\n sound.Play( BounceSound, self:GetPos(), 75, math.random( 90, 120 ), math.Clamp( data.Speed / 150, 0, 1 ) )\n ...","description":"From entities/sent_ball.lua"}],"isConstructor":false,"name":"Sound","realm":"shared and menu","returns":[{"description":"The string passed as the first argument","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The sound file path.","isOptional":false,"isVarArg":false,"name":"soundName","type":"string"}],"description":"Returns the duration of the sound specified in seconds.\n\n{{Bug|Issue=936|This only works properly for .wav files serverside.}}","examples":[],"isConstructor":false,"name":"SoundDuration","realm":"shared","returns":[{"description":"Sound duration in seconds.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"String to be escaped","isOptional":false,"isVarArg":false,"name":"input","type":"string"},{"default":"false","description":"Whether the returned value should be surrounded in quotes or not","isOptional":true,"isVarArg":false,"name":"noQuotes","type":"boolean"}],"description":"Returns the input value in an escaped form so that it can safely be used inside of queries. The returned value is surrounded by quotes unless noQuotes is true. Alias of {{LibraryFunction|sql|SQLStr}}","examples":[],"isConstructor":false,"name":"SQLStr","realm":"shared and menu","returns":[{"description":"Escaped input","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The number you want to scale.","isOptional":false,"isVarArg":false,"name":"Size","type":"number"}],"description":"{{Deprecated|You should be using {{GlobalFunction|ScreenScale}} instead.}}\n\nReturns a number based on the Size argument and your screen's width. Alias of {{GlobalFunction|ScreenScale}}.","examples":[{"code":"print( SScale(40) )","description":"Prints a scaled number based on the number 40."}],"isConstructor":false,"name":"SScale","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The number to find the ordinal suffix of.","isOptional":false,"isVarArg":false,"name":"number","type":"number"}],"description":"Returns the ordinal suffix of a given number.","examples":[{"code":"print( 72 .. STNDRD(72) )","description":"Returns the ordinal suffix of 72."}],"isConstructor":false,"name":"STNDRD","realm":"shared and menu","returns":[{"description":"suffix","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player to suppress any networking to.","isOptional":false,"isVarArg":false,"name":"suppressPlayer","type":"Player"}],"description":"Suppress any networking from the server to the specified player. This is automatically called by the engine before/after a player fires their weapon, reloads, or causes any other similar shared-predicted event to occur.","examples":[],"isConstructor":false,"name":"SuppressHostEvents","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns a highly accurate time in seconds since the start up, ideal for benchmarking.","examples":[{"code":"print(SysTime())","description":"Prints the runtime"},{"code":"local SysTime = SysTime\nlocal Distance = FindMetaTable(\"Vector\").Distance\n\nlocal vec1 = Vector(1, 2, 3)\nlocal vec2 = Vector(13, 26, -10)\n\nlocal count = 10000\n\nlocal StartTime = SysTime()\n\nfor i = 1, count do\n\t-- Repeat an action 10,000 times to check how long it takes on average\n\t-- Example action:\n\tDistance(vec1 , vec2)\nend\n\nlocal EndTime = SysTime()\nlocal TotalTime = EndTime - StartTime\nlocal AverageTime = TotalTime / count\n\nprint(\"Total: \" .. TotalTime .. \" seconds. Average: \" .. AverageTime .. \" seconds.\")","description":"Typical usage of this function for benchmarking"}],"isConstructor":false,"name":"SysTime","realm":"shared and menu","returns":[{"description":"Uptime of the server.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns a TauntCamera object","examples":[],"isConstructor":false,"name":"TauntCamera","realm":"shared","returns":[{"description":"TauntCamera","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Clears focus from any text entries player may have focused.","examples":[],"isConstructor":false,"name":"TextEntryLoseFocus","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The frequency of fluctuation","isOptional":false,"isVarArg":false,"name":"frequency","type":"number"},{"default":"","description":"Minimum value","isOptional":false,"isVarArg":false,"name":"min","type":"number"},{"default":"","description":"Maxmimum value","isOptional":false,"isVarArg":false,"name":"max","type":"number"},{"default":"","description":"Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time","isOptional":false,"isVarArg":false,"name":"offset","type":"number"}],"description":"Returns a cosine value that fluctuates based on the current time","examples":[],"isConstructor":false,"name":"TimedCos","realm":"shared and menu","returns":[{"description":"Cosine value","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The frequency of fluctuation, in [[wikipedia:hertz|hertz]]","isOptional":false,"isVarArg":false,"name":"frequency","type":"number"},{"default":"","description":"The center value of the sine wave.","isOptional":false,"isVarArg":false,"name":"origin","type":"number"},{"default":"","description":"This argument's distance from origin defines the size of the full range of the sine wave. For example, if origin is 3 and max is 5, then the full range of the sine wave is 5-3 = 2. 3 is the center point of the sine wave, so the sine wave will range between 2 and 4.","isOptional":false,"isVarArg":false,"name":"max","type":"number"},{"default":"","description":"Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time","isOptional":false,"isVarArg":false,"name":"offset","type":"number"}],"description":"Returns a sine value that fluctuates based on {{GlobalFunction|CurTime}}. The value returned will be between the start value plus/minus the range value.\n\nDue to a bug, the range arguments don't work as intended. The existing (bugged) behavior is documented below.","examples":[],"isConstructor":false,"name":"TimedSin","realm":"shared and menu","returns":[{"description":"Sine value","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The object to be converted to a boolean","isOptional":false,"isVarArg":false,"name":"val","type":"any"}],"description":"Attempts to return an appropriate boolean for the given value","examples":[{"code":"print(\"boolean true:\", tobool(true))\nprint(\"boolean false:\", tobool(false))\nprint(\"string true:\", tobool(\"true\"))\nprint(\"string false:\", tobool(\"false\"))\nprint(\"numeric 0:\", tobool(0))\nprint(\"string 0:\", tobool(\"0\"))\nprint(\"string 1:\", tobool(\"1\"))\nprint(\"nil:\", tobool(nil))\nprint(\"text string:\", tobool(\"not a boolean\"))\nprint(\"empty string:\", tobool(\"\"))","description":"Demonstrate the output of this function with various values."}],"isConstructor":false,"name":"tobool","realm":"shared and menu","returns":[{"description":"'''false''' for the boolean false.<br />'''false''' for \"false\".<br />'''false''' for \"0\".<br />'''false''' for numeric 0.<br />'''false''' for nil.<br /><br />'''true''' otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Map to toggle favorite.","isOptional":false,"isVarArg":false,"name":"map","type":"string"}],"description":"Toggles whether or not the named map is favorited in the new game list.","examples":[],"isConstructor":false,"name":"ToggleFavourite","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to convert. Can be a number or string.","isOptional":false,"isVarArg":false,"name":"value","type":"any"},{"default":"10","description":"The [[wikipedia:Radix|numeric base]] used in the string. Can be any integer between 2 and 36, inclusive.","isOptional":true,"isVarArg":false,"name":"base","type":"number"}],"description":"Attempts to convert the value to a number.\n\nReturns nil on failure.","examples":[],"isConstructor":false,"name":"tonumber","realm":"shared and menu","returns":[{"description":"The numeric representation of the value with the given base, or nil if the conversion failed.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The object to be converted to a string.","isOptional":false,"isVarArg":false,"name":"value","type":"any"}],"description":"Attempts to convert the value to a string. If the value is an object and its metatable has defined the __tostring metamethod, this will call that function.\n\n{{GlobalFunction|print}} also uses this functionality.","examples":[{"code":"print(tostring(0x16))","description":"Convert a number to a string."}],"isConstructor":false,"name":"tostring","realm":"shared and menu","returns":[{"description":"The string representation of the value.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"File name to test","isOptional":false,"isVarArg":false,"name":"filename","type":"string"}],"description":"{{Deprecated}}\n{{Internal}}\nReturns \"Lua Cache File\" if the given file name is in a certain string table, nothing otherwise.","examples":[],"isConstructor":false,"name":"TranslateDownloadableName","realm":"menu","returns":[{"description":"\"Lua Cache File\" if the given file name is in a certain string table, nothing otherwise.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The object to get the type of.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns a string representing the name of the type of the passed object.","examples":[{"code":"print( type(2) )\nprint( type(\"hai\") )\nprint( type({}) )","description":"Print the name of a few types."},{"code":"print( type() )","description":"Returns \"no value\" if called with 0 arguments/parameters."},{"code":"print(type(LocalPlayer()))\nprint(type(Vector()))\nprint(type(Angle()))\nprint(type(Entity(num))) -- -> num is the EntIndex for the entity\nprint(type(vgui.Create(\"DFrame\")))","description":"A list of code showing how you can use the type function in replacement with any of the \"is\" functions. (example being {{GlobalFunction|istable}}, {{GlobalFunction|isentity}}, etc.)"}],"isConstructor":false,"name":"type","realm":"shared and menu","returns":[{"description":"The name of the object's type.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to get the type ID of.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Gets the associated type ID of the variable.\n\n{{Bug|Request=1120|This does not work properly with _LOADLIB objects.}}","examples":[],"isConstructor":false,"name":"TypeID","realm":"shared","returns":[{"description":"The type ID of the variable. See the {{Enum|TYPE}}.","type":"TYPE"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to generate the vararg from.","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"},{"default":"1","description":"Which index to start from. Optional.","isOptional":true,"isVarArg":false,"name":"startIndex","type":"number"},{"default":"#tbl","description":"Which index to end at. Optional, even if you set StartIndex.","isOptional":true,"isVarArg":false,"name":"endIndex","type":"number"}],"description":"This function takes a numeric indexed table and return all the members as a vararg. If specified, it will start at the given index and end at end index.","examples":[{"code":"print( unpack({\"a\", \"b\", \"c\"}) )","description":"Prints a vararg"}],"isConstructor":false,"name":"unpack","realm":"shared and menu","returns":[{"description":"Output values","type":"any"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current asynchronous in-game time.","examples":[],"isConstructor":false,"name":"UnPredictedCurTime","realm":"shared and menu","returns":[{"description":"The asynchronous in-game time.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"JavaScript to run on the loading panel.","isOptional":false,"isVarArg":false,"name":"javascript","type":"string"}],"description":"Runs JavaScript on the loading screen panel ({{GlobalFunction|GetLoadPanel}}).","examples":[],"isConstructor":false,"name":"UpdateLoadPanel","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The model name to be checked","isOptional":false,"isVarArg":false,"name":"modelName","type":"string"}],"description":"{{Deprecated|You should use {{GlobalFunction|IsUselessModel}} instead.}}\n\nReturns whether or not a model is useless by checking that the file path is that of a proper model.\n\nIf the string \".mdl\" is not found in the model name, the function will return true.\n\nThe function will also return true if any of the following strings are found in the given model name:\n* \"_gesture\"\n* \"_anim\"\n* \"_gst\"\n* \"_pst\"\n* \"_shd\"\n* \"_ss\"\n* \"_posture\"\n* \"_anm\"\n* \"ghostanim\"\n* \"_paths\"\n* \"_shared\"\n* \"anim_\"\n* \"gestures_\"\n* \"shared_ragdoll_\"","examples":[],"isConstructor":false,"name":"UTIL_IsUselessModel","realm":"shared and menu","returns":[{"description":"Whether or not the model is useless","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to validate.","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"}],"description":"{{Deprecated|You should use {{GlobalFunction|IsValid}} instead}}\n\nReturns if a panel is safe to use.","examples":[],"isConstructor":false,"name":"ValidPanel","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns a random vector whose components are each between -1 and 1","examples":[],"isConstructor":false,"name":"VectorRand","realm":"shared and menu","returns":[{"description":"The random direction vector","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the time in seconds it took to render the VGUI.","examples":[],"isConstructor":false,"name":"VGUIFrameTime","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"X position of the created element","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"Y position of the created element","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"Width of the created element","isOptional":false,"isVarArg":false,"name":"w","type":"number"},{"default":"","description":"Height of the created element","isOptional":false,"isVarArg":false,"name":"h","type":"number"}],"description":"Creates and returns a {{Type|DShape}} rectangle GUI element with the given dimensions.","examples":[],"isConstructor":false,"name":"VGUIRect","realm":"client","returns":[{"description":"{{Type|DShape}} element","type":"DShape"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to display layout details of","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"}],"description":"Briefly displays layout details of the given panel on-screen","examples":[],"isConstructor":false,"name":"VisualizeLayout","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Namespace for the file base","isOptional":false,"isVarArg":false,"name":"namespace","type":"string"},{"default":"","description":"Tags required for a Workshop submission to be interacted with by the filebase","isOptional":false,"isVarArg":false,"name":"requiredTags","type":"table"}],"description":"{{Internal}}Returns a new WorkshopFileBase element","examples":[],"isConstructor":false,"name":"WorkshopFileBase","realm":"client and menu","returns":[{"description":"WorkshopFileBase element","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The position that should be translated from the current to the new system.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"The angles that should be translated from the current to the new system.","isOptional":false,"isVarArg":false,"name":"angle","type":"Angle"},{"default":"","description":"The origin of the system to translate to.","isOptional":false,"isVarArg":false,"name":"newSystemOrigin","type":"Vector"},{"default":"","description":"The angles of the system to translate to.","isOptional":false,"isVarArg":false,"name":"newSystemAngles","type":"Angle"}],"description":"Translates the specified position and angle into the specified coordinate system.","examples":[],"isConstructor":false,"name":"WorldToLocal","realm":"shared","returns":[{"description":"Local position","type":"Vector"},{"description":"Local angles","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The function to call initially.","isOptional":false,"isVarArg":false,"name":"func","type":"Function"},{"default":"","description":"The function to be called if execution of the first fails; the error message is passed as a string.\n\nYou cannot throw an {{GlobalFunction|error}}() from this callback: it will have no effect (not even stopping the callback).","isOptional":false,"isVarArg":false,"name":"errorCallback","type":"Function"},{"default":"","description":"Arguments to pass to the initial function.","isOptional":false,"isVarArg":true,"name":"arguments","type":"any"}],"description":"Attempts to call the first function. If the execution succeeds, this returns ''true'' followed by the returns of the function. If execution fails, this returns ''false'' and the second function is called with the error message. \n\nUnlike in {{GlobalFunction|pcall}}, the stack is not unwound and can therefore be used for stack analyses with the {{Lib|debug}}.\n\n{{Bug|Issue=1976|Using this function with {{GlobalFunction|include}} will break autorefresh.}}\n\n{{Bug|Issue=2498|This does not stop {{GlobalFunction|Error}} and {{GlobalFunction|ErrorNoHalt}} from sending error messages to the server (if called clientside) or calling the {{HookFunction|GM|OnLuaError}} hook. The success boolean returned will always return true and thus you will not get the error message returned. {{GlobalFunction|error}} does not exhibit these behaviours.}}\n\n{{Bug|Issue=3112|This does not stop errors incurred by {{GlobalFunction|include}}.}}","examples":[{"code":"local function test()\n\taisj()\nend\n\nlocal function catch( err )\n\tprint( \"ERROR: \", err )\nend\n\nprint( \"Output: \", xpcall( test, catch ) )","description":"Using xpcall to catch an error."}],"isConstructor":false,"name":"xpcall","realm":"shared and menu","returns":[{"description":"Status of the execution; ''true'' for success, ''false'' for failure.","type":"boolean"},{"description":"The returns of the first function if execution succeeded, otherwise the '''first''' return value of the error callback.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to display on the first button.","isOptional":false,"isVarArg":false,"name":"btn1text","type":"string"}],"description":"Shows a message box in the middle of the screen, with up to 4 buttons they can press.","examples":[],"isConstructor":false,"name":"Derma_Query","realm":"client and menu","returns":[{"description":"The Panel object of the created window.","type":"Panel"}]}],"isHook":false,"isPureAbstract":false,"name":"Global"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The engine library provides functions to access various features in the game's engine, most are related to the demo and save systems.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the name of the currently running gamemode.\n\n{{Bug|Issue=1988|This will return the incorrect gamemode name on the client if used too early.}}","examples":[{"code":"print( engine.ActiveGamemode() )","description":"Prints out the name of the active gamemode."}],"isConstructor":false,"name":"ActiveGamemode","realm":"shared and menu","returns":[{"description":"The active gamemode's name. This is the name of the gamemode's folder.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Closes the server and completely exits.\n\nThis is only functional when running in server test mode (launch option -systemtest). Server test mode is used internally at Facepunch as part of the build process to make sure that the dedicated servers aren't crashing on startup.","examples":[],"isConstructor":false,"name":"CloseServer","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns a list of addons the player have subscribed to on the workshop.","examples":[{"code":"PrintTable(engine.GetAddons())","description":"Will return a list of all the workshop addons you have downloaded / are downloading."}],"isConstructor":false,"name":"GetAddons","realm":"shared and menu","returns":[{"description":"A table with 6 keys (downloaded, models, title, file, mounted, wsid)","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"When starting playing a demo, {{LibraryFunction|engine|GetDemoPlaybackTick}} will be reset and its old value will be added to this functions return value.","examples":[],"isConstructor":false,"name":"GetDemoPlaybackStartTick","realm":"client and menu","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Current tick of currently loaded demo.\n\nIf not playing a demo, it will return amount of ticks since last demo playback.","examples":[],"isConstructor":false,"name":"GetDemoPlaybackTick","realm":"client and menu","returns":[{"description":"The amount of ticks of currently loaded demo.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns time scale of demo playback.\n\nIf not during demo playback, returns 1.","examples":[],"isConstructor":false,"name":"GetDemoPlaybackTimeScale","realm":"client and menu","returns":[{"description":"The time scale of demo playback, value of demo_timescale console variable.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns total amount of ticks of currently loaded demo.\n\nIf not playing a demo, returns 0 or the value of last played demo.","examples":[],"isConstructor":false,"name":"GetDemoPlaybackTotalTicks","realm":"client and menu","returns":[{"description":"Total amount of ticks of currently loaded demo.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table containing info for all installed gamemodes","examples":[{"code":"","description":""}],"isConstructor":false,"name":"GetGamemodes","realm":"shared and menu","returns":[{"description":"gamemodes","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns an array of tables corresponding to all games from which Garry's Mod supports mounting content.\n\nThe \"mounted\" and \"installed\" values currently do not work correctly serverside on dedicated servers. Some games will always report true while others will always report false.","examples":[{"code":"PrintTable( engine.GetGames() )","description":"Prints out a list of games, their Steam AppIds, titles and status (owned, installed, mounted)."}],"isConstructor":false,"name":"GetGames","realm":"shared and menu","returns":[{"description":"A table of tables containing all mountable games","type":"table[]"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|Used internally for in-game menus, may be merged in the future into {{LibraryFunction|engine|GetAddons}}.}}\n\nReturns the UGC (demos, saves and dupes) the player have subscribed to on the workshop.","examples":[],"isConstructor":false,"name":"GetUserContent","realm":"shared and menu","returns":[{"description":"Returns a table with 6 keys (title, type, tags, wsid, timeadded)","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if we're currently playing a demo.\n\nYou will notice that there's no server-side version of this. That's because there is no server when playing a demo. Demos are both recorded and played back purely clientside.","examples":[],"isConstructor":false,"name":"IsPlayingDemo","realm":"client and menu","returns":[{"description":"Whether the game is currently playing a demo or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the game is currently recording a demo file (.dem) using gm_demo","examples":[],"isConstructor":false,"name":"IsRecordingDemo","realm":"client and menu","returns":[{"description":"Whether the game is currently recording a demo or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The lightstyle to edit. 0 to 63. If you want to edit map lighting, you want to set this to 0.","isOptional":false,"isVarArg":false,"name":"lightstyle","type":"number"},{"default":"","description":"The pattern to change the lightstyle to. \"a\" is the darkest, \"z\" is the brightest. You can use stuff like \"abcxyz\" to make flashing patterns. The normal brightness for a map is \"m\". Values over \"z\" are allowed, \"~\" for instance.","isOptional":false,"isVarArg":false,"name":"pattern","type":"string"}],"description":"This is a direct binding to the function “engine->LightStyle”. This function allows you to change the default light style of the map - so you can make lighting lighter or darker. You’ll need to call {{LibraryFunction|render|RedownloadAllLightmaps}} clientside to refresh the lightmaps to this new color.\n\n{{Bug|Issue=3626|Calling this function with arguments 0 and \"a\" will cause dynamic lights such as those produced by the Light tool to stop working.}}","examples":[],"isConstructor":false,"name":"LightStyle","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the file. e.g, engine.OpenDupe(\"dupes/8b809dd7a1a9a375e75be01cdc12e61f.dupe\")","isOptional":false,"isVarArg":false,"name":"dupeName","type":"string"}],"description":"Loads a duplication from the local filesystem.","examples":[],"isConstructor":false,"name":"OpenDupe","realm":"client","returns":[{"description":"Compressed dupeData. Use util.JSONToTable to make it into a format useable by the duplicator tool.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns an estimate of the server's performance. Equivalent to calling {{GlobalFunction|FrameTime}} from the server, according to source code.","examples":[{"code":"print(\"Server Tick: \"..(1/engine.ServerFrameTime()))","description":"Get the servers tickrate. Can be used to indicate lag"}],"isConstructor":false,"name":"ServerFrameTime","realm":"client","returns":[{"description":"Frame time","type":"number"},{"description":"Server Framerate Std Deviation","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The depot id of the game to mount.","isOptional":false,"isVarArg":false,"name":"depotID","type":"string"},{"default":"","description":"The mount state, true to mount, false to unmount","isOptional":false,"isVarArg":false,"name":"doMount","type":"boolean"}],"description":"Sets the mounting options for mountable content.","examples":[],"isConstructor":false,"name":"SetMounted","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the number of ticks since the game server started.","examples":[],"isConstructor":false,"name":"TickCount","realm":"shared","returns":[{"description":"Number of ticks since the game server started.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the number of seconds between each gametick.","examples":[{"code":"print(1 / engine.TickInterval())","description":""}],"isConstructor":false,"name":"TickInterval","realm":"shared and menu","returns":[{"description":"Number of seconds between each gametick.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns video recording settings set by {{LibraryFunction|video|Record}}. Used by Demo-To-Video feature.","examples":[],"isConstructor":false,"name":"VideoSettings","realm":"client","returns":[{"description":"The video recording settings, see {{Struct|VideoData}}.","type":"VideoData"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Dupe table, encoded by {{LibraryFunction|util|TableToJSON}} and compressed by {{LibraryFunction|util|Compress}}","isOptional":false,"isVarArg":false,"name":"dupe","type":"string"},{"default":"","description":"The dupe icon, created by {{LibraryFunction|render|Capture}}","isOptional":false,"isVarArg":false,"name":"jpeg","type":"string"}],"description":"Saves a duplication as a file.","examples":[],"isConstructor":false,"name":"WriteDupe","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Data generated by gmsave.SaveMap","isOptional":false,"isVarArg":false,"name":"saveData","type":"string"},{"default":"","description":"Name the save will have.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"When the save was saved during the game (Put CurTime here)","isOptional":false,"isVarArg":false,"name":"time","type":"number"},{"default":"","description":"The map the save is used for.","isOptional":false,"isVarArg":false,"name":"map","type":"string"}],"description":"Stores savedata into the game (can be loaded using the LoadGame menu)","examples":[],"isConstructor":false,"name":"WriteSave","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"engine"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}\n\nA VGUI base panel providing drag/drop functionality. Used by {{Type|DIconLayout}}, {{Type|DListLayout}} and {{Type|DTileLayout}}.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 300, 500 )\nframe:Center()\nframe:MakePopup()\n\nlocal dragbase = vgui.Create( \"DDragBase\", frame )\ndragbase:Dock( FILL )\ndragbase:MakeDroppable( \"test\" )\ndragbase:SetDropPos( \"82\" )\n\nfor i = 0, 10 do\n\tlocal butt = dragbase:Add( \"DButton\" )\n\t//butt:Dock( TOP )\n\tbutt:SetPos( 25, i * 25 )\n\tbutt:SetWidth( 100 )\n\tbutt:Droppable( \"test\" )\n\tbutt.id = i\n\tbutt.Think = function( s ) s:SetText( \"ID: \" .. i .. \" ZPOS: \" .. s:GetZPos() ) end\nend","description":""}],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"drops","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"bDoDrop","type":"boolean"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"command","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"x","type":"number"}],"description":"{{Internal}}\n\nInternal function used in {{ClassFunction|DDragBase|MakeDroppable}}","examples":[],"isConstructor":false,"name":"DropAction_Copy","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"drops","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"bDoDrop","type":"boolean"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"command","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"x","type":"number"}],"description":"{{Internal}}\n\nInternal function used in {{ClassFunction|DDragBase|DropAction_Copy}}","examples":[],"isConstructor":false,"name":"DropAction_Normal","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"drops","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"bDoDrop","type":"boolean"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"command","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"x","type":"number"}],"description":"{{Internal}}\n\nInternal function used in {{ClassFunction|DDragBase|DropAction_Normal}}","examples":[],"isConstructor":false,"name":"DropAction_Simple","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetDnD","realm":"client","returns":[{"description":"Name of the DnD family.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetUseLiveDrag","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique name for the receiver slot. Only droppable panels with the same DnD name as this can be dropped on the panel.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Whether or not to allow droppable panels to be copied when the {{Key|Ctrl}} key is held down.","isOptional":false,"isVarArg":false,"name":"allowCopy","type":"boolean"}],"description":"Makes the panel a receiver for any droppable panel with the same DnD name. Internally calls {{ClassFunction|Panel|Receiver}}.","examples":[],"isConstructor":false,"name":"MakeDroppable","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when anything is dropped on or rearranged within the {{Type|DDragBase}}.","examples":[],"isConstructor":false,"name":"OnModified","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the DnD family.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"","examples":[],"isConstructor":false,"name":"SetDnD","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"5","description":"Where you're allowed to drop things.","isOptional":true,"isVarArg":false,"name":"pos","type":"string"}],"description":"Determines where you can drop stuff.\n\"4\" for left\n\"5\" for center\n\"6\" for right\n\"8\" for top\n\"2\" for bottom","examples":[],"isConstructor":false,"name":"SetDropPos","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"newState","type":"boolean"}],"description":"","examples":[],"isConstructor":false,"name":"SetUseLiveDrag","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"drop","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"{{Internal}}\n\nInternal function used in {{ClassFunction|DDragBase|DropAction_Normal}}","examples":[],"isConstructor":false,"name":"UpdateDropTarget","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DDragBase"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"An object that represents a ladder for Nextbots.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The area this ladder leads to.","isOptional":false,"isVarArg":false,"name":"area","type":"CNavArea"}],"description":"Connects this ladder to a {{Type|CNavArea}} with a one way connection. ( From this ladder to the target area ).\n\nSee {{ClassFunction|CNavArea|ConnectTo}} for making the connection from area to ladder.","examples":[],"isConstructor":false,"name":"ConnectTo","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|CNavArea}} this to disconnect from.","isOptional":false,"isVarArg":false,"name":"area","type":"CNavArea"}],"description":"Disconnects this ladder from given area in a single direction.","examples":[],"isConstructor":false,"name":"Disconnect","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the bottom most position of the ladder.","examples":[],"isConstructor":false,"name":"GetBottom","realm":"server","returns":[{"description":"The bottom most position of the ladder.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the bottom area of the {{Type|CNavLadder}}.","examples":[],"isConstructor":false,"name":"GetBottomArea","realm":"server","returns":[{"description":"","type":"CNavArea"}]},{"accessModifier":"public","arguments":[],"description":"Returns this {{Type|CNavLadder}}s unique ID.","examples":[],"isConstructor":false,"name":"GetID","realm":"server","returns":[{"description":"The unique ID.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the length of the ladder.","examples":[],"isConstructor":false,"name":"GetLength","realm":"server","returns":[{"description":"The length of the ladder.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the direction of this {{Type|CNavLadder}}. ( The direction in which players back will be facing if they are looking directly at the ladder )","examples":[],"isConstructor":false,"name":"GetNormal","realm":"server","returns":[{"description":"The direction of this {{Type|CNavLadder}}.","type":"CNavLadder"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The Z position in world space coordinates.","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Returns the world position based on given height relative to the ladder.","examples":[],"isConstructor":false,"name":"GetPosAtHeight","realm":"server","returns":[{"description":"The closest point on the ladder to that height.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the topmost position of the ladder.","examples":[],"isConstructor":false,"name":"GetTop","realm":"server","returns":[{"description":"The topmost position of the ladder.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the top behind {{Type|CNavArea}} of the {{Type|CNavLadder}}.","examples":[],"isConstructor":false,"name":"GetTopBehindArea","realm":"server","returns":[{"description":"The top behind {{Type|CNavArea}} of the {{Type|CNavLadder}}.","type":"CNavArea | CNavLadder"}]},{"accessModifier":"public","arguments":[],"description":"Returns the top forward {{Type|CNavArea}} of the {{Type|CNavLadder}}.","examples":[],"isConstructor":false,"name":"GetTopForwardArea","realm":"server","returns":[{"description":"The top forward {{Type|CNavArea}} of the {{Type|CNavLadder}}.","type":"CNavArea | CNavLadder"}]},{"accessModifier":"public","arguments":[],"description":"Returns the top left {{Type|CNavArea}} of the {{Type|CNavLadder}}.","examples":[],"isConstructor":false,"name":"GetTopLeftArea","realm":"server","returns":[{"description":"The top left {{Type|CNavArea}} of the {{Type|CNavLadder}}.","type":"CNavArea | CNavLadder"}]},{"accessModifier":"public","arguments":[],"description":"Returns the top right {{Type|CNavArea}} of the {{Type|CNavLadder}}.","examples":[],"isConstructor":false,"name":"GetTopRightArea","realm":"server","returns":[{"description":"The top right {{Type|CNavArea}} of the {{Type|CNavLadder}}.","type":"CNavArea | CNavLadder"}]},{"accessModifier":"public","arguments":[],"description":"Returns the width of the ladder in Hammer Units.","examples":[],"isConstructor":false,"name":"GetWidth","realm":"server","returns":[{"description":"The width of the ladder in Hammer Units.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|CNavArea}} to test against.","isOptional":false,"isVarArg":false,"name":"navArea","type":"CNavArea"},{"default":"","description":"The direction, in which to look for the connection. See {{Enum|NavDir}}","isOptional":false,"isVarArg":false,"name":"navDirType","type":"NavDir"}],"description":"Returns whether this {{Type|CNavLadder}} has an outgoing ( one or two way ) connection '''to''' given {{Type|CNavArea}} in given direction.","examples":[],"isConstructor":false,"name":"IsConnectedAtSide","realm":"server","returns":[{"description":"Whether this {{Type|CNavLadder}} has an outgoing ( one or two way ) connection '''to''' given {{Type|CNavArea}} in given direction.","type":"CNavLadder | CNavArea"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether this {{Type|CNavLadder}} is valid or not.","examples":[],"isConstructor":false,"name":"IsValid","realm":"server","returns":[{"description":"Whether this {{Type|CNavLadder}} is valid or not.","type":"CNavLadder"}]},{"accessModifier":"public","arguments":[],"description":"Removes the given nav ladder.","examples":[],"isConstructor":false,"name":"Remove","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"area","type":"CNavArea"}],"description":"Sets the bottom area of the {{Type|CNavLadder}}.","examples":[],"isConstructor":false,"name":"SetBottomArea","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"area","type":"CNavArea"}],"description":"Sets the top behind area of the {{Type|CNavLadder}}.","examples":[],"isConstructor":false,"name":"SetTopBehindArea","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"area","type":"CNavArea"}],"description":"Sets the top forward area of the {{Type|CNavLadder}}.","examples":[],"isConstructor":false,"name":"SetTopForwardArea","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"area","type":"CNavArea"}],"description":"Sets the top left area of the {{Type|CNavLadder}}.","examples":[],"isConstructor":false,"name":"SetTopLeftArea","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"area","type":"CNavArea"}],"description":"Sets the top right area of the {{Type|CNavLadder}}.","examples":[],"isConstructor":false,"name":"SetTopRightArea","realm":"server","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"CNavLadder"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A simple Derma Drawer","examples":[{"code":"local Frame = vgui.Create( \"DFrame\" )\nFrame:SetSize( 400, 200 )\nFrame:Center()\nFrame:MakePopup()\n\nlocal Drawer = vgui.Create( \"DDrawer\", Frame )\nDrawer:SetOpenSize( 75 )\t\t-- Default OpenSize is 100\nDrawer:SetOpenTime( 0.2 )\t\t-- Default OpenTime is 0.3\nDrawer:Open()\t\t\t\t-- You can also use Drawer:Close()  and  Drawer:Toggle()\n\n//Let's add a panel, because Drawer is empty\nlocal PanelInDrawer = vgui.Create( \"DPanel\", Drawer )\nPanelInDrawer:Dock( FILL )\t\t-- Make PanelInDrawer fill place of Drawer\nPanelInDrawer:DockMargin( 3, 0, 3, 3 ) \t-- Margins for the dock. Search on wiki for more info","description":"Creates a DDrawer in a DFrame; set the open size and time; add a panel in the drawer; open the DDrawer."}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[],"description":"Closes the {{Type|DDrawer}}.","examples":[],"isConstructor":false,"name":"Close","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Return the Open Size of DDrawer.","examples":[],"isConstructor":false,"name":"GetOpenSize","realm":"client","returns":[{"description":"Open size.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Return the Open Time of DDrawer.","examples":[],"isConstructor":false,"name":"GetOpenTime","realm":"client","returns":[{"description":"Time in seconds.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Opens the {{Type|DDrawer}}.","examples":[],"isConstructor":false,"name":"Open","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Height of DDrawer. Default is 100.","isOptional":false,"isVarArg":false,"name":"Value","type":"number"}],"description":"Set the height of DDrawer","examples":[],"isConstructor":false,"name":"SetOpenSize","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Length in seconds. Default is 0.3","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Set the time (in seconds) for DDrawer to open.","examples":[],"isConstructor":false,"name":"SetOpenTime","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Toggles the {{Type|DDrawer}}.","examples":[],"isConstructor":false,"name":"Toggle","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DDrawer"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal|Unless you know what you are doing and you benefit from this panel, you should be using the {{Type|DProperties}} instead.}}\n\nA panel used by the [[Editable Entities]] system.","examples":[],"extends":"DProperties","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"varname","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"editdata","type":"table"}],"description":"{{Internal}}\n\nCalled internally by {{ClassFunction|DEntityProperties|RebuildControls}}.","examples":[],"isConstructor":false,"name":"EditVariable","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nCalled internally when an entity being edited became invalid.\n\nYou should use {{ClassFunction|DEntityProperties|OnEntityLost}} instead.","examples":[],"isConstructor":false,"name":"EntityLost","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when we were editing an entity and then it became invalid (probably removed)","examples":[],"isConstructor":false,"name":"OnEntityLost","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nCalled internally by {{ClassFunction|DEntityProperties|SetEntity}} to rebuild the controls.","examples":[],"isConstructor":false,"name":"RebuildControls","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to edit","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Sets the entity to be edited by this panel. The entity must support the [[Editable Entities]] system or nothing will happen.","examples":[],"isConstructor":false,"name":"SetEntity","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DEntityProperties"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The ents library provides functions for creating and finding entities in the game.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The classname of the entity to create","isOptional":false,"isVarArg":false,"name":"classRef","type":"string"}],"description":"Creates an entity. This function will fail and return NULL if the soft-edict limit is hit (8176), or the provided entity class doesn't exist.\n\n{{Warning|Do not use before {{HookFunction|GM|InitPostEntity}} has been called, otherwise the server will crash!<br>If you need to perform entity creation when the game starts, create a hook for {{HookFunction|GM|InitPostEntity}} and do it there}}","examples":[{"code":"local button = ents.Create( \"gmod_button\" )\nif ( !IsValid( button ) ) then return end // Check whether we successfully made an entity, if not - bail\nbutton:SetModel( \"models/dav0r/buttons/button.mdl\" )\nbutton:SetPos( Vector( 0, 0, 100 ) )\nbutton:Spawn()","description":"Creates a gmod_button entity near 0,0,0"}],"isConstructor":false,"name":"Create","realm":"server","returns":[{"description":"The created entity, or NULL if failed","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"\"models/error.mdl\"","description":"The model for the entity to be created.<br/>\n\n{{Warning|Model must be precached with {{LibraryFunction|util|PrecacheModel}} on the server before usage.}}","isOptional":true,"isVarArg":false,"name":"model","type":"string"}],"description":"Creates a clientside only prop. See also {{GlobalFunction|ClientsideModel}}.\n\n{{Bug|Issue=1387|Clientside entities are not garbage-collected, thus you must store a reference to the object and call {{ClassFunction|CSEnt|Remove}} manually.}}\n\n{{Bug|Issue=3268|Projected textures do not work on clientside props under specific conditions (see [https://github.com/Facepunch/garrysmod-issues/issues/3268#issuecomment-324821962 this explanation]).}}","examples":[{"code":"function GhostBarrel( ply )\n\tlocal c_Model = ents.CreateClientProp()\n\tc_Model:SetPos( ply:GetPos() )\n\tc_Model:SetModel( \"models/props_borealis/bluebarrel001.mdl\" )\n\tc_Model:SetParent( ply )\n\tc_Model:Spawn()\nend","description":"Creates a clientside prop at the player location."}],"isConstructor":false,"name":"CreateClientProp","realm":"client","returns":[{"description":"Created entity.","type":"CSEnt"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The start position of the ray","isOptional":false,"isVarArg":false,"name":"start","type":"Vector"},{"default":"","description":"The end position of the ray","isOptional":false,"isVarArg":false,"name":"end","type":"Vector"},{"default":"nil","description":"The mins corner of the ray","isOptional":true,"isVarArg":false,"name":"mins","type":"Vector"},{"default":"nil","description":"The maxs corner of the ray","isOptional":true,"isVarArg":false,"name":"maxs","type":"Vector"}],"description":"Returns a table of all entities along the ray. The ray does not stop on collisions, meaning it will go through walls/entities.","examples":[],"isConstructor":false,"name":"FindAlongRay","realm":"shared","returns":[{"description":"Table of the found entities.","type":"Entity[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The class of the entities to find.","isOptional":false,"isVarArg":false,"name":"classRef","type":"string"}],"description":"Gets all entities with the given class, supports wildcards. This works internally by iterating over {{LibraryFunction|ents|GetAll}}.\n\n{{Note|Asterisks (*) are the only wildcard supported.}}","examples":[{"code":"for k, v in pairs( ents.FindByClass( \"prop_*\" ) ) do\n\tprint( v:GetPos() )\nend","description":"Prints the location of every prop on the map."}],"isConstructor":false,"name":"FindByClass","realm":"shared","returns":[{"description":"A table containing all found entities","type":"Entity[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The class of entities to search for","isOptional":false,"isVarArg":false,"name":"classRef","type":"string"},{"default":"","description":"Parent of entities that are being searched for","isOptional":false,"isVarArg":false,"name":"parent","type":"Entity"}],"description":"Finds all entities that are of given class and are children of given entity. This works internally by iterating over {{LibraryFunction|ents|GetAll}}.","examples":[],"isConstructor":false,"name":"FindByClassAndParent","realm":"shared","returns":[{"description":"A table of found entities or nil if none are found","type":"Entity[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The model of the entities to find.","isOptional":false,"isVarArg":false,"name":"model","type":"string"}],"description":"Gets all entities with the given model, supports wildcards. This works internally by iterating over {{LibraryFunction|ents|GetAll}}.\n\n{{Bug|Issue=2872|This currently only supports trailing asterisks (*) for wildcards.}}","examples":[],"isConstructor":false,"name":"FindByModel","realm":"shared","returns":[{"description":"A table of all found entities.","type":"Entity[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The targetname to look for","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Gets all entities with the given hammer targetname. This works internally by iterating over {{LibraryFunction|ents|GetAll}}.\n\n{{Note|A player's Name is his nickname, see {{ClassFunction|Player|GetName}}}}\n\nDoesn't do anything on client.","examples":[],"isConstructor":false,"name":"FindByName","realm":"shared","returns":[{"description":"A table of all found entities","type":"Entity[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The box minimum coordinates.","isOptional":false,"isVarArg":false,"name":"boxMins","type":"Vector"},{"default":"","description":"The box maximum coordinates.","isOptional":false,"isVarArg":false,"name":"boxMaxs","type":"Vector"}],"description":"Returns all entities within the specified box.\n\n{{Note|Clientside entities will not be returned by this function.}}\n\n{{Warning|There is a limit of 512 entities for the output!}}","examples":[{"code":"function ents.FindPlayersInBox( vCorner1, vCorner2 )\n\tlocal tEntities = ents.FindInBox( vCorner1, vCorner2 )\n\tlocal tPlayers = {}\n\tlocal iPlayers = 0\n\t\n\tfor i = 1, #tEntities do\n\t\tif ( tEntities[ i ]:IsPlayer() ) then\n\t\t\tiPlayers = iPlayers + 1\n\t\t\ttPlayers[ iPlayers ] = tEntities[ i ]\n\t\tend\n\tend\n\t\n\treturn tPlayers, iPlayers\nend","description":"Returns a table of players in a box using ents.FindInBox"}],"isConstructor":false,"name":"FindInBox","realm":"shared","returns":[{"description":"A table of all found entities.","type":"Entity[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The tip of the cone.","isOptional":false,"isVarArg":false,"name":"origin","type":"Vector"},{"default":"","description":"Direction of the cone.","isOptional":false,"isVarArg":false,"name":"normal","type":"Vector"},{"default":"","description":"The range of the cone/box around the origin. <!-- The function internally adds 1 to this argument before using it. -->","isOptional":false,"isVarArg":false,"name":"range","type":"number"},{"default":"","description":"The [[math/cos|cosine]] of the angle between the center of the cone to its edges, which is half the overall angle of the cone.\n\n1 makes a 0° cone, 0.707 makes approximately 90°, 0 makes 180°, and so on.","isOptional":false,"isVarArg":false,"name":"angle_cos","type":"number"}],"description":"[[File:ents.FindInCone.png|thumb|2D visualization of the actual shape of the cone, click to enlarge]]\nFinds and returns all entities within the specified cone. Only entities whose {{ClassFunction|Entity|WorldSpaceCenter}} is within the cone are considered to be in it.\n\nThe \"cone\" is actually a conical \"slice\" of an axis-aligned box (see: {{LibraryFunction|ents|FindInBox}}). The image to the right shows approximately how this function would look in 2D. Due to this, the entity may be farther than the specified range!\n\n{{Note|Clientside entities will not be returned by this function.}}\n\n{{Warning|If there are more than 512 entities in the axis-aligned box around the origin, then the result may be incomplete!}}","examples":[{"code":"local mat = Material( \"models/shiny\" )\nmat:SetFloat( \"$alpha\", 0.5 )\n\nhook.Add( \"PostDrawOpaqueRenderables\", \"conetest\", function()\n\tlocal size = 200\n\tlocal dir = LocalPlayer():GetAimVector()\n\tlocal angle = math.cos( math.rad( 15 ) ) -- 15 degrees\n\tlocal startPos = LocalPlayer():EyePos()\n\n\tlocal entities = ents.FindInCone( startPos, dir, size, angle )\n\n\t-- draw the outer box\n\tlocal mins = Vector( -size, -size, -size )\n\tlocal maxs = Vector( size, size, size )\n\n\trender.SetMaterial( mat )\n\trender.DrawWireframeBox( startPos, Angle( 0, 0, 0 ), mins, maxs, color_white, true )\n\trender.DrawBox( startPos, Angle( 0, 0, 0 ), -mins, -maxs, color_white )\n\n\t-- draw the lines\n\tfor id, ent in pairs( entities ) do\n\t\trender.DrawLine( ent:WorldSpaceCenter() - dir * ( ent:WorldSpaceCenter()-startPos ):Length(), ent:WorldSpaceCenter(), Color( 255, 0, 0 ) )\n\tend\nend )","description":"An example usage of this function. This example shows which entities are being returned by the function with red lines and the range with white transparent box."}],"isConstructor":false,"name":"FindInCone","realm":"shared","returns":[{"description":"A table of all found {{Type|Entity}}s.","type":"Entity[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"{{Type|Entity}} or {{Type|Vector}} to find entities within the PVS of. If a player is given, this function will use the player's view entity.","isOptional":false,"isVarArg":false,"name":"viewPoint","type":"Entity | Vector"}],"description":"Finds all entities that lie within a [https://developer.valvesoftware.com/wiki/PVS PVS].\n\n{{Note|The function won't take in to account {{GlobalFunction|AddOriginToPVS}} and the like.}}","examples":[],"isConstructor":false,"name":"FindInPVS","realm":"server","returns":[{"description":"The found {{Type|Entity}}s.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Center of the sphere.","isOptional":false,"isVarArg":false,"name":"origin","type":"Vector"},{"default":"","description":"Radius of the sphere.","isOptional":false,"isVarArg":false,"name":"radius","type":"number"}],"description":"Gets all entities within the specified sphere.\n\n{{Note|Clientside entities will not be returned by this function.}}","examples":[],"isConstructor":false,"name":"FindInSphere","realm":"shared","returns":[{"description":"A table of all found {{Type|Entity}}s. Has a limit of 1024 entities.","type":"Entity[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the target entity.","isOptional":false,"isVarArg":false,"name":"target","type":"string"},{"default":"","description":"Activator of the event.","isOptional":false,"isVarArg":false,"name":"activator","type":"Entity"},{"default":"","description":"Caller of the event.","isOptional":false,"isVarArg":false,"name":"caller","type":"Entity"},{"default":"","description":"Use type. See the {{Enum|USE}}.","isOptional":false,"isVarArg":false,"name":"usetype","type":"USE"},{"default":"","description":"This value is passed to {{HookFunction|ENTITY|Use}}, but isn't used by any default entities in the engine.","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Fires a use event.","examples":[],"isConstructor":false,"name":"FireTargets","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns a table of all existing entities.","examples":[],"isConstructor":false,"name":"GetAll","realm":"shared","returns":[{"description":"Table of all existing {{Type|Entity}}s.","type":"Entity[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The index of the entity.","isOptional":false,"isVarArg":false,"name":"entIdx","type":"number"}],"description":"Returns an entity by its index. Same as {{GlobalFunction|Entity}}.","examples":[],"isConstructor":false,"name":"GetByIndex","realm":"shared","returns":[{"description":"The entity if it exists.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"false","description":"Include entities with the FL_KILLME flag. This will skip an internal loop, and the function will be more efficient as a byproduct.","isOptional":true,"isVarArg":false,"name":"IncludeKillMe","type":"boolean"}],"description":"Gives you the amount of currently existing entities.\nSimilar to #{{LibraryFunction|ents|GetAll}} but with much better performance.","examples":[],"isConstructor":false,"name":"GetCount","realm":"shared","returns":[{"description":"Number of entities","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of networked entities, which is limited to 8192. {{LibraryFunction|ents|Create}} will fail somewhere between 8064 and 8176 - this can vary based on the amount of existing temp ents.","examples":[],"isConstructor":false,"name":"GetEdictCount","realm":"server","returns":[{"description":"Number of networked entities","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity's creation id","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Returns entity that has given {{ClassFunction|Entity|MapCreationID}}.","examples":[],"isConstructor":false,"name":"GetMapCreatedEntity","realm":"server","returns":[{"description":"Found entity","type":"Entity"}]}],"isHook":false,"isPureAbstract":false,"name":"ents"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}The little \"+\" button used by {{Type|DProperties}} and {{Type|DTree_Node}}.","examples":[],"extends":"DButton","functions":[{"accessModifier":"public","arguments":[],"description":"Returns whether this DExpandButton is expanded or not.","examples":[],"isConstructor":false,"name":"GetExpanded","realm":"client","returns":[{"description":"True if expanded, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"True to expand ( visually will show a \"-\" )","isOptional":false,"isVarArg":false,"name":"expanded","type":"boolean"}],"description":"Sets whether this DExpandButton should be expanded or not. Only changes appearance.","examples":[],"isConstructor":false,"name":"SetExpanded","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DExpandButton"},{"classFields":[],"collectionType":"class","customConstructor":"CreateParticleSystem","description":"This object represents a .pcf ( Orange Box ) particle system. Created by {{ClassFunction|Entity|CreateParticleEffect}} and {{GlobalFunction|CreateParticleSystem}}.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The entity to attach the control point to.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The name of the effect to create. It must be precached.","isOptional":false,"isVarArg":false,"name":"effect","type":"string"},{"default":"","description":"See {{Enum|PATTACH}}.","isOptional":false,"isVarArg":false,"name":"partAttachment","type":"PATTACH"},{"default":"0","description":"The attachment ID on the entity to attach the particle system to","isOptional":true,"isVarArg":false,"name":"entAttachment","type":"number"},{"default":"Vector( 0, 0, 0 )","description":"The offset from the {{ClassFunction|Entity|GetPos}} of the entity we are attaching this CP to.","isOptional":true,"isVarArg":false,"name":"offset","type":"Vector"}],"description":"Creates a new particle system.\n\n{{Note|The particle effect must be precached with {{GlobalFunction|PrecacheParticleSystem}} and the file its from must be added via {{LibraryFunction|game|AddParticles}} before it can be used!}}","examples":[],"isConstructor":true,"name":"constructor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The control point ID, 0 to 63.","isOptional":false,"isVarArg":false,"name":"cpID","type":"number"},{"default":"","description":"The entity to attach the control point to.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"See {{Enum|PATTACH}}.","isOptional":false,"isVarArg":false,"name":"partAttachment","type":"PATTACH"},{"default":"0","description":"The attachment ID on the entity to attach the particle system to","isOptional":true,"isVarArg":false,"name":"entAttachment","type":"number"},{"default":"Vector( 0, 0, 0 )","description":"The offset from the {{ClassFunction|Entity|GetPos}} of the entity we are attaching this CP to.","isOptional":true,"isVarArg":false,"name":"offset","type":"Vector"}],"description":"Adds a control point to the particle system.\n\n{{Note|This function will not work if the {{ClassFunction|CNewParticleEffect|GetOwner}} entity is not valid}}","examples":[],"isConstructor":false,"name":"AddControlPoint","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetAutoUpdateBBox","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the name of the particle effect this system is set to emit.","examples":[],"isConstructor":false,"name":"GetEffectName","realm":"client","returns":[{"description":"The name of the particle effect.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the highest control point number for given particle system.","examples":[],"isConstructor":false,"name":"GetHighestControlPoint","realm":"client","returns":[{"description":"The highest control point number for given particle system, 0 to 63.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the owner of the particle system, the entity the particle system is attached to.","examples":[],"isConstructor":false,"name":"GetOwner","realm":"client","returns":[{"description":"The owner of the particle system.","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the particle system has finished emitting particles or not.","examples":[],"isConstructor":false,"name":"IsFinished","realm":"client","returns":[{"description":"Whether the particle system has finished emitting particles or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the particle system is valid or not.","examples":[],"isConstructor":false,"name":"IsValid","realm":"client","returns":[{"description":"Whether the particle system is valid or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the particle system is intended to be used on a view model?","examples":[],"isConstructor":false,"name":"IsViewModelEffect","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Forces the particle system to render using current rendering context.\n\nCan be used to render the particle system in vgui panels, etc.\n\nUsed in conjunction with {{ClassFunction|CNewParticleEffect|SetShouldDraw}}.","examples":[],"isConstructor":false,"name":"Render","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Forces the particle system to restart emitting particles.","examples":[],"isConstructor":false,"name":"Restart","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The control point ID, 0 to 63.","isOptional":false,"isVarArg":false,"name":"cpID","type":"number"},{"default":"","description":"The value to set for given control point.","isOptional":false,"isVarArg":false,"name":"value","type":"Vector"}],"description":"Sets a value for given control point.","examples":[],"isConstructor":false,"name":"SetControlPoint","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The child control point ID, 0 to 63.","isOptional":false,"isVarArg":false,"name":"child","type":"number"},{"default":"","description":"The parent entity to follow.","isOptional":false,"isVarArg":false,"name":"parent","type":"Entity"}],"description":"Essentially makes child control point follow the parent entity.","examples":[],"isConstructor":false,"name":"SetControlPointEntity","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The control point ID, 0 to 63.","isOptional":false,"isVarArg":false,"name":"cpID","type":"number"},{"default":"","description":"The forward direction for given control point","isOptional":false,"isVarArg":false,"name":"forward","type":"Vector"}],"description":"Sets the forward direction for given control point.","examples":[],"isConstructor":false,"name":"SetControlPointForwardVector","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The control point ID, 0 to 63.","isOptional":false,"isVarArg":false,"name":"cpID","type":"number"},{"default":"","description":"The forward direction for given control point","isOptional":false,"isVarArg":false,"name":"forward","type":"Vector"},{"default":"","description":"The right direction for given control point","isOptional":false,"isVarArg":false,"name":"right","type":"Vector"},{"default":"","description":"The up direction for given control point","isOptional":false,"isVarArg":false,"name":"up","type":"Vector"}],"description":"Sets the orientation for given control point.","examples":[],"isConstructor":false,"name":"SetControlPointOrientation","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The child control point ID, 0 to 63.","isOptional":false,"isVarArg":false,"name":"child","type":"number"},{"default":"","description":"The parent control point ID, 0 to 63.","isOptional":false,"isVarArg":false,"name":"parent","type":"number"}],"description":"Essentially makes child control point follow the parent control point.","examples":[],"isConstructor":false,"name":"SetControlPointParent","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The control point ID, 0 to 63.","isOptional":false,"isVarArg":false,"name":"cpID","type":"number"},{"default":"","description":"The right direction for given control point.","isOptional":false,"isVarArg":false,"name":"right","type":"Vector"}],"description":"Sets the right direction for given control point.","examples":[],"isConstructor":false,"name":"SetControlPointRightVector","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The control point ID, 0 to 63.","isOptional":false,"isVarArg":false,"name":"cpID","type":"number"},{"default":"","description":"The upward direction for given control point","isOptional":false,"isVarArg":false,"name":"upward","type":"Vector"}],"description":"Sets the upward direction for given control point.","examples":[],"isConstructor":false,"name":"SetControlPointUpVector","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"isViewModel","type":"boolean"}],"description":"","examples":[],"isConstructor":false,"name":"SetIsViewModelEffect","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to automatically draw the particle effect or not.","isOptional":false,"isVarArg":false,"name":"should","type":"boolean"}],"description":"Forces the particle system to stop automatically rendering.\n\nUsed in conjunction with {{ClassFunction|CNewParticleEffect|Render}}.","examples":[],"isConstructor":false,"name":"SetShouldDraw","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new sort origin.","isOptional":false,"isVarArg":false,"name":"origin","type":"Vector"}],"description":"Sets the sort origin for given particle system. This is used as a helper to determine which particles are in front of which.","examples":[],"isConstructor":false,"name":"SetSortOrigin","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"","isOptional":true,"isVarArg":false,"name":"infiniteOnly","type":"boolean"}],"description":"Starts the particle emission.","examples":[],"isConstructor":false,"name":"StartEmission","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"","isOptional":true,"isVarArg":false,"name":"infiniteOnly","type":"boolean"},{"default":"false","description":"","isOptional":true,"isVarArg":false,"name":"removeAllParticles","type":"boolean"},{"default":"false","description":"","isOptional":true,"isVarArg":false,"name":"wakeOnStop","type":"boolean"}],"description":"Stops the particle emission.","examples":[],"isConstructor":false,"name":"StopEmission","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Stops particle emission and destroys all particles instantly. Also detaches the particle effect from the entity it was attached to.\n\n{{Note|This function will work identically to {{ClassFunction|CNewParticleEffect|StopEmission}}( false, true ) if  {{ClassFunction|CNewParticleEffect|GetOwner}} entity is not valid.}}\n\nConsider using {{ClassFunction|CNewParticleEffect|StopEmission}}( false, true ) instead, which has same effect, but doesn't require owner entity, and does't detach the particle system from its entity.","examples":[],"isConstructor":false,"name":"StopEmissionAndDestroyImmediately","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"CNewParticleEffect"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The file library provides functions for finding, reading and writing to files. <br/>\nThe following path values are most commonly used:\n* “LUA” searches the lua files (in /lua/, in your gamemodes, in all the addons).\n* “GAME” searches all the mounted content (main folder, addons, mounted games etc).\n* “MOD” searches only the garrysmod folder.\n* “DATA” searches in the data folder.\nFor the full list of path values, type “path” in the console.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The file's name.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The content which should be appended to the file.","isOptional":false,"isVarArg":false,"name":"content","type":"string"}],"description":"Appends a file relative to the ''data'' folder.","examples":[{"code":"file.Append( \"helloworld.txt\", \"Append!\" )\n\nprint( file.Read( \"helloworld.txt\", \"DATA\" ) )","description":"Adds \"Append!\" to ''helloworld.txt'', then prints it."}],"isConstructor":false,"name":"Append","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The directory's name.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Creates a directory that is relative to the ''data'' folder.","examples":[{"code":"file.CreateDir(\"sample\")","description":"Creates a directory named ''sample'' in the ''data'' folder."},{"code":"file.CreateDir(\"a/b/c/d/e/f/g\")","description":"This function will create all subfolders you specify."}],"isConstructor":false,"name":"CreateDir","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The file name","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Deletes a file or ''empty'' folder that is relative to the '''data''' folder.\nYou can't remove any files outside of '''data''' folder.","examples":[{"code":"file.Delete( \"helloworld.txt\" )","description":"Deletes '''data/helloworld.txt''' file."}],"isConstructor":false,"name":"Delete","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The file or directory's name.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The path of where to look for the file.\n\n* \"GAME\" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)\n* \"LUA\" or \"lsv\" - All Lua folders (lua/) including gamesmodes and addons\n* \"DATA\" Data folder (garrysmod/data)\n* \"MOD\" Strictly the game folder (garrysmod/), ignores mounting.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"Returns a boolean of whether the file or directory exists or not.","examples":[{"code":"print( file.Exists(\"data\", \"GAME\") )","description":"Prints whether the ''data'' folder exists in the base directory."}],"isConstructor":false,"name":"Exists","realm":"shared and menu","returns":[{"description":"Returns true if the file exists and false if it is not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The wildcard to search for. \"models/*.mdl\" will list .mdl files in the models/ folder.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The path to look for the files and directories in. See [[File_Search_Paths|this list]] for a list of valid paths.","isOptional":false,"isVarArg":false,"name":"path","type":"string"},{"default":"\"nameasc\"","description":"The sorting to be used, optional.\n\n* \"nameasc\" sort the files ascending by name\n* \"namedesc\" sort the files descending by name\n* \"dateasc\" sort the files ascending by date\n* \"datedesc\" sort the files descending by date","isOptional":true,"isVarArg":false,"name":"sorting","type":"string"}],"description":"Returns a list of files and directories inside a single folder.\n\n{{Bug|Issue=3437|This will have undefined results if a path contains 3+ slashes.}}","examples":[{"code":"local files, directories = file.Find(\"*\", \"DATA\")\n\nprint( \"File: \" .. files[1], \"Folder: \" .. directories[1] )","description":"Prints the first file and the first directory in the ''data'' folder."}],"isConstructor":false,"name":"Find","realm":"shared and menu","returns":[{"description":"A table of found files, or nil if the path is invalid","type":"table"},{"description":"A table of found directories, or nil if the path is invalid","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The file or directory's name.","isOptional":false,"isVarArg":false,"name":"fileName","type":"string"},{"default":"","description":"The path type.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"Returns whether the given file is a directory or not.","examples":[{"code":"print( file.IsDir(\"helloworld.txt\", \"DATA\") )","description":"Prints if ''helloworld.txt'' is a directory."}],"isConstructor":false,"name":"IsDir","realm":"shared and menu","returns":[{"description":"True if the given path is a directory or false if it is a file.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The files name. See {{LibraryFunction|file|Write}} for details on filename restrictions when writing to files.","isOptional":false,"isVarArg":false,"name":"fileName","type":"string"},{"default":"","description":"The mode to open the file in. Possible values are:\n* '''r''' - read mode\n* '''w''' - write mode\n* '''a''' - append mode\n\n* '''rb''' - binary read mode\n* '''wb''' - binary write mode\n* '''ab''' - binary append mode","isOptional":false,"isVarArg":false,"name":"fileMode","type":"string"},{"default":"","description":"The path type.\n\n* \"GAME\" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)\n* \"LUA\" or \"lsv\" - All Lua folders (lua/) including gamesmodes and addons\n* \"DATA\" Data folder (garrysmod/data)\n* \"MOD\" Strictly the game folder (garrysmod/), ignores mounting.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"Attempts to open a file with the given mode.","examples":[],"isConstructor":false,"name":"Open","realm":"shared and menu","returns":[{"description":"The opened file object, or nil if it failed to open due to it not existing or being used by another process.","type":"File"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the file.","isOptional":false,"isVarArg":false,"name":"fileName","type":"string"},{"default":"\"DATA\"","description":"The path used to look up the file.\n* \"GAME\" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)\n* \"LUA\" or \"lsv\" - All Lua folders (lua/) including gamesmodes and addons\n* \"DATA\" Data folder (garrysmod/data)\n* \"MOD\" Strictly the game folder (garrysmod/), ignores mounting.\n\nIt can also be a boolean:\n* true = \"GAME\"\n* false = \"DATA\"","isOptional":true,"isVarArg":false,"name":"path","type":"string"}],"description":"Returns the content of a file.\n\nBeware of casing -- some filesystems are case-sensitive. SRCDS on Linux seems to force file/directory creation to lowercase, but will not modify read operations.","examples":[{"code":"print( file.Read(\"helloworld.txt\", \"DATA\") )","description":"Prints out the content of ''helloworld.txt''."}],"isConstructor":false,"name":"Read","realm":"shared and menu","returns":[{"description":"The data from the file as a string, or nil if the file isn't found","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The original file or folder name. See {{LibraryFunction|file|Write}} for details on filename restrictions when writing to files.","isOptional":false,"isVarArg":false,"name":"orignalFileName","type":"string"},{"default":"","description":"The target file or folder name. See {{LibraryFunction|file|Write}} for details on filename restrictions when writing to files.","isOptional":false,"isVarArg":false,"name":"targetFileName","type":"string"}],"description":"Attempts to rename a file with the given name to another given name.\n\nThis function is constrained to the data/ folder.","examples":[],"isConstructor":false,"name":"Rename","realm":"shared","returns":[{"description":"True on success, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The file's name.","isOptional":false,"isVarArg":false,"name":"fileName","type":"string"},{"default":"","description":"The path type.\n\n* \"GAME\" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)\n* \"LUA\" or \"lsv\" - All Lua folders (lua/) including gamesmodes and addons\n* \"DATA\" Data folder (garrysmod/data)\n* \"MOD\" Strictly the game folder (garrysmod/), ignores mounting.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"Returns the file's size in bytes. If the file is not found, returns -1.","examples":[{"code":"print( file.Size(\"helloworld.txt\", \"DATA\") )","description":"Prints the size of ''helloworld.txt''."}],"isConstructor":false,"name":"Size","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The '''file''' or '''folder''' path.","isOptional":false,"isVarArg":false,"name":"path","type":"string"},{"default":"","description":"The game path to be used.\n\n* \"GAME\" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)\n* \"LUA\" or \"lsv\" - All Lua folders (lua/) including gamesmodes and addons\n* \"DATA\" Data folder (garrysmod/data)\n* \"MOD\" Strictly the game folder (garrysmod/), ignores mounting.","isOptional":false,"isVarArg":false,"name":"gamePath","type":"string"}],"description":"Returns when the file or folder was lasted modified in Unix time.","examples":[{"code":"print( os.date(\"%d.%m.%Y\", file.Time(\"helloworld.txt\", \"DATA\") ) )","description":"Prints out the last modified date of '''file''' helloworld.txt"},{"code":"print( os.date( \"%d.%m.%Y\", file.Time( \"lua\", \"GAME\" ) ) )","description":"Prints out the last modified date of '''folder''' lua"}],"isConstructor":false,"name":"Time","realm":"shared and menu","returns":[{"description":"Seconds passed since Unix epoch.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the file being written into.\n\nThe filename '''must''' end with \".txt\", \".jpg\", \".png\", \".vtf\" or \".dat\" and the path is relative to the '''data/''' folder.\nRestricted symbols are: '''\" :'''","isOptional":false,"isVarArg":false,"name":"fileName","type":"string"},{"default":"","description":"The content that will be written into the file.","isOptional":false,"isVarArg":false,"name":"content","type":"string"}],"description":"Writes the given string to a file. Erases all previous data in the file. To add data without deleting previous data, use {{LibraryFunction|file|Append}}.\n\nIt is recommended to write only to lowercase file paths and names because some filesystems are case-sensitive. The Linux build of SRCDS seems to auto-lower directory and file names on write, but not on read.","examples":[{"code":"file.Write( \"helloworld.txt\", \"This is the content!\" )","description":"Writes to '''data/helloworld.txt'''."}],"isConstructor":false,"name":"Write","realm":"shared and menu","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"file"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Hooks that are available for all gamemodes based on base gamemode.\n\nSee also: {{Struct|GM}}","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Entity that receives the input","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The input name","isOptional":false,"isVarArg":false,"name":"input","type":"string"},{"default":"","description":"Activator of the input","isOptional":false,"isVarArg":false,"name":"activator","type":"Entity"},{"default":"","description":"Caller of the input","isOptional":false,"isVarArg":false,"name":"caller","type":"Entity"},{"default":"","description":"Data provided with the input","isOptional":false,"isVarArg":false,"name":"value","type":"any"}],"description":"Called when a map I/O event occurs.","examples":[{"code":"hook.Add( \"AcceptInput\", \"BlockLuaRun\", function( ent, name, activator, caller, data )\n    if ( ent:GetClass() == \"lua_run\" ) then\n        return true\n    end\nend )","description":"This would block any input that the lua_run entity would receive."}],"isConstructor":false,"name":"AcceptInput","realm":"server","returns":[{"description":"Return true to prevent this input from being processed.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the attacker","isOptional":false,"isVarArg":false,"name":"attacker","type":"string"},{"default":"","description":"The team of the attacker","isOptional":false,"isVarArg":false,"name":"attackerTeam","type":"number"},{"default":"","description":"Class name of the entity inflicting the damage","isOptional":false,"isVarArg":false,"name":"inflictor","type":"string"},{"default":"","description":"Name of the victim","isOptional":false,"isVarArg":false,"name":"victim","type":"string"},{"default":"","description":"Team of the victim","isOptional":false,"isVarArg":false,"name":"victimTeam","type":"number"}],"description":"Adds a death notice entry.\n\n{{Bug|Pull=1380|Issue=2611|You cannot use {{LibraryFunction|hook|Add}} on this hook yet.}}","examples":[{"code":"local ply = Entity(1)\nGAMEMODE:AddDeathNotice( ply:GetName(), ply:Team(), nil, ply:GetName(), ply:Team() )","description":"Shows a suicide death notice in Sandbox."}],"isConstructor":false,"name":"AddDeathNotice","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The old sensitivity\n\nIn general it will be 0, which is equivalent to a sensitivity of 1.","isOptional":false,"isVarArg":false,"name":"defaultSensitivity","type":"number"}],"description":"Allows you to adjust the mouse sensitivity.","examples":[],"isConstructor":false,"name":"AdjustMouseSensitivity","realm":"client","returns":[{"description":"A fraction of the normal sensitivity (0.5 would be half as sensitive), return -1 to not override.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player trying to pick up something.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The Entity the player attempted to pick up.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called when a player tries to pick up something using the \"use\" key, return to override.\n\nSee {{HookFunction|GM|GravGunPickupAllowed}} for the Gravity Gun pickup variant.","examples":[{"code":"local function up( ply, ent )\n    return ply:IsAdmin()\nend\nhook.Add( \"AllowPlayerPickup\", \"some_unique_name\", up )","description":"Allows only admins to pick up things"}],"isConstructor":false,"name":"AllowPlayerPickup","realm":"server","returns":[{"description":"Allow the player to pick up the entity or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player to apply the animation.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The velocity of the player.","isOptional":false,"isVarArg":false,"name":"vel","type":"Vector"}],"description":"This hook is used to calculate animations for a player.\n\n{{Warning|This hook must return the same values at the same time on both, client '''and''' server. On client for players to see the animations, on server for hit detection to work properly.}}\n{{Bug|Issue=3322|This can return the incorrect velocity when on a moving object.}}","examples":[],"isConstructor":false,"name":"CalcMainActivity","realm":"shared","returns":[{"description":"{{Enum|ACT}} for the activity the player should use. A nil return will be treated as ACT_INVALID.","type":"ACT"},{"description":"Sequence for the player to use. This takes precedence over the activity (the activity is still used for layering). Return -1 or nil to let the activity determine the sequence.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The vehicle the player is driving","isOptional":false,"isVarArg":false,"name":"veh","type":"Vehicle"},{"default":"","description":"The vehicle driver","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The view data containing players FOV, view position and angles, see {{Struct|CamData}}","isOptional":false,"isVarArg":false,"name":"view","type":"CamData"}],"description":"Called from {{HookFunction|GM|CalcView}} when player is in driving a vehicle.\n\nThis hook may not be called in gamemodes that override {{HookFunction|GM|CalcView}}.","examples":[],"isConstructor":false,"name":"CalcVehicleView","realm":"client","returns":[{"description":"The modified view table containing new values, see {{Struct|CamData}}","type":"CamData"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The local player.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The player's view position.","isOptional":false,"isVarArg":false,"name":"origin","type":"Vector"},{"default":"","description":"The player's view angles.","isOptional":false,"isVarArg":false,"name":"angles","type":"Angle"},{"default":"","description":"Field of view.","isOptional":false,"isVarArg":false,"name":"fov","type":"number"},{"default":"","description":"Distance to near clipping plane.","isOptional":false,"isVarArg":false,"name":"znear","type":"number"},{"default":"","description":"Distance to far clipping plane.","isOptional":false,"isVarArg":false,"name":"zfar","type":"number"}],"description":"Allows override of the default view.","examples":[{"code":"local function MyCalcView(ply, pos, angles, fov)\n    local view = {}\n    view.origin = pos-(angles:Forward()*100)\n    view.angles = angles\n    view.fov = fov\n    view.drawviewer = true\n \n    return view\nend\n \nhook.Add( \"CalcView\", \"MyCalcView\", MyCalcView )","description":"Draws the LocalPlayer and sets the view behind."}],"isConstructor":false,"name":"CalcView","realm":"client","returns":[{"description":"View data table. See {{Struct|CamData}}","type":"CamData"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The weapon entity","isOptional":false,"isVarArg":false,"name":"wep","type":"Weapon"},{"default":"","description":"The viewmodel entity","isOptional":false,"isVarArg":false,"name":"vm","type":"Entity"},{"default":"","description":"Original position (before viewmodel bobbing and swaying)","isOptional":false,"isVarArg":false,"name":"oldPos","type":"Vector"},{"default":"","description":"Original angle (before viewmodel bobbing and swaying)","isOptional":false,"isVarArg":false,"name":"oldAng","type":"Angle"},{"default":"","description":"Current position","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"Current angle","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"Allows overriding the position and angle of the viewmodel.","examples":[],"isConstructor":false,"name":"CalcViewModelView","realm":"client","returns":[{"description":"New position","type":"Vector"},{"description":"New angle","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity being edited","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The player doing the editing","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The name of the variable","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"","description":"The new value, as a string which will later be converted to its appropriate type","isOptional":false,"isVarArg":false,"name":"val","type":"string"},{"default":"","description":"The edit table defined in {{ClassFunction|Entity|NetworkVar}}","isOptional":false,"isVarArg":false,"name":"editor","type":"table"}],"description":"Called when a variable is edited on an Entity (called by Edit Properties... menu), to determine if the edit should be permitted.\n\nSee [[Editable_Entities|Editable entities]] for more details about the system.","examples":[{"code":"function GM:CanEditVariable( ent, ply, key, val, editor )\n    return ply:IsAdmin()\nend","description":"From base/gamemode/variable_edit.lua<br/>\nMakes \"Edit Properties...\" right click property admin only"}],"isConstructor":false,"name":"CanEditVariable","realm":"server","returns":[{"description":"Return true to allow editing","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The vehicle entity","isOptional":false,"isVarArg":false,"name":"veh","type":"Vehicle"},{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Determines if the player can exit the vehicle.","examples":[{"code":"function GM:CanExitVehicle(veh, ply)\n    return (veh:GetVelocity() == Vector(0,0,0))\nend","description":"Only lets player exit vehicle if it is not in motion."}],"isConstructor":false,"name":"CanExitVehicle","realm":"server","returns":[{"description":"True if the player can exit the vehicle.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"player","type":"Player"},{"default":"","description":"The vehicle","isOptional":false,"isVarArg":false,"name":"vehicle","type":"Vehicle"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"role","type":"number"}],"description":"Determines whether or not the player can enter the vehicle.\n\nCalled just before {{HookFunction|GM|PlayerEnteredVehicle}}.","examples":[],"isConstructor":false,"name":"CanPlayerEnterVehicle","realm":"server","returns":[{"description":"False if the player is not allowed to enter the vehicle.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"player","type":"Player"}],"description":"Determines if the player can kill themselves using the concommands \"kill\" or \"explode\".","examples":[{"code":"function GM:CanPlayerSuicide( ply )\n\treturn ply:IsSuperAdmin()\nend","description":"Makes suiciding only accessible for super admins."}],"isConstructor":false,"name":"CanPlayerSuicide","realm":"server","returns":[{"description":"True if they can suicide.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"player","type":"Player"},{"default":"","description":"The entity","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"},{"default":"","description":"The physics object of the entity","isOptional":false,"isVarArg":false,"name":"phys","type":"PhysObj"}],"description":"Determines if the player can unfreeze the entity.","examples":[],"isConstructor":false,"name":"CanPlayerUnfreeze","realm":"server","returns":[{"description":"True if they can unfreeze.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called each frame to record demos to video using {{Type|IVideoWriter}}. \n\n{{Note|This hook is called every frame regardless of whether or not a demo is being recorded}}","examples":[],"isConstructor":false,"name":"CaptureVideo","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The index of the player.","isOptional":false,"isVarArg":false,"name":"index","type":"number"},{"default":"","description":"The name of the player.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The text that is being sent.","isOptional":false,"isVarArg":false,"name":"text","type":"string"},{"default":"","description":"Chat filter type. Possible values are:\n* joinleave - Player join and leave messages\n* namechange - Player name change messages\n* servermsg - Server messages such as convar changes\n* teamchange - Team changes?\n* chat - (Obsolete?) Player chat?\n* none - A fallback value","isOptional":false,"isVarArg":false,"name":"type","type":"string"}],"description":"Called when a message is printed to the chat box. Note, that this isn't working with player messages even though there are arguments for it.\n\nFor player messages see {{HookFunction|GM|PlayerSay}} and {{HookFunction|GM|OnPlayerChat}}","examples":[{"code":"hook.Add( \"ChatText\", \"hide_joinleave\", function( index, name, text, typ )\n\tif ( typ == \"joinleave\" ) then return true end\nend )","description":"Hides default join and leave messages in chat."}],"isConstructor":false,"name":"ChatText","realm":"client","returns":[{"description":"Return true to suppress the chat message","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The new contents of the input box","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Called whenever the content of the user's chat input box is changed.","examples":[],"isConstructor":false,"name":"ChatTextChanged","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The 64bit Steam ID of the joining player, use {{LibraryFunction|util|SteamIDFrom64}} to convert it to a \"STEAM_0:\" one.","isOptional":false,"isVarArg":false,"name":"steamID64","type":"string"},{"default":"","description":"The IP of the connecting client","isOptional":false,"isVarArg":false,"name":"ipAddress","type":"string"},{"default":"","description":"The current value of sv_password (the password set by the server)","isOptional":false,"isVarArg":false,"name":"svPassword","type":"string"},{"default":"","description":"The password provided by the client","isOptional":false,"isVarArg":false,"name":"clPassword","type":"string"},{"default":"","description":"The name of the joining player","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Called when a non local player connects to allow the Lua system to check the password.\n\nThe default behaviour in the base gamemodes emulates what would normally happen. If sv_password is set and its value matches the password passed in by the client - then they are allowed to join. If it isn't set it lets them in too.","examples":[{"code":"local allowed = {\n\t[\"76561198012345678\"] = true, -- Me\n\t[\"76561198123456789\"] = true, -- Friend #1\n\t[\"76561198234567890\"] = true, -- Friend #2\n}\n\nhook.Add( \"CheckPassword\", \"access_whitelist\", function( steamID64 )\n\tif not allowed[steamID64] then\n\t\treturn false, \"#GameUI_ServerRejectLANRestrict\"\n\tend\nend )","description":"A user access whitelist to the server\n\nAvailable pre-defined messages can be found in ''../sourceengine/resource/gameui_english.txt'' files.\n\nSuggested messages are ''#GameUI_ConnectionFailed'' and ''#GameUI_ServerRejectLANRestrict''"}],"isConstructor":false,"name":"CheckPassword","realm":"server","returns":[{"description":"If the hook returns false then the player is disconnected","type":"boolean"},{"description":"If returning false in the first argument, then this should be the disconnect message. This will default to \"#GameUI_ServerRejectBadPassword\", which is \"Bad Password.\" translated to the client's language.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Called when derma menus are closed with {{GlobalFunction|CloseDermaMenus}}.","examples":[],"isConstructor":false,"name":"CloseDermaMenus","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The Entity that created the ragdoll","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"},{"default":"","description":"The ragdoll being created.","isOptional":false,"isVarArg":false,"name":"ragdoll","type":"Entity"}],"description":"Called whenever an entity becomes a clientside ragdoll.\n\nSee {{HookFunction|GM|CreateEntityRagdoll}} for serverside ragdolls.","examples":[{"code":"hook.Add( \"CreateClientsideRagdoll\", \"fade_out_corpses\", function( entity, ragdoll )\n\n\tragdoll:SetSaveValue( \"m_bFadingOut\", true ) -- Set the magic internal variable that will cause the ragdoll to immediately start fading out\n\nend )","description":"A way of fade out a ragdoll easily. Idea from [https://github.com/ValveSoftware/source-sdk-2013/blob/0d8dceea4310fde5706b3ce1c70609d72a38efdf/mp/src/game/client/c_baseanimating.cpp#L533 here]."}],"isConstructor":false,"name":"CreateClientsideRagdoll","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity that owns the ragdoll","isOptional":false,"isVarArg":false,"name":"owner","type":"Entity"},{"default":"","description":"The ragdoll entity","isOptional":false,"isVarArg":false,"name":"ragdoll","type":"Entity"}],"description":"Called when a serverside ragdoll of an entity has been created.\n\nSee {{HookFunction|GM|CreateClientsideRagdoll}} for clientside ragdolls.","examples":[],"isConstructor":false,"name":"CreateEntityRagdoll","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The User Command data","isOptional":false,"isVarArg":false,"name":"cmd","type":"CUserCmd"}],"description":"Allows you to change the players movements before they're sent to the server.\n\n{{Note|Due to this hook being clientside only, it could be overridden by the user allowing them to completely skip your logic, it is recommended to use {{HookFunction|GM|StartCommand}} in a shared file instead.}}","examples":[],"isConstructor":false,"name":"CreateMove","realm":"client","returns":[{"description":"Return true to:\n* Disable Sandbox C menu \"screen clicking\"\n* Disable Teammate nocollide (verification required)\n* Prevent calling of C_BaseHLPlayer::CreateMove & subsequently C_BasePlayer::CreateMove","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Teams are created within this hook using {{LibraryFunction|team|SetUp}}.\n\n{{Note|This hook is called before {{HookFunction|GM|PreGamemodeLoaded}}.}}","examples":[],"isConstructor":false,"name":"CreateTeams","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who is being animated","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Animation event. See {{Enum|PLAYERANIMEVENT}}","isOptional":false,"isVarArg":false,"name":"event","type":"PLAYERANIMEVENT"},{"default":"0","description":"The data for the event. This is interpreted as an {{Enum|ACT}} by PLAYERANIMEVENT_CUSTOM and PLAYERANIMEVENT_CUSTOM_GESTURE, or a sequence by PLAYERANIMEVENT_CUSTOM_SEQUENCE.","isOptional":true,"isVarArg":false,"name":"data","type":"ACT"}],"description":"Called upon an animation event, this is the ideal place to call player animation functions such as {{ClassFunction|Player|AddVCDSequenceToGestureSlot}}, {{ClassFunction|Player|AnimRestartGesture}} and so on.","examples":[{"code":"function SWEP:PrimaryAttack()\n\tself.Owner:DoCustomAnimEvent( PLAYERANIMEVENT_ATTACK_GRENADE , 123 )\n\tself:SetNextPrimaryFire(CurTime() + 0.5 )\n\tself:SetNextSecondaryFire(CurTime() + 0.5 )\nend\n\nfunction SWEP:SecondaryAttack()\n\tself.Owner:DoCustomAnimEvent( PLAYERANIMEVENT_ATTACK_GRENADE , 321 )\n\tself:SetNextPrimaryFire(CurTime() + 0.5 )\n\tself:SetNextSecondaryFire(CurTime() + 0.5 )\nend\n\nhook.Add(\"DoAnimationEvent\" , \"AnimEventTest\" , function( ply , event , data )\n\tif event == PLAYERANIMEVENT_ATTACK_GRENADE then\n\t\tif data == 123 then\n\t\t\tply:AnimRestartGesture( GESTURE_SLOT_GRENADE, ACT_GMOD_GESTURE_ITEM_THROW, true )\n\t\t\treturn ACT_INVALID\n\t\tend\n\t\t\n\t\tif data == 321 then\n\t\t\tply:AnimRestartGesture( GESTURE_SLOT_GRENADE, ACT_GMOD_GESTURE_ITEM_DROP, true )\n\t\t\treturn ACT_INVALID\n\t\tend\n\tend\nend)","description":"Fires a custom animation event with PLAYERANIMEVENT_ATTACK_GRENADE as the event, and 123 as the extra data on primary attack, and 321 as the secondary attack.\nThe player will play the item throw gesture on the primary attack, and the drop one on secondary."}],"isConstructor":false,"name":"DoAnimationEvent","realm":"shared","returns":[{"description":"The translated activity to send to the weapon. See {{Enum|ACT}}. Return ACT_INVALID if you don't want to send an activity.","type":"ACT"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The entity that killed the player","isOptional":false,"isVarArg":false,"name":"attacker","type":"Entity"},{"default":"","description":"Damage info","isOptional":false,"isVarArg":false,"name":"dmg","type":"CTakeDamageInfo"}],"description":"Handles the player's death.\n\nThis hook is '''not''' called if the player is killed by {{ClassFunction|Player|KillSilent}}. See {{HookFunction|GM|PlayerSilentDeath}} for that.\n\n* {{HookFunction|GM|PlayerDeath}} is called after this hook\n* {{HookFunction|GM|PostPlayerDeath}} is called after that\n<br>\n{{Note|{{ClassFunction|Player|Alive}} returns true when this is called}}","examples":[],"isConstructor":false,"name":"DoPlayerDeath","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"X position to draw death notices as a ratio","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"Y position to draw death notices as a ratio","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"This hook is called every frame to draw all of the current death notices.","examples":[],"isConstructor":false,"name":"DrawDeathNotice","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called every frame before drawing the in-game monitors ( Breencast, in-game TVs, etc ), but doesn't seem to be doing anything, trying to render 2D or 3D elements fail.\n[[Category:Render Hooks]]","examples":[],"isConstructor":false,"name":"DrawMonitors","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called after all other 2D draw hooks are called. Draws over all VGUI Panels and HUDs.\n\nUnlike {{HookFunction|GM|HUDPaint}}, this hook is called with the game paused and while the Camera SWEP is equipped.\n\n{{Note|Only be called when r_drawvgui is enabled}}\n{{RenderingContext|Hook|2D}}","examples":[],"isConstructor":false,"name":"DrawOverlay","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Physgun owner","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The physgun","isOptional":false,"isVarArg":false,"name":"physgun","type":"Weapon"},{"default":"","description":"Is the beam enabled","isOptional":false,"isVarArg":false,"name":"enabled","type":"boolean"},{"default":"","description":"Entity we are grabbing. This will be NULL if nothing is being held","isOptional":false,"isVarArg":false,"name":"target","type":"Entity"},{"default":"","description":"ID of the physics bone ({{Type|PhysObj}}) we are grabbing at. Use {{ClassFunction|Entity|TranslatePhysBoneToBone}} to translate to an actual bone.","isOptional":false,"isVarArg":false,"name":"physBone","type":"number"},{"default":"","description":"Beam hit position relative to the physics bone ({{Type|PhysObj}}) we are grabbing.","isOptional":false,"isVarArg":false,"name":"hitPos","type":"PhysObj"}],"description":"Allows you to override physgun beam drawing.\n\n{{Bug|Issue=3294|This is still called when physgun_drawbeams is disabled.}}","examples":[{"code":"hook.Add( \"DrawPhysgunBeam\", \"test\", function( ply, wep, enabled, target, bone, deltaPos )\n\n\t-- Draw any physgun effects here that are not the beam.\n\n\t-- Not \"firing\" the physgun? Don't draw anything.\n\tif ( !enabled ) then return false end\n\n\tlocal clr = Color( 255, 0, 0 )\n\n\t-- White when not \"firing\" physgun, this will not work with the \"if\" above\n\tif ( !enabled ) then clr = Color( 255, 255, 255, 255 ) end\n\n\tlocal hitpos = ply:GetEyeTrace().HitPos\n\tif ( IsValid( target ) ) then\n\t\tlocal mt = target:GetBoneMatrix( bone )\n\t\tif ( target:TranslatePhysBoneToBone( bone ) >= 0 ) then\n\t\t\tmt = target:GetBoneMatrix( target:TranslatePhysBoneToBone( bone ) )\n\t\tend\n\n\t\thitpos = LocalToWorld( deltaPos, Angle( 0, 0, 0 ), mt:GetTranslation(), mt:GetAngles() )\n\tend\n\n\tlocal srcPos = wep:GetAttachment( 1 ).Pos\n\tif ( !ply:ShouldDrawLocalPlayer() ) then\n\t\tsrcPos = ply:GetViewModel():GetAttachment( 1 ).Pos\n\tend\n\n\trender.DrawLine( srcPos, hitpos, clr )\n\n\treturn false -- Hide original physics gun beam\n\nend )","description":"Example code that will draw a direct line from the physgun to the target."}],"isConstructor":false,"name":"DrawPhysgunBeam","realm":"client","returns":[{"description":"Return false to hide default beam","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity being driven","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The player driving the entity","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called right before an entity stops driving. Overriding this hook will cause it to not call {{LibraryFunction|drive|End}} and the player will not stop driving.","examples":[],"isConstructor":false,"name":"EndEntityDriving","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Information about the played sound. Changes done to this table can be applied by returning true from this hook.<br/>See {{Struct|EmitSoundInfo}}.","isOptional":false,"isVarArg":false,"name":"data","type":"EmitSoundInfo"}],"description":"Called whenever a sound has been played. This will not be called clientside if the server played the sound without the client also calling {{ClassFunction|Entity|EmitSound}}.\n\n{{Bug|Issue=1021|This is not called for scripted sequences.}}","examples":[{"code":"hook.Add( \"EntityEmitSound\", \"TimeWarpSounds\", function( t )\n\t\n\tlocal p = t.Pitch\n\t\n\tif ( game.GetTimeScale() != 1 ) then\n\t\tp = p * game.GetTimeScale()\n\tend\n\t\n\tif ( GetConVarNumber( \"host_timescale\" ) != 1 && GetConVarNumber( \"sv_cheats\" ) >= 1 ) then\n\t\tp = p * GetConVarNumber( \"host_timescale\" )\n\tend\n\t\n\tif ( p != t.Pitch ) then\n\t\tt.Pitch = math.Clamp( p, 0, 255 )\n\t\treturn true\n\tend\n\t\n\tif ( CLIENT && engine.GetDemoPlaybackTimeScale() != 1 ) then\n\t\tt.Pitch = math.Clamp( t.Pitch * engine.GetDemoPlaybackTimeScale(), 0, 255 )\n\t\treturn true\n\tend\n\t\nend )","description":"Slows down all sounds to reflect {{LibraryFunction|game|SetTimeScale}}."}],"isConstructor":false,"name":"EntityEmitSound","realm":"shared","returns":[{"description":"Return true to apply all changes done to the data table.<br/>Return false to prevent the sound from playing.<br/>Return nil or nothing to play the sound without altering it.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity that fired the bullet","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The bullet data. See {{Struct|Bullet}}","isOptional":false,"isVarArg":false,"name":"data","type":"Bullet"}],"description":"Called every time a bullet is fired from an entity.\n\n{{Warning|This hook is called directly from {{ClassFunction|Entity|FireBullets}}. Due to this, you cannot call {{ClassFunction|Entity|FireBullets}} inside this hook or an infinite loop will occur crashing the game.}}","examples":[],"isConstructor":false,"name":"EntityFireBullets","realm":"shared","returns":[{"description":"Return true to apply all changes done to the bullet table.<br/>Return false to suppress the bullet.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity that the keyvalue is being set on","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"Key of the key/value pair","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"","description":"Value of the key/value pair","isOptional":false,"isVarArg":false,"name":"value","type":"string"}],"description":"Called when a key-value pair is set on an entity, either by the engine (for example when map spawns) or {{ClassFunction|Entity|SetKeyValue}}.\n\nSee {{HookFunction|ENTITY|KeyValue}} for a hook that works for scripted entities.<br/>\nSee {{HookFunction|WEAPON|KeyValue}} for a hook that works for scripted weapons.","examples":[],"isConstructor":false,"name":"EntityKeyValue","realm":"shared","returns":[{"description":"If set, the value of the key-value pair will be overridden by this string.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The owner entity of changed NWVar","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The name if changed NWVar","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The old value of the NWVar","isOptional":false,"isVarArg":false,"name":"oldval","type":"any"},{"default":"","description":"The new value of the NWVar","isOptional":false,"isVarArg":false,"name":"newval","type":"any"}],"description":"Called when an NWVar is changed.\n\n{{Note|Currently this hook only works for the NW2Var system (accessed by adding a 2 in between NW and Var for most NWVar functions), which will replace the original one at some point in the future}}\n{{Note|This hook is fired before the client value is actually changed. Calling the GetNW function for the specified variable name within this hook will return the old value, not the current/updated one.}}","examples":[{"code":"hook.Add(\"EntityNetworkedVarChanged\",\"printchange\", print )\n\n-- Trigger a change!\nEntity(1):SetNWString( \"UserGroup\", \"owner\" )","description":"Example usage of the hook. Prints out all NWVar changes."}],"isConstructor":false,"name":"EntityNetworkedVarChanged","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity being removed","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called right before the removal of an entity.","examples":[],"isConstructor":false,"name":"EntityRemoved","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity taking damage","isOptional":false,"isVarArg":false,"name":"target","type":"Entity"},{"default":"","description":"Damage info","isOptional":false,"isVarArg":false,"name":"dmg","type":"CTakeDamageInfo"}],"description":"Called when an entity takes damage. You can modify all parts of the damage info in this hook.","examples":[{"code":"function GM:EntityTakeDamage( target, dmginfo )\n\n    if ( target:IsPlayer() and dmginfo:IsExplosionDamage() ) then\n \n        dmginfo:ScaleDamage( 0.5 ) // Damage is now half of what you would normally take.\n\n    end\n\nend","description":"Explosion damage is reduced to players only."},{"code":"function GM:EntityTakeDamage( target, dmginfo )\n\n    if ( target:IsVehicle() ) then\n \n        local ply = target:GetDriver()\n        if ( IsValid(ply) && dmginfo:GetDamage() > 1 ) then\n            dmginfo:SetDamage(dmginfo:GetDamage() / 2)\n            ply:TakeDamageInfo(dmginfo)\n            dmginfo:SetDamage(0)\n        \n        end\n\n    end\n\nend","description":"Players in vehicles takes halved damage."}],"isConstructor":false,"name":"EntityTakeDamage","realm":"server","returns":[{"description":"Return true to completely block the damage event","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who initiated the use action.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The entity that was chosen by the engine.","isOptional":false,"isVarArg":false,"name":"defaultEnt","type":"Entity"}],"description":"This hook polls the entity the player use action should be applied to. The default behavior of this hook is on [https://github.com/ValveSoftware/source-sdk-2013/blob/0d8dceea4310fde5706b3ce1c70609d72a38efdf/mp/src/game/shared/baseplayer_shared.cpp#L1068-L1270 CBasePlayer::FindUseEntity()].","examples":[],"isConstructor":false,"name":"FindUseEntity","realm":"shared","returns":[{"description":"The entity to use instead of default entity","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Runs when user cancels/finishes typing.","examples":[{"code":"hook.Add( \"FinishChat\", \"ClientFinishTyping\", function()\n\tprint( \"User has closed the chatbox.\" )\nend)","description":"Prints \"User has closed the chatbox.\" when player closes their chat or sends the message."}],"isConstructor":false,"name":"FinishChat","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Movement data","isOptional":false,"isVarArg":false,"name":"mv","type":"CMoveData"}],"description":"Called after {{HookFunction|GM|Move}} , applies all the changes from the {{Type|CMoveData}} to the player.","examples":[],"isConstructor":false,"name":"FinishMove","realm":"shared","returns":[{"description":"Return true to suppress default engine behavior, i.e. declare that you have already moved the player according to the move data in a custom way.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called to allow override of the default Derma skin for all panels.\n\n{{Note|This hook is only called on Lua start up, changing its value (or adding new hooks) after it has been already called will not have any effect.}}","examples":[{"code":"hook.Add( \"ForceDermaSkin\", \"my_new_skin\", function()\n\treturn \"some_skin\"\nend )","description":"Example on how to use this hook. This will make that all panels"}],"isConstructor":false,"name":"ForceDermaSkin","realm":"client","returns":[{"description":"A '''case sensitive''' Derma skin name to be used as default, registered previously via {{LibraryFunction|derma|DefineSkin}}.<br/>\nReturning nothing, nil or invalid name will make it fallback to the \"Default\" skin.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Called to refresh menu content once it has initialized or something has been mounted.","examples":[],"isConstructor":false,"name":"GameContentChanged","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The fall speed","isOptional":false,"isVarArg":false,"name":"speed","type":"number"}],"description":"Called when a player takes damage from falling, allows to override the damage.","examples":[{"code":"function GM:GetFallDamage( ply, speed )\n    return ( speed / 8 )\nend","description":"The player takes a realistic amount of damage when they fall. Fall damage becomes the fall speed divided by 8."},{"code":"function GM:GetFallDamage( ply, speed )\n\treturn math.max( 0, math.ceil( 0.2418*speed - 141.75 ) )\nend","description":"Closely approximates the Counter-Strike: Source fall damage."}],"isConstructor":false,"name":"GetFallDamage","realm":"server","returns":[{"description":"New fall damage","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Called when the game(server) needs to update the text shown in the server browser as the gamemode.","examples":[],"isConstructor":false,"name":"GetGameDescription","realm":"shared","returns":[{"description":"The text to be shown in the server browser as the gamemode","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The amount of horizontal blur.","isOptional":false,"isVarArg":false,"name":"horizontal","type":"number"},{"default":"","description":"The amount of vertical  blur.","isOptional":false,"isVarArg":false,"name":"vertical","type":"number"},{"default":"","description":"The amount of forward/radial blur.","isOptional":false,"isVarArg":false,"name":"forward","type":"number"},{"default":"","description":"The amount of rotational blur.","isOptional":false,"isVarArg":false,"name":"rotational","type":"number"}],"description":"Allows you to modify the Source Engine's motion blur shaders.","examples":[{"code":"local function GetNewMotionBlurValues( h, v, f, r )\n    f = f * math.sin( CurTime() * 5 )\n    return h, v, f, r\nend\nhook.Add( \"GetMotionBlurValues\", \"GetNewMotionBlurValues\", GetNewMotionBlurValues )","description":"Makes your forward/radial blur pulse."}],"isConstructor":false,"name":"GetMotionBlurValues","realm":"client","returns":[{"description":"New amount of horizontal blur.","type":"number"},{"description":"New amount of vertical blur.","type":"number"},{"description":"New amount of forward/radial blur.","type":"number"},{"description":"New amount of rotational blur.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to generate carry angles for","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called to determine preferred carry angles for the entity. It works for both, +use pickup and gravity gun pickup.\n\n{{Warning|Due to nature of the gravity gun coding in multiplayer, this hook '''MAY''' seem to not work ( but rest assured it does ), due to clientside prediction not knowing the carry angles. The +use pickup doesn't present this issue as it doesn't predict the player carrying the object clientside ( as you may notice by the prop lagging behind in multiplayer )}}\n\n{{Note|This hook can '''not''' override preferred carry angles of props such as the sawblade and the harpoon.}}","examples":[{"code":"hook.Add( \"GetPreferredCarryAngles\", \"MyPreferredCarryAngles\", function( ent )\n\treturn Angle( 0, 0, 0 )\nend )","description":"Makes all pickupable entities default to Angle( 0, 0, 0 ) relatively to players aim direction."}],"isConstructor":false,"name":"GetPreferredCarryAngles","realm":"server","returns":[{"description":"The preferred carry angles for the entity.","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Returns the color for the given entity's team. This is used in chat and deathnotice text.","examples":[],"isConstructor":false,"name":"GetTeamColor","realm":"client","returns":[{"description":"Team {{GlobalFunction|Color}}","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Team index","isOptional":false,"isVarArg":false,"name":"team","type":"number"}],"description":"Returns the team color for the given team index.","examples":[],"isConstructor":false,"name":"GetTeamNumColor","realm":"client","returns":[{"description":"Team {{GlobalFunction|Color}}","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Override this hook to disable/change ear-grabbing in your gamemode.","examples":[],"isConstructor":false,"name":"GrabEarAnimation","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who is wielding the gravity gun","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The entity that has been dropped","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called when an entity is released by a gravity gun.","examples":[],"isConstructor":false,"name":"GravGunOnDropped","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player wielding the gravity gun","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The entity that has been picked up by the gravity gun","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called when an entity is picked up by a gravity gun.","examples":[],"isConstructor":false,"name":"GravGunOnPickedUp","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player wielding the gravity gun","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The entity the player is attempting to pick up","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called every tick to poll whether a player is allowed to pick up an entity with the gravity gun or not.\n\nSee {{HookFunction|GM|AllowPlayerPickup}} for the +USE pickup variant.\n\nCalls {{HookFunction|ENTITY|GravGunPickupAllowed}} on the entity being hovered every frame in Sandbox-derived gamemodes.","examples":[],"isConstructor":false,"name":"GravGunPickupAllowed","realm":"server","returns":[{"description":"Return true to allow entity pick up","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player wielding the gravity gun","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The entity the player is attempting to punt","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called when an entity is about to be punted with the gravity gun (primary fire).\n\nBy default this function makes {{HookFunction|ENTITY|GravGunPunt}} work in Sandbox derived gamemmodes.","examples":[],"isConstructor":false,"name":"GravGunPunt","realm":"shared","returns":[{"description":"Return true to allow and false to disallow.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The code of the mouse button pressed, see {{Enum|MOUSE}}","isOptional":false,"isVarArg":false,"name":"mouseCode","type":"MOUSE"},{"default":"","description":"A normalized vector pointing in the direction the client has clicked","isOptional":false,"isVarArg":false,"name":"aimVector","type":"Vector"}],"description":"Called when the mouse has been double clicked on any panel derived from CGModBase, such as the panel used by {{LibraryFunction|gui|EnableScreenClicker}} and the panel used by {{ClassFunction|Panel|ParentToHUD}}.\n\nBy default this hook calls {{HookFunction|GM|GUIMousePressed}}.","examples":[],"isConstructor":false,"name":"GUIMouseDoublePressed","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key that the player pressed using {{Enum|MOUSE}}.","isOptional":false,"isVarArg":false,"name":"mouseCode","type":"MOUSE"},{"default":"","description":"A normalized direction vector local to the camera. Internally, this is  {{LibraryFunction|gui|ScreenToVector}}( {{LibraryFunction|gui|MousePos}}() ).","isOptional":false,"isVarArg":false,"name":"aimVector","type":"Vector"}],"description":"Called whenever a players presses a mouse key on the context menu in Sandbox or on any panel derived from CGModBase, such as the panel used by {{LibraryFunction|gui|EnableScreenClicker}} and the panel used by {{ClassFunction|Panel|ParentToHUD}}.\n\nSee {{HookFunction|GM|VGUIMousePressed}} for a hook that is called on all VGUI elements.","examples":[],"isConstructor":false,"name":"GUIMousePressed","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key the player released, see {{Enum|MOUSE}}","isOptional":false,"isVarArg":false,"name":"mouseCode","type":"MOUSE"},{"default":"","description":"A normalized direction vector local to the camera. Internally this is  {{LibraryFunction|gui|ScreenToVector}}( {{LibraryFunction|gui|MousePos}}() ).","isOptional":false,"isVarArg":false,"name":"aimVector","type":"Vector"}],"description":"Called whenever a players releases a mouse key on the context menu in Sandbox or on any panel derived from CGModBase, such as the panel used by {{LibraryFunction|gui|EnableScreenClicker}} and the panel used by {{ClassFunction|Panel|ParentToHUD}}.","examples":[],"isConstructor":false,"name":"GUIMouseReleased","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player to process","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Allows to override player driving animations.","examples":[],"isConstructor":false,"name":"HandlePlayerDriving","realm":"shared","returns":[{"description":"Return true if we've changed/set the animation, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Players velocity","isOptional":false,"isVarArg":false,"name":"velocity","type":"number"}],"description":"Allows to override player crouch animations.","examples":[],"isConstructor":false,"name":"HandlePlayerDucking","realm":"shared","returns":[{"description":"Return true if we've changed/set the animation, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Players velocity","isOptional":false,"isVarArg":false,"name":"velocity","type":"number"}],"description":"Allows to override player jumping animations.","examples":[],"isConstructor":false,"name":"HandlePlayerJumping","realm":"shared","returns":[{"description":"Return true if we've changed/set the animation, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Players velocity","isOptional":false,"isVarArg":false,"name":"velocity","type":"number"},{"default":"","description":"Was the player on ground?","isOptional":false,"isVarArg":false,"name":"onGround","type":"boolean"}],"description":"Allows to override player landing animations.","examples":[],"isConstructor":false,"name":"HandlePlayerLanding","realm":"shared","returns":[{"description":"Return true if we've changed/set the animation, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Players velocity","isOptional":false,"isVarArg":false,"name":"velocity","type":"number"}],"description":"Allows to override player noclip animations.","examples":[],"isConstructor":false,"name":"HandlePlayerNoClipping","realm":"shared","returns":[{"description":"Return true if we've changed/set the animation, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Players velocity","isOptional":false,"isVarArg":false,"name":"velocity","type":"number"}],"description":"Allows to override player swimming animations.","examples":[],"isConstructor":false,"name":"HandlePlayerSwimming","realm":"shared","returns":[{"description":"Return true if we've changed/set the animation, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Players velocity","isOptional":false,"isVarArg":false,"name":"velocity","type":"number"}],"description":"Allows to override player flying ( in mid-air, not noclipping ) animations.","examples":[],"isConstructor":false,"name":"HandlePlayerVaulting","realm":"shared","returns":[{"description":"Return true if we've changed/set the animation, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Hides the team selection panel.","examples":[],"isConstructor":false,"name":"HideTeam","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the item (ammo) picked up","isOptional":false,"isVarArg":false,"name":"itemName","type":"string"},{"default":"","description":"Amount of the item (ammo) picked up","isOptional":false,"isVarArg":false,"name":"amount","type":"number"}],"description":"Called when the client has picked up ammo. Override to disable default HUD notification.","examples":[],"isConstructor":false,"name":"HUDAmmoPickedUp","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Renders the HUD pick-up history. Override to hide default or draw your own HUD.","examples":[],"isConstructor":false,"name":"HUDDrawPickupHistory","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called every frame to render the scoreboard.<br/>\nIt is recommended to use Derma and VGUI for this job instead of this hook. Called right after {{HookFunction|GM|HUDPaint}}.\n\n{{RenderingContext|Hook|2D}}","examples":[],"isConstructor":false,"name":"HUDDrawScoreBoard","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called from {{HookFunction|GM|HUDPaint}} to draw player info when you hover over a player with your crosshair or mouse.","examples":[{"code":"function GM:HUDDrawTargetID()\nend","description":"This code will turn off the player and health appearing when you look at them."}],"isConstructor":false,"name":"HUDDrawTargetID","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the picked up item","isOptional":false,"isVarArg":false,"name":"itemName","type":"string"}],"description":"Called when an item has been picked up. Override to disable the default HUD notification.","examples":[],"isConstructor":false,"name":"HUDItemPickedUp","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called whenever the HUD should be drawn. Called right before {{HookFunction|GM|HUDDrawScoreBoard}} and after {{HookFunction|GM|HUDPaintBackground}}.\n\nNot called when the Camera SWEP is equipped. See also {{HookFunction|GM|DrawOverlay}}.\n\n{{Note|Only be called when r_drawvgui is enabled and the game is not paused}}\n{{RenderingContext|Hook|2D}}","examples":[{"code":"hook.Add(\"HUDPaint\", \"HUDPaint_DrawABox\", function()\n\tsurface.SetDrawColor( 0, 0, 0, 128 )\n\tsurface.DrawRect( 50, 50, 128, 128 )\nend )","description":"Draws a transparent black box in the top left corner of the screen."}],"isConstructor":false,"name":"HUDPaint","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called after {{HookFunction|GM|HUDPaint}} when the HUD background is being drawn.<br/>\nThings rendered in this hook will '''always''' appear behind things rendered in {{HookFunction|GM|HUDPaint}}.\n\n{{RenderingContext|Hook|2D}}","examples":[],"isConstructor":false,"name":"HUDPaintBackground","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the HUD element. You can find a full list of HUD elements for this hook [[HUD_Element_List|here]].","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Called when the Gamemode is about to draw a given element on the client's HUD (heads-up display).\n\n{{Note|This hook is called HUNDREDS of times per second (more than 5 times per frame on average). You shouldn't be performing any computationally intensive operations.}}","examples":[{"code":"local hide = {\n\t[\"CHudHealth\"] = true,\n\t[\"CHudBattery\"] = true\n}\n\nhook.Add( \"HUDShouldDraw\", \"HideHUD\", function( name )\n\tif ( hide[ name ] ) then return false end\n\n\t-- Don't return anything here, it may break other addons that rely on this hook.\nend )","description":"Hides the default health and battery (armor) HUD elements, while still allowing the display of other elements to be controlled by other addons."}],"isConstructor":false,"name":"HUDShouldDraw","realm":"client","returns":[{"description":"Return false to prevent the given element from being drawn on the client's screen.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The picked up weapon","isOptional":false,"isVarArg":false,"name":"weapon","type":"Weapon"}],"description":"Called when a weapon has been picked up. Override to disable the default HUD notification.","examples":[],"isConstructor":false,"name":"HUDWeaponPickedUp","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called after the gamemode loads and starts.","examples":[{"code":"function GM:Initialize()\n\tprint(\"hi\" )\nend\n\n-- That way you are overriding the default hook\n-- you can use hook.Add to make more functions get called on initialization\nlocal function init()\n\tprint(\"Initialization hook called\")\nend\nhook.Add( \"Initialize\", \"some_unique_name\", init )","description":"\"hi\" will be printed to the console when the gamemode initializes."}],"isConstructor":false,"name":"Initialize","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called after all the entities are initialized.\n\n{{Note|At this point the client only knows about the entities that are within the spawnpoints' [https://en.wikipedia.org/wiki/Potentially_visible_set PVS]. For instance, if the server sends an entity that is not within this PVS, the client will receive it as NULL entity.}}","examples":[{"code":"function GM:InitPostEntity()\n\tprint(\"All Entities have initialized\" )\nend\n\n-- That way you are overriding the default hook\n-- you can use hook.Add to make more functions get called when this event occurs\n\nhook.Add( \"InitPostEntity\", \"some_unique_name\", function()\n\tprint(\"Initialization hook called\")\nend )","description":"Some message will be printed in the console when the entities initialize."}],"isConstructor":false,"name":"InitPostEntity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"User command","isOptional":false,"isVarArg":false,"name":"cmd","type":"CUserCmd"},{"default":"","description":"The amount of mouse movement across the X axis this frame","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The amount of mouse movement across the Y axis this frame","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The current view angle","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"Allows you to modify the supplied User Command with mouse input. This could be used to make moving the mouse do funky things to view angles.","examples":[{"code":"hook.Add(\"InputMouseApply\", \"FreezeTurning\", function( cmd )\n\tcmd:SetMouseX(0)\n\tcmd:SetMouseY(0)\n\t\n\treturn true\nend)","description":"Prevents all players from turning with the mouse."}],"isConstructor":false,"name":"InputMouseApply","realm":"client","returns":[{"description":"Return true if we modified something","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who is spawned","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The spawnpoint entity (on the map)","isOptional":false,"isVarArg":false,"name":"spawnpoint","type":"Entity"},{"default":"","description":"If this is true, it'll kill any players blocking the spawnpoint","isOptional":false,"isVarArg":false,"name":"makeSuitable","type":"boolean"}],"description":"Check if a player can spawn at a certain spawnpoint.","examples":[{"code":"function GM:IsSpawnpointSuitable( ply, spawnpointent, bMakeSuitable )\n\n\tlocal Pos = spawnpointent:GetPos()\n\n\t-- Note that we're searching the default hull size here for a player in the way of our spawning.\n\t-- This seems pretty rough, seeing as our player's hull could be different.. but it should do the job\n\t-- (HL2DM kills everything within a 128 unit radius)\n\tlocal Ents = ents.FindInBox( Pos + Vector( -16, -16, 0 ), Pos + Vector( 16, 16, 72 ) )\n\n\tif ( ply:Team() == TEAM_SPECTATOR or ply:Team() == TEAM_UNASSIGNED ) then return true end\n\n\tlocal Blockers = 0\n\n\tfor k, v in pairs( Ents ) do\n\t\tif ( IsValid( v ) && v:GetClass() == \"player\" && v:Alive() ) then\n\n\t\t\tBlockers = Blockers + 1\n\n\t\t\tif ( bMakeSuitable ) then\n\t\t\t\tv:Kill()\n\t\t\tend\n\n\t\tend\n\tend\n\n\tif ( bMakeSuitable ) then return true end\n\tif ( Blockers > 0 ) then return false end\n\treturn true\n\nend","description":"This will check if anyone is blocking the spawnpoint. If someone is, then it'll, depending on the bMakeSuitable value, kill the player, or return false."}],"isConstructor":false,"name":"IsSpawnpointSuitable","realm":"server","returns":[{"description":"Return true to indicate that the spawnpoint is suitable (Allow for the player to spawn here), false to prevent spawning","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player pressing the key. If running client-side, this will always be {{GlobalFunction|LocalPlayer}}","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The key that the player pressed using {{Enum|IN}}.","isOptional":false,"isVarArg":false,"name":"key","type":"IN"}],"description":"Called whenever a player pressed a key included within the IN keys.\n\nFor a more general purpose function that handles all kinds of input, see {{HookFunction|GM|PlayerButtonDown}}\n\n{{Warning|Due to this being a predicted hook, {{GlobalFunction|ParticleEffect}}s created only serverside from this hook will not be networked to the client, so make sure to do that on both realms}}","examples":[{"code":"hook.Add( \"KeyPress\", \"keypress_use_hi\", function( ply, key )\n\tif ( key == IN_USE ) then\n\t\tprint( \"hi\" )\n\tend\nend )","description":"\"hi\" will be printed to the console when the player presses the IN_USE (E) key."},{"code":"hook.Add( \"KeyPress\", \"keypress_jump_super\", function( ply, key )\n    if ( key == IN_JUMP ) then\n        ply:SetVelocity( ply:GetVelocity() + Vector( 0, 0, 1000 ) )\n    end\nend )","description":"When a player tries to jump, they will be shot straight up in the air."}],"isConstructor":false,"name":"KeyPress","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player releasing the key. If running client-side, this will always be {{GlobalFunction|LocalPlayer}}","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The key that the player released using {{Enum|IN}}.","isOptional":false,"isVarArg":false,"name":"key","type":"IN"}],"description":"Runs when a IN key was released by a player.\n\nFor a more general purpose function that handles all kinds of input, see {{HookFunction|GM|PlayerButtonUp}}","examples":[{"code":"function GM:KeyRelease( player, key )\n    if ( key == IN_USE ) then\n        print( \"hi\" )\n    end\nend","description":"\"hi\" will be printed to the console when the player releases the IN_USE (E) key."}],"isConstructor":false,"name":"KeyRelease","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"data","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"map","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"timestamp","type":"number"}],"description":"Called from gm_load when the game should load a map.","examples":[],"isConstructor":false,"name":"LoadGModSave","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when ''menu.lua'' has finished loading.","examples":[],"isConstructor":false,"name":"MenuStart","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player in question","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Override this gamemode function to disable mouth movement when talking on voice chat.","examples":[],"isConstructor":false,"name":"MouthMoveAnimation","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Movement information","isOptional":false,"isVarArg":false,"name":"mv","type":"CMoveData"}],"description":"The Move hook is called for you to manipulate the player's MoveData. \n\nYou shouldn't adjust the player's position in any way in the move hook. This is because due to prediction errors, the netcode might run the move hook multiple times as packets arrive late. Therefore you should only adjust the movedata construct in this hook.\n\nGenerally you shouldn't have to use this hook - if you want to make a custom move type you should look at the drive system.\n\nThis hook is called after {{HookFunction|GM|PlayerTick}}.","examples":[{"code":"function GM:Move( ply, mv )\n\n\t--\n\t-- Set up a speed, go faster if shift is held down\n\t--\n\tlocal speed = 0.0005 * FrameTime()\n\tif ( mv:KeyDown( IN_SPEED ) ) then speed = 0.005 * FrameTime() end\n\n\t--\n\t-- Get information from the movedata\n\t--\n\tlocal ang = mv:GetMoveAngles()\n\tlocal pos = mv:GetOrigin()\n\tlocal vel = mv:GetVelocity()\n\n\t--\n\t-- Add velocities. This can seem complicated. On the first line\n\t-- we're basically saying get the forward vector, then multiply it\n\t-- by our forward speed (which will be > 0 if we're holding W, < 0 if we're\n\t-- holding S and 0 if we're holding neither) - and add that to velocity.\n\t-- We do that for right and up too, which gives us our free movement.\n\t--\n\tvel = vel + ang:Forward() * mv:GetForwardSpeed() * speed\n\tvel = vel + ang:Right() * mv:GetSideSpeed() * speed\n\tvel = vel + ang:Up() * mv:GetUpSpeed() * speed\n\n\t--\n\t-- We don't want our velocity to get out of hand so we apply\n\t-- a little bit of air resistance. If no keys are down we apply\n\t-- more resistance so we slow down more.\n\t--\n\tif ( math.abs(mv:GetForwardSpeed()) + math.abs(mv:GetSideSpeed()) + math.abs(mv:GetUpSpeed()) < 0.1 ) then\n\tvel = vel * 0.90\n\telse\n\tvel = vel * 0.99\n\tend\n\n\t--\n\t-- Add the velocity to the position (this is the movement)\n\t--\n\tpos = pos + vel\n\n\t--\n\t-- We don't set the newly calculated values on the entity itself\n\t-- we instead store them in the movedata. They should get applied\n\t-- in the FinishMove hook.\n\t--\n\tmv:SetVelocity( vel )\n\tmv:SetOrigin( pos )\n\n\t--\n\t-- Return true to not use the default behavior\n\t--\n\treturn true\n\nend","description":"A noclip move type"}],"isConstructor":false,"name":"Move","realm":"shared","returns":[{"description":"Return true to suppress default engine action","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returning true in this hook will cause it to render depth buffers defined with {{LibraryFunction|render|GetResolvedFullFrameDepth}}.","examples":[],"isConstructor":false,"name":"NeedsDepthPass","realm":"client","returns":[{"description":"Render depth buffer","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Created entity","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called when an entity has been created over the network.","examples":[],"isConstructor":false,"name":"NetworkEntityCreated","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player name","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Player SteamID","isOptional":false,"isVarArg":false,"name":"steamID","type":"string"}],"description":"Called when a player has been validated by Steam.","examples":[],"isConstructor":false,"name":"NetworkIDValidated","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity that changed its transmission state.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"True if we started transmitting to this client and false if we stopped.","isOptional":false,"isVarArg":false,"name":"shouldtransmit","type":"boolean"}],"description":"Called whenever this entity changes its transmission state for this {{GlobalFunction|LocalPlayer}}, such as exiting or re entering the PVS.\n\n{{Note|This is the best place to handle the reset of {{ClassFunction|Entity|SetPredictable}}, as this would be usually called when the player lags and requests a full packet update}}\n\n{{Note|When the entity stops transmitting, {{ClassFunction|Entity|IsDormant}} will only return true '''after''' this hook}}","examples":[],"isConstructor":false,"name":"NotifyShouldTransmit","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that earned the achievement","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The index of the achievement","isOptional":false,"isVarArg":false,"name":"achievement","type":"number"}],"description":"Called when a player has achieved an achievement. You can get the name and other information from an achievement ID with the {{Type|achievements}} library.","examples":[],"isConstructor":false,"name":"OnAchievementAchieved","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The currently typed into chatbox text","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Called when the local player presses TAB while having their chatbox opened.","examples":[],"isConstructor":false,"name":"OnChatTab","realm":"client","returns":[{"description":"What should be placed into the chatbox instead of what currently is when player presses tab","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Called when the context menu was closed.","examples":[],"isConstructor":false,"name":"OnContextMenuClose","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the context menu is opened.","examples":[],"isConstructor":false,"name":"OnContextMenuOpen","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who has been hurt","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Damage info from explsion","isOptional":false,"isVarArg":false,"name":"dmginfo","type":"CTakeDamageInfo"}],"description":"Called when a player has been hurt by an explosion. Override to disable default sound effect.","examples":[{"code":"hook.Add( \"OnDamagedByExplosion\", \"DisableSound\", function()\n\treturn true\nend )","description":"Disables the high pitched ringing sound effect.\n\nNote that this hook does not have a return value, and instead by default it calls {{ClassFunction|Player|SetDSP}}( 35, false ) in the base gamemode."}],"isConstructor":false,"name":"OnDamagedByExplosion","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"}],"description":"Called right after the Entity has been made visible to Lua.\n\nInvalid NPCs passed through this hook are used by the engine to precache things like models and sounds, so always check their validity with {{GlobalFunction|IsValid}}.\n\n{{Warning|Removing the created entity during this event can lead to unexpected problems. Use {{LibraryFunction|timer|Simple}}( 0, .... ) to safely remove the entity.}}","examples":[{"code":"function GM:OnEntityCreated( ent )\n\tif ( ent:GetClass() == \"prop_physics\" ) then\n\t\tent:EmitSound( \"vo/npc/male01/no02.wav\" )\n\tend\nend","description":"When a prop spawns it yells."},{"code":"local TrackedEnts =\n{\n\t[ \"prop_physics\" ] = true,\n\t[ \"prop_ragdoll\" ] = true\n}\n\nlocal EntList = {}\n\nhook.Add( \"OnEntityCreated\", \"SoftEntList\", function( ent )\n\tif ( not ( ent:IsValid() and TrackedEnts[ ent:GetClass() ] ) ) then return end\n\t\n\tEntList[ ent:EntIndex() ] = ent\nend )","description":"Adds all props and ragdolls into a list. More efficient alternative to looping over ents.GetAll()."}],"isConstructor":false,"name":"OnEntityCreated","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the gamemode is loaded.\n\n{{GlobalFunction|LocalPlayer}}() returns NULL at the time this is run.","examples":[],"isConstructor":false,"name":"OnGamemodeLoaded","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The error that occurred.","isOptional":false,"isVarArg":false,"name":"error","type":"string"},{"default":"","description":"Where the Lua error took place","isOptional":false,"isVarArg":false,"name":"realm","type":"number"},{"default":"","description":"Title of the addon that is creating the Lua errors","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Steam Workshop ID of the addon creating Lua errors, if it is an addon.","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Called when a Lua error occurs, only works in the Menu realm.\n\n{{Warning|Modify menu state Lua code at your own risk!}}","examples":[{"code":"hook.Add( \"OnLuaError\", \"MenuErrorHandler\", function( str, realm, addontitle, addonid )\n\n\tlocal text = \"Something is creating script errors\"\n\n\t--\n\t-- This error is caused by a specific addon\n\t--\n\tif ( isstring( addonid ) ) then\n\n\t\t--\n\t\t-- Down Vote\n\t\t--\n\t\t-- steamworks.Vote( addonid, false )\n\n\t\t--\n\t\t-- Disable Naughty Addon\n\t\t--\n\t\t--timer.Simple( 5, function()\n\t\t--\tMsgN( \"Disabling addon '\", addontitle, \"' due to lua errors\" )\n\t\t--\tsteamworks.SetShouldMountAddon( addonid, false )\n\t\t--\tsteamworks.ApplyAddons()\n\t\t--end )\n\n\t\ttext = \"The addon \\\"\" .. addontitle .. \"\\\" is creating errors, check the console for details\"\n\n\tend\n\n\tif  ( addonid == nil ) then addonid = 0 end\n\n\tif ( Errors[ addonid ] ) then\n\n\t\tErrors[ addonid ].times\t= Errors[ addonid ].times + 1\n\t\tErrors[ addonid ].last\t= SysTime()\n\n\t\treturn\n\tend\n\n\tlocal error =\n\t{\n\t\tfirst\t= SysTime(),\n\t\tlast\t= SysTime(),\n\t\ttimes\t= 1,\n\t\ttitle\t= addontitle,\n\t\tx\t\t= 32,\n\t\ttext\t= text\n\t}\n\n\tErrors[ addonid ] = error\n\nend )","description":"Code from garrysmod/lua/menu/errors.lua"}],"isConstructor":false,"name":"OnLuaError","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The killed NPC","isOptional":false,"isVarArg":false,"name":"npc","type":"NPC"},{"default":"","description":"The NPCs attacker, the entity that gets the kill credit, for example a player or an NPC.","isOptional":false,"isVarArg":false,"name":"attacker","type":"Entity"},{"default":"","description":"Death inflictor. The entity that did the killing. Not necessarily a weapon.","isOptional":false,"isVarArg":false,"name":"inflictor","type":"Entity"}],"description":"Called whenever an NPC is killed.","examples":[],"isConstructor":false,"name":"OnNPCKilled","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The weapon that was used to freeze the entity.","isOptional":false,"isVarArg":false,"name":"weapon","type":"Entity"},{"default":"","description":"Physics object of the entity.","isOptional":false,"isVarArg":false,"name":"physobj","type":"PhysObj"},{"default":"","description":"The target entity.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The player who tried to freeze the entity.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called when a player freezes an entity with the physgun.\n\n{{Bug|Issue=723|This is not called for players or NPCs being held with the physgun.}}","examples":[{"code":"hook.Add( \"OnPhysgunFreeze\", \"PhysFreeze\", function( weapon, phys, ent, ply )\n\n  \tif ( !ply:IsAdmin() ) then\n\n\t\treturn false\n\n\tend\n\nend )","description":"Only allows admins to freeze things."}],"isConstructor":false,"name":"OnPhysgunFreeze","realm":"server","returns":[{"description":"Allows you to override whether the player can freeze the entity","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The physgun in question","isOptional":false,"isVarArg":false,"name":"physgun","type":"Weapon"},{"default":"","description":"The player wielding the physgun","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called when a player reloads with the physgun. Override this to disable default unfreezing behavior.","examples":[],"isConstructor":false,"name":"OnPhysgunReload","realm":"server","returns":[{"description":"Whether the player can reload with the physgun or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who has changed team","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Index of the team the player was originally in","isOptional":false,"isVarArg":false,"name":"oldTeam","type":"number"},{"default":"","description":"Index of the team the player has changed to","isOptional":false,"isVarArg":false,"name":"newTeam","type":"number"}],"description":"Called when a player has changed team using {{HookFunction|GM|PlayerJoinTeam}}.\n\n{{Warning|This hook will not work with {{LibraryFunction|hook|Add}} and it is only called manually from {{HookFunction|GM|PlayerJoinTeam}} by the base gamemode}}","examples":[],"isConstructor":false,"name":"OnPlayerChangedTeam","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The message's text","isOptional":false,"isVarArg":false,"name":"text","type":"string"},{"default":"","description":"Is the player typing in team chat?","isOptional":false,"isVarArg":false,"name":"teamChat","type":"boolean"},{"default":"","description":"Is the player dead?","isOptional":false,"isVarArg":false,"name":"isDead","type":"boolean"}],"description":"Called whenever a player sends a chat message. For the serverside equivalent, see {{HookFunction|GM|PlayerSay}}.","examples":[{"code":"function GM:OnPlayerChat( player, strText, bTeamOnly, bPlayerIsDead )\n \n\t--\n\t-- I've made this all look more complicated than it is. Here's the easy version\n\t--\n\t-- chat.AddText( player, Color( 255, 255, 255 ), \": \", strText )\n\t--\n\n\tlocal tab = {}\n\n\tif ( bPlayerIsDead ) then\n\t\ttable.insert( tab, Color( 255, 30, 40 ) )\n\t\ttable.insert( tab, \"*DEAD* \" )\n\tend\n\n\tif ( bTeamOnly ) then\n\t\ttable.insert( tab, Color( 30, 160, 40 ) )\n\t\ttable.insert( tab, \"(TEAM) \" )\n\tend\n\n\tif ( IsValid( player ) ) then\n\t\ttable.insert( tab, player )\n\telse\n\t\ttable.insert( tab, \"Console\" )\n\tend\n\n\ttable.insert( tab, Color( 255, 255, 255 ) )\n\ttable.insert( tab, \": \"..strText )\n\n\tchat.AddText( unpack(tab) )\n\n\treturn true\n \nend","description":"Code from base gamemode. See garrysmod/gamemodes/base/gamemode/cl_init.lua#L139"},{"code":"hook.Add( \"OnPlayerChat\", \"HelloCommand\", function( ply, strText, bTeam, bDead ) \n    if ( ply != LocalPlayer() ) then return end\n\n\tstrText = string.lower( strText ) -- make the string lower case\n\n\tif (strText == \"/hello\") then -- if the player typed /hello then\n\t\tprint(\"Hello world!\") -- print Hello world to the console\n\t\treturn true -- this suppresses the message from being shown\n\tend\n\nend )","description":"How you could create a clientside only chat command."}],"isConstructor":false,"name":"OnPlayerChat","realm":"client","returns":[{"description":"Should the message be suppressed?","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Player","isOptional":false,"isVarArg":false,"name":"player","type":"Entity"},{"default":"","description":"Did the player land in water?","isOptional":false,"isVarArg":false,"name":"inWater","type":"boolean"},{"default":"","description":"Did the player land on an object floating in the water?","isOptional":false,"isVarArg":false,"name":"onFloater","type":"boolean"},{"default":"","description":"The speed at which the player hit the ground","isOptional":false,"isVarArg":false,"name":"speed","type":"number"}],"description":"Called when a player makes contact with the ground.","examples":[{"code":"function GM:OnPlayerHitGround( ply, inWater, onFloater, speed )\n    if speed > 1000 && !inWater then\n        local exp = ents.Create(\"env_explosion\")\n        exp:SetPos(ply:GetPos())\n        exp:Spawn()\n        exp:SetKeyValue(\"iMagnitude\", \"0\")\n        exp:Fire(\"Explode\", 0, 0)\n \n        ply:Kill()\n    end\nend","description":"Explode players when they hit the ground too hard."}],"isConstructor":false,"name":"OnPlayerHitGround","realm":"shared","returns":[{"description":"Return true to suppress default action","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called when gamemode has been reloaded by auto refresh.\n\n{{Note|It seems that this event can be triggered more than once for a single refresh event.}}","examples":[],"isConstructor":false,"name":"OnReloaded","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when a player releases the \"+menu\" bind on their keyboard, which is bound to Q by default.","examples":[],"isConstructor":false,"name":"OnSpawnMenuClose","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when a player presses the \"+menu\" bind on their keyboard, which is bound to Q by default.","examples":[],"isConstructor":false,"name":"OnSpawnMenuOpen","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel that got focus","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"}],"description":"Called when a {{Type|DTextEntry}} gets focus.\n\nThis hook is run from {{ClassFunction|DTextEntry|OnGetFocus}} and {{HookFunction|PANEL|OnMousePressed}} of {{Type|DTextEntry}}.","examples":[],"isConstructor":false,"name":"OnTextEntryGetFocus","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel that lost focus","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"}],"description":"Called when DTextEntry loses focus.","examples":[],"isConstructor":false,"name":"OnTextEntryLoseFocus","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the undo action","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The custom text for the undo, set by {{LibraryFunction|undo|SetCustomUndoText}}","isOptional":false,"isVarArg":false,"name":"customText","type":"string"}],"description":"Called when the player undoes something.","examples":[{"code":"function GM:OnUndo( name, customText )\n     if customText != nil then\n          MsgN( \"Undone \" .. customText )\n     else\n          MsgN( \"Undone \" .. name )\n     end\nend","description":"Print a message when the player undoes something."}],"isConstructor":false,"name":"OnUndo","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The viewmodel that is changing","isOptional":false,"isVarArg":false,"name":"viewmodel","type":"Entity"},{"default":"","description":"The old model","isOptional":false,"isVarArg":false,"name":"oldModel","type":"string"},{"default":"","description":"The new model","isOptional":false,"isVarArg":false,"name":"newModel","type":"string"}],"description":"Called when the player changes their weapon to another one - and their viewmodel model changes.\n\n{{Bug|Issue=2473|This is not always called clientside.}}","examples":[],"isConstructor":false,"name":"OnViewModelChanged","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who dropped an entitiy","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The dropped entity","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called when a player drops an entity with the Physgun.","examples":[],"isConstructor":false,"name":"PhysgunDrop","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that is picking up using the phys gun.","isOptional":false,"isVarArg":false,"name":"player","type":"Player"},{"default":"","description":"The entity that is being picked up.","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"}],"description":"Called whenever a player picks up an entity with the Physgun.","examples":[{"code":"local function PlayerPickup(ply, ent)\n\tif ( ply:IsAdmin() and ent:GetClass():lower() == \"player\" ) then\n\t\treturn true\n\tend\nend\nhook.Add(\"PhysgunPickup\", \"Allow Player Pickup\", PlayerPickup)","description":"Allows Admins to pick up players."}],"isConstructor":false,"name":"PhysgunPickup","realm":"shared","returns":[{"description":"Returns whether the player can pick up the entity or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The player's SteamID","isOptional":false,"isVarArg":false,"name":"steamid","type":"string"},{"default":"","description":"The player's UniqueID","isOptional":false,"isVarArg":false,"name":"uniqueid","type":"string"}],"description":"Called once when the player is authenticated.\n\n{{Bug|Issue=3026|{{GlobalFunction|CurTime}} returns 0 in this hook.}}","examples":[{"code":"function GM:PlayerAuthed( ply, steamid, uniqueid )\n    print( ply:Name() .. \" has been authenticated as \" .. steamid .. \".\" )\nend","description":""}],"isConstructor":false,"name":"PlayerAuthed","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who used the command; this will always be equal to {{GlobalFunction|LocalPlayer}}","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The bind command","isOptional":false,"isVarArg":false,"name":"bind","type":"string"},{"default":"","description":"If the bind was activated or deactivated","isOptional":false,"isVarArg":false,"name":"pressed","type":"boolean"}],"description":"Runs when a bind has been pressed. Allows to block commands.\n\n{{Note|By using the \"alias\" console command, this hook can be effectively circumvented}}\n\n{{Note|To stop the user from using +attack, +left and any other movement commands of the sort, please look into using {{HookFunction|GM|StartCommand}} instead}}\n\n{{Bug|Issue=1176|This is not called when the key is released (the third argument will always be true).}}\n\n{{Bug|Issue=2888|This does not run for function keys binds (F1-F12).}}","examples":[{"code":"function GM:PlayerBindPress( ply, bind, pressed )\n\t--To block more commands, you could add another line similar to\n\t--the one below, just replace the command\n\tif ( string.find( bind, \"impulse 100\" ) ) then return true end\nend","description":"Prevents players from using flashlight."}],"isConstructor":false,"name":"PlayerBindPress","realm":"client","returns":[{"description":"Return true to prevent the bind","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who pressed the button","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The button, see {{Enum|BUTTON_CODE}}","isOptional":false,"isVarArg":false,"name":"button","type":"BUTTON_CODE"}],"description":"Called when a player presses a button.","examples":[],"isConstructor":false,"name":"PlayerButtonDown","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who released the button","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The button, see {{Enum|BUTTON_CODE}}","isOptional":false,"isVarArg":false,"name":"button","type":"BUTTON_CODE"}],"description":"Called when a player releases a button.","examples":[],"isConstructor":false,"name":"PlayerButtonUp","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The listening player.","isOptional":false,"isVarArg":false,"name":"listener","type":"Player"},{"default":"","description":"The talking player.","isOptional":false,"isVarArg":false,"name":"talker","type":"Player"}],"description":"Decides whether a player can hear another player using voice chat.","examples":[{"code":"hook.Add(\"PlayerCanHearPlayersVoice\", \"Maximum Range\", function(listener, talker)\n    if listener:GetPos():Distance(talker:GetPos()) > 500 then return false end\nend)","description":"Players can only hear each other if they are within 500 units."}],"isConstructor":false,"name":"PlayerCanHearPlayersVoice","realm":"server","returns":[{"description":"Return true if the listener should hear the talker, false if they shouldn't.","type":"boolean"},{"description":"3D sound. If set to true, will fade out the sound the further away listener is from the  talker, the voice will also be in stereo, and not mono.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Player attempting to switch teams","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Index of the team","isOptional":false,"isVarArg":false,"name":"team","type":"number"}],"description":"Returns whether or not a player is allowed to join a team","examples":[],"isConstructor":false,"name":"PlayerCanJoinTeam","realm":"server","returns":[{"description":"Allowed to switch","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Player attempting to pick up","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The item the player is attempting to pick up","isOptional":false,"isVarArg":false,"name":"item","type":"Entity"}],"description":"Returns whether or not a player is allowed to pick an item up.","examples":[],"isConstructor":false,"name":"PlayerCanPickupItem","realm":"server","returns":[{"description":"Allow pick up","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player attempting to pick up the weapon","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The weapon entity in question","isOptional":false,"isVarArg":false,"name":"wep","type":"Weapon"}],"description":"Returns whether or not a player is allowed to pick up a weapon.","examples":[{"code":"hook.Add( \"PlayerCanPickupWeapon\", \"noDoublePickup\", function( ply, wep )\n    if ( ply:HasWeapon( wep:GetClass() ) ) then return false end\nend )","description":"Disallows picking up a weapon if player already has this weapon.\n( Prevents ammo pickups from lying guns )"},{"code":"function GM:PlayerCanPickupWeapon(ply, wep)\n    return (wep:GetClass() == \"weapon_pistol\")\nend","description":"Players can only pick up the HL2 Pistol."},{"code":"hook.Add( \"PlayerCanPickupWeapon\", \"NoPistolGiveFists\", function( ply, wep )\n\tif wep:GetClass() == \"weapon_pistol\" then -- if the weapon they are trying to pick up is a pistol\n\t\tply:Give( \"weapon_rpg\" ) -- give them an RPG\n\t\twep:Remove() -- remove the one they were trying to pick up\n\t\treturn false -- don't give them a pistol\n\tend\nend )","description":"How you could give a player an alternate weapon to the one they picked up (such as an RPG Launcher rather than a pistol)"}],"isConstructor":false,"name":"PlayerCanPickupWeapon","realm":"server","returns":[{"description":"Allowed pick up or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The chat text","isOptional":false,"isVarArg":false,"name":"text","type":"string"},{"default":"","description":"If the message is team-only","isOptional":false,"isVarArg":false,"name":"teamOnly","type":"boolean"},{"default":"","description":"The player receiving the message","isOptional":false,"isVarArg":false,"name":"listener","type":"Player"},{"default":"","description":"The player sending the message","isOptional":false,"isVarArg":false,"name":"speaker","type":"Player"}],"description":"Returns whether or not the player can see the other player's chat.","examples":[],"isConstructor":false,"name":"PlayerCanSeePlayersChat","realm":"server","returns":[{"description":"Can see other player's chat","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player's name.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The player's IP address. Will be \"none\" for bots.\n\n{{Note|This argument will only be passed serverside.}}","isOptional":false,"isVarArg":false,"name":"ip","type":"string"}],"description":"Executes when a player connects to the server. Called before the player has been assigned a [[Player/UserID|UserID]] and entity. See the [[Game_Events|player_connect gameevent]] for a version of this hook called after the player entity has been created.\n\n{{Note|This is only called clientside for listen server hosts.}}\n{{Note|This is not called clientside for the local player.}}","examples":[{"code":"function GM:PlayerConnect( name, ip )\n\tPrintMessage( HUD_PRINTTALK, name .. \" has joined the game.\" )\nend","description":"prints a message to the chatbox when a player joins the game"}],"isConstructor":false,"name":"PlayerConnect","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who died","isOptional":false,"isVarArg":false,"name":"victim","type":"Player"},{"default":"","description":"Item used to kill the person","isOptional":false,"isVarArg":false,"name":"inflictor","type":"Entity"},{"default":"","description":"Player or entity that killed the victim","isOptional":false,"isVarArg":false,"name":"attacker","type":"Entity"}],"description":"Called when a player is killed by {{ClassFunction|Player|Kill}} or any other normal means.\n\nThis hook is '''not''' called if the player is killed by {{ClassFunction|Player|KillSilent}}. See {{HookFunction|GM|PlayerSilentDeath}} for that.\n\n* {{HookFunction|GM|DoPlayerDeath}} is called '''before''' this hook.\n* {{HookFunction|GM|PostPlayerDeath}} is called '''after''' this hook.\n\nSee {{ClassFunction|Player|LastHitGroup}} if you need to get the last hit hitgroup of the player.\n\n{{Note|{{ClassFunction|Player|Alive}} will return true in this hook. This behaviour is [https://github.com/Facepunch/garrysmod-issues/issues/3275 not defined].}}","examples":[{"code":"function GM:PlayerDeath( victim, inflictor, attacker )\n    if ( victim == attacker ) then\n        PrintMessage( HUD_PRINTTALK, victim:Name() .. \" committed suicide.\" )\n    else\n        PrintMessage( HUD_PRINTTALK, victim:Name() .. \" was killed by \" .. attacker:Name() .. \".\")\n    end\nend","description":"If the player suicides (he is the killer and the victim (ply)), then it will print a message to console. If someone else kills him, it will print a different message to console."}],"isConstructor":false,"name":"PlayerDeath","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the default death sound should be muted.","examples":[],"isConstructor":false,"name":"PlayerDeathSound","realm":"server","returns":[{"description":"Mute death sound","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player affected in the hook.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called every think while the player is dead. The return value will determine if the player respawns.\n\nOverwriting this function will prevent players from respawning by pressing space or clicking.\n\n{{Bug|Issue=1577|This hook is not called for players with the [[Enums/FL|FL_FROZEN]] flag applied.}}","examples":[],"isConstructor":false,"name":"PlayerDeathThink","realm":"server","returns":[{"description":"Allow spawn","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"the player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called when a player leaves the server. See the [[Game_Events|player_disconnect gameevent]] for a shared version of this hook.\n\n{{Bug|Issue=3523|This is not called in single-player or listen servers for the host.}}","examples":[{"code":"function GM:PlayerDisconnected( ply )\n     PrintMessage( HUD_PRINTTALK, ply:Name().. \" has left the server.\" )\nend","description":"Print a message to the chatbox upon player disconnect"}],"isConstructor":false,"name":"PlayerDisconnected","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The driving player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called to update the player's animation during a drive.","examples":[],"isConstructor":false,"name":"PlayerDriveAnimate","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who owned this weapon before it was dropped","isOptional":false,"isVarArg":false,"name":"owner","type":"Player"},{"default":"","description":"The weapon that was dropped","isOptional":false,"isVarArg":false,"name":"wep","type":"Weapon"}],"description":"Called when a weapon is dropped by a player via {{ClassFunction|Player|DropWeapon}}.\n\nThe weapon's {{ClassFunction|Entity|GetOwner}} will be NULL at the time this hook is called.<br/>\n{{HookFunction|WEAPON|OnDrop}} will be called before this hook is.","examples":[],"isConstructor":false,"name":"PlayerDroppedWeapon","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who stopped talking","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called when player stops using voice chat.","examples":[],"isConstructor":false,"name":"PlayerEndVoice","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who entered vehicle","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Vehicle the player entered","isOptional":false,"isVarArg":false,"name":"veh","type":"Vehicle"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"role","type":"number"}],"description":"Called when a player enters a vehicle.\n\nCalled just after {{HookFunction|GM|CanPlayerEnterVehicle}}.\n\nSee also {{HookFunction|GM|PlayerLeaveVehicle}}.","examples":[],"isConstructor":false,"name":"PlayerEnteredVehicle","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The stepping player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The position of the step","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"Foot that is stepped. 0 for left, 1 for right","isOptional":false,"isVarArg":false,"name":"foot","type":"number"},{"default":"","description":"Sound that is going to play","isOptional":false,"isVarArg":false,"name":"sound","type":"string"},{"default":"","description":"Volume of the footstep","isOptional":false,"isVarArg":false,"name":"volume","type":"number"},{"default":"","description":"The Recipient filter of players who can hear the footstep","isOptional":false,"isVarArg":false,"name":"filter","type":"CRecipientFilter"}],"description":"Called whenever a player steps. Return true to mute the normal sound.","examples":[{"code":"function GM:PlayerFootstep( ply, pos, foot, sound, volume, rf ) \n\tply:EmitSound(\"NPC_Hunter.Footstep\") -- Play the footsteps hunter is using\n\treturn true -- Don't allow default footsteps\nend","description":"Disables default player footsteps and plays custom ones."}],"isConstructor":false,"name":"PlayerFootstep","realm":"shared","returns":[{"description":"Prevent default step sound","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who has frozen an object","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The frozen object","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The frozen physics object of the frozen entity ( For ragdolls )","isOptional":false,"isVarArg":false,"name":"physobj","type":"PhysObj"}],"description":"Called when a player freezes an object.","examples":[],"isConstructor":false,"name":"PlayerFrozeObject","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Victim","isOptional":false,"isVarArg":false,"name":"victim","type":"Player"},{"default":"","description":"Attacker Entity","isOptional":false,"isVarArg":false,"name":"attacker","type":"Entity"},{"default":"","description":"Remaining Health","isOptional":false,"isVarArg":false,"name":"healthRemaining","type":"number"},{"default":"","description":"Damage Taken","isOptional":false,"isVarArg":false,"name":"damageTaken","type":"number"}],"description":"Called when a player gets hurt.","examples":[{"code":"function GM:PlayerHurt(victim, attacker)\n    if ( attacker:IsPlayer() ) then\n        victim:ChatPrint(\"You were attacked by : \" .. attacker:Nick())\n    end\nend","description":"Show players attacker in Chat."}],"isConstructor":false,"name":"PlayerHurt","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who spawned.","isOptional":false,"isVarArg":false,"name":"player","type":"Player"}],"description":"Called when the player spawns for the first time.\n\nSee {{HookFunction|GM|PlayerSpawn}} for a hook called every player spawn.\n\n{{Note|This hook is called before the player has fully loaded, when the player is still in seeing the \"Sending Client Info\" screen. For example, trying to use the {{ClassFunction|Entity|GetModel}} function will return the default model (\"player/default.mdl\")}}","examples":[{"code":"function GM:PlayerInitialSpawn(ply)\n\tprint( ply:GetName()..\" joined the server.\\n\" )\nend\n\n-- That way you are overriding the default hook\n-- you can use hook.Add to make more functions get called when this event occurs\nlocal function spawn(ply)\n\tprint( ply:GetName()..\" joined the game.\\n\")\nend\nhook.Add( \"PlayerInitialSpawn\", \"some_unique_name\", spawn )","description":"Prints the name of the player joining."}],"isConstructor":false,"name":"PlayerInitialSpawn","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player to force","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The team to put player into","isOptional":false,"isVarArg":false,"name":"team","type":"number"}],"description":"Makes the player join a specified team. This is a convenience function that calls {{ClassFunction|Player|SetTeam}} and runs the {{HookFunction|GM|OnPlayerChangedTeam}} hook.","examples":[],"isConstructor":false,"name":"PlayerJoinTeam","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who left a vehicle.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Vehicle the player left.","isOptional":false,"isVarArg":false,"name":"veh","type":"Vehicle"}],"description":"Called when a player leaves a vehicle.\n\n{{Bug|Issue=2619|This is not called when a different vehicle is immediately entered with {{ClassFunction|Player|EnterVehicle}}.}}","examples":[],"isConstructor":false,"name":"PlayerLeaveVehicle","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player to give weapons to.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called to give players the default set of weapons.<br/>\n{{Note|This function may not work in your custom gamemode if you have overridden your {{HookFunction|GM|PlayerSpawn}} and you do not use self.BaseClass.PlayerSpawn or {{LibraryFunction|hook|Call}}.}}","examples":[{"code":"function GM:PlayerLoadout( ply )\n\tply:Give( \"weapon_pistol\" )\n\n\t-- Prevent default Loadout.\n\treturn true\nend","description":"Gives the player only a pistol."}],"isConstructor":false,"name":"PlayerLoadout","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The person who entered/exited noclip","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Represents the noclip state (on/off) the user will enter if this hook allows them to.","isOptional":false,"isVarArg":false,"name":"desiredState","type":"boolean"}],"description":"Called when a player tries to switch noclip mode.","examples":[{"code":"local function DisableNoclip( ply )\n\treturn ply:IsAdmin()\nend\nhook.Add( \"PlayerNoClip\", \"DisableNoclip\", DisableNoclip )","description":"Disable Noclip for all but admins."},{"code":"hook.Add( \"PlayerNoClip\", \"isInNoClip\", function( ply, desiredNoClipState )\n\tif ( desiredNoClipState ) then\n\t\tprint( ply:Name() .. \" wants to enter noclip.\" )\n\telse\n\t\tprint( ply:Name() .. \" wants to leave noclip.\" )\n\tend\nend )","description":"Get the player when they enter/exit no clip and display their status"},{"code":"hook.Add( \"PlayerNoClip\", \"FeelFreeToTurnItOff\", function( ply, desiredState )\n\tif ( desiredState == false ) then -- the player wants to turn noclip off\n\t\treturn true -- always allow\n\telseif ( ply:IsAdmin() ) then\n\t\treturn true -- allow administrators to enter noclip\n\tend\nend )","description":"While keeping the default behaviour of admin-only noclip, the following example will also allow anyone to turn it off (if it's set on by a third-party administration addon, for example)."}],"isConstructor":false,"name":"PlayerNoClip","realm":"shared","returns":[{"description":"Return false to disallow the switch.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called after the player's think.","examples":[],"isConstructor":false,"name":"PlayerPostThink","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player to try to put into a team","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Team to put the player into if the checks succeeded","isOptional":false,"isVarArg":false,"name":"team","type":"number"}],"description":"Request a player to join the team. This function will check if the team is available to join or not.\n\nThis hook is called when the player runs \"changeteam\" in the console.\n\nTo prevent the player from changing teams, see {{HookFunction|GM|PlayerCanJoinTeam}}","examples":[],"isConstructor":false,"name":"PlayerRequestTeam","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player which sent the message.","isOptional":false,"isVarArg":false,"name":"sender","type":"Player"},{"default":"","description":"The message's content","isOptional":false,"isVarArg":false,"name":"text","type":"string"},{"default":"","description":"Is team chat?","isOptional":false,"isVarArg":false,"name":"teamChat","type":"boolean"}],"description":"Called when a player dispatched a chat message. For the clientside equivalent, see {{HookFunction|GM|OnPlayerChat}}.","examples":[{"code":"hook.Add(\"PlayerSay\", \"PlayerSayExample\", function( ply, text, team )\n\t-- Make the chat message entirely lowercase\n\tif ( string.sub(string.lower( text ),1,4) == \"/all\" ) then\n\t\treturn \"[Global] \" .. string.sub( text, 5 ) -- add [Global] in front of the players text then display\n\tend\nend)","description":"Will put \"[Global]\" in front of the players message if they type \"/all \" before the message."}],"isConstructor":false,"name":"PlayerSay","realm":"server","returns":[{"description":"What to show instead of original text.<br/>\nSet to \"\" to stop the message from displaying.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who needs a spawn point","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called to determine a spawn point for a player to spawn at.","examples":[{"code":"function GM:PlayerSelectSpawn( pl )\n    \n    local spawns = ents.FindByClass( \"info_player_start\" )\n    local random_entry = math.random( #spawns )\n    \n    return spawns[ random_entry ]\n\t\nend","description":"Find a random spawn point"}],"isConstructor":false,"name":"PlayerSelectSpawn","realm":"server","returns":[{"description":"The spawnpoint entity to spawn the player at","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Players team","isOptional":false,"isVarArg":false,"name":"team","type":"number"},{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Find a team spawn point entity for this player.","examples":[],"isConstructor":false,"name":"PlayerSelectTeamSpawn","realm":"server","returns":[{"description":"The entity to use as a spawn point.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player whose hands needs a model set","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The hands to set model of","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called whenever view model hands needs setting a model. By default this calls {{HookFunction|PLAYER|GetHandsModel}} and if that fails, sets the hands model according to his player model.","examples":[{"code":"function GM:PlayerSetHandsModel( ply, ent )\n   local simplemodel = player_manager.TranslateToPlayerModelName(ply:GetModel())\n   local info = player_manager.TranslatePlayerHands(simplemodel)\n   if info then\n      ent:SetModel(info.model)\n      ent:SetSkin(info.skin)\n      ent:SetBodyGroups(info.body)\n   end\nend","description":"Sets the players hands to the model's hands."}],"isConstructor":false,"name":"PlayerSetHandsModel","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player being chosen","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called whenever a player spawns and must choose a model. A good place to assign a model to a player.\n{{Note|This function may not work in your custom gamemode if you have overridden your {{HookFunction|GM|PlayerSpawn}} and you do not use self.BaseClass.PlayerSpawn or {{LibraryFunction|hook|Call}}.}}","examples":[{"code":"function GM:PlayerSetModel( ply )\n   ply:SetModel( \"models/player/odessa.mdl\" )\nend","description":"Sets the player's model to Odessa"}],"isConstructor":false,"name":"PlayerSetModel","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The attacker","isOptional":false,"isVarArg":false,"name":"attacker","type":"Entity"}],"description":"Returns true if the player should take damage from the given attacker.","examples":[],"isConstructor":false,"name":"PlayerShouldTakeDamage","realm":"server","returns":[{"description":"Allow damage","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who tried to taunt","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Act ID of the taunt player tries to do, see {{Enum|ACT}}","isOptional":false,"isVarArg":false,"name":"act","type":"ACT"}],"description":"Allows to suppress player taunts.","examples":[],"isConstructor":false,"name":"PlayerShouldTaunt","realm":"server","returns":[{"description":"Return false to disallow player taunting","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called when the player is killed by {{ClassFunction|Player|KillSilent}}.<br>\nThe player is already considered dead when this hook is called.\n\n\nSee {{HookFunction|GM|PlayerDeath}} for a hook which handles all other death causes.\n\n{{Note|{{ClassFunction|Player|Alive}} will return false in this hook.}}","examples":[],"isConstructor":false,"name":"PlayerSilentDeath","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who spawned.","isOptional":false,"isVarArg":false,"name":"player","type":"Player"}],"description":"Called whenever a player spawns, including respawns.\n\nSee {{HookFunction|GM|PlayerInitialSpawn}} for a hook called only the first time a player spawns.\n\nSee the [[Game_Events|player_spawn gameevent]] for a shared version of this hook.\n\n{{Warning|By default, in \"base\" derived gamemodes, this hook will also call {{HookFunction|GM|PlayerLoadout}} and {{HookFunction|GM|PlayerSetModel}}, which may override your {{ClassFunction|Entity|SetModel}} and {{ClassFunction|Player|Give}} calls. Consider using the other hooks or a 0-second timer.}}","examples":[{"code":"function GM:PlayerSpawn( ply )\n    MsgN( ply:Nick() .. \" has spawned!\" )\nend","description":"Prints a message when a player spawns."},{"code":"local function spawn( ply )\n\tprint( ply:Nick().. \" has spawned!.\")\nend\nhook.Add( \"PlayerSpawn\", \"some_unique_name\", spawn )","description":"Prints a message when a player spawns using a hook."}],"isConstructor":false,"name":"PlayerSpawn","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player to spawn as a spectator","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called to spawn the player as a spectator.","examples":[{"code":"function GM:PlayerSpawn( ply )\n \n\tGAMEMODE:PlayerSpawnAsSpectator( ply )\n \nend","description":"Makes all players spawn as spectators."}],"isConstructor":false,"name":"PlayerSpawnAsSpectator","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"sprayer","type":"Player"}],"description":"Determines if the player can spray using the \"impulse 201\" console command.","examples":[{"code":"hook.Add( \"PlayerSpray\", \"DisablePlayerSpray\", function( ply )\n\treturn !ply:IsAdmin()\nend )","description":"Makes so that only Admins can spray."}],"isConstructor":false,"name":"PlayerSpray","realm":"server","returns":[{"description":"Return false to allow spraying, return true to prevent spraying.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who is taunting","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The sequence ID of the taunt","isOptional":false,"isVarArg":false,"name":"act","type":"number"},{"default":"","description":"Length of the taunt","isOptional":false,"isVarArg":false,"name":"length","type":"number"}],"description":"Called when player starts taunting.","examples":[],"isConstructor":false,"name":"PlayerStartTaunt","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who started using voice chat","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called when a player starts using voice chat.","examples":[],"isConstructor":false,"name":"PlayerStartVoice","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who is walking","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The type of footsteps, see {{Enum|STEPSOUNDTIME}}","isOptional":false,"isVarArg":false,"name":"type","type":"STEPSOUNDTIME"},{"default":"","description":"Is the player walking or not ( +walk? )","isOptional":false,"isVarArg":false,"name":"walking","type":"boolean"}],"description":"Allows you to override the time between footsteps.","examples":[],"isConstructor":false,"name":"PlayerStepSoundTime","realm":"shared","returns":[{"description":"Time between footsteps, in ms","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who attempts to change their flashlight state.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The new state the player requested, true for on, false for off.","isOptional":false,"isVarArg":false,"name":"enabled","type":"boolean"}],"description":"Called whenever a player attempts to either turn on or off their flashlight, returning false will deny the change.","examples":[],"isConstructor":false,"name":"PlayerSwitchFlashlight","realm":"server","returns":[{"description":"Can toggle the flashlight or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player switching weapons.","isOptional":false,"isVarArg":false,"name":"player","type":"Player"},{"default":"","description":"The previous weapon. Will be NULL if the previous weapon was removed or the player is switching from nothing.","isOptional":false,"isVarArg":false,"name":"oldWeapon","type":"Weapon"},{"default":"","description":"The weapon the player switched to. Will be NULL if the player is switching to nothing.\n\n{{Bug|Issue=2922|This can be NULL on the client if the weapon hasn't been created over the network yet.}}","isOptional":false,"isVarArg":false,"name":"newWeapon","type":"Weapon"}],"description":"Called when a player switches their weapon.","examples":[{"code":"function GM:PlayerSwitchWeapon(ply, oldWeapon, newWeapon)\n\t//GetClass() will return the weapons class as a string.\n\tMsgN(\"You switched weapons! Your old weapon is \" .. oldWeapon:GetClass() ..\".\")\n\tMsgN(\"Your new weapon is \" .. newWeapon:GetClass() .. \".\");\nend","description":"The players weapon information will be printed when the player switched weapons."}],"isConstructor":false,"name":"PlayerSwitchWeapon","realm":"shared","returns":[{"description":"Return true to prevent weapon switch","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"player","type":"Player"},{"default":"","description":"The current movedata for the player.","isOptional":false,"isVarArg":false,"name":"mv","type":"CMoveData"}],"description":"The Move hook is called for you to manipulate the player's {{Type|CMoveData}}. This hook is called moments before {{HookFunction|GM|Move}} and {{HookFunction|GM|PlayerNoClip}}.\n\n{{Warning|This hook will not run when inside a vehicle. {{HookFunction|GM|VehicleMove}} will be called instead.}}","examples":[],"isConstructor":false,"name":"PlayerTick","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that has been hit","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The damage info of the bullet","isOptional":false,"isVarArg":false,"name":"dmginfo","type":"CTakeDamageInfo"},{"default":"","description":"Normalized vector direction of the bullet's path","isOptional":false,"isVarArg":false,"name":"dir","type":"Vector"},{"default":"","description":"The trace of the bullet's path, see {{Struct|TraceResult}}","isOptional":false,"isVarArg":false,"name":"trace","type":"TraceResult"}],"description":"Called when a player has been hit by a trace and damaged (such as from a bullet). Returning true overrides the damage handling and prevents {{HookFunction|GM|ScalePlayerDamage}} from being called.","examples":[],"isConstructor":false,"name":"PlayerTraceAttack","realm":"shared","returns":[{"description":"Override engine handling","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who has unfrozen an object","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The unfrozen object","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The frozen physics object of the unfrozen entity ( For ragdolls )","isOptional":false,"isVarArg":false,"name":"physobj","type":"PhysObj"}],"description":"Called when a player unfreezes an object.","examples":[],"isConstructor":false,"name":"PlayerUnfrozeObject","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player pressing the \"use\" key.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The entity which the player is looking at / activating USE on.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Triggered when the player presses use on an object. Continuously runs until USE is released but will not activate other Entities until the USE key is released; dependent on activation type of the Entity.","examples":[{"code":"hook.Add( \"PlayerUse\", \"some_unique_name2\", function( ply, ent )\n\tprint( ply, ent )\nend )","description":"The arguments will continue to be output as long as the user holds their USE key. If the user activates one object, say a door, and looks at a different object, say a different door, then the print statement will reflect the new Entity, however even when true is returned the new Entity will not be activated until the user lets go of USE and depresses it once again; this is dependent on the USE TYPE of the Entity."},{"code":"hook.Add( \"PlayerUse\", \"some_unique_name\", function( ply, ent )\n\tif ( !IsValid( ent ) or !ent:IsVehicle() ) then return end\n\t\n\tif ( ply:GetEyeTrace().HitGroup == 5 ) then\n\t\treturn false\n\tend\nend )","description":"Prevent users from using the ammo cache on the back of a Jeep."}],"isConstructor":false,"name":"PlayerUse","realm":"server","returns":[{"description":"Return false if the player is not allowed to USE the entity.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|DMenuBar}} itself.","isOptional":false,"isVarArg":false,"name":"menubar","type":"DMenuBar"}],"description":"Called when it's time to populate the context menu menu bar at the top.","examples":[{"code":"hook.Add( \"PopulateMenuBar\", \"My_MenuBar\", function( menubar )\n\n\tlocal m = menubar:AddOrGetMenu( \"Test\" )\n\n\tm:AddCVar( \"Item 1\", \"console_var1\", \"1\", \"0\" )\n\n\tm:AddSpacer()\n\n\tm:AddCVar( \"Item 2\", \"console_var2\", \"0\", \"100\" )\n\n\tm:AddCVar( \"Check console\", \"console_var3\", \"1\", \"0\", function() print(\"I was clicked!\") end )\n\n\n\tlocal submenu = m:AddSubMenu( \"Submenu\" )\n\n\tsubmenu:SetDeleteSelf( false )\n\tsubmenu:AddCVar( \"No password\", \"password\", \"\" )\n\tsubmenu:AddSpacer()\n\n\tsubmenu:AddCVar( \"Password: test1\", \"password\", \"test1\" )\n\tsubmenu:AddCVar( \"Password: lolno\", \"password\", \"lolno\" )\n\nend )","description":"Example usage of the hook"}],"isConstructor":false,"name":"PopulateMenuBar","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called right after the map has cleaned up (usually because {{LibraryFunction|game|CleanUpMap}} was called)\n\nSee also {{HookFunction|GM|PreCleanupMap}}.","examples":[],"isConstructor":false,"name":"PostCleanupMap","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called right after the 2D skybox has been drawn - allowing you to draw over it.\n\n{{RenderingContext|Hook|3D}}","examples":[{"code":"local Mat = Material( \"dev/graygrid\" )\n\nhook.Add(\"PostDraw2DSkyBox\", \"ExampleHook\", function()\n    \n    render.OverrideDepthEnable( true, false ) -- ignore Z to prevent drawing over 3D skybox\n\n    -- Start 3D cam centered at the origin\n    cam.Start3D( Vector( 0, 0, 0 ), EyeAngles() )\n        render.SetMaterial( Mat )\n        render.DrawQuadEasy( Vector(1,0,0) * 200, Vector(-1,0,0), 64, 64, Color(255,255,255), 0 )\n    cam.End3D()\n\n    render.OverrideDepthEnable( false, false )\n\nend)","description":"Draw a textured quad on the horizon, behind the 3D skybox."}],"isConstructor":false,"name":"PostDraw2DSkyBox","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called after rendering effects. This is where halos are drawn. Called just before {{HookFunction|GM|PreDrawHUD}}.\n\n{{RenderingContext|Hook|2D}}","examples":[],"isConstructor":false,"name":"PostDrawEffects","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called after {{HookFunction|GM|PreDrawHUD}},  {{HookFunction|GM|HUDPaintBackground}} and {{HookFunction|GM|HUDPaint}} but before  {{HookFunction|GM|DrawOverlay}}.\n\n{{RenderingContext|Hook|2D}}","examples":[],"isConstructor":false,"name":"PostDrawHUD","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the current draw is writing depth.","isOptional":false,"isVarArg":false,"name":"bDrawingDepth","type":"boolean"},{"default":"","description":"Whether the current draw is drawing the skybox.","isOptional":false,"isVarArg":false,"name":"bDrawingSkybox","type":"boolean"}],"description":"Called after drawing opaque entities.\n\nSee also {{HookFunction|GM|PostDrawTranslucentRenderables}} and  {{HookFunction|GM|PreDrawOpaqueRenderables}}.\n\n{{RenderingContext|Hook|3D}}","examples":[],"isConstructor":false,"name":"PostDrawOpaqueRenderables","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"This is the gmod_hands entity.","isOptional":false,"isVarArg":false,"name":"hands","type":"Entity"},{"default":"","description":"This is the view model entity.","isOptional":false,"isVarArg":false,"name":"vm","type":"Entity"},{"default":"","description":"The the owner of the view model.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"This is the weapon that is from the view model.","isOptional":false,"isVarArg":false,"name":"weapon","type":"Weapon"}],"description":"Called after the player hands are drawn.","examples":[],"isConstructor":false,"name":"PostDrawPlayerHands","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called after drawing the skybox.\n\n{{RenderingContext|Hook|3D}}","examples":[],"isConstructor":false,"name":"PostDrawSkyBox","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the current call is writing depth.","isOptional":false,"isVarArg":false,"name":"bDrawingDepth","type":"boolean"},{"default":"","description":"Whether the current call is drawing skybox.","isOptional":false,"isVarArg":false,"name":"bDrawingSkybox","type":"boolean"}],"description":"Called after all translucent entities are drawn.\n\nSee also {{HookFunction|GM|PostDrawOpaqueRenderables}} and  {{HookFunction|GM|PreDrawTranslucentRenderables}}.\n\n{{RenderingContext|Hook|3D}}\n\n{{Bug|Issue=3295|This is still called when r_drawentities or r_drawopaquerenderables is disabled.}}\n{{Bug|Issue=3296|This is not called when r_drawtranslucentworld is disabled.}}","examples":[{"code":"hook.Add( \"PostDrawTranslucentRenderables\", \"test\", function( bDepth, bSkybox )\n\n\t-- If we are drawing in the skybox, bail\n\tif ( bSkybox ) then return end\n\n\t-- Set the draw material to solid white\n\trender.SetColorMaterial()\n\n\t-- The position to render the sphere at, in this case, the looking position of the local player\n\tlocal pos = LocalPlayer():GetEyeTrace().HitPos\n\n\t-- Draw the sphere!\n\trender.DrawSphere( pos, 500, 30, 30, Color( 0, 0, 0 ) )\n\nend )","description":"Draws a solid black sphere at where the player is looking at, but not when the skybox is being drawn.\n\nYou can see why this is needed if you disable the skybox check and look into the sky on gm_flatgrass (or any other map where the 3d skybox is below the map) and you will notice 2 spheres and not 1."}],"isConstructor":false,"name":"PostDrawTranslucentRenderables","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Players view model","isOptional":false,"isVarArg":false,"name":"viewmodel","type":"Entity"},{"default":"","description":"The owner of the weapon/view model","isOptional":false,"isVarArg":false,"name":"player","type":"Player"},{"default":"","description":"The weapon the player is currently holding","isOptional":false,"isVarArg":false,"name":"weapon","type":"Weapon"}],"description":"Called after view model is drawn.\n\n{{RenderingContext|Hook|3D}}\n\n{{Note|The 3D rendering context in this event is different from the main view. Every render operation will only be accurate with the view model entity.}}","examples":[],"isConstructor":false,"name":"PostDrawViewModel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called after the gamemode has loaded.","examples":[],"isConstructor":false,"name":"PostGamemodeLoaded","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called right after {{HookFunction|GM|DoPlayerDeath}}, {{HookFunction|GM|PlayerDeath}} and {{HookFunction|GM|PlayerSilentDeath}}.\n\nThis hook will be called for all deaths, including {{ClassFunction|Player|KillSilent}}\n\n{{Note|The player is considered dead when this is hook is called, {{ClassFunction|Player|Alive}} will return false.}}","examples":[],"isConstructor":false,"name":"PostPlayerDeath","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that was drawn.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called after the player was drawn.\n\n{{RenderingContext|Hook|3D}}","examples":[{"code":"local function DrawName( ply )\n\tif ( !IsValid( ply ) ) then return end \n\tif ( ply == LocalPlayer() ) then return end -- Don't draw a name when the player is you\n\tif ( !ply:Alive() ) then return end -- Check if the player is alive \n \n\tlocal Distance = LocalPlayer():GetPos():Distance( ply:GetPos() ) --Get the distance between you and the player\n\t\n\tif ( Distance < 1000 ) then --If the distance is less than 1000 units, it will draw the name\n \n\t\tlocal offset = Vector( 0, 0, 85 )\n\t\tlocal ang = LocalPlayer():EyeAngles()\n\t\tlocal pos = ply:GetPos() + offset + ang:Up()\n\t \n\t\tang:RotateAroundAxis( ang:Forward(), 90 )\n\t\tang:RotateAroundAxis( ang:Right(), 90 )\n\t \n\t\t\n\t\tcam.Start3D2D( pos, Angle( 0, ang.y, 90 ), 0.25 )\n\t\t\tdraw.DrawText( ply:GetName(), \"HudSelectionText\", 2, 2, team.GetColor(ply:Team()), TEXT_ALIGN_CENTER )\n\t\tcam.End3D2D()\n\tend\nend\nhook.Add( \"PostPlayerDraw\", \"DrawName\", DrawName )","description":"Show each player's name above their model."},{"code":"local model = ClientsideModel( \"models/headcrabclassic.mdl\" )\nmodel:SetNoDraw( true )\n\nhook.Add( \"PostPlayerDraw\" , \"manual_model_draw_example\" , function( ply )\n\tif not IsValid(ply) or not ply:Alive() then return end\n\n\tlocal attach_id = ply:LookupAttachment('eyes')\n\tif not attach_id then return end\n\t\t\t\n\tlocal attach = ply:GetAttachment(attach_id)\n\t\t\t\n\tif not attach then return end\n\t\t\t\n\tlocal pos = attach.Pos\n\tlocal ang = attach.Ang\n\t\t\n\tmodel:SetModelScale(1.1, 0)\n\tpos = pos + (ang:Forward() * 2.5)\n\tang:RotateAroundAxis(ang:Right(), 20)\n\t\t\n\tmodel:SetPos(pos)\n\tmodel:SetAngles(ang)\n\n\tmodel:SetRenderOrigin(pos)\n\tmodel:SetRenderAngles(ang)\n\tmodel:SetupBones()\n\tmodel:DrawModel()\n\tmodel:SetRenderOrigin()\n\tmodel:SetRenderAngles()\n\nend )","description":"Draw a headcrab hat on all players.<!-- TODO: screenshot in output -->"}],"isConstructor":false,"name":"PostPlayerDraw","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The classname of Post Processing effect","isOptional":false,"isVarArg":false,"name":"ppeffect","type":"string"}],"description":"Allows you to suppress post processing effect drawing.","examples":[],"isConstructor":false,"name":"PostProcessPermitted","realm":"client","returns":[{"description":"Return true/false depending on whether this post process should be allowed","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called after the frame has been rendered.\n[[Category:Render Hooks]]","examples":[],"isConstructor":false,"name":"PostRender","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called after the VGUI has been drawn.\n\n{{RenderingContext|Hook|2D}}","examples":[],"isConstructor":false,"name":"PostRenderVGUI","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called right before the map cleans up (usually because {{LibraryFunction|game|CleanUpMap}} was called)\n\nSee also {{HookFunction|GM|PostCleanupMap}}.","examples":[],"isConstructor":false,"name":"PreCleanupMap","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called just after {{HookFunction|GM|PreDrawViewModel}} and can technically be considered \"PostDrawAllViewModels\".\n\n{{RenderingContext|Hook|3D}}","examples":[],"isConstructor":false,"name":"PreDrawEffects","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called before rendering the halos. This is the place to call {{LibraryFunction|halo|Add}}. This hook is actually running inside of {{HookFunction|GM|PostDrawEffects}}.\n\n{{RenderingContext|Hook|3D}}","examples":[],"isConstructor":false,"name":"PreDrawHalos","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called before any of 2D drawing functions. Drawing anything in it seems to work incorrectly.<!--\n\n{{RenderingContext|Hook|2D}}-->","examples":[{"code":"local clr = Color(20, 20, 20, 200)\nhook.Add(\"PreDrawHUD\", \"PreDrawExample\", function()\n\tcam.Start2D() -- If you don't call this the drawing will not work properly.\n\t\n\tsurface.SetDrawColor(clr)\n\tsurface.DrawRect(0, 0, ScrW(), ScrH())\n\t\n\tcam.End2D()\nend)","description":"Allows you to draw something before any other HUD elements."}],"isConstructor":false,"name":"PreDrawHUD","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the current draw is writing depth.","isOptional":false,"isVarArg":false,"name":"isDrawingDepth","type":"boolean"},{"default":"","description":"Whether the current draw is drawing the skybox.","isOptional":false,"isVarArg":false,"name":"isDrawSkybox","type":"boolean"}],"description":"Called before all opaque entities are drawn.\n\nSee also {{HookFunction|GM|PreDrawTranslucentRenderables}} and  {{HookFunction|GM|PostDrawOpaqueRenderables}}.\n\n{{RenderingContext|Hook|3D}}","examples":[],"isConstructor":false,"name":"PreDrawOpaqueRenderables","realm":"client","returns":[{"description":"Return true to prevent opaque renderables from drawing.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"This is the gmod_hands entity before it is drawn.","isOptional":false,"isVarArg":false,"name":"hands","type":"Entity"},{"default":"","description":"This is the view model entity before it is drawn.","isOptional":false,"isVarArg":false,"name":"vm","type":"Entity"},{"default":"","description":"The the owner of the view model.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"This is the weapon that is from the view model.","isOptional":false,"isVarArg":false,"name":"weapon","type":"Weapon"}],"description":"Called before the player hands are drawn.","examples":[],"isConstructor":false,"name":"PreDrawPlayerHands","realm":"client","returns":[{"description":"Return true to prevent the viewmodel hands from rendering","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called before the sky box is drawn.\n\n{{RenderingContext|Hook|3D}}","examples":[],"isConstructor":false,"name":"PreDrawSkyBox","realm":"client","returns":[{"description":"Return true to disable skybox drawing (both 2D and 3D skybox)","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the current draw is writing depth.","isOptional":false,"isVarArg":false,"name":"isDrawingDepth","type":"boolean"},{"default":"","description":"Whether the current draw is drawing the skybox.","isOptional":false,"isVarArg":false,"name":"isDrawSkybox","type":"boolean"}],"description":"Called before all the translucent entities are drawn.\n\nSee also {{HookFunction|GM|PreDrawOpaqueRenderables}} and  {{HookFunction|GM|PostDrawTranslucentRenderables}}.\n\n{{RenderingContext|Hook|3D}}\n\n{{Bug|Issue=3295|This is still called when r_drawentities or r_drawopaquerenderables is disabled.}}\n{{Bug|Issue=3296|This is not called when r_drawtranslucentworld is disabled.}}","examples":[],"isConstructor":false,"name":"PreDrawTranslucentRenderables","realm":"client","returns":[{"description":"Return true to prevent translucent renderables from drawing.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"This is the view model entity before it is drawn. On server-side, this entity is the predicted view model.","isOptional":false,"isVarArg":false,"name":"vm","type":"Entity"},{"default":"","description":"The the owner of the view model.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"This is the weapon that is from the view model.","isOptional":false,"isVarArg":false,"name":"weapon","type":"Weapon"}],"description":"Called before the view model has been drawn. This hook by default also calls this on weapons, so you can use {{HookFunction|WEAPON|PreDrawViewModel}}.\n\n{{RenderingContext|Hook|3D}}\n\n{{Bug|Issue=3024|This is also called once a frame with no arguments.}}","examples":[],"isConstructor":false,"name":"PreDrawViewModel","realm":"client","returns":[{"description":"Return true to prevent the default view model rendering. This also affects {{HookFunction|GM|PostDrawViewModel}}.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called before the gamemode is loaded.","examples":[],"isConstructor":false,"name":"PreGamemodeLoaded","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that is about to be drawn.","isOptional":false,"isVarArg":false,"name":"player","type":"Player"}],"description":"Called before the player is drawn.","examples":[],"isConstructor":false,"name":"PrePlayerDraw","realm":"client","returns":[{"description":"Prevent default player rendering. Return true to hide the player.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called before the renderer is about to start rendering the next frame.\n[[Category:Render Hooks]]","examples":[{"code":"hook.Add(\"PreRender\", \"ResetBuffer\", function()\n\tcam.Start2D()\n\t\tsurface.SetDrawColor(0, 0, 0, 255)\n\t\tsurface.DrawRect(0, 0, ScrW(), ScrH())\n\tcam.End2D()\nend)","description":"Fills the draw buffer with black pixels, removing tearing when looking at a world leak. Achieves the same effect as using gl_clear."}],"isConstructor":false,"name":"PreRender","realm":"client","returns":[{"description":"Return true to prevent all rendering. This can make the whole game stop rendering anything.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"This will prevent IN_ATTACK from sending to server when player tries to shoot from C menu.","examples":[],"isConstructor":false,"name":"PreventScreenClicks","realm":"client","returns":[{"description":"Return true to prevent screen clicks","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The person who broke the prop.","isOptional":false,"isVarArg":false,"name":"attacker","type":"Player"},{"default":"","description":"The entity that has been broken by the attacker.","isOptional":false,"isVarArg":false,"name":"prop","type":"Entity"}],"description":"Called when a prop has been destroyed.","examples":[{"code":"hook.Add(\"PropBreak\", \"PropVengeance\", function(client, prop)\n\tclient:Kill()\nend)","description":"This kills a player when a person breaks a prop (i.e. a wooden crate)."}],"isConstructor":false,"name":"PropBreak","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"View origin","isOptional":false,"isVarArg":false,"name":"origin","type":"Vector"},{"default":"","description":"View angles","isOptional":false,"isVarArg":false,"name":"angles","type":"Angle"},{"default":"","description":"View FOV","isOptional":false,"isVarArg":false,"name":"fov","type":"number"}],"description":"Render the scene. Used by the \"Stereoscopy\" Post-processing effect.\n[[Category:Render Hooks]]","examples":[],"isConstructor":false,"name":"RenderScene","realm":"client","returns":[{"description":"Return true to override drawing the scene","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Used to render post processing effects.\n\n{{RenderingContext|Hook|2D}}","examples":[{"code":"local tab = {\n\t[\"$pp_colour_addr\"] = 0,\n\t[\"$pp_colour_addg\"] = 0,\n\t[\"$pp_colour_addb\"] = 0,\n\t[\"$pp_colour_brightness\"] = -0.04,\n\t[\"$pp_colour_contrast\"] = 1.35,\n\t[\"$pp_colour_colour\"] = 5,\n\t[\"$pp_colour_mulr\"] = 0,\n\t[\"$pp_colour_mulg\"] = 0,\n\t[\"$pp_colour_mulb\"] = 0\n}\nfunction GM:RenderScreenspaceEffects()\n\tDrawColorModify( tab ) --Draws Color Modify effect\n\tDrawSobel( 0.5 ) --Draws Sobel effect\nend","description":"Renders color modify and sobel effects to create a cartoon effect."}],"isConstructor":false,"name":"RenderScreenspaceEffects","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the game is reloaded from a Source Engine save system ( not the Sandbox saves or dupes ).\n\nSee {{HookFunction|GM|Saved}} for a hook that is called when such a save file is created.","examples":[],"isConstructor":false,"name":"Restored","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the game is saved using the Source Engine save system (not the Sandbox saves or dupes).\n\nSee {{HookFunction|GM|Restored}} for a hook that is called when such a save file is loaded.\n\nSee also the {{Lib|saverestore}} for relevant functions.","examples":[],"isConstructor":false,"name":"Saved","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The NPC that takes damage","isOptional":false,"isVarArg":false,"name":"npc","type":"NPC"},{"default":"","description":"The hitgroup (hitbox) enum where the player took damage. See {{Enum|HITGROUP}}","isOptional":false,"isVarArg":false,"name":"hitgroup","type":"HITGROUP"},{"default":"","description":"Damage info","isOptional":false,"isVarArg":false,"name":"dmginfo","type":"CTakeDamageInfo"}],"description":"Called when an NPC takes damage.\n\n{{Note|This hook is called only when a specific hit group of the NPC is hit. In cases where the hitgroup doesn't matter, you should use {{HookFunction|GM|EntityTakeDamage}} instead!}}","examples":[{"code":"function GM:ScaleNPCDamage( npc, hitgroup, dmginfo )\n\tdmginfo:ScaleDamage( 2 )\nend","description":"Double the damage whenever a NPC is hurt."}],"isConstructor":false,"name":"ScaleNPCDamage","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player taking damage.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The hitgroup where the player took damage. See {{Enum|HITGROUP}}","isOptional":false,"isVarArg":false,"name":"hitgroup","type":"HITGROUP"},{"default":"","description":"The damage info.","isOptional":false,"isVarArg":false,"name":"dmginfo","type":"CTakeDamageInfo"}],"description":"This hook allows you to change how much damage a player receives when one takes damage to a specific body part.\n\n{{Note|This is not called for all damage a player receives ( For example fall damage or NPC melee damage ), so you should use {{HookFunction|GM|EntityTakeDamage}} instead if you need to detect ALL damage.}}","examples":[{"code":"function GM:ScalePlayerDamage( ply, hitgroup, dmginfo )\n\t if ( hitgroup == HITGROUP_HEAD ) then\n\t\tdmginfo:ScaleDamage( 2 ) // More damage when we're shot in the head\n \t else\n\t\tdmginfo:ScaleDamage( 0.50 )  // Less damage when shot anywhere else\n\t end\nend","description":"Makes the player take twice as much damage when shot in the head, and only half damage when shot in the limbs."}],"isConstructor":false,"name":"ScalePlayerDamage","realm":"shared","returns":[{"description":"Return true to prevent damage that this hook is called for, stop blood particle effects and blood decals.<br/><br/>\n\nIt is possible to return true only on client ( This will work '''only in multiplayer''' ) to stop the effects but still take damage.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called when player released the scoreboard button. ( TAB by default )","examples":[],"isConstructor":false,"name":"ScoreboardHide","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when player presses the scoreboard button. ( TAB by default )\n<!--NOTE: DO NOT ADD A RETURN VALUE TO THIS FUNCTION! IT DOES NOT HAVE A RETURN VALUE.\nRETURNING ANYTHING TO HIDE THE DEFAULT SCOREBOARD IS A SIDE EFFECT OF HOW THE HOOK LIBRARY WORKS.\nTHAT EFFECT WILL NOT BE CONSISTENT BETWEEN GAMEMODES/ADDON COMBINATIONS-->","examples":[],"isConstructor":false,"name":"ScoreboardShow","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player to set the speed of.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The walk speed.","isOptional":false,"isVarArg":false,"name":"walkSpeed","type":"number"},{"default":"","description":"The run speed.","isOptional":false,"isVarArg":false,"name":"runSpeed","type":"number"}],"description":"Sets player run and sprint speeds.\n\n{{Warning|This is not a hook. Treat this as a utility function to set the player's speed.}}","examples":[],"isConstructor":false,"name":"SetPlayerSpeed","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player whose movement we are about to process","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The move data to override/use","isOptional":false,"isVarArg":false,"name":"mv","type":"CMoveData"},{"default":"","description":"The command data","isOptional":false,"isVarArg":false,"name":"cmd","type":"CUserCmd"}],"description":"SetupMove is called before the engine process movements. This allows us to override the players movement.","examples":[{"code":"hook.Add( \"SetupMove\", \"Drowning:HandleWaterInLungs\", function( ply, mv, cmd )\n\tif ( ply:WaterLevel() > 2 ) then\n\t\tmv:SetUpSpeed( -100 )\n\t\tcmd:SetUpMove( -100 )\n\tend\nend )","description":"Make drowning even more entertaining:"},{"code":"local CMoveData = FindMetaTable(\"CMoveData\")\n\nfunction CMoveData:RemoveKeys(keys)\n\t-- Using bitwise operations to clear the key bits.\n\tlocal newbuttons = bit.band(self:GetButtons(), bit.bnot(keys))\n\tself:SetButtons(newbuttons)\nend\n\nhook.Add(\"SetupMove\", \"Disable Jumping\", function(ply, mvd, cmd)\n\tif mvd:KeyDown(IN_JUMP) then\n\t\tmvd:RemoveKeys(IN_JUMP)\n\tend\nend)","description":"Disable the player's ability to jump by removing a key from CMoveData:"}],"isConstructor":false,"name":"SetupMove","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Players {{ClassFunction|Player|GetViewEntity}}","isOptional":false,"isVarArg":false,"name":"viewEntity","type":"Entity"}],"description":"Allows you to add extra positions to the player's PVS. This is the place to call {{GlobalFunction|AddOriginToPVS}}.","examples":[],"isConstructor":false,"name":"SetupPlayerVisibility","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The scale of 3D skybox","isOptional":false,"isVarArg":false,"name":"scale","type":"number"}],"description":"Allows you to use render.Fog* functions to manipulate skybox fog.","examples":[],"isConstructor":false,"name":"SetupSkyboxFog","realm":"client","returns":[{"description":"Return true to tell the engine that fog is set up","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Allows you to use render.Fog* functions to manipulate world fog.","examples":[],"isConstructor":false,"name":"SetupWorldFog","realm":"client","returns":[{"description":"Return true to tell the engine that fog is set up","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The first entity in the collision poll.","isOptional":false,"isVarArg":false,"name":"ent1","type":"Entity"},{"default":"","description":"The second entity in the collision poll.","isOptional":false,"isVarArg":false,"name":"ent2","type":"Entity"}],"description":"Called to decide whether a pair of entities should collide with each other. This is only called if {{ClassFunction|Entity|SetCustomCollisionCheck}} was used on one or both entities.\n\nWhere applicable, consider using {{LibraryFunction|constraint|NoCollide}} instead - it is considerably easier to use.\n\n{{Warning|This hook '''must''' return the same value consistently for the same pair of entities. If an entity changed in such a way that its collision rules change, you '''must''' call {{ClassFunction|Entity|CollisionRulesChanged}} on that entity immediately - '''not in this hook.'''}}\n\n{{Bug|Issue=642|This hook can cause all physics to break under certain conditions.}}","examples":[{"code":"function GM:ShouldCollide( ent1, ent2 )\n\n    -- If players are about to collide with each other, then they won't collide.\n    if ( IsValid( ent1 ) and IsValid( ent2 ) and ent1:IsPlayer() and ent2:IsPlayer() ) then return false end \n\n    -- We must call this because anything else should return true.\n    return true\n\nend","description":"This should always return true unless you have a good reason for it not to."}],"isConstructor":false,"name":"ShouldCollide","realm":"shared","returns":[{"description":"Whether the entities should collide.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called to determine if the {{GlobalFunction|LocalPlayer}} should be drawn.\n\nDue to an [https://garry.tv/2012/10/30/optimising-gmod/ optimization], this hook is only called once per frame ([https://github.com/Facepunch/garrysmod-issues/issues/3092 github issue]). This is problematic if you need to have the player drawn only in certain contexts, such as within {{LibraryFunction|render|RenderView}} or based on the render target. As a workaround, you can call <kbd>{{LibraryFunction|cam|Start3D}}()&nbsp;{{LibraryFunction|cam|End3D}}()</kbd> within this hook to force the engine to call it every time.\n\n{{Note|If you're using this hook to draw a player for a {{HookFunction|GM|CalcView}} hook, then you may want to consider using the drawviewer variable you can use in your {{Struct|CamData}} table instead.}}","examples":[],"isConstructor":false,"name":"ShouldDrawLocalPlayer","realm":"client","returns":[{"description":"True to draw the player, false to hide.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who executed the command","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called when a player executes gm_showhelp console command. ( Default bind is F1 )","examples":[],"isConstructor":false,"name":"ShowHelp","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who executed the command","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called when a player executes gm_showspare1 console command. ( Default bind is F3 )","examples":[],"isConstructor":false,"name":"ShowSpare1","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who executed the command","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called when a player executes gm_showspare2 console command. ( Default bind is F4 )","examples":[],"isConstructor":false,"name":"ShowSpare2","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who executed the command","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called when a player executes gm_showteam console command. ( Default bind is F2 )","examples":[],"isConstructor":false,"name":"ShowTeam","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called whenever the lua environment is about to be shut down. (for example on map change, or when the server is going to shut down because of the \"exit\"-ConCommand)","examples":[],"isConstructor":false,"name":"ShutDown","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"File path of previously generated model.","isOptional":false,"isVarArg":false,"name":"lastmodel","type":"string"},{"default":"","description":"File path of the generated icon.","isOptional":false,"isVarArg":false,"name":"imagename","type":"string"},{"default":"","description":"Amount of models left to generate.","isOptional":false,"isVarArg":false,"name":"modelsleft","type":"number"}],"description":"Called when spawn icon is generated.","examples":[{"code":"local g_Progress = nil\n\nhook.Add( \"SpawniconGenerated\", \"SpawniconGenerated\", function( lastmodel, imagename, modelsleft )\n\n\tif ( !IsValid( g_Progress ) ) then\n\t\n\t\tg_Progress = vgui.Create( \"DPanel\" )\n\t\tg_Progress:SetSize( 64+10, 64+10+20 )\n\t\tg_Progress:SetBackgroundColor( Color( 0, 0, 0, 100 ) )\n\t\tg_Progress:SetDrawOnTop( true )\n\t\tg_Progress:DockPadding( 5, 0, 5, 5 )\n\t\tg_Progress.Think = function()\n\t\t\n\t\t\tif ( SysTime() - g_Progress.LastTouch < 3 ) then return end\n\t\t\t\n\t\t\tg_Progress:Remove()\n\t\t\tg_Progress.LastTouch = SysTime()\n\t\t\n\t\tend\n\t\t\n\n\t\t\n\t\tlocal label = g_Progress:Add( \"DLabel\" )\n\t\tlabel:Dock( BOTTOM )\n\t\tlabel:SetText( \"remaining\" )\n\t\tlabel:SetTextColor( Color( 255, 255, 255, 255 ) )\n\t\tlabel:SetExpensiveShadow( 1, Color( 0, 0, 0, 200 ) )\n\t\tlabel:SetContentAlignment( 5 )\n\t\tlabel:SetHeight( 14 )\n\t\tlabel:SetFont( \"DefaultSmall\" )\n\t\t\n\t\tg_Progress.Label = g_Progress:Add( \"DLabel\" )\n\t\tg_Progress.Label:Dock( BOTTOM )\n\t\tg_Progress.Label:SetTextColor( Color( 255, 255, 255, 255 ) )\n\t\tg_Progress.Label:SetExpensiveShadow( 1, Color( 0, 0, 0, 200 ) )\n\t\tg_Progress.Label:SetContentAlignment( 5 )\n\t\tg_Progress.Label:SetFont( \"DermaDefaultBold\" )\n\t\tg_Progress.Label:SetHeight( 14 )\n\t\t\n\t\tg_Progress.icon = vgui.Create( \"DImage\", g_Progress )\n\t\tg_Progress.icon:SetSize( 64, 64 )\n\t\tg_Progress.icon:Dock( TOP )\n\t\n\tend\n\t\n\tg_Progress.LastTouch = SysTime()\n\t\n\timagename = imagename:Replace( \"materials\\\\\", \"\" )\n\timagename = imagename:Replace( \"materials/\", \"\" )\n\t\t\n\tg_Progress.icon:SetImage( imagename )\n\t\t\n\tg_Progress:AlignRight( 10 )\n\tg_Progress:AlignBottom( 10 )\n\t\n\tg_Progress.Label:SetText( modelsleft )\n\nend )","description":"That's how it is used in '''garrysmod/lua/includes/gui/icon_progress.lua''' for show progress of generating icons"}],"isConstructor":false,"name":"SpawniconGenerated","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the message was sent through team chat.","isOptional":false,"isVarArg":false,"name":"isTeamChat","type":"boolean"}],"description":"Runs when the user tries to open the chat box.\n\n{{Bug|Issue=855|Returning true won't stop the chatbox from taking VGUI focus.}}","examples":[{"code":"hook.Add( \"StartChat\", \"HasStartedTyping\", function( isTeamChat )\n\tif ( isTeamChat ) then\n\t\tprint( \"Player started typing a message in teamchat.\" )\n\telse\n\t\tprint( \"Player started typing a message.\" )\n\tend\nend )","description":""}],"isConstructor":false,"name":"StartChat","realm":"client","returns":[{"description":"Return true to hide the default chat box.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The usercommand","isOptional":false,"isVarArg":false,"name":"ucmd","type":"CUserCmd"}],"description":"Allows you to change the players inputs before they are processed by the server.<br/><br/>\nThis is basically a shared version of {{HookFunction|GM|CreateMove}}.\n\n{{Note|This function is also called for bots, making it the best solution to control them so far}}\n\n{{Note|This hook is predicted, but not by usual means, this hook is called when a {{Type|CUserCmd}} is generated on the client, and on the server when it is received, so it is necessary for this hook to be called clientside even on singleplayer}}","examples":[{"code":"hook.Add( \"StartCommand\", \"StartCommandExample\", function( ply, cmd )\n\n\t-- If the player is not a bot or the bot is dead, do not do anything\n\t-- TODO: Maybe spawn the bot manually here if the bot is dead\n\tif ( !ply:IsBot() or !ply:Alive() ) then return end\n\n\t-- Clear any default movement or actions\n\tcmd:ClearMovement() \n\tcmd:ClearButtons()\n\n\t-- Bot has no enemy, try to find one\n\tif ( !IsValid( ply.CustomEnemy ) ) then\n\t\t-- Scan through all players and select one not dead\n\t\tfor id, pl in pairs( player.GetAll() ) do\n\t\t\tif ( !pl:Alive() or pl == ply ) then continue end -- Don't select dead players or self as enemies \n\t\t\tply.CustomEnemy = pl\n\t\tend\n\t\t-- TODO: Maybe add a Line Of Sight check so bots won't walk into walls to try to get to their target\n\t\t-- Or add path finding so bots can find their way to enemies\n\tend\n\n\t-- We failed to find an enemy, don't do anything\n\tif ( !IsValid( ply.CustomEnemy ) ) then return end\n\n\t-- Move forwards at the bots normal walking speed\n\tcmd:SetForwardMove( ply:GetWalkSpeed() )\n\n\t-- Aim at our enemy\n\tif ( ply.CustomEnemy:IsPlayer() ) then\n\t\tcmd:SetViewAngles( ( ply.CustomEnemy:GetShootPos() - ply:GetShootPos() ):GetNormalized():Angle() )\n\telse\n\t\tcmd:SetViewAngles( ( ply.CustomEnemy:GetPos() - ply:GetShootPos() ):GetNormalized():Angle() )\n\tend\n\n\t-- Give the bot a crowbar if the bot doesn't have one yet\n\tif ( SERVER and !ply:HasWeapon( \"weapon_crowbar\" ) ) then ply:Give( \"weapon_crowbar\" ) end\n\n\t-- Select the crowbar\n\tcmd:SelectWeapon( ply:GetWeapon( \"weapon_crowbar\" ) )\n\n\t-- Hold Mouse 1 to cause the bot to attack\n\tcmd:SetButtons( IN_ATTACK )\n\n\t-- Enemy is dead, clear our enemy so that we may acquire a new one\n\tif ( !ply.CustomEnemy:Alive() ) then\n\t\tply.CustomEnemy = nil\n\tend\n\nend )","description":"Example of how you'd control a bot using this hook.\n\nThe example causes all bots to go kill any players they can get to with crowbars."}],"isConstructor":false,"name":"StartCommand","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity that is going to be driven","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The player that is going to drive the entity","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called right before an entity starts driving. Overriding this hook will cause it to not call {{LibraryFunction|drive|Start}} and the player will not begin driving the entity.","examples":[],"isConstructor":false,"name":"StartEntityDriving","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when you start a new game via the menu.","examples":[],"isConstructor":false,"name":"StartGame","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called every frame on client and every tick on server.\n\nSee {{HookFunction|GM|Tick}} for a hook that runs every tick on both the client and server.\n\n{{Note|This hook '''WILL NOT''' run if the server is empty, unless you set the {{Type|ConVar}} ''sv_hibernate_think'' to 1}}","examples":[],"isConstructor":false,"name":"Think","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called every server tick. Serverside, this is similar to {{HookFunction|GM|Think}}.","examples":[],"isConstructor":false,"name":"Tick","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The activity. See {{Enum|ACT}}","isOptional":false,"isVarArg":false,"name":"act","type":"ACT"}],"description":"Allows you to translate player activities.","examples":[],"isConstructor":false,"name":"TranslateActivity","realm":"shared","returns":[{"description":"The new, translated activity","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player to update the animation info for.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The player's velocity.","isOptional":false,"isVarArg":false,"name":"velocity","type":"Vector"},{"default":"","description":"Speed of the animation - used for playback rate scaling.","isOptional":false,"isVarArg":false,"name":"maxSeqGroundSpeed","type":"number"}],"description":"Animation updates (pose params etc) should be done here.","examples":[],"isConstructor":false,"name":"UpdateAnimation","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity being edited","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The player doing the editing","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The name of the variable","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"","description":"The new value, as a string which will later be converted to its appropriate type","isOptional":false,"isVarArg":false,"name":"val","type":"string"},{"default":"","description":"The edit table defined in {{ClassFunction|Entity|NetworkVar}}","isOptional":false,"isVarArg":false,"name":"editor","type":"table"}],"description":"Called when a variable is edited on an Entity (called by Edit Properties... menu)","examples":[{"code":"function GM:VariableEdited( ent, ply, key, val, editor )\n    if ( !IsValid( ent ) ) then return end\n    if ( !IsValid( ply ) ) then return end\n    local CanEdit = hook.Run( \"CanEditVariable\", ent, ply, key, val, editor )\n    if ( !CanEdit ) then return end\n    ent:EditValue( key, val )\nend","description":"From base/gamemode/variable_edit.lua"}],"isConstructor":false,"name":"VariableEdited","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who is driving the vehicle","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The vehicle being driven","isOptional":false,"isVarArg":false,"name":"veh","type":"Vehicle"},{"default":"","description":"Move data","isOptional":false,"isVarArg":false,"name":"mv","type":"CMoveData"}],"description":"Called when you are driving a vehicle. This hook works just like {{HookFunction|GM|Move}}.\n\nThis hook is called before {{HookFunction|GM|Move}} and will be called when {{HookFunction|GM|PlayerTick}} is not.","examples":[],"isConstructor":false,"name":"VehicleMove","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The button that was pressed, see {{Enum|MOUSE}}","isOptional":false,"isVarArg":false,"name":"button","type":"MOUSE"}],"description":"[[Category:Menu_Hooks]] Called when user clicks on a VGUI panel.","examples":[],"isConstructor":false,"name":"VGUIMousePressAllowed","realm":"client","returns":[{"description":"Return true if the mouse click should be ignored or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel that currently has focus.","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"},{"default":"","description":"The key that the player pressed using {{Enum|MOUSE}}.","isOptional":false,"isVarArg":false,"name":"mouseCode","type":"MOUSE"}],"description":"[[Category:Menu_Hooks]] Called when a mouse button is pressed on a VGUI element or menu.","examples":[],"isConstructor":false,"name":"VGUIMousePressed","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The equipped weapon.","isOptional":false,"isVarArg":false,"name":"weapon","type":"Weapon"},{"default":"","description":"The player that is picking up the weapon.","isOptional":false,"isVarArg":false,"name":"owner","type":"Player"}],"description":"Called as a weapon entity is picked up by a player.\n\n{{Note|At the time when this hook is called {{ClassFunction|Entity|GetOwner}} will return NULL. The owner is set on the next frame}}\n{{Note|This will not be called when picking up a weapon you already have as the weapon will be removed and {{HookFunction|WEAPON|EquipAmmo}} will be called instead}}","examples":[],"isConstructor":false,"name":"WeaponEquip","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Workshop ID of addon.","isOptional":false,"isVarArg":false,"name":"id","type":"number"},{"default":"","description":"Name of addon.","isOptional":false,"isVarArg":false,"name":"title","type":"string"}],"description":"Called when an addon from the Steam workshop finishes downloading. Used by default to update details on the workshop downloading panel.","examples":[],"isConstructor":false,"name":"WorkshopDownloadedFile","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Workshop ID of addon.","isOptional":false,"isVarArg":false,"name":"id","type":"number"},{"default":"","description":"ID of addon's preview image.<br/>\n\nFor example, for '''Extended Spawnmenu''' addon, the image URL is\n<samp><nowiki>http://cloud-4.steamusercontent.com/ugc/702859018846106764/9E7E1946296240314751192DA0AD15B6567FF92D/</nowiki></samp>\nSo, the value of this argument would be '''702859018846106764'''.","isOptional":false,"isVarArg":false,"name":"imageID","type":"number"},{"default":"","description":"Name of addon.","isOptional":false,"isVarArg":false,"name":"title","type":"string"},{"default":"","description":"File size of addon in bytes.","isOptional":false,"isVarArg":false,"name":"size","type":"number"}],"description":"Called when an addon from the Steam workshop begins downloading. Used by default to place details on the workshop downloading panel.","examples":[],"isConstructor":false,"name":"WorkshopDownloadFile","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Workshop ID of addon.","isOptional":false,"isVarArg":false,"name":"id","type":"number"},{"default":"","description":"ID of addon's preview image.<br/>\n\nFor example, for '''Extended Spawnmenu''' addon, the image URL is\n<samp><nowiki>http://cloud-4.steamusercontent.com/ugc/702859018846106764/9E7E1946296240314751192DA0AD15B6567FF92D/</nowiki></samp>\nSo, the value of this argument would be '''702859018846106764'''.","isOptional":false,"isVarArg":false,"name":"imageID","type":"number"},{"default":"","description":"Name of addon.","isOptional":false,"isVarArg":false,"name":"title","type":"string"},{"default":"","description":"Current bytes of addon downloaded.","isOptional":false,"isVarArg":false,"name":"downloaded","type":"number"},{"default":"","description":"Expected file size of addon in bytes.","isOptional":false,"isVarArg":false,"name":"expected","type":"number"}],"description":"Called while an addon from the Steam workshop is downloading. Used by default to update details on the fancy workshop download panel.","examples":[],"isConstructor":false,"name":"WorkshopDownloadProgress","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Remaining addons to download","isOptional":false,"isVarArg":false,"name":"remain","type":"number"},{"default":"","description":"Total addons needing to be downloaded","isOptional":false,"isVarArg":false,"name":"total","type":"number"}],"description":"Called after {{HookFunction|GM|WorkshopStart}}.","examples":[],"isConstructor":false,"name":"WorkshopDownloadTotals","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when downloading content from Steam workshop ends. Used by default to hide fancy workshop downloading panel.","examples":[],"isConstructor":false,"name":"WorkshopEnd","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when downloading content from Steam workshop begins. Used by default to show fancy workshop downloading panel.\n\nThe order of Workshop hooks is this:\n* WorkshopStart\n* WorkshopDownloadTotals\n** These are called for each new item:\n*** WorkshopDownloadFile\n*** WorkshopDownloadProgress - This is called until the file is finished\n*** WorkshopDownloadedFile\n* WorkshopEnd","examples":[],"isConstructor":false,"name":"WorkshopStart","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Amount of subscribed addons that have info retrieved.","isOptional":false,"isVarArg":false,"name":"num","type":"number"},{"default":"","description":"Total amount of subscribed addons that need their info retrieved.","isOptional":false,"isVarArg":false,"name":"max","type":"number"}],"description":"{{Internal}}\nCalled by the engine when the game initially fetches subscriptions to be displayed on the bottom of the main menu screen.","examples":[],"isConstructor":false,"name":"WorkshopSubscriptionsProgress","realm":"menu","returns":[]}],"isHook":true,"isPureAbstract":false,"name":"Gamemode"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The frame blending library.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nAdds a frame to the blend. Calls {{LibraryFunction|frame_blend|CompleteFrame}} once enough frames have passed since last {{LibraryFunction|frame_blend|CompleteFrame}} call.","examples":[],"isConstructor":false,"name":"AddFrame","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nBlends the frame(s).","examples":[],"isConstructor":false,"name":"BlendFrame","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nRenders the frame onto internal render target.","examples":[],"isConstructor":false,"name":"CompleteFrame","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nActually draws the frame blend effect.","examples":[],"isConstructor":false,"name":"DrawPreview","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns whether frame blend post processing effect is enabled or not.","examples":[],"isConstructor":false,"name":"IsActive","realm":"client","returns":[{"description":"Is frame blend enabled or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n{{Validate}}\n\nReturns whether the current frame is the last frame?","examples":[],"isConstructor":false,"name":"IsLastFrame","realm":"client","returns":[{"description":"Whether the current frame is the last frame?","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}{{Validate}}\n\nReturns amount of frames needed to render?","examples":[],"isConstructor":false,"name":"RenderableFrames","realm":"client","returns":[{"description":"Amount of frames needed to render?","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether we should skip frame or not","examples":[],"isConstructor":false,"name":"ShouldSkipFrame","realm":"client","returns":[{"description":"Should the frame be skipped or not","type":"boolean"}]}],"isHook":false,"isPureAbstract":false,"name":"frame_blend"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"An object returned by {{GlobalFunction|GetConVar}}. It represents a console variable. See [http://wiki.garrysmod.com/page/ConVars this] page for more information.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Tries to convert the current string value of a {{Type|ConVar}} to a boolean.","examples":[],"isConstructor":false,"name":"GetBool","realm":"shared","returns":[{"description":"The boolean value of the console variable. If the variable is numeric and not 0, the result will be true. Otherwise the result will be false.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the default value of the {{Type|ConVar}}","examples":[],"isConstructor":false,"name":"GetDefault","realm":"shared","returns":[{"description":"The default value of the console variable.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Attempts to convert the {{Type|ConVar}} value to a float","examples":[],"isConstructor":false,"name":"GetFloat","realm":"shared","returns":[{"description":"The float value of the console variable.<br/>\nIf the value cannot be converted to a float, it will return 0.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the help text assigned to that convar.","examples":[],"isConstructor":false,"name":"GetHelpText","realm":"shared","returns":[{"description":"The help text","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Attempts to convert the {{Type|ConVar}} value to a integer.","examples":[],"isConstructor":false,"name":"GetInt","realm":"shared","returns":[{"description":"The integer value of the console variable.<br/>\nIf it fails to convert to an integer, it will return 0.<br/>\nAll float/decimal values will be rounded down. ( With {{LibraryFunction|math|floor}} )","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the name of the {{Type|ConVar}}.","examples":[],"isConstructor":false,"name":"GetName","realm":"shared","returns":[{"description":"The name of the console variable.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current {{Type|ConVar}} value as a string.","examples":[{"code":"if GetConVar(\"gamemode\"):GetString() == \"sandbox\" then\n    print(\"Gamemode is sandbox\")\nend","description":"Will check if the gamemode is sandbox"}],"isConstructor":false,"name":"GetString","realm":"shared","returns":[{"description":"The current console variable value as a string.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Value to set the ConVar to.","isOptional":false,"isVarArg":false,"name":"value","type":"boolean"}],"description":"Sets a ConVar's value to 1 or 0 based on the input boolean. This can only be ran on ConVars created from within Lua.","examples":[],"isConstructor":false,"name":"SetBool","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Value to set the ConVar to.","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Sets a ConVar's value to to the input number. This can only be ran on ConVars created from within Lua.","examples":[],"isConstructor":false,"name":"SetFloat","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Value to set the ConVar to.","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Sets a ConVar's value to the input number after converting it to an integer. This can only be ran on ConVars created from within Lua.","examples":[],"isConstructor":false,"name":"SetInt","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Value to set the ConVar to.","isOptional":false,"isVarArg":false,"name":"value","type":"string"}],"description":"Sets a ConVar's value to the input string. This can only be ran on ConVars created from within Lua.","examples":[],"isConstructor":false,"name":"SetString","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"ConVar"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A tree and list-based file browser.\n\nIt allows filtering by folder (directory) name and file extension, and can display models as {{Type|SpawnIcon}}s.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 500, 250 )\nframe:SetSizable( true )\nframe:Center()\nframe:MakePopup()\nframe:SetTitle( \"DFileBrowser Example\" )\n\nlocal browser = vgui.Create( \"DFileBrowser\", frame )\nbrowser:Dock( FILL )\n\nbrowser:SetPath( \"GAME\" ) -- The access path i.e. GAME, LUA, DATA etc.\nbrowser:SetBaseFolder( \"data\" ) -- The root folder\nbrowser:SetOpen( true ) -- Open the tree to show sub-folders\nbrowser:SetCurrentFolder( \"persist\" ) -- Show files from persist\n\nfunction browser:OnSelect( path, pnl ) -- Called when a file is clicked\n\tprint( path )\nend","description":"Creates a DFileBrowser and displays the data/persist folder. Any file clicked is printed to the console."},{"code":"local browser = vgui.Create( \"DFileBrowser\", frame )\nbrowser:Dock( FILL )\n\nbrowser:SetPath( \"GAME\" ) -- The access path i.e. GAME, LUA, DATA etc.\nbrowser:SetBaseFolder( \"models\" ) -- The root folder\nbrowser:SetName( \"Props_ Models\" ) -- Name to display in tree\nbrowser:SetSearch( \"props_\" ) -- Search folders starting with \"props_\"\nbrowser:SetFileTypes( \"*.mdl\" ) -- File type filter\nbrowser:SetOpen( true ) -- Opens the tree (same as double clicking)\nbrowser:SetCurrentFolder( \"props_badlands\" ) -- Set the folder to use\n\nfunction browser:OnSelect( path, pnl ) -- Called when a file is clicked\n\tRunConsoleCommand( \"gm_spawn\", path ) -- Spawn the model we clicked\n\tframe:Close()\nend","description":"Creates a DFileBrowser that can spawn models from ''props_'' folders.\n\n{{Note|Uses the same {{Type|DFrame}} as above}}"},{"code":"browser:SetModels( true ) -- Use SpawnIcons instead of a list","description":"Same as above, but enables model viewing. The following line is added to the above code."}],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[],"description":"Clears the file tree and list, and resets all values.","examples":[],"isConstructor":false,"name":"Clear","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the root directory/folder of the file tree.","examples":[],"isConstructor":false,"name":"GetBaseFolder","realm":"client","returns":[{"description":"The path to the root folder.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current directory/folder being displayed.","examples":[],"isConstructor":false,"name":"GetCurrentFolder","realm":"client","returns":[{"description":"The directory the file list is currently displaying.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current file type filter on the file list.","examples":[],"isConstructor":false,"name":"GetFileTypes","realm":"client","returns":[{"description":"The current filter applied to the file list.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the {{Type|DTree Node}} that the file tree stems from.\n\nThis is a child of the root node of the {{Type|DTree}}.","examples":[],"isConstructor":false,"name":"GetFolderNode","realm":"client","returns":[{"description":"The {{Type|DTree_Node}} used for the tree.","type":"DTree_Node"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the model viewer mode is enabled. In this mode, files are displayed as {{Type|SpawnIcon}}s instead of a list.","examples":[],"isConstructor":false,"name":"GetModels","realm":"client","returns":[{"description":"Whether or not files will be displayed using {{Type|SpawnIcon}}s.","type":"SpawnIcon"}]},{"accessModifier":"public","arguments":[],"description":"Returns the name being used for the file tree.","examples":[],"isConstructor":false,"name":"GetName","realm":"client","returns":[{"description":"The name used for the root of the file tree.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the file tree is open.","examples":[],"isConstructor":false,"name":"GetOpen","realm":"client","returns":[{"description":"Whether or not the file tree is open.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the access path of the file tree. This is ''GAME'' unless changed with {{ClassFunction|DFileBrowser|SetPath}}.\n\nSee {{LibraryFunction|file|Read}} for how paths work.","examples":[],"isConstructor":false,"name":"GetPath","realm":"client","returns":[{"description":"The current access path i.e. \"GAME\", \"LUA\", \"DATA\" etc.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current search filter on the file tree.","examples":[],"isConstructor":false,"name":"GetSearch","realm":"client","returns":[{"description":"The filter in use on the file tree.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The path to the file that was double-clicked.","isOptional":false,"isVarArg":false,"name":"filePath","type":"string"},{"default":"","description":"The panel that was double-clicked to select this file.<br><br>This will either be a {{Type|DListView_Line}} or {{Type|SpawnIcon}} depending on whether the model viewer mode is enabled. See {{ClassFunction|DFileBrowser|SetModels}}.","isOptional":false,"isVarArg":false,"name":"selectedPanel","type":"DListView_Line | SpawnIcon"}],"description":"Called when a file is double-clicked.\n\n{{Note|Double-clicking a file or icon will trigger '''both''' this and {{ClassFunction|DFileBrowser|OnSelect}}.}}","examples":[],"isConstructor":false,"name":"OnDoubleClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path to the file that was right-clicked.","isOptional":false,"isVarArg":false,"name":"filePath","type":"string"},{"default":"","description":"The panel that was right-clicked to select this file.<br><br>This will either be a {{Type|DListView_Line}} or {{Type|SpawnIcon}} depending on whether the model viewer mode is enabled. See {{ClassFunction|DFileBrowser|SetModels}}.","isOptional":false,"isVarArg":false,"name":"selectedPanel","type":"DListView_Line | SpawnIcon"}],"description":"Called when a file is right-clicked.\n\n{{Note|When not in model viewer mode, {{ClassFunction|DFileBrowser|OnSelect}} will also be called if the file is not already selected.}}","examples":[],"isConstructor":false,"name":"OnRightClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path to the file that was selected.","isOptional":false,"isVarArg":false,"name":"filePath","type":"string"},{"default":"","description":"The panel that was clicked to select this file.<br><br>This will either be a {{Type|DListView_Line}} or {{Type|SpawnIcon}} depending on whether the model viewer mode is enabled. See {{ClassFunction|DFileBrowser|SetModels}}.","isOptional":false,"isVarArg":false,"name":"selectedPanel","type":"DListView_Line | SpawnIcon"}],"description":"Called when a file is selected.","examples":[],"isConstructor":false,"name":"OnSelect","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path to the folder to use as the root.","isOptional":false,"isVarArg":false,"name":"baseDir","type":"string"}],"description":"Sets the root directory/folder of the file tree.\n\nThis needs to be set for the file tree to be displayed.","examples":[],"isConstructor":false,"name":"SetBaseFolder","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The directory to display files from.","isOptional":false,"isVarArg":false,"name":"currentDir","type":"string"}],"description":"Sets the directory/folder from which to display the file list.","examples":[],"isConstructor":false,"name":"SetCurrentFolder","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"\"*.*\"","description":"A list of file types to display, separated by spaces e.g.<br><br><code>\"*.lua *.txt *.mdl\"</code>","isOptional":true,"isVarArg":false,"name":"fileTypes","type":"string"}],"description":"Sets the file type filter for the file list.\n\nThis accepts the same file extension wildcards as {{LibraryFunction|file|Find}}.","examples":[],"isConstructor":false,"name":"SetFileTypes","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"Whether or not to display files using {{Type|SpawnIcon}}s.","isOptional":true,"isVarArg":false,"name":"showModels","type":"SpawnIcon"}],"description":"Enables or disables the model viewer mode. In this mode, files are displayed as {{Type|SpawnIcon}}s instead of a list.\n\n{{Note|This should only be used for ''.mdl'' files; the spawn icons will display error models for others. See {{ClassFunction|DFileBrowser|SetFileTypes}}}}","examples":[],"isConstructor":false,"name":"SetModels","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"''baseFolder''","description":"The name for the root of the file tree. Passing no value causes this to be the base folder name. See {{ClassFunction|DFileBrowser|SetBaseFolder}}.","isOptional":true,"isVarArg":false,"name":"treeName","type":"string"}],"description":"Sets the name to use for the file tree.","examples":[],"isConstructor":false,"name":"SetName","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"''true'' to open the tree, ''false'' to close it.","isOptional":true,"isVarArg":false,"name":"open","type":"boolean"},{"default":"false","description":"If ''true'', the {{Type|DTree}}'s open/close animation is used.","isOptional":true,"isVarArg":false,"name":"useAnim","type":"DTree"}],"description":"Opens or closes the file tree.","examples":[],"isConstructor":false,"name":"SetOpen","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The access path i.e. \"GAME\", \"LUA\", \"DATA\" etc.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"Sets the access path for the file tree. This is set to ''GAME'' by default.\n\nSee {{LibraryFunction|file|Read}} for how paths work.","examples":[],"isConstructor":false,"name":"SetPath","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"\"*\"","description":"The filter to use on the file tree.","isOptional":true,"isVarArg":false,"name":"filter","type":"string"}],"description":"Sets the search filter for the file tree.\n\nThis accepts the same wildcards as {{LibraryFunction|file|Find}}.","examples":[],"isConstructor":false,"name":"SetSearch","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}} Called to set up the {{Type|DTree}} and file viewer when a base path has been set.\n\nCalls {{ClassFunction|DFileBrowser|SetupTree}} and {{ClassFunction|DFileBrowser|SetupFiles}}.","examples":[],"isConstructor":false,"name":"Setup","realm":"client","returns":[{"description":"Whether or not the variables needed to set up have been defined.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}} Called to set up the {{Type|DListView}} or {{Type|DIconBrowser}} by {{ClassFunction|DFileBrowser|Setup}}.\n\nThe icon browser is used when in models mode. See {{ClassFunction|DFileBrowser|SetModels}}.","examples":[],"isConstructor":false,"name":"SetupFiles","realm":"client","returns":[{"description":"Whether or not the files pane was set up successfully.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}} Called to set up the {{Type|DTree}} by {{ClassFunction|DFileBrowser|Setup}}.","examples":[],"isConstructor":false,"name":"SetupTree","realm":"client","returns":[{"description":"Whether or not the tree was set up successfully.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The directory to populate the list from.","isOptional":false,"isVarArg":false,"name":"currentDir","type":"string"}],"description":"{{Internal}}Builds the file or icon list for the current directory.\n\nYou should use {{ClassFunction|DFileBrowser|SetCurrentFolder}} to change the directory.","examples":[],"isConstructor":false,"name":"ShowFolder","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"The sort order. ''true'' for descending (z-a), ''false'' for ascending (a-z).","isOptional":true,"isVarArg":false,"name":"descending","type":"boolean"}],"description":"Sorts the file list.\n\n{{Note|This is only functional when not using the model viewer. See {{ClassFunction|DFileBrowser|SetModels}}}}","examples":[],"isConstructor":false,"name":"SortFiles","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Marks all of the panel's children for deletion.","examples":[],"isConstructor":false,"name":"Clear","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the internal name of the panel.","examples":[],"isConstructor":false,"name":"GetName","realm":"client","returns":[{"description":"name","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The new name of the panel.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Sets the internal name of the panel.","examples":[],"isConstructor":false,"name":"SetName","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DFileBrowser"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"List of all possible functions to manipulate Recipient Filters. Can be created with {{GlobalFunction|RecipientFilter}}.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Adds all players to the recipient filter.","examples":[{"code":"function SendMessage()\n\tlocal filter = RecipientFilter()\n\tfilter:AddAllPlayers()\n\tumsg.Start(\"message\",filter)\n\tumsg.End()\nend","description":"Adds all players to a recipient filter, then uses the recipient filter in a usermessage."}],"isConstructor":false,"name":"AddAllPlayers","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"PAS position that players may be able to see.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Adds all players that are in the same PAS as this position.","examples":[],"isConstructor":false,"name":"AddPAS","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player to add to the recipient filter.","isOptional":false,"isVarArg":false,"name":"Player","type":"Player"}],"description":"Adds a player to the recipient filter","examples":[{"code":"","description":""}],"isConstructor":false,"name":"AddPlayer","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"PVS position.","isOptional":false,"isVarArg":false,"name":"Position","type":"Vector"}],"description":"Adds all players that are in the same PVS as this position.","examples":[{"code":"function SendMessage()\n\tlocal filter = RecipientFilter()\n\tfilter:AddPVS( Vector( 0, 0, 0 ) )\n\tumsg.Start( \"message\", filter )\n\tumsg.End()\nend","description":"Adds players that are visible from the origin of the map to a recipient filter, then sends them a message."}],"isConstructor":false,"name":"AddPVS","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Team index to add players from.","isOptional":false,"isVarArg":false,"name":"teamid","type":"number"}],"description":"Adds all players that are on the given team to the filter.","examples":[],"isConstructor":false,"name":"AddRecipientsByTeam","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the number of valid players in the recipient filter.","examples":[{"code":"local rf = RecipientFilter()\nrf:AddAllPlayers()\nprint( rf:GetCount() )\nPrintTable( rf:GetPlayers() )","description":"Example usage of the function"}],"isConstructor":false,"name":"GetCount","realm":"server","returns":[{"description":"Number of valid players in the recipient filter.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table of all valid players currently in the recipient filter.","examples":[{"code":"local rf = RecipientFilter()\nrf:AddAllPlayers()\nprint( rf:GetCount() )\nPrintTable( rf:GetPlayers() )","description":"Example usage of the function"}],"isConstructor":false,"name":"GetPlayers","realm":"server","returns":[{"description":"A table of all valid players currently in the recipient filter.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Removes all players from the recipient filter.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"RemoveAllPlayers","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to test","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Removes all players from the filter that are in Potentially Audible Set for given position.","examples":[],"isConstructor":false,"name":"RemovePAS","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that should be in the recipient filter if you call this function.","isOptional":false,"isVarArg":false,"name":"Player","type":"Player"}],"description":"Removes the player from the recipient filter.","examples":[{"code":"util.AddNetworkString(\"message\")\nfunction SendMessage()\n\tlocal filter = RecipientFilter()\n\tfilter:AddAllPlayers()\n\tfilter:RemovePlayer(Entity(1))\n\tnet.Start(\"message\")\n\tnet.Send(filter)\nend","description":"Adds all players to the recipient filter, then removes the first player and sends a message to the rest."}],"isConstructor":false,"name":"RemovePlayer","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Position that players may be able to see.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Removes all players that can see this PVS from the recipient filter.","examples":[{"code":"function SendMessage()\n\tlocal filter = RecipientFilter()\n\tfilter:AddPVS( Vector( 0,0,0 ) )\n\tfilter:RemovePVS( Vector( 0,10,0 ) )\n\tumsg.Start( \"message\", filter )\n\tumsg.End()\nend","description":"Adds the first player object to the recipient filter, then sends him a message."}],"isConstructor":false,"name":"RemovePVS","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Team index to remove players from.","isOptional":false,"isVarArg":false,"name":"teamid","type":"number"}],"description":"Removes all players that are on the given team from the filter.","examples":[],"isConstructor":false,"name":"RemoveRecipientsByTeam","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Team index.","isOptional":false,"isVarArg":false,"name":"teamid","type":"number"}],"description":"Removes all players that are not on the given team from the filter.","examples":[],"isConstructor":false,"name":"RemoveRecipientsNotOnTeam","realm":"server","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"CRecipientFilter"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"'''CSEnt''' is a client-side only entity which can be created with {{GlobalFunction|ClientsideModel}}, {{GlobalFunction|ClientsideRagdoll}}, {{GlobalFunction|ClientsideScene}}, and {{LibraryFunction|ents|CreateClientProp}}.\n\nIts base class is {{Type|Entity}} so it inherits all of the {{Type|Client}} and {{Type|Shared}} functions used by {{Type|Entity}}.","examples":[],"extends":"Entity","functions":[{"accessModifier":"public","arguments":[],"description":"Removes the clientside entity","examples":[],"isConstructor":false,"name":"Remove","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"CSEnt"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"An easy form with functions to quickly add form elements","examples":[],"extends":"DCollapsibleCategory","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Left-hand element to add to the DForm.","isOptional":false,"isVarArg":false,"name":"left","type":"Panel"},{"default":"","description":"Right-hand element to add to the DForm.","isOptional":false,"isVarArg":false,"name":"right","type":"Panel"}],"description":"Adds one or two items to the DForm.\nIf this method is called with only one argument, it is added to the bottom of the form. If two arguments are passed, they are placed side-by-side at the bottom of the form.\n\nInternally, this function is used by the various DForm functions to, for example, add labels to the left of buttons.","examples":[],"isConstructor":false,"name":"AddItem","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text on the button","isOptional":false,"isVarArg":false,"name":"text","type":"string"},{"default":"","description":"The concommand to run when the button is clicked","isOptional":false,"isVarArg":false,"name":"concmd","type":"string"},{"default":"","description":"The arguments to pass on to the concommand when the button is clicked","isOptional":false,"isVarArg":true,"name":"concmd_args","type":"any"}],"description":"Adds a {{Type|DButton}} onto the {{Type|DForm}}","examples":[],"isConstructor":false,"name":"Button","realm":"client","returns":[{"description":"The created {{Type|DButton}}","type":"DButton"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The label to be set next to the check box","isOptional":false,"isVarArg":false,"name":"label","type":"string"},{"default":"","description":"The console variable to change when this is changed","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"Adds a {{Type|DCheckBoxLabel}} onto the {{Type|DForm}}","examples":[],"isConstructor":false,"name":"CheckBox","realm":"client","returns":[{"description":"The created {{Type|DCheckBoxLabel}}","type":"DCheckBoxLabel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Text to the left of the combo box","isOptional":false,"isVarArg":false,"name":"title","type":"string"},{"default":"","description":"Console variable to change when the user selects something from the dropdown.","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"Adds a {{Type|DComboBox}} onto the {{Type|DForm}}","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( ScrW() / 2, ScrH() / 2 )\nframe:MakePopup()\n\nlocal form = frame:Add(\"DForm\")\nform:Dock( FILL )\nform:DockMargin( 5, 5, 5, 5 )\n\nlocal combobox, label = form:ComboBox( \"test\", \"sv_accelerate\" )\ncombobox:AddChoice( \"10\" ) -- 10 will be used as convar value\ncombobox:AddChoice( \"1000\", 100 ) -- 100 will be used as convar value","description":""}],"isConstructor":false,"name":"ComboBox","realm":"client","returns":[{"description":"The created {{Type|DComboBox}}","type":"DComboBox"},{"description":"The created {{Type|DLabel}}","type":"DLabel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The help message to be displayed.","isOptional":false,"isVarArg":false,"name":"help","type":"string"}],"description":"Adds a {{Type|DLabel}} onto the {{Type|DForm}}. Unlike {{ClassFunction|DForm|Help}}, this is indented and is colored blue, depending on the derma skin.","examples":[],"isConstructor":false,"name":"ControlHelp","realm":"client","returns":[{"description":"The created {{Type|DLabel}}","type":"DLabel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The help message to be displayed","isOptional":false,"isVarArg":false,"name":"help","type":"string"}],"description":"Adds a {{Type|DLabel}} onto the {{Type|DForm}} as a helper","examples":[],"isConstructor":false,"name":"Help","realm":"client","returns":[{"description":"The created {{Type|DLabel}}","type":"DLabel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The label to set on the DListBox","isOptional":false,"isVarArg":false,"name":"label","type":"string"}],"description":"Adds a {{Type|DListBox}} onto the {{Type|DForm}}","examples":[],"isConstructor":false,"name":"ListBox","realm":"client","returns":[{"description":"The created {{Type|DListBox}}","type":"DListBox"},{"description":"The created {{Type|DLabel}}","type":"DLabel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The label to be placed next to the DNumberWang","isOptional":false,"isVarArg":false,"name":"label","type":"string"},{"default":"","description":"The console variable to change when the slider is changed","isOptional":false,"isVarArg":false,"name":"convar","type":"string"},{"default":"","description":"The minimum value of the slider","isOptional":false,"isVarArg":false,"name":"min","type":"number"},{"default":"","description":"The maximum value of the slider","isOptional":false,"isVarArg":false,"name":"max","type":"number"},{"default":"nil","description":"The number of decimals to allow in the slider (Optional)","isOptional":true,"isVarArg":false,"name":"decimals","type":"number"}],"description":"Adds a {{Type|DNumberWang}} onto the {{Type|DForm}}","examples":[],"isConstructor":false,"name":"NumberWang","realm":"client","returns":[{"description":"The created {{Type|DNumberWang}}","type":"DNumberWang"},{"description":"The created {{Type|DLabel}}","type":"DLabel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The label of the DNumSlider","isOptional":false,"isVarArg":false,"name":"label","type":"string"},{"default":"","description":"The console variable to change when the slider is changed","isOptional":false,"isVarArg":false,"name":"convar","type":"string"},{"default":"","description":"The minimum value of the slider","isOptional":false,"isVarArg":false,"name":"min","type":"number"},{"default":"","description":"The maximum value of the slider","isOptional":false,"isVarArg":false,"name":"max","type":"number"},{"default":"nil","description":"The number of decimals to allow on the slider. (Optional)","isOptional":true,"isVarArg":false,"name":"decimals","type":"number"}],"description":"Adds a {{Type|DNumSlider}} onto the {{Type|DForm}}","examples":[],"isConstructor":false,"name":"NumSlider","realm":"client","returns":[{"description":"The created {{Type|DNumSlider}}","type":"DNumSlider"}]},{"accessModifier":"public","arguments":[],"description":"Creates a {{Type|DPanelSelect}} and docks it to the top of the DForm.","examples":[],"isConstructor":false,"name":"PanelSelect","realm":"client","returns":[{"description":"The created DPanelSelect.","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nDoes nothing.","examples":[],"isConstructor":false,"name":"Rebuild","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new header name.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Sets the title (header) name of the DForm. This is ''Label'' until set.","examples":[],"isConstructor":false,"name":"SetName","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The label to be next to the text entry","isOptional":false,"isVarArg":false,"name":"label","type":"string"},{"default":"","description":"The console variable to be changed when the text entry is changed","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"Adds a {{Type|DTextEntry}} to a {{Type|DForm}}","examples":[],"isConstructor":false,"name":"TextEntry","realm":"client","returns":[{"description":"The created {{Type|DTextEntry}}","type":"DTextEntry"},{"description":"The created {{Type|DLabel}}","type":"DLabel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The new name of the panel.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Sets the internal name of the panel.","examples":[],"isConstructor":false,"name":"SetName","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DForm"},{"classFields":[],"collectionType":"class","customConstructor":"CreateSound","description":"CSoundPatch class.\n\nCreated with {{GlobalFunction|CreateSound}}","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The target entity.","isOptional":false,"isVarArg":false,"name":"targetEnt","type":"Entity"},{"default":"","description":"The sound to play.","isOptional":false,"isVarArg":false,"name":"soundName","type":"string"},{"default":"[https://developer.valvesoftware.com/wiki/CRecipientFilter#Derived_classes CPASAttenuationFilter]","description":"A {{Type|CRecipientFilter}} of the players that will have this sound networked to them.\n\n{{Note|This argument only works serverside.}}","isOptional":true,"isVarArg":false,"name":"filter","type":"CRecipientFilter"}],"description":"Returns a sound parented to the specified entity.\n\n{{Note|You can only create one CSoundPatch per audio file, per entity at the same time.}}","examples":[{"code":"local LoadedSounds\nif CLIENT then\n\tLoadedSounds = {} -- this table caches existing CSoundPatches\nend\n\nlocal function ReadSound( FileName )\n\tlocal sound\n\tlocal filter\n\tif SERVER then\n\t\tfilter = RecipientFilter()\n\t\tfilter:AddAllPlayers()\n\tend\n\tif SERVER or !LoadedSounds[FileName] then\n\t\t-- The sound is always re-created serverside because of the RecipientFilter.\n\t\tsound = CreateSound( game.GetWorld(), FileName, filter ) -- create the new sound, parented to the worldspawn (which always exists)\n\t\tif sound then\n\t\t\tsound:SetSoundLevel( 0 ) -- play everywhere\n\t\t\tif CLIENT then\n\t\t\t\tLoadedSounds[FileName] = { sound, filter } -- cache the CSoundPatch\n\t\t\tend\n\t\tend\n\telse\n\t\tsound = LoadedSounds[FileName][1]\n\t\tfilter = LoadedSounds[FileName][2]\n\tend\n\tif sound then\n\t\tif CLIENT then\n\t\t\tsound:Stop() -- it won't play again otherwise\n\t\tend\n\t\tsound:Play()\n\tend\n\treturn sound -- useful if you want to stop the sound yourself\nend\n\n-- When we are ready, we play the sound:\nReadSound( \"phx/hmetal1.wav\" )","description":"Play a sound everywhere, similar to {{LibraryFunction|surface|PlaySound}} but available clientside and serverside."}],"isConstructor":true,"name":"constructor","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The pitch can range from 0-255.","isOptional":false,"isVarArg":false,"name":"pitch","type":"number"},{"default":"0","description":"The time to fade from previous to the new pitch.","isOptional":true,"isVarArg":false,"name":"deltaTime","type":"number"}],"description":"Adjust the pitch, alias the speed at which the sound is being played.\n\nThis invokes the {{HookFunction|GM|EntityEmitSound}}.","examples":[],"isConstructor":false,"name":"ChangePitch","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The volume ranges from 0 to 1.","isOptional":false,"isVarArg":false,"name":"volume","type":"number"},{"default":"0","description":"Time to fade the volume from previous to new value from.","isOptional":true,"isVarArg":false,"name":"deltaTime","type":"number"}],"description":"Adjusts the volume of the sound played.<br>\nAppears to only work while the sound is being played.","examples":[],"isConstructor":false,"name":"ChangeVolume","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Fade time.","isOptional":false,"isVarArg":false,"name":"seconds","type":"number"}],"description":"Fades out the volume of the sound from the current volume to 0 in the given amount of seconds.","examples":[],"isConstructor":false,"name":"FadeOut","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the DSP ( Digital Signal Processor ) effect for the sound.","examples":[],"isConstructor":false,"name":"GetDSP","realm":"shared","returns":[{"description":"The DSP effects of the sound\nList of DSP's are Pick from the [https://developer.valvesoftware.com/wiki/Dsp_presets here].","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current pitch.","examples":[],"isConstructor":false,"name":"GetPitch","realm":"shared","returns":[{"description":"The current pitch, can range from 0-255.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current sound level.","examples":[],"isConstructor":false,"name":"GetSoundLevel","realm":"shared","returns":[{"description":"The current sound level, see {{Enum|SNDLVL}}.","type":"SNDLVL"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current volume.","examples":[],"isConstructor":false,"name":"GetVolume","realm":"shared","returns":[{"description":"The current volume, ranging from 0 to 1.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the sound is being played.","examples":[],"isConstructor":false,"name":"IsPlaying","realm":"shared","returns":[{"description":"Is playing or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Starts to play the sound.","examples":[{"code":"local mysound = CreateSound( \"test.wav\" )\nmysound:Play()","description":"Example usage"}],"isConstructor":false,"name":"Play","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The volume ranges from 0 to 1.","isOptional":false,"isVarArg":false,"name":"volume","type":"number"},{"default":"","description":"The pitch can range from 0-255.","isOptional":false,"isVarArg":false,"name":"pitch","type":"number"}],"description":"Same as {{ClassFunction|CSoundPatch|Play}} but with 2 extra arguments allowing to set volume and pitch directly.","examples":[],"isConstructor":false,"name":"PlayEx","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The DSP effect to set.\nPick from the [https://developer.valvesoftware.com/wiki/Dsp_presets list of DSP's]","isOptional":false,"isVarArg":false,"name":"dsp","type":"number"}],"description":"Sets the DSP ( Digital Signal Processor ) effect for the sound. Similar to {{ClassFunction|Player|SetDSP}}","examples":[],"isConstructor":false,"name":"SetDSP","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The sound level in decibel. See {{Enum|SNDLVL}}","isOptional":false,"isVarArg":false,"name":"level","type":"SNDLVL"}],"description":"Sets the sound level in decibel.","examples":[],"isConstructor":false,"name":"SetSoundLevel","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Stops the sound from being played.\n\n{{Bug|Issue=3260|This will not work if the entity attached to this sound patch (specified by {{GlobalFunction|CreateSound}}) is invalid.}}","examples":[],"isConstructor":false,"name":"Stop","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"CSoundPatch"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The game library provides functions to access various features in the game's engine, most of it's functions are related to controlling the map.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The attributes of the ammo. See the {{Struct|AmmoData}}.","isOptional":false,"isVarArg":false,"name":"ammoData","type":"AmmoData"}],"description":"Adds a new ammo type to the game.\n\nYou can find a list of default ammo types [[Default_Ammo_Types|here]].\n\n{{Warning|This function must be called shared or you will have unexpected problems.}}\n{{Note|There is a limit of 128 ammo types, including the default ones.}}\n{{Bug|Pull=1487|This will have unpredictable results when registering ammo types with the same name but different capitalisation.}}","examples":[{"code":"game.AddAmmoType({\n\tname = \"ammo_9mm_max\",\n\tdmgtype = DMG_BULLET,\n\ttracer = TRACER_LINE,\n\tplydmg = 0,\n\tnpcdmg = 0,\n\tforce = 2000,\n\tminsplash = 10,\n\tmaxsplash = 5\n})","description":"Add an ammo type"}],"isConstructor":false,"name":"AddAmmoType","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the decal.","isOptional":false,"isVarArg":false,"name":"decalName","type":"string"},{"default":"","description":"The material to be used for the decal. May also be a list of material names, in which case a random material from that list will be chosen every time the decal is placed.","isOptional":false,"isVarArg":false,"name":"materialName","type":"string"}],"description":"Registers a new decal.\n\n{{Warning|There's a rather low limit of around 256 for decals that may be registered and they are not cleared on map load.}}","examples":[],"isConstructor":false,"name":"AddDecal","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path of the file to add. Must be (file).pcf.","isOptional":false,"isVarArg":false,"name":"particleFileName","type":"string"}],"description":"Loads a particle file.\n\n{{Note|You will still need to call this function clientside regardless if you create the particle effects serverside.}}","examples":[{"code":"game.AddParticles( \"particles/explosion.pcf\" )\nPrecacheParticleSystem( \"ExplosionCore_wall\" )\n\nif ( SERVER ) then\n\t-- A test console command to see if the particle works, spawns the particle where the player is looking at. \n\tconcommand.Add( \"particleitup\", function( ply, cmd, args )\n\t\tParticleEffect( \"ExplosionCore_wall\", ply:GetEyeTrace().HitPos, Angle( 0, 0, 0 ) )\n\tend )\nend","description":"Example usage of the function. Precaches \"ExplosionCore_wall\" particle from \"particles/explosion.pcf\", a Team Fortress 2 particle file.\n\nYou can find a list of particles inside a .pcf file using the [https://developer.valvesoftware.com/wiki/Particle_Editor Particle Editor Tool]"}],"isConstructor":false,"name":"AddParticles","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\nCalled by the engine to retrieve the ammo types.","examples":[],"isConstructor":false,"name":"BuildAmmoTypes","realm":"shared","returns":[{"description":"All ammo types registered via {{LibraryFunction|game|AddAmmoType}}, sorted by its name value.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"false","description":"If set to true, don't run this functions on all clients.","isOptional":true,"isVarArg":false,"name":"dontSendToClients","type":"boolean"},{"default":"{}","description":"Entity classes not to reset during cleanup.","isOptional":true,"isVarArg":false,"name":"ExtraFilters","type":"table"}],"description":"If called serverside it will remove ALL entities which were not created by the map(not players or weapons held by players).\n\nOn the client it will remove decals, sounds, gibs, dead NPCs, and entities created via {{LibraryFunction|ents|CreateClientProp}}.\n\nThis function calls {{HookFunction|GM|PreCleanupMap}} before cleaning up the map and {{HookFunction|GM|PostCleanupMap}} after cleaning up the map.\n\n{{Bug|Issue=1142|Calling this in a {{HookFunction|ENTITY|StartTouch}} or {{HookFunction|ENTITY|Touch}} hook will crash the game.}}\n\n{{Bug|Issue=2874|Calling this destroys all BASS streams.}}\n\n{{Bug|Issue=3637|This can crash when removing _firesmoke entities.}}","examples":[],"isConstructor":false,"name":"CleanUpMap","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"String containing the command and arguments to be ran.","isOptional":false,"isVarArg":false,"name":"stringCommand","type":"string"}],"description":"Runs a console command.\nMake sure to add a newline (\"\\n\") at the end of the command.\n\n{{Warning|If you use data that were received from a client, you should avoid using this function because newline and semicolon (at least) allow the client to run arbitrary commands!\n\nFor safety, you are urged to prefer using {{GlobalFunction|RunConsoleCommand}} in this case.}}","examples":[{"code":"game.ConsoleCommand(\"sv_gravity 400\\n\")","description":"Changes the gravity to 400 (default 600)."}],"isConstructor":false,"name":"ConsoleCommand","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Ammo ID to retrieve the damage type of. Starts from 1.","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Returns the damage type of given ammo type.","examples":[],"isConstructor":false,"name":"GetAmmoDamageType","realm":"shared","returns":[{"description":"See {{Enum|DMG}}","type":"DMG"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Ammo ID to retrieve the force of. Starts from 1.","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Returns the ammo bullet force that is applied when an entity is hit by a bullet of given ammo type.","examples":[],"isConstructor":false,"name":"GetAmmoForce","realm":"shared","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the ammo type to look up ID of","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Returns the ammo type ID for given ammo type name.\n\nSee {{LibraryFunction|game|GetAmmoName}} for reverse.","examples":[],"isConstructor":false,"name":"GetAmmoID","realm":"shared","returns":[{"description":"The ammo type ID of given ammo type name, or -1 if not found","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Ammo type ID","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Returns the real maximum amount of ammo of given ammo ID.\n\n{{Note|Currently all ammo types have overridden maximum value of reserve ammo set to 9999.}}","examples":[],"isConstructor":false,"name":"GetAmmoMax","realm":"shared","returns":[{"description":"The maximum amount of reserve ammo a player can hold of this ammo type.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Ammo ID to retrieve the name of. Starts from 1.","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Returns the ammo name for given ammo type ID.\n\nSee {{LibraryFunction|game|GetAmmoID}} for reverse.","examples":[],"isConstructor":false,"name":"GetAmmoName","realm":"shared","returns":[{"description":"The name of given ammo type ID or nil if ammo type ID is invalid.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Ammo ID to retrieve the damage info of. Starts from 1.","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Returns the damage given ammo type should do to NPCs.","examples":[],"isConstructor":false,"name":"GetAmmoNPCDamage","realm":"shared","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Ammo ID to retrieve the damage info of. Starts from 1.","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Returns the damage given ammo type should do to players.","examples":[],"isConstructor":false,"name":"GetAmmoPlayerDamage","realm":"shared","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the Global State to set. \n\nIf the Global State by that name does not exist, it will be created.\n\nSee [[Global States]] for a list of default global states.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Returns the counter of a Global State.\n\nSee [[Global States]] for more information.","examples":[],"isConstructor":false,"name":"GetGlobalCounter","realm":"server","returns":[{"description":"The value of the given Global State, 0 if the global state doesn't exist.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the Global State to retrieve the state of. \n\nIf the Global State by that name does not exist, '''GLOBAL_DEAD''' will be returned.\n\nSee [[Global States]] for a list of default global states.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Returns whether a Global State is off, active or dead ( inactive )\n\nSee [[Global States]] for more information.","examples":[],"isConstructor":false,"name":"GetGlobalState","realm":"server","returns":[{"description":"The state of the Global State. See {{Enum|GLOBAL}}","type":"GLOBAL"}]},{"accessModifier":"public","arguments":[],"description":"Returns the public IP address and port of the current server. This will return the IP/port that you are connecting through when ran clientside.\n{{Note|Returns \"0.0.0.0:0\" in singleplayer.}}\n\n{{Bug|Issue=3001|Returns \"0.0.0.0:''port''\" on the server when called too early, including in {{HookFunction|GM|Initialize}} and {{HookFunction|GM|InitPostEntity}}. This bug seems to only happen the first time a server is launched, and will return the correct value after switching maps.}}","examples":[],"isConstructor":false,"name":"GetIPAddress","realm":"shared","returns":[{"description":"The IP address and port in the format \"x.x.x.x:x\"","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the name of the current map, without a file extension.\nOn the menu state, returns \"menu\".","examples":[{"code":"print(game.GetMap())","description":""}],"isConstructor":false,"name":"GetMap","realm":"shared and menu","returns":[{"description":"The name of the current map, without a file extension.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the next map that would be loaded according to the file that is set by the mapcyclefile convar.","examples":[],"isConstructor":false,"name":"GetMapNext","realm":"server","returns":[{"description":"nextMap","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the VBSP version of the current map.","examples":[],"isConstructor":false,"name":"GetMapVersion","realm":"shared","returns":[{"description":"mapVersion","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the difficulty level of the game.\n\n'''TIP:''' You can use this function in your scripted NPCs or Nextbots to make them harder, however, it is a good idea to lock powerful attacks behind the highest difficulty instead of just increasing the health.\n\n{{Note|Internally this is tied to the gamerules entity, so you'll have to wait to wait until {{HookFunction|GM|InitPostEntity}} is called to return the skill level }}","examples":[],"isConstructor":false,"name":"GetSkillLevel","realm":"shared","returns":[{"description":"The difficulty level, Easy( 1 ), Normal( 2 ), Hard( 3 ).","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the time scale of the game","examples":[],"isConstructor":false,"name":"GetTimeScale","realm":"shared","returns":[{"description":"The time scale","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the worldspawn entity.","examples":[],"isConstructor":false,"name":"GetWorld","realm":"shared","returns":[{"description":"The world","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the server is a dedicated server, false if it is a [[wikipedia:Listen server|Listen server]] or a singleplayer game.\n\n{{Bug|Issue=1495|This always returns false on the client.}}","examples":[],"isConstructor":false,"name":"IsDedicated","realm":"shared","returns":[{"description":"Is the server dedicated or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"UserID or SteamID of the player to kick.","isOptional":false,"isVarArg":false,"name":"id","type":"string"},{"default":"\"No reason given\"","description":"Reason to display to the player. This can span across multiple lines.","isOptional":true,"isVarArg":false,"name":"reason","type":"string"}],"description":"Kicks a player from the server. This can be ran before the player has spawned.","examples":[],"isConstructor":false,"name":"KickID","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Loads the next map according to the nextlevel convar, or from the current mapcycle file set by the respective convar.","examples":[],"isConstructor":false,"name":"LoadNextMap","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the map load type of the current map.\n\nAfter changing the map with the console command ''changelevel'', \"newgame\" is returned. With ''changelevel2'' (single player only), \"transition\" is returned.","examples":[],"isConstructor":false,"name":"MapLoadType","realm":"server","returns":[{"description":"The load type. Possible values are: \"newgame\", \"loadgame\", \"transition\", \"background\".","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the maximum amount of players (including bots) that the server can have.","examples":[],"isConstructor":false,"name":"MaxPlayers","realm":"shared","returns":[{"description":"The maximum amount of players","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Location of the GMA file to mount, relative to the garrysmod directory","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"Mounts a GMA addon from the disk. Any error models currently loaded that the mounted addon provides will be reloaded.\n\nCan be used with {{LibraryFunction|steamworks|Download}}","examples":[{"code":"steamworks.FileInfo( 104548572, function( result )\n\tsteamworks.Download( result.fileid, true, function( name )\n\t\tgame.MountGMA( name )\n\tend) \nend)","description":"Downloads the Playable Piano addon and mounts the content."}],"isConstructor":false,"name":"MountGMA","realm":"shared","returns":[{"description":"success","type":"boolean"},{"description":"If successful, a table of files that have been mounted","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Removes all the clientside ragdolls.","examples":[{"code":"timer.Create( \"removeRagdolls\", 3, 0, function() game.RemoveRagdolls() end )","description":"This will remove all the client ragdolls every 3 secconds."}],"isConstructor":false,"name":"RemoveRagdolls","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the Global State to set. \n\nIf the Global State by that name does not exist, it will be created.\n\nSee [[Global States]] for a list of default global states.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The value to set for that Global State.","isOptional":false,"isVarArg":false,"name":"count","type":"number"}],"description":"Sets the counter of a Global State.\n\nSee [[Global States]] for more information.","examples":[],"isConstructor":false,"name":"SetGlobalCounter","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the Global State to set. \n\nIf the Global State by that name does not exist, it will be created.\n\nSee [[Global States]] for a list of default global states.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The state of the Global State. See {{Enum|GLOBAL}}","isOptional":false,"isVarArg":false,"name":"state","type":"GLOBAL"}],"description":"Sets whether a Global State is off, active or dead ( inactive )\n\nSee [[Global States]] for more information.","examples":[],"isConstructor":false,"name":"SetGlobalState","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The difficulty level, Easy( 1 ), Normal( 2 ), Hard( 3 ).","isOptional":false,"isVarArg":false,"name":"level","type":"number"}],"description":"Sets the difficulty level of the game, can be retrieved with {{LibraryFunction|game|GetSkillLevel}}.\n\nThis will automatically change whenever the \"skill\" convar is modified serverside.\n\n{{Bug|Issue=3491|This function will not work if the skill convar doesn't match the targeted value. To work around this, you must use RunConsoleCommand(\"skill\", num) alongside this function.}}","examples":[],"isConstructor":false,"name":"SetSkillLevel","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new timescale, minimum value is 0.001 and maximum is 5.","isOptional":false,"isVarArg":false,"name":"timeScale","type":"number"}],"description":"Sets the time scale of the game.\n\nThis function is supposed to remove the need of using the host_timescale convar, which is cheat protected.\n\nTo slow down or speed up the movement of a specific player, use {{ClassFunction|Player|SetLaggedMovementValue}} instead.\n\n{{Note|Like host_timescale, this method does not affect sounds, if you wish to change that, look into {{HookFunction|GM|EntityEmitSound}}.}}","examples":[],"isConstructor":false,"name":"SetTimeScale","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the current session is a single player game.","examples":[],"isConstructor":false,"name":"SinglePlayer","realm":"shared","returns":[{"description":"isSinglePlayer","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns position the player should start from, this is not the same thing as spawn points, it is used to properly transit the player between maps.","examples":[],"isConstructor":false,"name":"StartSpot","realm":"shared","returns":[{"description":"startSpot","type":"Vector"}]}],"isHook":false,"isPureAbstract":false,"name":"game"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"Used to interface with the built in game events system.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The event to listen to, travels through hooks with eventName as event.<br />\nList of valid events can be found [[Game_Events|here]].","isOptional":false,"isVarArg":false,"name":"eventName","type":"string"}],"description":"Add a game event listener.","examples":[{"code":"gameevent.Listen( \"player_connect\" )\nhook.Add(\"player_connect\", \"AnnounceConnection\", function( data )\n\tfor k,v in pairs( player.GetAll() ) do\n\t\tv:ChatPrint( data.name .. \" has connected to the server.\" )\n\tend\nend)","description":"Announce to everyone that a player has connected."},{"code":"gameevent.Listen( \"player_connect\" )\nhook.Add( \"player_connect\", \"player_connect_example\", function( data )\n\tlocal name = data.name\t\t\t// Same as Player:Nick()\n\tlocal steamid = data.networkid\t// Same as Player:SteamID()\n\tlocal ip = data.address\t\t\t// Same as Player:IPAddress()\n\tlocal id = data.userid\t\t\t// Same as Player:UserID()\n\tlocal bot = data.bot\t\t\t// Same as Player:IsBot()\n\tlocal index = data.index\t\t// Same as Player:EntIndex()\n\n\t// Player has connected; this happens instantly after they join -- do something..\n\nend )","description":"This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_connect. player_connect is triggered at the exact moment they join the server."},{"code":"gameevent.Listen( \"player_disconnect\" )\nhook.Add( \"player_disconnect\", \"player_disconnect_example\", function( data )\n\tlocal name = data.name\t\t\t// Same as Player:Nick()\n\tlocal steamid = data.networkid\t\t// Same as Player:SteamID()\n\tlocal id = data.userid\t\t\t// Same as Player:UserID()\n\tlocal bot = data.bot\t\t\t// Same as Player:IsBot()\n\tlocal reason = data.reason\t\t// Text reason for disconnected such as \"Kicked by console!\", \"Timed out!\", etc...\n\n\t// Player has disconnected - this is more reliable than PlayerDisconnect\n\t\nend )","description":"This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_disconnect. player_disconnect is triggered at the exact moment they disconnect from the server and will ALWAYS trigger regardless of whether they time-out, are kick/banned, client crashes, they click the X, they type quit in console, etc..."},{"code":"gameevent.Listen( \"player_spawn\" )\nhook.Add( \"player_spawn\", \"player_spawn_example\", function( data ) \n\tlocal id = data.userid\t// Same as Player:UserID()\n\n\t// Called when the player spawns initially or respawns.\n\nend )","description":"This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_spawn. player_spawn is triggered when the player initially spawns, or respawns."},{"code":"gameevent.Listen( \"player_hurt\" )\nhook.Add( \"player_hurt\", \"player_hurt_example\", function( data ) \n\tlocal health = data.health\t\t\t\t// Remaining health after injury\n\tlocal priority = SERVER and data.Priority or 5 \t\t// Priority ??\n\tlocal id = data.userid\t\t\t\t\t// Same as Player:UserID()\n\tlocal attackerid = data.attacker\t\t\t// Same as Player:UserID() but it's the attacker id.\n\n\t// Called when the player is injured or dies.\n\nend )","description":"This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_hurt. player_hurt is triggered when the player is injured or dies.\n\nThe SERVER receives 1 extra value - Priority."},{"code":"gameevent.Listen( \"player_say\" )\nhook.Add( \"player_say\", \"player_say_example\", function( data ) \n\tlocal priority = SERVER and data.Priority or 1 \t// Priority ??\n\tlocal id = data.userid\t\t\t\t// Same as Player:UserID() for the speaker\n\tlocal text = data.text\t\t\t\t// The written text.\n\n\t// Called when a player writes text ( Called by the SERVER on the client AFTER the PlayerSay hook )\n\nend )","description":"This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_hurt. player_hurt is triggered when the player is injured or dies.\n\nThe SERVER receives 1 extra value - Priority."},{"code":"gameevent.Listen( \"entity_killed\" )\nhook.Add( \"entity_killed\", \"entity_killed_example\", function( data ) \n\tlocal inflictor_index = data.entindex_inflictor\t\t// Same as Weapon:EntIndex() / weapon used to kill victim\n\tlocal attacker_index = data.entindex_attacker\t\t// Same as Player/Entity:EntIndex() / person or entity who did the damage\n\tlocal damagebits = data.damagebits\t\t\t// DAMAGE_TYPE - use BIT operations to decipher damage types...\n\tlocal victim_index = data.entindex_killed\t\t// Same as Victim:EntIndex() / the entity / player victim\n\n\t// Called when a Player or Entity is killed\n\nend )","description":"This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: entity_killed. entity_killed is triggered when the player or entity dies."}],"isConstructor":false,"name":"Listen","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"gameevent"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The gamemode library provides functions relating to the gamemode system in Garry's Mod.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The name of the hook to call.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The arguments","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Called by the engine to call a hook within the loaded gamemode.\n\nThe supplied event 'name' must be defined in the active gamemode. Otherwise, nothing will happen - not even hooks added with {{LibraryFunction|hook|Add}} will be called.\n\nThis is similar to {{LibraryFunction|hook|Run}} and {{LibraryFunction|hook|Call}}, except the hook library will call hooks created with hook.Add even if there is no corresponding gamemode function.","examples":[{"code":"local ply = Entity(1)\ngamemode.Call( \"AddDeathNotice\", ply:GetName(), ply:Team(), nil, ply:GetName(), ply:Team() )","description":"Shows a suicide death notice in Sandbox."}],"isConstructor":false,"name":"Call","realm":"shared","returns":[{"description":"The result of the hook function - can be up to 6 values. Returns false if the gamemode function doesn't exist (i.e. nothing happened), but remember - a hook can also return false.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the gamemode you want to get","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"{{Internal}} This returns the internally stored gamemode table.","examples":[],"isConstructor":false,"name":"Get","realm":"shared","returns":[{"description":"The gamemode's table","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Your GM table","isOptional":false,"isVarArg":false,"name":"gm","type":"table"},{"default":"","description":"Name of your gamemode, lowercase, no spaces.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The gamemode name that your gamemode is derived from","isOptional":false,"isVarArg":false,"name":"derived","type":"string"}],"description":"{{Internal}}Called by the engine when a gamemode is being loaded.","examples":[],"isConstructor":false,"name":"Register","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"gamemode"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"The DFrame control is the foundation for any Derma menu. It holds all of your controls.","examples":[{"code":"local DermaPanel = vgui.Create( \"DFrame\" )\nDermaPanel:SetPos( 100, 100 )\nDermaPanel:SetSize( 300, 200 )\nDermaPanel:SetTitle( \"My new Derma frame\" )\nDermaPanel:SetDraggable( true )\nDermaPanel:MakePopup()","description":"Creates a DFrame."}],"extends":"EditablePanel","functions":[{"accessModifier":"public","arguments":[],"description":"Centers the frame relative to the whole screen and invalidates its layout. This overrides {{ClassFunction|Panel|Center}}.","examples":[],"isConstructor":false,"name":"Center","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Hides or removes the DFrame, and calls {{ClassFunction|DFrame|OnClose}}.\n\nTo set whether the frame is hidden or removed, use {{ClassFunction|DFrame|SetDeleteOnClose}}.","examples":[],"isConstructor":false,"name":"Close","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Gets whether the background behind the frame is being blurred.","examples":[],"isConstructor":false,"name":"GetBackgroundBlur","realm":"client","returns":[{"description":"Whether or not background blur is enabled.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Determines whether or not the DFrame will be removed when it is closed. This is set with {{ClassFunction|DFrame|SetDeleteOnClose}}.","examples":[],"isConstructor":false,"name":"GetDeleteOnClose","realm":"client","returns":[{"description":"Whether or not the frame will be removed on close.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Gets whether or not the frame is draggable by the user.","examples":[],"isConstructor":false,"name":"GetDraggable","realm":"client","returns":[{"description":"Whether the frame is draggable or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Gets whether or not the frame is part of a derma menu. This is set with {{ClassFunction|DFrame|SetIsMenu}}.","examples":[],"isConstructor":false,"name":"GetIsMenu","realm":"client","returns":[{"description":"Whether or not this frame is a menu component.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Gets the minimum height the DFrame can be resized to by the user.\n\nYou must call {{ClassFunction|DFrame|SetSizable}} before the user can resize the frame.","examples":[],"isConstructor":false,"name":"GetMinHeight","realm":"client","returns":[{"description":"The minimum height the user can resize the frame to.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the minimum width the DFrame can be resized to by the user.\n\nYou must call {{ClassFunction|DFrame|SetSizable}} before the user can resize the frame.","examples":[],"isConstructor":false,"name":"GetMinWidth","realm":"client","returns":[{"description":"The minimum width the user can resize the frame to.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets whether or not the shadow effect bordering the DFrame is being drawn.","examples":[],"isConstructor":false,"name":"GetPaintShadow","realm":"client","returns":[{"description":"Whether or not the shadow is being drawn.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Gets whether or not the DFrame is restricted to the boundaries of the screen resolution.","examples":[],"isConstructor":false,"name":"GetScreenLock","realm":"client","returns":[{"description":"Whether or not the frame is restricted.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Gets whether or not the DFrame can be resized by the user.\n\nThis is achieved by clicking and dragging in the bottom right corner of the frame.","examples":[],"isConstructor":false,"name":"GetSizable","realm":"client","returns":[{"description":"Whether the frame can be resized or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the title of the frame.","examples":[],"isConstructor":false,"name":"GetTitle","realm":"client","returns":[{"description":"Title of the frame.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Determines if the frame or one of its children has the screen focus.","examples":[],"isConstructor":false,"name":"IsActive","realm":"client","returns":[{"description":"Whether or not the frame has focus.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called when the DFrame is closed with {{ClassFunction|DFrame|Close}}. This applies when the ''close'' button in the DFrame's control box is clicked.\n\nThis is '''not''' called when the DFrame is removed with {{ClassFunction|Panel|Remove}}.","examples":[],"isConstructor":false,"name":"OnClose","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether or not to create background blur or not.","isOptional":false,"isVarArg":false,"name":"blur","type":"boolean"}],"description":"Blurs background behind the frame.","examples":[],"isConstructor":false,"name":"SetBackgroundBlur","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether or not to delete the frame on close. This is ''true'' by default.","isOptional":false,"isVarArg":false,"name":"shouldDelete","type":"boolean"}],"description":"Determines whether or not the DFrame is removed when it is closed with {{ClassFunction|DFrame|Close}}.","examples":[],"isConstructor":false,"name":"SetDeleteOnClose","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to be draggable or not.","isOptional":false,"isVarArg":false,"name":"draggable","type":"boolean"}],"description":"Sets whether the frame should be draggable by the user. The DFrame can only be dragged from its title bar.","examples":[],"isConstructor":false,"name":"SetDraggable","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Set to nil to remove the icon.\n\nOtherwise, set to file path to create the icon.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"Adds or removes an icon on the left of the {{Type|DFrame}}'s title.","examples":[],"isConstructor":false,"name":"SetIcon","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether or not this frame is a menu component.","isOptional":false,"isVarArg":false,"name":"isMenu","type":"boolean"}],"description":"Sets whether the frame is part of a derma menu or not.\n\nIf this is set to ''true'', {{GlobalFunction|CloseDermaMenus}} will not be called when the frame is clicked, and thus any open menus will remain open.","examples":[],"isConstructor":false,"name":"SetIsMenu","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum height the user can resize the frame to.","isOptional":false,"isVarArg":false,"name":"minH","type":"number"}],"description":"Sets the minimum height the DFrame can be resized to by the user.\n\nThis only applies to users attempting to resize the frame; {{ClassFunction|Panel|SetTall}} and similar methods will not be affected. You must call {{ClassFunction|DFrame|SetSizable}} before the user can resize the frame.","examples":[],"isConstructor":false,"name":"SetMinHeight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum width the user can resize the frame to.","isOptional":false,"isVarArg":false,"name":"minW","type":"number"}],"description":"Sets the minimum width the DFrame can be resized to by the user.\n\nThis only applies to users attempting to resize the frame; {{ClassFunction|Panel|SetWide}} and similar methods will not be affected. You must call {{ClassFunction|DFrame|SetSizable}} before the user can resize the frame.","examples":[],"isConstructor":false,"name":"SetMinWidth","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether or not to draw the shadow. This is ''true'' by default.","isOptional":false,"isVarArg":false,"name":"shouldPaint","type":"boolean"}],"description":"Sets whether or not the shadow effect bordering the DFrame should be drawn.","examples":[],"isConstructor":false,"name":"SetPaintShadow","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"If ''true'', the frame cannot be dragged outside of the screen bounds","isOptional":false,"isVarArg":false,"name":"lock","type":"boolean"}],"description":"Sets whether the DFrame is restricted to the boundaries of the screen resolution.","examples":[],"isConstructor":false,"name":"SetScreenLock","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the frame should be resizeable or not.","isOptional":false,"isVarArg":false,"name":"sizeable","type":"boolean"}],"description":"Sets whether or not the DFrame can be resized by the user.\n\nThis is achieved by clicking and dragging in the bottom right corner of the frame.","examples":[],"isConstructor":false,"name":"SetSizable","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New title of the frame.","isOptional":false,"isVarArg":false,"name":"title","type":"string"}],"description":"Sets the title of the frame.","examples":[],"isConstructor":false,"name":"SetTitle","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"''false'' hides the control box; this is ''true'' by default.","isOptional":false,"isVarArg":false,"name":"show","type":"boolean"}],"description":"Determines whether the DFrame's control box (close, minimise and maximise buttons) is displayed.","examples":[],"isConstructor":false,"name":"ShowCloseButton","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DFrame"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A class used to store and modify all the data concerning a damage event.\nAn empty CTakeDamageInfo object can be created with {{GlobalFunction|DamageInfo}}\n\nList of hooks that this object is passed to:\n* {{HookFunction|ENTITY|OnTakeDamage}}\n* {{HookFunction|GM|DoPlayerDeath}}\n* {{HookFunction|GM|EntityTakeDamage}}\n* {{HookFunction|GM|OnDamagedByExplosion}}\n* {{HookFunction|GM|ScaleNPCDamage}}\n* {{HookFunction|GM|ScalePlayerDamage}}\n* {{HookFunction|NEXTBOT|OnInjured}}\n* {{HookFunction|NEXTBOT|OnKilled}}\n* {{HookFunction|NEXTBOT|OnOtherKilled}}\n\nList of functions that use this object:\n* {{LibraryFunction|util|BlastDamageInfo}}\n* {{ClassFunction|Entity|TakeDamageInfo}}\n* {{ClassFunction|Entity|TakePhysicsDamage}}\n* {{ClassFunction|Entity|DispatchTraceAttack}}","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The damage to add.","isOptional":false,"isVarArg":false,"name":"damageIncrease","type":"number"}],"description":"Increases the damage by damageIncrease.","examples":[],"isConstructor":false,"name":"AddDamage","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the ammo type used by the weapon that inflicted the damage.","examples":[],"isConstructor":false,"name":"GetAmmoType","realm":"shared","returns":[{"description":"Ammo type ID","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the attacker ( character who originated the attack ), for example a player or an NPC that shot the weapon.","examples":[],"isConstructor":false,"name":"GetAttacker","realm":"shared","returns":[{"description":"The attacker","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns the initial unmodified by skill level ( {{LibraryFunction|game|GetSkillLevel}} ) damage.","examples":[],"isConstructor":false,"name":"GetBaseDamage","realm":"shared","returns":[{"description":"baseDamage","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the total damage.","examples":[],"isConstructor":false,"name":"GetDamage","realm":"shared","returns":[{"description":"damage","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the current bonus damage.","examples":[],"isConstructor":false,"name":"GetDamageBonus","realm":"shared","returns":[{"description":"Bonus damage","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the custom damage type. This is used by Day of Defeat: Source and Team Fortress 2 for extended damage info, but isn't used in Garry's Mod by default.","examples":[],"isConstructor":false,"name":"GetDamageCustom","realm":"shared","returns":[{"description":"The custom damage type","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns a vector representing the damage force.","examples":[],"isConstructor":false,"name":"GetDamageForce","realm":"shared","returns":[{"description":"The damage force","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the position where the damage was or is going to be applied to.","examples":[],"isConstructor":false,"name":"GetDamagePosition","realm":"shared","returns":[{"description":"The damage position","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns a bitflag which indicates the damage type(s) of the damage.\n\nConsider using {{ClassFunction|CTakeDamageInfo|IsDamageType}} instead. Value returned by this function can contain multiple damage types.","examples":[],"isConstructor":false,"name":"GetDamageType","realm":"shared","returns":[{"description":"Damage type(s), a combination of {{Enum|DMG}}","type":"DMG"}]},{"accessModifier":"public","arguments":[],"description":"Returns the inflictor of the damage. This is not necessarily a weapon.\n\nFor hitscan weapons this is the weapon.<br/>\nFor projectile weapons this is the projectile.\n<br/><br/>\nFor a more reliable method of getting the weapon that damaged an entity, use [[CTakeDamageInfo/GetAttacker|GetAttacker]] with [[Player/GetActiveWeapon|GetActiveWeapon]].","examples":[],"isConstructor":false,"name":"GetInflictor","realm":"shared","returns":[{"description":"The inflictor","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns the maximum damage.","examples":[],"isConstructor":false,"name":"GetMaxDamage","realm":"shared","returns":[{"description":"maxDmg","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the initial, unmodified position where the damage occured.","examples":[],"isConstructor":false,"name":"GetReportedPosition","realm":"shared","returns":[{"description":"position","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the damage was caused by a bullet.","examples":[],"isConstructor":false,"name":"IsBulletDamage","realm":"shared","returns":[{"description":"isBulletDmg","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Damage type to test. See {{Enum|DMG}}.","isOptional":false,"isVarArg":false,"name":"dmgType","type":"DMG"}],"description":"Returns whenever the damageinfo contains the damage type specified.","examples":[],"isConstructor":false,"name":"IsDamageType","realm":"shared","returns":[{"description":"Whether this damage contains specified damage type or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the damageinfo contains explosion damage.","examples":[],"isConstructor":false,"name":"IsExplosionDamage","realm":"shared","returns":[{"description":"isExplDamage","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the damageinfo contains fall damage.","examples":[],"isConstructor":false,"name":"IsFallDamage","realm":"shared","returns":[{"description":"isFallDmg","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Value to scale the damage with.","isOptional":false,"isVarArg":false,"name":"scale","type":"number"}],"description":"Scales the damage by the given value.","examples":[],"isConstructor":false,"name":"ScaleDamage","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Ammo type ID","isOptional":false,"isVarArg":false,"name":"ammoType","type":"number"}],"description":"Changes the ammo type used by the weapon that inflicted the damage.","examples":[{"code":"local dmginfo = DamageInfo()\n\ndmginfo:SetAmmoType( game.GetAmmoID( 'AR2' ) )","description":"Creates a new DamageInfo object and sets the ammo that caused the damage to AR2 ammo"}],"isConstructor":false,"name":"SetAmmoType","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to be set as the attacker.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Sets the attacker ( character who originated the attack ) of the damage, for example a player or an NPC.","examples":[],"isConstructor":false,"name":"SetAttacker","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to set the absolute damage to.","isOptional":false,"isVarArg":false,"name":"damage","type":"number"}],"description":"Sets the amount of damage.","examples":[],"isConstructor":false,"name":"SetDamage","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The extra damage to be added.","isOptional":false,"isVarArg":false,"name":"damage","type":"number"}],"description":"Sets the bonus damage. Bonus damage isn't automatically applied, so this will have no outer effect by default.","examples":[],"isConstructor":false,"name":"SetDamageBonus","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Any integer - can be based on your own custom enums.","isOptional":false,"isVarArg":false,"name":"DamageType","type":"number"}],"description":"Sets the custom damage type. This is used by Day of Defeat: Source and Team Fortress 2 for extended damage info, but isn't used in Garry's Mod by default.","examples":[],"isConstructor":false,"name":"SetDamageCustom","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The vector to set the force to.","isOptional":false,"isVarArg":false,"name":"force","type":"Vector"}],"description":"Sets the directional force of the damage.","examples":[],"isConstructor":false,"name":"SetDamageForce","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position where the damage will be applied.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Sets the position of where the damage gets applied to.","examples":[],"isConstructor":false,"name":"SetDamagePosition","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The damage type, see {{Enum|DMG}}.","isOptional":false,"isVarArg":false,"name":"type","type":"DMG"}],"description":"Sets the damage type.","examples":[],"isConstructor":false,"name":"SetDamageType","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new inflictor.","isOptional":false,"isVarArg":false,"name":"inflictor","type":"Entity"}],"description":"Sets the inflictor of the damage for example a weapon.\n\nFor hitscan/bullet weapons this should the weapon.<br/>\nFor projectile ( rockets, etc ) weapons this should be the projectile.","examples":[],"isConstructor":false,"name":"SetInflictor","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Maximum damage value.","isOptional":false,"isVarArg":false,"name":"maxDamage","type":"number"}],"description":"Sets the maximum damage the object can cause.","examples":[],"isConstructor":false,"name":"SetMaxDamage","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The location of where the damage is originating","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Sets the origin of the damage.","examples":[],"isConstructor":false,"name":"SetReportedPosition","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Value to subtract.","isOptional":false,"isVarArg":false,"name":"damage","type":"number"}],"description":"Subtracts the specified amount from the damage.","examples":[],"isConstructor":false,"name":"SubtractDamage","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"CTakeDamageInfo"},{"classFields":[{"default":"","description":"The player for which a hook is called.","isOptional":false,"name":"Player","type":"Player"}],"collectionType":"class","customConstructor":"","description":"A list of hooks available in player classes. Target the player by using\n self.Player\n\n{{ClassFields\n|Fields=\n{{ClassField|Player|Player|The player for which a hook is called.}}\n}}","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"mv","type":"CMoveData"}],"description":"Called from {{HookFunction|GM|FinishMove}}.\n\n{{Warning|This hook will not work if the current gamemode overrides {{HookFunction|GM|FinishMove}} and does not call this hook.}}\n\n{{Note|This hook is run after the {{LibraryFunction|drive|FinishMove}} has been called.}}","examples":[],"isConstructor":false,"name":"FinishMove","realm":"client","returns":[{"description":"Return true to prevent default action","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called on player spawn to determine which hand model to use","examples":[{"code":"function PLAYER:GetHandsModel()\n\n\t-- return { model = \"models/weapons/c_arms_cstrike.mdl\", skin = 1, body = \"0100000\" }\n\n\tlocal playermodel = player_manager.TranslateToPlayerModelName( self.Player:GetModel() )\n\treturn player_manager.TranslatePlayerHands( playermodel )\n\nend","description":"Default action of player_default class"}],"isConstructor":false,"name":"GetHandsModel","realm":"client","returns":[{"description":"A table containing info about view model hands model to be set. See examples.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Called when the class object is created","examples":[],"isConstructor":false,"name":"Init","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called on spawn to give the player their default loadout","examples":[],"isConstructor":false,"name":"Loadout","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Movement information","isOptional":false,"isVarArg":false,"name":"mv","type":"CMoveData"}],"description":"Called from {{HookFunction|GM|Move}}.\n\n{{Warning|This hook will not work if the current gamemode overrides {{HookFunction|GM|Move}} and does not call this hook.}}\n\n{{Note|This hook is run after the {{LibraryFunction|drive|Move}} has been called.}}","examples":[],"isConstructor":false,"name":"Move","realm":"client","returns":[{"description":"Return true to prevent default action","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The viewmodel","isOptional":false,"isVarArg":false,"name":"viewmodel","type":"Entity"},{"default":"","description":"The weapon","isOptional":false,"isVarArg":false,"name":"weapon","type":"Entity"}],"description":"Called after the viewmodel has been drawn","examples":[],"isConstructor":false,"name":"PostDrawViewModel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The viewmodel","isOptional":false,"isVarArg":false,"name":"viewmodel","type":"Entity"},{"default":"","description":"The weapon","isOptional":false,"isVarArg":false,"name":"weapon","type":"Entity"}],"description":"Called before the viewmodel is drawn","examples":[],"isConstructor":false,"name":"PreDrawViewModel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when we need to set player model from the class.\n\n{{Note|This will only be called if you have not overridden {{HookFunction|GM|PlayerSetModel}} or call this function from it or anywhere else using {{LibraryFunction|player_manager|RunClass}}}}","examples":[],"isConstructor":false,"name":"SetModel","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Setup the network table accessors.\n\n{{Bug|Issue=892|This is only called for the local player clientside.}}","examples":[{"code":"function PLAYER:SetupDataTables()\n\tself.Player:NetworkVar( \"Int\", 0, \"Money\" )\nend","description":"Example usage."}],"isConstructor":false,"name":"SetupDataTables","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the player spawns","examples":[],"isConstructor":false,"name":"Spawn","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"mv","type":"CMoveData"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"cmd","type":"CUserCmd"}],"description":"Called from {{HookFunction|GM|CreateMove}}.\n\n{{Warning|This hook will not work if the current gamemode overrides {{HookFunction|GM|SetupMove}} and does not call this hook.}}\n\n{{Note|This hook is run after the {{LibraryFunction|drive|StartMove}} has been called.}}","examples":[],"isConstructor":false,"name":"StartMove","realm":"client","returns":[{"description":"Return true to prevent default action","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The viewmodel that is changing","isOptional":false,"isVarArg":false,"name":"viewmodel","type":"Entity"},{"default":"","description":"The old model","isOptional":false,"isVarArg":false,"name":"old","type":"string"},{"default":"","description":"The new model","isOptional":false,"isVarArg":false,"name":"newVal","type":"string"}],"description":"Called when the player changes their weapon to another one causing their viewmodel model to change","examples":[],"isConstructor":false,"name":"ViewModelChanged","realm":"client","returns":[]}],"isHook":true,"isPureAbstract":false,"name":"PLAYER"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A really simple grid layout panel.\n\n{{Note|This panel will set its size automatically based on set column count. This makes it play badly with {{ClassFunction|Panel|Dock}} and cause a {{HookFunction|PANEL|PerformLayout}} call every frame.}}","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetPos( 500, 500 )\nframe:SetSize( 200, 300 )\nframe:SetTitle( \"Frame\" )\nframe:MakePopup()\n \nlocal grid = vgui.Create( \"DGrid\", frame )\ngrid:SetPos( 10, 30 )\ngrid:SetCols( 5 )\ngrid:SetColWide( 36 )\n \nfor i = 1, 30 do\n\tlocal but = vgui.Create( \"DButton\" )\n\tbut:SetText( i )\n\tbut:SetSize( 30, 20 )\n\tgrid:AddItem( but )\nend","description":"Creates a simple grid with numbered buttons."}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The item to add. It will be forced visible and parented to the {{Type|DGrid}}.","isOptional":false,"isVarArg":false,"name":"item","type":"DGrid"}],"description":"Adds a new item to the grid.","examples":[],"isConstructor":false,"name":"AddItem","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the number of columns of this {{Type|DGrid}}. Set by {{ClassFunction|DGrid|SetCols}}.","examples":[],"isConstructor":false,"name":"GetCols","realm":"client","returns":[{"description":"The number of columns of this {{Type|DGrid}}","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the width of each column of the {{Type|DGrid}}, which is set by {{ClassFunction|DGrid|SetColWide}}.","examples":[],"isConstructor":false,"name":"GetColWide","realm":"client","returns":[{"description":"The width of each column","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns a list of panels in the grid.","examples":[],"isConstructor":false,"name":"GetItems","realm":"client","returns":[{"description":"A list of {{Type|Panel}}s.","type":"Panel[]"}]},{"accessModifier":"public","arguments":[],"description":"Returns the height of each row of the {{Type|DGrid}}, which is set by {{ClassFunction|DGrid|SetRowHeight}}.","examples":[],"isConstructor":false,"name":"GetRowHeight","realm":"client","returns":[{"description":"The height of each row","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Item to remove from the grid","isOptional":false,"isVarArg":false,"name":"item","type":"Panel"},{"default":"false","description":"If set to true, the actual panel will not be removed via {{ClassFunction|Panel|Remove}}.","isOptional":true,"isVarArg":false,"name":"bDontDelete","type":"boolean"}],"description":"Removes given panel from the {{ClassFunction|DGrid|GetItems}}.","examples":[],"isConstructor":false,"name":"RemoveItem","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The desired number of columns","isOptional":false,"isVarArg":false,"name":"cols","type":"number"}],"description":"Sets the number of columns this panel should have.\n\nThe {{Type|DGrid}} will resize its width to match this value.","examples":[],"isConstructor":false,"name":"SetCols","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The width of each column.","isOptional":false,"isVarArg":false,"name":"colWidth","type":"number"}],"description":"Sets the width of each column.\n\nThe cell panels (grid items) will not be resized or centered.","examples":[],"isConstructor":false,"name":"SetColWide","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The height of each row","isOptional":false,"isVarArg":false,"name":"rowHeight","type":"number"}],"description":"Sets the height of each row. \n\nThe cell panels (grid items) will not be resized or centered.","examples":[],"isConstructor":false,"name":"SetRowHeight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A key in the panel from {{ClassFunction|DGrid|GetItems}}. The key's value must be numeric.","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"true","description":"True for descending order, false for ascending.","isOptional":true,"isVarArg":false,"name":"desc","type":"boolean"}],"description":"Sorts the items in the grid. Does not visually update the grid, use {{ClassFunction|Panel|InvalidateLayout}} for that.","examples":[],"isConstructor":false,"name":"SortByMember","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DGrid"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A class used to store the player inputs, such as mouse movement, view angles, {{Enum|IN}} buttons pressed and analog movement, the data from this class is then transfered to a {{Type|CMoveData}} during actual movement simulation.\n\nCan be modified during {{HookFunction|GM|CreateMove}}, {{HookFunction|GM|StartCommand}} and used in read only with {{HookFunction|GM|SetupMove}} and {{ClassFunction|Player|GetCurrentCommand}}.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Removes all keys from the command.\n\n{{Note|If you are looking to affect player movement, you may need to use {{ClassFunction|CUserCmd|ClearMovement}} instead of clearing the buttons.}}","examples":[],"isConstructor":false,"name":"ClearButtons","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Clears the movement from the command.\n\nSee also {{ClassFunction|CUserCmd|SetForwardMove}}, {{ClassFunction|CUserCmd|SetSideMove}} and  {{ClassFunction|CUserCmd|SetUpMove}}.","examples":[],"isConstructor":false,"name":"ClearMovement","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns an increasing number representing the index of the user cmd. The value returned is occasionally 0 inside {{HookFunction|GM|CreateMove}}, so it's advised to check for a non-zero value if you wish to get the correct number.","examples":[],"isConstructor":false,"name":"CommandNumber","realm":"shared","returns":[{"description":"The command number","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns a bitflag indicating which buttons are pressed.","examples":[],"isConstructor":false,"name":"GetButtons","realm":"shared","returns":[{"description":"Pressed buttons, see {{Enum|IN}}","type":"IN"}]},{"accessModifier":"public","arguments":[],"description":"The speed the client wishes to move forward with, negative if the clients wants to move backwards.","examples":[],"isConstructor":false,"name":"GetForwardMove","realm":"shared","returns":[{"description":"The desired speed","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the current impulse from the client, usually 0.","examples":[],"isConstructor":false,"name":"GetImpulse","realm":"shared","returns":[{"description":"The impulse","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the scroll delta as whole number.","examples":[],"isConstructor":false,"name":"GetMouseWheel","realm":"shared","returns":[{"description":"Scroll delta","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the delta of the angular horizontal mouse movement of the player.","examples":[],"isConstructor":false,"name":"GetMouseX","realm":"shared","returns":[{"description":"xDelta","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the delta of the angular vertical mouse movement of the player.","examples":[],"isConstructor":false,"name":"GetMouseY","realm":"shared","returns":[{"description":"yDelta","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"The speed the client wishes to move sideways with, positive if it wants to move right, negative if it wants to move left.","examples":[],"isConstructor":false,"name":"GetSideMove","realm":"shared","returns":[{"description":"requestSpeed","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"The speed the client wishes to move up with, negative if the clients wants to move down.","examples":[],"isConstructor":false,"name":"GetUpMove","realm":"shared","returns":[{"description":"requestSpeed","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the direction the player is looking in.","examples":[],"isConstructor":false,"name":"GetViewAngles","realm":"shared","returns":[{"description":"requestDir","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"When players are not sending usercommands to the server (often due to lag), their last usercommand will be executed multiple times as a backup. This function returns true if that is happening.\n\nThis will never return true clientside.","examples":[],"isConstructor":false,"name":"IsForced","realm":"shared","returns":[{"description":"isForced","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Bitflag representing which button to check, see {{Enum|IN}}.","isOptional":false,"isVarArg":false,"name":"key","type":"IN"}],"description":"Returns true if the specified button(s) is pressed.","examples":[],"isConstructor":false,"name":"KeyDown","realm":"shared","returns":[{"description":"Is key down or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Bitflag to be removed from the key bitflag, see {{Enum|IN}}.","isOptional":false,"isVarArg":false,"name":"button","type":"IN"}],"description":"Removed a key bit from the current key bitflag.","examples":[],"isConstructor":false,"name":"RemoveKey","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The weapon entity to select.","isOptional":false,"isVarArg":false,"name":"weapon","type":"Weapon"}],"description":"Forces the associated player to select a weapon. This is used internally in the default HL2 weapon selection HUD.\n\nThis may not work immediately if the current command is in prediction. Use {{LibraryFunction|input|SelectWeapon}} to switch the weapon from the client when the next available command can do so.\n\n{{Note|This is the ideal function to use to create a custom weapon selection HUD, as it allows prediction to run properly for {{HookFunction|WEAPON|Deploy}} and {{HookFunction|GM|PlayerSwitchWeapon}}}}","examples":[],"isConstructor":false,"name":"SelectWeapon","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Bitflag representing which buttons are \"down\", see {{Enum|IN}}.","isOptional":false,"isVarArg":false,"name":"buttons","type":"IN"}],"description":"Sets the buttons as a bitflag. See also {{ClassFunction|CUserCmd|GetButtons}}.\n\n{{Note|If you are looking to affect player movement, you may need to use {{ClassFunction|CUserCmd|SetForwardMove}} instead of setting the keys.}}","examples":[],"isConstructor":false,"name":"SetButtons","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new speed to request. The client will not be able to move faster than their set walk/sprint speed.","isOptional":false,"isVarArg":false,"name":"speed","type":"number"}],"description":"Sets speed the client wishes to move forward with, negative if the clients wants to move backwards.\n\nSee also {{ClassFunction|CUserCmd|ClearMovement}}, {{ClassFunction|CUserCmd|SetSideMove}} and {{ClassFunction|CUserCmd|SetUpMove}}.","examples":[],"isConstructor":false,"name":"SetForwardMove","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The impulse to send.","isOptional":false,"isVarArg":false,"name":"speed","type":"number"}],"description":"Sets the impulse command to be sent to the server.\n\nFor example, 101 is an impulse that will give the player all Half-Life 2 weapons with sv_cheats set to 1. Impulse 100 will toggle their flashlight.","examples":[],"isConstructor":false,"name":"SetImpulse","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The scroll delta.","isOptional":false,"isVarArg":false,"name":"speed","type":"number"}],"description":"Sets the scroll delta.","examples":[],"isConstructor":false,"name":"SetMouseWheel","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Angular horizontal move delta.","isOptional":false,"isVarArg":false,"name":"speed","type":"number"}],"description":"Sets the delta of the angular horizontal mouse movement of the player.\n\nSee also {{ClassFunction|CUserCmd|SetMouseY}}.","examples":[],"isConstructor":false,"name":"SetMouseX","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Angular vertical move delta.","isOptional":false,"isVarArg":false,"name":"speed","type":"number"}],"description":"Sets the delta of the angular vertical mouse movement of the player.\n\nSee also {{ClassFunction|CUserCmd|SetMouseX}}.","examples":[],"isConstructor":false,"name":"SetMouseY","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new speed to request.","isOptional":false,"isVarArg":false,"name":"speed","type":"number"}],"description":"Sets speed the client wishes to move sidewards with, positive to move right, negative to move left.\n\nSee also {{ClassFunction|CUserCmd|SetForwardMove}} and  {{ClassFunction|CUserCmd|SetUpMove}}.","examples":[],"isConstructor":false,"name":"SetSideMove","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new speed to request.","isOptional":false,"isVarArg":false,"name":"speed","type":"number"}],"description":"Sets speed the client wishes to move upwards with, negative to move down.\n\nSee also {{ClassFunction|CUserCmd|SetSideMove}} and  {{ClassFunction|CUserCmd|SetForwardMove}}.","examples":[],"isConstructor":false,"name":"SetUpMove","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New view angles.","isOptional":false,"isVarArg":false,"name":"viewAngle","type":"Angle"}],"description":"Sets the direction the client wants to move in.\n\n{{Note|The pitch (vertical) angle should be clamped to +/- 89&deg; to prevent the player's view from glitching.}}","examples":[{"code":"hook.Add(\"InputMouseApply\", \"LockToPitchOnly\", function( ccmd, x, y, angle )\n\t-- By leaving angle.roll and angle.yaw alone, we effectively lock them\n\tangle.pitch = math.Clamp( angle.pitch + y / 50, -89, 89 )\n\tccmd:SetViewAngles( angle )\n\treturn true\nend)","description":"Locks the player's view to only vertical movement."}],"isConstructor":false,"name":"SetViewAngles","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns tick count since joining the server.\n\n{{Note|This will always return 0 for bots.}}\n\n{{Note|Returns 0 clientside during prediction calls. If you are trying to use CUserCmd:Set*() on the client in a movement or command hook, keep doing so till TickCount returns a non-zero number to maintain prediction.}}","examples":[],"isConstructor":false,"name":"TickCount","realm":"shared","returns":[{"description":"The amount of ticks passed since joining the server.","type":"number"}]}],"isHook":false,"isPureAbstract":false,"name":"CUserCmd"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Creates an invisible vertical divider between two GUI elements.","examples":[{"code":"local f = vgui.Create( \"DFrame\" )\nf:SetSize( 400, 200 )\nf:Center()\nf:MakePopup()\n\nlocal LeftPanel = vgui.Create( \"DPanel\", f ) -- Can be any panel, it will be stretched\nlocal RightPanel = vgui.Create( \"DPanel\", f )\n\nlocal div = vgui.Create( \"DHorizontalDivider\", f )\ndiv:Dock( FILL ) -- Make the divider fill the space of the DFrame\ndiv:SetLeft( LeftPanel ) -- Set what panel is in left side of the divider\ndiv:SetRight( RightPanel )\ndiv:SetDividerWidth( 4 ) -- Set the divider width. Default is 8\ndiv:SetLeftMin( 20 ) -- Set the Minimum width of left side\ndiv:SetRightMin( 20 )\ndiv:SetLeftWidth( 50 ) -- Set the default left side width","description":"Insert a horizontal divider between two {{Type|DPanel}}s in a {{Type|DFrame}}."}],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the width of the horizontal divider bar, set by {{ClassFunction|DHorizontalDivider|SetDividerWidth}}.","examples":[],"isConstructor":false,"name":"GetDividerWidth","realm":"client","returns":[{"description":"The width of the horizontal divider bar","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the player is currently dragging the middle divider bar.","examples":[],"isConstructor":false,"name":"GetDragging","realm":"client","returns":[{"description":"Whether or not the player is currently dragging the middle divider bar.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nReturns the local X coordinate of where the player started dragging the thing","examples":[],"isConstructor":false,"name":"GetHoldPos","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the left side content of the {{Type|DHorizontalDivider}}","examples":[],"isConstructor":false,"name":"GetLeft","realm":"client","returns":[{"description":"The content on the left side","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns the minimum width of the left side, set by {{ClassFunction|DHorizontalDivider|SetLeftMin}}.","examples":[],"isConstructor":false,"name":"GetLeftMin","realm":"client","returns":[{"description":"The minimum width of the left side","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current width of the left side, set by {{ClassFunction|DHorizontalDivider|SetLeftWidth}} or by the user.","examples":[],"isConstructor":false,"name":"GetLeftWidth","realm":"client","returns":[{"description":"The current width of the left side","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the middle content, set by {{ClassFunction|DHorizontalDivider|SetMiddle}}.","examples":[],"isConstructor":false,"name":"GetMiddle","realm":"client","returns":[{"description":"The middle content","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns the right side content","examples":[],"isConstructor":false,"name":"GetRight","realm":"client","returns":[{"description":"The right side content","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns the minimum width of the right side, set by {{ClassFunction|DHorizontalDivider|SetRightMin}}.","examples":[],"isConstructor":false,"name":"GetRightMin","realm":"client","returns":[{"description":"The minimum width of the right side","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The width of the horizontal divider bar.","isOptional":false,"isVarArg":false,"name":"width","type":"number"}],"description":"Sets the width of the horizontal divider bar.","examples":[],"isConstructor":false,"name":"SetDividerWidth","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"dragonot","type":"boolean"}],"description":"{{Internal}}\n\nSets whether the player is dragging the divider or not","examples":[],"isConstructor":false,"name":"SetDragging","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"x","type":"number"}],"description":"{{Internal}}\n\nSets the local X coordinate of where the player started dragging the thing","examples":[],"isConstructor":false,"name":"SetHoldPos","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to set as the left side","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"Sets the left side content of the {{Type|DHorizontalDivider}}.","examples":[],"isConstructor":false,"name":"SetLeft","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum width of the left side","isOptional":false,"isVarArg":false,"name":"minWidth","type":"number"}],"description":"Sets the minimum width of the left side","examples":[],"isConstructor":false,"name":"SetLeftMin","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The current/starting width of the left side","isOptional":false,"isVarArg":false,"name":"width","type":"number"}],"description":"Sets the current/starting width of the left side.\n\nThe width of the right side is automatically calculated by subtracting this from the total width of the {{Type|DHorizontalDivider}}.","examples":[],"isConstructor":false,"name":"SetLeftWidth","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The middle content","isOptional":false,"isVarArg":false,"name":"middle","type":"Panel"}],"description":"Sets the middle content, over the draggable divider bar panel.","examples":[],"isConstructor":false,"name":"SetMiddle","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The right side content","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"Sets the right side content","examples":[],"isConstructor":false,"name":"SetRight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum width of the right side","isOptional":false,"isVarArg":false,"name":"minWidth","type":"number"}],"description":"Sets the minimum width of the right side","examples":[],"isConstructor":false,"name":"SetRightMin","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}","examples":[],"isConstructor":false,"name":"StartGrab","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DHorizontalDivider"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"This is a list of hooks that are only available in Sandbox or Sandbox derived gamemodes.\n\nEasiest way to tell if a gamemode is Sandbox derived is to check if this variable exists:\n<pre>\n-- Replace GAMEMODE with GM if you are in gamemode files.\nif ( GAMEMODE.IsSandboxDerived ) then\n\t-- Do stuff\nend\n</pre>","examples":[],"extends":"Gamemode","functions":[{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nThis hook is used to add default categories to spawnmenu tool tabs.\n\nDo not override or hook this function, use {{HookFunction|SANDBOX|AddToolMenuCategories}}!","examples":[],"isConstructor":false,"name":"AddGamemodeToolMenuCategories","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nThis hook is used to add default tool tabs to spawnmenu.\n\nDo not override or hook this function, use {{HookFunction|SANDBOX|AddToolMenuTabs}}!","examples":[],"isConstructor":false,"name":"AddGamemodeToolMenuTabs","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"This hook is used to add new categories to spawnmenu tool tabs.","examples":[{"code":"local function CreateUtilitiesCategories()\n\n        spawnmenu.AddToolCategory( \"Utilities\", \"User\", \"#spawnmenu.utilities.user\" )\n        spawnmenu.AddToolCategory( \"Utilities\", \"Admin\", \"#spawnmenu.utilities.admin\" )\n\nend        \nhook.Add( \"AddToolMenuCategories\", \"CreateUtilitiesCategories\", CreateUtilitiesCategories )","description":"Adds default categories to Utilities tab in spawnmenu."}],"isConstructor":false,"name":"AddToolMenuCategories","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"This hook is used to add new tool tabs to spawnmenu.","examples":[{"code":"hook.Add( \"AddToolMenuTabs\", \"myHookClass\", function()\n\tspawnmenu.AddToolTab(\"myTab\", \"My Tab\", \"icon16/shield.png\") -- Add a new tab\n\n\tspawnmenu.AddToolCategory(\"myTab\", \"myCategory\", \"My Category\") -- Add a category into that new tab\n\n\tspawnmenu.AddToolMenuOption( \"myTab\", \"myCategory\", \"myEntry\", \"My Entry\", \"\", \"\", function( panel )\n\t\tpanel:AddControl( \"Header\", { Text = \"Hello!\" } )\n\tend ) -- Add an entry to our new category\nend)","description":"Add a new tab and a few categories into it."}],"isConstructor":false,"name":"AddToolMenuTabs","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who attempted to use Prop Drive.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The entity the player is attempting to drive","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called when a player attempts to drive a prop via Prop Drive","examples":[{"code":"function GM:CanDrive( ply, ent )\n\tif !ply:IsAdmin() then return false end\nend","description":"Stops nonadmins from using Prop Drive"}],"isConstructor":false,"name":"CanDrive","realm":"shared","returns":[{"description":"Return true to allow driving, false to disallow","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Player, that tried to use the property","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Class of the property that is tried to use, for example - bonemanipulate","isOptional":false,"isVarArg":false,"name":"property","type":"string"},{"default":"","description":"The entity, on which property is tried to be used on","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Controls if a property can be used or not.","examples":[{"code":"hook.Add( \"CanProperty\", \"block_remover_property\", function( ply, property, ent )\n\tif ( !ply:IsAdmin() && property == \"remover\" ) then return false end\nend )","description":"Stops non-admins from using the remover property."}],"isConstructor":false,"name":"CanProperty","realm":"shared","returns":[{"description":"Return false to disallow using that property","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who attempted to use their toolgun.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"A trace from the players eye to where in the world their crosshair/cursor is pointing. See {{Struct|TraceResult}}","isOptional":false,"isVarArg":false,"name":"tr","type":"TraceResult"},{"default":"","description":"The tool mode the player currently has selected.","isOptional":false,"isVarArg":false,"name":"tool","type":"string"}],"description":"Called when a player attempts to fire their tool gun. Return true to specifically allow the attempt, false to block it.","examples":[{"code":"function GM:CanTool( ply, tr, tool )\n   if tool == \"remover\" and IsValid( tr.Entity ) and tr.Entity:GetClass() == \"prop_door_rotating\" then\n      return false\n   end\nend","description":"Stops players from removing doors."}],"isConstructor":false,"name":"CanTool","realm":"shared","returns":[{"description":"Can use toolgun or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel that holds spawnicons and the sidebar of spawnmenu","isOptional":false,"isVarArg":false,"name":"parent","type":"Panel"},{"default":"","description":"The item player selected","isOptional":false,"isVarArg":false,"name":"node","type":"Panel"}],"description":"Called when player selects an item on the spawnmenu sidebar at the left.","examples":[],"isConstructor":false,"name":"ContentSidebarSelection","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The created context menu panel","isOptional":false,"isVarArg":false,"name":"g_ContextMenu","type":"Panel"}],"description":"Called when the context menu is created.","examples":[],"isConstructor":false,"name":"ContextMenuCreated","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the context menu is trying to be opened. Return false to disallow it.","examples":[],"isConstructor":false,"name":"ContextMenuOpen","realm":"client","returns":[{"description":"Allow menu to open.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called from {{HookFunction|GM|HUDPaint}}; does nothing by default.\n\n{{Note|This cannot be used with {{LibraryFunction|hook|Add}}}}","examples":[],"isConstructor":false,"name":"PaintNotes","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called from {{HookFunction|GM|HUDPaint}} to draw world tips. By default, enabling cl_drawworldtooltips will stop world tips from being drawn here.<br />\nSee {{GlobalFunction|AddWorldTip}} for more information.\n\n{{Note|This cannot be used with {{LibraryFunction|hook|Add}}}}","examples":[],"isConstructor":false,"name":"PaintWorldTips","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when persistent props are loaded.","examples":[],"isConstructor":false,"name":"PersistenceLoad","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when persistent props are saved.","examples":[],"isConstructor":false,"name":"PersistenceSave","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who attempted to give themselves a weapon.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Class name of the weapon the player tried to give themselves.","isOptional":false,"isVarArg":false,"name":"weapon","type":"string"},{"default":"","description":"The swep table of this weapon, see {{Struct|SWEP}}","isOptional":false,"isVarArg":false,"name":"swep","type":"SWEP[]"}],"description":"Called when a player attempts to give themselves a weapon from the Q menu. ( Left mouse clicks on an icon )","examples":[{"code":"function GM:PlayerGiveSWEP( ply, class, swep )\n if (not ply:IsAdmin()) then\n  return false\n end\nend","description":"Stops non-admins from giving themselves weapons."}],"isConstructor":false,"name":"PlayerGiveSWEP","realm":"server","returns":[{"description":"Can the SWEP be given to the player","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that spawned the effect","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The model of spawned effect","isOptional":false,"isVarArg":false,"name":"model","type":"string"},{"default":"","description":"The spawned effect itself","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called after the player spawned an effect.","examples":[],"isConstructor":false,"name":"PlayerSpawnedEffect","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that spawned the NPC","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The spawned NPC itself","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called after the player spawned an NPC.","examples":[],"isConstructor":false,"name":"PlayerSpawnedNPC","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who spawned a prop.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Path to the model of the prop the player is attempting to spawn.","isOptional":false,"isVarArg":false,"name":"model","type":"string"},{"default":"","description":"The entity that was spawned.","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"}],"description":"Called when a player has successfully spawned a prop from the Q menu.","examples":[{"code":"function GM:PlayerSpawnedProp(ply, model, ent)\n\tent:SetColor(Color(0, 255, 0))\nend","description":"Turns the spawned prop green."}],"isConstructor":false,"name":"PlayerSpawnedProp","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that spawned the ragdoll","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The ragdoll model that player wants to spawn","isOptional":false,"isVarArg":false,"name":"model","type":"string"},{"default":"","description":"The spawned ragdoll itself","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called after the player spawned a ragdoll.","examples":[],"isConstructor":false,"name":"PlayerSpawnedRagdoll","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that spawned the SENT","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The spawned SENT","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called after the player has spawned a scripted entity.","examples":[],"isConstructor":false,"name":"PlayerSpawnedSENT","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that spawned the SWEP","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The SWEP itself","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called after the player has spawned a scripted weapon from the spawnmenu with a middle mouse click.\n\nFor left mouse click spawns, see {{HookFunction|SANDBOX|PlayerGiveSWEP}}.","examples":[],"isConstructor":false,"name":"PlayerSpawnedSWEP","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that spawned the vehicle","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The vehicle itself","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called after the player spawned a vehicle.","examples":[],"isConstructor":false,"name":"PlayerSpawnedVehicle","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that wants to spawn an effect","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The effect model that player wants to spawn","isOptional":false,"isVarArg":false,"name":"model","type":"string"}],"description":"Called to ask if player allowed to spawn a particular effect or not.","examples":[],"isConstructor":false,"name":"PlayerSpawnEffect","realm":"server","returns":[{"description":"Return false to disallow spawning that effect","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that wants to spawn that NPC","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The npc type that player is trying to spawn","isOptional":false,"isVarArg":false,"name":"npc_type","type":"string"},{"default":"","description":"The weapon of that NPC","isOptional":false,"isVarArg":false,"name":"weapon","type":"string"}],"description":"Called to ask if player allowed to spawn a particular NPC or not.","examples":[],"isConstructor":false,"name":"PlayerSpawnNPC","realm":"server","returns":[{"description":"Return false to disallow spawning that NPC","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player in question","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Modelname","isOptional":false,"isVarArg":false,"name":"model","type":"string"},{"default":"","description":"Skin number","isOptional":false,"isVarArg":false,"name":"skin","type":"number"}],"description":"Called to ask whether player is allowed to spawn any objects.","examples":[],"isConstructor":false,"name":"PlayerSpawnObject","realm":"server","returns":[{"description":"Return false to disallow him spawning anything","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who attempted to spawn a prop.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Path to the model of the prop the player is attempting to spawn.","isOptional":false,"isVarArg":false,"name":"model","type":"string"}],"description":"Called when a player attempts to spawn a prop from the Q menu.","examples":[{"code":"function GM:PlayerSpawnProp( ply, model )\n\tif ( !ply:IsAdmin() ) then\n\t\treturn false\n\tend\nend","description":"Stops non-admins from spawning props."}],"isConstructor":false,"name":"PlayerSpawnProp","realm":"server","returns":[{"description":"Should the player be able to spawn the prop or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who attempted to spawn a ragdoll.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Path to the model of the ragdoll the player is attempting to spawn.","isOptional":false,"isVarArg":false,"name":"model","type":"string"}],"description":"Called when a player attempts to spawn a ragdoll from the Q menu.","examples":[{"code":"function GM:PlayerSpawnRagdoll( ply, model )\n\tif ( not ply:IsAdmin() ) then\n\t\treturn false\n\tend\nend","description":"Stops non-admins from spawning ragdolls."}],"isConstructor":false,"name":"PlayerSpawnRagdoll","realm":"server","returns":[{"description":"Should the player be able to spawn the ragdoll or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who attempted to spawn the entity.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Class name of the entity the player tried to spawn.","isOptional":false,"isVarArg":false,"name":"classRef","type":"string"}],"description":"Called when a player attempts to spawn an Entity from the Q menu.","examples":[{"code":"function GM:PlayerSpawnSENT( ply, class )\n\tif not ply:IsAdmin() then\n\t\treturn false\n\tend\nend","description":"Stops non-admins from spawning entities."}],"isConstructor":false,"name":"PlayerSpawnSENT","realm":"server","returns":[{"description":"can_spawn","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who attempted to spawn a weapon.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Class name of the weapon the player tried to spawn.","isOptional":false,"isVarArg":false,"name":"weapon","type":"string"},{"default":"","description":"Information about the weapon the player is trying to spawn, see {{Struct|SWEP}}","isOptional":false,"isVarArg":false,"name":"swep","type":"SWEP"}],"description":"Called when a player attempts to spawn a weapon from the Q menu. ( Mouse wheel clicks on an icon )","examples":[{"code":"hook.Add( \"PlayerSpawnSWEP\", \"SpawnBlock\", function( ply, class, info )\n\tif not ply:IsAdmin() then\n\t\treturn false\n\tend\nend )","description":"Stops non-admins from spawning weapons."}],"isConstructor":false,"name":"PlayerSpawnSWEP","realm":"server","returns":[{"description":"Can the SWEP be spawned","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that wants to spawn that vehicle","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The vehicle model that player wants to spawn","isOptional":false,"isVarArg":false,"name":"model","type":"string"},{"default":"","description":"Vehicle name","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Table of that vehicle, containing info about it","isOptional":false,"isVarArg":false,"name":"table","type":"table"}],"description":"Called to ask if player allowed to spawn a particular vehicle or not.","examples":[],"isConstructor":false,"name":"PlayerSpawnVehicle","realm":"server","returns":[{"description":"Return false to disallow spawning that vehicle","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"This hook makes the engine load the spawnlist text files.\nIt calls {{LibraryFunction|spawnmenu|PopulateFromEngineTextFiles}} by default.","examples":[{"code":"function GM:PopulatePropMenu()\n\n\t-- This function makes the engine load the spawn menu text files.\n\t-- We call it here so that any gamemodes not using the default \n\t-- spawn menu can totally not call it.\n\tspawnmenu.PopulateFromEngineTextFiles()\n\nend","description":"Source code for this hook."}],"isConstructor":false,"name":"PopulatePropMenu","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called to populate the Scripted Tool menu.\n\n{{Deprecated|This hook is never called. Use {{HookFunction|SANDBOX|PopulateToolMenu}}, instead.}}","examples":[],"isConstructor":false,"name":"PopulateSTOOLMenu","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Add the STOOLS to the tool menu. You want to call {{LibraryFunction|spawnmenu|AddToolMenuOption}} in this hook.","examples":[],"isConstructor":false,"name":"PopulateToolMenu","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called right after the Lua Loaded tool menus are reloaded. This is a good place to set up any ControlPanels.","examples":[],"isConstructor":false,"name":"PostReloadToolsMenu","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called right before the Lua Loaded tool menus are reloaded.\n\n{{Bug|Pull=1517|This isn't actually called.}}","examples":[],"isConstructor":false,"name":"PreReloadToolsMenu","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"If false is returned then the spawn menu is never created. This saves load times if your mod doesn't actually use the spawn menu for any reason.\n\n{{Bug|Pull=1517|This isn't actually called.}}","examples":[],"isConstructor":false,"name":"SpawnMenuEnabled","realm":"client","returns":[{"description":"Whether to create spawnmenu or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called when spawnmenu is trying to be opened.\n\n{{Note|Hiding the spawnmenu will not stop people from being able to use the various console commands to spawn in items, etc. See GM:PlayerSpawn* hooks for blocking actual spawning.}}","examples":[{"code":"local allowed = {\n\t[\"STEAM_0:0:00000000\"] = true,\n\t[\"STEAM_0:0:10000000\"] = true\n}\n\nhook.Add( \"SpawnMenuOpen\", \"SpawnMenuWhitelist\", function()\n\tif ( !allowed[ LocalPlayer():SteamID() ] ) then\n\t\treturn false\n\tend\nend )","description":"Only allow the people you want to open the spawn menu."}],"isConstructor":false,"name":"SpawnMenuOpen","realm":"client","returns":[{"description":"Return false to dissallow opening the spawnmenu","type":"boolean"}]}],"isHook":true,"isPureAbstract":false,"name":"SANDBOX"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A very basic horizontal scrollable panel, similar to {{Type|DScrollPanel}}.\n\nUsed internally in {{Type|DPropertySheet}}.","examples":[{"code":"local DFrame = vgui.Create( \"DFrame\" )\nDFrame:SetTitle( \"DHorizontalScroller Example\" )\nDFrame:SetSize( 500, 100 )\nDFrame:Center()\nDFrame:MakePopup()\n\nlocal DHorizontalScroller = vgui.Create( \"DHorizontalScroller\", DFrame )\nDHorizontalScroller:Dock( FILL )\nDHorizontalScroller:SetOverlap( -4 )\n\nfor i = 0, 16 do\n\tlocal DImage = vgui.Create( \"DImage\", DHorizontalScroller )\n\tDImage:SetImage( \"scripted/breen_fakemonitor_1\" )\n\tDHorizontalScroller:AddPanel( DImage )\nend","description":"Creates a DHorizontalScroller with a bunch of {{Type|DImage}}s attached to it."},{"code":"local DFrame = vgui.Create( \"DFrame\" )\nDFrame:SetSize( 500, 100 )\nDFrame:Center()\nDFrame:MakePopup()\nDFrame:SetTitle( \"DHorizontalScroller Example\" )\nfunction DFrame:Paint( w, h )\n\tdraw.RoundedBox( 0, 0, 0, w, h, Color( 0, 100, 100 ) )\nend\n\nlocal DHorizontalScroller = vgui.Create( \"DHorizontalScroller\", DFrame )\nDHorizontalScroller:Dock( FILL )\nDHorizontalScroller:SetOverlap( -4 )\n\nfunction DHorizontalScroller.btnLeft:Paint( w, h )\n\tdraw.RoundedBox( 0, 0, 0, w, h, Color( 200, 100, 0 ) )\nend\nfunction DHorizontalScroller.btnRight:Paint( w, h )\n\tdraw.RoundedBox( 0, 0, 0, w, h, Color( 0, 100, 200 ) )\nend\n\nfor i = 0, 16 do\n\tlocal DImage = vgui.Create( \"DImage\", DHorizontalScroller )\n\tDImage:SetImage( \"scripted/breen_fakemonitor_1\" )\n\tDHorizontalScroller:AddPanel( DImage )\nend","description":"Creates a DHorizontalScroller with a bunch of {{Type|DImage}}s attached to it and demonstrates how to color the left/right scroll buttons."}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The panel to add. It will be automatically parented.","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"Adds a panel to the {{Type|DHorizontalScroller}}.","examples":[],"isConstructor":false,"name":"AddPanel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetOverlap","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetShowDropTargets","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"{{Stub}}\n\nSame as {{ClassFunction|DDragBase|MakeDroppable}}.\nTODO: Transclude or whatever to here?","examples":[],"isConstructor":false,"name":"MakeDroppable","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the panel is scrolled.","examples":[],"isConstructor":false,"name":"OnDragModified","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Overlap in pixels. Positive numbers will make elements ''overlap'' each other, negative will add spacing.","isOptional":false,"isVarArg":false,"name":"overlap","type":"number"}],"description":"Controls the spacing between elements of the horizontal scroller.","examples":[],"isConstructor":false,"name":"SetOverlap","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"newState","type":"boolean"}],"description":"","examples":[],"isConstructor":false,"name":"SetShowDropTargets","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"newState","type":"boolean"}],"description":"{{Stub}}\n\nSame as {{ClassFunction|DDragBase|SetUseLiveDrag}}","examples":[],"isConstructor":false,"name":"SetUseLiveDrag","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DHorizontalScroller"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A list of hooks (or callbacks) that are available for you to override in a tool. This is only applicable to sandbox and sandbox-derived gamemodes.\n\nSee also: {{Struct|TOOL}} and [[:Category:Tool|Tool Functions]].","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Called when {{HookFunction|WEAPON|Deploy}} of the toolgun is called.\n\nThis is also called when switching from another tool on the server.","examples":[],"isConstructor":false,"name":"Deploy","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when {{HookFunction|WEAPON|DrawHUD}} of the toolgun is called, only when the user has this tool selected.","examples":[],"isConstructor":false,"name":"DrawHUD","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The width of the tool's screen in pixels.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The height of the tool's screen in pixels.","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Called after the default tool screen has been drawn.\n\n{{Note|If this method exists on the TOOL object table, the default scrolling text will not be drawn}}","examples":[{"code":"function TOOL:DrawToolScreen( width, height )\n\t-- Draw black background\n\tsurface.SetDrawColor( Color( 20, 20, 20 ) )\n\tsurface.DrawRect( 0, 0, width, height )\n\t\n\t-- Draw white text in middle\n\tdraw.SimpleText( \"Hello world!\", \"DermaLarge\", width / 2, height / 2, Color( 200, 200, 200 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )\nend","description":"White text that says \"Hello world!\" on a black background."}],"isConstructor":false,"name":"DrawToolScreen","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when {{HookFunction|WEAPON|Think}} of the toolgun is called, only when the user has this tool selected.","examples":[],"isConstructor":false,"name":"FreezeMovement","realm":"client","returns":[{"description":"Return true to freeze the player","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called when {{HookFunction|WEAPON|Holster}} of the toolgun is called, as well as when switching between different toolguns.","examples":[{"code":"function TOOL:Holster()\n\n\tself:ClearObjects()\n\nend","description":"Clears any objects set by {{ClassFunction|Tool|SetObject}}."}],"isConstructor":false,"name":"Holster","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A trace from users eyes to wherever he aims at. See {{Struct|TraceResult}}","isOptional":false,"isVarArg":false,"name":"tr","type":"TraceResult"}],"description":"Called when the user left clicks with the tool","examples":[],"isConstructor":false,"name":"LeftClick","realm":"shared","returns":[{"description":"Return true to make the tool gun beam and play fire animations, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"A trace from users eyes to wherever he aims at. See {{Struct|TraceResult}}","isOptional":false,"isVarArg":false,"name":"tr","type":"TraceResult"}],"description":"Called when the user presses the reload key with the tool out.","examples":[],"isConstructor":false,"name":"Reload","realm":"shared","returns":[{"description":"Return true to make the tool gun beam and play fire animations, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"A trace from users eyes to wherever he aims at. See {{Struct|TraceResult}}","isOptional":false,"isVarArg":false,"name":"tr","type":"TraceResult"}],"description":"Called when the user right clicks with the tool.","examples":[],"isConstructor":false,"name":"RightClick","realm":"shared","returns":[{"description":"Return true to make the tool gun beam and play fire animations, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called when {{HookFunction|WEAPON|Think}} of the toolgun is called. This only happens when the tool gun is currently equipped/selected by the player and the selected tool is this tool.\n\n{{Bug|Issue=3682|Pull=1547|This is not called on the first frame after switching from no mode or an invalid mode.}}","examples":[],"isConstructor":false,"name":"Think","realm":"shared","returns":[]}],"isHook":true,"isPureAbstract":false,"name":"TOOL"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"The DHTML control wraps the internal Awesomium framework, supports calling Javascript functions from Lua, as well as running Lua from within the HTML. Running Lua code is disabled by default.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 300, 200 )\nframe:SetTitle( \"My new Derma frame\" )\nframe:SetVisible( true )\nframe:SetDraggable( true )\nframe:Center()\n--Fill the form with a html page\nlocal html = vgui.Create( \"DHTML\" , frame )\nhtml:Dock( FILL )\nhtml:SetHTML( [[\n    <input type='submit' onclick='console.log(\"RUNLUA:print(\\\"This is called in Lua context\\\")\")' />\n]] )\n\n--Enable the webpage to call lua code\nhtml:SetAllowLua( true )\n\nframe:MakePopup()","description":"Creates a DHTML."},{"code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize(ScrW() * 0.5, ScrH() * 0.5)\nframe:SetTitle(\"HTML Example!\")\nframe:Center()\nframe:MakePopup()\n\nlocal html = vgui.Create(\"DHTML\", frame)\nhtml:Dock(FILL)\nhtml:OpenURL(\"https://www.google.com/\")","description":"Creates a DHTML and opens Google inside."}],"extends":"Awesomium","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Library name of the JS function you are defining.","isOptional":false,"isVarArg":false,"name":"library","type":"string"},{"default":"","description":"Name of the JS function you are defining.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Function called when the JS function is called. Arguments passed to the JS function will be passed here.","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Defines a Javascript function that when called will call a Lua callback.\n{{Note|Must be called after the HTML document has fully loaded.}}","examples":[{"code":"-- Create the frame\nlocal f = vgui.Create(\"DFrame\")\nf:SetSize(800, 600)\nf:Center()\n\n-- Create a green color variable\nlocal color_green = Color(0, 255, 0)\n\n-- Define the Javascript function in the DHTML element\nlocal DHTML = vgui.Create(\"DHTML\", f)\nDHTML:Dock(FILL)\nDHTML:OpenURL(\"http://wiki.garrysmod.com/page/VGUI/Elements/DHTML\")\nDHTML:AddFunction(\"console\", \"luaprint\", function(str)\n\tMsgC(color_green, str) -- Print the given string\nend)\n\n--This runs our function. Our function could also be called from Javascript on the DHTML's page.\nDHTML:RunJavascript(\"console.luaprint('Hello from Javascript!');\")","description":"Prints text from Javascript to the console in color."}],"isConstructor":false,"name":"AddFunction","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Specify JavaScript code to be executed.","isOptional":false,"isVarArg":false,"name":"js","type":"string"}],"description":"Runs/Executes a string as JavaScript code.\n{{Note|This function does '''NOT''' evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).<br>Because a return value is nil/no value (a.k.a. void).<br>If you wish to pass/return values from JS to Lua, you may want to use {{ClassFunction|DHTML|AddFunction}} function to accomplish that job.}}\n{{Note|This function is an alias of {{ClassFunction|DHTML|QueueJavascript}} ([https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/vgui/dhtml.lua#L62 source]).}}","examples":[{"code":"-- First we create a container, in this case it is a full-screen Derma Frame window.\nlocal dframe = vgui.Create( 'DFrame' )\ndframe:SetSize( ScrW(), ScrH() )\ndframe:SetTitle( \"Garry's Mod Wiki\" )\ndframe:Center()\ndframe:MakePopup() -- Enable keyboard and mouse interaction for DFrame panel.\n\n-- Create a new DHTML panel as a child of dframe, and dock-fill it.\nlocal dhtml = vgui.Create( 'DHTML', dframe )\ndhtml:Dock( FILL )\n-- Navigate to Garry's Mod wikipedia website.\ndhtml:OpenURL( 'https://wiki.garrysmod.com/index.php' )\n-- Run JavaScript code.\ndhtml:Call( [[document.body.innerHTML = 'HTML changed from Lua using JavaScript!';]] )\n\n-- This does not throw an error/exception, but instead returns nil/no value.\n-- That means you can't pass/return values from JavaScript back to Lua context using this function.\nlocal number = dhtml:Call( '22;' )\nprint( number )","description":"Shows how to change [http://www.w3schools.com/jsref/prop_html_innerhtml.asp document.body.innerHTML] property by calling this function on [[:Category:DHTML|DHTML]] panel."}],"isConstructor":false,"name":"Call","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The message to be logged (or Lua code to be executed; see above).","isOptional":false,"isVarArg":false,"name":"msg","type":"string"}],"description":"Called when the page inside the {{Type|DHTML}} window runs ''console.log''. This can also be called within the Lua environment to emulate ''console.log''. If the contained message begins with ''RUNLUA:'' the following text will be executed as code within the Lua environment (this is how Lua is called from DHTML windows).","examples":[],"isConstructor":false,"name":"ConsoleMessage","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns if the loaded page can run Lua code, set by {{ClassFunction|DHTML|SetAllowLua}}","examples":[],"isConstructor":false,"name":"GetAllowLua","realm":"client","returns":[{"description":"Whether or not Lua code can be called from the loaded page.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Specify JavaScript code to be executed.","isOptional":false,"isVarArg":false,"name":"js","type":"string"}],"description":"Runs/Executes a string as JavaScript code.\n{{Note|This function does '''NOT''' evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).<br>Because a return value is nil/no value (a.k.a. void).<br>If you wish to pass/return values from JS to Lua, you may want to use {{ClassFunction|DHTML|AddFunction}} function to accomplish that job.}}","examples":[{"code":"-- First we create a container, in this case it is a full-screen Derma Frame window.\nlocal dframe = vgui.Create( 'DFrame' )\ndframe:SetSize( ScrW(), ScrH() )\ndframe:SetTitle( \"Garry's Mod Wiki\" )\ndframe:Center()\ndframe:MakePopup() -- Enable keyboard and mouse interaction for DFrame panel.\n\n-- Create a new DHTML panel as a child of dframe, and dock-fill it.\nlocal dhtml = vgui.Create( 'DHTML', dframe )\ndhtml:Dock( FILL )\n-- Navigate to Garry's Mod wikipedia website.\ndhtml:OpenURL( 'https://wiki.garrysmod.com/index.php' )\n-- Run JavaScript code.\ndhtml:QueueJavascript( [[document.body.innerHTML = 'HTML changed from Lua using JavaScript!';]] )\n\n-- This does not throw an error/exception, but instead returns nil/no value.\n-- That means you can't pass/return values from JavaScript back to Lua context using this function.\nlocal number = dhtml:QueueJavascript( '22;' )\nprint( number )","description":"Shows how to change [http://www.w3schools.com/jsref/prop_html_innerhtml.asp document.body.innerHTML] property by calling this function on [[:Category:DHTML|DHTML]] panel."}],"isConstructor":false,"name":"QueueJavascript","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"Whether or not to allow Lua.","isOptional":true,"isVarArg":false,"name":"allow","type":"boolean"}],"description":"Determines whether the loaded page can run Lua code or not. See {{Type|DHTML}} for how to run Lua from a DHTML window.","examples":[],"isConstructor":false,"name":"SetAllowLua","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True if scrollbars should be visible.","isOptional":false,"isVarArg":false,"name":"show","type":"boolean"}],"description":"{{Deprecated|Broken. Use the CSS ''overflow'' rule instead.}} Sets if the loaded window should display scrollbars when the webpage is larger than the viewing window. This is similar to the CSS ''overflow'' rule.","examples":[],"isConstructor":false,"name":"SetScrollbars","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Stops the loading of the HTML panel's current page.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"StopLoading","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Stops the loading of the HTML panel's current page.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"StopLoading","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DHTML"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"An element providing navigation controls for a {{Type|DHTML}} window.","examples":[{"code":"<nowiki>local frame = vgui.Create( \"DFrame\" ) -- Create a container for everything\nframe:SetSize( 800, 600 )\nframe:SetTitle( \"DHTMLControls Example\" )\nframe:Center()\nframe:MakePopup()\n\nlocal window = vgui.Create( \"DHTML\", frame ) -- Our DHTML window\nwindow:SetSize( 750, 500 )\nwindow:Center()\n\nlocal ctrls = vgui.Create( \"DHTMLControls\", frame) -- Navigation controls\nctrls:SetWide( 750 )\nctrls:SetPos( 25, 40 )\nctrls:SetHTML( window ) -- Links the controls to the DHTML window\nctrls.AddressBar:SetText( \"http://wiki.garrysmod.com\" ) -- Address bar isn't updated automatically\n\nwindow:MoveBelow( ctrls ) -- Align the window to sit below the controls\nwindow:OpenURL( \"http://wiki.garrysmod.com\" )</nowiki>","description":"Creates a {{Type|DHTML}} window, controls for it, and links the two."}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[],"description":"{{Internal}}","examples":[],"isConstructor":false,"name":"FinishedLoading","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A {{Struct|Color}}","isOptional":false,"isVarArg":false,"name":"clr","type":"Color"}],"description":"Sets the color of the navigation buttons.","examples":[],"isConstructor":false,"name":"SetButtonColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The HTML panel","isOptional":false,"isVarArg":false,"name":"dhtml","type":"Panel"}],"description":"Sets the {{Type|DHTML}} element to control with these {{Type|DHTMLControls}}.","examples":[],"isConstructor":false,"name":"SetHTML","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}","examples":[],"isConstructor":false,"name":"StartedLoading","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"url","type":"string"}],"description":"{{Internal}}\n\nBasically adds an URL to the history.","examples":[],"isConstructor":false,"name":"UpdateHistory","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}","examples":[],"isConstructor":false,"name":"UpdateNavButtonStatus","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The code to set.","isOptional":false,"isVarArg":false,"name":"HTML_code","type":"string"}],"description":"[[Category:HTML]][[Category:Awesomium]]Allows you to set HTML code within a panel.","examples":[{"code":"local HTML = vgui.Create( \"HTML\", DPanel )\nHTML:SetHTML( \"<p>Put HTML code here</p>\" )\nHTML:SetSize( 390, 400 )","description":""}],"isConstructor":false,"name":"SetHTML","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DHTMLControls"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Simply a [http://wiki.garrysmod.com/page/VGUI/Elements/DIconLayout DIconLayout] which automatically displays all of the [http://wiki.garrysmod.com/page/silkicons Silkicons]. Used as a way to get the user to select an icon.","examples":[{"code":"local DermaPanel = vgui.Create( \"DFrame\" )\nDermaPanel:SetPos( 100, 100 )\nDermaPanel:SetSize( 300, 200 )\nDermaPanel:SetTitle( \"DIconBrowserExample\" )\nDermaPanel:SetVisible( true )\nDermaPanel:SetDraggable( true )\nDermaPanel:ShowCloseButton( true )\nDermaPanel:MakePopup()\n\nlocal IconBrowser = vgui.Create( \"DIconBrowser\", DermaPanel )\nIconBrowser:SetPos( 5, 30 )\nIconBrowser:SetSize( 290, 265 )\nIconBrowser.OnChange = function(self)\n    chat.AddText( \"You selected: \" .. self:GetSelectedIcon())\nend","description":"Creates a DIconBrowser which, when an icon is clicked, prints said icon's directory."}],"extends":"DScrollPanel","functions":[{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nAutomatically called to fill the browser with icons. Will not work if {{ClassFunction|DIconBrowser|SetManual}} is set to true.","examples":[],"isConstructor":false,"name":"Fill","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to search for","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"A simple unused search feature, hides all icons that do not contain given text in their file path.","examples":[],"isConstructor":false,"name":"FilterByText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the browser should fill itself with icons.","examples":[],"isConstructor":false,"name":"GetManual","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the currently selected icon's file path.","examples":[],"isConstructor":false,"name":"GetSelectedIcon","realm":"client","returns":[{"description":"The currently selected icon's file path.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Called when the selected icon was changed. Use {{ClassFunction|DIconBrowser|GetSelectedIcon}} to get the selected icon's filepath.","examples":[],"isConstructor":false,"name":"OnChange","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nUse {{ClassFunction|DIconBrowser|OnChange}} instead","examples":[],"isConstructor":false,"name":"OnChangeInternal","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Scrolls the browser to the selected icon","examples":[],"isConstructor":false,"name":"ScrollToSelected","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The file path of the icon to select. Do not include the \"materials/\" part.","isOptional":false,"isVarArg":false,"name":"icon","type":"string"}],"description":"Selects an icon from file path","examples":[],"isConstructor":false,"name":"SelectIcon","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"manual","type":"boolean"}],"description":"Sets whether or not the browser should automatically fill itself with icons.","examples":[],"isConstructor":false,"name":"SetManual","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"{{Internal}}\n\nSet the currently selected file path. Do not use. Use {{ClassFunction|DIconBrowser|SelectIcon}} instead.","examples":[],"isConstructor":false,"name":"SetSelectedIcon","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DIconBrowser"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"DIconLayout is what replaced {{Type|DPanelList}} in Garry's Mod 13. DPanelList still exists in GMod but is deprecated and does not support the new GWEN skin.\n\n{{Type|DIconLayout}} is used to make a list of panels. Unlike DPanelList, DIconLayout does not automatically add a scroll bar - the example below shows you how you can do this.","examples":[{"code":"local Frame = vgui.Create( \"DFrame\" ) -- Create a Frame to contain everything.\nFrame:SetTitle( \"DIconLayout Example\" )\nFrame:SetSize( 365, 240 )\nFrame:Center()\nFrame:MakePopup()\n\nlocal Scroll = vgui.Create( \"DScrollPanel\", Frame ) -- Create the Scroll panel\nScroll:Dock( FILL )\n\nlocal List = vgui.Create( \"DIconLayout\", Scroll )\nList:Dock( FILL )\nList:SetSpaceY( 5 ) -- Sets the space in between the panels on the Y Axis by 5\nList:SetSpaceX( 5 ) -- Sets the space in between the panels on the X Axis by 5\n\nfor i = 1, 20 do -- Make a loop to create a bunch of panels inside of the DIconLayout\n\tlocal ListItem = List:Add( \"DPanel\" ) -- Add DPanel to the DIconLayout\n\tListItem:SetSize( 80, 40 ) -- Set the size of it\n\t-- You don't need to set the position, that is done automatically.\nend\n\nlocal ListLabel = List:Add( \"DLabel\" ) -- Add a label that will be the only panel on its row\nListLabel.OwnLine = true -- The magic variable that specifies this item has its own line all for itself\nListLabel:SetText( \"Hello World!\" )\n\nfor i = 1, 5 do\n\tlocal ListItem = List:Add( \"DPanel\" )\n\tListItem:SetSize( 80, 40 )\nend","description":""}],"extends":"DDragBase","functions":[{"accessModifier":"public","arguments":[],"description":"Creates a replica of the DIconLayout it is called on.","examples":[],"isConstructor":false,"name":"Copy","realm":"client","returns":[{"description":"The replica.","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"{{Type|DIconLayout}} to copy from.","isOptional":false,"isVarArg":false,"name":"from","type":"DIconLayout"}],"description":"Copies the contents (Child elements) of another {{Type|DIconLayout}} to itself.","examples":[],"isConstructor":false,"name":"CopyContents","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the size of the border.","examples":[],"isConstructor":false,"name":"GetBorder","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the direction that it will be layed out, using the DOCK enumerations.","examples":[],"isConstructor":false,"name":"GetLayoutDir","realm":"client","returns":[{"description":"Layout direction.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the distance between two 'icons' on the X axis.","examples":[],"isConstructor":false,"name":"GetSpaceX","realm":"client","returns":[{"description":"Distance between two 'icons' on the X axis.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns distance between two \"Icons\" on the Y axis.","examples":[],"isConstructor":false,"name":"GetSpaceY","realm":"client","returns":[{"description":"distance between two \"Icons\" on the Y axis.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the icon layout will stretch its height to fit all the children.\n\nSee also {{ClassFunction|DIconLayout|GetStretchWidth}}","examples":[],"isConstructor":false,"name":"GetStretchHeight","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the icon layout will stretch its width to fit all the children.\n\nSee also {{ClassFunction|DIconLayout|GetStretchHeight}}","examples":[],"isConstructor":false,"name":"GetStretchWidth","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Resets layout vars before calling {{ClassFunction|Panel|InvalidateLayout}}. This is called when children are added or removed, and must be called when the spacing, border or layout direction is changed.","examples":[],"isConstructor":false,"name":"Layout","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nUsed internally to layout the child elements if the {{ClassFunction|DIconLayout|SetLayoutDir}} is set to LEFT (See {{Enum|DOCK}}).","examples":[],"isConstructor":false,"name":"LayoutIcons_LEFT","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nUsed internally to layout the child elements if the {{ClassFunction|DIconLayout|SetLayoutDir}} is set to TOP (See {{Enum|DOCK}}).","examples":[],"isConstructor":false,"name":"LayoutIcons_TOP","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the panel is modified.","examples":[],"isConstructor":false,"name":"OnModified","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The border (padding) inside the DIconLayout.","isOptional":false,"isVarArg":false,"name":"width","type":"number"}],"description":"Sets the internal border (padding) within the DIconLayout. This will not change its size, only the positioning of children. You must call {{ClassFunction|DIconLayout|Layout}} in order for the changes to take effect.","examples":[],"isConstructor":false,"name":"SetBorder","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"{{Enum|DOCK}}","isOptional":false,"isVarArg":false,"name":"direction","type":"DOCK"}],"description":"Sets the direction that it will be layed out, using the {{Enum|DOCK}}.\n\nCurrently only TOP and LEFT are supported.","examples":[],"isConstructor":false,"name":"SetLayoutDir","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The width of the gap between child objects.","isOptional":false,"isVarArg":false,"name":"xSpacing","type":"number"}],"description":"Sets the horizontal (x) spacing between children within the DIconLayout. You must call {{ClassFunction|DIconLayout|Layout}} in order for the changes to take effect.","examples":[],"isConstructor":false,"name":"SetSpaceX","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The vertical gap between rows in the DIconLayout.","isOptional":false,"isVarArg":false,"name":"ySpacing","type":"number"}],"description":"Sets the vertical (y) spacing between children within the DIconLayout. You must call {{ClassFunction|DIconLayout|Layout}} in order for the changes to take effect.","examples":[],"isConstructor":false,"name":"SetSpaceY","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"do_stretch","type":"boolean"}],"description":"If set to true, the icon layout will stretch its height to fit all the children.\n\nSee also {{ClassFunction|DIconLayout|SetStretchWidth}}","examples":[],"isConstructor":false,"name":"SetStretchHeight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"stretchW","type":"boolean"}],"description":"If set to true, the icon layout will stretch its width to fit all the children.\n\nSee also {{ClassFunction|DIconLayout|SetStretchHeight}}","examples":[],"isConstructor":false,"name":"SetStretchWidth","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when anything is dropped on or rearranged within the {{Type|DDragBase}}.","examples":[],"isConstructor":false,"name":"OnModified","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DIconLayout"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Type|DImage}} is an advanced, more robust version of the {{Type|Material}} panel.\n\nSee {{Type|DImageButton}} for a click-able version of this panel.","examples":[{"code":"-- Frame\nFrame = vgui.Create(\"DFrame\")\nFrame:SetSize(200, 200)\nFrame:Center()\nFrame:SetTitle(\"Image of Dr. Breen\")\t-- Title of window\n\n-- Image panel of Dr. Breen\nlocal breen_img = vgui.Create(\"DImage\", Frame)\t-- Add image to Frame\nbreen_img:SetPos(10, 35)\t-- Move it into frame\nbreen_img:SetSize(150, 150)\t-- Size it to 150x150\n\n-- Set material relative to \"garrysmod/materials/\"\nbreen_img:SetImage(\"scripted/breen_fakemonitor_1\")","description":"Creates a DImage of Dr. Breen inside a {{Type|DFrame}} panel."},{"code":"-- Container panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(400, 400)\nBGPanel:Center()\nBGPanel:SetDrawBackground(false)\n\n-- Wood background\nlocal img_bg = vgui.Create(\"DImage\", BGPanel)\nimg_bg:SetSize(BGPanel:GetSize())\t\t\nimg_bg:SetImage(\"models/props_foliage/oak_tree01\")\n\n-- Blurred out screenshot of Construct\nlocal img_construct = vgui.Create(\"DImage\", BGPanel)\nimg_construct:SetPos(10, 10)\nimg_construct:SetSize(380, 380)\t\t\nimg_construct:SetImage(\"hlmv/background\")\n\n-- Flatgrass sign\nlocal img_text = vgui.Create(\"DImage\", BGPanel)\nimg_text:SetPos(10, 20)\nimg_text:SetSize(380, 130)\t\t\nimg_text:SetImage(\"gm_construct/flatsign\")","description":"Creates three DImage panels and arranges them into a new image."}],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nActually loads the {{Type|IMaterial}} to render it. Called from {{ClassFunction|DImage|LoadMaterial}}.","examples":[],"isConstructor":false,"name":"DoLoadMaterial","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\n\"Fixes\" the current material of the {{Type|DImage}} if it has VertexLit shader by creating a new one with the same name and a prefix of \"_DImage\" and automatically calling {{ClassFunction|DImage|SetMaterial}} with the new material.\n\nThis fixes the problem where using materials using shaders that expect lighting information causing \"weird\" flickering when displayed in 2D/Unlit environment.","examples":[],"isConstructor":false,"name":"FixVertexLitMaterial","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nReturns the texture path set by {{ClassFunction|DImage|SetFailsafeMatName}}.","examples":[],"isConstructor":false,"name":"GetFailsafeMatName","realm":"client","returns":[{"description":"","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the image loaded in the image panel.","examples":[{"code":"-- Frame\nMainFrame = vgui.Create(\"DFrame\")\nMainFrame:SetSize(200, 200)\nMainFrame:Center()\nMainFrame:SetTitle(\"Post process effect\")\n\n-- Load post process effect thumbnail\nlocal postprocess = vgui.Create(\"DImage\", MainFrame)\npostprocess:SetSize(128, 128)\npostprocess:Center()\n\nlocal materials = file.Find(\"materials/gui/postprocess/*.png\", \"GAME\")\n\npostprocess:SetImage(\"materials/gui/postprocess/\"..materials[math.random(1, #materials)])\n\nprint(postprocess:GetImage())","description":"Creates a frame with a randomly chosen post process effect thumbnail and prints the image path to console."}],"isConstructor":false,"name":"GetImage","realm":"client","returns":[{"description":"The path to the image that is loaded.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the color override of the image panel.","examples":[{"code":"-- Generic image panel\nlocal img = vgui.Create(\"DImage\")\nimg:SetSize(128, 128)\nimg:Center()\nimg:SetImage(\"cantop\")\n\nprint(img:GetImageColor())","description":"Creates an image panel and prints the default color override to console."}],"isConstructor":false,"name":"GetImageColor","realm":"client","returns":[{"description":"The color override of the image. Uses the {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the {{Type|DImage}} should keep the aspect ratio of its image when being resized.\n\nSee {{ClassFunction|DImage|SetKeepAspect}} for more info on how it works.","examples":[],"isConstructor":false,"name":"GetKeepAspect","realm":"client","returns":[{"description":"Whether the {{Type|DImage}} should keep the aspect ratio of its image when being resized.","type":"DImage"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current {{GlobalFunction|Material}} of the {{Type|DImage}}.","examples":[],"isConstructor":false,"name":"GetMaterial","realm":"client","returns":[{"description":"","type":"IMaterial"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nReturns the texture path set by {{ClassFunction|DImage|SetMatName}}.","examples":[],"isConstructor":false,"name":"GetMatName","realm":"client","returns":[{"description":"","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nInitializes the loading process of the material to render if it is not loaded yet.\n\nYou do not need to call this function. It is done for you automatically.","examples":[],"isConstructor":false,"name":"LoadMaterial","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The x coordinate to draw the panel from.","isOptional":false,"isVarArg":false,"name":"posX","type":"number"},{"default":"","description":"The y coordinate to draw the panel from.","isOptional":false,"isVarArg":false,"name":"posY","type":"number"},{"default":"","description":"The width of the panel image to be drawn.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The height of the panel image to be drawn.","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Paints a ghost copy of the DImage panel at the given position and dimensions. This function overrides {{ClassFunction|Panel|PaintAt}}.","examples":[],"isConstructor":false,"name":"PaintAt","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"backupMat","type":"string"}],"description":"{{Internal}}\n\nSets the backup material to be loaded when the image is first rendered. Used by {{ClassFunction|DImage|SetOnViewMaterial}}.","examples":[],"isConstructor":false,"name":"SetFailsafeMatName","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path of the image to load. When no file extension is supplied the VMT file extension is used.","isOptional":false,"isVarArg":false,"name":"strImage","type":"string"},{"default":"nil","description":"The path of the backup image.","isOptional":true,"isVarArg":false,"name":"strBackup","type":"string"}],"description":"Sets the image to load into the frame. If the first image can't be loaded and ''strBackup'' is set, that image will be loaded instead.\n\nThis eventually calls {{ClassFunction|DImage|SetMaterial}}.","examples":[{"code":"-- Frame\nMainFrame = vgui.Create( \"DFrame\" )\nMainFrame:SetSize( 300, 300 )\nMainFrame:Center()\nMainFrame:SetTitle( \"Map of de_inferno\" )\n\n-- Map of de_inferno (requires CS:S)\nlocal css_map = vgui.Create( \"DImage\", MainFrame )\ncss_map:SetPos( 25, 40 )\ncss_map:SetSize( 250, 250 )\n\n-- Set image to de_inferno map\n-- If it can't be loaded, load the [?] avatar image instead\ncss_map:SetImage(\"overviews/de_inferno\", \"vgui/avatar_default\")","description":"Creates a frame with a map of de_inferno inside, with the default avatar image loaded as a backup."}],"isConstructor":false,"name":"SetImage","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The color override of the image. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"col","type":"Color"}],"description":"Sets the image's color override.","examples":[{"code":"-- Frame\nMainFrame = vgui.Create(\"DFrame\")\nMainFrame:SetSize(200, 180)\nMainFrame:Center()\nMainFrame:SetTitle(\"Color example\")\n\n-- Image of a Portal box\nlocal metalbox_img = vgui.Create(\"DImage\", MainFrame)\nmetalbox_img:SetPos(35, 35)\nmetalbox_img:SetSize(128, 128)\nmetalbox_img:SetImage(\"spawnicons/models/props/metal_box_128.png\")\n\nmetalbox_img:SetImageColor(Color(128, 255, 0, 255))","description":"Creates a frame with a Portal box inside and sets the color to green."}],"isConstructor":false,"name":"SetImageColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"true to keep the aspect ratio, false not to","isOptional":false,"isVarArg":false,"name":"keep","type":"boolean"}],"description":"Sets whether the {{Type|DImage}} should keep the aspect ratio of its image when being resized.\n\nNote that this will not try to fit the image inside the button, but instead it will fill the button with the image.","examples":[],"isConstructor":false,"name":"SetKeepAspect","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The material to set","isOptional":false,"isVarArg":false,"name":"mat","type":"IMaterial"}],"description":"Sets a {{GlobalFunction|Material}} directly as an image.","examples":[],"isConstructor":false,"name":"SetMaterial","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"mat","type":"string"}],"description":"{{Internal}}\n\nSets the material to be loaded when the image is first rendered. Used by {{ClassFunction|DImage|SetOnViewMaterial}}.","examples":[],"isConstructor":false,"name":"SetMatName","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"mat","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"backupMat","type":"string"}],"description":"Similar to {{ClassFunction|DImage|SetImage}}, but will only do the expensive part of actually loading the textures/material if the material is about to be rendered/viewed.\n\nUseful for cases like {{Type|DIconBrowser}}, where there are hundreds of small icons in 1 panel in a list that do not need all to be loaded at the same time.","examples":[],"isConstructor":false,"name":"SetOnViewMaterial","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns true if the image is '''not''' yet loaded.","examples":[],"isConstructor":false,"name":"Unloaded","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Resizes the panel so that its width and height fit all of the content inside.\n\n{{Note|Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.}}\n\n{{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}\n\n[[Category:DImage]]\n[[Category:DImageButton]]\n[[Category:DNumberWang]]\n[[Category:DListView]]","examples":[],"isConstructor":false,"name":"SizeToContents","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The x coordinate to draw the panel from.","isOptional":false,"isVarArg":false,"name":"posX","type":"number"},{"default":"","description":"The y coordinate to draw the panel from.","isOptional":false,"isVarArg":false,"name":"posY","type":"number"}],"description":"Paints a ghost copy of the panel at the given position.","examples":[],"isConstructor":false,"name":"PaintAt","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resizes the panel so that its width and height fit all of the content inside.\n\n{{Note|Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.}}\n\n{{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}\n\n[[Category:DImage]]\n[[Category:DImageButton]]\n[[Category:DNumberWang]]\n[[Category:DListView]]","examples":[],"isConstructor":false,"name":"SizeToContents","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DImage"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"An image button.\n\nThis panel inherits all methods of {{Type|DButton}}, such as {{ClassFunction|DLabel|DoClick}}.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 300, 250 )\nframe:Center()\nframe:MakePopup()\n\nDermaImageButton = vgui.Create( \"DImageButton\", frame )\nDermaImageButton:SetPos( 25, 50 )\t\t\t\t// Set position\n//DermaImageButton:SetSize( 16, 16 )\t\t\t// OPTIONAL: Use instead of SizeToContents() if you know/want to fix the size\nDermaImageButton:SetImage( \"icon16/bomb.png\" )\t// Set the material - relative to /materials/ directory\nDermaImageButton:SizeToContents()\t\t\t\t// OPTIONAL: Use instead of SetSize if you want to resize automatically ( without stretching )\nDermaImageButton.DoClick = function()\n\tMsg( \"You clicked the image!\" )\nend","description":"The DImageButton is the same as the DImage, but you can click it. When you hover over it, you will get the default link cursor on Windows."}],"extends":"DButton","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the \"image\" of the {{Type|DImageButton}}. Equivalent of {{ClassFunction|DImage|GetImage}}.","examples":[],"isConstructor":false,"name":"GetImage","realm":"client","returns":[{"description":"The path to the image that is loaded.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the image inside the button should be stretched to fit it or not\n\nSee {{ClassFunction|DImageButton|SetStretchToFit}}","examples":[],"isConstructor":false,"name":"GetStretchToFit","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{GlobalFunction|Color}} to set","isOptional":false,"isVarArg":false,"name":"color","type":"table"}],"description":"Sets the color of the image. Equivalent of {{ClassFunction|DImage|SetImageColor}}","examples":[],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nAlias of {{ClassFunction|DImageButton|SetImage}}.","examples":[],"isConstructor":false,"name":"SetIcon","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path of the image to load. When no file extension is supplied the VMT file extension is used.","isOptional":false,"isVarArg":false,"name":"strImage","type":"string"},{"default":"","description":"The path of the backup image.","isOptional":false,"isVarArg":false,"name":"strBackup","type":"string"}],"description":"Sets the \"image\" of the {{Type|DImageButton}}. Equivalent of {{ClassFunction|DImage|SetImage}}.","examples":[],"isConstructor":false,"name":"SetImage","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Set true to make it visible ( default ), or false to hide the image","isOptional":false,"isVarArg":false,"name":"visible","type":"boolean"}],"description":"Hides or shows the image of the image button. Internally this calls {{ClassFunction|Panel|SetVisible}} on the internal {{Type|DImage}}.","examples":[],"isConstructor":false,"name":"SetImageVisible","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"true to keep the aspect ratio, false not to","isOptional":false,"isVarArg":false,"name":"keep","type":"boolean"}],"description":"Sets whether the {{Type|DImageButton}} should keep the aspect ratio of its image. Equivalent of {{ClassFunction|DImage|SetKeepAspect}}.\n\nNote that this will not try to fit the image inside the button, but instead it will fill the button with the image.","examples":[],"isConstructor":false,"name":"SetKeepAspect","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The material to set","isOptional":false,"isVarArg":false,"name":"mat","type":"IMaterial"}],"description":"Sets a {{GlobalFunction|Material}} directly as an image. Equivalent of {{ClassFunction|DImage|SetMaterial}}.","examples":[],"isConstructor":false,"name":"SetMaterial","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"mat","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"backup","type":"string"}],"description":"See {{ClassFunction|DImage|SetOnViewMaterial}}","examples":[],"isConstructor":false,"name":"SetOnViewMaterial","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to stretch, false to not to stretch","isOptional":false,"isVarArg":false,"name":"stretch","type":"boolean"}],"description":"Sets whether the image inside the {{Type|DImageButton}} should be stretched to fill the entire size of the button, without preserving aspect ratio.\n\nIf set to false, the image will not be resized at all.","examples":[],"isConstructor":false,"name":"SetStretchToFit","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resizes the panel so that its width and height fit all of the content inside.\n\n{{Note|Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.}}\n\n{{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}\n\n[[Category:DImage]]\n[[Category:DImageButton]]\n[[Category:DNumberWang]]\n[[Category:DListView]]","examples":[],"isConstructor":false,"name":"SizeToContents","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The color to set. Uses the Color structure.","isOptional":false,"isVarArg":false,"name":"color","type":"table"}],"description":"Changes color of label. Alias of {{ClassFunction|DLabel|SetTextColor}}.","examples":[{"code":"local DLabel = vgui.Create( \"DLabel\" )\nDLabel:SetPos( 90, 50 )\nDLabel:SetColor(Color(255, 0, 0))\nDLabel:SetText( \"Hello world.\" )\nDLabel:SizeToContents()","description":"Creates a label and changes it color to red."}],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"The image file to use, relative to ''/materials''. If this is nil, the image background is removed.","isOptional":true,"isVarArg":false,"name":"img","type":"string"}],"description":"Sets an image to be displayed as the button's background. Alias of {{ClassFunction|DButton|SetImage}}","examples":[],"isConstructor":false,"name":"SetIcon","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"The image file to use, relative to ''/materials''. If this is nil, the image background is removed.","isOptional":true,"isVarArg":false,"name":"img","type":"string"}],"description":"Sets an image to be displayed as the button's background.","examples":[],"isConstructor":false,"name":"SetImage","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resizes the panel so that its width and height fit all of the content inside.\n\n{{Note|Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.}}\n\n{{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}\n\n[[Category:DImage]]\n[[Category:DImageButton]]\n[[Category:DNumberWang]]\n[[Category:DListView]]","examples":[],"isConstructor":false,"name":"SizeToContents","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DImageButton"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Uses the {{Lib|killicon}} to persistently draw a killicon.","examples":[{"code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize(200,200)\nframe:Center()\nframe:SetTitle(\"DKillIcon Example\")\n\nlocal icon = vgui.Create(\"DKillIcon\", frame)\nicon:SetName(\"weapon_crowbar\")\nicon:SizeToContents()\nicon:Center()","description":"Creates a DKillIcon and sets it to the crowbar killicon."}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[],"description":"Gets the killicon being shown.","examples":[],"isConstructor":false,"name":"GetName","realm":"client","returns":[{"description":"The name of the killicon currently being displayed.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the killicon to be displayed.","isOptional":false,"isVarArg":false,"name":"iconName","type":"string"}],"description":"Sets the killicon to be displayed. You should call {{ClassFunction|DKillIcon|SizeToContents}} following this.\n\nKillicons can be added with {{LibraryFunction|killicon|Add}} and {{LibraryFunction|killicon|AddFont}}.","examples":[],"isConstructor":false,"name":"SetName","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the internal name of the panel.","examples":[],"isConstructor":false,"name":"GetName","realm":"client","returns":[{"description":"name","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The new name of the panel.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Sets the internal name of the panel.","examples":[],"isConstructor":false,"name":"SetName","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DKillIcon"},{"classFields":[],"collectionType":"class","customConstructor":"Label","description":"A standard Derma text label. A lot of this panels functionality is a base for button elements, such as {{Type|DButton}}","examples":[{"code":"local Panel = vgui.Create( \"DFrame\" )\nPanel:SetSize( 200, 200 )\nPanel:Center()\nPanel:MakePopup()\n\nlocal DLabel = vgui.Create( \"DLabel\", Panel )\nDLabel:SetPos( 40, 40 )\nDLabel:SetText( \"Hello, world!\" )","description":"Creates a DLabel."}],"extends":"Label","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The string to set the label's text to","isOptional":false,"isVarArg":false,"name":"text","type":"string"},{"default":"nil","description":"Optional. The panel to parent the DLabel to","isOptional":true,"isVarArg":false,"name":"parent","type":"Panel"}],"description":"Convenience function that creates a DLabel, sets the text, and returns it","examples":[{"code":"local lbl = Label( \"The quick brown fox\" )","description":"Create a label"},{"code":"local pnl = vgui.Create(\"DPanel\")\nlocal lbl = Label( \"The quick brown fox\", pnl )","description":"Create a label and parents it to a DPanel"}],"isConstructor":true,"name":"constructor","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the label is left clicked (on key release) by the player.\n\nThis will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.\n\nThis can be overridden; by default, it calls {{ClassFunction|DLabel|Toggle}}.\n\nSee also {{ClassFunction|DLabel|DoRightClick}}, {{ClassFunction|DLabel|DoMiddleClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.\n\n[[Category:DButton]]","examples":[{"code":"local lbl = vgui.Create( \"DLabel\" ) -- Creates our label\nlbl:SetFont( \"DermaLarge\" )\nlbl:SetText( \"Click me!\" )\nlbl:SizeToContents()\nlbl:Center()\nlbl:SetMouseInputEnabled( true ) -- We must accept mouse input\nfunction lbl:DoClick() -- Defines what should happen when the label is clicked\n\tprint(\"I was clicked!\")\n\tself:Remove()\nend","description":"Creates a label in the center of the screen, that prints ''I was clicked!'' to the console and disappears when clicked."}],"isConstructor":false,"name":"DoClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called just before {{ClassFunction|DLabel|DoClick}}.\n\nIn {{Type|DLabel}} does nothing and is safe to override. Used by {{Type|DMenuOption}} and {{Type|DCollapsibleCategory}}'s tabs.","examples":[],"isConstructor":false,"name":"DoClickInternal","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the label is double clicked by the player with left clicks.\n\n{{ClassFunction|DLabel|SetDoubleClickingEnabled}} must be set to true for this hook to work, which it is by default.\n\nThis will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}} and {{ClassFunction|DLabel|DoClick}}.\n\nSee also {{ClassFunction|DLabel|DoRightClick}} and {{ClassFunction|DLabel|DoMiddleClick}}.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"Double Click Example\" )\nframe:SetSize( 250, 100 )\nframe:Center()\nframe:MakePopup()\n\nlocal frame_label = vgui.Create( \"DLabel\", frame )\nframe_label:SetPos( 10, 30 )\nframe_label:SetTextColor( Color( 255, 255, 255 ) )\nframe_label:SetText( \"Double click me!\" )\nframe_label:SizeToContents()\nframe_label:SetMouseInputEnabled( true )\nframe_label.DoDoubleClick = function()\n\tgui.OpenURL(\"https://wiki.garrysmod.com/\")\nend\n\n-- Uncommentiing this will disable double clicking\n-- frame_label:SetDoubleClickingEnabled( false )","description":"Opens a URL in Steam Overlay by double clicking the text \"Click ME\"!"}],"isConstructor":false,"name":"DoDoubleClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called just before {{ClassFunction|DLabel|DoDoubleClick}}. In {{Type|DLabel}} does nothing and is safe to override.","examples":[],"isConstructor":false,"name":"DoDoubleClickInternal","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the label is middle mouse (Mouse wheel, also known as mouse 3) clicked (on key release) by the player.\n\nThis will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.\n\nSee also {{ClassFunction|DLabel|DoClick}}, {{ClassFunction|DLabel|DoRightClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.\n\n[[Category:DButton]]","examples":[],"isConstructor":false,"name":"DoMiddleClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the label is right clicked (on key release) by the player.\n\nThis will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.\n\nSee also {{ClassFunction|DLabel|DoClick}}, {{ClassFunction|DLabel|DoMiddleClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.\n\n\n[[Category:DButton]]","examples":[{"code":"local lbl = vgui.Create( \"DLabel\" )\nlbl:SetFont( \"DermaLarge\" )\nlbl:SetText( \"Click me!\" )\nlbl:SizeToContents()\nlbl:Center()\nlbl:SetMouseInputEnabled( true )\nfunction lbl:DoRightClick()\n\tprint(\"I was right clicked!\")\n\tself:Remove()\nend","description":"Creates a label in the center of the screen, that prints ''I was right clicked!'' to the console and disappears when right clicked."}],"isConstructor":false,"name":"DoRightClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns whether the label stretches vertically or not.\n\nSet by {{ClassFunction|DLabel|SetAutoStretchVertical}}.","examples":[],"isConstructor":false,"name":"GetAutoStretchVertical","realm":"client","returns":[{"description":"Whether the label stretches vertically or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the {{Type|DLabel}} should set its text color to the current skin's bright text color.\n\nSee {{ClassFunction|DLabel|SetBright}}.","examples":[],"isConstructor":false,"name":"GetBright","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the actual color of the text.\n\nSee also {{ClassFunction|DLabel|GetTextColor}} and {{ClassFunction|DLabel|GetTextStyleColor}}.","examples":[],"isConstructor":false,"name":"GetColor","realm":"client","returns":[{"description":"The the actual color of the text.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the {{Type|DLabel}} should set its text color to the current skin's dark text color.\n\nSee {{ClassFunction|DLabel|SetDark}}.","examples":[],"isConstructor":false,"name":"GetDark","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|Use {{ClassFunction|Panel|IsEnabled}} instead.}}\n\nGets the disabled state of the {{Type|DLabel}}. This is set with {{ClassFunction|DLabel|SetDisabled}}.","examples":[],"isConstructor":false,"name":"GetDisabled","realm":"client","returns":[{"description":"The disabled state of the label.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not double clicking will call {{ClassFunction|DLabel|DoDoubleClick}}.\n\nSee {{ClassFunction|DLabel|SetDoubleClickingEnabled}}.","examples":[],"isConstructor":false,"name":"GetDoubleClickingEnabled","realm":"client","returns":[{"description":"true = enabled, false means disabled","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"[[Category:DButton]] Returns the current font of the DLabel. This is set with {{ClassFunction|DLabel|SetFont}}.","examples":[],"isConstructor":false,"name":"GetFont","realm":"client","returns":[{"description":"The name of the font in use.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the {{Type|DLabel}} should set its text color to the current skin's highlighted text color.\n\nSee {{ClassFunction|DLabel|SetHighlight}}.","examples":[],"isConstructor":false,"name":"GetHighlight","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the toggle functionality is enabled for a label. Set with {{ClassFunction|DLabel|SetIsToggle}}.","examples":[],"isConstructor":false,"name":"GetIsToggle","realm":"client","returns":[{"description":"Whether or not toggle functionality is enabled.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the \"override\" text color, set by {{ClassFunction|DLabel|SetTextColor}}.","examples":[],"isConstructor":false,"name":"GetTextColor","realm":"client","returns":[{"description":"The color of the text, or nil.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nReturns the \"internal\" or fallback color of the text.\n\nSee also {{ClassFunction|DLabel|GetTextColor}} and {{ClassFunction|DLabel|SetTextStyleColor}}.","examples":[],"isConstructor":false,"name":"GetTextStyleColor","realm":"client","returns":[{"description":"The \"internal\" color of the text","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current toggle state of the label. This can be set with {{ClassFunction|DLabel|SetToggle}} and toggled with {{ClassFunction|DLabel|Toggle}}.\n\nIn order to use toggle functionality, you must first call {{ClassFunction|DLabel|SetIsToggle}} with ''true'', as it is disabled by default.","examples":[],"isConstructor":false,"name":"GetToggle","realm":"client","returns":[{"description":"The current toggle state.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called when the player presses the label with any mouse button.\n\nThis works as an alternative to {{HookFunction|PANEL|OnMousePressed}} as that hook is used heavily by {{Type|DLabel}} and overriding it will break functionality.\n\nSee also {{ClassFunction|DLabel|DoClick}}, {{ClassFunction|DLabel|DoMiddleClick}}, {{ClassFunction|DLabel|DoRightClick}}, {{ClassFunction|DLabel|OnReleased}} and {{ClassFunction|DLabel|DoDoubleClick}}.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"OnDepressed/Released Example\" )\nframe:SetSize( 300, 100 )\nframe:Center()\nframe:MakePopup()\n\nlocal frame_label = vgui.Create( \"DLabel\", frame )\nframe_label:SetPos( 10, 30 )\nframe_label:SetTextColor( Color( 255, 255, 255 ) )\nframe_label:SetText( \"Click me!\" )\nframe_label:SizeToContents()\nframe_label:SetMouseInputEnabled( true )\nframe_label.OnDepressed = function( s )\n\ts:SetText( \"OnDepressed\" )\n\tframe_label:SizeToContents()\nend\nframe_label.OnReleased = function( s )\n\ts:SetText( \"OnReleased\" )\n\tframe_label:SizeToContents()\nend","description":"Changes the text of the label when the hook is called."}],"isConstructor":false,"name":"OnDepressed","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the player releases any mouse button on the label. This is always called after {{ClassFunction|DLabel|OnDepressed}}.\n\nThis works as an alternative to {{HookFunction|PANEL|OnMouseReleased}} as that hook is used heavily by {{Type|DLabel}} and overriding it will break functionality.\n\nSee also {{ClassFunction|DLabel|DoClick}}, {{ClassFunction|DLabel|DoMiddleClick}}, {{ClassFunction|DLabel|DoRightClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"OnDepressed/Released Example\" )\nframe:SetSize( 300, 100 )\nframe:Center()\nframe:MakePopup()\n\nlocal frame_label = vgui.Create( \"DLabel\", frame )\nframe_label:SetPos( 10, 30 )\nframe_label:SetTextColor( Color( 255, 255, 255 ) )\nframe_label:SetText( \"Click me!\" )\nframe_label:SizeToContents()\nframe_label:SetMouseInputEnabled( true )\nframe_label.OnDepressed = function( s )\n\ts:SetText( \"OnDepressed\" )\n\tframe_label:SizeToContents()\nend\nframe_label.OnReleased = function( s )\n\ts:SetText( \"OnReleased\" )\n\tframe_label:SizeToContents()\nend","description":"Changes the text of the label when the hook is called."}],"isConstructor":false,"name":"OnReleased","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new toggle state.","isOptional":false,"isVarArg":false,"name":"toggleState","type":"boolean"}],"description":"Called when the toggle state of the label is changed by {{ClassFunction|DLabel|Toggle}}.\n\nIn order to use toggle functionality, you must first call {{ClassFunction|DLabel|SetIsToggle}} with ''true'', as it is disabled by default.","examples":[],"isConstructor":false,"name":"OnToggled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whenever to stretch the label vertically or not.","isOptional":false,"isVarArg":false,"name":"stretch","type":"boolean"}],"description":"Automatically adjusts the height of the label dependent of the height of the text inside of it.","examples":[],"isConstructor":false,"name":"SetAutoStretchVertical","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whenever to set the text to bright or not.","isOptional":false,"isVarArg":false,"name":"bright","type":"boolean"}],"description":"{{Deprecated|You really should use {{ClassFunction|DLabel|SetTextColor}}.}}\n\nSets the color of the text to the bright text color defined in the skin.\n\nSee also {{ClassFunction|DLabel|SetDark}} and {{ClassFunction|DLabel|SetHighlight}}.\n\nYou should only consider using this if you are using background elements that are not manually painted and are using the skin colors.","examples":[],"isConstructor":false,"name":"SetBright","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The color to set. Uses the Color structure.","isOptional":false,"isVarArg":false,"name":"color","type":"table"}],"description":"Changes color of label. Alias of {{ClassFunction|DLabel|SetTextColor}}.","examples":[{"code":"local DLabel = vgui.Create( \"DLabel\" )\nDLabel:SetPos( 90, 50 )\nDLabel:SetColor(Color(255, 0, 0))\nDLabel:SetText( \"Hello world.\" )\nDLabel:SizeToContents()","description":"Creates a label and changes it color to red."}],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whenever to set the text to dark or not.","isOptional":false,"isVarArg":false,"name":"dark","type":"boolean"}],"description":"{{Deprecated|You really should use {{ClassFunction|DLabel|SetTextColor}}.}}\n\nSets the color of the text to the dark text color defined in the skin.\n\nSee also {{ClassFunction|DLabel|SetBright}} and {{ClassFunction|DLabel|SetHighlight}}.\n\nYou should only consider using this if you are using background elements that are not manually painted and are using the skin colors.","examples":[],"isConstructor":false,"name":"SetDark","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"''true'' to disable the DLabel, ''false'' to enable it.","isOptional":false,"isVarArg":false,"name":"disable","type":"boolean"}],"description":"{{Deprecated|Use {{ClassFunction|Panel|SetEnabled}} instead.}}\n\nSets the disabled state of the {{Type|DLabel}}.\n\nWhen disabled, the label does not respond to click, toggle or drag & drop actions.","examples":[],"isConstructor":false,"name":"SetDisabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"true to enable, false to disable","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Sets whether or not double clicking should call {{ClassFunction|DLabel|DoDoubleClick}}.\n\nThis is enabled by default.","examples":[],"isConstructor":false,"name":"SetDoubleClickingEnabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the font.\n\nSee [[Default_Fonts|here]] for a list of existing fonts.\nAlternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font.","isOptional":false,"isVarArg":false,"name":"fontName","type":"string"}],"description":"[[Category:DButton]] Sets the font of the label.","examples":[],"isConstructor":false,"name":"SetFont","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"true to set the label's color to skins's text highlight color, false otherwise.","isOptional":false,"isVarArg":false,"name":"highlight","type":"boolean"}],"description":"{{Deprecated|You really should use {{ClassFunction|DLabel|SetTextColor}}.}}\n\nSets the color of the text to the highlight text color defined in the skin.\n\nFor the default Derma skin this makes the label red.\n\nSee also {{ClassFunction|DLabel|SetBright}} and {{ClassFunction|DLabel|SetDark}}.\n\nYou should only consider using this if you are using background elements that are not manually painted and are using the skin colors.","examples":[],"isConstructor":false,"name":"SetHighlight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether or not to enable toggle functionality.","isOptional":false,"isVarArg":false,"name":"allowToggle","type":"boolean"}],"description":"Enables or disables toggle functionality for a label. Retrieved with {{ClassFunction|DLabel|GetIsToggle}}.\n\nYou must call this before using {{ClassFunction|DLabel|SetToggle}}, {{ClassFunction|DLabel|GetToggle}} or {{ClassFunction|DLabel|Toggle}}.","examples":[],"isConstructor":false,"name":"SetIsToggle","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text color. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Sets the text color of the {{Type|DLabel}}. This will take precedence over {{ClassFunction|DLabel|SetTextStyleColor}}.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"Text Color Example\" )\nframe:SetSize( 300, 100 )\nframe:Center()\nframe:MakePopup()\n\nlocal frame_label = vgui.Create( \"DLabel\", frame )\nframe_label:SetPos( 10, 30 )\nframe_label:SetTextColor( Color( 255, 0, 0) )","description":"Changes the text color to red."}],"isConstructor":false,"name":"SetTextColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text color. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"{{Internal|Use {{ClassFunction|DLabel|SetTextColor}} instead!}}\n\n\nUsed by {{ClassFunction|DLabel|SetDark}}, {{ClassFunction|DLabel|SetBright}} and {{ClassFunction|DLabel|SetHighlight}} to set the text color without affecting {{ClassFunction|DLabel|SetTextColor}} calls.","examples":[],"isConstructor":false,"name":"SetTextStyleColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The toggle state to be set.","isOptional":false,"isVarArg":false,"name":"toggleState","type":"boolean"}],"description":"Sets the toggle state of the label. This can be retrieved with {{ClassFunction|DLabel|GetToggle}} and toggled with {{ClassFunction|DLabel|Toggle}}.\n\nIn order to use toggle functionality, you must first call {{ClassFunction|DLabel|SetIsToggle}} with ''true'', as it is disabled by default.","examples":[],"isConstructor":false,"name":"SetToggle","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Toggles the label's state. This can be set and retrieved with {{ClassFunction|DLabel|SetToggle}} and {{ClassFunction|DLabel|GetToggle}}.\n\nIn order to use toggle functionality, you must first call {{ClassFunction|DLabel|SetIsToggle}} with ''true'', as it is disabled by default.","examples":[],"isConstructor":false,"name":"Toggle","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A table supposed to contain the color values listed above.","isOptional":false,"isVarArg":false,"name":"skin","type":"table"}],"description":"A hook called from within {{ClassFunction|DLabel|ApplySchemeSettings}} to determine the color of the text on display.","examples":[],"isConstructor":false,"name":"UpdateColours","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nCalled internally to update the color of the text.","examples":[],"isConstructor":false,"name":"UpdateFGColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The direction of the content, based on the number pad.\n<table>\n<tr><td>{{Key|7}}: '''top-left'''</td><td>{{Key|8}}: '''top-center'''</td><td>{{Key|9}}: '''top-right'''</td></tr>\n<tr><td>{{Key|4}}: '''middle-left'''</td><td>{{Key|5}}: '''center'''</td><td>{{Key|6}}: '''middle-right'''</td></tr>\n<tr><td>{{Key|1}}: '''bottom-left'''</td><td>{{Key|2}}: '''bottom-center'''</td><td>{{Key|3}}: '''bottom-right'''</td></tr>\n</table>\n[[File:DLabel_SetContentAlignment.gif]]","isOptional":false,"isVarArg":false,"name":"alignment","type":"number"}],"description":"Sets the alignment of the contents.\n\n[[Category:Label]]\n[[Category:DLabel]]","examples":[],"isConstructor":false,"name":"SetContentAlignment","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text value to set.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.\n\n{{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}\n[[Category:Label]]\n[[Category:DLabel]]\n[[Category:TextEntry]]\n[[Category:RichText]]\n[[Category:DTree_Node]]","examples":[{"code":"-- Window frame for the RichText\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"#VAC_ConnectionRefusedTitle\") -- Results in \"Connection Refused - VAC\"\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Set the text to the message you get when VAC banned\nrichtext:SetText(\"#VAC_ConnectionRefusedDetail\")","description":"Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message."}],"isConstructor":false,"name":"SetText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the name of the font that the panel renders its text with.\n\nThis is the same font name set with {{ClassFunction|Panel|SetFontInternal}}.","examples":[],"isConstructor":false,"name":"GetFont","realm":"client","returns":[{"description":"fontName","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The direction of the content, based on the number pad.\n<table>\n<tr><td>{{Key|7}}: '''top-left'''</td><td>{{Key|8}}: '''top-center'''</td><td>{{Key|9}}: '''top-right'''</td></tr>\n<tr><td>{{Key|4}}: '''middle-left'''</td><td>{{Key|5}}: '''center'''</td><td>{{Key|6}}: '''middle-right'''</td></tr>\n<tr><td>{{Key|1}}: '''bottom-left'''</td><td>{{Key|2}}: '''bottom-center'''</td><td>{{Key|3}}: '''bottom-right'''</td></tr>\n</table>\n[[File:DLabel_SetContentAlignment.gif]]","isOptional":false,"isVarArg":false,"name":"alignment","type":"number"}],"description":"Sets the alignment of the contents.\n\n[[Category:Label]]\n[[Category:DLabel]]","examples":[],"isConstructor":false,"name":"SetContentAlignment","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The direction of the content, based on the number pad.\n<table>\n<tr><td>{{Key|7}}: '''top-left'''</td><td>{{Key|8}}: '''top-center'''</td><td>{{Key|9}}: '''top-right'''</td></tr>\n<tr><td>{{Key|4}}: '''middle-left'''</td><td>{{Key|5}}: '''center'''</td><td>{{Key|6}}: '''middle-right'''</td></tr>\n<tr><td>{{Key|1}}: '''bottom-left'''</td><td>{{Key|2}}: '''bottom-center'''</td><td>{{Key|3}}: '''bottom-right'''</td></tr>\n</table>\n[[File:DLabel_SetContentAlignment.gif]]","isOptional":false,"isVarArg":false,"name":"alignment","type":"number"}],"description":"Sets the alignment of the contents.\n\n[[Category:Label]]\n[[Category:DLabel]]","examples":[],"isConstructor":false,"name":"SetContentAlignment","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text value to set.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.\n\n{{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}\n[[Category:Label]]\n[[Category:DLabel]]\n[[Category:TextEntry]]\n[[Category:RichText]]\n[[Category:DTree_Node]]","examples":[{"code":"-- Window frame for the RichText\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"#VAC_ConnectionRefusedTitle\") -- Results in \"Connection Refused - VAC\"\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Set the text to the message you get when VAC banned\nrichtext:SetText(\"#VAC_ConnectionRefusedDetail\")","description":"Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message."}],"isConstructor":false,"name":"SetText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text value to set.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.\n\n{{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}\n[[Category:Label]]\n[[Category:DLabel]]\n[[Category:TextEntry]]\n[[Category:RichText]]\n[[Category:DTree_Node]]","examples":[{"code":"-- Window frame for the RichText\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"#VAC_ConnectionRefusedTitle\") -- Results in \"Connection Refused - VAC\"\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Set the text to the message you get when VAC banned\nrichtext:SetText(\"#VAC_ConnectionRefusedDetail\")","description":"Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message."}],"isConstructor":false,"name":"SetText","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DLabel"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"An editable {{Type|DLabel}}, double click on it to edit.\n\nThis is used in the spawnmenu spawnlist headers.","examples":[{"code":"local EditLabel = vgui.Create( \"DLabelEditable\" )\nEditLabel:SetPos( 40, 40 )\nEditLabel:SetSize( 70, 30)\nEditLabel:SetText( \"Hello, world!\" )","description":"Creates a DLabelEditable."}],"extends":"DLabel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The original user input text","isOptional":false,"isVarArg":false,"name":"txt","type":"string"}],"description":"A hook called when the player presses Enter (i.e. the finished editing the label) and the text has changed.\n\nAllows you to override/modify the text that will be set to display.","examples":[],"isConstructor":false,"name":"OnLabelTextChanged","realm":"client","returns":[{"description":"If provided, will override the text that will be applied to the label itself.","type":"string"}]}],"isHook":false,"isPureAbstract":true,"name":"DLabelEditable"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Underlined link label without a DoClick function. When a valid URL is set and the label is clicked, it will open a browser window and navigate to the address.\n\nThis panel uses {{LibraryFunction|gui|OpenURL}} internally and its restrictions apply.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize(400,400)\nframe:SetTitle(\"Test panel\")\nframe:Center()\nframe:MakePopup()\n\nlocal lbl = vgui.Create( \"DLabelURL\", frame )\nlbl:SetPos(50, 50)\nlbl:SetSize(100, 50)\nlbl:SetColor(Color(255,255,255,255)) \nlbl:SetText(\"I Love Gmod\") \nlbl:SetURL(\"http://steamcommunity.com/groups/glua\")","description":"Creates a DLabelURL that opens the wiki when clicked."}],"extends":"URLLabel","functions":[{"accessModifier":"public","arguments":[],"description":"Gets the current text color of the {{Type|DLabelURL}}. Alias as {{ClassFunction|DLabelURL|GetTextColor}}.","examples":[],"isConstructor":false,"name":"GetColor","realm":"client","returns":[{"description":"The current text {{GlobalFunction|Color}}.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Gets the current text color of the {{Type|DLabelURL}} set by {{ClassFunction|DLabelURL|SetTextColor}}.","examples":[],"isConstructor":false,"name":"GetTextColor","realm":"client","returns":[{"description":"The current text {{GlobalFunction|Color}}.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the color set by {{ClassFunction|DLabelURL|SetTextStyleColor}}.","examples":[],"isConstructor":false,"name":"GetTextStyleColor","realm":"client","returns":[{"description":"The {{Struct|Color}}","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{GlobalFunction|Color}} to use.","isOptional":false,"isVarArg":false,"name":"col","type":"table"}],"description":"Alias of {{ClassFunction|DLabelURL|SetTextColor}}.","examples":[],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{GlobalFunction|Color}} to use.","isOptional":false,"isVarArg":false,"name":"col","type":"table"}],"description":"Sets the text color of the {{Type|DLabelURL}}. Overrides {{ClassFunction|DLabelURL|SetTextStyleColor}}.\n\n{{Validate}}\nThis should only be used immediately after it is created, and otherwise {{ClassFunction|Panel|SetFGColor}}.","examples":[],"isConstructor":false,"name":"SetTextColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{GlobalFunction|Color}} to set","isOptional":false,"isVarArg":false,"name":"color","type":"table"}],"description":"Sets the base text color of the {{Type|DLabelURL}}. This is overridden by {{ClassFunction|DLabelURL|SetTextColor}}.","examples":[],"isConstructor":false,"name":"SetTextStyleColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The URL to set. This '''must''' begin with ''<nowiki>http://</nowiki>''.","isOptional":false,"isVarArg":false,"name":"url","type":"string"}],"description":"[[Category:DLabelURL]][[Category:URLLabel]]Sets the URL of a link-based panel such as {{Type|DLabelURL}}.","examples":[],"isConstructor":false,"name":"SetURL","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The URL to set. This '''must''' begin with ''<nowiki>http://</nowiki>''.","isOptional":false,"isVarArg":false,"name":"url","type":"string"}],"description":"[[Category:DLabelURL]][[Category:URLLabel]]Sets the URL of a link-based panel such as {{Type|DLabelURL}}.","examples":[],"isConstructor":false,"name":"SetURL","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DLabelURL"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Deprecated|Derived from the deprecated {{Type|DPanelList}}.}} A simple list box with optional multi-select. As this is deprecated, it is recommended that you use {{Type|DListView}}, which contains the same functionality with multi-column options.","examples":[],"extends":"DPanelList","functions":[],"isHook":false,"isPureAbstract":true,"name":"DListBox"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal|Used by {{Type|DListBox}}.}}","examples":[],"extends":"DLabel","functions":[],"isHook":false,"isPureAbstract":true,"name":"DListBoxItem"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A vertical list of panels that optionally allows child elements to be rearranged with the mouse cursor.\n\nChild panels' widths are set to the width of the DListLayout, and it resizes vertically to accommodate the heights of all children. You can place this inside a {{Type|DScrollPanel}} when adding many panels.\n\nTo enable the drag & drop rearrangement functionality, call {{ClassFunction|DDragBase|MakeDroppable}} on the DListLayout with a unique identifier. All panels added following this will be moveable.","examples":[{"code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize(250, 250)\nframe:SetTitle(\"DListLayout Example\")\nframe:MakePopup()\nframe:Center()\n\nlocal layout = vgui.Create(\"DListLayout\", frame)\nlayout:SetSize(100, 100)\nlayout:SetPos(20, 50)\n\n--Draw a background so we can see what it's doing\nlayout:SetPaintBackground(true)\nlayout:SetBackgroundColor(Color(0, 100, 100))\n\nlayout:MakeDroppable(\"unique_name\") -- Allows us to rearrange children\n\nfor i = 1, 8 do\n\tlayout:Add(Label(\" Label \" .. i))\nend","description":"Creates a DListLayout within a {{Type|DFrame}} and adds 8 {{Type|DLabel}}s."}],"extends":"DDragBase","functions":[],"isHook":false,"isPureAbstract":true,"name":"DListLayout"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A data view with rows and columns.","examples":[{"code":"local f = vgui.Create( \"DFrame\" )\nf:SetSize( 500, 500 )\nf:Center()\nf:MakePopup()\n\nlocal AppList = vgui.Create( \"DListView\", f )\nAppList:Dock( FILL )\nAppList:SetMultiSelect( false )\nAppList:AddColumn( \"Application\" )\nAppList:AddColumn( \"Size\" )\n\nAppList:AddLine( \"PesterChum\", \"2mb\" )\nAppList:AddLine( \"Lumitorch\", \"512kb\" )\nAppList:AddLine( \"Troj-on\", \"661kb\" )\n\nAppList.OnRowSelected = function( lst, index, pnl )\n\tprint( \"Selected \" .. pnl:GetColumnText( 1 ) .. \" ( \" .. pnl:GetColumnText( 2 ) .. \" ) at index \" .. index )\nend","description":"Creates a DListView and populates it with two columns and three items, only one of which can be selected at a time.\n\nSelecting a row will print a console message containing the text of the row and its index."}],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The name of the column to add.","isOptional":false,"isVarArg":false,"name":"column","type":"string"},{"default":"","description":"Sets the ordering of this column compared to other columns.","isOptional":false,"isVarArg":false,"name":"position","type":"number"}],"description":"Adds a column to the listview.","examples":[],"isConstructor":false,"name":"AddColumn","realm":"client","returns":[{"description":"The newly created {{Type|DListView_Column}}.","type":"DListView_Column"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Values for a new row in the DListView, If several arguments are supplied, each argument will correspond to a respective column in the DListView.","isOptional":false,"isVarArg":true,"name":"text","type":"any"}],"description":"Adds a line to the list view.","examples":[],"isConstructor":false,"name":"AddLine","realm":"client","returns":[{"description":"The newly created {{Type|DListView_Line}}.","type":"DListView_Line"}]},{"accessModifier":"public","arguments":[],"description":"Removes all lines that have been added to the DListView.","examples":[],"isConstructor":false,"name":"Clear","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Clears the current selection in the DListView.","examples":[],"isConstructor":false,"name":"ClearSelection","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The column to get the width of.","isOptional":false,"isVarArg":false,"name":"column","type":"number"}],"description":"Gets the width of a column.","examples":[],"isConstructor":false,"name":"ColumnWidth","realm":"client","returns":[{"description":"Width of the column.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Creates the lines and gets the height of the contents, in a DListView.","examples":[],"isConstructor":false,"name":"DataLayout","realm":"client","returns":[{"description":"The height of the contents","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Removes the scrollbar.","examples":[],"isConstructor":false,"name":"DisableScrollbar","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The line number of the double clicked line.","isOptional":false,"isVarArg":false,"name":"lineID","type":"number"},{"default":"","description":"The double clicked {{Type|DListView_Line}}.","isOptional":false,"isVarArg":false,"name":"line","type":"DListView_Line"}],"description":"Called when a line in the DListView is double clicked.","examples":[{"code":"local DList = vgui.Create(\"DListView\")\nDList:SetPos(5,50)\nDList:SetSize(150, 245)\nDList:AddColumn(\"Player Names\")\n\nfor k, v in pairs( player.GetAll() ) do\n\tDList:AddLine(v:Name())\nend\n\nfunction DList:DoDoubleClick( lineID, line )\n\tMsgN( \"Line \" .. lineID .. \" was double clicked!\" )\nend","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"DoDoubleClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nInternal helper function called from the {{HookFunction|PANEL|PerformLayout}} of {{Type|DListView}}.","examples":[],"isConstructor":false,"name":"FixColumnsLayout","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Gets the canvas.","examples":[],"isConstructor":false,"name":"GetCanvas","realm":"client","returns":[{"description":"The canvas.","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns the height of the data of the {{Type|DListView}}.\n\nSee also {{ClassFunction|DListView|SetDataHeight}}.","examples":[],"isConstructor":false,"name":"GetDataHeight","realm":"client","returns":[{"description":"The height of the data of the {{Type|DListView}}.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nSee {{ClassFunction|DListView|SetDirty}}.","examples":[],"isConstructor":false,"name":"GetDirty","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the height of the header of the {{Type|DListView}}.\n\nSee also {{ClassFunction|DListView|SetHeaderHeight}}.","examples":[],"isConstructor":false,"name":"GetHeaderHeight","realm":"client","returns":[{"description":"The height of the header of the {{Type|DListView}}.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the header line should be visible on not.","examples":[],"isConstructor":false,"name":"GetHideHeaders","realm":"client","returns":[{"description":"Whether the header line should be visible on not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the height of {{ClassFunction|DListView|GetCanvas}}.\n\nIntended to represent the height of all data lines.","examples":[],"isConstructor":false,"name":"GetInnerTall","realm":"client","returns":[{"description":"The height of {{ClassFunction|DListView|GetCanvas}}.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The index of the line to get.","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Gets the {{Type|DListView_Line}} at the given index.","examples":[{"code":"local list = vgui.Create( \"DListView\" )\nlist:AddColumn( \"Name\" )\nlist:AddLine( \"Garry :D\" )\n\nprint( list:GetLine( 1 ) )","description":"An example of how to retrieve a DListView_Line from a DListView."}],"isConstructor":false,"name":"GetLine","realm":"client","returns":[{"description":"The {{Type|DListView_Line}} at the given index.","type":"DListView_Line"}]},{"accessModifier":"public","arguments":[],"description":"Gets all of the lines added to the DListView.","examples":[{"code":"local list = vgui.Create( \"DListView\" )\nlist:AddColumn( \"Fruit\" )\n\nlocal lines = { \"Apple\", \"Orange\", \"Banana\" }\n\nfor _, line in pairs( lines ) do\n    list:AddLine( line )\nend\n\nfor k, line in pairs( list:GetLines() ) do\n    print( k, line:GetValue( 1 ) )\nend","description":"Loops through all of the lines of a DListView and prints their first value."}],"isConstructor":false,"name":"GetLines","realm":"client","returns":[{"description":"The lines added to the DListView.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether multiple lines can be selected or not.\n\nSee {{ClassFunction|DListView|SetMultiSelect}}.","examples":[],"isConstructor":false,"name":"GetMultiSelect","realm":"client","returns":[{"description":"Whether multiple lines can be selected or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Gets all of the lines that are currently selected.","examples":[],"isConstructor":false,"name":"GetSelected","realm":"client","returns":[{"description":"A table of {{Type|DListView_Line}}s.","type":"DListView_Line[]"}]},{"accessModifier":"public","arguments":[],"description":"Gets the currently selected DListViewLine.\n\nIf {{ClassFunction|DListView|SetMultiSelect}} is set to true, only the first line of all selected lines will be returned. Use {{ClassFunction|DListView|GetSelected}} instead to get all of the selected lines.","examples":[],"isConstructor":false,"name":"GetSelectedLine","realm":"client","returns":[{"description":"The index of the currently selected line.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether sorting of columns by clicking their headers is allowed or not.\n\nSee also {{ClassFunction|DListView|SetSortable}}.","examples":[],"isConstructor":false,"name":"GetSortable","realm":"client","returns":[{"description":"Whether sorting of columns by clicking their headers is allowed or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{ClassFunction|DListView_Line|GetID}} of a line to look up","isOptional":false,"isVarArg":false,"name":"lineId","type":"number"}],"description":"{{Internal}}\n\nConverts LineID to SortedID","examples":[],"isConstructor":false,"name":"GetSortedID","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The selected line.","isOptional":false,"isVarArg":false,"name":"line","type":"Panel"},{"default":"","description":"Boolean indicating whether the line is selected.","isOptional":false,"isVarArg":false,"name":"isSelected","type":"boolean"}],"description":"{{Internal|Use {{ClassFunction|DListView|OnRowSelected}} instead!}}\n\nCalled whenever a line is clicked.","examples":[],"isConstructor":false,"name":"OnClickLine","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The column which initialized the resize","isOptional":false,"isVarArg":false,"name":"column","type":"Panel"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"size","type":"number"}],"description":"{{Internal}}\n\nCalled from {{Type|DListView_Column}}.","examples":[],"isConstructor":false,"name":"OnRequestResize","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The line ID of the right clicked line","isOptional":false,"isVarArg":false,"name":"lineID","type":"number"},{"default":"","description":"The line panel itself, a {{Type|DListView_Line}}.","isOptional":false,"isVarArg":false,"name":"line","type":"DListView_Line"}],"description":"Called when a row is right-clicked","examples":[],"isConstructor":false,"name":"OnRowRightClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The index of the row that the user clicked on.","isOptional":false,"isVarArg":false,"name":"rowIndex","type":"number"},{"default":"","description":"The {{Type|DListView_Line}} that the user clicked on.","isOptional":false,"isVarArg":false,"name":"row","type":"DListView_Line"}],"description":"Called internally by {{ClassFunction|DListView|OnClickLine}} when a line is selected. This is the function you should override to define the behavior when a line is selected.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 300, 300 )\nframe:MakePopup()\n\nlocal listView = frame:Add( \"DListView\" )\nlistView:Dock( FILL )\n\nlistView:AddColumn( \"Nick\" )\nlistView:AddColumn( \"Frags\" )\n\nfor _, v in pairs( player.GetAll() ) do\n\tlistView:AddLine( v:Nick(), v:Frags() )\nend\nlistView.OnRowSelected = function( panel, rowIndex, row )\n\tprint( row:GetValue( 1 ) )\n\tprint( row:GetValue( 2 ) )\nend","description":"Prints the first two column values of the row that was clicked. In this example it's the nickname and kills of the player selected in the list"}],"isConstructor":false,"name":"OnRowSelected","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Removes the given row, by row id (same number as {{ClassFunction|DListView|GetLine}}).","isOptional":false,"isVarArg":false,"name":"line","type":"number"}],"description":"Removes a line from the list view.","examples":[],"isConstructor":false,"name":"RemoveLine","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Selects the line at the first index of the DListView if one has been added.","examples":[],"isConstructor":false,"name":"SelectFirstItem","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The line to select.","isOptional":false,"isVarArg":false,"name":"Line","type":"Panel"}],"description":"Selects a line in the listview.","examples":[],"isConstructor":false,"name":"SelectItem","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new height to set. Default value is 17.","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Sets the height of all lines of the {{Type|DListView}} except for the header line.\n\nSee also {{ClassFunction|DListView|SetHeaderHeight}}.","examples":[],"isConstructor":false,"name":"SetDataHeight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"isDirty","type":"boolean"}],"description":"{{Internal}}\n\nUsed internally to signify if the {{Type|DListView}} needs a rebuild.","examples":[],"isConstructor":false,"name":"SetDirty","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new height to set. Default value is 16.","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Sets the height of the header line of the {{Type|DListView}}.\n\nSee also {{ClassFunction|DListView|SetDataHeight}}.","examples":[],"isConstructor":false,"name":"SetHeaderHeight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the header line should be visible on not.","isOptional":false,"isVarArg":false,"name":"hide","type":"boolean"}],"description":"Sets whether the header line should be visible on not.","examples":[],"isConstructor":false,"name":"SetHideHeaders","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether multiple lines can be selected or not","isOptional":false,"isVarArg":false,"name":"allowMultiSelect","type":"boolean"}],"description":"Sets whether multiple lines can be selected by the user by using the {{Key|Ctrl}} or {{Key|Shift}} keys. When set to false, only one line can be selected.","examples":[],"isConstructor":false,"name":"SetMultiSelect","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether sorting columns with clicking is allowed or not.","isOptional":false,"isVarArg":false,"name":"isSortable","type":"boolean"}],"description":"Enables/disables the sorting of columns by clicking.","examples":[],"isConstructor":false,"name":"SetSortable","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The index of the column that should be sorted.","isOptional":false,"isVarArg":false,"name":"columnIndex","type":"number"},{"default":"false","description":"Whether the items should be sorted in descending order or not.","isOptional":true,"isVarArg":false,"name":"descending","type":"boolean"}],"description":"Sorts the items in the specified column.","examples":[],"isConstructor":false,"name":"SortByColumn","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"","isOptional":true,"isVarArg":false,"name":"column1","type":"number"},{"default":"false","description":"","isOptional":true,"isVarArg":false,"name":"descrending1","type":"boolean"},{"default":"nil","description":"","isOptional":true,"isVarArg":false,"name":"column2","type":"number"},{"default":"false","description":"","isOptional":true,"isVarArg":false,"name":"descrending2","type":"boolean"},{"default":"nil","description":"","isOptional":true,"isVarArg":false,"name":"column3","type":"number"},{"default":"false","description":"","isOptional":true,"isVarArg":false,"name":"descrending3","type":"boolean"},{"default":"nil","description":"","isOptional":true,"isVarArg":false,"name":"column4","type":"number"},{"default":"false","description":"","isOptional":true,"isVarArg":false,"name":"descrending4","type":"boolean"}],"description":"Sorts the list based on given columns.\n\nAll arguments are optional","examples":[],"isConstructor":false,"name":"SortByColumns","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resizes the panel so that its width and height fit all of the content inside.\n\n{{Note|Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.}}\n\n{{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}\n\n[[Category:DImage]]\n[[Category:DImageButton]]\n[[Category:DNumberWang]]\n[[Category:DListView]]","examples":[],"isConstructor":false,"name":"SizeToContents","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Marks all of the panel's children for deletion.","examples":[],"isConstructor":false,"name":"Clear","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resizes the panel so that its width and height fit all of the content inside.\n\n{{Note|Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.}}\n\n{{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}\n\n[[Category:DImage]]\n[[Category:DImageButton]]\n[[Category:DNumberWang]]\n[[Category:DListView]]","examples":[],"isConstructor":false,"name":"SizeToContents","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DListView"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}A single column, used by {{Type|DListView}}.","examples":[],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The direction of the content, based on the number pad.\n<table>\n<tr><td>{{Key|7}}: '''top-left'''</td><td>{{Key|8}}: '''top-center'''</td><td>{{Key|9}}: '''top-right'''</td></tr>\n<tr><td>{{Key|4}}: '''middle-left'''</td><td>{{Key|5}}: '''center'''</td><td>{{Key|6}}: '''middle-right'''</td></tr>\n<tr><td>{{Key|1}}: '''bottom-left'''</td><td>{{Key|2}}: '''bottom-center'''</td><td>{{Key|3}}: '''bottom-right'''</td></tr>\n</table>","isOptional":false,"isVarArg":false,"name":"alignment","type":"number"}],"description":"Sets the text alignment for the column","examples":[],"isConstructor":false,"name":"SetTextAlign","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DListView_Column"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal|Used by {{Type|DListView}}.}}","examples":[],"extends":"Panel","functions":[],"isHook":false,"isPureAbstract":true,"name":"DListView_ColumnPlain"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal|Used by {{Type|DListView}}.}}","examples":[],"extends":"DButton","functions":[],"isHook":false,"isPureAbstract":true,"name":"DListView_DraggerBar"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}A panel used by {{Type|DListView}}","examples":[],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The number of the column to retrieve the text from, starts with 1.","isOptional":false,"isVarArg":false,"name":"column","type":"number"}],"description":"Gets the string held in the specified column of a {{Type|DListView_Line}} panel.\n\nThis is the same thing as doing {{ClassFunction|DListView_Line|GetValue}}( column_number ).","examples":[{"code":"local dframe = vgui.Create(\"DFrame\")\ndframe:SetSize(450, 350)\ndframe:Center()\n\nlocal dlist = vgui.Create(\"DListView\", dframe)\ndlist:Dock(FILL)\ndlist:SetMultiSelect(false)\ndlist:AddColumn(\"Name\")\ndlist:AddColumn(\"SteamID\")\ndlist:AddLine(\"Stalker\", \"STEAM_0:1:18093014\")\nfunction dlist:DoDoubleClick(linenumber, lineinfo)\n\tprint(lineinfo:GetColumnText(2))\nend","description":""}],"isConstructor":false,"name":"GetColumnText","realm":"client","returns":[{"description":"The contents of the specified column.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The number of the column to write the text from, starts with 1.","isOptional":false,"isVarArg":false,"name":"column","type":"number"},{"default":"","description":"Column text you want to set","isOptional":false,"isVarArg":false,"name":"value","type":"string"}],"description":"Sets the string held in the specified column of a {{Type|DListView_Line}} panel.","examples":[],"isConstructor":false,"name":"SetColumnText","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DListView_Line"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal|Used by {{Type|DListView_ColumnPlain}}.}}","examples":[],"extends":"DLabel","functions":[],"isHook":false,"isPureAbstract":true,"name":"DListViewHeaderLabel"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"This is the list of global functions.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The table to add the accessor functions too.","isOptional":false,"isVarArg":false,"name":"tab","type":"table"},{"default":"","description":"The key of the table to be get/set.","isOptional":false,"isVarArg":false,"name":"key","type":"any"},{"default":"","description":"The name of the functions (will be prefixed with Get and Set).","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"nil","description":"The type the setter should force to (uses {{Enum|FORCE}}).","isOptional":true,"isVarArg":false,"name":"force","type":"FORCE"}],"description":"Adds simple Get/Set accessor functions on the specified table.<br />\nCan also force the value to be set to a number, bool or string.","examples":[{"code":"local meta = FindMetaTable(\"Player\")\nAccessorFunc(meta, \"foo_bar\", \"FooBar\", FORCE_BOOL)\n\nlocal ply = player.GetByID(1)\nply:SetFooBar(true)\n\nprint(not ply:GetFooBar())","description":"Adds the GetFooBar and SetFooBar functions to the Player metatable and then uses them."}],"isConstructor":false,"name":"AccessorFunc","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the new enum/global variable.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Defines a global entity class variable with an automatic value in order to prevent collisions with other {{Enum|CLASS}}. You should prefix your variable with CLASS_ for consistency.","examples":[{"code":"Add_NPC_Class( \"CLASS_TESTER\" )\nprint( CLASS_TESTER )","description":"Creates a global variable named CLASS_TESTER and prints its value."}],"isConstructor":false,"name":"Add_NPC_Class","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Path to the image.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"Adds the specified image path to the main menu background pool. Image can be png or jpeg.","examples":[],"isConstructor":false,"name":"AddBackgroundImage","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the console command to add.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The help text.","isOptional":false,"isVarArg":false,"name":"helpText","type":"string"},{"default":"","description":"Concommand flags using {{Enum|FCVAR}}","isOptional":false,"isVarArg":false,"name":"flags","type":"FCVAR"}],"description":"{{Internal|Use {{LibraryFunction|concommand|Add}} instead.}}Tells the engine to register a console command. If the command was ran, the engine calls {{LibraryFunction|concommand|Run}}.","examples":[],"isConstructor":false,"name":"AddConsoleCommand","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"current file","description":"The name/path to the Lua file that should be sent, relative to the garrysmod/lua folder. If no parameter is specified, it sends the current file.\n\nThe file path can be relative to the script it is ran from. For example, if your script is in lua/myfolder/stuff.lua, calling {{GlobalFunction|AddCSLuaFile}}(\"otherstuff.lua\") and {{GlobalFunction|AddCSLuaFile}}(\"myfolder/otherstuff.lua\") is the same thing.","isOptional":true,"isVarArg":false,"name":"file","type":"string"}],"description":"Marks a Lua file to be sent to clients when they join the server. Doesn't do anything on the client - this means you can use it in a shared file without problems.\n\n{{Warning|If the file trying to be added is empty, an error will occur, and the file will not be sent to the client.}}\n\n{{Note|This function is not needed for scripts located in '''lua/autorun/''' and '''lua/autorun/client/''': they are automatically sent to clients.}}","examples":[{"code":"AddCSLuaFile( \"cl_init.lua\" )","description":"Adds the cl_init.lua file in the \"lua\" folder to be downloaded by connecting clients. This is required, and is normally done in init.lua."},{"code":"AddCSLuaFile()","description":"Adds the current file to the list of files to be downloaded by clients. This is usually done at the top of a shared file."}],"isConstructor":false,"name":"AddCSLuaFile","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the file.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Loads the specified image from the /cache folder, used in combination {{LibraryFunction|steamworks|Download}}.<br />\nMost addons will provide a 512x512 png image.","examples":[],"isConstructor":false,"name":"AddonMaterial","realm":"client and menu","returns":[{"description":"The material, returns nil if the cached file is not an image.","type":"IMaterial"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The origin to add.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Adds the specified vector to the PVS which is currently building. This allows all objects in visleafs visible from that vector to be drawn.","examples":[{"code":"hook.Add(\"SetupPlayerVisibility\", \"AddRTCamera\", function(pPlayer, pViewEntity)\n\t-- Adds any view entity\n\tif (pViewEntity:IsValid()) then\n\t\tAddOriginToPVS(pViewEntity:GetPos())\n\tend\nend)","description":"Adds an RTCamera's current position to all player's PVS, causing props near it to always render on an rtscreen"}],"isConstructor":false,"name":"AddOriginToPVS","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"'''This argument is no longer used'''; it has no effect on anything. You can use nil in this argument.","isOptional":true,"isVarArg":false,"name":"entindex","type":"number"},{"default":"","description":"The text for the world tip to display.","isOptional":true,"isVarArg":false,"name":"text","type":"string"},{"default":"SysTime() + 0.05","description":"'''This argument is no longer used'''; when you add a World Tip it will always last only 0.05 seconds. You can use nil in this argument.","isOptional":true,"isVarArg":false,"name":"dieTime","type":"number"},{"default":"ent:GetPos()","description":"Where in the world you want the World Tip to be drawn. If you add a valid Entity in the next argument, this argument will have no effect on the actual World Tip.","isOptional":true,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"nil","description":"Which entity you want to associate with the World Tip. This argument is optional. If set to a valid entity, this will override the position set in ''pos'' with the Entity's position.","isOptional":true,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"This function creates a World Tip, similar to the one shown when aiming at a Thruster where it shows you its force.\n\nThis function will make a World Tip that will only last 50 milliseconds (1/20th of a second), so you must call it continuously as long as you want the World Tip to be shown. It is common to call it inside a Think hook.\n\nContrary to what the function's name implies, it is impossible to create more than one World Tip at the same time. A new World Tip will overwrite the old one, so only use this function when you know nothing else will also be using it.<br />\nSee {{HookFunction|SANDBOX|PaintWorldTips}} for more information.\n\n{{Note|This function is only available in Sandbox and its derivatives}}","examples":[{"code":"hook.Add( \"Think\", \"draw World Tip\", function()\n\tlocal ply = Entity( 1 )\n\tlocal tr = ply:GetEyeTrace()\n\t\n\tlocal pos = tr.HitPos -- will be unused if ent is valid\n\tlocal ent = tr.Entity\n\t\n\tAddWorldTip( nil, \"Hello world!\", nil, pos, ent )\nend )","description":"Creates a World Tip where the player is looking. If the player is looking at an entity, the World Tip is positioned on the entity."}],"isConstructor":false,"name":"AddWorldTip","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"0","description":"The pitch value of the angle.<br/>\nIf this is an {{Type|Angle}}, this function will return a copy of the given angle.<br/>\nIf this is a {{Type|string}}, this function will try to parse the string as a angle. If it fails, it returns a 0 angle.\n(See examples)","isOptional":true,"isVarArg":false,"name":"pitch","type":"number"},{"default":"0","description":"The yaw value of the angle.","isOptional":true,"isVarArg":false,"name":"yaw","type":"number"},{"default":"0","description":"The roll value of the angle.","isOptional":true,"isVarArg":false,"name":"roll","type":"number"}],"description":"Creates an {{Type|Angle}} object.","examples":[{"code":"print( Angle( 1, 2, 3 ) )\nprint( Angle( \"4 5 6\" ) )\nlocal test = Angle( 7, 8, 9 )\nprint( Angle( test ) )\n\nprint( Angle( \"4 5 test\" ) )\nprint( Angle() )","description":"Creates an angle and prints the value to the console."}],"isConstructor":false,"name":"Angle","realm":"shared and menu","returns":[{"description":"Created angle","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Returns an angle with a randomized pitch, yaw and roll. The pitch is between -90 and 90 degrees, while yaw and roll are between -180 and 180 degrees.","examples":[{"code":"print( AngleRand() )","description":"Prints out a random angle."}],"isConstructor":false,"name":"AngleRand","realm":"shared and menu","returns":[{"description":"The randomly generated angle.","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The expression to assert.","isOptional":false,"isVarArg":false,"name":"expression","type":"any"},{"default":"\"assertion failed!\"","description":"The error message to throw when assertion fails. This is only type-checked if the assertion fails.","isOptional":true,"isVarArg":false,"name":"errorMessage","type":"string"},{"default":"nil","description":"Any arguments past the error message will be returned by a successful assert.","isOptional":false,"isVarArg":true,"name":"returns","type":"any"}],"description":"If the result of the first argument is false or nil, an error is thrown with the second argument as the message.","examples":[{"code":"local ABC = assert(print)\nprint(ABC)","description":"The assertion is successful, and the result of the first argument is returned."},{"code":"assert(print == 1, \"print is not equal to 1!\")","description":"Since the first argument evaluates to false, an error is thrown."},{"code":"print(assert(5))\nprint(assert(true, \"foo\", 2, {}))","description":"Examples of return behaviour."}],"isConstructor":false,"name":"assert","realm":"shared and menu","returns":[{"description":"If successful, returns the first argument.","type":"any"},{"description":"If successful, returns the error message. This will be nil if the second argument wasn't specified.\n\nSince the second argument is only type-checked if the assertion fails, this doesn't have to be a string.","type":"any"},{"description":"Returns any arguments past the error message.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The code to be executed. Capped at length of 254 characters.","isOptional":false,"isVarArg":false,"name":"code","type":"string"}],"description":"Sends the specified Lua code to all connected clients and executes it.","examples":[{"code":"BroadcastLua( [[print( \"Hello World!\" )]] )","description":"Print \"Hello World!\" in the clients' console"}],"isConstructor":false,"name":"BroadcastLua","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Dumps the networked variables of all entities into one table and returns it.","examples":[],"isConstructor":false,"name":"BuildNetworkedVarsTable","realm":"shared","returns":[{"description":"Format:\n* key = {{Type|Entity}} for NWVars or {{Type|number}} (always 0) for global vars\n* value = {{Type|table}} formatted as:\n** key = {{Type|string}} var name\n** value = any type var value","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nUsed internally to check if the current server the player is on can be added to favorites or not. Does not check if the server is ALREADY in the favorites.","examples":[],"isConstructor":false,"name":"CanAddServerToFavorites","realm":"menu","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Aborts joining of the server you are currently joining.","examples":[],"isConstructor":false,"name":"CancelLoading","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Apparently does nothing.","isOptional":false,"isVarArg":false,"name":"currentgm","type":"string"}],"description":"Sets the active main menu background image to a random entry from the background images pool. Images are added with {{GlobalFunction|AddBackgroundImage}}.","examples":[],"isConstructor":false,"name":"ChangeBackground","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel that has been hovered over","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"}],"description":"Automatically called by the engine when a panel is hovered over with the mouse","examples":[],"isConstructor":false,"name":"ChangeTooltip","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Empties the pool of main menu background images.","examples":[],"isConstructor":false,"name":"ClearBackgroundImages","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The file path to the model.\n\n{{Warning|Model must be precached with {{LibraryFunction|util|PrecacheModel}} on the server before usage.}}","isOptional":false,"isVarArg":false,"name":"model","type":"string"},{"default":"RENDERGROUP_OTHER","description":"The rendergroup of the entity, see {{Enum|RENDERGROUP}}.","isOptional":true,"isVarArg":false,"name":"renderGroup","type":"RENDERGROUP"}],"description":"Creates a non physical entity that only exists on the client. See also {{LibraryFunction|ents|CreateClientProp}}.\n\n{{Bug|Issue=861|Parented clientside models will become detached if the parent entity leaves the PVS.}}\n\n{{Bug|Issue=1387|Clientside entities are not garbage-collected, thus you must store a reference to the object and call {{ClassFunction|CSEnt|Remove}} manually.}}\n\n{{Bug|Issue=3184|Clientside models will occasionally delete themselves during high server lag.}}","examples":[],"isConstructor":false,"name":"ClientsideModel","realm":"client","returns":[{"description":"Created client-side model. ( C_BaseFlex )","type":"CSEnt"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The file path to the model.\n\n{{Warning|Model must be precached with {{LibraryFunction|util|PrecacheModel}} on the server before usage.}}","isOptional":false,"isVarArg":false,"name":"model","type":"string"},{"default":"RENDER_GROUP_OPAQUE","description":"The {{Enum|RENDERGROUP}} to assign.","isOptional":true,"isVarArg":false,"name":"renderGroup","type":"RENDERGROUP"}],"description":"Creates a fully clientside ragdoll.\n\n{{Note|The ragdoll initially starts as hidden and with shadows disabled, see the example for how to enable it.<br/>There's no need to call {{ClassFunction|Entity|Spawn}} on this entity.<br/>The physics won't initialize at all if the model hasn't been precached serverside first.}}\n\n{{Bug|Issue=1387|Clientside entities are not garbage-collected, thus you must store a reference to the object and call {{ClassFunction|CSEnt|Remove}} manually.}}","examples":[{"code":"local ragdoll = ClientsideRagdoll( \"models/player/breen.mdl\" )\nragdoll:SetNoDraw( false )\nragdoll:DrawShadow( true )","description":"Creates a new ragdoll with the player model of breen and enables rendering and shadows."}],"isConstructor":false,"name":"ClientsideRagdoll","realm":"client","returns":[{"description":"The newly created client-side ragdoll. ( C_ClientRagdoll )","type":"CSEnt"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the scene.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The entity to play the scene on.","isOptional":false,"isVarArg":false,"name":"targetEnt","type":"Entity"}],"description":"Creates a scene entity based on the scene name and the entity.","examples":[{"code":"ClientsideScene( \"scenes/eli_lab/mo_gowithalyx01.vcd\", LocalPlayer() )","description":"Plays \"I guess you should go with Alyx\" line from HL2."}],"isConstructor":false,"name":"ClientsideScene","realm":"client","returns":[{"description":"C_SceneEntity","type":"CSEnt"}]},{"accessModifier":"public","arguments":[],"description":"Closes all Derma menus that have been passed to {{GlobalFunction|RegisterDermaMenuForClose}} and calls {{HookFunction|GM|CloseDermaMenus}}","examples":[],"isConstructor":false,"name":"CloseDermaMenus","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"\"collect\"","description":"The action to run.\n\nValid actions are \"collect\", \"stop\", \"restart\", \"count\", \"step\", \"setpause\" and \"setstepmul\".","isOptional":true,"isVarArg":false,"name":"action","type":"string"},{"default":"","description":"The argument of the specified action, only applicable for \"step\", \"setpause\" and \"setstepmul\".","isOptional":true,"isVarArg":false,"name":"arg","type":"number"}],"description":"Executes the specified action on the garbage collector.","examples":[{"code":"print( collectgarbage( \"count\" ) )","description":"The current floored dynamic memory usage of Lua, in kilobytes."}],"isConstructor":false,"name":"collectgarbage","realm":"shared and menu","returns":[{"description":"If the action is count this is the number of kilobytes of memory used by Lua.\nIf the action is step this is true if a garbage collection cycle was finished.\n\nIf the action is setpause this is the previous value for the GC's pause.\nIf the action is setstepmul this is the previous value for the GC's step.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"An integer from 0-255 describing the red value of the color.","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"An integer from 0-255 describing the green value of the color.","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"An integer from 0-255 describing the blue value of the color.","isOptional":false,"isVarArg":false,"name":"b","type":"number"},{"default":"255","description":"An integer from 0-255 describing the alpha (transparency) of the color.","isOptional":true,"isVarArg":false,"name":"a","type":"number"}],"description":"Creates a {{Struct|Color}}.","examples":[{"code":"PrintTable(Color(1, 2, 3, 4))","description":"Creates a color and prints the components to the console."},{"code":"local col = Color( 0, 255, 0, 255)\n\ncol.r = 255\n\nPrintTable(col)","description":"Color variables can have individual channels set using the arguments"},{"code":"local str = tostring( Color( 255, 0, 0 ) )\nprint( str )","description":"Transforms a color object to a string, then prints it."},{"code":"if Color( 255, 0, 0 ) == Color( 255, 0, 0 ) then\n\tprint( \"equal\" )\nelse\n\tprint( \"unequal\" )\nend","description":"Prints \"equal\" if both colors are equal, otherwise \"unequal\" will be printed."}],"isConstructor":false,"name":"Color","realm":"shared and menu","returns":[{"description":"The created {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Struct|Color}} from which to take RGB values. This color will not be modified.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"},{"default":"","description":"The new alpha value, a number between 0 and 255. Values above 255 will be clamped.","isOptional":false,"isVarArg":false,"name":"alpha","type":"number"}],"description":"Returns a new {{Struct|Color}} with the RGB components of the given {{Struct|Color}} and the alpha value specified.","examples":[{"code":"local red = Color( 255, 0, 0, 255 )\nlocal red2 = ColorAlpha( red, 125 )\nprint( red.r, red.g, red.b, red.a )\nprint( red2.r, red2.g, red2.b, red2.a )","description":""}],"isConstructor":false,"name":"ColorAlpha","realm":"shared and menu","returns":[{"description":"The new {{Struct|Color}} with the modified alpha value","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"false","description":"Should alpha be randomized.","isOptional":true,"isVarArg":false,"name":"a","type":"boolean"}],"description":"Creates a {{Struct|Color}} with randomized red, green, and blue components. If the alpha argument is true, alpha will also be randomized.","examples":[],"isConstructor":false,"name":"ColorRand","realm":"shared and menu","returns":[{"description":"The created {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Converts a {{Struct|Color}} into HSV color space.","examples":[{"code":"print(ColorToHSV(Color(255, 255, 0)))","description":"Creates a color and prints the HSV values to the console."}],"isConstructor":false,"name":"ColorToHSV","realm":"shared and menu","returns":[{"description":"The hue in degrees.","type":"number"},{"description":"The saturation in the range 0-1.","type":"number"},{"description":"The value in the range 0-1.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Path to the file, relative to the garrysmod/lua/ directory.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"Attempts to compile the given file. If successful, returns a function that can be called to perform the actual execution of the script.","examples":[{"code":"local example = CompileFile(\"example.lua\")\nexample()","description":"Assuming our file is named example.lua and located in the garrysmod/lua/ directory, the following code would execute the script."}],"isConstructor":false,"name":"CompileFile","realm":"shared","returns":[{"description":"The function which executes the script.","type":"Function"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The code to compile.","isOptional":false,"isVarArg":false,"name":"code","type":"string"},{"default":"","description":"An identifier in case an error is thrown. (The same identifier can be used multiple times)","isOptional":false,"isVarArg":false,"name":"identifier","type":"string"},{"default":"true","description":"If false this function will return an error string instead of throwing an error.","isOptional":true,"isVarArg":false,"name":"HandleError","type":"boolean"}],"description":"This function will compile the code argument as lua code and return a function that will execute that code. \n\nPlease note that this function will not automatically execute the given code after compiling it.","examples":[{"code":"local code = \"MsgN('Hi)\"\nlocal func = CompileString(code, \"TestCode\", false)\nMsgN(func)","description":"Code that will not compile, with ErrorHandling set to false."},{"code":"local code = \"MsgN('Hi')\"\nlocal func = CompileString(code, \"TestCode\")\n\nif func then -- Compile String returns nil if 3rd argument is true and code has errors.\n   func()\nend","description":"Code that will compile."},{"code":"local code = [[\n\tlocal args = { ... } \n\tprint( unpack( args ) )\n\tprint( args[ 2 ] + args[ 3 ])\n\tprint( args[ 4 ] .. args[ 5 ])\n\n\tlocal first, second = ...\n\tprint( first, second )\n]]\nlocal func = CompileString( code, \"VarargCodeTest\" )\nfunc( 1, 2, 3, \"A\", \"B\", \"C\" )","description":"Compiled code with custom arguments; captured with the varargs identifier."}],"isConstructor":false,"name":"CompileString","realm":"shared and menu","returns":[{"description":"A function that, when called, will execute the given code. Returns nil if there was an error.","type":"Function"},{"description":"The error string. Will be nil if there were no errors or the function handles errors (third argument is true).","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Text that the console commands must begin with.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Returns a table of console command names beginning with the given text.","examples":[],"isConstructor":false,"name":"ConsoleAutoComplete","realm":"menu","returns":[{"description":"Table of console command names.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the {{Type|ConVar}}.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Returns whether a {{Type|ConVar}} with the given name exists or not","examples":[],"isConstructor":false,"name":"ConVarExists","realm":"shared and menu","returns":[{"description":"True if the {{Type|ConVar}} exists, false otherwise.","type":"ConVar"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the ConVar to be created and able to be accessed.<br><br>\n\nThis cannot be a name of existing console command or console variable. It will silently fail if it is.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Default value of the ConVar.","isOptional":false,"isVarArg":false,"name":"defaultVal","type":"string"},{"default":"true","description":"Should the ConVar be saved across sessions","isOptional":true,"isVarArg":false,"name":"shouldsave","type":"boolean"},{"default":"false","description":"Should the ConVar and its containing data be sent to the server when it has changed. This make the convar accessible from server using {{ClassFunction|Player|GetInfoNum}} and similar functions.","isOptional":true,"isVarArg":false,"name":"userinfo","type":"boolean"},{"default":"\"\"","description":"Help text to display in the console.","isOptional":true,"isVarArg":false,"name":"helptext","type":"string"}],"description":"Makes a clientside-only console variable\n\n{{Note|This function is a wrapper of {{GlobalFunction|CreateConVar}}, with the difference being that FCVAR_ARCHIVE and FCVAR_USERINFO are added automatically when '''shouldsave''' and '''userinfo''' are true, respectively.}}\n\nAlthough this function is shared, it should only be used clientside.","examples":[{"code":"CreateClientConVar(\"superspeed_enabled\", \"0\", true, false)","description":"Creates a ConVar that does nothing and saves."}],"isConstructor":false,"name":"CreateClientConVar","realm":"shared and menu","returns":[{"description":"Created convar.","type":"ConVar"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the convar.<br><br>\n\nThis cannot be a name of an engine console command or console variable. It will silently fail if it is. If it is the same name as another lua ConVar, it will return that ConVar object.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Default value of the convar. Can also be a number.","isOptional":false,"isVarArg":false,"name":"value","type":"string"},{"default":"FCVAR_NONE","description":"Flags of the convar, see {{Enum|FCVAR}}, either as bitflag or as table.","isOptional":true,"isVarArg":false,"name":"flags","type":"FCVAR"},{"default":"\"\"","description":"The help text to show in the console.","isOptional":true,"isVarArg":false,"name":"helptext","type":"string"}],"description":"Creates a console variable ({{Type|ConVar}}), in general these are for things like gamemode/server settings.","examples":[],"isConstructor":false,"name":"CreateConVar","realm":"shared and menu","returns":[{"description":"The convar created.","type":"ConVar"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The material name. Must be unique.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The shader name. See [[:Category: Shaders]].","isOptional":false,"isVarArg":false,"name":"shaderName","type":"string"},{"default":"","description":"Key-value table that contains shader parameters and proxies.\n\n*See: [https://developer.valvesoftware.com/wiki/Category:List_of_Shader_Parameters List of Shader Parameters on Valve Developers Wiki] and each shader's page from [[:Category: Shaders]].\n\n{{Note|Unlike {{ClassFunction|IMaterial|SetTexture}}, this table will not accept {{Type|ITexture}} values. Instead, use the texture's name (see {{ClassFunction|ITexture|GetName}}).}}","isOptional":false,"isVarArg":false,"name":"materialData","type":"ITexture[]"}],"description":"Creates a new material with the specified name and shader.\n\n{{Note|Materials created with this function can be used in {{ClassFunction|Entity|SetMaterial}} and {{ClassFunction|Entity|SetSubMaterial}} by prepending a \"!\" to their material name argument.}}\n\n{{Bug|Issue=1531|.pngs must be loaded with {{GlobalFunction|Material}} before being used with this function.}}\n\n{{Bug|Issue=2511|This does not work with [https://developer.valvesoftware.com/wiki/Patch patch materials].}}\n\n{{Bug|Issue=3103|This will not create a new material if another material object with the same name already exists.}}","examples":[{"code":"CreateMaterial( \"colortexshp\", \"VertexLitGeneric\", {\n  [\"$basetexture\"] = \"color/white\",\n  [\"$model\"] = 1,\n  [\"$translucent\"] = 1,\n  [\"$vertexalpha\"] = 1,\n  [\"$vertexcolor\"] = 1\n} )","description":"Alternative to {{LibraryFunction|render|SetColorMaterial}}, mainly for use with {{ClassFunction|Entity|SetMaterial}}"}],"isConstructor":false,"name":"CreateMaterial","realm":"client and menu","returns":[{"description":"Created material","type":"IMaterial"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to attach the control point to.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The name of the effect to create. It must be precached.","isOptional":false,"isVarArg":false,"name":"effect","type":"string"},{"default":"","description":"See {{Enum|PATTACH}}.","isOptional":false,"isVarArg":false,"name":"partAttachment","type":"PATTACH"},{"default":"0","description":"The attachment ID on the entity to attach the particle system to","isOptional":true,"isVarArg":false,"name":"entAttachment","type":"number"},{"default":"Vector( 0, 0, 0 )","description":"The offset from the {{ClassFunction|Entity|GetPos}} of the entity we are attaching this CP to.","isOptional":true,"isVarArg":false,"name":"offset","type":"Vector"}],"description":"Creates a new particle system.\n\n{{Note|The particle effect must be precached with {{GlobalFunction|PrecacheParticleSystem}} and the file its from must be added via {{LibraryFunction|game|AddParticles}} before it can be used!}}","examples":[],"isConstructor":false,"name":"CreateParticleSystem","realm":"client","returns":[{"description":"The created particle system.","type":"CNewParticleEffect"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Min corner of the box. This is not automatically ordered with the maxs and must contain the smallest vector components. See {{GlobalFunction|OrderVectors}}.","isOptional":false,"isVarArg":false,"name":"mins","type":"Vector"},{"default":"","description":"Max corner of the box. This is not automatically ordered with the mins and must contain the largest vector components.","isOptional":false,"isVarArg":false,"name":"maxs","type":"Vector"}],"description":"Creates a new {{Type|PhysCollide}} from the given bounds.\n\n{{Bug|Issue=3568|This fails to create planes or points - no components of the mins or maxs can be the same.}}","examples":[{"code":"AddCSLuaFile()\n\nDEFINE_BASECLASS( \"base_anim\" )\n\nENT.PrintName = \"Cube\"\nENT.Spawnable = true\n\nENT.Mins = Vector( -16, -16, -16 )\nENT.Maxs = Vector(  16,  16,  16 )\n\nfunction ENT:Initialize()\n    self.PhysCollide = CreatePhysCollideBox( self.Mins, self.Maxs )\n    self:SetCollisionBounds( self.Mins, self.Maxs )\n\n    if SERVER then\n        self:PhysicsInitBox( self.Mins, self.Maxs )\n        self:SetSolid( SOLID_VPHYSICS )\n        self:PhysWake()\n    end\n\n    if CLIENT then\n        self:SetRenderBounds( self.Mins, self.Maxs )\n    end\n\n    self:EnableCustomCollisions( true )\n    self:DrawShadow( false )\nend\n\n-- Handles collisions against traces. This includes player movement.\nfunction ENT:TestCollision( startpos, delta, isbox, extents )\n    if not IsValid( self.PhysCollide ) then\n        return\n    end\n\n    -- TraceBox expects the trace to begin at the center of the box, but TestCollision is bad\n    local max = extents\n    local min = -extents\n    max.z = max.z - min.z\n    min.z = 0\n\n    local hit, norm, frac = self.PhysCollide:TraceBox( self:GetPos(), self:GetAngles(), startpos, startpos + delta, min, max )\n\n    if not hit then\n        return\n    end\n\n    return { \n        HitPos = hit,\n        Normal  = norm,\n        Fraction = frac,\n    }\nend\n\nfunction ENT:Draw()\n    render.DrawWireframeBox( self:GetPos(), self:GetAngles(), self.Mins, self.Maxs, Color( 255, 0, 0 ), true )\nend","description":"A box that interacts correctly with VPhysics objects and player movement."}],"isConstructor":false,"name":"CreatePhysCollideBox","realm":"shared","returns":[{"description":"The new PhysCollide. This will be a NULL PhysCollide ({{ClassFunction|PhysCollide|IsValid}} returns false) if given bad vectors or no more PhysCollides can be created in the physics engine.","type":"PhysCollide"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Model path to get the collision objects of.","isOptional":false,"isVarArg":false,"name":"modelName","type":"string"}],"description":"Creates {{Type|PhysCollide}} objects for every physics object the model has. The model must be precached with {{LibraryFunction|util|PrecacheModel}} before being used with this function.","examples":[],"isConstructor":false,"name":"CreatePhysCollidesFromModel","realm":"shared","returns":[{"description":"Table of {{Type|PhysCollide}} objects. The number of entries will match the model's physics object count. See also {{ClassFunction|Entity|GetPhysicsObjectCount}}. Returns no value if the model doesn't exist, or has not been precached.","type":"PhysCollide[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The target entity.","isOptional":false,"isVarArg":false,"name":"targetEnt","type":"Entity"},{"default":"","description":"The sound to play.","isOptional":false,"isVarArg":false,"name":"soundName","type":"string"},{"default":"[https://developer.valvesoftware.com/wiki/CRecipientFilter#Derived_classes CPASAttenuationFilter]","description":"A {{Type|CRecipientFilter}} of the players that will have this sound networked to them.\n\n{{Note|This argument only works serverside.}}","isOptional":true,"isVarArg":false,"name":"filter","type":"CRecipientFilter"}],"description":"Returns a sound parented to the specified entity.\n\n{{Note|You can only create one CSoundPatch per audio file, per entity at the same time.}}","examples":[{"code":"local LoadedSounds\nif CLIENT then\n\tLoadedSounds = {} -- this table caches existing CSoundPatches\nend\n\nlocal function ReadSound( FileName )\n\tlocal sound\n\tlocal filter\n\tif SERVER then\n\t\tfilter = RecipientFilter()\n\t\tfilter:AddAllPlayers()\n\tend\n\tif SERVER or !LoadedSounds[FileName] then\n\t\t-- The sound is always re-created serverside because of the RecipientFilter.\n\t\tsound = CreateSound( game.GetWorld(), FileName, filter ) -- create the new sound, parented to the worldspawn (which always exists)\n\t\tif sound then\n\t\t\tsound:SetSoundLevel( 0 ) -- play everywhere\n\t\t\tif CLIENT then\n\t\t\t\tLoadedSounds[FileName] = { sound, filter } -- cache the CSoundPatch\n\t\t\tend\n\t\tend\n\telse\n\t\tsound = LoadedSounds[FileName][1]\n\t\tfilter = LoadedSounds[FileName][2]\n\tend\n\tif sound then\n\t\tif CLIENT then\n\t\t\tsound:Stop() -- it won't play again otherwise\n\t\tend\n\t\tsound:Play()\n\tend\n\treturn sound -- useful if you want to stop the sound yourself\nend\n\n-- When we are ready, we play the sound:\nReadSound( \"phx/hmetal1.wav\" )","description":"Play a sound everywhere, similar to {{LibraryFunction|surface|PlaySound}} but available clientside and serverside."}],"isConstructor":false,"name":"CreateSound","realm":"shared","returns":[{"description":"The sound object","type":"CSoundPatch"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Material the sprite should draw.","isOptional":false,"isVarArg":false,"name":"material","type":"IMaterial"}],"description":"Creates and returns a new {{Type|DSprite}} element with the supplied material.","examples":[],"isConstructor":false,"name":"CreateSprite","realm":"client","returns":[{"description":"The new {{Type|DSprite}} element.","type":"DSprite"}]},{"accessModifier":"public","arguments":[],"description":"Returns the uptime of the server in seconds (to at least 4 decimal places)\n\nThis is a synchronised value and affected by various factors such as host_timescale (or {{LibraryFunction|game|GetTimeScale}}) and the server being paused - either by sv_pausable or all players disconnecting.\n\nYou should use this function for timing in-game events but not for real-world events.\n\nSee also: {{GlobalFunction|RealTime}}, {{GlobalFunction|SysTime}}\n\n{{Note|This is internally defined as a float, and as such it will be affected by precision loss if your server uptime is more than 6 hours, which will cause jittery movement of players and props and inaccuracy of timers, it is highly encouraged to refresh or change the map when that happens (a server restart is not necessary).<br/><br/>This is '''NOT''' easy as it sounds to fix in the engine, so please refrain from posting issues about this}}\n\n{{Bug|Issue=3026|This returns 0 in {{HookFunction|GM|PlayerAuthed}}.}}","examples":[{"code":"local delay = 0\nhook.Add( \"Think\", \"CurTimeDelay\", function()\n if CurTime() < delay then return end\n\tprint( \"This message will repeat every 5 seconds.\" )\n\t delay = CurTime() + 5\n end)","description":"Simple delay timer."}],"isConstructor":false,"name":"CurTime","realm":"shared and menu","returns":[{"description":"Time synced with the game server.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns an {{Type|CTakeDamageInfo}} object.\n\n{{Bug|Issue=2771|This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once.}}","examples":[],"isConstructor":false,"name":"DamageInfo","realm":"shared","returns":[{"description":"The {{Type|CTakeDamageInfo}} object.","type":"CTakeDamageInfo"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The location on the right hand screen to write the debug info to. Starts at 0, no upper limit","isOptional":false,"isVarArg":false,"name":"slot","type":"number"},{"default":"","description":"The debugging information to be written to the screen","isOptional":false,"isVarArg":false,"name":"info","type":"string"}],"description":"Writes text to the right hand side of the screen, like the old error system. Messages disappear after a couple of seconds.","examples":[],"isConstructor":false,"name":"DebugInfo","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The child class.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Gets the base class of an an object.\n\nThis is used not just by entities, but also by widgets, panels, drive modes, weapons and gamemodes (with \"gamemode_\" prefix).\n\nThe keyword '''DEFINE_BASECLASS''' translates into a call to this function. In the engine, it is replaced with:\n<pre>local BaseClass = baseclass.Get</pre>","examples":[{"code":"AddCSLuaFile()\nDEFINE_BASECLASS( \"weapon_csbasegun\" ) //this is equivalent to local BaseClass = baseclass.Get( \"weapon_csbasegun\" )\n\n//omitted generic swep definitions\n\nfunction SWEP:Initialize()\n\tBaseClass.Initialize( self ) //calls SWEP:Initialize() from weapon_csbasegun\n\tself:SetHoldType( \"pistol\" )\nend\n\nfunction SWEP:Deploy()\n\tself:SetAccuracy( 0.9 )\n\treturn BaseClass.Deploy( self ) //calls SWEP:Deploy() from weapon_csbasegun and returns its result\nend\n\nfunction SWEP:SetupDataTables()\n\tBaseClass.SetupDataTables( self ) //calls SWEP:SetupDataTables() from weapon_csbasegun and inits its dtvars\nend","description":"Inherits the weapon from weapon_csbasegun and calls its base functions"}],"isConstructor":false,"name":"DEFINE_BASECLASS","realm":"shared and menu","returns":[{"description":"The base class's meta table.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Gamemode name to derive from.","isOptional":false,"isVarArg":false,"name":"base","type":"string"}],"description":"Retrieves data from a gamemode to use in yours. This also sets a BaseClass field on your GM table to the gamemode you are deriving from. It appears that this function works by running the init and cl_init Lua files of the target gamemode, then overriding functions that appear in both the target and your gamemode with your gamemode's functions.","examples":[{"code":"DeriveGamemode(\"sandbox\")","description":"Retrieves data from sandbox."}],"isConstructor":false,"name":"DeriveGamemode","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the animation to create","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Panel to run the animation on","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"},{"default":"","description":"Function to call to process the animation<br/>\nArguments:\n* {{FuncArg|Panel|pnl|the panel passed to Derma_Anim}}\n* {{FuncArg|table|anim|the anim table}}\n* {{FuncArg|number|delta|the fraction of the progress through the animation}}\n* {{FuncArg|any|data|optional data passed to the run metatable method}}","isOptional":false,"isVarArg":false,"name":"func","type":"Function"}],"description":"Creates a new derma animation.","examples":[{"code":"local function inQuad(fraction, beginning, change)\n\treturn change * (fraction ^ 2) + beginning\nend\n\nlocal main = vgui.Create(\"DFrame\")\nmain:SetTitle(\"Derma_Anim Example\")\nmain:SetSize(250, 200)\nmain:SetPos(200)\nmain:MakePopup()\nlocal anim = Derma_Anim(\"EaseInQuad\", main, function(pnl, anim, delta, data)\n\tpnl:SetPos(inQuad(delta, 200, 600), 300) -- Change the X coordinate from 200 to 200+600\nend)\nanim:Start(2) -- Animate for two seconds\nmain.Think = function(self)\n\tif anim:Active() then\n\t\tanim:Run()\n\tend\nend","description":"Applies an [http://easings.net/#easeInQuad easeInQuad] easing to the panel to make it glide naturally across the screen."}],"isConstructor":false,"name":"Derma_Anim","realm":"client and menu","returns":[{"description":"A lua metatable containing four methods:\n* Run() - Should be called each frame you want the animation to be ran.\n* Active() - Returns if the animation is currently active (has not finished and stop has not been called)\n* Stop() - Halts the animation at its current progress.\n* Start( Length, Data ) - Prepares the animation to be ran for Length seconds. Must be called once before calling Run(). The data parameter will be passed to the func function.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to draw the background blur around","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"},{"default":"","description":"Time that the blur began being painted","isOptional":false,"isVarArg":false,"name":"startTime","type":"number"}],"description":"Draws background blur around the given panel.","examples":[{"code":"function PANEL:Init()\n    self.startTime = SysTime()\nend\n\nfunction PANEL:Paint()\n    Derma_DrawBackgroundBlur(self, self.startTime)\nend","description":"Blur being drawn around a panel"}],"isConstructor":false,"name":"Derma_DrawBackgroundBlur","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to add the hook to","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"},{"default":"","description":"Name of panel function to create","isOptional":false,"isVarArg":false,"name":"functionName","type":"string"},{"default":"","description":"Name of Derma skin hook to call within the function","isOptional":false,"isVarArg":false,"name":"hookName","type":"string"},{"default":"","description":"Type of element to call Derma skin hook for","isOptional":false,"isVarArg":false,"name":"typeName","type":"string"}],"description":"Creates panel method that calls the supplied Derma skin hook via {{LibraryFunction|derma|SkinHook}}","examples":[{"code":"Derma_Hook( PANEL, \"Paint\", \"Paint\", \"Panel\" )","description":"Creates PANEL.Paint function to call Derma skin hook 'Paint' with type 'Panel'"}],"isConstructor":false,"name":"Derma_Hook","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel the functions should be added to.","isOptional":false,"isVarArg":false,"name":"target","type":"Panel"}],"description":"Makes the panel (usually an input of sorts) respond to changes in console variables by adding next functions to the panel:\n* {{ClassFunction|Panel|SetConVar}}\n* {{ClassFunction|Panel|ConVarChanged}}\n* {{ClassFunction|Panel|ConVarStringThink}}\n* {{ClassFunction|Panel|ConVarNumberThink}}\n\nThe console variable value is saved in the ''m_strConVar'' property of the panel.\n\nThe panel should call\n{{ClassFunction|Panel|ConVarStringThink}} or \n{{ClassFunction|Panel|ConVarNumberThink}} \nin its {{HookFunction|PANEL|Think}} hook and should call {{ClassFunction|Panel|ConVarChanged}} when the panel's value has changed.","examples":[{"code":"local PANEL = {}\n\nDerma_Install_Convar_Functions( PANEL )\n\nfunction PANEL:Init()\n\t-- Init function here\nend\nfunction PANEL:Think()\n\tself:ConVarStringThink()\nend","description":"Adds the functions to a panel (snippet of vgui/dcheckbox.lua)"}],"isConstructor":false,"name":"Derma_Install_Convar_Functions","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text within the created panel.","isOptional":false,"isVarArg":false,"name":"Text","type":"string"},{"default":"","description":"The title of the created panel.","isOptional":false,"isVarArg":false,"name":"Title","type":"string"},{"default":"","description":"The text of the button to close the panel.","isOptional":false,"isVarArg":false,"name":"Button","type":"string"}],"description":"Creates a derma window to display information","examples":[{"code":"","description":""}],"isConstructor":false,"name":"Derma_Message","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"\"Message Text (Second Parameter)\"","description":"The message to display.","isOptional":true,"isVarArg":false,"name":"text","type":"string"},{"default":"\"Message Title (First Parameter)\"","description":"The title to give the message box.","isOptional":true,"isVarArg":false,"name":"title","type":"string"},{"default":"","description":"The text to display on the first button.","isOptional":true,"isVarArg":false,"name":"btn1text","type":"string"},{"default":"nil","description":"The function to run if the user clicks the first button.","isOptional":true,"isVarArg":false,"name":"btn1func","type":"Function"},{"default":"nil","description":"The text to display on the second button.","isOptional":true,"isVarArg":false,"name":"btn2text","type":"string"},{"default":"nil","description":"The function to run if the user clicks the second button.","isOptional":true,"isVarArg":false,"name":"btn2func","type":"Function"},{"default":"nil","description":"The text to display on the third button","isOptional":true,"isVarArg":false,"name":"btn3text","type":"string"},{"default":"nil","description":"The function to run if the user clicks the third button.","isOptional":true,"isVarArg":false,"name":"btn3func","type":"Function"},{"default":"nil","description":"The text to display on the third button","isOptional":true,"isVarArg":false,"name":"btn4text","type":"string"},{"default":"nil","description":"The function to run if the user clicks the fourth button.","isOptional":true,"isVarArg":false,"name":"btn4func","type":"Function"}],"description":"Shows a message box in the middle of the screen, with up to 4 buttons they can press.","examples":[],"isConstructor":false,"name":"Derma_Query","realm":"client and menu","returns":[{"description":"The Panel object of the created window.","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The title of the created panel.","isOptional":false,"isVarArg":false,"name":"title","type":"string"},{"default":"","description":"The text above the input box","isOptional":false,"isVarArg":false,"name":"subtitle","type":"string"},{"default":"","description":"The default text for the input box.","isOptional":false,"isVarArg":false,"name":"defaultVal","type":"string"},{"default":"","description":"The function to be called once the user has confirmed their input.","isOptional":false,"isVarArg":false,"name":"confirm","type":"Function"},{"default":"nil","description":"The function to be called once the user has cancelled their input","isOptional":true,"isVarArg":false,"name":"cancel","type":"Function"},{"default":"\"OK\"","description":"Allows you to override text of the \"OK\" button","isOptional":true,"isVarArg":false,"name":"confirmText","type":"string"},{"default":"\"Cancel\"","description":"Allows you to override text of the \"Cancel\" button","isOptional":true,"isVarArg":false,"name":"cancelText","type":"string"}],"description":"Creates a derma window asking players to input a string.","examples":[{"code":"Derma_StringRequest(\n\t\"Console Print\", \n\t\"Input the string to print to console\",\n\t\"\",\n\tfunction(text) print(text) end,\n\tfunction(text) print(\"Cancelled input\") end\n)","description":"Asks the user to input a string which is then printed to their console"}],"isConstructor":false,"name":"Derma_StringRequest","realm":"client and menu","returns":[{"description":"The created {{Type|DFrame}}","type":"DFrame"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to parent the created menu to.","isOptional":false,"isVarArg":false,"name":"parent","type":"Panel"}],"description":"Creates a {{Type|DMenu}} and closes any current menus.","examples":[{"code":"local menu = DermaMenu() \nmenu:AddOption(\"Die\", function() RunConsoleCommand(\"kill\") end)\nmenu:AddOption(\"Close\", function() print(\"Close pressed\") end) -- The menu will remove itself, we don't have to do anything.\nmenu:Open()","description":"Creates a DMenu with buttons to commit suicide or close it."}],"isConstructor":false,"name":"DermaMenu","realm":"client and menu","returns":[{"description":"The created {{Type|DMenu}}","type":"DMenu"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether or not clipping should be disabled","isOptional":false,"isVarArg":false,"name":"disable","type":"boolean"}],"description":"Sets whether rendering should be limited to being inside a panel or not.\n\nSee also {{LibraryFunction|surface|DisableClipping}} and {{ClassFunction|Panel|NoClipping}}.","examples":[{"code":"function PANEL:Paint()\n    DisableClipping(true)\n    draw.RoundedBox(0, -50, -50, 25, 25, color_white)\n    DisableClipping(false)\nend","description":"Renders a white box outside of the panel"}],"isConstructor":false,"name":"DisableClipping","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Cancels current DOF post-process effect started with {{GlobalFunction|DOF_Start}}","examples":[],"isConstructor":false,"name":"DOF_Kill","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Cancels any existing DOF post-process effects.\nBegins the DOF post-process effect.","examples":[],"isConstructor":false,"name":"DOF_Start","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Enables or disables depth-of-field mode","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"A hacky method used to fix some bugs regarding DoF.\n\n{{Internal}}\n{{Stub}}","examples":[],"isConstructor":false,"name":"DOFModeHack","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}} Draws the currently active main menu background image and handles transitioning between background images.\n\nThis is called by default in the menu panel's Paint hook.","examples":[],"isConstructor":false,"name":"DrawBackground","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Determines how much to darken the effect. A lower number will make the glow come from lower light levels. A value of 1 will make the bloom effect unnoticeable. Negative values will make even pitch black areas glow.","isOptional":false,"isVarArg":false,"name":"Darken","type":"number"},{"default":"","description":"Will affect how bright the glowing spots are. A value of 0 will make the bloom effect unnoticeable.","isOptional":false,"isVarArg":false,"name":"Multiply","type":"number"},{"default":"","description":"The size of the bloom effect along the horizontal axis.","isOptional":false,"isVarArg":false,"name":"SizeX","type":"number"},{"default":"","description":"The size of the bloom effect along the vertical axis.","isOptional":false,"isVarArg":false,"name":"SizeY","type":"number"},{"default":"","description":"Determines how much to exaggerate the effect.","isOptional":false,"isVarArg":false,"name":"Passes","type":"number"},{"default":"","description":"Will multiply the colors of the glowing spots, making them more vivid.","isOptional":false,"isVarArg":false,"name":"ColorMultiply","type":"number"},{"default":"","description":"How much red to multiply with the glowing color. Should be between 0 and 1","isOptional":false,"isVarArg":false,"name":"Red","type":"number"},{"default":"","description":"How much green to multiply with the glowing color. Should be between 0 and 1","isOptional":false,"isVarArg":false,"name":"Green","type":"number"},{"default":"","description":"How much blue to multiply with the glowing color. Should be between 0 and 1","isOptional":false,"isVarArg":false,"name":"Blue","type":"number"}],"description":"Draws the bloom shader, which creates a glowing effect from bright objects.","examples":[{"code":"function GM:RenderScreenspaceEffects()\n\tDrawBloom( 0.65, 2, 9, 9, 1, 1, 1, 1, 1 )\nend","description":"Draws bloom effect with default settings."}],"isConstructor":false,"name":"DrawBloom","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Color modification parameters. See {{ShaderLink|g_colourmodify}} and the example below. Note that if you leave out a field, it will retain its last value which may have changed if another caller uses this function.","isOptional":false,"isVarArg":false,"name":"modifyParameters","type":"table"}],"description":"Draws the Color Modify shader, which can be used to adjust colors on screen.","examples":[{"code":"local tab = {\n\t[ \"$pp_colour_addr\" ] = 0.02,\n\t[ \"$pp_colour_addg\" ] = 0.02,\n\t[ \"$pp_colour_addb\" ] = 0,\n\t[ \"$pp_colour_brightness\" ] = 0,\n\t[ \"$pp_colour_contrast\" ] = 1,\n\t[ \"$pp_colour_colour\" ] = 3,\n\t[ \"$pp_colour_mulr\" ] = 0,\n\t[ \"$pp_colour_mulg\" ] = 0.02,\n\t[ \"$pp_colour_mulb\" ] = 0\n}\n\nfunction GM:RenderScreenspaceEffects()\n\n\tDrawColorModify( tab )\n\nend","description":"Draws color modify with bright yellow and green colors."}],"isConstructor":false,"name":"DrawColorModify","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"This will be the material that is drawn onto the screen.","isOptional":false,"isVarArg":false,"name":"Material","type":"string"},{"default":"","description":"This will adjust how much the material will refract your screen.","isOptional":false,"isVarArg":false,"name":"RefractAmount","type":"number"}],"description":"Draws a material overlay on the screen.","examples":[{"code":"function GM:RenderScreenspaceEffects()\n\n\tDrawMaterialOverlay(\"models/props_c17/fisheyelens\", -0.06)\n\nend","description":"Creates a fisheye effect on your screen."}],"isConstructor":false,"name":"DrawMaterialOverlay","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"How much alpha to change per frame.","isOptional":false,"isVarArg":false,"name":"AddAlpha","type":"number"},{"default":"","description":"How much alpha the frames will have. A value of 0 will not render the motion blur effect.","isOptional":false,"isVarArg":false,"name":"DrawAlpha","type":"number"},{"default":"","description":"Determines the amount of time between frames to capture.","isOptional":false,"isVarArg":false,"name":"Delay","type":"number"}],"description":"Creates a motion blur effect by drawing your screen multiple times.","examples":[{"code":"function GM:RenderScreenspaceEffects()\n\n DrawMotionBlur(0.4, 0.8, 0.01)\n\nend","description":"Creates a motion blur effect."}],"isConstructor":false,"name":"DrawMotionBlur","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"How much contrast to create.","isOptional":false,"isVarArg":false,"name":"Contrast","type":"number"},{"default":"","description":"How large the contrast effect will be.","isOptional":false,"isVarArg":false,"name":"Distance","type":"number"}],"description":"Draws the sharpen shader, which creates more contrast.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"DrawSharpen","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Determines the threshold of edges. A value of 0 will make your screen completely black.","isOptional":false,"isVarArg":false,"name":"Threshold","type":"number"}],"description":"Draws the sobel shader, which detects edges and draws a black border.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"DrawSobel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"$darken property for sunbeams material","isOptional":false,"isVarArg":false,"name":"darken","type":"number"},{"default":"","description":"$multiply property for sunbeams material","isOptional":false,"isVarArg":false,"name":"multiplier","type":"number"},{"default":"","description":"$sunsize property for sunbeams material","isOptional":false,"isVarArg":false,"name":"sunSize","type":"number"},{"default":"","description":"$sunx property for sunbeams material","isOptional":false,"isVarArg":false,"name":"sunX","type":"number"},{"default":"","description":"$suny property for sunbeams material","isOptional":false,"isVarArg":false,"name":"sunY","type":"number"}],"description":"Renders the post-processing effect of beams of light originating from the map's sun. Utilises the \"pp/sunbeams\" material","examples":[],"isConstructor":false,"name":"DrawSunbeams","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Scale of the texture. A smaller number creates a larger texture.","isOptional":false,"isVarArg":false,"name":"Scale","type":"number"},{"default":"","description":"This will be the texture to use in the effect. Make sure you use {{GlobalFunction|Material}} to get the texture number","isOptional":false,"isVarArg":false,"name":"BaseTexture","type":"number"}],"description":"Draws the texturize shader, which replaces each pixel on your screen with a different part of the texture depending on its brightness. See [[Shaders/g_texturize|g_texturize]] for information on making the texture.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"DrawTexturize","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"An integer determining how many times to draw the effect. A higher number creates more blur.","isOptional":false,"isVarArg":false,"name":"Passes","type":"number"},{"default":"","description":"The amount of screen which should be blurred on the top and bottom.","isOptional":false,"isVarArg":false,"name":"Height","type":"number"}],"description":"Draws the toy town shader, which blurs the top and bottom of your screen. This can make very large objects look like toys, hence the name.","examples":[{"code":"function GM:RenderScreenspaceEffects()\n\n DrawToyTown(2, ScrH()/2)\n\nend","description":"Draws toy town effect."}],"isConstructor":false,"name":"DrawToyTown","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to drop.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Drops the specified entity if it is being held by any player with Gravity Gun or +use pickup.","examples":[],"isConstructor":false,"name":"DropEntityIfHeld","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"An unsigned Integer. Usually an [[Entity/EntIndex|entity index]] is used here.","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"Creates or replaces a dynamic light with the given id.\n\n{{Note|Only 32 lights can be active at once.}}","examples":[{"code":"hook.Add( \"Think\", \"Think_Lights!\", function()\n\tlocal dlight = DynamicLight( LocalPlayer():EntIndex() )\n\tif ( dlight ) then\n\t\tdlight.pos = LocalPlayer():GetShootPos()\n\t\tdlight.r = 255\n\t\tdlight.g = 255\n\t\tdlight.b = 255\n\t\tdlight.brightness = 2\n\t\tdlight.Decay = 1000\n\t\tdlight.Size = 256\n\t\tdlight.DieTime = CurTime() + 1\n\tend\nend )","description":"Emits a bright white light from local players eyes."}],"isConstructor":false,"name":"DynamicLight","realm":"client","returns":[{"description":"A DynamicLight structured table. See {{Struct|DynamicLight}}","type":"DynamicLight"}]},{"accessModifier":"public","arguments":[],"description":"Returns a {{Type|CEffectData}} object to be used with {{LibraryFunction|util|Effect}}.\n\n{{Bug|Issue=2771|This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once.}}","examples":[],"isConstructor":false,"name":"EffectData","realm":"shared","returns":[{"description":"The {{Type|CEffectData}} object.","type":"CEffectData"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The condition to check if true or false.","isOptional":false,"isVarArg":false,"name":"condition","type":"any"},{"default":"","description":"If the condition isn't nil/false, returns this value.","isOptional":false,"isVarArg":false,"name":"truevar","type":"any"},{"default":"","description":"If the condition is nil/false, returns this value.","isOptional":false,"isVarArg":false,"name":"falsevar","type":"any"}],"description":"An 'if then else'. This is ''almost'' equivalent to (''condition'' and ''truevar'' or ''falsevar'') in Lua. The difference is that if ''truevar'' evaluates to false, the plain Lua method stated would return ''falsevar'' regardless of ''condition'' whilst this function would take ''condition'' into account.","examples":[{"code":"local ply = Entity( 1 )\nprint( \"Player \" .. Either( ply:IsAdmin(), \"is\", \"is not\" ) .. \" an admin\" )\n\nprint( \"Player \" .. ( ply:IsAdmin() and \"is\" or \"is not\" ) .. \" an admin\" )","description":"The following two ''print'' statements have identical results."},{"code":"print(\"You are: \"..( LocalPlayer():Alive() and \"alive\" or \"dead\" ))\n\n// conditional:\n\nprint( \"Halflife? \"..( (LocalPlayer():Health()==50) and \"halflife\" or \"not halflife\") )","description":"Plain Lua alias version."}],"isConstructor":false,"name":"Either","realm":"shared and menu","returns":[{"description":"The result.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The sound to play","isOptional":false,"isVarArg":false,"name":"soundName","type":"string"},{"default":"","description":"The position to play at","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"The entity to emit the sound from. Must be {{ClassFunction|Entity|EntIndex}}","isOptional":false,"isVarArg":false,"name":"entity","type":"number"},{"default":"CHAN_AUTO","description":"The sound channel, see {{Enum|CHAN}}.","isOptional":true,"isVarArg":false,"name":"channel","type":"CHAN"},{"default":"1","description":"The volume of the sound, from 0 to 1","isOptional":true,"isVarArg":false,"name":"volume","type":"number"},{"default":"75","description":"The sound level of the sound, see {{Enum|SNDLVL}}","isOptional":true,"isVarArg":false,"name":"soundLevel","type":"SNDLVL"},{"default":"0","description":"The flags of the sound, see {{Enum|SND}}","isOptional":true,"isVarArg":false,"name":"soundFlags","type":"SND"},{"default":"100","description":"The pitch of the sound, 0-255","isOptional":true,"isVarArg":false,"name":"pitch","type":"number"}],"description":"Plays a sentence from scripts/sentences.txt\n\n{{Bug|Seems to work only on serverside.|Fixed=}}","examples":[{"code":"EmitSentence( \"COMBINE_DIE\" .. math.random( 0, 3 ), Entity(1):GetPos(), 1, CHAN_AUTO, 1, 75, 0, 100 )","description":"Plays random combine death sound on first player."}],"isConstructor":false,"name":"EmitSentence","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The sound to play","isOptional":false,"isVarArg":false,"name":"soundName","type":"string"},{"default":"","description":"The position to play at","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"The entity to emit the sound from. Can be an {{ClassFunction|Entity|EntIndex}} or one of the following:\n* 0 - Plays sound on the world (Position set to 0,0,0)\n* -1 - Plays sound on the local player (on server acts as 0)\n* -2 - Plays UI sound (Position set to 0,0,0, no spatial sound,on server acts as 0)","isOptional":false,"isVarArg":false,"name":"entity","type":"number"},{"default":"CHAN_AUTO","description":"The sound channel, see {{Enum|CHAN}}.","isOptional":true,"isVarArg":false,"name":"channel","type":"CHAN"},{"default":"1","description":"The volume of the sound, from 0 to 1","isOptional":true,"isVarArg":false,"name":"volume","type":"number"},{"default":"75","description":"The sound level of the sound, see {{Enum|SNDLVL}}","isOptional":true,"isVarArg":false,"name":"soundLevel","type":"SNDLVL"},{"default":"0","description":"The flags of the sound, see {{Enum|SND}}","isOptional":true,"isVarArg":false,"name":"soundFlags","type":"SND"},{"default":"100","description":"The pitch of the sound, 0-255","isOptional":true,"isVarArg":false,"name":"pitch","type":"number"}],"description":"Emits the specified sound at the specified position.\n\n{{Bug|Sounds must be precached serverside manually before they can be played. util.PrecacheSound does not work for this purpose, Entity.EmitSound does the trick}}\n{{Bug|This does not work with soundscripts. TODO: Is this a bug or intended?}}","examples":[{"code":"EmitSound( Sound(\"garrysmod/save_load1.wav\"), Entity(1):GetPos(), 1, CHAN_AUTO, 1, 75, 0, 100 )","description":"Plays magical sound on first player."}],"isConstructor":false,"name":"EmitSound","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"This is the panel that has a tool tip.","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"}],"description":"Removes the currently active tool tip from the screen.","examples":[],"isConstructor":false,"name":"EndTooltip","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity index.","isOptional":false,"isVarArg":false,"name":"entityIndex","type":"number"}],"description":"Returns the entity with the matching {{ClassFunction|Entity|EntIndex}}.\n\nIndices 1 through {{LibraryFunction|game|MaxPlayers}}() are always reserved for players.\n\n{{Note|In examples on this wiki, '''Entity( 1 )''' is used when a player entity is needed (see [[Help:Editing|wiki editing guide]]). In singleplayer and listen servers, '''Entity( 1 )''' will always be the first player. In dedicated servers, however, '''Entity( 1 )''' won't always be a valid player.}}","examples":[],"isConstructor":false,"name":"Entity","realm":"shared","returns":[{"description":"The entity if it exists, or NULL if it doesn't.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The error message to throw.","isOptional":false,"isVarArg":false,"name":"message","type":"string"},{"default":"1","description":"The level to throw the error at.","isOptional":true,"isVarArg":false,"name":"errorLevel","type":"number"}],"description":"Throws a Lua error and breaks out of the current call stack.","examples":[{"code":"error(\"garry\")","description":""}],"isConstructor":false,"name":"error","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Converts all arguments to strings and prints them with no spacing.","isOptional":false,"isVarArg":true,"name":"arguments","type":"any"}],"description":"Throws a Lua error but does not break out of the current call stack.\n\n{{Bug|Issue=1810|Using this function in the menu state exits the menu.}}\n\n{{Bug|Issue=2247|This function has a character limit of 511.}}","examples":[{"code":"local num = 11\nif ( num <= 10 and num >= 0 ) then\n\tprint( \"The number is\", num )\nelse\n\tErrorNoHalt( \"Number out of range!\\n\" )\n\tprint(\"This line will be printed\")\nend","description":"An example of the use of this function"}],"isConstructor":false,"name":"ErrorNoHalt","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the angles of the current render context as calculated by {{HookFunction|GM|CalcView}}.\n\n{{Bug|Issue=2516|This function is only reliable inside rendering hooks.}}","examples":[{"code":"print(EyeAngles())","description":"Print the view angles"},{"code":"print(EyeAngles():Forward())","description":"Identical to {{GlobalFunction|EyeVector}}"}],"isConstructor":false,"name":"EyeAngles","realm":"client","returns":[{"description":"The angle of the currently rendered scene.","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Returns the origin of the current render context as calculated by {{HookFunction|GM|CalcView}}.\n\n{{Bug|Issue=2516|This function is only reliable inside rendering hooks.}}","examples":[{"code":"print(EyePos())","description":"Print the view position"},{"code":"hook.Add(\"PreDrawTranslucentRenderables\", \"FixEyePos\", function() EyePos() end)\nhook.Add( \"Think\", \"Use Eyepos outside of render function\", function()\n\tlocal start = EyePos()\n\tlocal dir = gui.ScreenToVector(gui.MousePos())\n\tlocal trace = util.TraceLine{\n\t\tstart = start,\n\t\tendpos = start + ( dir * 10000 ),\n\t\tfilter = { ply },\n\t}\n\tdebugoverlay.Box( trace.HitPos, Vector( -5, -5, -5 ), Vector( 5, 5, 5 ) )\nend )","description":"Ensuring EyePos returns the correct value outside of render hooks."}],"isConstructor":false,"name":"EyePos","realm":"client","returns":[{"description":"Camera position.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the normal vector of the current render context as calculated by {{HookFunction|GM|CalcView}}, similar to {{GlobalFunction|EyeAngles}}.\n\n{{Bug|Issue=2516|This function is only reliable inside rendering hooks.}}","examples":[{"code":"print( EyeVector() )","description":"Print the view angles"}],"isConstructor":false,"name":"EyeVector","realm":"client","returns":[{"description":"View direction of the currently rendered scene.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The object type to retrieve the meta table of.","isOptional":false,"isVarArg":false,"name":"metaName","type":"string"}],"description":"Returns the meta table for the class with the matching name.\n\nInternally returns {{LibraryFunction|debug|getregistry}}()[metaName]\n\nYou can learn more about meta tables on the [[Meta Tables]] page.\n\nYou can find a list of meta tables that can be retrieved with this function on {{Enum|TYPE}}. The name in the description is the string to use with this function.","examples":[{"code":"local meta = FindMetaTable(\"Player\")\n\nfunction meta:IsSick()\n\treturn true\nend\n\n-- Sometime later...\nlocal ply = Entity(1)\nif ( ply:IsSick() ) then\n\tply:ChatPrint( \"Get well soon, \" .. ply:Nick() .. \"!\" )\n\tply:ChatPrint( \"I just don't understand how you're always sick...\" )\nend","description":"Adds a very simple function for checking if a player is sick to the player metatable."}],"isConstructor":false,"name":"FindMetaTable","realm":"shared and menu","returns":[{"description":"The corresponding meta table.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to find tool-tip of","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"}],"description":"Returns the tool-tip text and tool-tip-panel (if any) of the given panel as well as itself","examples":[],"isConstructor":false,"name":"FindTooltip","realm":"client and menu","returns":[{"description":"tool-tip text","type":"string"},{"description":"tool-tip panel","type":"Panel"},{"description":"panel that the function was called with","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to be formatted.<br>\nFollows this format: http://www.cplusplus.com/reference/cstdio/printf/","isOptional":false,"isVarArg":false,"name":"format","type":"string"},{"default":"","description":"Values to be formatted into the string.","isOptional":false,"isVarArg":true,"name":"formatParameters","type":"any"}],"description":"Formats the specified values into the string given. Same as {{LibraryFunction|string|format}}.","examples":[],"isConstructor":false,"name":"Format","realm":"shared and menu","returns":[{"description":"The formatted string","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the number of frames rendered since the game was launched.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"FrameNumber","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the {{GlobalFunction|CurTime}}-based time in seconds it took to render the last frame.\n\nThis should be used for frame/tick based timing, such as movement prediction or animations.\n\nFor real-time-based frame time that isn't affected by host_timescale, use {{GlobalFunction|RealFrameTime}}. RealFrameTime is more suited for things like GUIs or HUDs.","examples":[{"code":"print(FrameTime())","description":"Print the frame time"},{"code":"print(\"Tick: \"..(1/FrameTime()))","description":"Get the servers/clients tickrate/fps"}],"isConstructor":false,"name":"FrameTime","realm":"shared and menu","returns":[{"description":"time (in seconds)","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Server's name.","isOptional":false,"isVarArg":false,"name":"servername","type":"string"},{"default":"","description":"Server's loading screen URL, or \"\" if the URL is not set.","isOptional":false,"isVarArg":false,"name":"serverurl","type":"string"},{"default":"","description":"Server's current map's name.","isOptional":false,"isVarArg":false,"name":"mapname","type":"string"},{"default":"","description":"Max player count of server.","isOptional":false,"isVarArg":false,"name":"maxplayers","type":"number"},{"default":"","description":"The local player's {{ClassFunction|Player|SteamID64}}.","isOptional":false,"isVarArg":false,"name":"steamid","type":"string"},{"default":"","description":"Server's current gamemode's folder name.","isOptional":false,"isVarArg":false,"name":"gamemode","type":"string"}],"description":"Callback function for when the client has joined a server. This function shows the server's loading URL by default.","examples":[{"code":"local OldGameDetails = GameDetails\nfunction GameDetails( servername, serverurl, mapname, maxplayers, steamid, gamemode )\n\tprint( 1, servername )\n\tprint( 2, serverurl )\n\tprint( 3, mapname )\n\tprint( 4, maxplayers )\n\tprint( 5, steamid )\n\tprint( 6, gamemode )\n\tOldGameDetails( servername, serverurl, mapname, maxplayers, steamid, gamemode )\nend","description":"Prints GameDetails of the server you join to console, and preserves default behavior."}],"isConstructor":false,"name":"GameDetails","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|This function was deprecated in Lua 5.1 and is removed in Lua 5.2. Use {{GlobalFunction|collectgarbage}}( \"count\" ) instead.}} Returns the current floored dynamic memory usage of Lua in kilobytes.","examples":[],"isConstructor":false,"name":"gcinfo","realm":"shared and menu","returns":[{"description":"The current floored dynamic memory usage of Lua, in kilobytes.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the ConVar to get","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Gets the ConVar with the specified name. This function caches the ConVar object internally.","examples":[],"isConstructor":false,"name":"GetConVar","realm":"shared and menu","returns":[{"description":"The ConVar object","type":"ConVar"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the ConVar to get","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"{{Internal}}Gets the ConVar with the specified name. This function doesn't cache the convar.","examples":[],"isConstructor":false,"name":"GetConVar_Internal","realm":"shared and menu","returns":[{"description":"The ConVar object","type":"ConVar"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the ConVar to get.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"{{Deprecated|Store the {{Type|ConVar}} object retrieved with {{GlobalFunction|GetConVar}} and call {{ClassFunction|ConVar|GetInt}} or {{ClassFunction|ConVar|GetFloat}} on it.}}Gets the numeric value ConVar with the specified name.","examples":[],"isConstructor":false,"name":"GetConVarNumber","realm":"shared and menu","returns":[{"description":"The ConVar's value.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the ConVar to get.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"{{Deprecated|Store the {{Type|ConVar}} object retrieved with {{GlobalFunction|GetConVar}} and call {{ClassFunction|ConVar|GetString}} on it.}}Gets the string value ConVar with the specified name.","examples":[],"isConstructor":false,"name":"GetConVarString","realm":"shared and menu","returns":[{"description":"The ConVar's value.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the default loading screen URL (asset://garrysmod/html/loading.html)","examples":[],"isConstructor":false,"name":"GetDefaultLoadingHTML","realm":"menu","returns":[{"description":"Default loading url (asset://garrysmod/html/loading.html)","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The file name of the demo.","isOptional":false,"isVarArg":false,"name":"filename","type":"string"}],"description":"Retrieves data about the demo with the specified filename. Similar to {{GlobalFunction|GetSaveFileDetails}}.","examples":[],"isConstructor":false,"name":"GetDemoFileDetails","realm":"menu","returns":[{"description":"Demo data.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table with the names of files needed from the server you are currently joining.","examples":[{"code":"PrintTable( GetDownloadables() )","description":"Returns a table with the file names."}],"isConstructor":false,"name":"GetDownloadables","realm":"menu","returns":[{"description":"table of file names","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"1","description":"The object to get the enviroment from. Can also be a number that specifies the function at that stack level: Level 1 is the function calling getfenv.","isOptional":true,"isVarArg":false,"name":"location","type":"Function"}],"description":"Returns the environment table of either the stack level or the function specified.","examples":[],"isConstructor":false,"name":"getfenv","realm":"shared and menu","returns":[{"description":"The environment.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique index to identify the global value with.","isOptional":false,"isVarArg":false,"name":"index","type":"string"},{"default":"Angle( 0, 0, 0 )","description":"The value to return if the global value is not set.","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"Angle"}],"description":"Returns an angle that is shared between the server and all clients.","examples":[],"isConstructor":false,"name":"GetGlobalAngle","realm":"shared","returns":[{"description":"The global value, or default if the global is not set.","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique index to identify the global value with.","isOptional":false,"isVarArg":false,"name":"index","type":"string"},{"default":"false","description":"The value to return if the global value is not set.","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"boolean"}],"description":"Returns a boolean that is shared between the server and all clients.","examples":[],"isConstructor":false,"name":"GetGlobalBool","realm":"shared","returns":[{"description":"The global value, or the default if the global value is not set.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique index to identify the global value with.","isOptional":false,"isVarArg":false,"name":"index","type":"string"},{"default":"NULL","description":"The value to return if the global value is not set.","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"Entity"}],"description":"Returns an entity that is shared between the server and all clients.","examples":[],"isConstructor":false,"name":"GetGlobalEntity","realm":"shared","returns":[{"description":"The global value, or the default if the global value is not set.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique index to identify the global value with.","isOptional":false,"isVarArg":false,"name":"index","type":"string"},{"default":"0","description":"The value to return if the global value is not set.","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"number"}],"description":"Returns a float that is shared between the server and all clients.","examples":[],"isConstructor":false,"name":"GetGlobalFloat","realm":"shared","returns":[{"description":"The global value, or the default if the global value is not set.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique index to identify the global value with.","isOptional":false,"isVarArg":false,"name":"index","type":"string"},{"default":"0","description":"The value to return if the global value is not set.","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"number"}],"description":"Returns an integer that is shared between the server and all clients.\n\n{{Bug|Issue=3374|This function will not round decimal values as it actually networks a float internally.}}","examples":[{"code":"print(GetGlobalInt(\"RoundNumber\", 0))","description":"Prints the current round number if set, otherwise 0."}],"isConstructor":false,"name":"GetGlobalInt","realm":"shared","returns":[{"description":"The global value, or the default if the global value is not set.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique index to identify the global value with.","isOptional":false,"isVarArg":false,"name":"index","type":"string"},{"default":"\"\"","description":"The value to return if the global value is not set.","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"string"}],"description":"Returns a string that is shared between the server and all clients.","examples":[{"code":"print( GetGlobalString(\"ServerName\", \"Garry's Mod 13\") )","description":"Prints the current server name if set, otherwise \"Garry's Mod 13\"."}],"isConstructor":false,"name":"GetGlobalString","realm":"shared","returns":[{"description":"The global value, or the default if the global value is not set.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique index to identify the global value with.","isOptional":false,"isVarArg":false,"name":"Index","type":"string"},{"default":"","description":"The value to return if the global value is not set.","isOptional":false,"isVarArg":false,"name":"Default","type":"Vector"}],"description":"Returns a vector that is shared between the server and all clients.","examples":[],"isConstructor":false,"name":"GetGlobalVector","realm":"shared","returns":[{"description":"The global value, or the default if the global value is not set.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the name of the current server.","examples":[],"isConstructor":false,"name":"GetHostName","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the panel that is used as a wrapper for the HUD.\n\nSee also {{LibraryFunction|vgui|GetWorldPanel}}","examples":[],"isConstructor":false,"name":"GetHUDPanel","realm":"client","returns":[{"description":"The HUD panel","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns the loading screen panel and creates it if it doesn't exist.","examples":[],"isConstructor":false,"name":"GetLoadPanel","realm":"menu","returns":[{"description":"The loading screen panel","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current status of the server join progress.","examples":[],"isConstructor":false,"name":"GetLoadStatus","realm":"menu","returns":[{"description":"The current status","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table with the names of all maps and categories that you have on your client.","examples":[],"isConstructor":false,"name":"GetMapList","realm":"menu","returns":[{"description":"table of map names and categories","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to return the metatable of.","isOptional":false,"isVarArg":false,"name":"object","type":"any"}],"description":"Returns the metatable of an object. This function obeys the metatable's __metatable field, and will return that field if the metatable has it set.\n\nUse {{LibraryFunction|debug|getmetatable}} if you want the true metatable of the object.","examples":[{"code":"print(getmetatable(Pupil).__index.GetName(Pupil))\n-- getmetatable(Pupil) will return Pupil_meta.\n-- Same as print(Pupil:GetName())\n-- This is what the Lua interpreter basically does. (When __index is a table.)\n\ngetmetatable(Pupil).SetName = function(self, newName)\n self.name = newName\nend\n-- We're adding a new method to Pupil's metatable\n\nprint(getmetatable(Pupil).GetName(Pupil))\n-- Still the same, because Pupil_meta.__index is Pupil_meta.","description":"Use a table's metatable and alter it."}],"isConstructor":false,"name":"getmetatable","realm":"shared and menu","returns":[{"description":"The metatable of the value. This is not always a table.","type":"any"}]},{"accessModifier":"public","arguments":[],"description":"Returns the menu overlay panel, a container for panels like the error panel created in {{HookFunction|GM|OnLuaError}}.","examples":[],"isConstructor":false,"name":"GetOverlayPanel","realm":"menu","returns":[{"description":"The overlay panel","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The internal name of the render target.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The width of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The height of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size.","isOptional":false,"isVarArg":false,"name":"height","type":"number"},{"default":"false","description":"Sets whenever the rt should be additive.","isOptional":true,"isVarArg":false,"name":"additive","type":"boolean"}],"description":"Creates or gets the rendertarget with the given name.\n\nSee {{GlobalFunction|GetRenderTargetEx}} for an advanced version of this function with more options.\n\n{{Bug|Issue=2885|This crashes when used on a cubemap texture.}}","examples":[],"isConstructor":false,"name":"GetRenderTarget","realm":"client","returns":[{"description":"The render target","type":"ITexture"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The internal name of the render target.\n\n{{Warning|The name is treated like a path and gets its extension discarded.<br>\"name.1\" and \"name.2\" are considered the same name and will result in the same render target being reused.}}","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The width of the render target, must be power of 2.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The height of the render target, must be power of 2.","isOptional":false,"isVarArg":false,"name":"height","type":"number"},{"default":"","description":"Bitflag that influences the sizing of the render target, see {{Enum|RT_SIZE}}.","isOptional":false,"isVarArg":false,"name":"sizeMode","type":"RT_SIZE"},{"default":"","description":"Bitflag that determines the depth buffer usage of the render target {{Enum|MATERIAL_RT_DEPTH}}.","isOptional":false,"isVarArg":false,"name":"depthMode","type":"MATERIAL_RT_DEPTH"},{"default":"","description":"Bitflag that configurates the texture, see {{Enum|TEXTUREFLAGS}}.\n\nList of flags can also be found on the Valve's Developer Wiki:\nhttps://developer.valvesoftware.com/wiki/Valve_Texture_Format","isOptional":false,"isVarArg":false,"name":"textureFlags","type":"TEXTUREFLAGS"},{"default":"","description":"Flags that controll the HDR behaviour of the render target, see {{Enum|CREATERENDERTARGETFLAGS}}.","isOptional":false,"isVarArg":false,"name":"rtFlags","type":"CREATERENDERTARGETFLAGS"},{"default":"","description":"Image format, see {{Enum|IMAGE_FORMAT}}.","isOptional":false,"isVarArg":false,"name":"imageFormat","type":"IMAGE_FORMAT"}],"description":"Creates (or gets if it already exsits) the rendertarget with the given name, this function allows to adjust the creation of a rendertarget more than {{GlobalFunction|GetRenderTarget}}.\n\nSee also {{LibraryFunction|render|PushRenderTarget}} and {{LibraryFunction|render|SetRenderTarget}}.","examples":[],"isConstructor":false,"name":"GetRenderTargetEx","realm":"client","returns":[{"description":"The new render target.","type":"ITexture"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The file name of the save.","isOptional":false,"isVarArg":false,"name":"filename","type":"string"}],"description":"Retrieves data about the save with the specified filename. Similar to {{GlobalFunction|GetDemoFileDetails}}.","examples":[],"isConstructor":false,"name":"GetSaveFileDetails","realm":"menu","returns":[{"description":"Save data.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity the client is using to see from (such as the player itself, the camera, or another entity).","examples":[],"isConstructor":false,"name":"GetViewEntity","realm":"client","returns":[{"description":"The view entity.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Hue in degrees.","isOptional":false,"isVarArg":false,"name":"hue","type":"number"},{"default":"","description":"Saturation from 0 - 1.","isOptional":false,"isVarArg":false,"name":"saturation","type":"number"},{"default":"","description":"Value from 0 - 1.","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Converts a color from HSV color space into RGB color space and returns a {{Struct|Color}}.\n\n{{Bug|Issue=2407|The returned color will not have the color metatable.}}","examples":[{"code":"local function DrawRainbowText( frequency, str, font, x, y )\n\t\n\tsurface.SetFont( font )\n\t\n\tfor i = 1, #str do\n\t\tsurface.SetTextColor( HSVToColor( i * frequency % 360, 1, 1 ) )\n\t\tlocal w = surface.GetTextSize( string.sub( str, 1, i - 1 ) )\n\t\tsurface.SetTextPos( x + w, y )\n\t\tsurface.DrawText( string.sub( str, i, i ) )\n\tend\n\t\nend","description":"A helper function for drawing rainbow text."},{"code":"local function ChatPrintRainbow( frequency, str )\n\t\n\tlocal text = {}\n\t\n\tfor i = 1, #str do\n\t\ttable.insert( text, HSVToColor( i * frequency % 360, 1, 1 ) )\n\t\ttable.insert( text, string.sub( str, i, i ) )\n\tend\n\n\tchat.AddText( unpack( text ) )\n\t\nend","description":"A helper function for printing rainbow text in the chat."},{"code":"local function ConsolePrintRainbow( frequency, str )\n\t\n\tlocal text = {}\n\t\n\tfor i = 1, #str do\n\t\ttable.insert( text, HSVToColor( i * frequency % 360, 1, 1 ) )\n\t\ttable.insert( text, string.sub( str, i, i ) )\n\tend\n\t\n\ttable.insert( text, \"\\n\" )\n\t\n\tMsgC( unpack( text ) )\n\t\nend","description":"A helper function for printing rainbow text in the console."}],"isConstructor":false,"name":"HSVToColor","realm":"shared and menu","returns":[{"description":"The {{Struct|Color}} created from the HSV color space.","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The request parameters. See {{Struct|HTTPRequest}}.","isOptional":false,"isVarArg":false,"name":"parameters","type":"HTTPRequest"}],"description":"Launches an asynchronous http request with the given parameters.\n\n{{Bug|Issue=2232|This cannot send or receive multiple headers at once.}}\n\n{{Bug|Issue=3190|This can crash on Linux.}}","examples":[],"isConstructor":false,"name":"HTTP","realm":"shared and menu","returns":[{"description":"true if we made a request, nil if we failed.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the script to be executed. The path must be either relative to the current file, or be an absolute path (relative to and excluding the lua/ folder).\n\n{{Note|Please make sure your file names are unique, the filesystem is shared across all addons, so a file named \"lua/config.lua\" in your addon may be overwritten by the same file in another addon.}}","isOptional":false,"isVarArg":false,"name":"fileName","type":"string"}],"description":"Executes a Lua script.\n\n{{Note|Addon files (.gma files) do not support relative parent folders (''..'' notation).}}\n\n{{Warning|The file you are attempting to include MUST NOT be empty or the include will fail. Files over a certain size may fail as well.}}\n\n{{Warning|If the file you are including is clientside or shared, it '''must''' be {{GlobalFunction|AddCSLuaFile}}'d or this function will error saying the file doesn't exist.}}\n\n{{Bug|Issue=1976|{{GlobalFunction|pcall}}ing this function will break autorefresh.}}","examples":[{"code":"-- Correct usage:\n-- Will look for \"lua/myLuaFolder/myLuaFile.lua\" in all addons and then the base game lua/ folder\ninclude( \"myLuaFolder/myLuaFile.lua\" )\n\n-- This is incorrect, and will NOT work\ninclude(               \"lua/myLuaFolder/myLuaFile.lua\" )\ninclude(         \"addons/lua/myLuaFolder/myLuaFile.lua\" )\ninclude( \"addons/MyAddon/lua/myLuaFolder/myLuaFile.lua\" )\ninclude(       \"MyAddon/lua/myLuaFolder/myLuaFile.lua\" )","description":"Demonstrates correct and incorrect usage."}],"isConstructor":false,"name":"include","realm":"shared and menu","returns":[{"description":"Anything that the executed Lua script returns.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The filename of the Lua file you want to include.","isOptional":false,"isVarArg":false,"name":"filename","type":"string"}],"description":"{{Deprecated|To send the target file to the client simply call AddCSLuaFile() in the target file itself.}}\n\nThis function works exactly the same as {{GlobalFunction|include}} both clientside and serverside.\n\nThe only difference is that on the serverside it also calls {{GlobalFunction|AddCSLuaFile}} on the filename, so that it gets sent to the client.","examples":[],"isConstructor":false,"name":"IncludeCS","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to iterate over.","isOptional":false,"isVarArg":false,"name":"tab","type":"table"}],"description":"Returns an iterator function for a for loop, to return ordered key-value pairs from a table.\n\nThis will only iterate though '''numerical''' keys, and these must also be '''sequential'''; starting at 1 with no gaps.\n\nFor unordered pairs, see {{GlobalFunction|pairs}}.<br/>\nFor pairs sorted by key in alphabetical order, see {{GlobalFunction|SortedPairs}}.","examples":[{"code":"local tbl = { two = 2, one = 1, \"alpha\", \"bravo\", [3] = \"charlie\", [5] = \"echo\", [6] = \"foxtrot\" }\n\nprint( \"pairs:\" )\nfor k, v in pairs( tbl ) do\n\tprint( k, v )\nend\nprint( \"\\nipairs:\" )\nfor k, v in ipairs( tbl ) do\n\tprint( k, v )\nend","description":"Demonstrates how this differs from {{GlobalFunction|pairs}}."},{"code":"local NUM = 32\nlocal Count = 0\nfor k, v in ipairs( ClientUndos ) do\n\tlocal Item = ComboBox:AddItem( tostring( v.Name ) )\n\tItem.DoClick = function() RunConsoleCommand( \"gmod_undonum\", tostring( v.Key ) ) end\n\n\tCount = Count + 1\n\tif ( Count > NUM ) then break end\nend","description":"From ''UpdateUI'' in [https://github.com/garrynewman/garrysmod/blob/master/garrysmod/lua/includes/modules/undo.lua#L43 undo.lua], this adds the first 32 undo entries to the ''Undo'' panel in the spawnmenu."}],"isConstructor":false,"name":"ipairs","realm":"shared and menu","returns":[{"description":"The iterator function.","type":"Function"},{"description":"The table being iterated over","type":"table"},{"description":"The origin index '''=0'''","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is an {{Type|Angle}}.","examples":[],"isConstructor":false,"name":"isangle","realm":"shared and menu","returns":[{"description":"True if the variable is an {{Type|Angle}}.","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is a {{Type|boolean}}.","examples":[],"isConstructor":false,"name":"isbool","realm":"shared and menu","returns":[{"description":"True if the variable is a {{Type|boolean}}.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The object to be tested","isOptional":false,"isVarArg":false,"name":"Object","type":"any"}],"description":"Returns whether the given object does or doesn't have a ''metatable'' of a color.\n\n'''Important:''' Engine functions (i.e. those not written in plain Lua) that return color objects do not currently set the color metatable and this function will return false if you use it on them.","examples":[],"isConstructor":false,"name":"IsColor","realm":"shared and menu","returns":[{"description":"Whether the given object is a color or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Class name of the entity to check","isOptional":false,"isVarArg":false,"name":"className","type":"string"}],"description":"Returns if the given NPC class name is an enemy.\n\nReturns true if the entity name is one of the following:\n* \"npc_combine_s\"\n* \"npc_cscanner\"\n* \"npc_manhack\"\n* \"npc_hunter\"\n* \"npc_antlion\"\n* \"npc_antlionguard\"\n* \"npc_antlion_worker\"\n* \"npc_fastzombie_torso\"\n* \"npc_fastzombie\"\n* \"npc_headcrab\"\n* \"npc_headcrab_fast\"\n* \"npc_poisonzombie\"\n* \"npc_headcrab_poison\"\n* \"npc_zombie\"\n* \"npc_zombie_torso\"\n* \"npc_zombine\"\n* \"npc_gman\"\n* \"npc_breen\"","examples":[],"isConstructor":false,"name":"IsEnemyEntityName","realm":"shared and menu","returns":[{"description":"Is an enemy","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to check.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is an {{Type|Entity}}. Alias of {{GlobalFunction|isentity}}.","examples":[],"isConstructor":false,"name":"IsEntity","realm":"shared","returns":[{"description":"True if the variable is an {{Type|Entity}}.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is an {{Type|Entity}}.","examples":[],"isConstructor":false,"name":"isentity","realm":"shared and menu","returns":[{"description":"True if the variable is an {{Type|Entity}}.","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns if this is the first time this hook was predicted.\n\nThis is useful for one-time logic in your SWEPs PrimaryAttack, SecondaryAttack and Reload and other [[:Category:Predicted_Hooks|predicted hooks]] (to prevent those hooks from being called rapidly in succession). It's also useful in a Move hook for when the client predicts movement.\n\nVisit [[Prediction]] for more information about this behavior.\n\n{{Note|This is already used internally for {{ClassFunction|Entity|EmitSound}}, {{ClassFunction|Weapon|SendWeaponAnim}} and {{ClassFunction|Entity|FireBullets}}, but NOT in  {{LibraryFunction|util|Effect}}.}}","examples":[{"code":"-- Note that for some reason KeyPress and KeyRelease are called multiple times\n-- for the same key event in multiplayer.\nfunction GM:KeyPress(ply, key)\n   if not IsFirstTimePredicted() then return end\n   if not IsValid(ply) or ply != LocalPlayer() then return end\n\n   if key == IN_SPEED and ply:IsActiveTraitor() then\n      timer.Simple(0.05, function() RunConsoleCommand(\"+voicerecord\") end)\n   end\nend","description":"An override for {{HookFunction|GM|KeyPress}} in the gamemode Trouble in Terrorist Town, to work around the hook being called multiple times."}],"isConstructor":false,"name":"IsFirstTimePredicted","realm":"shared","returns":[{"description":"Whether or not this is the first time being predicted.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Class name of the entity to check","isOptional":false,"isVarArg":false,"name":"className","type":"string"}],"description":"Returns if the given NPC class name is a friend.\n\nReturns true if the entity name is one of the following:\n* \"npc_monk\"\n* \"npc_alyx\"\n* \"npc_barney\"\n* \"npc_citizen\"\n* \"npc_kleiner\"\n* \"npc_magnusson\"\n* \"npc_eli\"\n* \"npc_mossman\"\n* \"npc_vortigaunt\"","examples":[],"isConstructor":false,"name":"IsFriendEntityName","realm":"shared and menu","returns":[{"description":"Is a friend","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is a {{Type|function}}.","examples":[],"isConstructor":false,"name":"isfunction","realm":"shared and menu","returns":[{"description":"True if the variable is a {{Type|function}}.","type":"Function"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the client is currently playing either a singleplayer or multiplayer game.","examples":[],"isConstructor":false,"name":"IsInGame","realm":"menu","returns":[{"description":"True if we are in a game.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns whether the passed object is a {{Type|VMatrix}}.","examples":[],"isConstructor":false,"name":"ismatrix","realm":"shared and menu","returns":[{"description":"True if the variable is a {{Type|VMatrix}}.","type":"VMatrix"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The game string/app ID to check.","isOptional":false,"isVarArg":false,"name":"game","type":"string"}],"description":"Checks whether or not a game is currently mounted. Uses data given by {{LibraryFunction|engine|GetGames}}. Currently does not work correctly serverside on dedicated servers.","examples":[{"code":"IsMounted('cstrike')","description":"Check if Counter-Strike: Source is mounted."}],"isConstructor":false,"name":"IsMounted","realm":"shared and menu","returns":[{"description":"True if the game is mounted.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is a {{Type|number}}.","examples":[],"isConstructor":false,"name":"isnumber","realm":"shared and menu","returns":[{"description":"True if the variable is a {{Type|number}}.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is a {{Type|Panel}}.","examples":[],"isConstructor":false,"name":"ispanel","realm":"shared and menu","returns":[{"description":"True if the variable is a {{Type|Panel}}.","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is a {{Type|string}}.","examples":[],"isConstructor":false,"name":"isstring","realm":"shared and menu","returns":[{"description":"True if the variable is a {{Type|string}}.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is a {{Type|table}}.","examples":[],"isConstructor":false,"name":"istable","realm":"shared and menu","returns":[{"description":"True if the variable is a {{Type|table}}.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table containing entities to check","isOptional":false,"isVarArg":false,"name":"table","type":"table"}],"description":"Returns whether or not every element within a table is a valid entity","examples":[],"isConstructor":false,"name":"IsTableOfEntitiesValid","realm":"shared and menu","returns":[{"description":"All entities valid","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The model name to be checked","isOptional":false,"isVarArg":false,"name":"modelName","type":"string"}],"description":"Returns whether or not a model is useless by checking that the file path is that of a proper model.\n\nIf the string \".mdl\" is not found in the model name, the function will return true.\n\nThe function will also return true if any of the following strings are found in the given model name:\n* \"_gesture\"\n* \"_anim\"\n* \"_gst\"\n* \"_pst\"\n* \"_shd\"\n* \"_ss\"\n* \"_posture\"\n* \"_anm\"\n* \"ghostanim\"\n* \"_paths\"\n* \"_shared\"\n* \"anim_\"\n* \"gestures_\"\n* \"shared_ragdoll_\"","examples":[],"isConstructor":false,"name":"IsUselessModel","realm":"shared and menu","returns":[{"description":"Whether or not the model is useless","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table or object to be validated.","isOptional":false,"isVarArg":false,"name":"toBeValidated","type":"any"}],"description":"Returns whether an object is valid or not. (Such as {{Type|Entity}}s, {{Type|Panel}}s, custom {{Type|table}} objects and more)<br />Checks that an object is not nil, has an IsValid method and if this method returns true.\n\n{{Note|Due to vehicles being technically valid the moment they're spawned, also use {{ClassFunction|Vehicle|IsValidVehicle}} to make sure they're fully initialized}}","examples":[],"isConstructor":false,"name":"IsValid","realm":"shared and menu","returns":[{"description":"True if the object is valid.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to perform the type check for.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns if the passed object is a {{Type|Vector}}.","examples":[],"isConstructor":false,"name":"isvector","realm":"shared and menu","returns":[{"description":"True if the variable is a {{Type|Vector}}.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The IP of the server to join","isOptional":false,"isVarArg":false,"name":"IP","type":"string"}],"description":"Joins the server with the specified IP.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"JoinServer","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to add javascript function 'language.Update' to.","isOptional":false,"isVarArg":false,"name":"htmlPanel","type":"Panel"}],"description":"Adds javascript function 'language.Update' to an HTML panel as a method to call Lua's {{LibraryFunction|language|GetPhrase}} function.","examples":[],"isConstructor":false,"name":"JS_Language","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to add javascript function 'util.MotionSensorAvailable' to.","isOptional":false,"isVarArg":false,"name":"htmlPanel","type":"Panel"}],"description":"Adds javascript function 'util.MotionSensorAvailable' to an HTML panel as a method to call Lua's {{LibraryFunction|motionsensor|IsAvailable}} function.","examples":[],"isConstructor":false,"name":"JS_Utility","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to add javascript functions to.","isOptional":false,"isVarArg":false,"name":"htmlPanel","type":"Panel"}],"description":"Adds workshop related javascript functions to an HTML panel, used by the \"Dupes\" and \"Saves\" tabs in the spawnmenu.","examples":[],"isConstructor":false,"name":"JS_Workshop","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to set the label's text to","isOptional":false,"isVarArg":false,"name":"text","type":"string"},{"default":"nil","description":"Optional. The panel to parent the DLabel to","isOptional":true,"isVarArg":false,"name":"parent","type":"Panel"}],"description":"Convenience function that creates a DLabel, sets the text, and returns it","examples":[{"code":"local lbl = Label( \"The quick brown fox\" )","description":"Create a label"},{"code":"local pnl = vgui.Create(\"DPanel\")\nlocal lbl = Label( \"The quick brown fox\", pnl )","description":"Create a label and parents it to a DPanel"}],"isConstructor":false,"name":"Label","realm":"client and menu","returns":[{"description":"The created DLabel","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The new language code.","isOptional":false,"isVarArg":false,"name":"lang","type":"string"}],"description":"Callback function for when the client's language changes. Called by the engine.","examples":[{"code":"local OldLanguageChanged = LanguageChanged\nfunction LanguageChanged( lang )\n\tprint( \"New language: \" .. lang )\n\tOldLanguageChanged( lang )\nend","description":"Prints the new language code whenever the language changes."}],"isConstructor":false,"name":"LanguageChanged","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The fraction for finding the result. This number is clamped between 0 and 1.","isOptional":false,"isVarArg":false,"name":"t","type":"number"},{"default":"","description":"The starting number. The result will be equal to this if delta is 0.","isOptional":false,"isVarArg":false,"name":"from","type":"number"},{"default":"","description":"The ending number. The result will be equal to this if delta is 1.","isOptional":false,"isVarArg":false,"name":"to","type":"number"}],"description":"Performs a linear interpolation from the start number to the end number.\n\nThis function provides a very efficient and easy way to smooth out movements.","examples":[],"isConstructor":false,"name":"Lerp","realm":"shared and menu","returns":[{"description":"The result of the linear interpolation, (1 - t) * from + t * to.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Ratio of progress through values","isOptional":false,"isVarArg":false,"name":"ratio","type":"number"},{"default":"","description":"Angle to begin from","isOptional":false,"isVarArg":false,"name":"angleStart","type":"Angle"},{"default":"","description":"Angle to end at","isOptional":false,"isVarArg":false,"name":"angleEnd","type":"Angle"}],"description":"Returns point between first and second angle using given fraction and linear interpolation","examples":[{"code":"local startAngle = Angle(0, 0, 0)\nlocal endAngle = Angle(0, 180, 0)\nlocal ratio = 0\n\ntimer.Create(\"Turn\", 0.1, 10, function()\n    ratio = ratio + 0.1\n    entity:SetAngles(Lerp(ratio, startAngle, endAngle))\nend)","description":"Turns an entity 180 degrees uses lerp over ten seconds"}],"isConstructor":false,"name":"LerpAngle","realm":"shared and menu","returns":[{"description":"angle","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Fraction ranging from 0 to 1","isOptional":false,"isVarArg":false,"name":"fraction","type":"number"},{"default":"","description":"The initial Vector","isOptional":false,"isVarArg":false,"name":"from","type":"Vector"},{"default":"","description":"The desired Vector","isOptional":false,"isVarArg":false,"name":"to","type":"Vector"}],"description":"Linear interpolation between two vectors. It is commonly used to smooth movement between two vectors.","examples":[{"code":"local output = LerpVector( 0.5, Vector( 0, 0, 100 ), Vector( 0, 0, 200 ) )","description":"Get the middle point (50%) between two vectors."}],"isConstructor":false,"name":"LerpVector","realm":"shared and menu","returns":[{"description":"The lerped vector.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}This function is used to get the last map and category to which the map belongs from the cookie saved with {{GlobalFunction|SaveLastMap}}.","examples":[],"isConstructor":false,"name":"LoadLastMap","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Loads all preset settings for the {{Lib|presets}} and returns them in a table","examples":[{"code":"PrintTable(LoadPresets())","description":"Prints all of the presets in to the console"}],"isConstructor":false,"name":"LoadPresets","realm":"client","returns":[{"description":"Preset data","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The token to find a translation for.","isOptional":false,"isVarArg":false,"name":"localisationToken","type":"string"},{"default":"","description":"The default value to be returned if no translation was found.","isOptional":false,"isVarArg":false,"name":"defaultVal","type":"string"}],"description":"Returns a localisation for the given token, if none is found it will return the default(second) parameter.","examples":[],"isConstructor":false,"name":"Localize","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the player object of the current client.\n\nLocalPlayer() will return NULL until all entities have been initialized. See {{HookFunction|GM|InitPostEntity}}.","examples":[{"code":"print( LocalPlayer() )","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"LocalPlayer","realm":"client","returns":[{"description":"The player object representing the client.","type":"Player"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The position vector in the source coordinate system, that should be translated to world coordinates","isOptional":false,"isVarArg":false,"name":"localPos","type":"Vector"},{"default":"","description":"The angle in the source coordinate system, that should be converted to a world angle. If you don't need to convert an angle, you can supply an arbitrary valid angle (e.g. <kbd>{{GlobalFunction|Angle}}()</kbd>).","isOptional":false,"isVarArg":false,"name":"localAng","type":"Angle"},{"default":"","description":"The origin point of the source coordinate system, in world coordinates","isOptional":false,"isVarArg":false,"name":"originPos","type":"Vector"},{"default":"","description":"The angles of the source coordinate system, as a world angle","isOptional":false,"isVarArg":false,"name":"originAngle","type":"Angle"}],"description":"Translates the specified position and angle from the specified local coordinate system into worldspace coordinates.\n\nIf you're working with an entity's local vectors, use {{ClassFunction|Entity|LocalToWorld}} and/or {{ClassFunction|Entity|LocalToWorldAngles}} instead.\n\nSee also: {{GlobalFunction|WorldToLocal}}, the reverse of this function.","examples":[],"isConstructor":false,"name":"LocalToWorld","realm":"shared","returns":[{"description":"The world position of the supplied local position.","type":"Vector"},{"description":"The world angles of the supplied local angle.","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The material name or path. The path is relative to the '''materials/''' folder. You do not need to add '''materials/''' to your path.\n\nTo retrieve a Lua material created with {{GlobalFunction|CreateMaterial}}, just prepend a \"!\" to the material name.","isOptional":false,"isVarArg":false,"name":"materialName","type":"string"},{"default":"nil","description":"A string containing space separated keywords which will be used to add material parameters.\n\nSee [[Material Parameters]] for more information.\n\n{{Note|This feature only works when importing .png or .jpeg image files}}","isOptional":true,"isVarArg":false,"name":"pngParameters","type":"string"}],"description":"Either returns the material with the given name, or loads the material interpreting the first argument as the path.\n\n{{Note|When using .png or .jpg textures, make sure that their sizes are Power Of 2 (1, 2, 4, 8, 16, 32, 64, etc). If they are not, they will be automatically stretched to the nearest PO2 size and cause graphical artifacts.}}","examples":[{"code":"local wave = Material( \"vgui/wave.png\", \"noclamp smooth\" )","description":"Creates a PNG material with noclamp and smooth parameters set.\n\nIn this example the .png file is located in '''materials/vgui/wave.png'''"},{"code":"local mat_color = Material( \"pp/colour\" )  -- used outside of the hook for performance\n\nhook.Add(\"RenderScreenspaceEffects\", \"ColorExample\", function()\n\trender.UpdateScreenEffectTexture()\n\n\tmat_color:SetTexture( \"$fbtexture\", render.GetScreenEffectTexture() )\n\n\tmat_color:SetFloat( \"$pp_colour_addr\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_addg\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_addb\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_mulr\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_mulg\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_mulb\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_brightness\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_contrast\", 0.5 )\n\tmat_color:SetFloat( \"$pp_colour_colour\", 5 )\n\n\trender.SetMaterial( mat_color )\n\trender.DrawScreenQuad()\nend )","description":"Acquires and uses one of the [[Post-Processing Materials]] to make the screen darker and more saturated"}],"isConstructor":false,"name":"Material","realm":"shared and menu","returns":[{"description":"Generated material","type":"IMaterial"},{"description":"How long it took for the function to run","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"{{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}","description":"Initial data to initialize the matrix with. Leave empty to initialize an identity matrix. See examples for usage.","isOptional":true,"isVarArg":false,"name":"data","type":"table"}],"description":"Returns a {{Type|VMatrix}} object.","examples":[{"code":"local M = Matrix()\nM:Translate( Vector( 4, 5, 6 ) )\nM:Scale( Vector( 1, 2, 3 ) )\n\n-- This matrix is equivalent:\nlocal M2 = Matrix( {\n\t{ 1, 0, 0, 4 },\n\t{ 0, 2, 0, 5 },\n\t{ 0, 0, 3, 6 },\n\t{ 0, 0, 0, 1 }\n} )","description":"Initializes a matrix, translates it by Vector( 4, 5, 6 ) and then scales it by Vector( 1, 2, 3 )."}],"isConstructor":false,"name":"Matrix","realm":"shared","returns":[{"description":"New matrix.","type":"VMatrix"}]},{"accessModifier":"public","arguments":[{"default":"nil","description":"The material the mesh is intended to be rendered with. It's merely a hint that tells that mesh what vertex format it should use.","isOptional":true,"isVarArg":false,"name":"mat","type":"IMaterial"}],"description":"Returns a new mesh object.","examples":[{"code":"local mat = Material( \"editor/wireframe\" ) -- The material (a wireframe)\nlocal obj = Mesh() -- Create the IMesh object\n\nlocal verts = { -- A table of 3 vertices that form a triangle\n\t{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, -- Vertex 1\n\t{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, -- Vertex 2\n\t{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, -- Vertex 3\n}\n\nobj:BuildFromTriangles( verts ) -- Load the vertices into the IMesh object\n\nhook.Add( \"PostDrawOpaqueRenderables\", \"IMeshTest\", function()\n\n\trender.SetMaterial( mat ) -- Apply the material\n\tobj:Draw() -- Draw the mesh\nend )","description":"Draws a triangle near Vector( 0, 0, 0 ) in the map."}],"isConstructor":false,"name":"Mesh","realm":"client","returns":[{"description":"The created object.","type":"IMesh"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The model to precache","isOptional":false,"isVarArg":false,"name":"model","type":"string"}],"description":"Runs {{LibraryFunction|util|PrecacheModel}} and returns the string","examples":[{"code":"local CAMERA_MODEL = Model( \"models/dav0r/camera.mdl\" )\nfunction ENT:Initialize()\n self:SetModel( CAMERA_MODEL )\n ...","description":"From entities/gmod_cameraprop.lua"}],"isConstructor":false,"name":"Model","realm":"shared and menu","returns":[{"description":"The same string entered as an argument","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the module. This will be used to access the module table in the runtime environment.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Calls each function passed with the new table as an argument.","isOptional":false,"isVarArg":true,"name":"loaders","type":"any"}],"description":"Creates a table with the specified module name and sets the function environment for said table.\n\nAny passed loaders are called with the table as an argument. An example of this is {{LibraryFunction|package|seeall}}.","examples":[],"isConstructor":false,"name":"module","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"List of values to print.","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Writes every given argument to the console.\n\nAutomatically attempts to convert each argument to a string. (See {{GlobalFunction|tostring}})\n\nUnlike {{GlobalFunction|print}}, arguments are not separated by anything. They are simply concatenated.\n\nAdditionally, a newline isn't added automatically to the end, so subsequent Msg or print operations will continue the same line of text in the console. See {{GlobalFunction|MsgN}} for a version that does add a newline.\n\nThe text is blue on the server, orange on the client, and green on the menu: [[File:msg server client colors.png]]","examples":[{"code":"Msg(\"Hello\", \" World!\")","description":"Prints \"Hello World!\" to the console."}],"isConstructor":false,"name":"Msg","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"List of values to print.","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Works exactly like {{GlobalFunction|Msg}} except that, if called on the server, will print to all players consoles plus the server console.","examples":[],"isConstructor":false,"name":"MsgAll","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Values to print. If you put in a color, all text after that color will be printed in that color.","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Just like {{GlobalFunction|Msg}}, except it can also print colored text, just like {{LibraryFunction|chat|AddText}}.","examples":[{"code":"MsgC( Color( 255, 0, 0 ), \"Hello World!\" )","description":"Prints \"Hello World!\" in red to the console."},{"code":"MsgC( Color( 137, 222, 255 ), \"Default server color\" )\nMsgC( Color( 255, 222, 102 ), \"Default client color\" )","description":"Shows the built in colors for server and client"}],"isConstructor":false,"name":"MsgC","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"List of values to print. They can be of any type and will be converted to strings with {{GlobalFunction|tostring}}.","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Same as {{GlobalFunction|print}}, except it concatinates the arguments without inserting any whitespace in between them.\n\nSee also {{GlobalFunction|Msg}}, which doesn't add a newline (''\"\\n\"'') at the end.","examples":[{"code":"MsgN(\"Hello,\")\nMsgN(\"World!\")","description":"Prints \"Hello, World!\" in two lines to the console."}],"isConstructor":false,"name":"MsgN","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of color","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Returns named color defined in resource/ClientScheme.res.","examples":[],"isConstructor":false,"name":"NamedColor","realm":"client","returns":[{"description":"A {{Struct|Color}} or nil","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"false","description":"If true, the userdata will get its own metatable automatically.","isOptional":true,"isVarArg":false,"name":"addMetatable","type":"boolean"}],"description":"Returns a new userdata object.","examples":[],"isConstructor":false,"name":"newproxy","realm":"shared and menu","returns":[{"description":"The newly created userdata.","type":"userdata"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table","isOptional":false,"isVarArg":false,"name":"tab","type":"table"},{"default":"nil","description":"The previous key in the table.","isOptional":true,"isVarArg":false,"name":"prevKey","type":"any"}],"description":"Returns the next key and value pair in a table.\n\n{{Note|Table keys in Lua have no specific order, and will be returned in whatever order they exist in memory. This may not always be in ascending order or alphabetical order. If you need to iterate over an array in order, use {{GlobalFunction|ipairs}}.}}","examples":[{"code":"local function IsEmptyTable( t )\n\treturn next( t ) == nil\nend\n\nlocal mytable = {}\nprint( \"mytable is empty:\", IsEmptyTable( mytable ) )\nmytable[\"hello\"]=true\nprint( \"mytable is empty:\", IsEmptyTable( mytable ) )","description":"Returns whether the table is empty or not"}],"isConstructor":false,"name":"next","realm":"shared and menu","returns":[{"description":"The next key for the table. If the previous key was nil, this will be the first key in the table. If the previous key was the last key in the table, this will be nil.","type":"any"},{"description":"The value associated with that key. If the previous key was the last key in the table, this will be nil.","type":"any"}]},{"accessModifier":"public","arguments":[],"description":"Returns the number of files needed from the server you are currently joining.","examples":[],"isConstructor":false,"name":"NumDownloadables","realm":"menu","returns":[{"description":"The number of downloadables","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Model to return amount of skins of","isOptional":false,"isVarArg":false,"name":"modelName","type":"string"}],"description":"Returns the amount of skins the specified model has","examples":[],"isConstructor":false,"name":"NumModelSkins","realm":"client","returns":[{"description":"Amount of skins","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the model.","isOptional":false,"isVarArg":false,"name":"modelName","type":"string"},{"default":"","description":"Number of pose parameters the model has.","isOptional":false,"isVarArg":false,"name":"numPostParams","type":"number"},{"default":"","description":"Number of sequences the model has.","isOptional":false,"isVarArg":false,"name":"numSeq","type":"number"},{"default":"","description":"Number of attachments the model has.","isOptional":false,"isVarArg":false,"name":"numAttachments","type":"number"},{"default":"","description":"Number of bone controllers the model has.","isOptional":false,"isVarArg":false,"name":"numBoneControllers","type":"number"},{"default":"","description":"Number of skins that the model has.","isOptional":false,"isVarArg":false,"name":"numSkins","type":"number"},{"default":"","description":"Size of the model.","isOptional":false,"isVarArg":false,"name":"size","type":"number"}],"description":"{{Internal}} Called by the engine when a model has been loaded. Caches model information with the {{Lib|sql}}.","examples":[],"isConstructor":false,"name":"OnModelLoaded","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The subdirectory to open in the garrysmod folder.","isOptional":false,"isVarArg":false,"name":"folder","type":"string"}],"description":"Opens a folder with the given name in the garrysmod folder using the operating system's file browser.\n\n{{Bug|Issue=1532|Currently broken on macOS and Linux.}}","examples":[{"code":"OpenFolder( \"saves\" )","description":"Opens the \"saves\" folder."}],"isConstructor":false,"name":"OpenFolder","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Bounding box min resultant","isOptional":false,"isVarArg":false,"name":"vector1","type":"Vector"},{"default":"","description":"Bounding box max resultant","isOptional":false,"isVarArg":false,"name":"vector2","type":"Vector"}],"description":"Modifies the given vectors so that all of vector2's axis are larger than vector1's by switching them around. Also known as ordering vectors.\n\n{{Note|This function will irreversibly modify the given vectors}}","examples":[],"isConstructor":false,"name":"OrderVectors","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to iterate over","isOptional":false,"isVarArg":false,"name":"tab","type":"table"}],"description":"Returns an iterator function({{GlobalFunction|next}}) for a for loop that will return the values of the specified table in an arbitrary order.\n\nFor alphabetical '''key''' order use {{GlobalFunction|SortedPairs}}.<br/>\nFor alphabetical '''value''' order use {{GlobalFunction|SortedPairsByValue}}.","examples":[{"code":"for k, v in pairs( player.GetAll() ) do\n\tprint( v:Nick() )\nend","description":"Iterates through all players on the server and prints their names."}],"isConstructor":false,"name":"pairs","realm":"shared and menu","returns":[{"description":"The iterator ({{GlobalFunction|next}})","type":"Function"},{"description":"The table being iterated over","type":"table"},{"description":"'''nil''' (for the constructor)","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The particle file.","isOptional":false,"isVarArg":false,"name":"file","type":"string"}],"description":"Calls {{LibraryFunction|game|AddParticles}} and returns given string.","examples":[],"isConstructor":false,"name":"Particle","realm":"shared and menu","returns":[{"description":"The particle file.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the particle effect.","isOptional":false,"isVarArg":false,"name":"particleName","type":"string"},{"default":"","description":"The start position of the effect.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"The orientation of the effect.","isOptional":false,"isVarArg":false,"name":"angles","type":"Angle"},{"default":"NULL","description":"If set, the particle will be parented to the entity.","isOptional":true,"isVarArg":false,"name":"parent","type":"Entity"}],"description":"Creates a particle effect.\n\n{{Note|The particle effect must be precached with {{GlobalFunction|PrecacheParticleSystem}} and the file its from must be added via {{LibraryFunction|game|AddParticles}} before it can be used!}}","examples":[{"code":"game.AddParticles( \"particles/explosion.pcf\" )\nPrecacheParticleSystem( \"ExplosionCore_wall\" )\n\nif ( SERVER ) then\n\t-- A test console command to see if the particle works, spawns the particle where the player is looking at. \n\tconcommand.Add( \"particleitup\", function( ply, cmd, args )\n\t\tParticleEffect( \"ExplosionCore_wall\", ply:GetEyeTrace().HitPos, Angle( 0, 0, 0 ) )\n\tend )\nend","description":"Example usage of the function. Precaches '''ExplosionCore_wall''' particle from '''particles/explosion.pcf''', a Team Fortress 2 particle file.\n\nYou can then test the particle by using the '''particleitup''' console command.\n\nYou can find a list of particles inside a .pcf file using the [https://developer.valvesoftware.com/wiki/Particle_Editor Particle Editor Tool]"}],"isConstructor":false,"name":"ParticleEffect","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the particle effect.","isOptional":false,"isVarArg":false,"name":"particleName","type":"string"},{"default":"","description":"Attachment type using {{Enum|PATTACH}}.","isOptional":false,"isVarArg":false,"name":"attachType","type":"PATTACH"},{"default":"","description":"The entity to be used in the way specified by the attachType.","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"},{"default":"","description":"The id of the attachment to be used in the way specified by the attachType.","isOptional":false,"isVarArg":false,"name":"attachmentID","type":"number"}],"description":"Creates a particle effect with specialized parameters.\n\n{{Note|The particle effect must be precached with {{GlobalFunction|PrecacheParticleSystem}} and the file its from must be added via {{LibraryFunction|game|AddParticles}} before it can be used!}}","examples":[],"isConstructor":false,"name":"ParticleEffectAttach","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The start position of the emitter.\n\nThis is only used to determine particle drawing order for translucent particles.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"Whenever to render the particles in 2D or 3D mode.","isOptional":false,"isVarArg":false,"name":"use3D","type":"boolean"}],"description":"Creates a new {{Type|CLuaEmitter}}.\n\n{{Note|Do not forget to delete the emitter with {{ClassFunction|CLuaEmitter|Finish}} once you are done with it}}","examples":[{"code":"local tr =  LocalPlayer():GetEyeTrace()\nlocal pos = tr.HitPos + tr.HitNormal * 100 -- The origin position of the effect\n\nlocal emitter = ParticleEmitter( pos ) -- Particle emitter in this position\n\nfor i = 0, 100 do -- Do 100 particles\n\tlocal part = emitter:Add( \"effects/spark\", pos ) -- Create a new particle at pos\n\tif ( part ) then\n\t\tpart:SetDieTime( 1 ) -- How long the particle should \"live\"\n\n\t\tpart:SetStartAlpha( 255 ) -- Starting alpha of the particle\n\t\tpart:SetEndAlpha( 0 ) -- Particle size at the end if its lifetime\n\n\t\tpart:SetStartSize( 5 ) -- Starting size\n\t\tpart:SetEndSize( 0 ) -- Size when removed\n\n\t\tpart:SetGravity( Vector( 0, 0, -250 ) ) -- Gravity of the particle\n\t\tpart:SetVelocity( VectorRand() * 50 ) -- Initial velocity of the particle\n\tend\nend\n\nemitter:Finish()","description":"Creates a simple spark particle effect 100 units above where the local player is looking at."}],"isConstructor":false,"name":"ParticleEmitter","realm":"client","returns":[{"description":"The new particle emitter.","type":"CLuaEmitter"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the path to create.\nThis is going to be \"Follow\" or \"Chase\" right now.","isOptional":false,"isVarArg":false,"name":"type","type":"string"}],"description":"Creates a path for the bot to follow","examples":[],"isConstructor":false,"name":"Path","realm":"server","returns":[{"description":"The path","type":"PathFollower"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Function to be executed and of which the errors should be caught of","isOptional":false,"isVarArg":false,"name":"func","type":"Function"},{"default":"","description":"Arguments to call the function with.","isOptional":false,"isVarArg":true,"name":"arguments","type":"any"}],"description":"Calls a function and catches an error that can be thrown while the execution of the call.\n\n{{Bug|Issue=1976|Using this function with {{GlobalFunction|include}} will break autorefresh.}}\n\n{{Bug|Issue=2498|This does not stop {{GlobalFunction|Error}} and {{GlobalFunction|ErrorNoHalt}} from sending error messages to the server (if called clientside) or calling the {{HookFunction|GM|OnLuaError}} hook. The success boolean returned will always return true and thus you will not get the error message returned. {{GlobalFunction|error}} does not exhibit these behaviours.}}\n\n{{Bug|Issue=3112|This does not stop errors incurred by {{GlobalFunction|include}}.}}","examples":[{"code":"local succ, err = pcall(function() aisj() end)\nprint(succ, err)","description":"Catch an error."}],"isConstructor":false,"name":"pcall","realm":"shared and menu","returns":[{"description":"If the function had no errors occur within it.","type":"boolean"},{"description":"If an error occurred, this will be a string containing the error message. Otherwise, this will be the return values of the function passed in.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player index.","isOptional":false,"isVarArg":false,"name":"playerIndex","type":"number"}],"description":"Returns the player with the matching {{ClassFunction|Player|UserID}}.\n\nFor a function that returns a player based on their {{ClassFunction|Entity|EntIndex}}, see {{GlobalFunction|Entity}}.<br/>\nFor a function that returns a player based on their connection ID, see {{LibraryFunction|player|GetByID}}.<br/>","examples":[],"isConstructor":false,"name":"Player","realm":"shared","returns":[{"description":"The retrieved player.","type":"Player"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Model that is being rendered to the spawn icon","isOptional":false,"isVarArg":false,"name":"model","type":"Entity"},{"default":"","description":"Position that the model is being rendered at","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Moves the given model to the given position and returns view information based on its properties","examples":[],"isConstructor":false,"name":"PositionSpawnIcon","realm":"client","returns":[{"description":"Table of information of the view which can be used for rendering","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the particle system.","isOptional":false,"isVarArg":false,"name":"particleSystemName","type":"string"}],"description":"Precaches the particle with the specified name.","examples":[{"code":"game.AddParticles( \"particles/explosion.pcf\" )\nPrecacheParticleSystem( \"ExplosionCore_wall\" )\n\nif ( SERVER ) then\n\t-- A test console command to see if the particle works, spawns the particle where the player is looking at. \n\tconcommand.Add( \"particleitup\", function( ply, cmd, args )\n\t\tParticleEffect( \"ExplosionCore_wall\", ply:GetEyeTrace().HitPos, Angle( 0, 0, 0 ) )\n\tend )\nend","description":"Example usage of the function. Precaches \"ExplosionCore_wall\" particle from \"particles/explosion.pcf\", a Team Fortress 2 particle file.\n\nYou can find a list of particles inside a .pcf file using the [https://developer.valvesoftware.com/wiki/Particle_Editor Particle Editor Tool]"}],"isConstructor":false,"name":"PrecacheParticleSystem","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Path to the scene file to precache.","isOptional":false,"isVarArg":false,"name":"scene","type":"string"}],"description":"Precaches a scene file.","examples":[],"isConstructor":false,"name":"PrecacheScene","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path to the custom sentences.txt.","isOptional":false,"isVarArg":false,"name":"filename","type":"string"}],"description":"Load and precache a custom sentence file.","examples":[{"code":"PrecacheSentenceFile( \"data/customsentences.txt\" )","description":"Precache a file named \"customsentences.txt\" in the data directory."}],"isConstructor":false,"name":"PrecacheSentenceFile","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The group to precache.","isOptional":false,"isVarArg":false,"name":"group","type":"string"}],"description":"Precache a sentence group in a sentences.txt definition file.","examples":[{"code":"PrecacheSentenceGroup( \"METROPOLICE\" )","description":"Precache all metropolice sentences."}],"isConstructor":false,"name":"PrecacheSentenceGroup","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"List of values to print.","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Writes every given argument to the console.<br />\nAutomatically attempts to convert each argument to a string. (See {{GlobalFunction|tostring}})<br />\nSeparates arguments with a tab character (''\"\\t\"'').","examples":[{"code":"print(\"Hello World!\", \"Yay!\")","description":"Prints \"Hello World! Yay!\" to the console."}],"isConstructor":false,"name":"print","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Which type of message should be sent to the players (see {{Enum|HUD}})","isOptional":false,"isVarArg":false,"name":"type","type":"HUD"},{"default":"","description":"Message to be sent to the players","isOptional":false,"isVarArg":false,"name":"message","type":"string"}],"description":"Displays a message in the chat, console, or center of screen of every player.\n\nThis uses the archaic user message system ({{Lib|umsg}}) and hence is limited to &asymp;250 characters.","examples":[{"code":"PrintMessage(HUD_PRINTTALK, \"I'm new here.\")","description":"Prints into the every player's chat: \"I'm new here.\""}],"isConstructor":false,"name":"PrintMessage","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to be printed","isOptional":false,"isVarArg":false,"name":"tableToPrint","type":"table"},{"default":"0","description":"Number of tabs to start indenting at. Increases by 2 when entering another table.","isOptional":true,"isVarArg":false,"name":"indent","type":"number"},{"default":"{}","description":"Internal argument, you shouldn't normally change this. Used to check if a nested table has already been printed so it doesn't get caught in a loop.","isOptional":true,"isVarArg":false,"name":"done","type":"table"}],"description":"Recursively prints the contents of a table to the console.","examples":[{"code":"local tbl = {\n \"test\",\n 3829.4,\n {\"foo\", \"baah\", 20/5},\n true\n}\nPrintTable(tbl)","description":"Prints the table we created."}],"isConstructor":false,"name":"PrintTable","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Creates a new {{Type|ProjectedTexture}}.","examples":[{"code":"function ENT:Initialize()\n\tlocal lamp = ProjectedTexture() -- Create a projected texture\n\tself.lamp = lamp -- Assign it to the entity table so it may be accessed later\n\n\t-- Set it all up\n\tlamp:SetTexture( \"effects/flashlight001\" )\n\tlamp:SetFarZ( 500 ) -- How far the light should shine\n\n\tlamp:SetPos( self:GetPos() ) -- Initial position and angles\n\tlamp:SetAngles( self:GetAngles() )\n\tlamp:Update()\nend\n\nfunction ENT:OnRemove()\n\tif ( IsValid( self.lamp ) ) then\n\t\tself.lamp:Remove()\n\tend\nend\n\nfunction ENT:Think()\n\t-- Keep updating the light so it's attached to our entity\n\t-- you might want to call other functions here, you can do animations here as well\n\tif ( IsValid( self.lamp ) ) then\n\t\tself.lamp:SetPos( self:GetPos() )\n\t\tself.lamp:SetAngles( self:GetAngles() )\n\t\tself.lamp:Update()\n\tend\nend","description":"Creates a simple ProjectedTexture attached to a [[Scripted Entities|Scripted Entity]].\n\nNote that this code must be ran on clientside only, not shared."}],"isConstructor":false,"name":"ProjectedTexture","realm":"client","returns":[{"description":"Newly created projected texture.","type":"ProjectedTexture"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Function to run","isOptional":false,"isVarArg":false,"name":"func","type":"Function"}],"description":"Runs a function without stopping the whole script on error.\n\nThis function is similar to {{GlobalFunction|pcall}} and {{GlobalFunction|xpcall}} except the errors are still printed and sent to the error handler (i.e. sent to server console if clientside and {{HookFunction|GM|OnLuaError}} called).","examples":[],"isConstructor":false,"name":"ProtectedCall","realm":"shared","returns":[{"description":"Were there any errors or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to create iterator for","isOptional":false,"isVarArg":false,"name":"table","type":"table"},{"default":"","description":"Whether the iterator should iterate descending or not","isOptional":false,"isVarArg":false,"name":"descending","type":"boolean"}],"description":"Returns an iterator function that can be used to loop through a table in random order","examples":[{"code":"local tab = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}\n\nfor k, v in RandomPairs(tab) do\n    print(v)\nend","description":"Creates a table and prints its contents in random order"}],"isConstructor":false,"name":"RandomPairs","realm":"shared and menu","returns":[{"description":"Iterator function","type":"Function"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The first value to compare.","isOptional":false,"isVarArg":false,"name":"value1","type":"any"},{"default":"","description":"The second value to compare.","isOptional":false,"isVarArg":false,"name":"value2","type":"any"}],"description":"Compares the two values without calling their __eq operator.","examples":[],"isConstructor":false,"name":"rawequal","realm":"shared and menu","returns":[{"description":"Whether or not the two values are equal.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to get the value from.","isOptional":false,"isVarArg":false,"name":"table","type":"table"},{"default":"","description":"The index to get the value from.","isOptional":false,"isVarArg":false,"name":"index","type":"any"}],"description":"Gets the value with the specified key from the table without calling the __index method.","examples":[],"isConstructor":false,"name":"rawget","realm":"shared and menu","returns":[{"description":"The value.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to get the value from.","isOptional":false,"isVarArg":false,"name":"table","type":"table"},{"default":"","description":"The index to get the value from.","isOptional":false,"isVarArg":false,"name":"index","type":"any"},{"default":"","description":"The value to set for the specified key.","isOptional":false,"isVarArg":false,"name":"value","type":"any"}],"description":"Sets the value with the specified key from the table without calling the __newindex method.","examples":[],"isConstructor":false,"name":"rawset","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the real frame-time which is unaffected by host_timescale. To be used for GUI effects (for example)","examples":[],"isConstructor":false,"name":"RealFrameTime","realm":"client","returns":[{"description":"Real frame time","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the uptime of the game/server in seconds (to at least 4 decimal places)\n\n{{Note|This is '''not''' synchronised or affected by the game.}}\n\nYou should use this function (or SysTime) for timing real-world events such as user interaction, but not for timing game events such as animations.\n\nSee also: {{GlobalFunction|CurTime}}, {{GlobalFunction|SysTime}}","examples":[],"isConstructor":false,"name":"RealTime","realm":"shared","returns":[{"description":"Uptime of the server.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Creates a new {{Type|CRecipientFilter}}.","examples":[{"code":"local rf = RecipientFilter()\nrf:AddAllPlayers()\nprint( rf:GetCount() )\nPrintTable( rf:GetPlayers() )","description":"Example usage of the function"}],"isConstructor":false,"name":"RecipientFilter","realm":"server","returns":[{"description":"The new created recipient filter.","type":"CRecipientFilter"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\nAdds a frame to the currently recording demo.","examples":[],"isConstructor":false,"name":"RecordDemoFrame","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Menu to be registered for closure","isOptional":false,"isVarArg":false,"name":"menu","type":"Panel"}],"description":"Registers a Derma element to be closed the next time {{GlobalFunction|CloseDermaMenus}} is called","examples":[],"isConstructor":false,"name":"RegisterDermaMenuForClose","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Saves position of your cursor on screen. You can restore it by using {{GlobalFunction|RestoreCursorPosition}}.\n\nDespite this function being available on server, it will not do anything on server.","examples":[],"isConstructor":false,"name":"RememberCursorPosition","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Does the removing of the tooltip panel. Called by {{GlobalFunction|EndTooltip}}.","examples":[],"isConstructor":false,"name":"RemoveTooltip","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the angle that the clients view is being rendered at","examples":[],"isConstructor":false,"name":"RenderAngles","realm":"client","returns":[{"description":"Render Angles","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Origin to render the effect at","isOptional":false,"isVarArg":false,"name":"origin","type":"Vector"},{"default":"","description":"Angle to render the effect at","isOptional":false,"isVarArg":false,"name":"angle","type":"Angle"},{"default":"","description":"Point to focus the effect at","isOptional":false,"isVarArg":false,"name":"usableFocusPoint","type":"Vector"},{"default":"","description":"Angle size of the effect","isOptional":false,"isVarArg":false,"name":"angleSize","type":"number"},{"default":"","description":"Amount of radial steps to render the effect with","isOptional":false,"isVarArg":false,"name":"radialSteps","type":"number"},{"default":"","description":"Amount of render passes","isOptional":false,"isVarArg":false,"name":"passes","type":"number"},{"default":"","description":"Whether to cycle the frame or not","isOptional":false,"isVarArg":false,"name":"spin","type":"boolean"},{"default":"","description":"Table of view data","isOptional":false,"isVarArg":false,"name":"inView","type":"table"},{"default":"","description":"FOV to render the effect with","isOptional":false,"isVarArg":false,"name":"fov","type":"number"}],"description":"Renders a Depth of Field effect","examples":[],"isConstructor":false,"name":"RenderDoF","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Origin to render the effect at","isOptional":false,"isVarArg":false,"name":"viewOrigin","type":"Vector"},{"default":"","description":"Angles to render the effect at","isOptional":false,"isVarArg":false,"name":"viewAngles","type":"Angle"}],"description":"Renders the stereoscopic post-process effect","examples":[],"isConstructor":false,"name":"RenderStereoscopy","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Origin to render the effect at","isOptional":false,"isVarArg":false,"name":"viewOrigin","type":"Vector"},{"default":"","description":"Angles to render the effect at","isOptional":false,"isVarArg":false,"name":"viewAngles","type":"Angle"},{"default":"","description":"Field of View to render the effect at","isOptional":false,"isVarArg":false,"name":"viewFOV","type":"number"}],"description":"Renders the Super Depth of Field post-process effect","examples":[],"isConstructor":false,"name":"RenderSuperDoF","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the module to be loaded.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"First tries to load a binary module with the given name, if unsuccessful, it tries to load a Lua module with the given name.\n\n{{Bug|Issue=1041|Request=813|Running this function with {{GlobalFunction|pcall}} or {{GlobalFunction|xpcall}} will still print an error that counts towards sv_kickerrornum.}}","examples":[],"isConstructor":false,"name":"require","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Restores position of your cursor on screen. You can save it by using {{GlobalFunction|RememberCursorPosition}}.\n\nDespite this function being available on server, it will not do anything on server.","examples":[],"isConstructor":false,"name":"RestoreCursorPosition","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The command to be executed.","isOptional":false,"isVarArg":false,"name":"command","type":"string"},{"default":"","description":"The arguments. Note, that unlike {{ClassFunction|Player|ConCommand}}, you must pass each argument as a new string, not separating them with a space.","isOptional":false,"isVarArg":true,"name":"arguments","type":"any"}],"description":"Executes the given console command with the parameters.\n\n{{Note|Some commands/convars are blocked from being ran/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see [[Blocked ConCommands]].}}","examples":[{"code":"RunConsoleCommand(\"sv_gravity\", \"400\")","description":"Changes the gravity to 400 (default 600)."}],"isConstructor":false,"name":"RunConsoleCommand","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The menu command to run\n\nShould be one of the following:\n* Disconnect - Disconnects from the current server.\n* OpenBenchmarkDialog - Opens the \"Video Hardware Stress Test\" dialog.\n* OpenChangeGameDialog - Does not work in GMod.\n* OpenCreateMultiplayerGameDialog - Opens the Source dialog for creating a listen server.\n* OpenCustomMapsDialog - Does nothing.\n* OpenFriendsDialog - Does nothing.\n* OpenGameMenu - Does not work in GMod.\n* OpenLoadCommentaryDialog - Opens the \"Developer Commentary\" selection dialog. Useless in GMod.\n* OpenLoadDemoDialog - Does nothing.\n* OpenLoadGameDialog - Opens the Source \"Load Game\" dialog.\n* OpenNewGameDialog - Opens the \"New Game\" dialog. Useless in GMod.\n* OpenOptionsDialog - Opens the options dialog.\n* OpenPlayerListDialog - Opens the \"Mute Players\" dialog that shows all players connected to the server and allows to mute them.\n* OpenSaveGameDialog - Opens the Source \"Save Game\" dialog.\n* OpenServerBrowser - Opens the legacy server browser.\n* Quit - Quits the game ''without'' confirmation (unlike other Source games).\n* QuitNoConfirm - Quits the game without confirmation (like other Source games).\n* ResumeGame - Closes the menu and returns to the game.\n* engine <concommand> - Runs a console command. Equivalent to {{GlobalFunction|RunConsoleCommand}}( <concommand> ).","isOptional":false,"isVarArg":false,"name":"command","type":"string"}],"description":"Runs a menu command. Equivalent to {{GlobalFunction|RunConsoleCommand}}( \"gamemenucommand\", command ) unless the command starts with the \"engine\" keyword in which case it is equivalent to {{GlobalFunction|RunConsoleCommand}}( command ).","examples":[{"code":"RunGameUICommand( \"OpenOptionsDialog\" )","description":"Opens the options dialog."},{"code":"RunGameUICommand( \"engine gameui_hide\" )","description":"Hides the game UI (menu). Equivalent to {{GlobalFunction|RunConsoleCommand}}( \"gameui_hide\" )"}],"isConstructor":false,"name":"RunGameUICommand","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The code to execute.","isOptional":false,"isVarArg":false,"name":"code","type":"string"},{"default":"\"RunString\"","description":"The name that should appear in any error messages caused by this code.","isOptional":true,"isVarArg":false,"name":"identifier","type":"string"},{"default":"true","description":"If false, this function will return a string containing any error messages instead of throwing an error.","isOptional":true,"isVarArg":false,"name":"handleError","type":"boolean"}],"description":"Evaluates and executes the given code, will throw an error on failure.\n{{Note|Local variables are not passed to the given code.}}","examples":[],"isConstructor":false,"name":"RunString","realm":"shared and menu","returns":[{"description":"If handleError is false, the error message (if any).","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Alias of {{GlobalFunction|RunString}}.\n\n{{Deprecated|Use {{GlobalFunction|RunString}} instead.}}","examples":[],"isConstructor":false,"name":"RunStringEx","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity to safely remove.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Removes the given entity unless it is a player or the world entity","examples":[],"isConstructor":false,"name":"SafeRemoveEntity","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity to be removed","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"},{"default":"","description":"Delay for entity removal in seconds","isOptional":false,"isVarArg":false,"name":"delay","type":"number"}],"description":"Removes entity after delay using {{GlobalFunction|SafeRemoveEntity}}","examples":[],"isConstructor":false,"name":"SafeRemoveEntityDelayed","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the map.","isOptional":false,"isVarArg":false,"name":"map","type":"string"},{"default":"","description":"The name of the category to which this map belongs.","isOptional":false,"isVarArg":false,"name":"category","type":"string"}],"description":"{{Internal}}\nThis function is used to save the last map and category to which the map belongs as a [[:Category:cookie|cookie]].","examples":[],"isConstructor":false,"name":"SaveLastMap","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Presets to be saved","isOptional":false,"isVarArg":false,"name":"presets","type":"table"}],"description":"Overwrites all presets with the supplied table. Used by the {{Lib|presets}} for preset saving","examples":[],"isConstructor":false,"name":"SavePresets","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The number you want to scale.","isOptional":false,"isVarArg":false,"name":"Size","type":"number"}],"description":"Returns a number based on the Size argument and your screen's width. The screen's width is always equal to size 640. This function is primarily used for scaling font sizes.","examples":[{"code":"print( ScreenScale(96) )\nprint( ScreenScale(400) )\nprint( ScreenScale(640) )","description":"Prints a scaled number based on the number 96, 400 and 640."}],"isConstructor":false,"name":"ScreenScale","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Gets the height of the game's window (in pixels).","examples":[{"code":"print(ScrH())","description":"Prints the Height of the window."},{"code":"hook.Add(\"HUDPaint\", \"WhiteBox\", function()\n    surface.SetDrawColor(Color(255,255,255,255))\n    surface.DrawRect(0, 0, ScrW() / 2, ScrH() / 2)\nend)","description":"Draws a white box on the top left corner of your screen"}],"isConstructor":false,"name":"ScrH","realm":"client and menu","returns":[{"description":"The height of the game's window in pixels","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the width of the game's window (in pixels).","examples":[{"code":"print( ScrW() )","description":"Prints the width of the screen"}],"isConstructor":false,"name":"ScrW","realm":"client and menu","returns":[{"description":"The width of the game's window in pixels","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Can be a {{Type|number}} or {{Type|string}}.\n* If it's a string and starts with \"#\", the function will return the amount of values in the vararg (ignoring the rest of the string).\n* If it's a positive number, the function will return all values starting from the given index.\n* If the number is negative, it will return the amount specified from the end instead of the beginning.","isOptional":false,"isVarArg":false,"name":"parameter","type":"number | string"},{"default":"","description":"The vararg. These are the values from which you want to select.","isOptional":false,"isVarArg":true,"name":"vararg","type":"any"}],"description":"Used to select single values from a vararg or get the count of values in it.","examples":[{"code":"print( select( '#', 'a', true, false, {}, 1 ) )","description":"This code shows how it works with the \"#\" modifier:"},{"code":"print( select( 2, 1, 2, 3, 4, 5 ) )","description":"This prints from the 2nd vararg passed to the last"},{"code":"print( select( -2, 1, 2, 3, 4, 5 ) )","description":"This prints the last 2 arguments passed"}],"isConstructor":false,"name":"select","realm":"shared and menu","returns":[{"description":"Returns a {{Type|number}} or {{Type|vararg}}, depending on the select method.","type":"number | any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the usermessage","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Can be a {{Type|CRecipientFilter}}, {{Type|table}} or {{Type|Player}} object.","isOptional":false,"isVarArg":false,"name":"recipients","type":"CRecipientFilter | table | Player"},{"default":"","description":"Data to send in the usermessage","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Send a usermessage","examples":[],"isConstructor":false,"name":"SendUserMessage","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to be printed to console.","isOptional":false,"isVarArg":false,"name":"parameter","type":"string"}],"description":"Prints \"ServerLog: PARAM\" without a newline, to the server log and console.","examples":[],"isConstructor":false,"name":"ServerLog","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to add to the clipboard.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Adds the given string to the computers clipboard, which can then be pasted in or outside of GMod with Ctrl + V.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"SetClipboardText","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The function to set the enviroment for or a number representing stack level.","isOptional":false,"isVarArg":false,"name":"location","type":"Function"},{"default":"","description":"Table to be used as enviroment.","isOptional":false,"isVarArg":false,"name":"enviroment","type":"table"}],"description":"Sets the enviroment for a function or a stack level, if a function is passed, the return value will be the function, otherwise nil.","examples":[],"isConstructor":false,"name":"setfenv","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index to identify the global angle with","isOptional":false,"isVarArg":false,"name":"index","type":"any"},{"default":"","description":"Angle to be networked","isOptional":false,"isVarArg":false,"name":"angle","type":"Angle"}],"description":"Defines an angle to be automatically networked to clients\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on!}}","examples":[],"isConstructor":false,"name":"SetGlobalAngle","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index to identify the global boolean with","isOptional":false,"isVarArg":false,"name":"index","type":"any"},{"default":"","description":"Boolean to be networked","isOptional":false,"isVarArg":false,"name":"bool","type":"boolean"}],"description":"Defined a boolean to be automatically networked to clients\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on!}}","examples":[],"isConstructor":false,"name":"SetGlobalBool","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index to identify the global entity with","isOptional":false,"isVarArg":false,"name":"index","type":"any"},{"default":"","description":"Entity to be networked","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Defines an entity to be automatically networked to clients\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on!}}","examples":[],"isConstructor":false,"name":"SetGlobalEntity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index to identify the global float with","isOptional":false,"isVarArg":false,"name":"index","type":"any"},{"default":"","description":"Float to be networked","isOptional":false,"isVarArg":false,"name":"float","type":"number"}],"description":"Defines a floating point number to be automatically networked to clients\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on!}}","examples":[],"isConstructor":false,"name":"SetGlobalFloat","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique index to identify the global value with.","isOptional":false,"isVarArg":false,"name":"index","type":"string"},{"default":"","description":"The value to set the global value to","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Sets an integer that is shared between the server and all clients.\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on!}}\n{{Bug|Issue=3374|This function will not round decimal values as it actually networks a float internally.}}","examples":[{"code":"SetGlobalInt(\"RoundNumber\", 4)","description":"Sets the current round number."}],"isConstructor":false,"name":"SetGlobalInt","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index to identify the global string with","isOptional":false,"isVarArg":false,"name":"index","type":"any"},{"default":"","description":"String to be networked","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Defines a string with a maximum of 199 characters to be automatically networked to clients\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on!}}","examples":[],"isConstructor":false,"name":"SetGlobalString","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index to identify the global vector with","isOptional":false,"isVarArg":false,"name":"index","type":"any"},{"default":"","description":"Vector to be networked","isOptional":false,"isVarArg":false,"name":"vec","type":"Vector"}],"description":"Defines a vector to be automatically networked to clients\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on!}}","examples":[],"isConstructor":false,"name":"SetGlobalVector","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The table who's metatable to change.","isOptional":false,"isVarArg":false,"name":"Tab","type":"table"},{"default":"","description":"The metatable to assign.<br />If it's nil, the metatable will be removed.","isOptional":false,"isVarArg":false,"name":"Metatable","type":"table"}],"description":"Sets, changes or removes a table's metatable. Returns Tab (the first argument).","examples":[{"code":"local Pupil_meta = {\n\tGetName = function(self)\n\t\treturn self.name\n\tend\n}\nPupil_meta.__index = Pupil_meta\n-- If a key cannot be found in an object, it will look in it's metatable's __index metamethod.\n\nlocal Pupil = {\n\tname = \"John Doe\"\n}\n\nsetmetatable(Pupil, Pupil_meta)\n\nprint( Pupil:GetName() )\n-- This will look for the \"GetName\" key in Pupil, but it doesn't have one. So it will look in it's metatable (Pupil_meta) __index key instead.","description":"Creates a metatable and assigns it to a table."}],"isConstructor":false,"name":"setmetatable","realm":"shared and menu","returns":[{"description":"The first argument.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Constraint system to use","isOptional":false,"isVarArg":false,"name":"constraintSystem","type":"Entity"}],"description":"Called by the engine to set which constraint system [https://developer.valvesoftware.com/wiki/Phys_constraintsystem] the next created constraints should use","examples":[],"isConstructor":false,"name":"SetPhysConstraintSystem","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to sort","isOptional":false,"isVarArg":false,"name":"table","type":"table"},{"default":"false","description":"Reverse the sorting order","isOptional":true,"isVarArg":false,"name":"desc","type":"boolean"}],"description":"This function can be used in a for loop instead of {{GlobalFunction|pairs}}. It sorts all '''keys''' alphabetically.\n\nFor sorting by specific '''value member''', use {{GlobalFunction|SortedPairsByMemberValue}}.<br/>\nFor sorting by '''value''', use {{GlobalFunction|SortedPairsByValue}}.","examples":[{"code":"for id, text in SortedPairs( { \"e\", \"b\", \"d\", \"c\", \"a\" } ) do\n    print(id, text)\nend\n\nprint( \"---\" )\n\nfor id, text in SortedPairs( { e = 1, b = 2, d = 3, c = 4, a = 5 } ) do\n    print(id, text)\nend","description":"Example of usage."}],"isConstructor":false,"name":"SortedPairs","realm":"shared and menu","returns":[{"description":"Iterator function","type":"Function"},{"description":"The table being iterated over","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to create iterator for.","isOptional":false,"isVarArg":false,"name":"table","type":"table"},{"default":"","description":"Key of the value member to sort by.","isOptional":false,"isVarArg":false,"name":"memberKey","type":"any"},{"default":"false","description":"Whether the iterator should iterate in descending order or not.","isOptional":true,"isVarArg":false,"name":"descending","type":"boolean"}],"description":"Returns an iterator function that can be used to loop through a table in order of member values, when the values of the table are also tables and contain that member.\n\nTo sort by '''value''', use {{GlobalFunction|SortedPairsByValue}}.<br/>\nTo sort by '''keys''', use {{GlobalFunction|SortedPairs}}.","examples":[{"code":"local tab = {\n\t{\n\t\tName = \"Adam\",\n\t\tAge = 16\n\t},\n\t{\n\t\tName = \"Charles\",\n\t\tAge = 18\n\t}\n}\n\nfor k, v in SortedPairsByMemberValue(tab, \"Age\", true) do\n\tprint(v.Name)\nend","description":"Creates a table and prints its contents in order of the age member descending"}],"isConstructor":false,"name":"SortedPairsByMemberValue","realm":"shared and menu","returns":[{"description":"Iterator function","type":"Function"},{"description":"The table the iterator was created for.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to create iterator for","isOptional":false,"isVarArg":false,"name":"table","type":"table"},{"default":"false","description":"Whether the iterator should iterate in descending order or not","isOptional":true,"isVarArg":false,"name":"descending","type":"boolean"}],"description":"Returns an iterator function that can be used to loop through a table in order of its '''values'''.\n\nTo sort by specific '''value member''', use {{GlobalFunction|SortedPairsByMemberValue}}.<br/>\nTo sort by '''keys''', use {{GlobalFunction|SortedPairs}}.","examples":[],"isConstructor":false,"name":"SortedPairsByValue","realm":"shared and menu","returns":[{"description":"Iterator function","type":"Function"},{"description":"The table which will be iterated over","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The soundpath to precache","isOptional":false,"isVarArg":false,"name":"soundPath","type":"string"}],"description":"Runs {{LibraryFunction|util|PrecacheSound}} and returns the string","examples":[{"code":"local BounceSound = Sound( \"garrysmod/balloon_pop_cute.wav\" )\nfunction ENT:PhysicsCollide( data, physobj )\n -- Play sound on bounce\n if ( data.Speed > 60 && data.DeltaTime > 0.2 ) then\n sound.Play( BounceSound, self:GetPos(), 75, math.random( 90, 120 ), math.Clamp( data.Speed / 150, 0, 1 ) )\n ...","description":"From entities/sent_ball.lua"}],"isConstructor":false,"name":"Sound","realm":"shared and menu","returns":[{"description":"The string passed as the first argument","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The sound file path.","isOptional":false,"isVarArg":false,"name":"soundName","type":"string"}],"description":"Returns the duration of the sound specified in seconds.\n\n{{Bug|Issue=936|This only works properly for .wav files serverside.}}","examples":[],"isConstructor":false,"name":"SoundDuration","realm":"shared","returns":[{"description":"Sound duration in seconds.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"String to be escaped","isOptional":false,"isVarArg":false,"name":"input","type":"string"},{"default":"false","description":"Whether the returned value should be surrounded in quotes or not","isOptional":true,"isVarArg":false,"name":"noQuotes","type":"boolean"}],"description":"Returns the input value in an escaped form so that it can safely be used inside of queries. The returned value is surrounded by quotes unless noQuotes is true. Alias of {{LibraryFunction|sql|SQLStr}}","examples":[],"isConstructor":false,"name":"SQLStr","realm":"shared and menu","returns":[{"description":"Escaped input","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The number you want to scale.","isOptional":false,"isVarArg":false,"name":"Size","type":"number"}],"description":"{{Deprecated|You should be using {{GlobalFunction|ScreenScale}} instead.}}\n\nReturns a number based on the Size argument and your screen's width. Alias of {{GlobalFunction|ScreenScale}}.","examples":[{"code":"print( SScale(40) )","description":"Prints a scaled number based on the number 40."}],"isConstructor":false,"name":"SScale","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The number to find the ordinal suffix of.","isOptional":false,"isVarArg":false,"name":"number","type":"number"}],"description":"Returns the ordinal suffix of a given number.","examples":[{"code":"print( 72 .. STNDRD(72) )","description":"Returns the ordinal suffix of 72."}],"isConstructor":false,"name":"STNDRD","realm":"shared and menu","returns":[{"description":"suffix","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player to suppress any networking to.","isOptional":false,"isVarArg":false,"name":"suppressPlayer","type":"Player"}],"description":"Suppress any networking from the server to the specified player. This is automatically called by the engine before/after a player fires their weapon, reloads, or causes any other similar shared-predicted event to occur.","examples":[],"isConstructor":false,"name":"SuppressHostEvents","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns a highly accurate time in seconds since the start up, ideal for benchmarking.","examples":[{"code":"print(SysTime())","description":"Prints the runtime"},{"code":"local SysTime = SysTime\nlocal Distance = FindMetaTable(\"Vector\").Distance\n\nlocal vec1 = Vector(1, 2, 3)\nlocal vec2 = Vector(13, 26, -10)\n\nlocal count = 10000\n\nlocal StartTime = SysTime()\n\nfor i = 1, count do\n\t-- Repeat an action 10,000 times to check how long it takes on average\n\t-- Example action:\n\tDistance(vec1 , vec2)\nend\n\nlocal EndTime = SysTime()\nlocal TotalTime = EndTime - StartTime\nlocal AverageTime = TotalTime / count\n\nprint(\"Total: \" .. TotalTime .. \" seconds. Average: \" .. AverageTime .. \" seconds.\")","description":"Typical usage of this function for benchmarking"}],"isConstructor":false,"name":"SysTime","realm":"shared and menu","returns":[{"description":"Uptime of the server.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns a TauntCamera object","examples":[],"isConstructor":false,"name":"TauntCamera","realm":"shared","returns":[{"description":"TauntCamera","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Clears focus from any text entries player may have focused.","examples":[],"isConstructor":false,"name":"TextEntryLoseFocus","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The frequency of fluctuation","isOptional":false,"isVarArg":false,"name":"frequency","type":"number"},{"default":"","description":"Minimum value","isOptional":false,"isVarArg":false,"name":"min","type":"number"},{"default":"","description":"Maxmimum value","isOptional":false,"isVarArg":false,"name":"max","type":"number"},{"default":"","description":"Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time","isOptional":false,"isVarArg":false,"name":"offset","type":"number"}],"description":"Returns a cosine value that fluctuates based on the current time","examples":[],"isConstructor":false,"name":"TimedCos","realm":"shared and menu","returns":[{"description":"Cosine value","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The frequency of fluctuation, in [[wikipedia:hertz|hertz]]","isOptional":false,"isVarArg":false,"name":"frequency","type":"number"},{"default":"","description":"The center value of the sine wave.","isOptional":false,"isVarArg":false,"name":"origin","type":"number"},{"default":"","description":"This argument's distance from origin defines the size of the full range of the sine wave. For example, if origin is 3 and max is 5, then the full range of the sine wave is 5-3 = 2. 3 is the center point of the sine wave, so the sine wave will range between 2 and 4.","isOptional":false,"isVarArg":false,"name":"max","type":"number"},{"default":"","description":"Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time","isOptional":false,"isVarArg":false,"name":"offset","type":"number"}],"description":"Returns a sine value that fluctuates based on {{GlobalFunction|CurTime}}. The value returned will be between the start value plus/minus the range value.\n\nDue to a bug, the range arguments don't work as intended. The existing (bugged) behavior is documented below.","examples":[],"isConstructor":false,"name":"TimedSin","realm":"shared and menu","returns":[{"description":"Sine value","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The object to be converted to a boolean","isOptional":false,"isVarArg":false,"name":"val","type":"any"}],"description":"Attempts to return an appropriate boolean for the given value","examples":[{"code":"print(\"boolean true:\", tobool(true))\nprint(\"boolean false:\", tobool(false))\nprint(\"string true:\", tobool(\"true\"))\nprint(\"string false:\", tobool(\"false\"))\nprint(\"numeric 0:\", tobool(0))\nprint(\"string 0:\", tobool(\"0\"))\nprint(\"string 1:\", tobool(\"1\"))\nprint(\"nil:\", tobool(nil))\nprint(\"text string:\", tobool(\"not a boolean\"))\nprint(\"empty string:\", tobool(\"\"))","description":"Demonstrate the output of this function with various values."}],"isConstructor":false,"name":"tobool","realm":"shared and menu","returns":[{"description":"'''false''' for the boolean false.<br />'''false''' for \"false\".<br />'''false''' for \"0\".<br />'''false''' for numeric 0.<br />'''false''' for nil.<br /><br />'''true''' otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Map to toggle favorite.","isOptional":false,"isVarArg":false,"name":"map","type":"string"}],"description":"Toggles whether or not the named map is favorited in the new game list.","examples":[],"isConstructor":false,"name":"ToggleFavourite","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to convert. Can be a number or string.","isOptional":false,"isVarArg":false,"name":"value","type":"any"},{"default":"10","description":"The [[wikipedia:Radix|numeric base]] used in the string. Can be any integer between 2 and 36, inclusive.","isOptional":true,"isVarArg":false,"name":"base","type":"number"}],"description":"Attempts to convert the value to a number.\n\nReturns nil on failure.","examples":[],"isConstructor":false,"name":"tonumber","realm":"shared and menu","returns":[{"description":"The numeric representation of the value with the given base, or nil if the conversion failed.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The object to be converted to a string.","isOptional":false,"isVarArg":false,"name":"value","type":"any"}],"description":"Attempts to convert the value to a string. If the value is an object and its metatable has defined the __tostring metamethod, this will call that function.\n\n{{GlobalFunction|print}} also uses this functionality.","examples":[{"code":"print(tostring(0x16))","description":"Convert a number to a string."}],"isConstructor":false,"name":"tostring","realm":"shared and menu","returns":[{"description":"The string representation of the value.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"File name to test","isOptional":false,"isVarArg":false,"name":"filename","type":"string"}],"description":"{{Deprecated}}\n{{Internal}}\nReturns \"Lua Cache File\" if the given file name is in a certain string table, nothing otherwise.","examples":[],"isConstructor":false,"name":"TranslateDownloadableName","realm":"menu","returns":[{"description":"\"Lua Cache File\" if the given file name is in a certain string table, nothing otherwise.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The object to get the type of.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Returns a string representing the name of the type of the passed object.","examples":[{"code":"print( type(2) )\nprint( type(\"hai\") )\nprint( type({}) )","description":"Print the name of a few types."},{"code":"print( type() )","description":"Returns \"no value\" if called with 0 arguments/parameters."},{"code":"print(type(LocalPlayer()))\nprint(type(Vector()))\nprint(type(Angle()))\nprint(type(Entity(num))) -- -> num is the EntIndex for the entity\nprint(type(vgui.Create(\"DFrame\")))","description":"A list of code showing how you can use the type function in replacement with any of the \"is\" functions. (example being {{GlobalFunction|istable}}, {{GlobalFunction|isentity}}, etc.)"}],"isConstructor":false,"name":"type","realm":"shared and menu","returns":[{"description":"The name of the object's type.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The variable to get the type ID of.","isOptional":false,"isVarArg":false,"name":"variable","type":"any"}],"description":"Gets the associated type ID of the variable.\n\n{{Bug|Request=1120|This does not work properly with _LOADLIB objects.}}","examples":[],"isConstructor":false,"name":"TypeID","realm":"shared","returns":[{"description":"The type ID of the variable. See the {{Enum|TYPE}}.","type":"TYPE"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to generate the vararg from.","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"},{"default":"1","description":"Which index to start from. Optional.","isOptional":true,"isVarArg":false,"name":"startIndex","type":"number"},{"default":"#tbl","description":"Which index to end at. Optional, even if you set StartIndex.","isOptional":true,"isVarArg":false,"name":"endIndex","type":"number"}],"description":"This function takes a numeric indexed table and return all the members as a vararg. If specified, it will start at the given index and end at end index.","examples":[{"code":"print( unpack({\"a\", \"b\", \"c\"}) )","description":"Prints a vararg"}],"isConstructor":false,"name":"unpack","realm":"shared and menu","returns":[{"description":"Output values","type":"any"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current asynchronous in-game time.","examples":[],"isConstructor":false,"name":"UnPredictedCurTime","realm":"shared and menu","returns":[{"description":"The asynchronous in-game time.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"JavaScript to run on the loading panel.","isOptional":false,"isVarArg":false,"name":"javascript","type":"string"}],"description":"Runs JavaScript on the loading screen panel ({{GlobalFunction|GetLoadPanel}}).","examples":[],"isConstructor":false,"name":"UpdateLoadPanel","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The model name to be checked","isOptional":false,"isVarArg":false,"name":"modelName","type":"string"}],"description":"{{Deprecated|You should use {{GlobalFunction|IsUselessModel}} instead.}}\n\nReturns whether or not a model is useless by checking that the file path is that of a proper model.\n\nIf the string \".mdl\" is not found in the model name, the function will return true.\n\nThe function will also return true if any of the following strings are found in the given model name:\n* \"_gesture\"\n* \"_anim\"\n* \"_gst\"\n* \"_pst\"\n* \"_shd\"\n* \"_ss\"\n* \"_posture\"\n* \"_anm\"\n* \"ghostanim\"\n* \"_paths\"\n* \"_shared\"\n* \"anim_\"\n* \"gestures_\"\n* \"shared_ragdoll_\"","examples":[],"isConstructor":false,"name":"UTIL_IsUselessModel","realm":"shared and menu","returns":[{"description":"Whether or not the model is useless","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to validate.","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"}],"description":"{{Deprecated|You should use {{GlobalFunction|IsValid}} instead}}\n\nReturns if a panel is safe to use.","examples":[],"isConstructor":false,"name":"ValidPanel","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"0","description":"The x component of the vector.<br/>\nIf this is a {{Type|Vector}}, this function will return a copy of the given vector.<br/>\nIf this is a {{Type|string}}, this function will try to parse the string as a vector. If it fails, it returns a 0 vector.\n(See examples)","isOptional":true,"isVarArg":false,"name":"x","type":"number"},{"default":"0","description":"The y component of the vector.","isOptional":true,"isVarArg":false,"name":"y","type":"number"},{"default":"0","description":"The z component of the vector.","isOptional":true,"isVarArg":false,"name":"z","type":"number"}],"description":"Creates a {{Type|Vector}} object.","examples":[{"code":"print( Vector( 1, 2, 3 ) )\nprint( Vector( \"4 5 6\" ) )\nlocal test = Vector( 7, 8, 9 )\nprint( Vector( test ) )\n\nprint( Vector( \"4 5 test\" ) )\nprint( Vector() )","description":"Creates a vector and prints the value to the console."}],"isConstructor":false,"name":"Vector","realm":"shared and menu","returns":[{"description":"The created vector object.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns a random vector whose components are each between -1 and 1","examples":[],"isConstructor":false,"name":"VectorRand","realm":"shared and menu","returns":[{"description":"The random direction vector","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the time in seconds it took to render the VGUI.","examples":[],"isConstructor":false,"name":"VGUIFrameTime","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"X position of the created element","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"Y position of the created element","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"Width of the created element","isOptional":false,"isVarArg":false,"name":"w","type":"number"},{"default":"","description":"Height of the created element","isOptional":false,"isVarArg":false,"name":"h","type":"number"}],"description":"Creates and returns a {{Type|DShape}} rectangle GUI element with the given dimensions.","examples":[],"isConstructor":false,"name":"VGUIRect","realm":"client","returns":[{"description":"{{Type|DShape}} element","type":"DShape"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to display layout details of","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"}],"description":"Briefly displays layout details of the given panel on-screen","examples":[],"isConstructor":false,"name":"VisualizeLayout","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Namespace for the file base","isOptional":false,"isVarArg":false,"name":"namespace","type":"string"},{"default":"","description":"Tags required for a Workshop submission to be interacted with by the filebase","isOptional":false,"isVarArg":false,"name":"requiredTags","type":"table"}],"description":"{{Internal}}Returns a new WorkshopFileBase element","examples":[],"isConstructor":false,"name":"WorkshopFileBase","realm":"client and menu","returns":[{"description":"WorkshopFileBase element","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The position that should be translated from the current to the new system.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"The angles that should be translated from the current to the new system.","isOptional":false,"isVarArg":false,"name":"angle","type":"Angle"},{"default":"","description":"The origin of the system to translate to.","isOptional":false,"isVarArg":false,"name":"newSystemOrigin","type":"Vector"},{"default":"","description":"The angles of the system to translate to.","isOptional":false,"isVarArg":false,"name":"newSystemAngles","type":"Angle"}],"description":"Translates the specified position and angle into the specified coordinate system.","examples":[],"isConstructor":false,"name":"WorldToLocal","realm":"shared","returns":[{"description":"Local position","type":"Vector"},{"description":"Local angles","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The function to call initially.","isOptional":false,"isVarArg":false,"name":"func","type":"Function"},{"default":"","description":"The function to be called if execution of the first fails; the error message is passed as a string.\n\nYou cannot throw an {{GlobalFunction|error}}() from this callback: it will have no effect (not even stopping the callback).","isOptional":false,"isVarArg":false,"name":"errorCallback","type":"Function"},{"default":"","description":"Arguments to pass to the initial function.","isOptional":false,"isVarArg":true,"name":"arguments","type":"any"}],"description":"Attempts to call the first function. If the execution succeeds, this returns ''true'' followed by the returns of the function. If execution fails, this returns ''false'' and the second function is called with the error message. \n\nUnlike in {{GlobalFunction|pcall}}, the stack is not unwound and can therefore be used for stack analyses with the {{Lib|debug}}.\n\n{{Bug|Issue=1976|Using this function with {{GlobalFunction|include}} will break autorefresh.}}\n\n{{Bug|Issue=2498|This does not stop {{GlobalFunction|Error}} and {{GlobalFunction|ErrorNoHalt}} from sending error messages to the server (if called clientside) or calling the {{HookFunction|GM|OnLuaError}} hook. The success boolean returned will always return true and thus you will not get the error message returned. {{GlobalFunction|error}} does not exhibit these behaviours.}}\n\n{{Bug|Issue=3112|This does not stop errors incurred by {{GlobalFunction|include}}.}}","examples":[{"code":"local function test()\n\taisj()\nend\n\nlocal function catch( err )\n\tprint( \"ERROR: \", err )\nend\n\nprint( \"Output: \", xpcall( test, catch ) )","description":"Using xpcall to catch an error."}],"isConstructor":false,"name":"xpcall","realm":"shared and menu","returns":[{"description":"Status of the execution; ''true'' for success, ''false'' for failure.","type":"boolean"},{"description":"The returns of the first function if execution succeeded, otherwise the '''first''' return value of the error callback.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to display on the first button.","isOptional":false,"isVarArg":false,"name":"btn1text","type":"string"}],"description":"Shows a message box in the middle of the screen, with up to 4 buttons they can press.","examples":[],"isConstructor":false,"name":"Derma_Query","realm":"client and menu","returns":[{"description":"The Panel object of the created window.","type":"Panel"}]}],"isHook":false,"isPureAbstract":false,"name":"Global"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal|Used by {{Type|DListView_Line}}.}}","examples":[],"extends":"DLabel","functions":[],"isHook":false,"isPureAbstract":true,"name":"DListViewLabel"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"Similar purpose to the {{Lib|game}} and {{Lib|engine}}, allows access to various features of the game's engine.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Returns {{GlobalVar|GAMEMODE}}.","examples":[],"isConstructor":false,"name":"GetGamemode","realm":"shared","returns":[{"description":"GAMEMODE","type":"table"}]}],"isHook":false,"isPureAbstract":false,"name":"gmod"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal|Alias of {{Type|DListView_Line}}.}}","examples":[],"extends":"Panel","functions":[],"isHook":false,"isPureAbstract":true,"name":"DListViewLine"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The gmsave library provides functions relating to the singleplayer save system in Garry's Mod.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The JSON encoded string containing all the map data.","isOptional":false,"isVarArg":false,"name":"mapData","type":"string"},{"default":"","description":"The player to load positions for","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Loads a saved map.","examples":[],"isConstructor":false,"name":"LoadMap","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player to \"load\" values for","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"A table containing Origin and Angle keys for position and angles to set.","isOptional":false,"isVarArg":false,"name":"data","type":"table"}],"description":"Sets player position and angles from supplied table","examples":[],"isConstructor":false,"name":"PlayerLoad","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player to \"save\"","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Returns a table containing player position and angles. Used by {{LibraryFunction|gmsave|SaveMap}}.","examples":[],"isConstructor":false,"name":"PlayerSave","realm":"server","returns":[{"description":"A table containing player position ( Origin ) and angles ( Angle )","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player, whose position should be saved for loading the save","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Saves the map","examples":[],"isConstructor":false,"name":"SaveMap","realm":"server","returns":[{"description":"The encoded to JSON string containing save data","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"A table containing classname key with entities classname.","isOptional":false,"isVarArg":false,"name":"t","type":"table"}],"description":"Returns if we should save this entity in a duplication or a map save or not.","examples":[],"isConstructor":false,"name":"ShouldSaveEntity","realm":"server","returns":[{"description":"Should save entity or not","type":"boolean"}]}],"isHook":false,"isPureAbstract":false,"name":"gmsave"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The gui library is similar to the {{Lib|input}} but features functions that are more focused on the mouse's interaction with GUI panels.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Opens the game menu overlay.","examples":[],"isConstructor":false,"name":"ActivateGameUI","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the cursor should be enabled or not. (true = enable, false = disable)","isOptional":false,"isVarArg":false,"name":"enabled","type":"boolean"}],"description":"Enables the mouse cursor without restricting player movement, like using Sandbox's context menu.\n\n{{Bug|Issue=982|Some {{Type|CUserCmd}} functions to return incorrect values will return incorrect values when this function is active}}.","examples":[],"isConstructor":false,"name":"EnableScreenClicker","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Hides the game menu overlay.","examples":[],"isConstructor":false,"name":"HideGameUI","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The movement delta on the x axis.","isOptional":false,"isVarArg":false,"name":"deltaX","type":"number"},{"default":"","description":"The movement delta on the y axis.","isOptional":false,"isVarArg":false,"name":"deltaY","type":"number"}],"description":"Simulates a mouse move with the given deltas.","examples":[],"isConstructor":false,"name":"InternalCursorMoved","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key, see {{Enum|KEY}}.","isOptional":false,"isVarArg":false,"name":"key","type":"KEY"}],"description":"Simulates a key press for the given key.","examples":[],"isConstructor":false,"name":"InternalKeyCodePressed","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key, see {{Enum|KEY}}.","isOptional":false,"isVarArg":false,"name":"key","type":"KEY"}],"description":"Simulates a key release for the given key.","examples":[],"isConstructor":false,"name":"InternalKeyCodeReleased","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key, see {{Enum|KEY}}.","isOptional":false,"isVarArg":false,"name":"key","type":"KEY"}],"description":"Simulates a key type typing to the specified key.","examples":[],"isConstructor":false,"name":"InternalKeyCodeTyped","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"ASCII code of symbol, see http://www.mikroe.com/img/publication/spa/pic-books/programming-in-basic/chapter/04/fig4-24.gif","isOptional":false,"isVarArg":false,"name":"code","type":"number"}],"description":"Simulates an ASCII symbol writing.\nUse to write text in the chat or in VGUI.\nDoesn't work while the main menu is open!","examples":[{"code":"hook.Add(\"Think\",\"Example\",function()\n\tgui.InternalKeyTyped(72)\n\tgui.InternalKeyTyped(101)\n\tgui.InternalKeyTyped(108)\n\tgui.InternalKeyTyped(108)\n\tgui.InternalKeyTyped(111)\nend)","description":"Writes \"Hello\" every think."}],"isConstructor":false,"name":"InternalKeyTyped","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key, see {{Enum|MOUSE}}.","isOptional":false,"isVarArg":false,"name":"key","type":"MOUSE"}],"description":"Simulates a double mouse key press for the given mouse key.","examples":[],"isConstructor":false,"name":"InternalMouseDoublePressed","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key, see {{Enum|MOUSE}}.","isOptional":false,"isVarArg":false,"name":"key","type":"MOUSE"}],"description":"Simulates a mouse key press for the given mouse key.","examples":[],"isConstructor":false,"name":"InternalMousePressed","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key, see {{Enum|MOUSE}}.","isOptional":false,"isVarArg":false,"name":"key","type":"MOUSE"}],"description":"Simulates a mouse key release for the given mouse key.","examples":[],"isConstructor":false,"name":"InternalMouseReleased","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The amount of scrolling to simulate.","isOptional":false,"isVarArg":false,"name":"delta","type":"number"}],"description":"Simulates a mouse wheel scroll with the given delta.","examples":[],"isConstructor":false,"name":"InternalMouseWheeled","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns whether the console is visible or not.","examples":[],"isConstructor":false,"name":"IsConsoleVisible","realm":"client and menu","returns":[{"description":"Whether the console is visible or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the game menu overlay ( main menu ) is open or not.","examples":[],"isConstructor":false,"name":"IsGameUIVisible","realm":"client and menu","returns":[{"description":"Whenever the game menu overlay ( main menu ) is open or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the cursor's position on the screen","examples":[],"isConstructor":false,"name":"MousePos","realm":"client and menu","returns":[{"description":"mouseX","type":"number"},{"description":"mouseY","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns x component of the mouse position.","examples":[],"isConstructor":false,"name":"MouseX","realm":"client and menu","returns":[{"description":"mouseX","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns y component of the mouse position.","examples":[],"isConstructor":false,"name":"MouseY","realm":"client and menu","returns":[{"description":"mouseY","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"URL to open","isOptional":false,"isVarArg":false,"name":"url","type":"string"}],"description":"Opens specified URL in the steam overlay browser. The URL has to start with either http:// or https://\n\n{{Note|User will be asked for confirmation before the website will open.}}\n{{Bug|Issue=3383|You can't click the confirmation if a modal panel has focus.}}","examples":[{"code":"local button = vgui.Create( \"DButton\" )\nbutton:SetSize( 125, 90 )\nbutton:Center() \nbutton:SetText( \"Join our Steam Group!\" )\nbutton.DoClick = function()\n    gui.OpenURL( \"http://steamcommunity.com/groups/glua\" )\nend","description":"Opens a page when a button is clicked."}],"isConstructor":false,"name":"OpenURL","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"X coordinate on the screen.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"Y coordinate on the screen.","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"Converts the specified screen position to a '''direction''' vector local to the player's view. A related function is {{ClassFunction|Vector|ToScreen}}, which translates a 3D position to a screen coordinate.\n\n{{LibraryFunction|util|AimVector}} is a more generic version of this, using a custom view instead of the player's current view.","examples":[{"code":"local tr = util.QuickTrace(LocalPlayer():GetShootPos(), gui.ScreenToVector(gui.MousePos()),LocalPlayer())\nprint(tr.HitPos)","description":"This will do a trace from the mouse position to the world"},{"code":"print(gui.ScreenToVector(ScrW()/2, ScrH()/2))","description":"Replacement for {{ClassFunction|Player|GetAimVector}}"}],"isConstructor":false,"name":"ScreenToVector","realm":"client","returns":[{"description":"Direction","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The X coordinate to move the cursor to.","isOptional":false,"isVarArg":false,"name":"mouseX","type":"number"},{"default":"","description":"The Y coordinate to move the cursor to.","isOptional":false,"isVarArg":false,"name":"mouseY","type":"number"}],"description":"{{Deprecated|Use {{LibraryFunction|input|SetCursorPos}} instead.}}\nSets the cursor's position on the screen, relative to the topleft corner of the window","examples":[],"isConstructor":false,"name":"SetMousePos","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Shows console in the game UI.","examples":[{"code":"function PANEL:Init()\n\n\tself:Dock( FILL )\n\tself:SetKeyboardInputEnabled( true )\n\tself:SetMouseInputEnabled( true )\n\n\tself.HTML = vgui.Create( \"DHTML\", self )\n\n\tJS_Language( self.HTML )\n\tJS_Utility( self.HTML )\n\tJS_Workshop( self.HTML )\n\n\tself.HTML:Dock( FILL )\n\tself.HTML:OpenURL( \"asset://garrysmod/html/menu.html\" )\n\tself.HTML:SetKeyboardInputEnabled( true )\n\tself.HTML:SetMouseInputEnabled( true )\n\tself.HTML:SetAllowLua( true )\n\tself.HTML:RequestFocus()\n\n\tws_save.HTML = self.HTML\n\taddon.HTML = self.HTML\n\tdemo.HTML = self.HTML\n\n\tself:MakePopup()\n\tself:SetPopupStayAtBack( true )\n\t\n\t-- If the console is already open, we've got in its way.\n\tif ( gui.IsConsoleVisible() ) then\n\t\tgui.ShowConsole()\n\tend\n\nend","description":"Example from ''garrysmod\\lua\\menu\\mainmenu.lua'' that initializes the game UI and shows console if activated."}],"isConstructor":false,"name":"ShowConsole","realm":"menu","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"gui"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A simple menu with sub menu, icon and convar support.","examples":[{"code":"local Menu = DermaMenu()\n\n-- Add a simple option.\nMenu:AddOption( \"Simple option\" )\n\n-- Simple option, but we're going to add an icon\nlocal btnWithIcon = Menu:AddOption( \"Option with icon\" )\nbtnWithIcon:SetIcon( \"icon16/bug.png\" )\t-- Icons are in materials/icon16 folder\n\n-- Adds a simple line spacer\nMenu:AddSpacer()\n\n-- Add a submenu\nlocal SubMenu = Menu:AddSubMenu( \"A Sub Menu\" )\nSubMenu:AddOption( \"Sub Option #1\" ):SetIcon( \"icon16/group.png\" )\n\n-- Open the menu\nMenu:Open()","description":"Creates a DMenu with a submenu."}],"extends":"DScrollPanel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The text of the button","isOptional":false,"isVarArg":false,"name":"strText","type":"string"},{"default":"","description":"The console variable to change","isOptional":false,"isVarArg":false,"name":"convar","type":"string"},{"default":"","description":"The value of the console variable to set when the option is checked","isOptional":false,"isVarArg":false,"name":"on","type":"string"},{"default":"","description":"The value of the console variable to set when the option is unchecked","isOptional":false,"isVarArg":false,"name":"off","type":"string"},{"default":"nil","description":"If set, the function will be called every time the option is pressed/clicked/selected.\n\nIt will have only one argument:\n{{FuncArg|Panel|pnl|The created {{Type|DMenuOptionCVar}}.}}","isOptional":true,"isVarArg":false,"name":"funcFunction","type":"DMenuOptionCVar"}],"description":"Creates a {{Type|DMenuOptionCVar}} and adds it as an option into the menu. Checking and unchecking the option will alter the given console variable's value.","examples":[],"isConstructor":false,"name":"AddCVar","realm":"client","returns":[{"description":"The created {{Type|DMenuOptionCVar}}","type":"DMenuOptionCVar"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the option.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"nil","description":"Function to execute when this option is clicked.","isOptional":true,"isVarArg":false,"name":"func","type":"Function"}],"description":"Add an option to the DMenu","examples":[{"code":"local m = DermaMenu()\n\nm:AddOption( \"Suicide\", function() RunConsoleCommand(\"kill\") end )\nm:AddOption( \"It does nothing\" )\n\nm:Open()","description":"Creates a DMenu with 2 options: One that kills yourself; One that does nothing."}],"isConstructor":false,"name":"AddOption","realm":"client","returns":[{"description":"Returns the created {{Type|DMenuOption}} panel.","type":"DMenuOption"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel that you want to add.","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"Adds a panel to the {{Type|DMenu}} as if it were an option.\n\nThis invokes {{ClassFunction|DScrollPanel|AddItem}} and will not create a new panel if a class name is passed, unlike {{ClassFunction|Panel|Add}}.","examples":[{"code":"local m = DermaMenu()\n\nm:AddOption( \"Kill yourself\", function() RunConsoleCommand( \"kill\" ) end ) -- Add first option\nm:AddSpacer()\n\n-- Create a red DPanel\nlocal panel = vgui.Create( \"DPanel\", m )\npanel:SetSize( 50, 100 )\npanel:SetBackgroundColor( Color( 255, 0, 0 ) )\n\nm:AddPanel( panel ) -- Add the panel\n\nm:AddSpacer()\nm:AddOption( \"Say hi\", function() RunConsoleCommand( \"say\", \"Hi!\" ) end ) -- Add second option\n\nm:Open() -- Show our menu","description":"Creates a DMenu with some options and places a red DPanel between them."}],"isConstructor":false,"name":"AddPanel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Adds a horizontal line spacer.","examples":[{"code":"local m = DermaMenu()\n\nm:AddOption( \"Kill yourself\", function() RunConsoleCommand( \"kill\" ) end ) -- Add first option\nm:AddOption( \"Disconnect\", function() RunConsoleCommand( \"disconnect\" ) end ) -- Add second option\n\nm:AddSpacer() -- Add a spacer\n\nm:AddOption( \"Say hi\", function() RunConsoleCommand( \"say\", \"Hi!\" ) end ) -- Add third option\n\nm:Open() -- Show our menu","description":"Creates a DMenu with 3 options and adds a spacer before the third."}],"isConstructor":false,"name":"AddSpacer","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the sub menu.","isOptional":false,"isVarArg":false,"name":"Name","type":"string"},{"default":"nil","description":"Function to execute when this sub menu is clicked.","isOptional":true,"isVarArg":false,"name":"func","type":"Function"}],"description":"Add a sub menu to the DMenu","examples":[{"code":"local parentMenu = DermaMenu()\n\nlocal subMenu, parentMenuOption = parentMenu:AddSubMenu(\"Do you want to die?\")\nparentMenuOption:SetIcon(\"icon16/user_red.png\")\n\nlocal yesOption = subMenu:AddOption(\"Yes\", function() LocalPlayer():ConCommand(\"kill\") end)\nyesOption:SetIcon(\"icon16/accept.png\")\n\nlocal noOption = subMenu:AddOption(\"No\", function() print(\"You chose to live another day\") end)\nnoOption:SetIcon(\"icon16/cross.png\")\n\nparentMenu:Open()","description":"Creates a menu with one option \"Do you want to die?\", which has two sub-options \"Yes\" and \"No\"."}],"isConstructor":false,"name":"AddSubMenu","realm":"client","returns":[{"description":"The created sub {{Type|DMenu}}","type":"DMenu"},{"description":"The created {{Type|DMenuOption}}","type":"DMenuOption"}]},{"accessModifier":"public","arguments":[],"description":"Returns the number of child elements of {{Type|DMenu}}'s {{ClassFunction|DScrollPanel|GetCanvas}}.","examples":[],"isConstructor":false,"name":"ChildCount","realm":"client","returns":[{"description":"The number of child elements","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nClears all highlights made by {{ClassFunction|DMenu|HighlightItem}}.\n\nDoesn't appear to be used or do anything.","examples":[],"isConstructor":false,"name":"ClearHighlights","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The menu to close","isOptional":false,"isVarArg":false,"name":"menu","type":"Panel"}],"description":"{{Internal}}\n\nUsed internally by {{ClassFunction|DMenu|OpenSubMenu}}.","examples":[],"isConstructor":false,"name":"CloseSubMenu","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The index of the child to get.\n\n{{Note|Unlike {{ClassFunction|Panel|GetChild}}, this index starts at 1.}}","isOptional":false,"isVarArg":false,"name":"childIndex","type":"number"}],"description":"Gets a child by its index.","examples":[],"isConstructor":false,"name":"GetChild","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nUnused. Set by {{ClassFunction|DMenu|SetDeleteSelf}}","examples":[],"isConstructor":false,"name":"GetDeleteSelf","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nReturns the value set by {{ClassFunction|DMenu|SetDrawBorder}}.","examples":[],"isConstructor":false,"name":"GetDrawBorder","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the {{Type|DMenu}} should draw the icon column with a different color or not.\n\nSee {{ClassFunction|DMenu|SetDrawColumn}}","examples":[],"isConstructor":false,"name":"GetDrawColumn","realm":"client","returns":[{"description":"Whether to draw the column or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the maximum height of the {{Type|DMenu}}.","examples":[],"isConstructor":false,"name":"GetMaxHeight","realm":"client","returns":[{"description":"The maximum height in pixels","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the minimum width of the {{Type|DMenu}} in pixels","examples":[],"isConstructor":false,"name":"GetMinimumWidth","realm":"client","returns":[{"description":"the minimum width of the {{Type|DMenu}}","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nReturns the currently opened submenu.\n\nUsed internally to store the open submenu by {{ClassFunction|DMenu|Hide}}, {{ClassFunction|DMenu|OpenSubMenu}}.","examples":[],"isConstructor":false,"name":"GetOpenSubMenu","realm":"client","returns":[{"description":"The currently opened submenu, if any.","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Used to safely hide (not remove) the menu. This will also hide any opened submenues recursively.","examples":[],"isConstructor":false,"name":"Hide","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The item to highlight.","isOptional":false,"isVarArg":false,"name":"item","type":"Panel"}],"description":"{{Deprecated}}\n\nHighlights selected item in the {{Type|DMenu}} by setting the item's key \"Highlight\" to true.\n\nDoesn't appear to be working or used.","examples":[],"isConstructor":false,"name":"HighlightItem","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"gui.MouseX()","description":"Position (X coordinate) to open the menu at.","isOptional":true,"isVarArg":false,"name":"x","type":"number"},{"default":"gui.MouseY()","description":"Position (Y coordinate) to open the menu at.","isOptional":true,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"This argument does nothing.","isOptional":true,"isVarArg":false,"name":"skipanimation","type":"any"},{"default":"","description":"","isOptional":true,"isVarArg":false,"name":"ownerpanel","type":"Panel"}],"description":"Opens the DMenu at the current mouse position","examples":[],"isConstructor":false,"name":"Open","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|DMenuOption}} to open the submenu at","isOptional":false,"isVarArg":false,"name":"item","type":"DMenuOption"},{"default":"nil","description":"The submenu to open. If set to nil, the function just closes existing submenus.","isOptional":true,"isVarArg":false,"name":"menu","type":"Panel"}],"description":"Closes any active sub menus, and opens a new one.","examples":[],"isConstructor":false,"name":"OpenSubMenu","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|DMenuOption}} that was selected","isOptional":false,"isVarArg":false,"name":"option","type":"DMenuOption"},{"default":"","description":"The options text","isOptional":false,"isVarArg":false,"name":"optionText","type":"string"}],"description":"Called when a option has been selected","examples":[],"isConstructor":false,"name":"OptionSelected","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|DMenuOption}} that called this function","isOptional":false,"isVarArg":false,"name":"option","type":"DMenuOption"}],"description":"{{Internal}}\n\nCalled by {{Type|DMenuOption}}. Calls {{ClassFunction|DMenu|OptionSelected}}.","examples":[],"isConstructor":false,"name":"OptionSelectedInternal","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"newState","type":"boolean"}],"description":"{{Deprecated}}\n\nUnused. Set to true by default.","examples":[],"isConstructor":false,"name":"SetDeleteSelf","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"arg0","type":"boolean"}],"description":"{{Deprecated}}\n\nDoes nothing.","examples":[],"isConstructor":false,"name":"SetDrawBorder","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to draw the column or not","isOptional":false,"isVarArg":false,"name":"draw","type":"boolean"}],"description":"Sets whether the {{Type|DMenu}} should draw the icon column with a different color.","examples":[],"isConstructor":false,"name":"SetDrawColumn","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The maximum height of the {{Type|DMenu}} to set, in pixels","isOptional":false,"isVarArg":false,"name":"maxHeight","type":"number"}],"description":"Sets the maximum height the {{Type|DMenu}} can have. If the height of all menu items exceed this value, a scroll bar will be automatically added.","examples":[],"isConstructor":false,"name":"SetMaxHeight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum width of the {{Type|DMenu}} in pixels","isOptional":false,"isVarArg":false,"name":"minWidth","type":"number"}],"description":"Sets the minimum width of the {{Type|DMenu}}. The menu will be stretched to match the given value.","examples":[],"isConstructor":false,"name":"SetMinimumWidth","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The menu to store","isOptional":false,"isVarArg":false,"name":"item","type":"Panel"}],"description":"{{Internal}}\n\nUsed internally to store the open submenu by {{ClassFunction|DMenu|Hide}}, {{ClassFunction|DMenu|OpenSubMenu}}, {{ClassFunction|DMenu|CloseSubMenu}}","examples":[],"isConstructor":false,"name":"SetOpenSubMenu","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"This argument does nothing.","isOptional":false,"isVarArg":false,"name":"skipanimation","type":"any"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"ownerpanel","type":"Panel"}],"description":"Opens the DMenu at the current mouse position","examples":[],"isConstructor":false,"name":"Open","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of children of the of panel.","examples":[],"isConstructor":false,"name":"ChildCount","realm":"client","returns":[{"description":"childCount","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The index of the child to get.\n\n{{Note|This index starts at 0, except when you use this on a {{Type|DMenu}}.}}","isOptional":false,"isVarArg":false,"name":"childIndex","type":"number"}],"description":"Gets a child by its index.","examples":[],"isConstructor":false,"name":"GetChild","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Makes a panel invisible.","examples":[],"isConstructor":false,"name":"Hide","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DMenu"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"GWEN is a system that allows you to load a spritesheet and generate a skin out of it.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The X coordinate on the texture","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The Y coordinate on the texture","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"Width of the area on texture","isOptional":false,"isVarArg":false,"name":"w","type":"number"},{"default":"","description":"Height of the area on texture","isOptional":false,"isVarArg":false,"name":"h","type":"number"},{"default":"","description":"Left width of border","isOptional":false,"isVarArg":false,"name":"left","type":"number"},{"default":"","description":"Top width of border","isOptional":false,"isVarArg":false,"name":"top","type":"number"},{"default":"","description":"Right width of border","isOptional":false,"isVarArg":false,"name":"right","type":"number"},{"default":"","description":"Bottom width of border","isOptional":false,"isVarArg":false,"name":"bottom","type":"number"},{"default":"nil","description":"Texture of source image to create a bordered rectangle from. Uses SKIN.GwenTexture if not set.","isOptional":true,"isVarArg":false,"name":"source","type":"IMaterial"}],"description":"Used in derma skins to create a bordered rectangle drawing function from an image. The texture is taken either from last argument or from SKIN.GwenTexture","examples":[{"code":"local paintBox = GWEN.CreateTextureBorder( 384, 32, 31, 31, 4, 4, 4, 4 )\nhook.Add( \"HUDPaint\", \"PaintStuff\", function()\n    paintBox( 0, 0, 100, 100 )\nend )","description":"Draws a bordered box in the top left corner of the screen using current skins texture."}],"isConstructor":false,"name":"CreateTextureBorder","realm":"client and menu","returns":[{"description":"The drawing function. Arguments are:\n*{{FuncArg|number|x|X coordinate for the box}}\n*{{FuncArg|number|y|Y coordinate for the box}}\n*{{FuncArg|number|w|Width of the box}}\n*{{FuncArg|number|h|Height of the box}}\n*{{FuncArg|table|clr|Optional color, default is white. Uses the {{Struct|Color}}}}","type":"Function"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The X coordinate on the texture","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The Y coordinate on the texture","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"Width of the area on texture","isOptional":false,"isVarArg":false,"name":"w","type":"number"},{"default":"","description":"Height of the area on texture","isOptional":false,"isVarArg":false,"name":"h","type":"number"}],"description":"Used in derma skins to create a rectangle drawing function from an image. The rectangle will not be scaled, but instead it will be drawn in the center of the box. The texture is taken from SKIN.GwenTexture","examples":[{"code":"local paintBox = GWEN.CreateTextureCentered( 384, 32, 32, 32 )\nhook.Add( \"HUDPaint\", \"PaintStuff\", function()\n    paintBox( 0, 0, 100, 100 )\nend )","description":"Draws a box in the top left corner of the screen using current skins texture."}],"isConstructor":false,"name":"CreateTextureCentered","realm":"client and menu","returns":[{"description":"The drawing function. Arguments are:\n{{FuncArg|number|x|X coordinate for the box}}<br/>\n{{FuncArg|number|y|Y coordinate for the box}}<br/>\n{{FuncArg|number|w|Width of the box}}<br/>\n{{FuncArg|number|h|Height of the box}}<br/>\n{{FuncArg|table|clr|Optional color, default is white. Uses the {{Struct|Color}}}}<br/>\n<br/>","type":"Function"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The X coordinate on the texture","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The Y coordinate on the texture","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"Width of the area on texture","isOptional":false,"isVarArg":false,"name":"w","type":"number"},{"default":"","description":"Height of the area on texture","isOptional":false,"isVarArg":false,"name":"h","type":"number"}],"description":"Used in derma skins to create a rectangle drawing function from an image. The texture of the rectangle will be scaled. The texture is taken from SKIN.GwenTexture","examples":[{"code":"local paintBox = GWEN.CreateTextureNormal( 448, 32, 15, 15 )\nhook.Add( \"HUDPaint\", \"PaintStuff\", function()\n    paintBox( 0, 0, 100, 100 )\nend )","description":"Draws a huge checked checkbox in the top left corner of the screen using current skins texture."}],"isConstructor":false,"name":"CreateTextureNormal","realm":"client and menu","returns":[{"description":"The drawing function. Arguments are:\n*{{FuncArg|number|x|X coordinate for the box}}\n*{{FuncArg|number|y|Y coordinate for the box}}\n*{{FuncArg|number|w|Width of the box}}\n*{{FuncArg|number|h|Height of the box}}\n*{{FuncArg|table|clr|Optional color, default is white. Uses the {{Struct|Color}}}}","type":"Function"}]},{"accessModifier":"public","arguments":[{"default":"","description":"X position of the pixel to get the color from.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"Y position of the pixel to get the color from.","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"When used in a material skin, it returns a color value from a point in the skin image.","examples":[],"isConstructor":false,"name":"TextureColor","realm":"client and menu","returns":[{"description":"The color of the point on the skin as a {{Struct|Color}}.","type":"Color"}]}],"isHook":false,"isPureAbstract":false,"name":"GWEN"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The halo library is used to draw glowing outlines around entities, an example of this can be seen by picking up props with the physgun in Garry's Mod 13.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"A table of entities to add the halo effect to","isOptional":false,"isVarArg":false,"name":"entities","type":"table"},{"default":"","description":"The desired color of the halo. See {{Struct|Color}}","isOptional":false,"isVarArg":false,"name":"color","type":"Color"},{"default":"2","description":"The strength of the halo's blur on the x axis.","isOptional":true,"isVarArg":false,"name":"blurX","type":"number"},{"default":"2","description":"The strength of the halo's blur on the y axis.","isOptional":true,"isVarArg":false,"name":"blurY","type":"number"},{"default":"1","description":"The number of times the halo should be drawn per frame. Increasing this may hinder player FPS.","isOptional":true,"isVarArg":false,"name":"passes","type":"number"},{"default":"true","description":"Sets the render mode of the halo to additive.","isOptional":true,"isVarArg":false,"name":"additive","type":"boolean"},{"default":"false","description":"Renders the halo through anything when set to true.","isOptional":true,"isVarArg":false,"name":"ignoreZ","type":"boolean"}],"description":"Applies a \"halo\" glow effect to one or multiple entities.\n{{Warning|Using this function outside of the PreDrawHalos hook can cause instability or crashes.}}","examples":[{"code":"hook.Add( \"PreDrawHalos\", \"AddPropHalos\", function()\n\thalo.Add( ents.FindByClass( \"prop_physics*\" ), Color( 255, 0, 0 ), 5, 5, 2 )\nend )","description":"Adds a halo around all props in the map using an O(n) operation and iterating through unseen objects which can be extremely expensive to process."},{"code":"hook.Add( \"PreDrawHalos\", \"AddStaffHalos\", function()\n\tlocal staff = {}\n\tlocal staffcount = 0\n\n\tfor _, ply in ipairs( player.GetAll() ) do\n\t\tif ( ply:IsAdmin() ) then\n\t\t\tstaffcount = staffcount + 1\n\t\t\tstaff[ staffcount ] = ply\n\t\tend\n\tend\n\n\tif ( staffcount > 0 ) then\n\t\thalo.Add( staff, Color( 0, 255, 0 ), 0, 0, 2, true, true )\n\tend\nend )","description":"Adds a green halo around all admins."}],"isConstructor":false,"name":"Add","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Table with info about the halo to draw.","isOptional":false,"isVarArg":false,"name":"entry","type":"table"}],"description":"{{Internal}}Renders a halo according to the specified table, only used internally, called from a PostDrawEffects hook added by the halo library","examples":[],"isConstructor":false,"name":"Render","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the entity the halo library is currently rendering the halo for.\n\nThe main purpose of this function is to be used in {{HookFunction|ENTITY|Draw}} in order not to draw certain parts of the entity when the halo is being rendered, so there's no halo around unwanted entity parts, such as lasers, 3D2D displays, etc.","examples":[],"isConstructor":false,"name":"RenderedEntity","realm":"client","returns":[{"description":"If set, the currently rendered entity by the halo library.","type":"Entity"}]}],"isHook":false,"isPureAbstract":false,"name":"halo"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The hammer library.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Command to send including arguments\n\nAll commands are in the format \"command var1 var2 etc\"<br><br>\nAll commands that pick an entity with x y z , must use the exact position including decimals. i.e. -354.4523 123.4 -1224.325452 <br><br>\n\n<h2>List of commands</h2>\n<b>\"session_begin mapName mapVersion\"</b> - Starts a hammer edit, locking the editor. mapName is the current map without path or suffix, mapVersion is the current version in the .vmf file<br><br>\n<b>\"session_end\"</b> - Ends a hammer edit, unlocking the editor.<br><br>\n<b>\"map_check_version mapName mapVersion\"</b> - This only works after session_begin, so you'd know the right version already and this only returns ok, this function is apparently useless<br><br>\n<b>\"entity_create entityClass x y z\"</b> - Creates an entity of entityClass at position x y z <br><br>\n<b>\"entity_delete entityClass x y z\"</b> - Deletes an entity of entityClass at position x y z <br><br>\n<b>\"entity_set_keyvalue entityClass x y z \"key\" \"value\"\"</b> - Set's the KeyValue pair of an entity of entityClass at x y z. The Key name and Value String must be in quotes.<br><br>\n<b>\"entity_rotate_incremental entityClass x y z incX incY incZ\"</b> - Rotates an entity of entityClass at x y z by incX incY incZ<br><br>\n<b>\"node_create nodeClass nodeID x y z\"</b> - Creates an AI node of nodeClass with nodeID at x y z you should keep nodeID unique or you will have issues<br><br>\n<b>\"node_delete nodeID\"</b> - Deletes node(s) with nodeID, this will delete multiple nodes if they have the same nodeID<br><br>\n<b>\"nodelink_create startNodeID endNodeID\"</b> - Creates a link between AI nodes startNodeID and endNodeID<br><br>\n<b>\"nodelink_delete startNodeID endNodeID\"</b> - Removes a link between AI nodes startNodeID and endNodeID<br><br>","isOptional":false,"isVarArg":false,"name":"cmd","type":"string"}],"description":"Sends command to Hammer, if Hammer is running with the current map loaded.","examples":[{"code":"if ( !SERVER) then return end\n-- Hammer Editor Lua Library\n-- By Malcolm Greene Jr (Fantym420)\n \n-- Allows easy access to the hammer editor commands from lua code\n-- All commands return ok if they worked and badcommand if they don't\n-- All changes only show up in hammer, so if you want to see stuff in game you must\n-- write your own ghost entites and such.\n\nhammerLib = {}\nhammerLib.mapName = game.GetMap() -- Get the map name\nhammerLib.vBSPMapVer = game.GetMapVersion() -- This is the vbsp map version, we need the vmf map version\nhammerLib.mapVer = hammerLib.vBSPMapVer -- place holder value findGoodVer will find the current vmf version via trial and error\n\n-- returns a vector string with spaces the way hammer likes it\nfunction hammerLib.vectorToString(vec)\n\n\treturn tostring(vec.x) .. \" \" .. tostring(vec.y) .. \" \" .. tostring(vec.z)\n\nend\n\n-- tries to start a session using the current version, if it fails it tries the next\n-- if it can't find it in 20 tries you should probably compile your map before edititng more\nfunction hammerLib.findGoodVer()\n\t\n\tlocal verInc = 0\n\tlocal result = \"\"\n\t\n\tfor verInc = 0, 20 do \n\t\n\t\thammerLib.mapVer = hammerLib.vBSPMapVer + verInc\n\t\t\n\t\tresult = hammerLib.startSession()\n\t\t\n\t\tif result == \"ok\" then\n\t\t\tbreak\n\t\tend\n\t\t\n\t\tif verInc == 20 then\n\t\t\tprint(\"Good Version Not Found, Please Re-Compile your map!!!\")\n\t\tend\n\tend\n\t\n\thammerLib.endSession()\n\t\nend\n\n-- simple wrapper for hammer.SendCommand so that I could print the debug info\n-- un-comment the prints to see the command strings and results in console\nfunction hammerLib.runCommand(cmd)\n\t\n\tlocal result = \"\"\n\t--print(\"running \" .. cmd)\n\tresult = hammer.SendCommand(cmd)\n\t--print(cmd .. \" result: \" .. result)\n\treturn result\n\t\n\nend\n\n-- Always ran when starting an edit\n-- This locks hammer until you issue the session_end command\nfunction hammerLib.startSession()\n\t\n\tlocal cmd = \"session_begin \" .. hammerLib.mapName .. \" \" .. hammerLib.mapVer\n\t\n\treturn hammerLib.runCommand(cmd)\n\t\nend\n\n-- Ends the session unlocking hammer\nfunction hammerLib.endSession()\n\t\n\tlocal cmd = \"session_end\"\n\n\treturn hammer.SendCommand(cmd)\n\t\nend\n\n-- useless function, it will return ok if you give it a good name and version\n-- however to run it you must already have a good version because you ran session_start\n-- implemented here for thoroughness, if you give it no variables it will just use the stored info.\nfunction hammerLib.mapCheckVersion(mcName, mcVer)\n\t\n\tmcName = mcName or hammerLib.mapName\n\tmcVer = mcVer or hammerLib.mapVer\n\tlocal cmd = \"map_check_version \" .. mcName .. \" \" .. mcVer\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\n\t\nend\n\n-- this creates an entity of type entityClass at the given position\n--  I believe this only works with point entites seeing as there is no tie to brush command\nfunction hammerLib.entityCreate(entityClass, entityPos)\n\t\n\tif (entityClass == nil) or (entityPos == nil) then return end\n\tlocal cmd = \"entity_create \" .. entityClass .. \" \" .. hammerLib.vectorToString(entityPos)\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\n\t\nend\n\n-- this deletes an entity of type entityClass at entityPos\n-- NOTE: must be entities **EXACT** position, decimals and all or it fails\nfunction hammerLib.entityDelete(entityClass, entityPos)\n\t\n\tif (entityClass == nil) or (entityPos == nil) then return end\n\tlocal cmd = \"entity_delete \" .. entityClass .. \" \" .. hammerLib.vectorToString(entityPos)\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\n\t\nend\n\n-- Set's a Key/Value pair on entity of type entityClass at entityPos\n-- NOTE: must be entities **EXACT** position, decimals and all or it fails\nfunction hammerLib.entitySetKeyValue(entityClass, entityPos, key, value)\n\t\n\t\n\tif (entityClass == nil) or \n\t   (entityPos == nil) or\n\t   (key == nil) or\n\t   (value == nil) then return end\n\t   \n\tlocal cmd = \"entity_set_keyvalue \" .. entityClass .. \" \" .. hammerLib.vectorToString(entityPos) .. \" \\\"\" .. key .. \"\\\" \\\"\" .. value .. \"\\\"\"\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\n\t\nend\n-- this will rotate an entity of type entityClass(string) at entityPos(vector) by rotationInc(vector)\n-- NOTE: must be entities **EXACT** position, decimals and all or it fails\nfunction hammerLib.entityRotateIncremental(entityClass, entityPos, rotationInc)\n\t\n\tif (entityClass == nil) or (entityPos == nil) then return end\n\tlocal cmd = \"entity_rotate_incremental \" .. entityClass .. \" \" .. hammerLib.vectorToString(entityPos) .. \" \" .. hammerLib.vectorToString(rotationInc)\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\n\t\nend\n\n-- This creates a node of type nodeClass with an ID of nodeID at nodePos\n-- keep nodeID unique, if you don't and you use node_delete, it deletes all nodes with the given id\nfunction hammerLib.nodeCreate(nodeClass, nodeID, nodePos)\n\t\n\tif (nodeClass == nil) or (nodeID == nil) or (nodePos == nil) then return end\n\tlocal cmd = \"node_create \" .. nodeClass .. \" \" .. nodeID .. \" \" .. hammerLib.vectorToString(nodePos)\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\n\t\nend\n-- deletes node(s) with the given nodeID, however if there are more than one node with the nodeID all \n-- are deleted\nfunction hammerLib.nodeDelete(nodeID)\n\t\n\tif (nodeID == nil) then return end\n\tlocal cmd = \"node_delete \" .. nodeID\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\nend\n\n-- This creates a link between two nodes, not sure if there's a limit no number of links\n-- so far it does at least 2 per node\nfunction hammerLib.nodeLinkCreate(node1ID, node2ID)\n\t\n\tif (node1ID == nil) or (node2ID == nil) then return end\n\tlocal cmd = \"nodelink_create \" .. node1ID .. \" \" .. node2ID\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\n\t\nend\n\n-- This deletes a connection between two nodes\nfunction hammerLib.nodeLinkDelete(node1ID, node2ID)\n\t\n\tif (node1ID == nil) or (node2ID == nil) then return end\n\tlocal cmd = \"nodelink_delete \" .. node1ID .. \" \" .. node2ID\n\tlocal result = \"\"\n\thammerLib.startSession()\n\tresult = hammerLib.runCommand(cmd)\n\thammerLib.endSession()\n\t\n\treturn result\n\t\nend\n\n-- All loaded, run findGoodVer to store the current vmf version\nhammerLib.findGoodVer()","description":"A hammer function library I wrote while testing all these functions.\n\nPlease feel free to use this library as-is or with modification."}],"isConstructor":false,"name":"SendCommand","realm":"server","returns":[{"description":"Returns \"ok\" if command succeeded otherwise returns \"badcommand\".<br><br>\n\n<b>All changes only happen in hammer, there is *NO* in game representation/feedback</b>","type":"string"}]}],"isHook":false,"isPureAbstract":false,"name":"hammer"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The hook library allows you to add hooks called by the game engine, allowing multiple scripts to modify game function.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"string"},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"The function to be called, arguments given to it depend on the [[:Category:Hooks|hook]].  {{Warning|Returning any value besides nil from the hook's function will stop other hooks of the same event down the loop from being executed. Only return a value when absolutely necessary and when you know what you are doing.<br/>It WILL break other addons.}}","isOptional":false,"isVarArg":false,"name":"func","type":"Function"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to call hooks for","isOptional":false,"isVarArg":false,"name":"eventName","type":"string"},{"default":"","description":"If the gamemode is specified, the gamemode hook within will be called, otherwise not","isOptional":false,"isVarArg":false,"name":"gamemodeTable","type":"table"},{"default":"","description":"The arguments to be passed to the hooks","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Calls all hooks associated with the given event until one returns something other than nil, and then returns that data.\n\nIn almost all cases, you should use {{LibraryFunction|hook|Run}} instead - it calls hook.Call internally but supplies the gamemode table by itself, making your code neater.","examples":[{"code":"function DoSomething()\n    --Does something\n    hook.Call(\"DoneDoingSomething\")\nend\n\nfunction DoSomethingElse()\n    --Does something else, once the hook DoneDoingSomething is called.\n    print(\"Done!\")\nend\nhook.Add( \"DoneDoingSomething\", \"Does something else\", DoSomethingElse )\n\nDoSomething()","description":"Runs function DoSomething, which eventually calls the event \"DoneDoingSomething\", triggering the hooked function DoSomethingElse."},{"code":"function MakeCheese()\n    local shouldMakeCheese = hook.Call(\"MakeCheezPleez\")\n\n    if shouldMakeCheese then\n        print(\"yay\")\n    else\n        print(\"nay\")\n    end\nend\n\nfunction MakeCheeseOrNot()\n    if #player.GetAll() >= 1 then\n        return true\n    else\n        return false\n    end\nend\nhook.Add( \"MakeCheezPleez\", \"Does something else\", MakeCheeseOrNot )\n\nMakeCheese()","description":"You can also make custom functions controllable via hooks."}],"isConstructor":false,"name":"Call","realm":"shared and menu","returns":[{"description":"Return data from called hooks. Limited to 6 return values","type":"any"}]},{"accessModifier":"public","arguments":[],"description":"Returns a list of all the hooks registered with {{LibraryFunction|hook|Add}}.","examples":[{"code":"PrintTable( hook.GetTable() )","description":"Example of output table structure."}],"isConstructor":false,"name":"GetTable","realm":"shared and menu","returns":[{"description":"A table of tables. See below for output example.","type":"table[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The event name.","isOptional":false,"isVarArg":false,"name":"eventName","type":"string"},{"default":"","description":"The unique identifier of the hook to remove, usually a string.","isOptional":false,"isVarArg":false,"name":"identifier","type":"any"}],"description":"Removes the hook with the supplied identifier from the given event.","examples":[{"code":"hook.Add( \"HUDPaint\", \"my_hook_identifier\", function()\n\t\n\tsurface.SetDrawColor( 0, 0, 0, 150 )\n\tsurface.DrawRect( 0, 0, ScrW(), ScrH() )\n\t\nend )\n\ntimer.Simple( 15, function()\n\n\thook.Remove( \"HUDPaint\", \"my_hook_identifier\" )\n\nend )","description":"Darkens the player's screen for 15 seconds."}],"isConstructor":false,"name":"Remove","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to call hooks for","isOptional":false,"isVarArg":false,"name":"eventName","type":"string"},{"default":"","description":"The arguments to be passed to the hooks","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Calls hooks associated with the given event.\n\nCalls all hooks until one returns something other than nil and then returns that data.<br/>\nIf no hook returns any data, it will try to call the GAMEMODE:<eventName> alternative, if one exists.\n\nThis function internally calls {{LibraryFunction|hook|Call}}.\n\nSee also: {{LibraryFunction|gamemode|Call}} - same as this, but does not call hooks if the gamemode hasn't defined the function.","examples":[],"isConstructor":false,"name":"Run","realm":"shared and menu","returns":[{"description":"Returned data from called hooks","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"AcceptInput\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#AcceptInput}","isOptional":false,"isVarArg":false,"name":"func","type":"(ent: Entity, input: string, activator: Entity, caller: Entity, value: any) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"AddDeathNotice\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#AddDeathNotice}","isOptional":false,"isVarArg":false,"name":"func","type":"(attacker: string, attackerTeam: number, inflictor: string, victim: string, victimTeam: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"AdjustMouseSensitivity\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#AdjustMouseSensitivity}","isOptional":false,"isVarArg":false,"name":"func","type":"(defaultSensitivity: number) => void | number"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"AllowPlayerPickup\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#AllowPlayerPickup}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, ent: Entity) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CalcMainActivity\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#CalcMainActivity}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, vel: Vector) => void | ACT"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CalcVehicleView\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#CalcVehicleView}","isOptional":false,"isVarArg":false,"name":"func","type":"(veh: Vehicle, ply: Player, view: CamData) => void | CamData"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CalcView\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#CalcView}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, origin: Vector, angles: Angle, fov: number, znear: number, zfar: number) => void | CamData"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CalcViewModelView\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#CalcViewModelView}","isOptional":false,"isVarArg":false,"name":"func","type":"(wep: Weapon, vm: Entity, oldPos: Vector, oldAng: Angle, pos: Vector, ang: Angle) => void | Vector"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CanEditVariable\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#CanEditVariable}","isOptional":false,"isVarArg":false,"name":"func","type":"(ent: Entity, ply: Player, key: string, val: string, editor: table) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CanExitVehicle\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#CanExitVehicle}","isOptional":false,"isVarArg":false,"name":"func","type":"(veh: Vehicle, ply: Player) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CanPlayerEnterVehicle\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#CanPlayerEnterVehicle}","isOptional":false,"isVarArg":false,"name":"func","type":"(player: Player, vehicle: Vehicle, role: number) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CanPlayerSuicide\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#CanPlayerSuicide}","isOptional":false,"isVarArg":false,"name":"func","type":"(player: Player) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CanPlayerUnfreeze\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#CanPlayerUnfreeze}","isOptional":false,"isVarArg":false,"name":"func","type":"(player: Player, entity: Entity, phys: PhysObj) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CaptureVideo\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#CaptureVideo}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"ChatText\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#ChatText}","isOptional":false,"isVarArg":false,"name":"func","type":"(index: number, name: string, text: string, type: string) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"ChatTextChanged\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#ChatTextChanged}","isOptional":false,"isVarArg":false,"name":"func","type":"(text: string) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CheckPassword\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#CheckPassword}","isOptional":false,"isVarArg":false,"name":"func","type":"(steamID64: string, ipAddress: string, svPassword: string, clPassword: string, name: string) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CloseDermaMenus\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#CloseDermaMenus}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CreateClientsideRagdoll\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#CreateClientsideRagdoll}","isOptional":false,"isVarArg":false,"name":"func","type":"(entity: Entity, ragdoll: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CreateEntityRagdoll\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#CreateEntityRagdoll}","isOptional":false,"isVarArg":false,"name":"func","type":"(owner: Entity, ragdoll: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CreateMove\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#CreateMove}","isOptional":false,"isVarArg":false,"name":"func","type":"(cmd: CUserCmd) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CreateTeams\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#CreateTeams}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"DoAnimationEvent\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#DoAnimationEvent}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, event: PLAYERANIMEVENT, data?: ACT) => void | ACT"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"DoPlayerDeath\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#DoPlayerDeath}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, attacker: Entity, dmg: CTakeDamageInfo) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"DrawDeathNotice\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#DrawDeathNotice}","isOptional":false,"isVarArg":false,"name":"func","type":"(x: number, y: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"DrawMonitors\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#DrawMonitors}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"DrawOverlay\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#DrawOverlay}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"DrawPhysgunBeam\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#DrawPhysgunBeam}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, physgun: Weapon, enabled: boolean, target: Entity, physBone: number, hitPos: PhysObj) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"EndEntityDriving\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#EndEntityDriving}","isOptional":false,"isVarArg":false,"name":"func","type":"(ent: Entity, ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"EntityEmitSound\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#EntityEmitSound}","isOptional":false,"isVarArg":false,"name":"func","type":"(data: EmitSoundInfo) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"EntityFireBullets\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#EntityFireBullets}","isOptional":false,"isVarArg":false,"name":"func","type":"(ent: Entity, data: Bullet) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"EntityKeyValue\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#EntityKeyValue}","isOptional":false,"isVarArg":false,"name":"func","type":"(ent: Entity, key: string, value: string) => void | string"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"EntityNetworkedVarChanged\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#EntityNetworkedVarChanged}","isOptional":false,"isVarArg":false,"name":"func","type":"(ent: Entity, name: string, oldval: any, newval: any) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"EntityRemoved\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#EntityRemoved}","isOptional":false,"isVarArg":false,"name":"func","type":"(ent: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"EntityTakeDamage\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#EntityTakeDamage}","isOptional":false,"isVarArg":false,"name":"func","type":"(target: Entity, dmg: CTakeDamageInfo) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"FindUseEntity\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#FindUseEntity}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, defaultEnt: Entity) => void | Entity"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"FinishChat\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#FinishChat}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"FinishMove\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#FinishMove}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, mv: CMoveData) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"ForceDermaSkin\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#ForceDermaSkin}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void | string"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"GameContentChanged\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#GameContentChanged}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"GetFallDamage\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#GetFallDamage}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, speed: number) => void | number"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"GetGameDescription\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#GetGameDescription}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void | string"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"GetMotionBlurValues\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#GetMotionBlurValues}","isOptional":false,"isVarArg":false,"name":"func","type":"(horizontal: number, vertical: number, forward: number, rotational: number) => void | number"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"GetPreferredCarryAngles\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#GetPreferredCarryAngles}","isOptional":false,"isVarArg":false,"name":"func","type":"(ent: Entity) => void | Angle"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"GetTeamColor\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#GetTeamColor}","isOptional":false,"isVarArg":false,"name":"func","type":"(ent: Entity) => void | table"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"GetTeamNumColor\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#GetTeamNumColor}","isOptional":false,"isVarArg":false,"name":"func","type":"(team: number) => void | table"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"GrabEarAnimation\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#GrabEarAnimation}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"GravGunOnDropped\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#GravGunOnDropped}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, ent: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"GravGunOnPickedUp\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#GravGunOnPickedUp}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, ent: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"GravGunPickupAllowed\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#GravGunPickupAllowed}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, ent: Entity) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"GravGunPunt\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#GravGunPunt}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, ent: Entity) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"GUIMouseDoublePressed\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#GUIMouseDoublePressed}","isOptional":false,"isVarArg":false,"name":"func","type":"(mouseCode: MOUSE, aimVector: Vector) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"GUIMousePressed\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#GUIMousePressed}","isOptional":false,"isVarArg":false,"name":"func","type":"(mouseCode: MOUSE, aimVector: Vector) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"GUIMouseReleased\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#GUIMouseReleased}","isOptional":false,"isVarArg":false,"name":"func","type":"(mouseCode: MOUSE, aimVector: Vector) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"HandlePlayerDriving\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#HandlePlayerDriving}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"HandlePlayerDucking\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#HandlePlayerDucking}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, velocity: number) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"HandlePlayerJumping\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#HandlePlayerJumping}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, velocity: number) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"HandlePlayerLanding\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#HandlePlayerLanding}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, velocity: number, onGround: boolean) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"HandlePlayerNoClipping\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#HandlePlayerNoClipping}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, velocity: number) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"HandlePlayerSwimming\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#HandlePlayerSwimming}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, velocity: number) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"HandlePlayerVaulting\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#HandlePlayerVaulting}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, velocity: number) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"HideTeam\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#HideTeam}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"HUDAmmoPickedUp\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#HUDAmmoPickedUp}","isOptional":false,"isVarArg":false,"name":"func","type":"(itemName: string, amount: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"HUDDrawPickupHistory\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#HUDDrawPickupHistory}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"HUDDrawScoreBoard\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#HUDDrawScoreBoard}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"HUDDrawTargetID\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#HUDDrawTargetID}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"HUDItemPickedUp\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#HUDItemPickedUp}","isOptional":false,"isVarArg":false,"name":"func","type":"(itemName: string) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"HUDPaint\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#HUDPaint}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"HUDPaintBackground\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#HUDPaintBackground}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"HUDShouldDraw\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#HUDShouldDraw}","isOptional":false,"isVarArg":false,"name":"func","type":"(name: string) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"HUDWeaponPickedUp\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#HUDWeaponPickedUp}","isOptional":false,"isVarArg":false,"name":"func","type":"(weapon: Weapon) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"Initialize\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#Initialize}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"InitPostEntity\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#InitPostEntity}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"InputMouseApply\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#InputMouseApply}","isOptional":false,"isVarArg":false,"name":"func","type":"(cmd: CUserCmd, x: number, y: number, ang: Angle) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"IsSpawnpointSuitable\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#IsSpawnpointSuitable}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, spawnpoint: Entity, makeSuitable: boolean) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"KeyPress\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#KeyPress}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, key: IN) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"KeyRelease\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#KeyRelease}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, key: IN) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"LoadGModSave\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#LoadGModSave}","isOptional":false,"isVarArg":false,"name":"func","type":"(data: string, map: string, timestamp: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"MenuStart\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#MenuStart}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"MouthMoveAnimation\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#MouthMoveAnimation}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"Move\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#Move}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, mv: CMoveData) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"NeedsDepthPass\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#NeedsDepthPass}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"NetworkEntityCreated\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#NetworkEntityCreated}","isOptional":false,"isVarArg":false,"name":"func","type":"(ent: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"NetworkIDValidated\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#NetworkIDValidated}","isOptional":false,"isVarArg":false,"name":"func","type":"(name: string, steamID: string) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"NotifyShouldTransmit\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#NotifyShouldTransmit}","isOptional":false,"isVarArg":false,"name":"func","type":"(ent: Entity, shouldtransmit: boolean) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnAchievementAchieved\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnAchievementAchieved}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, achievement: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnChatTab\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnChatTab}","isOptional":false,"isVarArg":false,"name":"func","type":"(text: string) => void | string"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnContextMenuClose\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnContextMenuClose}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnContextMenuOpen\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnContextMenuOpen}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnDamagedByExplosion\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnDamagedByExplosion}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, dmginfo: CTakeDamageInfo) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnEntityCreated\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnEntityCreated}","isOptional":false,"isVarArg":false,"name":"func","type":"(entity: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnGamemodeLoaded\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnGamemodeLoaded}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnLuaError\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnLuaError}","isOptional":false,"isVarArg":false,"name":"func","type":"(error: string, realm: number, name: string, id: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnNPCKilled\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnNPCKilled}","isOptional":false,"isVarArg":false,"name":"func","type":"(npc: NPC, attacker: Entity, inflictor: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnPhysgunFreeze\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnPhysgunFreeze}","isOptional":false,"isVarArg":false,"name":"func","type":"(weapon: Entity, physobj: PhysObj, ent: Entity, ply: Player) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnPhysgunReload\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnPhysgunReload}","isOptional":false,"isVarArg":false,"name":"func","type":"(physgun: Weapon, ply: Player) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnPlayerChangedTeam\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnPlayerChangedTeam}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, oldTeam: number, newTeam: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnPlayerChat\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnPlayerChat}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, text: string, teamChat: boolean, isDead: boolean) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnPlayerHitGround\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnPlayerHitGround}","isOptional":false,"isVarArg":false,"name":"func","type":"(player: Entity, inWater: boolean, onFloater: boolean, speed: number) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnReloaded\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnReloaded}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnSpawnMenuClose\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnSpawnMenuClose}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnSpawnMenuOpen\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnSpawnMenuOpen}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnTextEntryGetFocus\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnTextEntryGetFocus}","isOptional":false,"isVarArg":false,"name":"func","type":"(panel: Panel) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnTextEntryLoseFocus\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnTextEntryLoseFocus}","isOptional":false,"isVarArg":false,"name":"func","type":"(panel: Panel) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnUndo\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnUndo}","isOptional":false,"isVarArg":false,"name":"func","type":"(name: string, customText: string) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"OnViewModelChanged\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#OnViewModelChanged}","isOptional":false,"isVarArg":false,"name":"func","type":"(viewmodel: Entity, oldModel: string, newModel: string) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PhysgunDrop\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PhysgunDrop}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, ent: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PhysgunPickup\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PhysgunPickup}","isOptional":false,"isVarArg":false,"name":"func","type":"(player: Player, entity: Entity) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerAuthed\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerAuthed}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, steamid: string, uniqueid: string) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerBindPress\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerBindPress}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, bind: string, pressed: boolean) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerButtonDown\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerButtonDown}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, button: BUTTON_CODE) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerButtonUp\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerButtonUp}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, button: BUTTON_CODE) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerCanHearPlayersVoice\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerCanHearPlayersVoice}","isOptional":false,"isVarArg":false,"name":"func","type":"(listener: Player, talker: Player) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerCanJoinTeam\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerCanJoinTeam}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, team: number) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerCanPickupItem\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerCanPickupItem}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, item: Entity) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerCanPickupWeapon\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerCanPickupWeapon}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, wep: Weapon) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerCanSeePlayersChat\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerCanSeePlayersChat}","isOptional":false,"isVarArg":false,"name":"func","type":"(text: string, teamOnly: boolean, listener: Player, speaker: Player) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerConnect\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerConnect}","isOptional":false,"isVarArg":false,"name":"func","type":"(name: string, ip: string) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerDeath\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerDeath}","isOptional":false,"isVarArg":false,"name":"func","type":"(victim: Player, inflictor: Entity, attacker: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerDeathSound\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerDeathSound}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerDeathThink\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerDeathThink}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerDisconnected\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerDisconnected}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerDriveAnimate\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerDriveAnimate}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerDroppedWeapon\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerDroppedWeapon}","isOptional":false,"isVarArg":false,"name":"func","type":"(owner: Player, wep: Weapon) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerEndVoice\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerEndVoice}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerEnteredVehicle\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerEnteredVehicle}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, veh: Vehicle, role: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerFootstep\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerFootstep}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, pos: Vector, foot: number, sound: string, volume: number, filter: CRecipientFilter) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerFrozeObject\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerFrozeObject}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, ent: Entity, physobj: PhysObj) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerHurt\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerHurt}","isOptional":false,"isVarArg":false,"name":"func","type":"(victim: Player, attacker: Entity, healthRemaining: number, damageTaken: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerInitialSpawn\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerInitialSpawn}","isOptional":false,"isVarArg":false,"name":"func","type":"(player: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerJoinTeam\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerJoinTeam}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, team: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerLeaveVehicle\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerLeaveVehicle}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, veh: Vehicle) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerLoadout\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerLoadout}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerNoClip\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerNoClip}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, desiredState: boolean) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerPostThink\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerPostThink}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerRequestTeam\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerRequestTeam}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, team: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSay\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerSay}","isOptional":false,"isVarArg":false,"name":"func","type":"(sender: Player, text: string, teamChat: boolean) => void | string"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSelectSpawn\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerSelectSpawn}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void | Entity"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSelectTeamSpawn\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerSelectTeamSpawn}","isOptional":false,"isVarArg":false,"name":"func","type":"(team: number, ply: Player) => void | Entity"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSetHandsModel\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerSetHandsModel}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, ent: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSetModel\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerSetModel}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerShouldTakeDamage\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerShouldTakeDamage}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, attacker: Entity) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerShouldTaunt\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerShouldTaunt}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, act: ACT) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSilentDeath\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerSilentDeath}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpawn\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerSpawn}","isOptional":false,"isVarArg":false,"name":"func","type":"(player: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpawnAsSpectator\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerSpawnAsSpectator}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpray\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerSpray}","isOptional":false,"isVarArg":false,"name":"func","type":"(sprayer: Player) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerStartTaunt\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerStartTaunt}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, act: number, length: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerStartVoice\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerStartVoice}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerStepSoundTime\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerStepSoundTime}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, type: STEPSOUNDTIME, walking: boolean) => void | number"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSwitchFlashlight\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerSwitchFlashlight}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, enabled: boolean) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSwitchWeapon\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerSwitchWeapon}","isOptional":false,"isVarArg":false,"name":"func","type":"(player: Player, oldWeapon: Weapon, newWeapon: Weapon) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerTick\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerTick}","isOptional":false,"isVarArg":false,"name":"func","type":"(player: Player, mv: CMoveData) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerTraceAttack\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerTraceAttack}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, dmginfo: CTakeDamageInfo, dir: Vector, trace: TraceResult) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerUnfrozeObject\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerUnfrozeObject}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, ent: Entity, physobj: PhysObj) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerUse\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PlayerUse}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, ent: Entity) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PopulateMenuBar\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PopulateMenuBar}","isOptional":false,"isVarArg":false,"name":"func","type":"(menubar: DMenuBar) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PostCleanupMap\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PostCleanupMap}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PostDraw2DSkyBox\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PostDraw2DSkyBox}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PostDrawEffects\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PostDrawEffects}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PostDrawHUD\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PostDrawHUD}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PostDrawOpaqueRenderables\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PostDrawOpaqueRenderables}","isOptional":false,"isVarArg":false,"name":"func","type":"(bDrawingDepth: boolean, bDrawingSkybox: boolean) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PostDrawPlayerHands\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PostDrawPlayerHands}","isOptional":false,"isVarArg":false,"name":"func","type":"(hands: Entity, vm: Entity, ply: Player, weapon: Weapon) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PostDrawSkyBox\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PostDrawSkyBox}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PostDrawTranslucentRenderables\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PostDrawTranslucentRenderables}","isOptional":false,"isVarArg":false,"name":"func","type":"(bDrawingDepth: boolean, bDrawingSkybox: boolean) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PostDrawViewModel\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PostDrawViewModel}","isOptional":false,"isVarArg":false,"name":"func","type":"(viewmodel: Entity, player: Player, weapon: Weapon) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PostGamemodeLoaded\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PostGamemodeLoaded}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PostPlayerDeath\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PostPlayerDeath}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PostPlayerDraw\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PostPlayerDraw}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PostProcessPermitted\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PostProcessPermitted}","isOptional":false,"isVarArg":false,"name":"func","type":"(ppeffect: string) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PostRender\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PostRender}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PostRenderVGUI\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PostRenderVGUI}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PreCleanupMap\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PreCleanupMap}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PreDrawEffects\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PreDrawEffects}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PreDrawHalos\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PreDrawHalos}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PreDrawHUD\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PreDrawHUD}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PreDrawOpaqueRenderables\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PreDrawOpaqueRenderables}","isOptional":false,"isVarArg":false,"name":"func","type":"(isDrawingDepth: boolean, isDrawSkybox: boolean) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PreDrawPlayerHands\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PreDrawPlayerHands}","isOptional":false,"isVarArg":false,"name":"func","type":"(hands: Entity, vm: Entity, ply: Player, weapon: Weapon) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PreDrawSkyBox\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PreDrawSkyBox}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PreDrawTranslucentRenderables\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PreDrawTranslucentRenderables}","isOptional":false,"isVarArg":false,"name":"func","type":"(isDrawingDepth: boolean, isDrawSkybox: boolean) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PreDrawViewModel\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PreDrawViewModel}","isOptional":false,"isVarArg":false,"name":"func","type":"(vm: Entity, ply: Player, weapon: Weapon) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PreGamemodeLoaded\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PreGamemodeLoaded}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PrePlayerDraw\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PrePlayerDraw}","isOptional":false,"isVarArg":false,"name":"func","type":"(player: Player) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PreRender\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PreRender}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PreventScreenClicks\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PreventScreenClicks}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PropBreak\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#PropBreak}","isOptional":false,"isVarArg":false,"name":"func","type":"(attacker: Player, prop: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"RenderScene\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#RenderScene}","isOptional":false,"isVarArg":false,"name":"func","type":"(origin: Vector, angles: Angle, fov: number) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"RenderScreenspaceEffects\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#RenderScreenspaceEffects}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"Restored\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#Restored}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"Saved\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#Saved}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"ScaleNPCDamage\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#ScaleNPCDamage}","isOptional":false,"isVarArg":false,"name":"func","type":"(npc: NPC, hitgroup: HITGROUP, dmginfo: CTakeDamageInfo) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"ScalePlayerDamage\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#ScalePlayerDamage}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, hitgroup: HITGROUP, dmginfo: CTakeDamageInfo) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"ScoreboardHide\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#ScoreboardHide}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"ScoreboardShow\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#ScoreboardShow}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"SetPlayerSpeed\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#SetPlayerSpeed}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, walkSpeed: number, runSpeed: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"SetupMove\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#SetupMove}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, mv: CMoveData, cmd: CUserCmd) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"SetupPlayerVisibility\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#SetupPlayerVisibility}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, viewEntity: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"SetupSkyboxFog\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#SetupSkyboxFog}","isOptional":false,"isVarArg":false,"name":"func","type":"(scale: number) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"SetupWorldFog\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#SetupWorldFog}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"ShouldCollide\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#ShouldCollide}","isOptional":false,"isVarArg":false,"name":"func","type":"(ent1: Entity, ent2: Entity) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"ShouldDrawLocalPlayer\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#ShouldDrawLocalPlayer}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"ShowHelp\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#ShowHelp}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"ShowSpare1\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#ShowSpare1}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"ShowSpare2\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#ShowSpare2}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"ShowTeam\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#ShowTeam}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"ShutDown\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#ShutDown}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"SpawniconGenerated\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#SpawniconGenerated}","isOptional":false,"isVarArg":false,"name":"func","type":"(lastmodel: string, imagename: string, modelsleft: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"StartChat\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#StartChat}","isOptional":false,"isVarArg":false,"name":"func","type":"(isTeamChat: boolean) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"StartCommand\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#StartCommand}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, ucmd: CUserCmd) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"StartEntityDriving\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#StartEntityDriving}","isOptional":false,"isVarArg":false,"name":"func","type":"(ent: Entity, ply: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"StartGame\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#StartGame}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"Think\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#Think}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"Tick\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#Tick}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"TranslateActivity\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#TranslateActivity}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, act: ACT) => void | number"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"UpdateAnimation\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#UpdateAnimation}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, velocity: Vector, maxSeqGroundSpeed: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"VariableEdited\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#VariableEdited}","isOptional":false,"isVarArg":false,"name":"func","type":"(ent: Entity, ply: Player, key: string, val: string, editor: table) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"VehicleMove\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#VehicleMove}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, veh: Vehicle, mv: CMoveData) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"VGUIMousePressAllowed\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#VGUIMousePressAllowed}","isOptional":false,"isVarArg":false,"name":"func","type":"(button: MOUSE) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"VGUIMousePressed\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#VGUIMousePressed}","isOptional":false,"isVarArg":false,"name":"func","type":"(pnl: Panel, mouseCode: MOUSE) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"WeaponEquip\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#WeaponEquip}","isOptional":false,"isVarArg":false,"name":"func","type":"(weapon: Weapon, owner: Player) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"WorkshopDownloadedFile\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#WorkshopDownloadedFile}","isOptional":false,"isVarArg":false,"name":"func","type":"(id: number, title: string) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"WorkshopDownloadFile\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#WorkshopDownloadFile}","isOptional":false,"isVarArg":false,"name":"func","type":"(id: number, imageID: number, title: string, size: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"WorkshopDownloadProgress\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#WorkshopDownloadProgress}","isOptional":false,"isVarArg":false,"name":"func","type":"(id: number, imageID: number, title: string, downloaded: number, expected: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"WorkshopDownloadTotals\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#WorkshopDownloadTotals}","isOptional":false,"isVarArg":false,"name":"func","type":"(remain: number, total: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"WorkshopEnd\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#WorkshopEnd}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"WorkshopStart\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#WorkshopStart}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"WorkshopSubscriptionsProgress\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link GM#WorkshopSubscriptionsProgress}","isOptional":false,"isVarArg":false,"name":"func","type":"(num: number, max: number) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"AddGamemodeToolMenuCategories\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#AddGamemodeToolMenuCategories}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"AddGamemodeToolMenuTabs\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#AddGamemodeToolMenuTabs}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"AddToolMenuCategories\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#AddToolMenuCategories}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"AddToolMenuTabs\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#AddToolMenuTabs}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CanDrive\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#CanDrive}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, ent: Entity) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CanProperty\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#CanProperty}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, property: string, ent: Entity) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"CanTool\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#CanTool}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, tr: TraceResult, tool: string) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"ContentSidebarSelection\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#ContentSidebarSelection}","isOptional":false,"isVarArg":false,"name":"func","type":"(parent: Panel, node: Panel) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"ContextMenuCreated\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#ContextMenuCreated}","isOptional":false,"isVarArg":false,"name":"func","type":"(g_ContextMenu: Panel) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"ContextMenuOpen\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#ContextMenuOpen}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PaintNotes\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PaintNotes}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PaintWorldTips\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PaintWorldTips}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PersistenceLoad\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PersistenceLoad}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PersistenceSave\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PersistenceSave}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerGiveSWEP\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PlayerGiveSWEP}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, weapon: string, swep: SWEP[]) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpawnedEffect\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PlayerSpawnedEffect}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, model: string, ent: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpawnedNPC\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PlayerSpawnedNPC}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, ent: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpawnedProp\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PlayerSpawnedProp}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, model: string, entity: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpawnedRagdoll\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PlayerSpawnedRagdoll}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, model: string, ent: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpawnedSENT\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PlayerSpawnedSENT}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, ent: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpawnedSWEP\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PlayerSpawnedSWEP}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, ent: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpawnedVehicle\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PlayerSpawnedVehicle}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, ent: Entity) => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpawnEffect\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PlayerSpawnEffect}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, model: string) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpawnNPC\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PlayerSpawnNPC}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, npc_type: string, weapon: string) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpawnObject\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PlayerSpawnObject}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, model: string, skin: number) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpawnProp\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PlayerSpawnProp}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, model: string) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpawnRagdoll\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PlayerSpawnRagdoll}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, model: string) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpawnSENT\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PlayerSpawnSENT}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, classRef: string) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpawnSWEP\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PlayerSpawnSWEP}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, weapon: string, swep: SWEP) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PlayerSpawnVehicle\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PlayerSpawnVehicle}","isOptional":false,"isVarArg":false,"name":"func","type":"(ply: Player, model: string, name: string, table: table) => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PopulatePropMenu\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PopulatePropMenu}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PopulateSTOOLMenu\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PopulateSTOOLMenu}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PopulateToolMenu\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PopulateToolMenu}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PostReloadToolsMenu\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PostReloadToolsMenu}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"PreReloadToolsMenu\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#PreReloadToolsMenu}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"SpawnMenuEnabled\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#SpawnMenuEnabled}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]]","isOptional":false,"isVarArg":false,"name":"eventName","type":"\"SpawnMenuOpen\""},{"default":"","description":"The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.\n\nThe identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.\n\nIf the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string | table | Entity | Panel | number | boolean"},{"default":"","description":"see { @link SANDBOX#SpawnMenuOpen}","isOptional":false,"isVarArg":false,"name":"func","type":"() => void | boolean"}],"description":"Add a hook to be called upon the given event occurring.","examples":[{"code":"local function onThink()\n\tprint( \"onThink has been called\" )\nend\n\nhook.Add( \"Think\", \"Some unique name\", onThink )","description":"This will hook onto the \"Think\" event with the function onThink, printing to the console whenever the event occurs."},{"code":"hook.Add( \"Think\", \"Another unique name\", function()\n\tprint( \"Think has been called\" )\nend )","description":"This works the same as above, but defines the function inside hook.Add rather than above it."},{"code":"local myTable = {}\nfunction myTable:IsValid()\n    return true\nend\n\nfunction myTable:PlayerInitialSpawn(ply)\n    print( \"CustomHook\", self, ply )\nend\n\nhook.Add( \"CustomHook\" , myTable , myTable.PlayerInitialSpawn )\nhook.Run( \"CustomHook\" )","description":"This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function"}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"hook"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A simple Derma MenuBar","examples":[{"code":"local Frame = vgui.Create( \"DFrame\" )\nFrame:SetSize( 300, 200 )\nFrame:Center()\nFrame:MakePopup()\n\nlocal MenuBar = vgui.Create( \"DMenuBar\", Frame )\nMenuBar:DockMargin( -3, -6, -3, 0 ) --corrects MenuBar pos\n\nlocal M1 = MenuBar:AddMenu( \"File\" )\nM1:AddOption(\"New\", function() Msg(\"Chose File:New\\n\") end):SetIcon(\"icon16/page_white_go.png\")\nM1:AddOption(\"Open\", function() Msg(\"Chose File:Open\\n\") end):SetIcon(\"icon16/folder_go.png\")\n\nlocal M2 = MenuBar:AddMenu(\"Edit\")\nM2:AddOption(\"Copy\", function() Msg(\"Chose Edit:Copy\\n\") end)\n\nlocal M3 = MenuBar:AddMenu(\"Help\")\nM3:AddOption(\"About\", function() Msg(\"Chose Help:About\\n\") end)","description":"Creates a DMenuBar in a DFrame."},{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 300, 200 )\nframe:Center()\nframe:MakePopup()\n\nlocal menuBar = vgui.Create( \"DMenuBar\", frame )\nmenuBar:DockMargin( -3, -6, -3, 0 )\n\nlocal option1 = menuBar:AddMenu( \"Option 1\" )\noption1:AddOption( \"Dummy option\", function() MsgN( \"Chose Dummy option\" ) end )\n\nlocal sub = option1:AddSubMenu( \"Sub Menu\" )\nsub:SetDeleteSelf( false ) -- Necessary so the sub menu is not automatically removed on close\nfor i = 0, 5 do\n\tsub:AddOption( \"Option \" .. i, function() MsgN( \"Chose sub menu option \" .. i ) end )\nend","description":"A sub menu example"}],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The name (label) of the derma menu to create.","isOptional":false,"isVarArg":false,"name":"label","type":"string"}],"description":"Creates a new {{Type|DMenu}} object tied to a {{Type|DButton}} with the given label on the menu bar.\n\nThis will create a new menu regardless of whether or not one with the same label exists. To add '''or''' get a menu, use {{ClassFunction|DMenuBar|AddOrGetMenu}}.","examples":[],"isConstructor":false,"name":"AddMenu","realm":"client","returns":[{"description":"The new {{Type|DMenu}} which will be opened when the button is clicked.","type":"DMenu"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name (label) of the derma menu to get or create.","isOptional":false,"isVarArg":false,"name":"label","type":"string"}],"description":"Retrieves a {{Type|DMenu}} object from the menu bar. If one with the given label doesn't exist, a new one is created.\n\nTo add a DMenu without checking, use {{ClassFunction|DMenuBar|AddMenu}}.","examples":[],"isConstructor":false,"name":"AddOrGetMenu","realm":"client","returns":[{"description":"The {{Type|DMenu}} with the given label.","type":"DMenu"}]},{"accessModifier":"public","arguments":[],"description":"Returns the DMenuBar's background color","examples":[],"isConstructor":false,"name":"GetBackgroundColor","realm":"client","returns":[{"description":"The background's color. See {{Struct|Color}}","type":"Color"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the DMenuBar is disabled","examples":[],"isConstructor":false,"name":"GetDisabled","realm":"client","returns":[{"description":"Is disabled","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|Use {{ClassFunction|DMenuBar|GetPaintBackground}} instead.}}\n\nReturns whether or not the background should be painted. Is the same as {{ClassFunction|DMenuBar|GetPaintBackground}}","examples":[],"isConstructor":false,"name":"GetDrawBackground","realm":"client","returns":[{"description":"Should the background be painted","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the panel is a menu. Used for closing menus when another panel is selected.","examples":[],"isConstructor":false,"name":"GetIsMenu","realm":"client","returns":[{"description":"Is a menu","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"If a menu is visible/opened, then the menu is returned.","examples":[],"isConstructor":false,"name":"GetOpenMenu","realm":"client","returns":[{"description":"Returns the visible/open menu or nil.","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the background should be painted. Is the same as {{ClassFunction|DMenuBar|GetDrawBackground}}","examples":[],"isConstructor":false,"name":"GetPaintBackground","realm":"client","returns":[{"description":"Should the background be painted","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"See {{Struct|Color}}","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Sets the background color","examples":[],"isConstructor":false,"name":"SetBackgroundColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Should be disabled or not","isOptional":false,"isVarArg":false,"name":"disable","type":"boolean"}],"description":"Sets whether or not the panel is disabled","examples":[],"isConstructor":false,"name":"SetDisabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Should the background be painted","isOptional":false,"isVarArg":false,"name":"shouldPaint","type":"boolean"}],"description":"{{Deprecated|Use {{ClassFunction|DMenuBar|SetPaintBackground}}}}\n\nSets whether or not the background should be painted. Is the same as {{ClassFunction|DMenuBar|SetPaintBackground}}","examples":[],"isConstructor":false,"name":"SetDrawBackground","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Is this a menu","isOptional":false,"isVarArg":false,"name":"isMenu","type":"boolean"}],"description":"Sets whether or not the panel is a menu. Used for closing menus when another panel is selected.","examples":[],"isConstructor":false,"name":"SetIsMenu","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Should the background be painted","isOptional":false,"isVarArg":false,"name":"shouldPaint","type":"boolean"}],"description":"Sets whether or not the background should be painted. Is the same as {{ClassFunction|DMenuBar|SetDrawBackground}}","examples":[],"isConstructor":false,"name":"SetPaintBackground","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the panel's background color.\n\n{{Note|By default this returns '''nil''' even though the default background color is white}}","examples":[{"code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(200, 200)\n\nprint(BGPanel:GetBackgroundColor())","description":"Prints out the default panel background color."}],"isConstructor":false,"name":"GetBackgroundColor","realm":"client","returns":[{"description":"Color of the panel's background.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the panel is disabled.","examples":[],"isConstructor":false,"name":"GetDisabled","realm":"client","returns":[{"description":"True if the panel is disabled (mouse input disabled and background alpha set to 75), false if its enabled (mouse input enabled and background alpha set to 255).","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|You should use {{ClassFunction|DPanel|GetPaintBackground}} instead.}}Returns whether or not the panel background is being drawn. Alias of {{ClassFunction|DPanel|GetPaintBackground}}.","examples":[],"isConstructor":false,"name":"GetDrawBackground","realm":"client","returns":[{"description":"True if the panel background is drawn, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the panel background is being drawn.","examples":[],"isConstructor":false,"name":"GetPaintBackground","realm":"client","returns":[{"description":"True if the panel background is drawn, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The background color.","isOptional":false,"isVarArg":false,"name":"color","type":"table"}],"description":"Sets the background color of the panel.","examples":[{"code":"COLOR_TEAM_RED = Color(255, 64, 64, 255)\nCOLOR_TEAM_BLUE = Color(153, 204, 255, 255)\n\nBGPanel1 = vgui.Create(\"DPanel\")\nBGPanel1:SetPos(20, 20)\nBGPanel1:SetSize(200, 200)\nBGPanel1:SetBackgroundColor(COLOR_TEAM_RED)\n\t\t\nBGPanel2 = vgui.Create(\"DPanel\")\nBGPanel2:SetPos(220, 20)\nBGPanel2:SetSize(200, 200)\nBGPanel2:SetBackgroundColor(COLOR_TEAM_BLUE)","description":"Creates two empty panels with their background colors set to red and blue team colors."}],"isConstructor":false,"name":"SetBackgroundColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to disable the panel (mouse input disabled and background alpha set to 75), false to enable it (mouse input enabled and background alpha set to 255).","isOptional":false,"isVarArg":false,"name":"disabled","type":"boolean"}],"description":"Sets whether or not to disable the panel.","examples":[],"isConstructor":false,"name":"SetDisabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to show the panel's background, false to hide it.","isOptional":false,"isVarArg":false,"name":"draw","type":"boolean"}],"description":"{{Deprecated|You should use {{ClassFunction|DPanel|SetPaintBackground}} instead.}}Sets whether or not to draw the panel background. Alias of {{ClassFunction|DPanel|SetPaintBackground}}.","examples":[],"isConstructor":false,"name":"SetDrawBackground","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to show the panel's background, false to hide it.","isOptional":false,"isVarArg":false,"name":"paint","type":"boolean"}],"description":"Sets whether or not to paint/draw the panel background.","examples":[],"isConstructor":false,"name":"SetPaintBackground","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DMenuBar"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The http library allows either the server or client to communicate with external websites via HTTP, both GET ({{LibraryFunction|http|Fetch}}) and POST ({{LibraryFunction|http|Post}}) are supported. A more powerful & advanced method can be used via the global {{GlobalFunction|HTTP}} function.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The URL of the website to fetch.","isOptional":false,"isVarArg":false,"name":"url","type":"string"},{"default":"nil","description":"Function to be called on success. Arguments are\n* {{FuncArg|string|body}}\n* {{FuncArg|string|size|equal to {{LibraryFunction|string|len}}(body)}}\n* {{FuncArg|table|headers}}\n* {{FuncArg|number|code|The HTTP success code}}","isOptional":true,"isVarArg":false,"name":"onSuccess","type":"Function"},{"default":"nil","description":"Function to be called on failure. Arguments are\n* {{FuncArg|string|error|The error message}}","isOptional":true,"isVarArg":false,"name":"onFailure","type":"Function"},{"default":"{}","description":"KeyValue table for headers","isOptional":true,"isVarArg":false,"name":"headers","type":"table"}],"description":"Launches a GET request.","examples":[{"code":"local TheReturnedHTML = \"\" -- Blankness\n\nhttp.Fetch( \"http:&#47;&#47;www.google.com\",\n\tfunction( body, len, headers, code )\n\t\t-- The first argument is the HTML we asked for.\n\t\tTheReturnedHTML = body\n\tend,\n\tfunction( error )\n\t\t-- We failed. =(\n\tend\n)","description":"Shows the typical usage to get the HTML of a webpage."}],"isConstructor":false,"name":"Fetch","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The url to of the website to fetch.","isOptional":false,"isVarArg":false,"name":"url","type":"string"},{"default":"","description":"The post parameters to be send to the server. '''Keys and values ''must'' be strings.","isOptional":false,"isVarArg":false,"name":"parameters","type":"table"},{"default":"nil","description":"The function called on success: function( string responseText, number contentLength, table responseHeaders, number statusCode )","isOptional":true,"isVarArg":false,"name":"onSuccess","type":"Function"},{"default":"nil","description":"The function called on failure: function( string errorMessage )","isOptional":true,"isVarArg":false,"name":"onFailure","type":"Function"},{"default":"{}","description":"KeyValue table for headers","isOptional":true,"isVarArg":false,"name":"headers","type":"table"}],"description":"Sends an asynchronous POST request to a HTTP server.\n\nHTTP requests returning a status code >= 400 are still considered a success and will call the onSuccess callback.\n\nThe onFailure callback is usually only called on DNS or TCP errors (e.g. the website is unavailable or the domain does not exist)","examples":[{"code":"http.Post(\"http://localhost/post.php\", { p = \"Gmod\", a = \"Test\" }, function(result)\n\tif result then print(\"Done!\") end\nend, function(failed)\n\tprint(failed)\nend)","description":"Write a file in PHP, and invoke it from Lua. The output below is written in the file, not in the console.\n\n<pre class=\"plain\"><?php\n\t$p = $_POST[\"p\"];\n\t$a = $_POST[\"a\"];\n\n\t$f = fopen(\"write.html\", \"w\");\n\n\tfwrite($f, \"This is a test. $p $a\\n\");\n\n\tfclose($f);\n?></pre>"}],"isConstructor":false,"name":"Post","realm":"shared and menu","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"http"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}\n\nInternal subpanel that represents an option used by {{Type|DMenu}}.","examples":[],"extends":"DButton","functions":[{"accessModifier":"public","arguments":[],"description":"Creates a sub {{Type|DMenu}} and returns it. Has no duplicate call protection.","examples":[],"isConstructor":false,"name":"AddSubMenu","realm":"client","returns":[{"description":"The created {{Type|DMenu}} to add options to.","type":"DMenu"}]},{"accessModifier":"public","arguments":[],"description":"Returns the checked state of {{Type|DMenuOption}}.","examples":[],"isConstructor":false,"name":"GetChecked","realm":"client","returns":[{"description":"Are we checked or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the {{Type|DMenuOption}} is a checkbox option or a normal button option.","examples":[],"isConstructor":false,"name":"GetIsCheckable","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetMenu","realm":"client","returns":[{"description":"A {{Type|DMenu}}","type":"DMenu"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The new checked state","isOptional":false,"isVarArg":false,"name":"checked","type":"boolean"}],"description":"Called whenever the {{Type|DMenuOption}}'s checked state changes.","examples":[],"isConstructor":false,"name":"OnChecked","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"checked","type":"boolean"}],"description":"Sets the checked state of the {{Type|DMenuOption}}. Does not invoke {{ClassFunction|DMenuOption|OnChecked}}.","examples":[],"isConstructor":false,"name":"SetChecked","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"checkable","type":"boolean"}],"description":"Sets whether the {{Type|DMenuOption}} is a checkbox option or a normal button option.","examples":[],"isConstructor":false,"name":"SetIsCheckable","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"","examples":[],"isConstructor":false,"name":"SetMenu","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"menu","type":"Panel"}],"description":"{{Internal}}\n\nUsed internally by {{ClassFunction|DMenuOption|AddSubMenu}} to create the submenu arrow and assign the created submenu to be opened this this option is hovered.","examples":[],"isConstructor":false,"name":"SetSubMenu","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Toggles the checked state of {{Type|DMenuOption}}. Does not respect {{ClassFunction|DMenuOption|GetIsCheckable}}.","examples":[],"isConstructor":false,"name":"ToggleCheck","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DMenuOption"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}\n\nAn internal panel used by {{Type|DMenu}}. It acts as a menu option that can be checked. It automatically sets and reads the given console variable.\n\nIt can be right clicked to toggle without closing the {{Type|DMenu}}.\n\nUse {{ClassFunction|DMenu|AddCVar}} instead.","examples":[],"extends":"DMenuOption","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the [[ConVars|console variable]] used by the {{Type|DMenuOptionCVar}}.","examples":[],"isConstructor":false,"name":"GetConVar","realm":"client","returns":[{"description":"The [[ConVars|console variable]] used","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the value of the [[ConVars|console variable]] when the {{Type|DMenuOptionCVar}} is not checked.","examples":[],"isConstructor":false,"name":"GetValueOff","realm":"client","returns":[{"description":"The value","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Return the value of the [[ConVars|console variable]] when the {{Type|DMenuOptionCVar}} is checked.","examples":[],"isConstructor":false,"name":"GetValueOn","realm":"client","returns":[{"description":"The value","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The [[ConVars|console variable]] name to set","isOptional":false,"isVarArg":false,"name":"cvar","type":"string"}],"description":"Sets the [[ConVars|console variable]] to be used by {{Type|DMenuOptionCVar}}.","examples":[],"isConstructor":false,"name":"SetConVar","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value","isOptional":false,"isVarArg":false,"name":"value","type":"string"}],"description":"Sets the value of the [[ConVars|console variable]] when the {{Type|DMenuOptionCVar}} is not checked.","examples":[],"isConstructor":false,"name":"SetValueOff","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value","isOptional":false,"isVarArg":false,"name":"value","type":"string"}],"description":"Sets the value of the [[ConVars|console variable]] when the {{Type|DMenuOptionCVar}} is checked.","examples":[],"isConstructor":false,"name":"SetValueOn","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The console variable to check.","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"{{Warning|This function does not exist on all panels}}\n\nSets this panel's convar. When the convar changes this panel will update automatically.\n\nFor developer implementation, see {{GlobalFunction|Derma_Install_Convar_Functions}}.","examples":[{"code":"local checkbox = vgui.Create( \"DCheckBoxLabel\", myFrame )\ncheckbox:SetConVar( \"sv_cheats\" )\ncheckbox:SetText( \"Enable cheats?\" )\ncheckbox:SetPos( 5, 25 )\ncheckbox:SizeToContents()","description":"Makes a checkbox linked to the '''sv_cheats''' convar."}],"isConstructor":false,"name":"SetConVar","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DMenuOptionCVar"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The input library allows you to gather information about the clients input devices (mouse & keyboard), such as the cursor position and whether a key is pressed or not.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the last key captured by key trapping.","examples":[],"isConstructor":false,"name":"CheckKeyTrapping","realm":"client and menu","returns":[{"description":"The key, see {{Enum|KEY}}","type":"KEY"}]},{"accessModifier":"public","arguments":[],"description":"Returns the cursor's position on the screen","examples":[],"isConstructor":false,"name":"GetCursorPos","realm":"client and menu","returns":[{"description":"mouseX","type":"number"},{"description":"mouseY","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The internal button name, such as \"e\" or \"shift\".","isOptional":false,"isVarArg":false,"name":"button","type":"string"}],"description":"Gets the button code from a button name. This is opposite of {{LibraryFunction|input|GetKeyName}}.","examples":[],"isConstructor":false,"name":"GetKeyCode","realm":"client and menu","returns":[{"description":"The button code, see {{Enum|BUTTON_CODE}}.","type":"BUTTON_CODE"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The button, see {{Enum|BUTTON_CODE}}.","isOptional":false,"isVarArg":false,"name":"button","type":"BUTTON_CODE"}],"description":"Gets the button name from a numeric button code. The name needs to be translated with {{LibraryFunction|language|GetPhrase}} before being displayed.\n\n{{Note|Despite the name of the function, this also works for the full range of keys in {{Enum|BUTTON_CODE}}.}}","examples":[],"isConstructor":false,"name":"GetKeyName","realm":"client and menu","returns":[{"description":"Button name.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The button, valid values are in the range of {{Enum|BUTTON_CODE}}.","isOptional":false,"isVarArg":false,"name":"button","type":"BUTTON_CODE"}],"description":"Gets whether the specified button code is down.\n\nUnlike {{LibraryFunction|input|IsKeyDown}} this can also detect joystick presses from {{Enum|JOYSTICK}}","examples":[],"isConstructor":false,"name":"IsButtonDown","realm":"client and menu","returns":[{"description":"Is the button down","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether a control key is being pressed","examples":[],"isConstructor":false,"name":"IsControlDown","realm":"client and menu","returns":[{"description":"Is Ctrl key down or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key, see {{Enum|KEY}}.","isOptional":false,"isVarArg":false,"name":"key","type":"KEY"}],"description":"Gets whether a key is down","examples":[{"code":"","description":""}],"isConstructor":false,"name":"IsKeyDown","realm":"client and menu","returns":[{"description":"Is the key down","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether key trapping is activate and the next key press will be captured.","examples":[],"isConstructor":false,"name":"IsKeyTrapping","realm":"client and menu","returns":[{"description":"Whether key trapping active or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key, see {{Enum|MOUSE}}","isOptional":false,"isVarArg":false,"name":"mouseKey","type":"MOUSE"}],"description":"Gets whether a mouse button is down","examples":[],"isConstructor":false,"name":"IsMouseDown","realm":"client and menu","returns":[{"description":"Is the key down","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Gets whether a shift key is being pressed","examples":[],"isConstructor":false,"name":"IsShiftDown","realm":"client and menu","returns":[{"description":"isDown","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The binding name","isOptional":false,"isVarArg":false,"name":"binding","type":"string"},{"default":"false","description":"True if the binding should match exactly","isOptional":true,"isVarArg":false,"name":"exact","type":"boolean"}],"description":"Gets the match uppercase key for the specified binding.","examples":[{"code":"print( input.LookupBinding( \"+use\" ) )\nprint( input.LookupBinding( \"use\" ) )\nprint( input.LookupBinding( \"+use\", true ) )\nprint( input.LookupBinding( \"use\", true ) )","description":"Demonstrates usage of this function and its arguments."}],"isConstructor":false,"name":"LookupBinding","realm":"client and menu","returns":[{"description":"The first key found with that binding or no value if no key with given binding was found.\n\nSee also {{LibraryFunction|input|GetKeyCode}}.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Key from {{Enum|BUTTON_CODE}}","isOptional":false,"isVarArg":false,"name":"key","type":"BUTTON_CODE"}],"description":"Returns the bind string that the given key is bound to.","examples":[],"isConstructor":false,"name":"LookupKeyBinding","realm":"client and menu","returns":[{"description":"The bind string of the given key.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The weapon entity to switch to.","isOptional":false,"isVarArg":false,"name":"weapon","type":"Weapon"}],"description":"Switches to the provided weapon on the next CUserCmd generation/CreateMove call. Direct binding to [https://github.com/LestaD/SourceEngine2007/blob/43a5c90a5ada1e69ca044595383be67f40b33c61/se2007/game/client/in_main.cpp#L929-L932 CInput::MakeWeaponSelection].","examples":[],"isConstructor":false,"name":"SelectWeapon","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"X coordinate for mouse position","isOptional":false,"isVarArg":false,"name":"mouseX","type":"number"},{"default":"","description":"Y coordinate for mouse position","isOptional":false,"isVarArg":false,"name":"mouseY","type":"number"}],"description":"Sets the cursor's position on the screen, relative to the topleft corner of the window","examples":[{"code":"hook.Add( 'HUDPaint', 'CircleScreen', function()\n\tinput.SetCursorPos( ScrW()/2+math.sin(CurTime())*ScrW()/2, ScrH()/2+math.cos(CurTime())*ScrH()/2 )\nend)","description":"Makes the user's cursor circle their screen"}],"isConstructor":false,"name":"SetCursorPos","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Begins waiting for a key to be pressed so we can save it for {{LibraryFunction|input|CheckKeyTrapping}}. Used by the {{Type|DBinder}}.","examples":[],"isConstructor":false,"name":"StartKeyTrapping","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key, see {{Enum|KEY}}.","isOptional":false,"isVarArg":false,"name":"key","type":"KEY"}],"description":"Returns whether a key was initially pressed in the same frame this function was called.\n\nThis function only works in Move hooks, and will detect key presses even in main menu or when a typing in a text field.","examples":[],"isConstructor":false,"name":"WasKeyPressed","realm":"client and menu","returns":[{"description":"True if the key was initially pressed the same frame that this function was called, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key, see {{Enum|KEY}}.","isOptional":false,"isVarArg":false,"name":"key","type":"KEY"}],"description":"Returns whether a key was released in the same frame this function was called.\n\nThis function only works in Move hooks, and will detect key releases even in main menu or when a typing in a text field.","examples":[],"isConstructor":false,"name":"WasKeyReleased","realm":"client and menu","returns":[{"description":"True if the key was released the same frame that this function was called, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to test, see {{Enum|KEY}}","isOptional":false,"isVarArg":false,"name":"key","type":"KEY"}],"description":"Returns whether the key is being held down or not.\n\nThis function only works in Move hooks, and will detect key events even in main menu or when a typing in a text field.","examples":[],"isConstructor":false,"name":"WasKeyTyped","realm":"client and menu","returns":[{"description":"Whether the key is being held down or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The mouse button to test, see {{Enum|MOUSE}}","isOptional":false,"isVarArg":false,"name":"button","type":"MOUSE"}],"description":"Returns whether a mouse key was double pressed in the same frame this function was called.<br/>\nIf this function returns true, {{LibraryFunction|input|WasMousePressed}} will return false.\n\nThis function only works in Move hooks, and will detect mouse events even in main menu or when a typing in a text field.","examples":[],"isConstructor":false,"name":"WasMouseDoublePressed","realm":"client and menu","returns":[{"description":"Whether the mouse key was double pressed or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key, see {{Enum|MOUSE}}","isOptional":false,"isVarArg":false,"name":"key","type":"MOUSE"}],"description":"Returns whether a mouse key was initially pressed in the same frame this function was called.<br/>\nIf {{LibraryFunction|input|WasMouseDoublePressed}} returns true, this function will return false.\n\nThis function only works in Move hooks, and will detect mouse events even in main menu or when a typing in a text field.","examples":[{"code":"hook.Add( \"CreateMove\", \"fafawefafwf\", function()\n\tif ( input.WasMousePressed( MOUSE_LEFT ) ) then print( \"Left mouse button was pressed\" ) end\nend )","description":"Example usage"}],"isConstructor":false,"name":"WasMousePressed","realm":"client and menu","returns":[{"description":"True if the mouse key was initially pressed the same frame that this function was called, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to test, see {{Enum|MOUSE}}","isOptional":false,"isVarArg":false,"name":"key","type":"MOUSE"}],"description":"Returns whether a mouse key was released in the same frame this function was called.\n\nThis function only works in Move hooks, and will detect mouse events even in main menu or when a typing in a text field.\n\n{{NextUpdate}}","examples":[],"isConstructor":false,"name":"WasMouseReleased","realm":"client and menu","returns":[{"description":"True if the mouse key was released the same frame that this function was called, false otherwise.","type":"boolean"}]}],"isHook":false,"isPureAbstract":false,"name":"input"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"Function to work with the [http://luajit.org/ LuaJIT] functionality of gmod.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"=Not a function=\n\nThis is NOT a function, it's a variable containing the target architecture name: \"x86\", \"x64\", \"arm\", \"ppc\", \"ppcspe\", or \"mips\". This will be \"x86\" in GMod.\n\n[[Category:Functions]]\n[[Category:jit]]\n[[Category:Shared]]\n[[Category:Menu]]\n[[Category:Documented_Functions]]\n[[Category:Library Functions]]","examples":[],"isConstructor":false,"name":"arch","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The callback function.\n\nThe arguments passed to the callback depend on the event being reported:\n\n*\"bc\":\n{{FuncArg|function|func|The function that's just been recorded}}<br/>\n\n*\"trace\":\n{{FuncArg|string|what|description of the trace event: \"flush\", \"start\", \"stop\", \"abort\". Available for all events.}}<br/>\n{{FuncArg|number|tr|The trace number. Not available for flush.}}<br/>\n{{FuncArg|function|func|The function being traced. Available for start and abort.}}<br/>\n{{FuncArg|number|pc|The program counter - the bytecode number of the function being recorded (if this a Lua function). Available for start and abort.}}<br/>\n{{FuncArg|number|otr|start: the parent trace number if this is a side trace, abort: abort code}}<br/>\n{{FuncArg|string|oex|start: the exit number for the parent trace, abort: abort reason (string)}}<br/>\n\n*\"record\":\n{{FuncArg|number|tr|The trace number. Not available for flush.}}<br/>\n{{FuncArg|function|func|The function being traced. Available for start and abort.}}<br/>\n{{FuncArg|number|pc|The program counter - the bytecode number of the function being recorded (if this a Lua function). Available for start and abort.}}<br/>\n{{FuncArg|number|depth |The depth of the inlining of the current bytecode.}}<br/>\n\n*\"texit\":\n{{FuncArg|number|tr|The trace number. Not available for flush.}}<br/>\n{{FuncArg|number|ex|The exit number}}<br/>\n{{FuncArg|number|ngpr|The number of general-purpose and floating point registers that are active at the exit.}}<br/>\n{{FuncArg|number|nfpr|The number of general-purpose and floating point registers that are active at the exit.}}","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"},{"default":"","description":"The event to hook into.","isOptional":false,"isVarArg":false,"name":"event","type":"string"}],"description":"You can attach callbacks to a number of compiler events with jit.attach. The callback can be called:\n\n*when a function has been compiled to bytecode (\"bc\");\n*when trace recording starts or stops (\"trace\");\n*as a trace is being recorded (\"record\");\n*or when a trace exits through a side exit (\"texit\").\n\nSet a callback with jit.attach(callback, \"event\") and clear the same callback with jit.attach(callback)\n\n{{Warning|This function isn't officially documented on LuJIT wiki, use it at your own risk.}}","examples":[],"isConstructor":false,"name":"attach","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Flushes the whole cache of compiled code.","examples":[],"isConstructor":false,"name":"flush","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Disables LuaJIT Lua compilation.","examples":[],"isConstructor":false,"name":"off","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Enables LuaJIT Lua compilation.","examples":[],"isConstructor":false,"name":"on","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"=Not a function=\n\nThis is NOT a function, it's a variable containing the target OS name: \"Windows\", \"Linux\", \"OSX\", \"BSD\", \"POSIX\" or \"Other\".\n\n[[Category:Functions]]\n[[Category:jit]]\n[[Category:Shared]]\n[[Category:Menu]]\n[[Category:Documented_Functions]]\n[[Category:Library Functions]]","examples":[],"isConstructor":false,"name":"os","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the status of the JIT compiler and the current optimizations enabled.","examples":[],"isConstructor":false,"name":"status","realm":"shared and menu","returns":[{"description":"Is JIT enabled","type":"boolean"},{"description":"Strings for CPU-specific features and enabled optimizations","type":"any"}]},{"accessModifier":"public","arguments":[],"description":"=Not a function=\n\nThis is NOT a function, it's a variable containing the LuaJIT version string. This is \"LuaJIT 2.0.4\" in GMod.\n\n[[Category:Functions]]\n[[Category:jit]]\n[[Category:Shared]]\n[[Category:Menu]]\n[[Category:Documented_Functions]]\n[[Category:Library Functions]]","examples":[],"isConstructor":false,"name":"version","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"=Not a function=\n\nThis is NOT a function, it's a variable containing the version number of the LuaJIT core. Version xx.yy.zz is represented by the decimal number xxyyzz. In GMod this is 20004.\n\n[[Category:Functions]]\n[[Category:jit]]\n[[Category:Shared]]\n[[Category:Menu]]\n[[Category:Documented_Functions]]\n[[Category:Library Functions]]","examples":[],"isConstructor":false,"name":"version_num","realm":"shared and menu","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"jit"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"DModelPanel is a VGUI element that projects a 3D model onto a 2D plane.","examples":[{"code":"local Panel = vgui.Create( \"DPanel\" )\nPanel:SetPos( 10, 10 )\nPanel:SetSize( 200, 200 )\n\nlocal icon = vgui.Create( \"DModelPanel\", Panel )\nicon:SetSize( 200, 200 )\nicon:SetModel( LocalPlayer():GetModel() )","description":"Creates a DModelPanel and sets its model to your playermodel."},{"code":"local Panel = vgui.Create( \"DPanel\" )\nPanel:SetPos( 10, 10 )\nPanel:SetSize( 200, 200 )\n\nlocal icon = vgui.Create( \"DModelPanel\", Panel )\nicon:SetSize(200,200)\nicon:SetModel( \"models/player/alyx.mdl\" ) -- you can only change colors on playermodels\nfunction icon:LayoutEntity( Entity ) return end -- disables default rotation\nfunction icon.Entity:GetPlayerColor() return Vector (1, 0, 0) end --we need to set it to a Vector not a Color, so the values are normal RGB values divided by 255.","description":"Creates a DModelPanel and sets its model to the Alyx playermodel, then changes its player color to red. Also disables default rotation animation."}],"extends":"DButton","functions":[{"accessModifier":"public","arguments":[],"description":"{{Internal}} Used by the DModelPanel's paint hook to draw the model and background.","examples":[],"isConstructor":false,"name":"DrawModel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the ambient lighting used on the rendered entity.","examples":[{"code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nprint(mdl:GetAmbientLight())","description":"Prints out the default ambient lighting used on models."}],"isConstructor":false,"name":"GetAmbientLight","realm":"client","returns":[{"description":"The color of the ambient lighting.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the panel entity should be animated when the default {{ClassFunction|DModelPanel|LayoutEntity}} function is called.","examples":[{"code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nprint(mdl:GetAnimated())","description":"Prints out the default boolean value for this function."}],"isConstructor":false,"name":"GetAnimated","realm":"client","returns":[{"description":"True if the panel entity can be animated with {{ClassFunction|Entity|SetSequence}} directly, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the animation speed of the panel entity, see {{ClassFunction|DModelPanel|SetAnimSpeed}}.","examples":[{"code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nprint(mdl:GetAnimSpeed())","description":"Prints out the default animation speed."}],"isConstructor":false,"name":"GetAnimSpeed","realm":"client","returns":[{"description":"The animation speed.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the position of the model viewing camera.","examples":[{"code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nprint(mdl:GetCamPos())","description":"Prints out the default camera position."}],"isConstructor":false,"name":"GetCamPos","realm":"client","returns":[{"description":"The position of the camera.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the color of the rendered entity.","examples":[{"code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nprint(mdl:GetColor())","description":"Prints out the default entity color."}],"isConstructor":false,"name":"GetColor","realm":"client","returns":[{"description":"The color of the entity, see {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity being rendered by the model panel.","examples":[{"code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(200, 200)\n\t\nlocal mdl = vgui.Create(\"DModelPanel\", BGPanel)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/antlion.mdl\")\nmdl:SetLookAt(Vector(0, 0, 20))\n\nmdl:GetEntity():SetSkin(1)","description":"Creates an antlion model panel and sets the antlion's skin to 1."}],"isConstructor":false,"name":"GetEntity","realm":"client","returns":[{"description":"The rendered entity (client-side)","type":"CSEnt"}]},{"accessModifier":"public","arguments":[],"description":"Returns the FOV (field of view) the camera is using.","examples":[{"code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nprint(mdl:GetFOV())","description":"Prints out the default camera FOV."}],"isConstructor":false,"name":"GetFOV","realm":"client","returns":[{"description":"The FOV of the camera.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the angles of the model viewing camera. Is '''nil''' until changed with {{ClassFunction|DModelPanel|SetLookAng}}.","examples":[{"code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nprint(mdl:GetLookAng())","description":"Prints out the default camera angles."}],"isConstructor":false,"name":"GetLookAng","realm":"client","returns":[{"description":"The angles of the camera.","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Returns the position the viewing camera is pointing toward.","examples":[{"code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nprint(mdl:GetLookAt())","description":"Prints out the default camera look-at position."}],"isConstructor":false,"name":"GetLookAt","realm":"client","returns":[{"description":"The position the camera is pointing toward.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Gets the model of the rendered entity.","examples":[],"isConstructor":false,"name":"GetModel","realm":"client","returns":[{"description":"The model of the rendered entity.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity that is being rendered.","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"}],"description":"{{Internal}} By default, this function slowly rotates and animates the entity being rendered.\n\nIf you want to change this behavior, you should override it.","examples":[{"code":"local modelPanel = vgui.Create( \"DModelPanel\" )\nmodelPanel:SetPos( 0, 0 )\nmodelPanel:SetSize( 200, 200 )\nmodelPanel:SetModel( \"models/player/kleiner.mdl\" )\n\nfunction modelPanel:LayoutEntity( ent )\n\t-- do nothing\nend","description":"Stops the rendered entity from rotating."}],"isConstructor":false,"name":"LayoutEntity","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The clientside entity of the {{Type|DModelPanel}} that has been drawn.","isOptional":false,"isVarArg":false,"name":"ent","type":"DModelPanel"}],"description":"Called when the entity of the {{Type|DModelPanel}} was drawn.\n\nThis is a rendering hook with 3d drawing context.","examples":[],"isConstructor":false,"name":"PostDrawModel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The clientside entity of the {{Type|DModelPanel}} that has been drawn.","isOptional":false,"isVarArg":false,"name":"ent","type":"DModelPanel"}],"description":"Called '''before''' the entity of the {{Type|DModelPanel}} is drawn.","examples":[],"isConstructor":false,"name":"PreDrawModel","realm":"client","returns":[{"description":"Return false to stop the entity from being drawn. This will also cause {{ClassFunction|DModelPanel|PostDrawModel}} to stop being called.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"This function is used in the '''DModelPanel:LayoutEntity'''. It will set the active model to the last set animation using {{ClassFunction|Entity|SetSequence}}. By default, it is the walking animation.","examples":[{"code":"local ModelPanel = vgui.Create( \"DModelPanel\", Panel )\nModelPanel:SetModel( \"models/player/alyx.mdl\" )\nfunction ModelPanel:LayoutEntity( ent )\n     ModelPanel:RunAnimation()\nend","description":"Sets the model to alyx and puts her in a walking animation"}],"isConstructor":false,"name":"RunAnimation","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The color of the ambient lighting.","isOptional":false,"isVarArg":false,"name":"color","type":"table"}],"description":"Sets the ambient lighting used on the rendered entity.","examples":[{"code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(200, 200)\n\t\nlocal mdl = vgui.Create(\"DModelPanel\", BGPanel)\nmdl:SetSize(BGPanel:GetSize())\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\n\nmdl:SetCamPos(Vector(15, 15, 0))\nmdl:SetLookAt(Vector(0, 0, 0))\n\nmdl:SetAmbientLight(Color(255, 0, 0, 255))","description":"Displays a model panel with a watermelon that has red ambient lighting."}],"isConstructor":false,"name":"SetAmbientLight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to animate, false otherwise.","isOptional":false,"isVarArg":false,"name":"animated","type":"boolean"}],"description":"Sets whether or not to animate the entity when the default {{ClassFunction|DModelPanel|LayoutEntity}} is called.","examples":[{"code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(400, 200)\n\t\n-- Left panel\nlocal mdl1 = vgui.Create(\"DModelPanel\", BGPanel)\nmdl1:SetPos(0, 0)\nmdl1:SetSize(200, 200)\nmdl1:SetModel(\"models/player/mossman.mdl\")\nmdl1:SetCamPos(Vector(40, 40, 40))\n\nmdl1:SetAnimated(false)\n\n-- Right panel\nlocal mdl2 = vgui.Create(\"DModelPanel\", BGPanel)\nmdl2:SetPos(200, 0)\nmdl2:SetSize(200, 200)\nmdl2:SetModel(\"models/player/mossman.mdl\")\nmdl2:SetCamPos(Vector(40, 40, 40))\n\nmdl2:SetAnimated(true)\n\n-- Dance sequence\t\nlocal dance = mdl1:GetEntity():LookupSequence(\"taunt_dance\")\n\n-- Make both dance\nmdl1:GetEntity():SetSequence(dance)\nmdl2:GetEntity():SetSequence(dance)","description":"A comparison between 2 model panels: the first one has ''animated'' set to false and the second one has it set to true. Both are using the default {{ClassFunction|DModelPanel|LayoutEntity}} method."}],"isConstructor":false,"name":"SetAnimated","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The animation speed.","isOptional":false,"isVarArg":false,"name":"animSpeed","type":"number"}],"description":"Sets the speed used by {{ClassFunction|DModelPanel|RunAnimation}} to advance frame on an entity sequence.\n\n{{Note|{{ClassFunction|Entity|FrameAdvance}} doesn't seem to have any functioning arguments and therefore changing this will not have any affect on the panel entity's sequence speed without reimplementation. It only affects the value returned by {{ClassFunction|DModelPanel|GetAnimSpeed}}}}","examples":[{"code":"local mdl = vgui.Create(\"DModelPanel\")\nmdl:SetPos(20, 20)\nmdl:SetSize(200, 200)\nmdl:SetModel(\"models/alyx.mdl\")\n\n-- Play sequence twice as fast\nmdl:SetAnimSpeed(2)\n\t\n-- Make Alyx run\nmdl:GetEntity():SetSequence(mdl:GetEntity():LookupSequence(\"run_all\"))\n\n-- Play animation\nfunction mdl:LayoutEntity(ent)\n\n\t-- Playback rate based on anim speed\n\tent:SetPlaybackRate(self:GetAnimSpeed())\n\t\n\t-- Advance frame\n\tent:FrameAdvance()\n\nend","description":"A reimplementation of {{ClassFunction|DModelPanel|LayoutEntity}} which will modify the entity's sequence playback rate based on the set animation speed. This example has Alyx run twice as fast as normal."}],"isConstructor":false,"name":"SetAnimSpeed","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to set the camera at.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Sets the position of the camera.","examples":[{"code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(200, 200)\nBGPanel:SetBackgroundColor(Color(0, 0, 0, 255))\n\t\nlocal mdl = vgui.Create(\"DModelPanel\", BGPanel)\nmdl:SetSize(BGPanel:GetSize())\nmdl:SetModel(\"models/player/gman_high.mdl\")\n\nfunction mdl:LayoutEntity(ent)\n\tent:SetSequence(ent:LookupSequence(\"menu_gman\"))\n\tmdl:RunAnimation()\t\t\n\treturn\nend\n\nlocal eyepos = mdl.Entity:GetBonePosition(mdl.Entity:LookupBone(\"ValveBiped.Bip01_Head1\"))\n\neyepos:Add(Vector(0, 0, 2))\t-- Move up slightly\n\nmdl:SetLookAt(eyepos)\n\nmdl:SetCamPos(eyepos-Vector(-12, 0, 0))\t-- Move cam in front of eyes\n\nmdl.Entity:SetEyeTarget(eyepos-Vector(-12, 0, 0))","description":"Creates a model panel focused on Gman's face while he adjusts his tie."},{"code":"local mdlpnl = vgui.Create( \"DModelPanel\" )\n\nlocal mn, mx = mdlpnl.Entity:GetRenderBounds()\nlocal size = 0\nsize = math.max( size, math.abs(mn.x) + math.abs(mx.x) )\nsize = math.max( size, math.abs(mn.y) + math.abs(mx.y) )\nsize = math.max( size, math.abs(mn.z) + math.abs(mx.z) )\n\nmdlpnl:SetFOV( 45 )\nmdlpnl:SetCamPos( Vector( size, size, size ) )\nmdlpnl:SetLookAt( (mn + mx) * 0.5 )","description":"Sets a model panel's camera position so the model won't go outside it"}],"isConstructor":false,"name":"SetCamPos","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The render color of the entity.","isOptional":false,"isVarArg":false,"name":"color","type":"table"}],"description":"Sets the color of the rendered entity.\n\n{{Note|This does not work on Garry's Mod player models since they use a different color system. To modify a player model color, see Example 2 on the {{Type|DModelPanel}} page}}","examples":[{"code":"local panel = vgui.Create(\"DPanel\")\npanel:SetPos(20, 20)\npanel:SetSize(200, 200)\n\t\nlocal mdl = vgui.Create(\"DModelPanel\", panel)\nmdl:SetSize(panel:GetSize())\nmdl:SetModel(\"models/props_junk/watermelon01.mdl\")\nmdl:SetLookAt(Vector(0, 0, 0))\nmdl:SetCamPos(Vector(10, 10, 10))\nmdl:SetColor(Color(255, 0, 0))","description":"Creates a model panel with a red watermelon inside."}],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The light direction, see {{Enum|BOX}}.","isOptional":false,"isVarArg":false,"name":"direction","type":"BOX"},{"default":"","description":"The color of the directional lighting.","isOptional":false,"isVarArg":false,"name":"color","type":"table"}],"description":"Sets the directional lighting used on the rendered entity.","examples":[{"code":"-- Black background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(400, 400)\nBGPanel:SetBackgroundColor(Color(0, 0, 0, 255))\n\nlocal mdl = vgui.Create(\"DModelPanel\", BGPanel)\nmdl:SetSize(BGPanel:GetSize())\n\t\n-- Setup model and camera\nmdl:SetModel(\"models/kleiner.mdl\")\nmdl:SetCamPos(Vector(20, 20, 60))\nmdl:SetLookAt(Vector(0, 0, 60))\n\n-- Make Kleiner pace\nmdl:GetEntity():SetSequence(mdl:GetEntity():LookupSequence(\"pace_all\"))\n\n-- Disable directional lighting\nmdl:SetDirectionalLight(BOX_TOP, Color(0, 0, 0))\nmdl:SetDirectionalLight(BOX_FRONT, Color(0, 0, 0))\n\n-- Spin around faster and play animation\nfunction mdl:LayoutEntity(ent)\n\tent:SetAngles(Angle( 0, self.LastPaint*60,  0))\n\tself:RunAnimation()\nend","description":"Displays a model panel with no directional lighting. Dr. Kleiner is only lit by the ambient light set by {{ClassFunction|DModelPanel|SetAmbientLight}}."}],"isConstructor":false,"name":"SetDirectionalLight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new panel entity.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Sets the entity to be rendered by the model panel.\n\n{{Note|If you set ''ent'' to a shared entity you must set ''ent'' to nil before removing this panel or else a \"Trying to remove server entity on client!\" error is thrown}}","examples":[{"code":"g_Breen = nil\t-- Breen NPC\n\nif(SERVER) then\n\t-- Broadcast propaganda to clients\n\tutil.AddNetworkString(\"BreencastSentence\")\nend\n\n-- Broadcast Breen to clients each time he starts a new sentence.\nfunction GM:EntityEmitSound(data)\n\n\tif(data.Entity == g_Breen) then\n\t\n\t\tlocal st, en = string.find(data.SoundName, \"vo/\")\n\t\tlocal sentence = \"sound/\"..string.sub(data.SoundName, st)\t-- Properly format sound name\n\t\n\t\tnet.Start(\"BreencastSentence\")\n\t\t\tnet.WriteEntity(data.Entity)\n\t\t\tnet.WriteString(sentence)\n\t\tnet.Broadcast()\n\t\t\n\tend\n\t\n\treturn nil\n\t\nend\n\nif(CLIENT) then\n\n\t-- Receive latest breencast sound byte and update screen\n\tfunction BreencastSentence()\n\t\n\t\t-- Client-side reference to Breen NPC\n\t\tg_Breen = net.ReadEntity()\n\t\t\n\t\tlocal soundname = net.ReadString()\n\t\t\n\t\t-- Play sound byte\n\t\tsound.PlayFile(soundname, \"\", function(sentence, errnum, err)\n\t\t\n\t\t\tif(err) then\n\t\t\t\tError(err)\n\t\t\telse\n\t\t\t\tsentence:Play()\n\t\t\t\tStartBreencast()\t-- Update breencast monitor\n\t\t\tend\n\t\t\n\t\tend)\n\t\n\tend\n\t\n\tnet.Receive(\"BreencastSentence\", BreencastSentence)\n\t\nend\n\n-- Call this server-side to begin Breencast\nfunction StartBreencast()\n\n\tif(SERVER) then\n\n\t\t-- Remove existing Breen NPC\n\t\tif(g_Breen && IsValid(g_Breen)) then\n\t\t\tg_Breen:Remove()\n\t\tend\n\n\t\t-- Create new Breen NPC\n\t\tg_Breen = ents.Create(\"npc_breen\")\n\t\tg_Breen:Spawn()\n\t\t\n\t\t-- Hide NPC everywhere except inside model panel\n\t\tg_Breen:SetSaveValue(\"m_takedamage\", 0)\n\t\tg_Breen:SetMoveType(MOVETYPE_NONE)\n\t\tg_Breen:SetSolid(SOLID_NONE)\n\t\tg_Breen:SetRenderMode(RENDERMODE_TRANSALPHA)\n\t\tg_Breen:SetColor(Color(255, 255, 255, 0))\n\t\t\n\t\t-- Play propaganda\t\t\n\t\tg_Breen:PlayScene(\"scenes/breencast/instinct_tv.vcd\")\n\t\tg_Breen:SetEyeTarget(Vector(100, 0, 60))\n\n\telseif(CLIENT) then\n\n\t\t-- Remove existing panel and clear model entity to prevent error\n\t\tif(BGPanel) then\n\t\t\tif(BGPanel:GetChild(0)) then BGPanel:GetChild(0):SetEntity(nil) end\n\t\t\tBGPanel:Remove()\n\t\t\tBGPanel = nil\t\t\t\n\t\tend\n\t\t\n\t\t-- Don't continue if Breen is undefined\n\t\tif(!g_Breen or !IsValid(g_Breen)) then return end\n\t\t\n\t\t-- Black background panel\n\t\tBGPanel = vgui.Create(\"DPanel\")\n\t\tBGPanel:SetPos(20, 20)\n\t\tBGPanel:SetSize(200, 200)\n\t\tBGPanel:SetBackgroundColor(Color(0, 0, 0, 255))\n\t\t\n\t\t-- Model panel\n\t\tlocal mdl = vgui.Create(\"DModelPanel\", BGPanel)\n\t\tmdl:SetSize(BGPanel:GetSize())\n\t\tmdl:SetFOV(40)\t-- Default FOV is too jarring\n\t\t\n\t\tmdl:SetEntity(g_Breen)\t-- Add Breen NPC to model panel\n\t\t\n\t\t-- Focus camera on Breen's head\n\t\tfunction mdl:LayoutEntity(ent)\n\t\t\n\t\t\t-- If Breen has been removed somehow then remove screen\n\t\t\tif(!IsValid(ent)) then\n\t\t\t\tif(mdl:GetParent()) then mdl:GetParent():Remove() end\n\t\t\t\treturn\n\t\t\tend\n\t\t\n\t\t\tlocal eyepos = ent:GetBonePosition(ent:LookupBone(\"ValveBiped.Bip01_Head1\"))\n\t\t\n\t\t\tmdl:SetLookAt(eyepos)\n\t\t\tmdl:SetCamPos(eyepos+Vector(35, 0, -4))\n\t\t\t\n\t\t\treturn\n\t\t\t\n\t\tend\n\t\t\n\tend\n\t\nend","description":"Implementation of a function called '''StartBreencast''' which makes Dr. Breen recite his instinct speech within a model panel that's displayed to all clients. This mainly demonstrates how even shared entities such as NPCs can be used with {{Type|DModelPanel}} as long as they're networked properly."}],"isConstructor":false,"name":"SetEntity","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The field of view value.","isOptional":false,"isVarArg":false,"name":"fov","type":"number"}],"description":"Sets the panel camera's FOV (field of view).","examples":[{"code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(200, 200)\n\t\nlocal mdl = vgui.Create(\"DModelPanel\", BGPanel)\nmdl:Dock(FILL)\nmdl:SetModel(\"models/player/barney.mdl\")\n\nlocal fov = 10\t-- starting value\nlocal offset = 0.1\t-- amount to increment by\n\nfunction mdl:LayoutEntity(ent)\n\t\n\tmdl:SetFOV(fov)\t-- update FOV\n\t\n\tfov = fov + offset\t-- increment\n\t\n\tif(fov >= 120 or fov <= 10) then\n\t\toffset = offset*-1\t-- inverse increment amount\n\tend\n\t\n\tent:SetSequence(ent:LookupSequence(\"taunt_muscle\"))\t-- FLEX\n\tif(ent:GetCycle() >= 0.95) then ent:SetCycle(0.05) end\t-- YOUR\n\tmdl:RunAnimation()\t-- MUSCLES\n\t\nend","description":"The best FOV demo you've ever seen."}],"isConstructor":false,"name":"SetFOV","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The angles to set the camera to.","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"Sets the angles of the camera.","examples":[{"code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(400, 400)\nBGPanel:SetBackgroundColor(Color(0, 0, 0, 255))\n\nlocal mdl = vgui.Create(\"DModelPanel\", BGPanel)\nmdl:SetSize(BGPanel:GetSize())\nmdl:SetModel(\"models/eli.mdl\")\n\n-- Position camera\nmdl:SetCamPos(Vector(0, 60, 36))\n\nlocal yaw = 0\n\nfunction mdl:LayoutEntity(ent)\n\n\t-- Point camera toward the look pos\n\tlocal lookAng = (self.vLookatPos-self.vCamPos):Angle()\n\t\n\t-- Rotate the look angles based on incrementing yaw value\n\tlookAng:RotateAroundAxis(Vector(0, 1, 0), yaw)\n\t\n\t-- Set camera look angles\n\tself:SetLookAng(lookAng)\n\t\n\t-- Make entity rotate like normal\n\tent:SetAngles(Angle(0, RealTime()*30,  0))\n\t\n\tyaw = yaw + 1\n\nend","description":"Creates a model panel with Eli rotating normally and the camera angles rotating sideways."}],"isConstructor":false,"name":"SetLookAng","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to orient the camera toward.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Makes the panel's camera face the given position.","examples":[{"code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(200, 200)\t\t\n\t\nlocal mdl = vgui.Create(\"DModelPanel\", BGPanel)\nmdl:SetSize(BGPanel:GetSize())\nmdl:SetModel(\"models/player/odessa.mdl\")\n\nfunction mdl:LayoutEntity( Entity ) return end\t-- Disable cam rotation\n\nlocal headpos = mdl.Entity:GetBonePosition(mdl.Entity:LookupBone(\"ValveBiped.Bip01_Head1\"))\nmdl:SetLookAt(headpos)\n\nmdl:SetCamPos(headpos-Vector(-15, 0, 0))\t-- Move cam in front of face\n\n--mdl.Entity:SetEyeTarget(headpos-Vector(-15, 0, 0))\n\n-- ^^ Makes Odessa look at the camera\n-- Commented out because the result is funnier without this","description":"Creates a model panel focused on Colonel Odessa Cubbage's face."}],"isConstructor":false,"name":"SetLookAt","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The model to apply to the entity","isOptional":false,"isVarArg":false,"name":"model","type":"string"}],"description":"Creates a new DModelPanel with the Kleiner playermodel.","examples":[{"code":"local modelPanel = vgui.Create( \"DModelPanel\" )\nmodelPanel:SetPos( 0, 0 )\nmodelPanel:SetSize( 200, 200 )\nmodelPanel:SetModel( \"models/player/kleiner.mdl\" )","description":"Creates a new DModelPanel with the Kleiner playermodel."}],"isConstructor":false,"name":"SetModel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path to the scene file. (.vcd)","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"","examples":[],"isConstructor":false,"name":"StartScene","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the actual color of the text.\n\nSee also {{ClassFunction|DLabel|GetTextColor}} and {{ClassFunction|DLabel|GetTextStyleColor}}.","examples":[],"isConstructor":false,"name":"GetColor","realm":"client","returns":[{"description":"The the actual color of the text.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The color to set. Uses the Color structure.","isOptional":false,"isVarArg":false,"name":"color","type":"table"}],"description":"Changes color of label. Alias of {{ClassFunction|DLabel|SetTextColor}}.","examples":[{"code":"local DLabel = vgui.Create( \"DLabel\" )\nDLabel:SetPos( 90, 50 )\nDLabel:SetColor(Color(255, 0, 0))\nDLabel:SetText( \"Hello world.\" )\nDLabel:SizeToContents()","description":"Creates a label and changes it color to red."}],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path of the model to set","isOptional":false,"isVarArg":false,"name":"ModelPath","type":"string"},{"default":"0","description":"The skin to set","isOptional":true,"isVarArg":false,"name":"skin","type":"number"},{"default":"\"\"","description":"The body groups to set. Each single-digit number in the string represents a separate bodygroup, '''up to 9 in total'''.","isOptional":true,"isVarArg":false,"name":"bodygroups","type":"string"}],"description":"[[Category:ModelImage]][[Category:SpawnIcon]]Sets the model to be displayed by {{Type|SpawnIcon}}.\n\n{{Note|This must be called after setting size if you wish to use a different size spawnicon}}","examples":[],"isConstructor":false,"name":"SetModel","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DModelPanel"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Deprecated|This is derived from the deprecated {{Type|DPanelList}}.}} A vertical list of models.","examples":[{"code":"-- Create a table of models\nlocal models = {\n\t[\"models/props_c17/oildrum001_explosive.mdl\"] = {}, \n\t[\"models/props_c17/oildrum001.mdl\"] = {}, \n\t[\"models/props_junk/TrafficCone001a.mdl\"] = {},\n\t[\"models/props_c17/gravestone004a.mdl\"] = {}\n}\n\t\nlocal frame = vgui.Create(\"DFrame\")\nframe:SetSize(220, 220)\nframe:SetTitle(\"DModelSelect Example\")\nframe:MakePopup()\nframe:Center()\n\nlocal mselect = vgui.Create( \"DModelSelect\", frame ) \nmselect:SetModelList( models, \"\", false, true )\nmselect:SetSize(150, 150)\nmselect:Center()","description":"Creates a DModelSelect within a {{Type|DFrame}} and adds four models."}],"extends":"DPanelSelect","functions":[{"accessModifier":"public","arguments":[{"default":"2","description":"Basically how many rows of 64x64 px spawnicons should fit in this DModelSelect","isOptional":true,"isVarArg":false,"name":"num","type":"number"}],"description":"Sets the height of the panel '''in the amount of 64px spawnicons'''.\n\nOverrides {{ClassFunction|Panel|SetHeight}}.","examples":[],"isConstructor":false,"name":"SetHeight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Each key is a model path, the value is a kay-value table where they key is a convar name and value is the value to set to that convar.","isOptional":false,"isVarArg":false,"name":"models","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"convar","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"dontSort","type":"boolean"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"DontCallListConVars","type":"boolean"}],"description":"Called to set the list of models within the panel element.","examples":[],"isConstructor":false,"name":"SetModelList","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The height to be set.","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Sets the height of the panel.\n\nCalls {{HookFunction|PANEL|OnSizeChanged}} and marks this panel for layout ({{ClassFunction|Panel|InvalidateLayout}}).<br/>\nSee also {{ClassFunction|Panel|SetSize}}.","examples":[],"isConstructor":false,"name":"SetHeight","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DModelSelect"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The killicon library is used to add to and control the icons that appear in the top right of your screen when a player is killed.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Weapon or entity class","isOptional":false,"isVarArg":false,"name":"classRef","type":"string"},{"default":"","description":"Path to the texture","isOptional":false,"isVarArg":false,"name":"texture","type":"string"},{"default":"","description":"Color of the kill icon","isOptional":false,"isVarArg":false,"name":"color","type":"table"}],"description":"Creates new kill icon using a texture.","examples":[{"code":"killicon.Add( \"default\", \"HUD/killicons/default\", Color( 255, 80, 0, 255 ) )","description":"Creates default killicon."}],"isConstructor":false,"name":"Add","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New class of the kill icon","isOptional":false,"isVarArg":false,"name":"new_class","type":"string"},{"default":"","description":"Already existing kill icon class","isOptional":false,"isVarArg":false,"name":"existing_class","type":"string"}],"description":"Creates kill icon from existing one.","examples":[{"code":"killicon.AddAlias( \"prop_ragdoll\", \"prop_physics\" )","description":"Copies prop_physics kill icon to prop_ragdoll."}],"isConstructor":false,"name":"AddAlias","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Weapon or entity class","isOptional":false,"isVarArg":false,"name":"classRef","type":"string"},{"default":"","description":"Font to be used","isOptional":false,"isVarArg":false,"name":"font","type":"string"},{"default":"","description":"The symbol to be used","isOptional":false,"isVarArg":false,"name":"symbol","type":"string"},{"default":"","description":"Color of the killicon","isOptional":false,"isVarArg":false,"name":"color","type":"table"}],"description":"Adds kill icon for given weapon/entity class using special font.","examples":[{"code":"killicon.AddFont( \"weapon_pistol\", \"HL2MPTypeDeath\", \"-\", Color( 255, 80, 0, 255 ) )","description":"Example of using the function. Adds pistol kill icon."}],"isConstructor":false,"name":"AddFont","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"X coordinate of the icon","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"Y coordinate of the icon","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"Classname of the kill icon","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Alpha/transparency value ( 0 - 255 ) of the icon","isOptional":false,"isVarArg":false,"name":"alpha","type":"number"}],"description":"Draws a kill icon.","examples":[],"isConstructor":false,"name":"Draw","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The class to test","isOptional":false,"isVarArg":false,"name":"classRef","type":"string"}],"description":"Checks if kill icon exists for given class.","examples":[],"isConstructor":false,"name":"Exists","realm":"client","returns":[{"description":"Returns true if kill icon exists","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Classname of the kill icon","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Returns the size of a kill icon.","examples":[],"isConstructor":false,"name":"GetSize","realm":"client","returns":[{"description":"Width of the kill icon","type":"number"},{"description":"Height of the kill icon","type":"number"}]}],"isHook":false,"isPureAbstract":false,"name":"killicon"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A combination of {{Type|DModelSelect}} and {{Type|DPropertySheet}}.","examples":[],"extends":"DPropertySheet","functions":[],"isHook":false,"isPureAbstract":true,"name":"DModelSelectMulti"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The language library is used for translation.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The key for this phrase, without the preceding \"#\".","isOptional":false,"isVarArg":false,"name":"placeholder","type":"string"},{"default":"","description":"The phrase that should be displayed whenever this key is used.","isOptional":false,"isVarArg":false,"name":"fulltext","type":"string"}],"description":"Adds a language item. Language placeholders preceded with \"#\" are replaced with full text in Garry's Mod once registered with this function.","examples":[{"code":"language.Add(\"Tool_cooltool_name\", \"The really cool tool\")\nlanguage.Add(\"Tool_cooltool_desc\", \"Do some random cool stuff.\")\nlanguage.Add(\"Tool_cooltool_0\", \"Left-click: Cool Stuff. Right-click: Nothing.\")\nlanguage.Add(\"Undone_cooltool\", \"Cool stuff has been undone.\")","description":"Small excerpt from a STOOL named cooltool. It has been registered as cooltool."}],"isConstructor":false,"name":"Add","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The phrase to translate","isOptional":false,"isVarArg":false,"name":"phrase","type":"string"}],"description":"Retrieves the translated version of inputted string. Useful for concentrating multiple translated strings.","examples":[{"code":"print( \"Our phrase is: \" .. language.GetPhrase( \"limit_physgun\" ) )","description":"An example on usage of this function."}],"isConstructor":false,"name":"GetPhrase","realm":"client and menu","returns":[{"description":"The translated phrase, or the input string if no translation was found","type":"string"}]}],"isHook":false,"isPureAbstract":false,"name":"language"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The list library allows you add and retrieve values to and from lists. The list library is basically a fancy wrapper for a table, but with much more limited functionality.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The list identifier","isOptional":false,"isVarArg":false,"name":"identifier","type":"string"},{"default":"","description":"The item to add to the list","isOptional":false,"isVarArg":false,"name":"item","type":"any"}],"description":"Adds an item to a named list","examples":[{"code":"","description":""}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"List to search through","isOptional":false,"isVarArg":false,"name":"list","type":"string"},{"default":"","description":"The value to test","isOptional":false,"isVarArg":false,"name":"value","type":"any"}],"description":"Returns true if the list contains the value. (as a value - not a key)","examples":[],"isConstructor":false,"name":"Contains","realm":"shared and menu","returns":[{"description":"Returns true if the list contains the value, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The list identifier","isOptional":false,"isVarArg":false,"name":"identifier","type":"string"}],"description":"Returns a copy of the list stored at identifier","examples":[{"code":"","description":""}],"isConstructor":false,"name":"Get","realm":"shared and menu","returns":[{"description":"listCopy","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The list identifier","isOptional":false,"isVarArg":false,"name":"identifier","type":"string"}],"description":"Returns the actual table of the list stored at identifier. Modifying this will affect the stored list","examples":[],"isConstructor":false,"name":"GetForEdit","realm":"shared and menu","returns":[{"description":"The actual list","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The list identifier","isOptional":false,"isVarArg":false,"name":"identifier","type":"string"},{"default":"","description":"The key in the list to set","isOptional":false,"isVarArg":false,"name":"key","type":"any"},{"default":"","description":"The item to set to the list as key","isOptional":false,"isVarArg":false,"name":"item","type":"any"}],"description":"Sets a specific position in the named list to a value.","examples":[{"code":"-- Lost Coast\nlist.Set(\"NPC\", \"npc_fisherman\", {\n\tName = \"Fisherman\",\n\tClass = \"npc_fisherman\",\n\tWeapons = { \"weapon_oldmanharpoon\" },\n\tCategory = Category\n})","description":"Adds an NPC to the spawnmenu NPC list with the name \"Fisherman\", classname of \"npc_fisherman\" and the default weapon of \"weapon_oldmanharpoon\""},{"code":"list.Set( \"DesktopWindows\", \"My Custom Context Menu Icon\", {\n\ttitle = \"Context Menu Icon\",\n\ticon = \"icon64/icon.png\",\n\tinit = function( icon, window )\n\t\t--Your code here\n\tend\n} )","description":"Adds a new \"Desktop Widget\" to the Context Menu (C Menu). (This is how Player Model selection is added)"}],"isConstructor":false,"name":"Set","realm":"shared and menu","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"list"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The markup library only contains a single function to create a {{Type|MarkupObject}}.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The markup to be parsed.","isOptional":false,"isVarArg":false,"name":"markup","type":"string"},{"default":"","description":"The max width of the output","isOptional":false,"isVarArg":false,"name":"maxwidth","type":"number"}],"description":"Parses markup into a {{Type| MarkupObject}}. Currently, this only supports fonts and colors as demonstrated in the example.","examples":[{"code":"local parsed = markup.Parse(\"<font=Default>changed font</font>\\n<colour=255,0,255,255>changed colour</colour>\")\n\nhook.Add(\"HUDPaint\", \"MarkupTest\", function()\n parsed:Draw(100, 100, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)\nend)","description":"Renders a markup string on the HUD."}],"isConstructor":false,"name":"Parse","realm":"client","returns":[{"description":"parsed","type":"MarkupObject"}]}],"isHook":false,"isPureAbstract":false,"name":"markup"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A panel that fades its contents in and out once, like a notification.","examples":[{"code":"--Notification panel\nlocal NotifyPanel = vgui.Create(\"DNotify\")\nNotifyPanel:SetPos(10, 5)\nNotifyPanel:SetSize(200, 40)\n\n-- Text label\nlocal lbl = vgui.Create(\"DLabel\", NotifyPanel)\nlbl:Dock(FILL)\nlbl:SetText(\"This is a notification.\")\nlbl:SetFont(\"GModNotify\")\nlbl:SetDark(true)\n\n-- Add the label to the notification and begin fading\nNotifyPanel:AddItem(lbl)","description":"Creates a notification panel with a text label inside."},{"code":"-- Notification panel\nlocal NotifyPanel = vgui.Create(\"DNotify\")\nNotifyPanel:SetPos(15, 15)\nNotifyPanel:SetSize(150, 210)\n\n-- Gray background panel\nlocal bg = vgui.Create(\"DPanel\", NotifyPanel)\nbg:Dock(FILL)\nbg:SetBackgroundColor(Color(64, 64, 64))\n\n-- Image of Dr. Kleiner (parented to background panel)\nlocal img = vgui.Create(\"DImage\", bg)\nimg:SetPos(11, 11)\nimg:SetSize(128, 128)\nimg:SetImage(\"entities/npc_kleiner.png\")\n\n-- A yellow label message (parented to background panel)\nlocal lbl = vgui.Create(\"DLabel\", bg)\nlbl:SetPos(11, 136)\nlbl:SetSize(128, 72)\nlbl:SetText(\"Remember to wear your HEV suit!\")\nlbl:SetTextColor(Color(255, 200, 0))\nlbl:SetFont(\"GModNotify\")\nlbl:SetWrap(true)\n\n-- Add the background panel to the notification\nNotifyPanel:AddItem(bg)","description":"Creates a notification panel of Dr. Kleiner reminding the player to wear their HEV suit."}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The panel to add","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"},{"default":"nil","description":"If set, overrides {{ClassFunction|DNotify|SetLife}}.","isOptional":true,"isVarArg":false,"name":"lifeLength","type":"number"}],"description":"Adds a panel to the notification","examples":[],"isConstructor":false,"name":"AddItem","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the current alignment of this notification panel. Set by {{ClassFunction|DNotify|SetAlignment}}.","examples":[],"isConstructor":false,"name":"GetAlignment","realm":"client","returns":[{"description":"The numpad alignment","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns all the items added with {{ClassFunction|DNotify|AddItem}}.","examples":[],"isConstructor":false,"name":"GetItems","realm":"client","returns":[{"description":"A table of {{Type|Panel}}s.","type":"Panel[]"}]},{"accessModifier":"public","arguments":[],"description":"Returns the display time in seconds of the DNotify. This is set with \n{{ClassFunction|DNotify|SetLife}}.","examples":[],"isConstructor":false,"name":"GetLife","realm":"client","returns":[{"description":"The display time in seconds.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the spacing between items set by {{ClassFunction|DNotify|SetSpacing}}.","examples":[],"isConstructor":false,"name":"GetSpacing","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"It's the Numpad alignment, 6 is right, 9 is top left, etc.","isOptional":false,"isVarArg":false,"name":"alignment","type":"number"}],"description":"Sets the alignment of the child panels in the notification","examples":[],"isConstructor":false,"name":"SetAlignment","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The time in seconds.","isOptional":false,"isVarArg":false,"name":"time","type":"number"}],"description":"Sets the display time in seconds for the DNotify.","examples":[],"isConstructor":false,"name":"SetLife","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"spacing","type":"number"}],"description":"Sets the spacing between child elements of the notification panel.","examples":[],"isConstructor":false,"name":"SetSpacing","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n{{Stub}}","examples":[],"isConstructor":false,"name":"Shuffle","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DNotify"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Choose a number from a number line, with zooming for precision. Zoom in by moving your mouse forward and moving back does the opposite. Looks like a blue circle until you click and hold on it","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 300, 250 )\nframe:Center()\nframe:MakePopup()\n\nlocal Scratch = vgui.Create( \"DNumberScratch\", frame )\nScratch:SetPos( 50, 50 )\nScratch:SetValue( 5 )\nScratch:SetMin( 0 )\nScratch:SetMax( 20 )","description":"Create the Number Scratch with the minimum number being 0 and the max being 20"}],"extends":"DImageButton","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"level","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"w","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"h","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"range","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"value","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"min","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"max","type":"number"}],"description":"{{Internal}}\n\nUsed by {{ClassFunction|DNumberScratch|DrawScreen}}.","examples":[],"isConstructor":false,"name":"DrawNotches","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"w","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"h","type":"number"}],"description":"{{Internal}}\n\nUsed by {{ClassFunction|DNumberScratch|PaintScratchWindow}}.","examples":[],"isConstructor":false,"name":"DrawScreen","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns whether this panel is active or not, i.e. if the player is currently changing its value.","examples":[],"isConstructor":false,"name":"GetActive","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the desired amount of numbers after the decimal point.","examples":[],"isConstructor":false,"name":"GetDecimals","realm":"client","returns":[{"description":"0 for whole numbers only, 1 for one number after the decimal point, etc.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the real value of the {{Type|DNumberScratch}} as a number.\n\nSee also {{ClassFunction|DNumberScratch|GetTextValue}} and {{ClassFunction|DNumberScratch|GetFraction}}.","examples":[],"isConstructor":false,"name":"GetFloatValue","realm":"client","returns":[{"description":"The real value of the {{Type|DNumberScratch}}","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the value of the {{Type|DNumberScratch}} as a fraction, a value between 0 and 1 where 0 is the minimum and 1 is the maximum value of the {{Type|DNumberScratch}}.\n\nSee also:\n* {{ClassFunction|DNumberScratch|GetTextValue}}\n* {{ClassFunction|DNumberScratch|GetFloatValue}}\n* {{ClassFunction|DNumberScratch|SetFraction}}","examples":[],"isConstructor":false,"name":"GetFraction","realm":"client","returns":[{"description":"A value between 0 and 1","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the maximum value that can be selected on the number scratch","examples":[],"isConstructor":false,"name":"GetMax","realm":"client","returns":[{"description":"The maximum value that can be selected on the number scratch","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the minimum value that can be selected on the number scratch","examples":[],"isConstructor":false,"name":"GetMin","realm":"client","returns":[{"description":"The minimum value that can be selected on the number scratch","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the range of the {{Type|DNumberScratch}}. Basically max value - min value.","examples":[],"isConstructor":false,"name":"GetRange","realm":"client","returns":[{"description":"The range of the {{Type|DNumberScratch}}","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the scratch window should be visible or not.","examples":[],"isConstructor":false,"name":"GetShouldDrawScreen","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the real value of the {{Type|DNumberScratch}} as a string.\n\nSee also {{ClassFunction|DNumberScratch|GetFloatValue}} and {{ClassFunction|DNumberScratch|GetFraction}}.","examples":[],"isConstructor":false,"name":"GetTextValue","realm":"client","returns":[{"description":"The real value of the {{Type|DNumberScratch}}","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the zoom level of the scratch window","examples":[],"isConstructor":false,"name":"GetZoom","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the ideal zoom level for the panel based on the {{ClassFunction|DNumberScratch|GetRange}}.","examples":[],"isConstructor":false,"name":"IdealZoom","realm":"client","returns":[{"description":"The ideal zoom level for the panel based on the panels range.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the player is currently editing the value of the {{Type|DNumberScratch}}.","examples":[],"isConstructor":false,"name":"IsEditing","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nUsed to lock the cursor in place.","examples":[],"isConstructor":false,"name":"LockCursor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new value","isOptional":false,"isVarArg":false,"name":"newValue","type":"number"}],"description":"Called when the value of the {{Type|DNumberScratch}} is changed.","examples":[],"isConstructor":false,"name":"OnValueChanged","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nUsed to paint the 'scratch' window.","examples":[],"isConstructor":false,"name":"PaintScratchWindow","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"true to activate, false to deactivate.","isOptional":false,"isVarArg":false,"name":"active","type":"boolean"}],"description":"{{Internal}}\n\nSets whether or not the panel is 'active'.\n\nForcing this panel to be active may not work.","examples":[],"isConstructor":false,"name":"SetActive","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"0 for whole numbers only, 1 for one number after the decimal point, etc.","isOptional":false,"isVarArg":false,"name":"decimals","type":"number"}],"description":"Sets the desired amount of numbers after the decimal point.","examples":[],"isConstructor":false,"name":"SetDecimals","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to set","isOptional":false,"isVarArg":false,"name":"val","type":"number"}],"description":"{{Internal}}\n\nDoes not trigger {{ClassFunction|DNumberScratch|OnValueChanged}}\n\nUse {{ClassFunction|DNumberScratch|SetValue}} instead.","examples":[],"isConstructor":false,"name":"SetFloatValue","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A value between 0 and 1","isOptional":false,"isVarArg":false,"name":"frac","type":"number"}],"description":"Sets the value of the {{Type|DNumberScratch}} as a fraction, a value between 0 and 1 where 0 is the minimum and 1 is the maximum value of the {{Type|DNumberScratch}}","examples":[],"isConstructor":false,"name":"SetFraction","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The maximum number","isOptional":false,"isVarArg":false,"name":"max","type":"number"}],"description":"Sets the max value that can be selected on the number scratch","examples":[],"isConstructor":false,"name":"SetMax","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum number","isOptional":false,"isVarArg":false,"name":"min","type":"number"}],"description":"Sets the minimum value that can be selected on the number scratch.","examples":[],"isConstructor":false,"name":"SetMin","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"shouldDraw","type":"boolean"}],"description":"{{Internal}}\n\nSets if the scratch window should be drawn or not. Cannot be used to force it to draw, only to hide it, which will not stop the panel from working with invisible window.","examples":[],"isConstructor":false,"name":"SetShouldDrawScreen","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to set.","isOptional":false,"isVarArg":false,"name":"val","type":"number"}],"description":"Sets the value of the {{Type|DNumberScratch}} and triggers {{ClassFunction|DNumberScratch|OnValueChanged}}","examples":[],"isConstructor":false,"name":"SetValue","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"zoom","type":"number"}],"description":"Sets the zoom level of the scratch panel.","examples":[],"isConstructor":false,"name":"SetZoom","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nForces the assigned ConVar to be updated to the value of this {{Type|DNumberScratch}}","examples":[],"isConstructor":false,"name":"UpdateConVar","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DNumberScratch"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The math library is a standard Lua library that provides functions for manipulating numbers. In Garry's Mod several additional math functions have been added.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The number to get the absolute value of.","isOptional":false,"isVarArg":false,"name":"x","type":"number"}],"description":"Calculates the absolute value of a number (effectively removes any negative sign).","examples":[{"code":"print( math.abs( 15 ) )\nprint( math.abs( -15 ) )","description":"Demonstrates what this function does."}],"isConstructor":false,"name":"abs","realm":"shared and menu","returns":[{"description":"absolute_value","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Cosine value in range of -1 to 1.","isOptional":false,"isVarArg":false,"name":"cos","type":"number"}],"description":"Returns the [[wikipedia:arc cosine|arc cosine]] of the given number.","examples":[],"isConstructor":false,"name":"acos","realm":"shared and menu","returns":[{"description":"An angle in radians, between 0 and pi, which has the given cos value.\n\n[[nan]] if the argument is out of range.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The first angle.","isOptional":false,"isVarArg":false,"name":"a","type":"number"},{"default":"","description":"The second angle.","isOptional":false,"isVarArg":false,"name":"b","type":"number"}],"description":"Calculates the difference between two angles.","examples":[{"code":"print(\"Angle difference between 159 and 240 is \" .. math.AngleDifference(159, 240))\nprint(\"Angle difference between 240 and 159 is \" .. math.AngleDifference(240, 159))\nprint(\"Angle difference between 58 and 145 is \" .. math.AngleDifference(58, 145))","description":"Find the angle difference between various angles"}],"isConstructor":false,"name":"AngleDifference","realm":"shared and menu","returns":[{"description":"The difference between the angles between -180 and 180","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value we're currently at.","isOptional":false,"isVarArg":false,"name":"current","type":"number"},{"default":"","description":"The target value. This function will never overshoot this value.","isOptional":false,"isVarArg":false,"name":"target","type":"number"},{"default":"","description":"The amount that the current value is allowed to change by to approach the target. (It makes no difference whether this is positive or negative.)","isOptional":false,"isVarArg":false,"name":"change","type":"number"}],"description":"Gradually approaches the target value by the specified amount.","examples":[{"code":"print( math.Approach( 0, 5, 1 ) ) -- attempts to increment 0 by 1, 0 + 1 is less than 5 so returns 1\nprint( math.Approach( 4, 5, 3 ) ) -- attempts to increment 4 by 3, 4 + 3 = 7 is greater than 5 so returns 5","description":"Demonstrates what this function does"},{"code":"local MyNumber = 0\nlocal Target = 0\nlocal LastThink = 0\nlocal ChangeRate = 1\n\nhook.Add( \"Think\", \"math.Approach Example\", function()\n\tlocal now = CurTime()\n\tlocal timepassed = now - LastThink\n\tLastThink = now\n\n\tMyNumber = math.Approach( MyNumber, Target, ChangeRate * timepassed )\n\n\t-- Normally, you would use MyNumber in code that appears here.\nend )\n\n-- The following functions are for example only:\nfunction GetMyNumber()\n\treturn MyNumber\nend\n\nfunction SetMyNumberTarget( newtarget )\n\tTarget = newtarget\nend\n\nfunction SetMyNumberChangeRate( newrate )\n\tChangeRate = newrate\nend","description":"Common usage example of this function with a control variable."}],"isConstructor":false,"name":"Approach","realm":"shared and menu","returns":[{"description":"New current value, closer to the target than it was previously.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The current angle to increase","isOptional":false,"isVarArg":false,"name":"currentAngle","type":"number"},{"default":"","description":"The angle to increase towards","isOptional":false,"isVarArg":false,"name":"targetAngle","type":"number"},{"default":"","description":"The amount to approach the target angle by","isOptional":false,"isVarArg":false,"name":"rate","type":"number"}],"description":"Increments an angle towards another by specified rate.\n\n{{Note|This function is for numbers representing angles (0-360), NOT {{Type|Angle}} objects!}}","examples":[],"isConstructor":false,"name":"ApproachAngle","realm":"shared and menu","returns":[{"description":"Modified angle","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Sine value in the range of -1 to 1.","isOptional":false,"isVarArg":false,"name":"normal","type":"number"}],"description":"Returns the [[wikipedia:arc sine|arc sine]] of the given number.","examples":[],"isConstructor":false,"name":"asin","realm":"shared and menu","returns":[{"description":"An angle in radians, in the range -pi/2 to pi/2, which has the given sine value.\n\n[[nan]] if the argument is out of range.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Tangent value.","isOptional":false,"isVarArg":false,"name":"normal","type":"number"}],"description":"Returns the [[wikipedia:arc tangent|arc tangent]] of the given number.","examples":[],"isConstructor":false,"name":"atan","realm":"shared and menu","returns":[{"description":"An angle in radians, in the range -pi/2 to pi/2, which has the given tangent.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Y coordinate.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"X coordinate.","isOptional":false,"isVarArg":false,"name":"x","type":"number"}],"description":"[[wikipedia:atan2|atan2]] functions like {{LibraryFunction|math|atan}}(y / x), except it also takes into account the quadrant of the angle and so doesn't have a limited range of output.\n\n{{Note|The Y argument comes first!}}","examples":[{"code":"print( atan( 1 ) )\nprint( ata2( 1, 1 ) )\nprint( atan2( -1, -1 ) )","description":"atan( 1 ) and atan2( 1, 1 ) are both math.pi / 4\n\natan2( -1, -1 ) equals to ( (-3) * math.pi ) / 4"}],"isConstructor":false,"name":"atan2","realm":"shared and menu","returns":[{"description":"The angle of the line from (0, 0) to (x, y) in radians, in the range -pi to pi.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Binary string to convert","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Converts a binary string into a number.","examples":[{"code":"print( math.BinToInt( \"101010101\" ) )","description":"Will print the string \"101010101\" as a number in console."}],"isConstructor":false,"name":"BinToInt","realm":"shared and menu","returns":[{"description":"Base 10 number.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"From 0 to 1, where alongside the spline the point will be.","isOptional":false,"isVarArg":false,"name":"tDiff","type":"number"},{"default":"","description":"A table of {{Type|Vector}}s. The amount cannot be less than 4.","isOptional":false,"isVarArg":false,"name":"tPoints","type":"Vector[]"},{"default":"","description":"Just leave this at 1.","isOptional":false,"isVarArg":false,"name":"tMax","type":"number"}],"description":"Basic code for [[wikipedia:Bézier curve|Bézier-Spline]] algorithm.","examples":[{"code":"local points = { Vector( 100, 100, 0 ), Vector( 200, 200, 0 ), Vector( 300, 100, 0 ), Vector( 400, 200, 0 ) }\nhook.Add( \"HUDPaint\", \"BSplinePointExample\", function()\n\t-- Draw the points\n\tfor id, p in pairs( points ) do\n\t\tdraw.RoundedBox( 0, p.x - 2, p.y - 2, 4, 4, color_white )\n\tend\n\n\t-- Draw the spline\n\tlocal pos = math.BSplinePoint( ( math.cos( CurTime() ) + 1 ) / 2, e, 1 )\n\tdraw.RoundedBox( 0, pos.x - 2, pos.y - 2, 4, 4, Color( 0, 0, 0 ) )\nend )","description":"Example usage of the function, makes a black box moving along the beizer curve made out of 4 points"}],"isConstructor":false,"name":"BSplinePoint","realm":"shared and menu","returns":[{"description":"Point on Bezier curve, related to tDiff.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"i","type":"number"},{"default":"","description":"{{Bug|Pull=1477|Sending in a value < 1 will result in an infinite loop.}}","isOptional":false,"isVarArg":false,"name":"k","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"t","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"tinc","type":"number"}],"description":"{{Internal|Use {{LibraryFunction|math|BSplinePoint}} instead.}}\n\nBasic code for Bezier-Spline algorithm, helper function for {{LibraryFunction|math|BSplinePoint}}.","examples":[],"isConstructor":false,"name":"calcBSplineN","realm":"shared and menu","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The number to be rounded up.","isOptional":false,"isVarArg":false,"name":"number","type":"number"}],"description":"Ceils or rounds a number up.","examples":[{"code":"print(math.ceil(math.pi))","description":"Round pi."}],"isConstructor":false,"name":"ceil","realm":"shared and menu","returns":[{"description":"ceiled numbers","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The number to clamp.","isOptional":false,"isVarArg":false,"name":"input","type":"number"},{"default":"","description":"The minimum value, this function will never return a number less than this.","isOptional":false,"isVarArg":false,"name":"min","type":"number"},{"default":"","description":"The maximum value, this function will never return a number greater than this.","isOptional":false,"isVarArg":false,"name":"max","type":"number"}],"description":"Clamps a number between a minimum and maximum value","examples":[{"code":"print( math.Clamp( 10, 0, 5 ) ) -- 10 is greater than 5 so returns 5\nprint( math.Clamp( 3, 0, 5 ) ) -- 3 is greater than 0 and less than 5, so returns 3\nprint( math.Clamp( -1, 0, 5 ) ) -- -1 is less than 0, so returns 0","description":"Demonstrates what this function does."},{"code":"ply:SetHealth( math.Clamp( ply:Health() + 10, 0, 100 ) )","description":"Heals player \"ply\" by 10 health, but won't let their health go above 100."}],"isConstructor":false,"name":"Clamp","realm":"shared and menu","returns":[{"description":"The clamped value.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Angle in radians","isOptional":false,"isVarArg":false,"name":"number","type":"number"}],"description":"Returns the [[wikipedia:cosine|cosine]] of given angle.","examples":[{"code":"print( math.cos( 3.14159265 ) )","description":"Prints the cosine of 3.14159265 (Pi)"}],"isConstructor":false,"name":"cos","realm":"shared and menu","returns":[{"description":"Cosine of given angle","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Angle in radians.","isOptional":false,"isVarArg":false,"name":"number","type":"number"}],"description":"Returns the [[wikipedia:hyperbolic cosine|hyperbolic cosine]] of the given angle.","examples":[],"isConstructor":false,"name":"cosh","realm":"shared and menu","returns":[{"description":"The hyperbolic cosine of the given angle.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Value to be converted to degrees.","isOptional":false,"isVarArg":false,"name":"radians","type":"number"}],"description":"Converts radians to degrees.","examples":[],"isConstructor":false,"name":"deg","realm":"shared and menu","returns":[{"description":"degrees","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"X position of first point","isOptional":false,"isVarArg":false,"name":"x1","type":"number"},{"default":"","description":"Y position of first point","isOptional":false,"isVarArg":false,"name":"y1","type":"number"},{"default":"","description":"X position of second point","isOptional":false,"isVarArg":false,"name":"x2","type":"number"},{"default":"","description":"Y position of second point","isOptional":false,"isVarArg":false,"name":"y2","type":"number"}],"description":"{{Deprecated|You should use {{LibraryFunction|math|Distance}} instead}}\n\nReturns the difference between two points in 2D space. Alias of {{LibraryFunction|math|Distance}}.","examples":[{"code":"print( math.Distance( 1, 2, 5, 6 ) ) -- distance bet","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"Dist","realm":"shared and menu","returns":[{"description":"Distance between the two points.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"X position of first point","isOptional":false,"isVarArg":false,"name":"x1","type":"number"},{"default":"","description":"Y position of first point","isOptional":false,"isVarArg":false,"name":"y1","type":"number"},{"default":"","description":"X position of second point","isOptional":false,"isVarArg":false,"name":"x2","type":"number"},{"default":"","description":"Y position of second point","isOptional":false,"isVarArg":false,"name":"y2","type":"number"}],"description":"Returns the difference between two points in 2D space.","examples":[{"code":"print( math.Distance( 1, 2, 5, 6 ) ) -- distance bet","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"Distance","realm":"shared and menu","returns":[{"description":"Distance between the two points","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Fraction of the progress to ease","isOptional":false,"isVarArg":false,"name":"progress","type":"number"},{"default":"","description":"Fraction of how much easing to begin with","isOptional":false,"isVarArg":false,"name":"easeIn","type":"number"},{"default":"","description":"Fraction of how much easing to end with","isOptional":false,"isVarArg":false,"name":"easeOut","type":"number"}],"description":"Calculates the progress of a value fraction, taking in to account given easing fractions","examples":[{"code":"print(math.EaseInOut(0.1, 0.1, 0.1))\nprint(math.EaseInOut(0.2, 0.1, 0.1))\nprint(math.EaseInOut(0.3, 0.1, 0.1))","description":"Calculates the easing of three situations"}],"isConstructor":false,"name":"EaseInOut","realm":"shared and menu","returns":[{"description":"Eased Value","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The exponent for the function.","isOptional":false,"isVarArg":false,"name":"exponent","type":"number"}],"description":"Returns the x power of the Euler constant ''[[wikipedia:e (mathematical constant)|e]]''.","examples":[],"isConstructor":false,"name":"exp","realm":"shared and menu","returns":[{"description":"e to the specified power","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The number to be rounded down.","isOptional":false,"isVarArg":false,"name":"number","type":"number"}],"description":"Floors or rounds a number down.","examples":[{"code":"print(math.floor(math.pi))","description":"Round pi."},{"code":"local value = 3.6\n\nprint( math.Round( value ), math.floor( value ) )","description":"Demonstrates the difference between math.Round and math.floor."}],"isConstructor":false,"name":"floor","realm":"shared and menu","returns":[{"description":"floored numbers","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The base value.","isOptional":false,"isVarArg":false,"name":"base","type":"number"},{"default":"","description":"The modulator.","isOptional":false,"isVarArg":false,"name":"modulator","type":"number"}],"description":"Returns the modulus of the specified values.\n\nWhile this is similar to the % operator, '''it will return a negative value if the first argument is negative''', whereas the % operator will return a ''positive'' value '''even if the first operand is negative'''.","examples":[],"isConstructor":false,"name":"fmod","realm":"shared and menu","returns":[{"description":"The calculated modulus.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to get the normalized fraction and the exponent from.","isOptional":false,"isVarArg":false,"name":"x","type":"number"}],"description":"<!-- lua reference desctiption: Returns m and e such that x = m2e, e is an integer and the absolute value of m is in the range ((0.5, 1) (or zero when x is zero).  -->\nUsed to split the number value into a normalized fraction and an exponent. Two values are returned: the first is a multiplier in the range 1/2 (inclusive) to 1 (exclusive) and the second is an integer exponent.\n\nThe result is such that x {{eq}} m*2^e.","examples":[],"isConstructor":false,"name":"frexp","realm":"shared and menu","returns":[{"description":"m, multiplier - between 0.5 and 1","type":"number"},{"description":"e, exponent - always an integer","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"=Not a function=\nThis is NOT a function, it's a variable that effectively represents infinity, in the sense that in any numerical comparison every number will be less than this.\n\nFor example, if x is a number, \"x > math.huge\" will NEVER be true except in the case of overflow (see below).\n\nLua will consider any number greater than or equal to 2<sup>1024</sup> (the exponent limit of a [http://en.wikipedia.org/wiki/Double-precision_floating-point_format double]) as ''inf'' and hence equal to this.\n\n[[Category:Functions]]\n[[Category:math]]\n[[Category:Shared]]\n[[Category:Menu]]\n[[Category:Documented_Functions]]\n[[Category:Library Functions]]","examples":[],"isConstructor":false,"name":"huge","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Number to be converted.","isOptional":false,"isVarArg":false,"name":"int","type":"number"}],"description":"Converts an integer to a binary (base-2) string.","examples":[{"code":"print(math.IntToBin(4))","description":"Prints the binary representation of 4"}],"isConstructor":false,"name":"IntToBin","realm":"shared and menu","returns":[{"description":"Binary number string. The length of this will always be a multiple of 3.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to get the normalized fraction and the exponent from.","isOptional":false,"isVarArg":false,"name":"normalizedFraction","type":"number"},{"default":"","description":"The value to get the normalized fraction and the exponent from.","isOptional":false,"isVarArg":false,"name":"exponent","type":"number"}],"description":"Takes a normalised number and returns the floating point representation.","examples":[],"isConstructor":false,"name":"ldexp","realm":"shared and menu","returns":[{"description":"result","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to get the base from exponent from.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"<span class=\"texhtml mvar\">''[[Wikipedia:e (mathematical constant)|e]]''</span>","description":"The logarithmic base.","isOptional":true,"isVarArg":false,"name":"base","type":"number"}],"description":"With one argument, return the natural logarithm of x (to base e).\n\nWith two arguments, return the logarithm of x to the given base, calculated as log(x)/log(base).","examples":[],"isConstructor":false,"name":"log","realm":"shared and menu","returns":[{"description":"Logarithm of x to the given base","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to get the base from exponent from.","isOptional":false,"isVarArg":false,"name":"x","type":"number"}],"description":"Returns the base-10 logarithm of x. This is usually more accurate than math.log(x, 10).","examples":[],"isConstructor":false,"name":"log10","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Numbers to get the largest from","isOptional":false,"isVarArg":true,"name":"numbers","type":"any"}],"description":"Returns the largest value of all arguments.","examples":[{"code":"print( math.max( 464, 654698468, 1, 3, 2 ) )","description":"Get the largest number of a group."},{"code":"local minimumValue = 5\n\nfunction lowClamp(num)\n\n     return math.max( minimumValue, num )\n\nend\n\nprint( lowClamp( 0.1 ) )\nprint( lowClamp( -6 ) )\nprint( lowClamp( 5 ) )\nprint( lowClamp( 8 ) )\nprint( lowClamp( 24 ) )","description":"Prevent a value from falling under a certain minimum. A one-sided version of {{LibraryFunction|math|Clamp}}."}],"isConstructor":false,"name":"max","realm":"shared and menu","returns":[{"description":"The largest number","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Numbers to get the smallest from.","isOptional":false,"isVarArg":true,"name":"numbers","type":"any"}],"description":"Returns the smallest value of all arguments.","examples":[{"code":"print( math.min( 1, 2, -3, 464, 654698468 ) )","description":"Get the smallest number of a group."}],"isConstructor":false,"name":"min","realm":"shared and menu","returns":[{"description":"The smallest number","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The base value","isOptional":false,"isVarArg":false,"name":"base","type":"number"},{"default":"","description":"Modulator","isOptional":false,"isVarArg":false,"name":"modulator","type":"number"}],"description":"{{Deprecated|This is removed in Lua versions later than what GMod is currently using. You should use the % operator or {{LibraryFunction|math|fmod}} instead.}}\n\nReturns the modulus of the specified values. Same as {{LibraryFunction|math|fmod}}.","examples":[],"isConstructor":false,"name":"mod","realm":"shared and menu","returns":[{"description":"The calculated modulus","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The base value.","isOptional":false,"isVarArg":false,"name":"base","type":"number"}],"description":"Returns the integral and fractional component of the modulo operation.","examples":[{"code":"print(math.modf(5.6))","description":"Finds the integral and fractional components of 5.6."}],"isConstructor":false,"name":"modf","realm":"shared and menu","returns":[{"description":"The integral component.","type":"number"},{"description":"The fractional component.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The angle to normalize, in degrees.","isOptional":false,"isVarArg":false,"name":"angle","type":"number"}],"description":"Normalizes angle, so it returns value between -180 and 180.","examples":[],"isConstructor":false,"name":"NormalizeAngle","realm":"shared and menu","returns":[{"description":"The normalized angle, in the range of -180 to 180 degrees.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"=Not a function=\n\nThis is NOT a function, it's a variable containing the mathematical constant pi.\n\nFor example: math.sin( math.pi ) will return 0.\n\n[[Category:Functions]]\n[[Category:math]]\n[[Category:Shared]]\n[[Category:Menu]]\n[[Category:Documented_Functions]]\n[[Category:Library Functions]]","examples":[],"isConstructor":false,"name":"pi","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Base.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"Exponent.","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"Returns x raised to the power y.\nIn particular, math.pow(1.0, x) and math.pow(x, 0.0) always return 1.0, even when x is a zero or a NaN. If both x and y are finite, x is negative, and y is not an integer then math.pow(x, y) is undefined.","examples":[],"isConstructor":false,"name":"pow","realm":"shared and menu","returns":[{"description":"y power of x","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The angle measured in degrees.","isOptional":false,"isVarArg":false,"name":"degrees","type":"number"}],"description":"Converts an angle in degrees to it's equivalent in radians.","examples":[{"code":"print( \"Degrees: 360, Radians: \" .. math.rad( 360 ) ) -- 2*pi\nprint( \"Degrees: 180, Radians: \" .. math.rad( 180 ) ) -- pi\nprint( \"Degrees: 90, Radians: \" .. math.rad( 90 ) ) -- pi/2\nprint( \"Degrees: 1, Radians: \" .. math.rad( 1 ) ) -- pi/180","description":"Convert various angles in degrees to their equivalent in radians."}],"isConstructor":false,"name":"rad","realm":"shared and menu","returns":[{"description":"radians","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum value.","isOptional":false,"isVarArg":false,"name":"min","type":"number"},{"default":"","description":"The maximum value.","isOptional":false,"isVarArg":false,"name":"max","type":"number"}],"description":"Returns a random float between min and max.\n\nSee also {{LibraryFunction|math|random}}","examples":[],"isConstructor":false,"name":"Rand","realm":"shared and menu","returns":[{"description":"Random float between min and max.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"nil","description":"If m is the only parameter: upper limit.<br />\nIf n is also provided: lower limit.\n\nIf provided, this must be an integer.","isOptional":true,"isVarArg":false,"name":"m","type":"number"},{"default":"nil","description":"Upper limit.\n\nIf provided, this must be an integer.","isOptional":true,"isVarArg":false,"name":"n","type":"number"}],"description":"When called without arguments, returns a uniform pseudo-random real number in the range 0 to 1 which includes 0 but excludes 1.\n\nWhen called with an integer number m, returns a uniform pseudo-random integer in the range 1 to m inclusive.\n\nWhen called with two integer numbers m and n, returns a uniform pseudo-random integer in the range m to n inclusive.\n\nSee also {{LibraryFunction|math|Rand}}","examples":[{"code":"print(math.random(1,400))\n\nprint(math.Rand(1,400))","description":"Generate a random number between 1 and 400 with both math.random and math.Rand."},{"code":"function GetWeightedRandomKey(tab)\n\tlocal sum = 0\n\n\tfor _, chance in pairs(tab) do\n\t\tsum = sum + chance\n\tend\n\n\tlocal select = math.random() * sum\n\n\tfor key, chance in pairs(tab) do\n\t\tselect = select - chance\n\t\tif select < 0 then return key end\n\tend\nend\n\n-- Example usage:\nlocal fruit = {\n\tGrape = 4.5,\n\tOrange = 20,\n\tBanana = 3.14\n}\n\nfor i = 1, 5 do\n\tprint(GetWeightedRandomKey(fruit))\nend","description":"Select a random key from a table, where the keys have a different probability of being selected."}],"isConstructor":false,"name":"random","realm":"shared and menu","returns":[{"description":"Random value","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The new seed","isOptional":false,"isVarArg":false,"name":"seed","type":"number"}],"description":"Seeds the random number generator. The same seed will guarantee the same sequence of numbers each time with {{LibraryFunction|math|random}}.\n\nFor shared random values across predicted realms, use {{LibraryFunction|util|SharedRandom}}.\n\n{{Warning|Incorrect usage of this function will affect ''all'' random numbers in the game.}}","examples":[],"isConstructor":false,"name":"randomseed","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value","isOptional":false,"isVarArg":false,"name":"value","type":"number"},{"default":"","description":"The minimum of the initial range","isOptional":false,"isVarArg":false,"name":"inMin","type":"number"},{"default":"","description":"The maximum of the initial range","isOptional":false,"isVarArg":false,"name":"inMax","type":"number"},{"default":"","description":"The minimum of new range","isOptional":false,"isVarArg":false,"name":"outMin","type":"number"},{"default":"","description":"The maximum of new range","isOptional":false,"isVarArg":false,"name":"outMax","type":"number"}],"description":"Remaps the value from one range to another","examples":[{"code":"print( math.Remap( 0.5, 0, 1, 0, 255 ) )","description":"Example usage, converts a value from range 0-1, to range 0-255."}],"isConstructor":false,"name":"Remap","realm":"shared and menu","returns":[{"description":"The number in the new range","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to round.","isOptional":false,"isVarArg":false,"name":"value","type":"number"},{"default":"0","description":"The decimal places to round to.","isOptional":true,"isVarArg":false,"name":"decimals","type":"number"}],"description":"Rounds the given value to the nearest whole number or to the given decimal places.","examples":[{"code":"print(math.Round(104.6256712))","description":"Rounds a number to the nearest whole number."},{"code":"print(math.Round(104.6256712, 2))","description":"Rounds the number to two decimal places."}],"isConstructor":false,"name":"Round","realm":"shared and menu","returns":[{"description":"The rounded value.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Angle in radians","isOptional":false,"isVarArg":false,"name":"number","type":"number"}],"description":"Returns the [[wikipedia:sine|sine]] of given angle.","examples":[],"isConstructor":false,"name":"sin","realm":"shared and menu","returns":[{"description":"Sine for given angle","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Angle in radians.","isOptional":false,"isVarArg":false,"name":"number","type":"number"}],"description":"Returns the [[wikipedia:hyperbolic sine|hyperbolic sine]] of the given angle.","examples":[],"isConstructor":false,"name":"sinh","realm":"shared and menu","returns":[{"description":"The hyperbolic sine of the given angle.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Value to get the square root of.","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Returns the square root of the number.","examples":[],"isConstructor":false,"name":"sqrt","realm":"shared and menu","returns":[{"description":"squareRoot","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Angle in radians","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Returns the [[wikipedia:tangent (trigonometry)|tangent]] of the given angle.","examples":[],"isConstructor":false,"name":"tan","realm":"shared and menu","returns":[{"description":"The tangent of the given angle.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Angle in radians.","isOptional":false,"isVarArg":false,"name":"number","type":"number"}],"description":"Returns the [[wikipedia:hyperbolic tangents|hyperbolic tangents]] of the given number.","examples":[],"isConstructor":false,"name":"tanh","realm":"shared and menu","returns":[{"description":"The hyperbolic tangent of the given angle.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Start time in seconds","isOptional":false,"isVarArg":false,"name":"start","type":"number"},{"default":"","description":"End time in seconds","isOptional":false,"isVarArg":false,"name":"end","type":"number"},{"default":"","description":"Current time in seconds","isOptional":false,"isVarArg":false,"name":"current","type":"number"}],"description":"Returns the fraction of where the current time is relative to the start and end times","examples":[{"code":"print(math.TimeFraction(0, 10, 5))","description":"Prints the time fraction of 5 between 0 and 10"}],"isConstructor":false,"name":"TimeFraction","realm":"shared and menu","returns":[{"description":"Fraction","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The number to truncate","isOptional":false,"isVarArg":false,"name":"num","type":"number"},{"default":"0","description":"The amount of digits to keep after the point.","isOptional":true,"isVarArg":false,"name":"digits","type":"number"}],"description":"Rounds towards zero.","examples":[{"code":"local num = 54.59874\n\nprint( math.Truncate( num, 2 ) ) -- 54.59\nprint( math.Round( num, 2 ) ) -- 54.6","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"Truncate","realm":"shared and menu","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"math"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"DNumberWang is a VGUI element that allows you to input a numeric value using up and down arrows or direct entry.","examples":[],"extends":"DTextEntry","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the amount of decimal places allowed in the number selector, set by {{ClassFunction|DNumberWang|SetDecimals}}","examples":[],"isConstructor":false,"name":"GetDecimals","realm":"client","returns":[{"description":"The amount of decimal places allowed in the number selector.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nReturns whatever is set by {{ClassFunction|DNumberWang|SetFloatValue}} or 0.","examples":[],"isConstructor":false,"name":"GetFloatValue","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The fraction numerator.","isOptional":false,"isVarArg":false,"name":"val","type":"number"}],"description":"Returns a fraction representing the current number selector value to number selector min/max range ratio. If argument ''val'' is supplied, that number will be computed instead.","examples":[{"code":"local numinput = vgui.Create(\"DNumberWang\")\nnuminput:SetPos(5, 5)\nnuminput:SetSize(90, 20)\n\nnuminput:SetMinMax(0, 255)\n\nnuminput:SetValue(64)\n\nprint(numinput:GetFraction())\t-- Should return ~0.25\nprint(numinput:GetFraction(128))\t-- Should return ~0.5\nprint(numinput:GetFraction(192))\t-- Should return ~0.75\nprint(numinput:GetFraction(255))\t-- Should return 1","description":"Prints out some fractions based on a number selector with a min/max range of 0 to 255."}],"isConstructor":false,"name":"GetFraction","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the maximum numeric value allowed by the number selector.","examples":[],"isConstructor":false,"name":"GetMax","realm":"client","returns":[{"description":"The maximum value.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the minimum numeric value allowed by the number selector.","examples":[],"isConstructor":false,"name":"GetMin","realm":"client","returns":[{"description":"The minimum number.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nThis function returns the panel it is used on.","examples":[],"isConstructor":false,"name":"GetTextArea","realm":"client","returns":[{"description":"self","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns the numeric value inside the number selector.","examples":[],"isConstructor":false,"name":"GetValue","realm":"client","returns":[{"description":"The numeric value.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Hides the number selector arrows.","examples":[],"isConstructor":false,"name":"HideWang","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new value of the number selector.","isOptional":false,"isVarArg":false,"name":"val","type":"number"}],"description":"Internal function which is called when the number selector value is changed. This function is empty by default so it needs to be overridden in order to provide functionality.","examples":[{"code":"-- Background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(100, 55)\n\n-- Statement label\nlocal lbl1 = vgui.Create(\"DLabel\", BGPanel)\nlbl1:SetPos(5, 5)\nlbl1:SetSize(100, 20)\nlbl1:SetText(\"Statement: \")\nlbl1:SetColor(Color(64, 64, 255))\n\n-- Response label\nlocal lbl2 = vgui.Create(\"DLabel\", BGPanel)\nlbl2:SetPos(5, 30)\nlbl2:SetSize(100, 20)\nlbl2:SetText(\"Response: \")\nlbl2:SetColor(Color(255, 0, 255))\n\n-- Number selector for \"questions\"\nlocal question = vgui.Create(\"DNumberWang\", BGPanel)\nquestion:SetPos(65, 5)\nquestion:SetSize(30, 20)\nquestion:SetMinMax(1, 30)\n\n-- Number selector for answers\nlocal answer = vgui.Create(\"DNumberWang\", BGPanel)\nanswer:SetPos(65, 30)\nanswer:SetSize(30, 20)\nanswer:SetMinMax(1, 40)\n\n-- This is used to prevent overlapping talking\nlocal null = Sound(\"common/null.wav\")\n\n-- Abstraction = cleaner code\nfunction TalkSound(snd)\n\tEmitSound(snd, LocalPlayer():GetPos(), LocalPlayer():EntIndex(), CHAN_VOICE, 1, 80, 0, 100)\nend\n\n-- Play a statement based on new number\nfunction question:OnValueChanged(val)\n\tTalkSound(null)\n\tTalkSound(Sound(\"vo/npc/male01/question\"..string.format(\"%02d\", val)..\".wav\"))\nend\n\n-- Play an answer based on new number\nfunction answer:OnValueChanged(val)\n\tTalkSound(null)\n\tTalkSound(Sound(\"vo/npc/female01/answer\"..string.format(\"%02d\", val)..\".wav\"))\nend","description":"Creates a panel with two number selectors that play a male question sound byte and a female answer sound byte based on the new value of each number selector."}],"isConstructor":false,"name":"OnValueChanged","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The amount of decimal places.","isOptional":false,"isVarArg":false,"name":"num","type":"number"}],"description":"Sets the amount of decimal places allowed in the number selector.","examples":[{"code":"local numinput = vgui.Create(\"DNumberWang\")\nnuminput:SetPos(5, 5)\nnuminput:SetSize(90, 20)\nnuminput:SetDecimals(3)\n\nnuminput:SetValue(math.random())","description":"Sets the number selector to 3 decimal places and sets the value to a random number between 0 and 1."}],"isConstructor":false,"name":"SetDecimals","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"val","type":"number"}],"description":"{{Deprecated}}\n\nAppears to do nothing.","examples":[],"isConstructor":false,"name":"SetFloatValue","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The fraction of the number selector's range.","isOptional":false,"isVarArg":false,"name":"val","type":"number"}],"description":"Sets the value of the number selector based on the given fraction number.","examples":[{"code":"local numinput = vgui.Create(\"DNumberWang\")\nnuminput:SetPos(5, 5)\nnuminput:SetSize(90, 20)\n\nnuminput:SetMinMax(0, 500)\n\nnuminput:SetFraction(0.25)\nprint(numinput:GetValue())\n\nnuminput:SetFraction(0.5)\nprint(numinput:GetValue())\n\nnuminput:SetFraction(0.75)\nprint(numinput:GetValue())","description":"Sets and prints out the value of a quarter, half, and three-fourths of the number selector range."}],"isConstructor":false,"name":"SetFraction","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The maximum value.","isOptional":false,"isVarArg":false,"name":"max","type":"number"}],"description":"Sets the maximum numeric value allowed by the number selector.","examples":[],"isConstructor":false,"name":"SetMax","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum value.","isOptional":false,"isVarArg":false,"name":"min","type":"number"}],"description":"Sets the minimum numeric value allowed by the number selector.","examples":[],"isConstructor":false,"name":"SetMin","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum value.","isOptional":false,"isVarArg":false,"name":"min","type":"number"},{"default":"","description":"The maximum value.","isOptional":false,"isVarArg":false,"name":"max","type":"number"}],"description":"Sets the minimum and maximum value allowed by the number selector.","examples":[],"isConstructor":false,"name":"SetMinMax","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to set.","isOptional":false,"isVarArg":false,"name":"val","type":"number"}],"description":"Sets the value of the {{Type|DNumberWang}} and triggers {{ClassFunction|DNumberWang|OnValueChanged}}","examples":[],"isConstructor":false,"name":"SetValue","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resizes the panel so that its width and height fit all of the content inside.\n\n{{Note|Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.}}\n\n{{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}\n\n[[Category:DImage]]\n[[Category:DImageButton]]\n[[Category:DNumberWang]]\n[[Category:DListView]]","examples":[],"isConstructor":false,"name":"SizeToContents","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the value the panel holds.\n\nIn engine is only implemented for {{Type|CheckButton}}, {{Type|Label}} and {{Type|TextEntry}} as a string and for those elements has a hard coded limit of 8092 characters.","examples":[{"code":"local TextEntry = vgui.Create( \"TextEntry\" )\nTextEntry:SetText( \"Hello world!\" )\nprint( TextEntry:GetValue() )","description":"Returns the string typed in a TextEntry."}],"isConstructor":false,"name":"GetValue","realm":"client","returns":[{"description":"The value the panel holds.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to set.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Sets the text of the {{Type|DTextEntry}} and calls {{ClassFunction|DTextEntry|OnValueChange}}.","examples":[],"isConstructor":false,"name":"SetValue","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resizes the panel so that its width and height fit all of the content inside.\n\n{{Note|Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.}}\n\n{{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}\n\n[[Category:DImage]]\n[[Category:DImageButton]]\n[[Category:DNumberWang]]\n[[Category:DListView]]","examples":[],"isConstructor":false,"name":"SizeToContents","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DNumberWang"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Deprecated|You should use {{Type|DBinder}} instead.}}GMod 12 style \"number pad\" panel used by tools for binding keys to tool actions. Deprecated in favor of {{Type|DBinder}}.","examples":[],"extends":"DPanel","functions":[],"isHook":false,"isPureAbstract":true,"name":"DNumPad"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"Add proxies to materials.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The information about the proxy. See {{Struct|MatProxyData}}","isOptional":false,"isVarArg":false,"name":"MatProxyData","type":"MatProxyData"}],"description":"Adds a material proxy.","examples":[{"code":"matproxy.Add({\n    name = \"PlayerColor\", \n    init = function( self, mat, values )\n        -- Store the name of the variable we want to set\n        self.ResultTo = values.resultvar\n    end,\n    bind = function( self, mat, ent )\n        -- If the target ent has a function called GetPlayerColor then use that\n        -- The function SHOULD return a Vector with the chosen player's colour.\n\n        -- In sandbox this function is created as a network function, \n        -- in player_sandbox.lua in SetupDataTables\n       if ( ent.GetPlayerColor ) then\n           mat:SetVector( self.ResultTo, ent:GetPlayerColor() )\n       end\n   end \n})","description":"Adds PlayerColor proxy. Example taken from lua/matproxy/player_color.lua."},{"code":"values = {\n    resultvar = \"$color2\"\n    myvariable = \"$color\"\n}","description":"Material proxy values are stored like this:\n\n* In the .vmt:\n<pre>Proxies {\n    PlayerColor {\n       resultVar $color2\n       myVariable $color\n    }\n}</pre>\n\n* In Lua ( The '''Init''' function of {{Struct|MatProxyData}} )"}],"isConstructor":false,"name":"Add","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"uname","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"mat","type":"IMaterial"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called by the engine from OnBind","examples":[],"isConstructor":false,"name":"Call","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"uname","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"mat","type":"IMaterial"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"values","type":"table"}],"description":"Called by the engine from OnBind","examples":[],"isConstructor":false,"name":"Init","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of proxy in question","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Called by engine, returns true if we're overriding a proxy","examples":[],"isConstructor":false,"name":"ShouldOverrideProxy","realm":"client","returns":[{"description":"Are we overriding it?","type":"boolean"}]}],"isHook":false,"isPureAbstract":false,"name":"matproxy"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The menu library.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Used by \"Demo to Video\" to record the frame.","examples":[],"isConstructor":false,"name":"RecordFrame","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"menu"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The menubar library.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Creates the menu bar ( The bar at the top of the screen when holding C or Q in sandbox ) and docks it to the top of the screen. It will not appear.<br/>\nCalling this multiple times will '''NOT''' remove previous panel.","examples":[],"isConstructor":false,"name":"Init","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to check","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"Checks if the supplied panel is parent to the menubar","examples":[],"isConstructor":false,"name":"IsParent","realm":"client","returns":[{"description":"Is parent or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to parent to","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"Parents the menubar to the panel and displays the menubar.","examples":[],"isConstructor":false,"name":"ParentTo","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"menubar"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The mesh library allows you to create meshes. A mesh is a set of vertices that define a 3D shape, for constant meshes you should use the {{Type|IMesh}} object instead.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Pushes the new vertex data onto the render stack.","examples":[],"isConstructor":false,"name":"AdvanceVertex","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"Mesh to build. This argument can be removed if you wish to build a \"dynamic\" mesh. See examples below.","isOptional":true,"isVarArg":false,"name":"mesh","type":"IMesh"},{"default":"","description":"Primitive type, see {{Enum|MATERIAL}}.","isOptional":true,"isVarArg":false,"name":"primitiveType","type":"MATERIAL"},{"default":"","description":"The amount of primitives.","isOptional":true,"isVarArg":false,"name":"primiteCount","type":"number"}],"description":"Starts a new dynamic mesh. If an {{Type|IMesh}} is passed, it will use that mesh instead.","examples":[{"code":"local mat = Material( \"editor/wireframe\" ) -- The material (a wireframe)\n\nlocal verts = { -- A table of 3 vertices that form a triangle\n\t{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, -- Vertex 1\n\t{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, -- Vertex 2\n\t{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, -- Vertex 3\n}\n\nhook.Add( \"PostDrawOpaqueRenderables\", \"MeshLibTest\", function()\n\n\trender.SetMaterial( mat ) -- Apply the material\n\tmesh.Begin( MATERIAL_TRIANGLES, 1 ) -- Begin writing to the dynamic mesh\n\tfor i = 1, #verts do\n\t\tmesh.Position( verts[i].pos ) -- Set the position\n\t\tmesh.TexCoord( 0, verts[i].u, verts[i].v ) -- Set the texture UV coordinates\n\t\tmesh.AdvanceVertex() -- Write the vertex\n\tend\n\tmesh.End() -- Finish writing the mesh and draw it\nend )","description":"Draws a triangle near Vector( 0, 0, 0 ) in the map using a dynamic mesh."},{"code":"local mat = Material( \"editor/wireframe\" ) -- The material (a wireframe)\nlocal obj = Mesh() -- Create the IMesh object\n\nlocal verts = { -- A table of 3 vertices that form a triangle\n\t{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, -- Vertex 1\n\t{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, -- Vertex 2\n\t{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, -- Vertex 3\n}\n\nmesh.Begin( obj, MATERIAL_TRIANGLES, 1 ) -- Begin writing to the static mesh\nfor i = 1, #verts do\n\tmesh.Position( verts[i].pos ) -- Set the position\n\tmesh.TexCoord( 0, verts[i].u, verts[i].v ) -- Set the texture UV coordinates\n\tmesh.AdvanceVertex() -- Write the vertex\nend\nmesh.End() -- Finish writing to the IMesh\n\nhook.Add( \"PostDrawOpaqueRenderables\", \"MeshLibTest\", function()\n\n\trender.SetMaterial( mat ) -- Apply the material\n\tobj:Draw() -- Draw the mesh\nend )","description":"Draws a triangle near Vector( 0, 0, 0 ) in the map using a static mesh."}],"isConstructor":false,"name":"Begin","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Red component.","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"Green component.","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"Blue component.","isOptional":false,"isVarArg":false,"name":"b","type":"number"},{"default":"","description":"Alpha component.","isOptional":false,"isVarArg":false,"name":"a","type":"number"}],"description":"Sets the color to be used for the next vertex.","examples":[],"isConstructor":false,"name":"Color","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Ends the mesh and renders it.","examples":[],"isConstructor":false,"name":"End","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The normal of the vertex.","isOptional":false,"isVarArg":false,"name":"normal","type":"Vector"}],"description":"Sets the normal to be used for the next vertex.","examples":[],"isConstructor":false,"name":"Normal","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position of the vertex.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Sets the position to be used for the next vertex.","examples":[],"isConstructor":false,"name":"Position","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The first vertex.","isOptional":false,"isVarArg":false,"name":"vertex1","type":"Vector"},{"default":"","description":"The second vertex.","isOptional":false,"isVarArg":false,"name":"vertex2","type":"Vector"},{"default":"","description":"The third vertex.","isOptional":false,"isVarArg":false,"name":"vertex3","type":"Vector"},{"default":"","description":"The fourth vertex.","isOptional":false,"isVarArg":false,"name":"vertex4","type":"Vector"}],"description":"Draws a quad using 4 vertices.","examples":[],"isConstructor":false,"name":"Quad","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The center of the quad.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"The normal of the quad.","isOptional":false,"isVarArg":false,"name":"normal","type":"Vector"},{"default":"","description":"X size in pixels.","isOptional":false,"isVarArg":false,"name":"sizeX","type":"number"},{"default":"","description":"Y size in pixels.","isOptional":false,"isVarArg":false,"name":"sizeY","type":"number"}],"description":"Draws a quad using a position, a normal and the size.","examples":[],"isConstructor":false,"name":"QuadEasy","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The red channel multiplier of the specular map.","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"The green channel multiplier of the specular map.","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"The blue channel multiplier of the specular map.","isOptional":false,"isVarArg":false,"name":"b","type":"number"},{"default":"","description":"The alpha channel multiplier of the specular map.","isOptional":false,"isVarArg":false,"name":"a","type":"number"}],"description":"Sets the specular map values.\n\nThis function actually does nothing.","examples":[],"isConstructor":false,"name":"Specular","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The s tangent.","isOptional":false,"isVarArg":false,"name":"sTanger","type":"Vector"}],"description":"Sets the s tangent to be used.\n\nThis function actually does nothing.","examples":[],"isConstructor":false,"name":"TangentS","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The t tangent.","isOptional":false,"isVarArg":false,"name":"tTanger","type":"Vector"}],"description":"Sets the T tangent to be used.\n\nThis function actually does nothing.","examples":[],"isConstructor":false,"name":"TangentT","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The stage of the texture coordinate.","isOptional":false,"isVarArg":false,"name":"stage","type":"number"},{"default":"","description":"U coordinate.","isOptional":false,"isVarArg":false,"name":"u","type":"number"},{"default":"","description":"V coordinate.","isOptional":false,"isVarArg":false,"name":"v","type":"number"}],"description":"Sets the texture coordinates for the next vertex.\n\nNon-zero values of stage require the currently bound material to support it. For example, any LightmappedGeneric material supports stages 1 and 2 (lightmap texture coordinates).","examples":[],"isConstructor":false,"name":"TexCoord","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"tangentX","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"tangentY","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"tangentZ","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"tangentHandedness","type":"number"}],"description":"{{Note|It is recommended to use {{ClassFunction|IMesh|BuildFromTriangles}} instead of the mesh library.}}\n\nA table of four numbers. This is used by most shaders in Source to hold tangent information of the vertex ( tangentX, tangentY, tangentZ, tangentHandedness ).","examples":[],"isConstructor":false,"name":"UserData","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of vertex that have yet been pushed.","examples":[],"isConstructor":false,"name":"VertexCount","realm":"client","returns":[{"description":"vertexCount","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Primitive type, see {{Enum|MATERIAL}}.","isOptional":false,"isVarArg":false,"name":"primitiveType","type":"MATERIAL"},{"default":"","description":"The amount of primitives.","isOptional":false,"isVarArg":false,"name":"primiteCount","type":"number"}],"description":"Starts a new dynamic mesh. If an {{Type|IMesh}} is passed, it will use that mesh instead.","examples":[{"code":"local mat = Material( \"editor/wireframe\" ) -- The material (a wireframe)\n\nlocal verts = { -- A table of 3 vertices that form a triangle\n\t{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, -- Vertex 1\n\t{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, -- Vertex 2\n\t{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, -- Vertex 3\n}\n\nhook.Add( \"PostDrawOpaqueRenderables\", \"MeshLibTest\", function()\n\n\trender.SetMaterial( mat ) -- Apply the material\n\tmesh.Begin( MATERIAL_TRIANGLES, 1 ) -- Begin writing to the dynamic mesh\n\tfor i = 1, #verts do\n\t\tmesh.Position( verts[i].pos ) -- Set the position\n\t\tmesh.TexCoord( 0, verts[i].u, verts[i].v ) -- Set the texture UV coordinates\n\t\tmesh.AdvanceVertex() -- Write the vertex\n\tend\n\tmesh.End() -- Finish writing the mesh and draw it\nend )","description":"Draws a triangle near Vector( 0, 0, 0 ) in the map using a dynamic mesh."},{"code":"local mat = Material( \"editor/wireframe\" ) -- The material (a wireframe)\nlocal obj = Mesh() -- Create the IMesh object\n\nlocal verts = { -- A table of 3 vertices that form a triangle\n\t{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, -- Vertex 1\n\t{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, -- Vertex 2\n\t{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, -- Vertex 3\n}\n\nmesh.Begin( obj, MATERIAL_TRIANGLES, 1 ) -- Begin writing to the static mesh\nfor i = 1, #verts do\n\tmesh.Position( verts[i].pos ) -- Set the position\n\tmesh.TexCoord( 0, verts[i].u, verts[i].v ) -- Set the texture UV coordinates\n\tmesh.AdvanceVertex() -- Write the vertex\nend\nmesh.End() -- Finish writing to the IMesh\n\nhook.Add( \"PostDrawOpaqueRenderables\", \"MeshLibTest\", function()\n\n\trender.SetMaterial( mat ) -- Apply the material\n\tobj:Draw() -- Draw the mesh\nend )","description":"Draws a triangle near Vector( 0, 0, 0 ) in the map using a static mesh."}],"isConstructor":false,"name":"Begin","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"mesh"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"The DNumSlider allows you to create a slider, allowing the user to slide it to set a value, or changing the value in the box.","examples":[{"code":"local DermaPanel = vgui.Create( 'DFrame' ) // Create a panel to parent it to\nDermaPanel:SetSize( 500, 200 ) // Set the size\nDermaPanel:Center() // Center it\nDermaPanel:MakePopup() // Make it a popup\n\nlocal DermaNumSlider = vgui.Create( \"DNumSlider\", DermaPanel )\nDermaNumSlider:SetPos( 50, 50 )\t\t\t // Set the position\nDermaNumSlider:SetSize( 300, 100 )\t\t // Set the size\nDermaNumSlider:SetText( \"Maximum props\" )\t// Set the text above the slider\nDermaNumSlider:SetMin( 0 )\t\t\t\t // Set the minimum number you can slide to\nDermaNumSlider:SetMax( 256 )\t\t\t\t// Set the maximum number you can slide to\nDermaNumSlider:SetDecimals( 0 )\t\t\t // Decimal places - zero for whole number\nDermaNumSlider:SetConVar( \"sbox_maxprops\" ) // Changes the ConVar when you slide","description":"Attempts to create a DNumSlider."}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the amount of numbers after the decimal point.","examples":[],"isConstructor":false,"name":"GetDecimals","realm":"client","returns":[{"description":"0 for whole numbers only, 1 for one number after the decimal point, etc.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the default value of the slider, if one was set by {{ClassFunction|DNumSlider|SetDefaultValue}}","examples":[],"isConstructor":false,"name":"GetDefaultValue","realm":"client","returns":[{"description":"The default value of the slider","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the maximum value of the slider","examples":[],"isConstructor":false,"name":"GetMax","realm":"client","returns":[{"description":"The maximum value of the slider","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the minimum value of the slider","examples":[],"isConstructor":false,"name":"GetMin","realm":"client","returns":[{"description":"The minimum value of the slider","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the range of the slider, basically maximum value - minimum value.","examples":[],"isConstructor":false,"name":"GetRange","realm":"client","returns":[{"description":"The range of the slider","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the {{Type|DTextEntry}} component of the slider.","examples":[],"isConstructor":false,"name":"GetTextArea","realm":"client","returns":[{"description":"The {{Type|DTextEntry}}.","type":"DTextEntry"}]},{"accessModifier":"public","arguments":[],"description":"Returns the value of the {{Type|DNumSlider}}","examples":[],"isConstructor":false,"name":"GetValue","realm":"client","returns":[{"description":"The value of the slider.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if either the {{Type|DTextEntry}}, the {{Type|DSlider}} or the {{Type|DNumberScratch}} are being edited.","examples":[],"isConstructor":false,"name":"IsEditing","realm":"client","returns":[{"description":"Whether or not the {{Type|DNumSlider}} is being edited by the player.","type":"DNumSlider"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The new value of the DNumSlider","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Called when the value of the slider is changed, through code or changing the slider.","examples":[],"isConstructor":false,"name":"OnValueChanged","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resets the slider to the default value, if one was set by {{ClassFunction|DNumSlider|SetDefaultValue}}.\n\nThis function is called by the {{Type|DNumSlider}} when user middle mouse clicks on the draggable knob of the slider.","examples":[],"isConstructor":false,"name":"ResetToDefaultValue","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the {{Type|ConVar}} to be updated.","isOptional":false,"isVarArg":false,"name":"cvar","type":"string"}],"description":"Sets the console variable to be updated when the value of the slider is changed.","examples":[],"isConstructor":false,"name":"SetConVar","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"dark","type":"boolean"}],"description":"Calls {{ClassFunction|DLabel|SetDark}} on the {{Type|DLabel}} part of the {{Type|DNumSlider}}.","examples":[],"isConstructor":false,"name":"SetDark","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"0 for whole numbers only, 1 for one number after the decimal point, etc.","isOptional":false,"isVarArg":false,"name":"decimals","type":"number"}],"description":"Sets the desired amount of numbers after the decimal point.","examples":[],"isConstructor":false,"name":"SetDecimals","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new default value of the slider to set","isOptional":false,"isVarArg":false,"name":"defaultVal","type":"number"}],"description":"Sets the default value of the slider, to be used by {{ClassFunction|DNumSlider|ResetToDefaultValue}} or by middle mouse clicking the draggable knob of the slider.","examples":[],"isConstructor":false,"name":"SetDefaultValue","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to set as maximum for the slider.","isOptional":false,"isVarArg":false,"name":"max","type":"number"}],"description":"Sets the maximum value for the slider.","examples":[],"isConstructor":false,"name":"SetMax","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to set as minimum for the slider.","isOptional":false,"isVarArg":false,"name":"min","type":"number"}],"description":"Sets the minimum value for the slider","examples":[{"code":"--This creates the frame.\nlocal Frame = vgui.Create( \"DFrame\" )\nFrame :Center() -- or Frame:SetPos( x, y )\nFrame:SetSize( 300, 150 )\nFrame:SetTitle( \"Test\" )\nFrame:SetVisible( true )\nFrame:SetDraggable( true )\nFrame:ShowCloseButton( true )\nFrame:MakePopup()\n--Here we create the slider.\nlocal DermaSlider = vgui.Create( \"DNumSlider\", Frame )\nDermaSlider:SetPos( 25, 85 )\nDermaSlider:SetWide( 275 )\nDermaSlider:SetMin( 0 ) -- Or 3 for second image\nDermaSlider:SetMax( 5 )\nDermaSlider:SetValue( 0.5 )\nDermaSlider:SetDecimals( 2 )","description":"An example usage of the function"}],"isConstructor":false,"name":"SetMin","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum value of the slider.","isOptional":false,"isVarArg":false,"name":"min","type":"number"},{"default":"","description":"The maximum value of the slider.","isOptional":false,"isVarArg":false,"name":"max","type":"number"}],"description":"Sets the minimum and the maximum value of the slider.","examples":[],"isConstructor":false,"name":"SetMinMax","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to set.","isOptional":false,"isVarArg":false,"name":"val","type":"number"}],"description":"Sets the value of the {{Type|DNumSlider}}.","examples":[],"isConstructor":false,"name":"SetValue","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"{{Internal}}\n{{Stub}}","examples":[],"isConstructor":false,"name":"TranslateSliderValues","realm":"client","returns":[{"description":"","type":"number"},{"description":"The second passed argument.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n{{Stub}}","examples":[],"isConstructor":false,"name":"UpdateNotches","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value the slider has been changed to.","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"{{Internal}} Called when the value has been changed. This will also be called when the user manually changes the value through the text panel.\n\nThis is an internal function. Override {{ClassFunction|DNumSlider|OnValueChanged}} instead.","examples":[],"isConstructor":false,"name":"ValueChanged","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the value the panel holds.\n\nIn engine is only implemented for {{Type|CheckButton}}, {{Type|Label}} and {{Type|TextEntry}} as a string and for those elements has a hard coded limit of 8092 characters.","examples":[{"code":"local TextEntry = vgui.Create( \"TextEntry\" )\nTextEntry:SetText( \"Hello world!\" )\nprint( TextEntry:GetValue() )","description":"Returns the string typed in a TextEntry."}],"isConstructor":false,"name":"GetValue","realm":"client","returns":[{"description":"The value the panel holds.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The console variable to check.","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"{{Warning|This function does not exist on all panels}}\n\nSets this panel's convar. When the convar changes this panel will update automatically.\n\nFor developer implementation, see {{GlobalFunction|Derma_Install_Convar_Functions}}.","examples":[{"code":"local checkbox = vgui.Create( \"DCheckBoxLabel\", myFrame )\ncheckbox:SetConVar( \"sv_cheats\" )\ncheckbox:SetText( \"Enable cheats?\" )\ncheckbox:SetPos( 5, 25 )\ncheckbox:SizeToContents()","description":"Makes a checkbox linked to the '''sv_cheats''' convar."}],"isConstructor":false,"name":"SetConVar","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DNumSlider"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A simple rectangular box, commonly used for parenting other elements to. Pretty much all elements are based on this.","examples":[{"code":"local DPanel = vgui.Create( \"DPanel\" )\nDPanel:SetPos( 10, 30 ) -- Set the position of the panel\nDPanel:SetSize( 200, 200 ) -- Set the size of the panel\n\nlocal DLabel = vgui.Create( \"DLabel\", DPanel )\nDLabel:SetPos( 10, 10 ) -- Set the position of the label\nDLabel:SetText( \"I'm a DLabel inside a DPanel! :)\" ) --  Set the text of the label\nDLabel:SizeToContents() -- Size the label to fit the text in it\nDLabel:SetDark( 1 ) -- Set the colour of the text inside the label to a darker one","description":"Creates a DPanel and adds a {{Type|DLabel}} to it"}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the panel's background color.\n\n{{Note|By default this returns '''nil''' even though the default background color is white}}","examples":[{"code":"BGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetPos(20, 20)\nBGPanel:SetSize(200, 200)\n\nprint(BGPanel:GetBackgroundColor())","description":"Prints out the default panel background color."}],"isConstructor":false,"name":"GetBackgroundColor","realm":"client","returns":[{"description":"Color of the panel's background.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the panel is disabled.","examples":[],"isConstructor":false,"name":"GetDisabled","realm":"client","returns":[{"description":"True if the panel is disabled (mouse input disabled and background alpha set to 75), false if its enabled (mouse input enabled and background alpha set to 255).","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|You should use {{ClassFunction|DPanel|GetPaintBackground}} instead.}}Returns whether or not the panel background is being drawn. Alias of {{ClassFunction|DPanel|GetPaintBackground}}.","examples":[],"isConstructor":false,"name":"GetDrawBackground","realm":"client","returns":[{"description":"True if the panel background is drawn, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the panel background is being drawn.","examples":[],"isConstructor":false,"name":"GetPaintBackground","realm":"client","returns":[{"description":"True if the panel background is drawn, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The background color.","isOptional":false,"isVarArg":false,"name":"color","type":"table"}],"description":"Sets the background color of the panel.","examples":[{"code":"COLOR_TEAM_RED = Color(255, 64, 64, 255)\nCOLOR_TEAM_BLUE = Color(153, 204, 255, 255)\n\nBGPanel1 = vgui.Create(\"DPanel\")\nBGPanel1:SetPos(20, 20)\nBGPanel1:SetSize(200, 200)\nBGPanel1:SetBackgroundColor(COLOR_TEAM_RED)\n\t\t\nBGPanel2 = vgui.Create(\"DPanel\")\nBGPanel2:SetPos(220, 20)\nBGPanel2:SetSize(200, 200)\nBGPanel2:SetBackgroundColor(COLOR_TEAM_BLUE)","description":"Creates two empty panels with their background colors set to red and blue team colors."}],"isConstructor":false,"name":"SetBackgroundColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to disable the panel (mouse input disabled and background alpha set to 75), false to enable it (mouse input enabled and background alpha set to 255).","isOptional":false,"isVarArg":false,"name":"disabled","type":"boolean"}],"description":"Sets whether or not to disable the panel.","examples":[],"isConstructor":false,"name":"SetDisabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to show the panel's background, false to hide it.","isOptional":false,"isVarArg":false,"name":"draw","type":"boolean"}],"description":"{{Deprecated|You should use {{ClassFunction|DPanel|SetPaintBackground}} instead.}}Sets whether or not to draw the panel background. Alias of {{ClassFunction|DPanel|SetPaintBackground}}.","examples":[],"isConstructor":false,"name":"SetDrawBackground","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to show the panel's background, false to hide it.","isOptional":false,"isVarArg":false,"name":"paint","type":"boolean"}],"description":"Sets whether or not to paint/draw the panel background.","examples":[],"isConstructor":false,"name":"SetPaintBackground","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DPanel"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"Functions related to Kinect for Windows usage in GMod.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"translator","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"player","type":"Player"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"rotation","type":"Angle"}],"description":"","examples":[],"isConstructor":false,"name":"BuildSkeleton","realm":"shared","returns":[{"description":"Pos","type":"Vector"},{"description":"ang","type":"Angle"},{"description":"sensor","type":"sensor"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity to choose builder for","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"","examples":[],"isConstructor":false,"name":"ChooseBuilderFromEntity","realm":"shared","returns":[{"description":"Chosen builder","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the depth map material.","examples":[],"isConstructor":false,"name":"GetColourMaterial","realm":"client and menu","returns":[{"description":"The material","type":"IMaterial"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetSkeleton","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Return whether a kinect is connected - and active (ie - Start has been called).","examples":[],"isConstructor":false,"name":"IsActive","realm":"client","returns":[{"description":"Connected and active or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if we have detected that there's a kinect connected to the PC","examples":[],"isConstructor":false,"name":"IsAvailable","realm":"client and menu","returns":[{"description":"Connected or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"translator","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"sensor","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"special_vectors","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"boneid","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"v","type":"table"}],"description":"","examples":[],"isConstructor":false,"name":"ProcessAngle","realm":"shared","returns":[{"description":"Return nil on failure","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"translator","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"sensor","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"rotation","type":"Angle"}],"description":"","examples":[],"isConstructor":false,"name":"ProcessAnglesTable","realm":"shared","returns":[{"description":"Ang. If !translator.AnglesTable then return - {}","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"translator","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"sensor","type":"table"}],"description":"","examples":[],"isConstructor":false,"name":"ProcessPositionTable","realm":"shared","returns":[{"description":"Pos. if !translator.PositionTable then return - {}","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"This starts access to the kinect sensor. Note that this usually freezes the game for a couple of seconds.","examples":[],"isConstructor":false,"name":"Start","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Stops the motion capture.","examples":[],"isConstructor":false,"name":"Stop","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"motionsensor"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Deprecated\n|DPanelList was succeeded in version 13 by more specialised layout elements, such as a combination of {{Type|DIconLayout}}, {{Type|DListLayout}} and {{Type|DScrollPanel}}.\n}}\n\nDisplays elements in a horizontal or vertical list. A scrollbar is automatically shown if necessary.\nUse is not recommended due to deprecation.","examples":[],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Panel to be used as element of list","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"Adds a existing panel to the end of {{Type|DPanelList}}.","examples":[],"isConstructor":false,"name":"AddItem","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Enables/creates the vertical scroll bar so that the panel list can be scrolled through.","examples":[],"isConstructor":false,"name":"EnableVerticalScrollbar","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns all panels has added by {{ClassFunction|DPanelList|AddItem}}","examples":[],"isConstructor":false,"name":"GetItems","realm":"client","returns":[{"description":"A table of panels used as items of {{Type|DPanelList}}.","type":"DPanelList[]"}]},{"accessModifier":"public","arguments":[],"description":"Returns offset of list items from the panel borders set by {{ClassFunction|DPanelList|SetPadding}}","examples":[],"isConstructor":false,"name":"GetPadding","realm":"client","returns":[{"description":"Offset from panel borders","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns distance between list items set by {{ClassFunction|DPanelList|SetSpacing}}","examples":[],"isConstructor":false,"name":"GetSpacing","realm":"client","returns":[{"description":"Distance between panels","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to insert","isOptional":false,"isVarArg":false,"name":"insert","type":"Panel"},{"default":"","description":"If set to \"ownline\", no other panels will be placed to the left or right of the panel we are inserting","isOptional":false,"isVarArg":false,"name":"strLineState","type":"string"}],"description":"","examples":[],"isConstructor":false,"name":"InsertAtTop","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Offset from panel borders","isOptional":false,"isVarArg":false,"name":"Offset","type":"number"}],"description":"Sets the offset of the lists items from the panel borders","examples":[],"isConstructor":false,"name":"SetPadding","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Distance between panels","isOptional":false,"isVarArg":false,"name":"Distance","type":"number"}],"description":"Sets distance between list items","examples":[],"isConstructor":false,"name":"SetSpacing","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DPanelList"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Adds curved corners.","examples":[{"code":"local DFrame = vgui.Create( \"DFrame\" )\nDFrame:SetSize( 350, 200 ) -- Set the size of the panel\nDFrame:Center()\nDFrame:MakePopup()\n\nlocal DPanel = vgui.Create( \"Panel\", DFrame )\nDPanel:Dock( FILL )\n\nlocal DLabel = vgui.Create( \"DLabel\", DPanel )\nDLabel:SetPos( 10, 10 ) -- Set the position of the label\nDLabel:SetText( \"I'm a DLabel inside a DPanel that has a DPanelOverlay border!\" ) -- Set the text of the label\nDLabel:SizeToContents() -- Size the label to fit the text in it\n\nlocal DPanelOverlay = vgui.Create( \"DPanelOverlay\", DPanel )\nDPanelOverlay:SetType( 1 ) -- Sets the type of overlay to add to the DPanel\nDPanelOverlay:SetColor( Color( 255, 0, 0 ) ) -- Sets the colour of the borders","description":"Creates a {{Type|DPanel}} with a DPanelOverlay and adds a {{Type|DLabel}} to it"}],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the border color of the {{Type|DPanelOverlay}} set by {{ClassFunction|DPanelOverlay|SetColor}}.","examples":[],"isConstructor":false,"name":"GetColor","realm":"client","returns":[{"description":"The set color. Uses the {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[],"description":"Returns the type of the {{Type|DPanelOverlay}} set by {{ClassFunction|DPanelOverlay|SetType}}.","examples":[],"isConstructor":false,"name":"GetType","realm":"client","returns":[{"description":"The set type.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"cola","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"colb","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"colc","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"cold","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"size","type":"number"}],"description":"{{Internal}}Used internally by the panel for type 3.","examples":[],"isConstructor":false,"name":"PaintDifferentColours","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"size","type":"number"}],"description":"{{Internal}}Used internally by the panel for types 1 and 2.","examples":[],"isConstructor":false,"name":"PaintInnerCorners","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The color to set. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Sets the border color of the {{Type|DPanelOverlay}}.","examples":[],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The type to set.\n\nPossible value are:\n* 1 - 8px corners of given color\n* 2 - 4px corners of given type\n* 3 - 2 top? corners of hardcoded color, 2 other corners of given color","isOptional":false,"isVarArg":false,"name":"type","type":"number"}],"description":"Sets the type of the {{Type|DPanelOverlay}}.","examples":[],"isConstructor":false,"name":"SetType","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DPanelOverlay"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Deprecated|This is derived from the deprecated {{Type|DPanelList}}.}} A base panel for things like {{Type|DModelSelect}}. Basically, a list of panels that can be selected. Selected panel can be retrieved and has visual indication of being selected.","examples":[],"extends":"DPanelList","functions":[],"isHook":false,"isPureAbstract":true,"name":"DPanelSelect"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A progressbar, works with a fraction between 0 and 1 where 0 is 0% and 1 is 100%.","examples":[{"code":"local DProgress = vgui.Create( \"DProgress\" )\nDProgress:SetPos( 10, 30 )\nDProgress:SetSize( 200, 20 )\nDProgress:SetFraction( 0.75 )","description":"Creates a DProgress set to 75% (0.75 out of 1)"}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the progress bar's fraction. 0 is 0% and 1 is 100%.","examples":[],"isConstructor":false,"name":"GetFraction","realm":"client","returns":[{"description":"Current fraction of the progress bar.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Fraction of the progress bar. Range is 0 to 1 (0% to 100%).","isOptional":false,"isVarArg":false,"name":"fraction","type":"number"}],"description":"Sets the fraction of the progress bar. 0 is 0% and 1 is 100%.","examples":[],"isConstructor":false,"name":"SetFraction","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DProgress"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The navigation mesh library. To be used with {{Type|CNavArea}}.<br/>\nThe navigation mesh is used by {{Type|NextBot}} to calculate path to its target.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The terrain position.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"The normal of this terrain position.","isOptional":false,"isVarArg":false,"name":"dir","type":"Vector"}],"description":"Add this position and normal to the list of walkable positions, used before map generation with {{LibraryFunction|navmesh|BeginGeneration}}","examples":[],"isConstructor":false,"name":"AddWalkableSeed","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Starts the generation of a new navmesh.\n\n{{Note|This process is highly resource intensive and it's not wise to use during normal gameplay}}","examples":[],"isConstructor":false,"name":"BeginGeneration","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Clears all the walkable positions, used before calling {{LibraryFunction|navmesh|BeginGeneration}}.","examples":[],"isConstructor":false,"name":"ClearWalkableSeeds","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The first corner of the new {{Type|CNavArea}}","isOptional":false,"isVarArg":false,"name":"corner","type":"CNavArea"},{"default":"","description":"The opposite (diagonally) corner of the new {{Type|CNavArea}}","isOptional":false,"isVarArg":false,"name":"opposite_corner","type":"CNavArea"}],"description":"Creates a new {{Type|CNavArea}}.","examples":[],"isConstructor":false,"name":"CreateNavArea","realm":"server","returns":[{"description":"The new {{Type|CNavArea}} or {{Type|nil}} if we failed for some reason.","type":"CNavArea | undefined"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to search around","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"Radius to search within","isOptional":false,"isVarArg":false,"name":"radius","type":"number"},{"default":"","description":"Maximum stepdown( fall distance ) allowed","isOptional":false,"isVarArg":false,"name":"stepdown","type":"number"},{"default":"","description":"Maximum stepup( jump height ) allowed","isOptional":false,"isVarArg":false,"name":"stepup","type":"number"}],"description":"Returns a bunch of areas within distance, used to find hiding spots by {{Type|NextBot}}s for example.","examples":[],"isConstructor":false,"name":"Find","realm":"server","returns":[{"description":"A table of {{Type|CNavArea}}s","type":"CNavArea[]"}]},{"accessModifier":"public","arguments":[],"description":"Returns an integer indexed table of all {{Type|CNavArea}}s on the current map. If the map doesn't have a navmesh generated then this will return an empty table.","examples":[],"isConstructor":false,"name":"GetAllNavAreas","realm":"server","returns":[{"description":"A table of all the {{Type|CNavArea}}s on the current map.","type":"CNavArea[]"}]},{"accessModifier":"public","arguments":[],"description":"Returns the position of the edit cursor when nav_edit is set to 1.","examples":[],"isConstructor":false,"name":"GetEditCursorPosition","realm":"server","returns":[{"description":"The position of the edit cursor.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Position to find the closest ground for.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Finds the closest standable ground at, above, or below the provided position.\n\n{{Note|The ground must have at least 32 units of empty space above it to be considered by this function, unless 16 layers are tested without finding valid ground.}}","examples":[],"isConstructor":false,"name":"GetGroundHeight","realm":"server","returns":[{"description":"The height of the ground layer.","type":"number"},{"description":"The normal of the ground layer.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the currently marked {{Type|CNavArea}}, for use with editing console commands.","examples":[],"isConstructor":false,"name":"GetMarkedArea","realm":"server","returns":[{"description":"The currently marked {{Type|CNavArea}}.","type":"CNavArea"}]},{"accessModifier":"public","arguments":[],"description":"Returns the currently marked {{Type|CNavLadder}}, for use with editing console commands.","examples":[],"isConstructor":false,"name":"GetMarkedLadder","realm":"server","returns":[{"description":"The currently marked {{Type|CNavLadder}}.","type":"CNavLadder"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to search for.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"The elevation limit at which the Nav Area will be searched.","isOptional":false,"isVarArg":false,"name":"beneathLimit","type":"number"}],"description":"Returns the Nav Area contained in this position that also satisfies the elevation limit.","examples":[],"isConstructor":false,"name":"GetNavArea","realm":"server","returns":[{"description":"The nav area.","type":"CNavArea"}]},{"accessModifier":"public","arguments":[{"default":"","description":"ID of the {{Type|CNavArea}} to get. Starts with 1.","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Returns a {{Type|CNavArea}} by the given ID.\n\n{{Note|Avoid calling this function every frame, as internally it does a lookup trough all the {{Type|CNavArea}}s, call this once and store the result}}","examples":[],"isConstructor":false,"name":"GetNavAreaByID","realm":"server","returns":[{"description":"The {{Type|CNavArea}} with given ID.","type":"CNavArea"}]},{"accessModifier":"public","arguments":[],"description":"Returns the highest ID of all nav areas on the map. While this can be used to get all nav areas, this number may not actually be the actual number of nav areas on the map.","examples":[],"isConstructor":false,"name":"GetNavAreaCount","realm":"server","returns":[{"description":"The highest ID of all nav areas on the map.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"ID of the {{Type|CNavLadder}} to get. Starts with 1.","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Returns a {{Type|CNavLadder}} by the given ID.","examples":[],"isConstructor":false,"name":"GetNavLadderByID","realm":"server","returns":[{"description":"The {{Type|CNavLadder}} with given ID.","type":"CNavLadder"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to look from","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"false","description":"This argument is ignored and has no effect","isOptional":true,"isVarArg":false,"name":"anyZ","type":"boolean"},{"default":"10000","description":"This is the maximum distance from the given position that the function will look for a {{Type|CNavArea}}","isOptional":true,"isVarArg":false,"name":"maxDist","type":"number"},{"default":"false","description":"If this is set to true then the function will internally do a {{LibraryFunction|util|TraceLine}} from the starting position to each potential {{Type|CNavArea}} with a MASK_NPCSOLID_BRUSHONLY {{Enum|MASK|Test}}. If the trace fails then the {{Type|CNavArea}} is ignored.\n\nIf this is set to false then the function will find the closest {{Type|CNavArea}} through anything, including the world.","isOptional":true,"isVarArg":false,"name":"checkLOS","type":"CNavArea | CNavArea | CNavArea"},{"default":"true","description":"If checkGround is true then this function will internally call {{LibraryFunction|navmesh|GetNavArea}} to check if there is a {{Type|CNavArea}} directly below the position, and return it if so, before checking anywhere else.","isOptional":true,"isVarArg":false,"name":"checkGround","type":"CNavArea"},{"default":"TEAM_ANY=-2","description":"This will internally call {{ClassFunction|CNavArea|IsBlocked}} to check if the target {{Type|CNavArea}} is not to be navigated by the given team. Currently this appears to do nothing.","isOptional":true,"isVarArg":false,"name":"team","type":"number"}],"description":"Returns the closest {{Type|CNavArea}} to given position at the same height, or beneath it.","examples":[],"isConstructor":false,"name":"GetNearestNavArea","realm":"server","returns":[{"description":"The closest {{Type|CNavArea}} found with the given parameters.","type":"CNavArea"}]},{"accessModifier":"public","arguments":[],"description":"Returns the classname of the player spawn entity.","examples":[],"isConstructor":false,"name":"GetPlayerSpawnName","realm":"server","returns":[{"description":"The classname of the spawn point entity. By default returns \"info_player_start\"","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Whether we're currently generating a new navmesh with {{LibraryFunction|navmesh|BeginGeneration}}.","examples":[],"isConstructor":false,"name":"IsGenerating","realm":"server","returns":[{"description":"Whether we're generating a nav mesh or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if a navmesh has been loaded when loading the map.","examples":[],"isConstructor":false,"name":"IsLoaded","realm":"server","returns":[{"description":"Whether a navmesh has been loaded when loading the map.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Loads a new navmesh from the .nav file for current map discarding any changes made to the navmesh previously.","examples":[],"isConstructor":false,"name":"Load","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Deletes every {{Type|CNavArea}} and {{Type|CNavLadder}} on the map '''without saving the changes'''.","examples":[],"isConstructor":false,"name":"Reset","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Saves any changes made to navmesh to the .nav file.","examples":[],"isConstructor":false,"name":"Save","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|CNavArea}} to set as the marked area.","isOptional":false,"isVarArg":false,"name":"area","type":"CNavArea"}],"description":"Sets the {{Type|CNavArea}} as marked, so it can be used with editing console commands.","examples":[],"isConstructor":false,"name":"SetMarkedArea","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|CNavLadder}} to set as the marked ladder.","isOptional":false,"isVarArg":false,"name":"area","type":"CNavLadder"}],"description":"Sets the {{Type|CNavLadder}} as marked, so it can be used with editing console commands.","examples":[],"isConstructor":false,"name":"SetMarkedLadder","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The classname of what the player uses to spawn, automatically adds it to the walkable positions during map generation.","isOptional":false,"isVarArg":false,"name":"spawnPointClass","type":"string"}],"description":"Sets the classname of the default spawn point entity, used before generating a new navmesh with {{LibraryFunction|navmesh|BeginGeneration}}.","examples":[],"isConstructor":false,"name":"SetPlayerSpawnName","realm":"server","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"navmesh"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A grid for editing the properties of something using names and values. Properties can be categorized and strongly typed.\n\n== Associated controls ==\n*{{Type|DProperty_VectorColor}}\n*{{Type|DProperty_Boolean}}\n*{{Type|DProperty_Generic}}\n*{{Type|DProperty_Combo}}\n*{{Type|DProperty_Float}}\n*{{Type|DProperty_Int}}","examples":[{"code":"local f = vgui.Create( \"DFrame\" )\nf:SetSize( 500, 300 )\nf:Center()\nf:MakePopup()\n\nlocal DProperties = vgui.Create( \"DProperties\", f )\nDProperties:Dock( FILL )\n\nlocal Row1 = DProperties:CreateRow( \"Category1\", \"Vector Color\" )\nRow1:Setup( \"VectorColor\" )\nRow1:SetValue( Vector( 1, 0, 0 ) )\nRow1.DataChanged = function( _, val ) print( val ) end\n\nlocal Row2 = DProperties:CreateRow( \"Category1\", \"Combo\" )\nRow2:Setup( \"Combo\", { text = \"Select type...\" } )\nRow2:AddChoice( \"Table\", {} )\nRow2:AddChoice( \"String\", \"Hello world\" )\nRow2.DataChanged = function( self, data )\n\tprint( \"You selected: \", data )\nend\n\nlocal Row3 = DProperties:CreateRow( \"Category1\", \"Boolean\" )\nRow3:Setup( \"Boolean\" )\nRow3:SetValue( true )\n\nlocal Row4 = DProperties:CreateRow( \"Category2\", \"Float\" )\nRow4:Setup( \"Float\", { min = 0, max = 5 } )\nRow4:SetValue( 2.5 )\n\nlocal Row5 = DProperties:CreateRow( \"Category2\", \"Integer\" )\nRow5:Setup( \"Int\", { min = 0, max = 5 } )\nRow5:SetValue( 2.5 )\n\nlocal Row6 = DProperties:CreateRow( \"Category2\", \"Generic\" )\nRow6:Setup( \"Generic\" )\nRow6:SetValue( \"Hello World!\" )\nRow6.DataChanged = function( _, val ) print( val ) end","description":"Creates a DProperties control with a few properties set up"}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The category to list this row under","isOptional":false,"isVarArg":false,"name":"category","type":"string"},{"default":"","description":"The label of this row","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Creates a row in the properties panel.","examples":[],"isConstructor":false,"name":"CreateRow","realm":"client","returns":[{"description":"An internal Row panel.","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns the {{Type|DScrollPanel}} all the properties panels are attached to.","examples":[],"isConstructor":false,"name":"GetCanvas","realm":"client","returns":[{"description":"A {{Type|DScrollPanel}} canvas","type":"DScrollPanel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the category","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Create a new category if it doesn't exist.","isOptional":false,"isVarArg":false,"name":"create","type":"boolean"}],"description":"{{Internal}}\n\nReturns (or creates) a category of properties.\n\nSee {{ClassFunction|DProperties|CreateRow}} for adding actual properties.","examples":[],"isConstructor":false,"name":"GetCategory","realm":"client","returns":[{"description":"An internal panel.","type":"Panel"}]}],"isHook":false,"isPureAbstract":true,"name":"DProperties"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}\nCheckbox control for the {{Type|DProperties}} panel.","examples":[{"code":"local Panel = vgui.Create( \"DFrame\" )\nPanel:SetSize( 500, 500 )\nPanel:MakePopup()\n\nlocal props = vgui.Create( \"DProperties\", Panel )\nprops:Dock( FILL )\n\nlocal boolRow = props:CreateRow( \"MyCategory\", \"CheckboxExample\" )\nboolRow:Setup( \"Boolean\" )\nboolRow:SetValue( true )\nboolRow.DataChanged = function( self, data )\n\tMsgN( \"Data changed: \", data )\nend","description":"Example of this panel"}],"extends":"DProperty_Generic","functions":[],"isHook":false,"isPureAbstract":true,"name":"DProperty_Boolean"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}Combo control for a {{Type|DProperties}} panel.","examples":[{"code":"local Panel = vgui.Create( \"DFrame\" )\nPanel:SetSize( 500, 500 )\nPanel:MakePopup()\n\nlocal DP = vgui.Create( \"DProperties\", Panel )\nDP:Dock( FILL )\n\nlocal choice = DP:CreateRow( \"Choices\", \"Combo #1: Default\" )\nchoice:Setup( \"Combo\", {} )\nchoice:AddChoice( \"Allow\", true )\nchoice:AddChoice( \"Disallow\", false )\n\nlocal choice = DP:CreateRow( \"Choices\", \"Combo #2: Custom default text\" )\nchoice:Setup( \"Combo\", { text = \"Select type...\" } )\nchoice:AddChoice( \"Table\", {} )\nchoice:AddChoice( \"Function\", function() end )\nchoice:AddChoice( \"String\", \"Hello world\" )\nchoice.DataChanged = function( self, data )\n    print( \"You selected: \", data )\nend","description":""}],"extends":"DProperty_Generic","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Shown text.","isOptional":false,"isVarArg":false,"name":"Text","type":"string"},{"default":"","description":"Stored Data.","isOptional":false,"isVarArg":false,"name":"data","type":"any"},{"default":"false","description":"Select this element?","isOptional":true,"isVarArg":false,"name":"select","type":"boolean"}],"description":"Add a choice to your combo control.","examples":[{"code":"local choice = DP:CreateRow( \"Choices\", \"Hello world\" )\nchoice:Setup( \"Combo\" )\nchoice:AddChoice( \"I am a choice\", {} )\nchoice:AddChoice( \"I am selected\", 8, true )\nchoice:AddChoice( \"I am not selected\", \"Hello world\" )","description":"Set the \"I am selected\" option selected."}],"isConstructor":false,"name":"AddChoice","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new data that was selected.","isOptional":false,"isVarArg":false,"name":"data","type":"any"}],"description":"Called after the user selects a new value.","examples":[{"code":"local choice = DP:CreateRow( \"Choices\", \"Combo #2: Custom default text\" )\nchoice:Setup( \"Combo\", \"Select type...\" )\nchoice:AddChoice( \"Table\", {} )\nchoice:AddChoice( \"Function\", function() end )\nchoice:AddChoice( \"String\", \"Hello world\" )\nchoice.DataChanged = function( self, data )\n\n   print( \"You selected: \", data )\n\nend","description":"Click on the \"Table\" choice."}],"isConstructor":false,"name":"DataChanged","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Id of the choice to be selected.","isOptional":false,"isVarArg":false,"name":"Id","type":"number"}],"description":"Set the selected option.","examples":[{"code":"local choice = DP:CreateRow( \"Choices\", \"Hello world\" )\nchoice:Setup( \"Combo\" )\nchoice:AddChoice( \"Choice #1\", {} )\nchoice:AddChoice( \"Choice #2\", 8 )\nchoice:AddChoice( \"Choice #3\", \"Hello world\", true )\nchoice:SetSelected( 2 ) -- Even if \"Choice #3\" is selected by default, \"Choice #2\" will be selected.","description":"Set the second option selected."}],"isConstructor":false,"name":"SetSelected","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"\"Combo\"","description":"The name of DProperty sub control to add.","isOptional":true,"isVarArg":false,"name":"prop","type":"string"},{"default":"{ text = \"Select...\" }","description":"Data to use to set up the combo box control.\n\nStructure:\n* {{FuncArg|string|text|The default label for this combo box}}\n* {{FuncArg|table|values|The values to add to the combo box}}","isOptional":true,"isVarArg":false,"name":"data","type":"table"}],"description":"Sets up a combo control.","examples":[{"code":"local Combo = DP:CreateRow( \"Catergory\", \"Hello World\" )\nCombo:Setup( \"Combo\", {\n\ttext = \"Select me!\",\n\tvalues = {\n\t\t[ \"Label 1\" ] = \"data 1\",\n\t\t[ \"Label 2\" ] = 2,\n\t}\n} )","description":"Setup a Combo control with a custom default text and two options."}],"isConstructor":false,"name":"Setup","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"Whether the object should be selected or deselected. {{ClassFunction|Panel|IsSelected}} can be used to determine the selected state of the object.","isOptional":true,"isVarArg":false,"name":"selected","type":"boolean"}],"description":"Sets the selected state of a selectable panel object. This functionality is set with {{ClassFunction|Panel|SetSelectable}} and checked with {{ClassFunction|Panel|IsSelectable}}.","examples":[],"isConstructor":false,"name":"SetSelected","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DProperty_Combo"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}Float control for the {{Type|DProperties}} panel.","examples":[],"extends":"DProperty_Generic","functions":[],"isHook":false,"isPureAbstract":true,"name":"DProperty_Float"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A base for other controls for {{Type|DProperties}}. Acts as a generic text input on its own.","examples":[{"code":"local Panel = vgui.Create( \"DFrame\" )\nPanel:SetSize( 500, 500 )\nPanel:MakePopup()\n\nlocal props = vgui.Create( \"DProperties\", Panel )\nprops:Dock( FILL )\n\nlocal textRow = props:CreateRow( \"MyCategory\", \"GenericTextArea\" )\ntextRow:Setup( \"Generic\" )\ntextRow:SetValue( \"test\" )\ntextRow.DataChanged = function( self, data )\n\tMsgN( \"Text changed: \", data )\nend","description":"Example usage of this control"}],"extends":"Panel","functions":[],"isHook":false,"isPureAbstract":true,"name":"DProperty_Generic"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}Integer control for the {{Type|DProperties}} panel.","examples":[],"extends":"DProperty_Float","functions":[],"isHook":false,"isPureAbstract":true,"name":"DProperty_Int"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Color picker control for a DProperties panel. Opens a {{Type|DColorCombo}} if the color preview is clicked.\n\nSee [[Editable Entities]] for how this is used ingame.","examples":[{"code":"local Panel = vgui.Create( \"DFrame\" )\nPanel:SetSize( 500, 500 )\nPanel:MakePopup()\n\nlocal props = vgui.Create( \"DProperties\", Panel )\nprops:Dock( FILL )\n\nlocal colorPicker = props:CreateRow( \"Color\", \"Select Color\" )\ncolorPicker:Setup( \"VectorColor\", {} )\ncolorPicker:SetValue( Vector( 0.61, 0.1, 0.1 ) )\ncolorPicker.DataChanged = function( self, data )\n\tMsgN( \"Selected color: \", data )\nend","description":"Creates a demo VectorColor property."}],"extends":"DProperty_Generic","functions":[{"accessModifier":"public","arguments":[{"default":"\"VectorColor\"","description":"","isOptional":true,"isVarArg":false,"name":"prop","type":"string"},{"default":"","description":"A table of settings. None of the values are used for this property. See [[Editable Entities]].","isOptional":true,"isVarArg":false,"name":"settings","type":"table"}],"description":"{{Internal}} Called by a property row to setup a color selection control.","examples":[],"isConstructor":false,"name":"Setup","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Sets the color to use in a {{Type|DProperty_VectorColor}}.","isOptional":false,"isVarArg":false,"name":"color","type":"DProperty_VectorColor"}],"description":"Sets the color value of the property.","examples":[{"code":"local color = DP:CreateRow( \"Category\", \"Select Color\" )\ncolor:Setup( \"VectorColor\", {} )\ncolor:SetValue( Vector( 0.39, 1, 1 ) )","description":"Setup a color selection control with a custom default color."}],"isConstructor":false,"name":"SetValue","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A table of settings. None of the values are used for this property. See [[Editable Entities]].","isOptional":false,"isVarArg":false,"name":"settings","type":"table"}],"description":"{{Internal}} Called by a property row to setup a color selection control.","examples":[],"isConstructor":false,"name":"Setup","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DProperty_VectorColor"},{"classFields":[],"collectionType":"class","customConstructor":"Entity","description":"This is a list of all available methods for entites, which includes [http://wiki.garrysmod.com/page/Category:Player Players], [http://wiki.garrysmod.com/page/Category:Weapon Weapons], [http://wiki.garrysmod.com/page/Category:NPC NPCs] and [http://wiki.garrysmod.com/page/Category:Vehicle Vehicles].","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The entity index.","isOptional":false,"isVarArg":false,"name":"entityIndex","type":"number"}],"description":"Returns the entity with the matching {{ClassFunction|Entity|EntIndex}}.\n\nIndices 1 through {{LibraryFunction|game|MaxPlayers}}() are always reserved for players.\n\n{{Note|In examples on this wiki, '''Entity( 1 )''' is used when a player entity is needed (see [[Help:Editing|wiki editing guide]]). In singleplayer and listen servers, '''Entity( 1 )''' will always be the first player. In dedicated servers, however, '''Entity( 1 )''' won't always be a valid player.}}","examples":[],"isConstructor":true,"name":"constructor","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Activates the entity. This needs to be used on some entities (like constraints) after being spawned.\n\n{{Note|For some entity types when this function is used after {{ClassFunction|Entity|SetModelScale}}, the physics object will be recreated with the new scale. [https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/baseanimating.cpp#L321-L327 Source-sdk-2013]}}\n{{Bug|Issue=3372|This crashes the game with scaled vehicles.}}","examples":[{"code":"function ENT:SpawnMe(ply)\n\tlocal SpawningPos = ply:GetPos()\n\tlocal ent = ents.Create(\"sent_ball\")\n\tent:SetPos( SpawningPos ) \n\tent:Spawn()\n\tent:Activate()\nend","description":"Spawns a 'sent_ball' on the player."}],"isConstructor":false,"name":"Activate","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The hook name to hook onto. See [[Entity Callbacks]]","isOptional":false,"isVarArg":false,"name":"hook","type":"string"},{"default":"","description":"The function to call","isOptional":false,"isVarArg":false,"name":"func","type":"Function"}],"description":"Add a callback function to a specific event. This is used instead of hooks to avoid calling empty functions unnecessarily.\n\nThis also allows you to use certain hooks in engine entities (non-scripted entities).\n\n{{Warning|This method does not check if the function has already been added to this object before, so if you add the same callback twice, it will be run twice! Make sure to add your callback only once.}}","examples":[{"code":"function myfunc( entity, newangle )\n\t-- Do stuff\nend\n\nmyentity:AddCallback( \"OnAngleChange\", myfunc )","description":""}],"isConstructor":false,"name":"AddCallback","realm":"shared","returns":[{"description":"The callback ID that was just added, which can later be used in {{ClassFunction|Entity|RemoveCallback}}.\n\nReturns nothing if the passed callback function was invalid or when asking for a non-existent hook.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The effect to apply, see {{Enum|EF}}.","isOptional":false,"isVarArg":false,"name":"effect","type":"EF"}],"description":"Applies an engine effect to an entity.","examples":[{"code":"Entity:AddEffects( EF_ITEM_BLINK )","description":"Adds a blinking effect to an entity."}],"isConstructor":false,"name":"AddEffects","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Engine flag to add, see {{Enum|EFL}}","isOptional":false,"isVarArg":false,"name":"flag","type":"EFL"}],"description":"Adds engine flags.","examples":[],"isConstructor":false,"name":"AddEFlags","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Flag to add, see {{Enum|FL}}","isOptional":false,"isVarArg":false,"name":"flag","type":"FL"}],"description":"Adds flags to the entity.","examples":[],"isConstructor":false,"name":"AddFlags","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The activity to play as the gesture. See {{Enum|ACT}}.","isOptional":false,"isVarArg":false,"name":"activity","type":"ACT"},{"default":"true","description":"","isOptional":true,"isVarArg":false,"name":"autokill","type":"boolean"}],"description":"Adds a gesture animation to the entity and plays it.<br/>\nSee {{ClassFunction|Entity|AddGestureSequence}} and {{ClassFunction|Entity|AddLayeredSequence}} for functions that takes sequences instead of {{Enum|ACT}}.\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"AddGesture","realm":"server","returns":[{"description":"Layer ID of the started gesture, used to manipulate the played gesture by other functions.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The sequence ID to play as the gesture. See {{ClassFunction|Entity|LookupSequence}}.","isOptional":false,"isVarArg":false,"name":"sequence","type":"number"},{"default":"true","description":"","isOptional":true,"isVarArg":false,"name":"autokill","type":"boolean"}],"description":"Adds a gesture animation to the entity and plays it.<br/>\nSee {{ClassFunction|Entity|AddGesture}} for a function that takes {{Enum|ACT}}.<br/>\nSee also {{ClassFunction|Entity|AddLayeredSequence}}.\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"AddGestureSequence","realm":"server","returns":[{"description":"Layer ID of the started gesture, used to manipulate the played gesture by other functions.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The sequence ID to play as the gesture. See {{ClassFunction|Entity|LookupSequence}}.","isOptional":false,"isVarArg":false,"name":"sequence","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"priority","type":"number"}],"description":"Adds a gesture animation to the entity and plays it.<br/>\nSee {{ClassFunction|Entity|AddGestureSequence}} for a function that doesn't take priority.<br/>\nSee {{ClassFunction|Entity|AddGesture}} for a function that takes {{Enum|ACT}}.\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"AddLayeredSequence","realm":"server","returns":[{"description":"Layer ID of created layer","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The flag(s) to apply, see {{Enum|FSOLID}}.","isOptional":false,"isVarArg":false,"name":"flags","type":"FSOLID"}],"description":"Adds solid flag(s) to the entity.","examples":[],"isConstructor":false,"name":"AddSolidFlags","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|PhysObj}} to add to the motion controller.","isOptional":false,"isVarArg":false,"name":"physObj","type":"PhysObj"}],"description":"Adds a {{Type|PhysObj}}ect to the entity's motion controller so that {{HookFunction|ENTITY|PhysicsSimulate}} will be called for given {{Type|PhysObj}}ect as well.\n\nYou must first create a motion controller with {{ClassFunction|Entity|StartMotionController}}.\n\nYou can remove added {{Type|PhysObj}}ects by using {{ClassFunction|Entity|RemoveFromMotionController}}.\n\n{{Note|Only works on a scripted {{Type|Entity}} of anim type}}","examples":[],"isConstructor":false,"name":"AddToMotionController","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The angle you want to align from","isOptional":false,"isVarArg":false,"name":"from","type":"Angle"},{"default":"","description":"The angle you want to align to","isOptional":false,"isVarArg":false,"name":"to","type":"Angle"}],"description":"Returns an angle based on the ones inputted that you can use to align an object.\n\n{{Note|This function doesn't change the angle of the entity on its own (see example).}}","examples":[{"code":"ent1:SetAngles(ent1:AlignAngles(ent1:GetForward():Angle(), ent2:GetUp():Angle()))","description":"This example will make ent1 face up from ent2."}],"isConstructor":false,"name":"AlignAngles","realm":"shared","returns":[{"description":"The resulting aligned angle","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Spawns a clientside ragdoll for the entity, positioning it in place of the original entity, and makes the entity invisible. It doesn't preserve flex values (face posing) as CSRagdolls don't support flex.\n\nIt does not work on players. Use {{ClassFunction|Player|CreateRagdoll}} instead.\n\nThe original entity is not removed, and neither are any ragdolls previously generated with this function.\n\nTo make the entity re-appear, run {{ClassFunction|Entity|SetNoDraw}}( false )","examples":[{"code":"for k,npc in pairs( ents.FindByClass( \"npc_*\" ) ) do\n    npc.RagDoll = npc:BecomeRagdollOnClient()\nend","description":"Spawns a ragdoll for all NPCs."}],"isConstructor":false,"name":"BecomeRagdollOnClient","realm":"client","returns":[{"description":"The created ragdoll.","type":"CSEnt"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the entity is being looked at by the local player and is within 256 units of distance.","examples":[],"isConstructor":false,"name":"BeingLookedAtByLocalPlayer","realm":"client","returns":[{"description":"Is the entity being looked at by the local player and within 256 units.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity that is blocking us","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"}],"description":"{{Internal}} Dispatches blocked events to this entity's blocked handler. This function is only useful when interacting with entities like func_movelinear.","examples":[],"isConstructor":false,"name":"Blocked","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The vector of where the the attack comes from.","isOptional":false,"isVarArg":false,"name":"origin","type":"Vector"},{"default":"false","description":"Decides if it should return the centered vector with a random offset to it.","isOptional":true,"isVarArg":false,"name":"noisy","type":"boolean"}],"description":"Returns a centered vector of this entity, NPCs use this internally to aim at their targets.\n\n{{Note|This only works on players and NPCs.}}","examples":[],"isConstructor":false,"name":"BodyTarget","realm":"server","returns":[{"description":"The centered vector.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Bone ID to test flag of.","isOptional":false,"isVarArg":false,"name":"boneID","type":"number"},{"default":"","description":"The flag to test, see {{Enum|BONE}}","isOptional":false,"isVarArg":false,"name":"flag","type":"BONE"}],"description":"Returns whether the entity's bone has the flag or not.","examples":[],"isConstructor":false,"name":"BoneHasFlag","realm":"shared","returns":[{"description":"Whether the bone has that flag or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of the bone you want the length of. You may want to get the length of the next bone ( boneID + 1 ) for decent results","isOptional":false,"isVarArg":false,"name":"boneID","type":"number"}],"description":"This function takes the boneID and returns the length of it in an unrounded decimal","examples":[{"code":"print( player.GetByID( 1 ):BoneLength( 1 ) )","description":"Returns first bones length of first player on the server"}],"isConstructor":false,"name":"BoneLength","realm":"shared","returns":[{"description":"The length of the bone","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the distance between the center of the bounding box and the furthest bounding box corner.","examples":[],"isConstructor":false,"name":"BoundingRadius","realm":"shared","returns":[{"description":"The radius of the bounding box.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Identifier of the function within CallOnRemove","isOptional":false,"isVarArg":false,"name":"identifier","type":"string"},{"default":"","description":"Function to be called on remove","isOptional":false,"isVarArg":false,"name":"removeFunc","type":"Function"},{"default":"","description":"Optional arguments to pass to removeFunc. Do note that the first argument passed to the function will always be the entity being removed, and the arguments passed on here start after that.","isOptional":false,"isVarArg":true,"name":"argnargs","type":"any"}],"description":"Causes a specified function to be run if the entity is removed by any means. This can later be undone by {{ClassFunction|Entity|RemoveCallOnRemove}} if you need it to not run.\n\n{{Bug|Pull=1275|Using players with this function will provide a gimped entity to the callback.}}","examples":[{"code":"Entity:CallOnRemove(\"StopEngineSound\",function(ent) ent:StopSound( \"enginenoise.wav\" ) end)","description":"Stops an engine sound when the entity is removed"}],"isConstructor":false,"name":"CallOnRemove","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resets all pose parameters such as aim_yaw, aim_pitch and rotation.","examples":[],"isConstructor":false,"name":"ClearPoseParameters","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Declares that the collision rules of the entity have changed, and subsequent calls for {{HookFunction|GM|ShouldCollide}} with this entity may return a different value than they did previously.\n\n{{Warning|This function must '''not''' be called inside of <!--a physics hook, including -->{{HookFunction|GM|ShouldCollide}}. Instead, it must be called in advance when the condition is known to change.}}\n\n{{Warning|Failure to use this function correctly will result in a crash of the physics engine.}}","examples":[],"isConstructor":false,"name":"CollisionRulesChanged","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns whether the entity was created by map or not.","examples":[],"isConstructor":false,"name":"CreatedByMap","realm":"server","returns":[{"description":"Is created by map?","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The particle name to create","isOptional":false,"isVarArg":false,"name":"particle","type":"string"},{"default":"","description":"Attachment ID to attach the particle to","isOptional":false,"isVarArg":false,"name":"attachment","type":"number"},{"default":"nil","description":"A table of tables ( IDs 1 to 64 ) having the following structure:\n* {{FuncArg|number|attachtype|The particle attach type. See {{Enum|PATTACH}}. '''Default:''' PATTACH_ABSORIGIN}}\n* {{FuncArg|Entity|entity|The parent entity? '''Default:''' NULL}}\n* {{FuncArg|Vector|position|The offset position for given control point. '''Default:'''  nil}}\n\nThis only affects the control points of the particle effects and will do nothing if the effect doesn't use control points.","isOptional":true,"isVarArg":false,"name":"options","type":"table[]"}],"description":"Creates a clientside particle system attached to the entity. See also {{GlobalFunction|CreateParticleSystem}}\n\n{{Note|The particle effect must be precached with {{GlobalFunction|PrecacheParticleSystem}} and the file its from must be added via {{LibraryFunction|game|AddParticles}} before it can be used!}}","examples":[],"isConstructor":false,"name":"CreateParticleEffect","realm":"client","returns":[{"description":"The created particle system.","type":"CNewParticleEffect"}]},{"accessModifier":"public","arguments":[],"description":"Draws the shadow of an entity.","examples":[{"code":"function ENT:Draw()\n self:DrawModel()\n self:CreateShadow()\nend","description":""}],"isConstructor":false,"name":"CreateShadow","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to be removed","isOptional":false,"isVarArg":false,"name":"entityToRemove","type":"Entity"}],"description":"Whenever the entity is removed, entityToRemove will be removed also.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"DeleteOnRemove","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Removes the shadow for the entity.\n\nThe shadow will be recreated as soon as the entity wakes.\n\nDoesn't affect shadows from flashlight/lamps/env_projectedtexture.","examples":[],"isConstructor":false,"name":"DestroyShadow","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the matrix type to disable.<br/><br/>\nThe only known matrix type is \"RenderMultiply\".","isOptional":false,"isVarArg":false,"name":"matrixType","type":"string"}],"description":"Disables an active matrix.","examples":[],"isConstructor":false,"name":"DisableMatrix","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The damage to apply.","isOptional":false,"isVarArg":false,"name":"damageInfo","type":"CTakeDamageInfo"},{"default":"","description":"Trace result to use to deal damage. See {{Struct|TraceResult}}","isOptional":false,"isVarArg":false,"name":"traceRes","type":"TraceResult"},{"default":"traceRes.HitNormal","description":"Direction of the attack.","isOptional":true,"isVarArg":false,"name":"dir","type":"Vector"}],"description":"Performs a trace attack.","examples":[],"isConstructor":false,"name":"DispatchTraceAttack","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to be removed from the list of entities to delete","isOptional":false,"isVarArg":false,"name":"entityToUnremove","type":"Entity"}],"description":"This removes the argument entity from an ent's list of entities to 'delete on remove'","examples":[],"isConstructor":false,"name":"DontDeleteOnRemove","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Draws the entity or model.\n\nIf called inside {{HookFunction|ENTITY|Draw}} or {{HookFunction|ENTITY|DrawTranslucent}}, it only draws the entity's model itself.<br/>\nIf called outside of those hooks, it will call both of said hooks depending on {{ClassFunction|Entity|GetRenderGroup}}, drawing the entire entity again.\n\n{{Note|When drawing an entity more than once per frame in different positions, you should call {{ClassFunction|Entity|SetupBones}} before each draw; Otherwise, the entity will retain its first drawn position.}}\n\n{{RenderingContext|Function|3D}}\n\n{{Bug|Issue=1558|Calling this on entities with [[Enums/EF|EF_BONEMERGE]] and [[Enums/EF|EF_NODRAW]] applied causes a crash.}}\n\n{{Bug|Issue=2688|Using this with a map model ({{LibraryFunction|game|GetWorld}}():[[Entity/GetModel|GetModel]]()) crashes the game.}}","examples":[{"code":"local modelexample = ClientsideModel( \"models/thrusters/jetpack.mdl\" )\nmodelexample:SetNoDraw( true )\n\nlocal offsetvec = Vector( 3, -5.6, 0 )\nlocal offsetang = Angle( 180, 90, -90 )\n\nhook.Add( \"PostPlayerDraw\" , \"manual_model_draw_example\" , function( ply )\n\tlocal boneid = ply:LookupBone( \"ValveBiped.Bip01_Spine2\" )\n\t\n\tif not boneid then\n\t\treturn\n\tend\n\t\n\tlocal matrix = ply:GetBoneMatrix( boneid )\n\t\n\tif not matrix then \n\t\treturn \n\tend\n\t\n\tlocal newpos, newang = LocalToWorld( offsetvec, offsetang, matrix:GetTranslation(), matrix:GetAngles() )\n\t\n\tmodelexample:SetPos( newpos )\n\tmodelexample:SetAngles( newang )\n\tmodelexample:SetupBones()\n\tmodelexample:DrawModel()\n\t\nend)","description":"Manually draws a single {{GlobalFunction|ClientsideModel}} on the specified bone, on the given offset for every player affected by this hook.\n\nThis is useful in case you want to reuse a single model without having to create one for each player."}],"isConstructor":false,"name":"DrawModel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to enable, false to disable shadow drawing.","isOptional":false,"isVarArg":false,"name":"shouldDraw","type":"boolean"}],"description":"Sets whether an entity's shadow should be drawn.","examples":[],"isConstructor":false,"name":"DrawShadow","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Move an entity down until it collides with something.\n{{Warning|The entity needs to already have something below it within 256 units.}}","examples":[{"code":"for _, ent in pairs( ents.FindByClass( \"prop_physics\" ) ) do\n\tent:DropToFloor( )\nend","description":"Move all props on the server down until they collide with something"},{"code":"hook.Add( \"PlayerSpawn\", \"DropGround\", function( ply )\n\tply:DropToFloor()\nend )","description":"Drops players to the ground when they spawn"}],"isConstructor":false,"name":"DropToFloor","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The type of the DTVar being set up. It can be one of the following: 'Int', 'Float', 'Vector', 'Angle', 'Bool', 'Entity' or 'String'","isOptional":false,"isVarArg":false,"name":"Type","type":"string"},{"default":"","description":"The ID of the DTVar. Can be between 0 and 3","isOptional":false,"isVarArg":false,"name":"ID","type":"number"},{"default":"","description":"Name by which you will refer to DTVar. It must be a valid variable name. (No spaces!)","isOptional":false,"isVarArg":false,"name":"Name","type":"string"}],"description":"{{Internal}}\n\nSets up a self.dt.NAME alias for a Data Table variable.\n\n{{Warning|You should use {{ClassFunction|Entity|NetworkVar}} instead}}","examples":[{"code":"function ENT:SetupDataTables()\n\n\tself:DTVar( \"Float\", 0, \"TargetZ\" )\n\tself:DTVar( \"Float\", 1, \"Speed\" )\n\nend","description":"Sets up two float networked variables, '''TargetZ''' and '''Speed'''"}],"isConstructor":false,"name":"DTVar","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the sound to be played.\n{{Warning|The string will cannot have whitespace at the start or end. You can remove this with {{LibraryFunction|string|Trim}}.}}","isOptional":false,"isVarArg":false,"name":"soundName","type":"string"},{"default":"75","description":"A modifier for the distance this sound will reach, acceptable range is 0 to 511. 100 means no adjustment to the level. See {{Enum|SNDLVL}}\n\nWill not work if a [https://developer.valvesoftware.com/wiki/Soundscripts sound script] is used.","isOptional":true,"isVarArg":false,"name":"soundLevel","type":"SNDLVL"},{"default":"100","description":"The pitch applied to the sound. The acceptable range is from 0 to 255. 100 means the pitch is not changed.","isOptional":true,"isVarArg":false,"name":"pitchPercent","type":"number"},{"default":"1","description":"The volume, from 0 to 1.","isOptional":true,"isVarArg":false,"name":"volume","type":"number"},{"default":"CHAN_AUTO, CHAN_WEAPON for weapons","description":"The sound channel, see {{Enum|CHAN}}.\n\nWill not work if a [https://developer.valvesoftware.com/wiki/Soundscripts sound script] is used.","isOptional":true,"isVarArg":false,"name":"channel","type":"CHAN"}],"description":"Plays a sound on an entity. If run clientside, the sound will only be heard locally.\n\nIf used on a player or NPC character with the mouth rigged, the character will \"lip-sync\". This does not work with all sound files.\n\nIt is recommended to use sound scripts ( see {{LibraryFunction|sound|Add}} ) over direct file paths. This will allow you to use {{ClassFunction|Entity|StopSound}} to stop the played sound scripts.\n\n{{Note|When using this function with weapons, use the {{Type|Weapon}} itself as the entity, not its owner!}}\n\n{{Bug|Issue=2651|This does not respond to {{GlobalFunction|SuppressHostEvents}}.}}","examples":[{"code":"Entity(1):EmitSound( \"path/to/sound.wav\", 75, 100, 1, CHAN_AUTO ) -- Same as below\nEntity(1):EmitSound( \"path/to/sound.wav\" ) -- You can remove the arguments that have default values.","description":"Plays sound from the first player on the server."}],"isConstructor":false,"name":"EmitSound","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Set to true to enable the constraints and false to disable them.","isOptional":false,"isVarArg":false,"name":"toggleConstraints","type":"boolean"}],"description":"Toggles the constraints of this ragdoll entity on and off.\n\n{{NextUpdate|Disabling constraints will delete the constraint entities.}}","examples":[],"isConstructor":false,"name":"EnableConstraints","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to flag this entity","isOptional":false,"isVarArg":false,"name":"useCustom","type":"boolean"}],"description":"Flags an entity as using custom lua defined collisions. Fixes entities having spongy player collisions or not hitting traces, such as after {{ClassFunction|Entity|PhysicsFromMesh}}","examples":[{"code":"function ENT:ProceduralPlatform()\n\tlocal VERTICES = {},\n\tfor x = 1, 32, 1, do\n\t\tfor y = 1, 32, do\n\t\t\ttable.insert( VERTICES, { pos = ( self:GetPos() + Vector( 0, 0, 1 ) ) } );\n\t\t\ttable.insert( VERTICES, { pos = ( self:GetPos() + Vector( 0, y, 1 ) ) } );\n\t\t\ttable.insert( VERTICES, { pos = ( self:GetPos() + Vector( x, y, 1 ) ) } );\n\n\t\t\ttable.insert( VERTICES, { pos = ( self:GetPos() + Vector( 0, 0, 1 ) ) } );\n\t\t\ttable.insert( VERTICES, { pos = ( self:GetPos() + Vector( x, y, 1 ) ) } );\n\t\t\ttable.insert( VERTICES, { pos = ( self:GetPos() + Vector( x, 0, 1 ) ) } );\n\t\tend\n\tend\n\tself:PhysicsFromMesh( VERTICES );\n\tself:GetPhysicsObject():EnableMotion( false );\n\tself:EnableCustomCollisions( true );\nend","description":"Creates a mesh table, and assigns it as the entity's collisions"}],"isConstructor":false,"name":"EnableCustomCollisions","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the matrix type.<br>\nThe only implemented matrix type is \"RenderMultiply\".","isOptional":false,"isVarArg":false,"name":"matrixType","type":"string"},{"default":"","description":"The matrix to apply before drawing the entity.","isOptional":false,"isVarArg":false,"name":"matrix","type":"VMatrix"}],"description":"Can be used to apply a custom {{Type|VMatrix}} to the entity, mostly used for scaling the model by a {{Type|Vector}}.\n\nTo disable it, use {{ClassFunction|Entity|DisableMatrix}}.\n\nIf your old scales are wrong due to a recent update, use {{ClassFunction|Entity|SetLegacyTransform}} as a quick fix.\n\n{{Note|The matrix can also be modified to apply a custom rotation and offset via the {{ClassFunction|VMatrix|SetAngles}} and {{ClassFunction|VMatrix|SetTranslation}} functions.}}\n{{Bug|Issue=3502|This does not scale procedural bones.}}","examples":[{"code":"local scale = Vector(1,1,4)\n\nlocal mat = Matrix()\nmat:Scale(scale)\nprop:EnableMatrix(\"RenderMultiply\", mat)","description":"To scale a prop's height by 4x"}],"isConstructor":false,"name":"EnableMatrix","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Gets the unique entity index of an entity.\n\n{{Note|Entity indices are marked as unused after deletion, and can be reused by newly-created entities}}","examples":[{"code":"print( player.GetAll()[1]:EntIndex() )","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"EntIndex","realm":"shared","returns":[{"description":"The index of the entity.<br />\n<br />-1 for clientside-only or serverside-only entities.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Extinguishes the entity if it is on fire.\n<br>Has no effect if called inside EntityTakeDamage (and the attacker is the flame that's hurting the entity)","examples":[{"code":"player.GetAll()[1]:Extinguish()","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"Extinguish","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the direction a player/npc/ragdoll is looking as a world-oriented angle.\n\n{{Bug|Issue=1150|This can return an incorrect value in pods.}}\n\n{{Bug|Issue=2620|This can return an incorrect value in jeeps when used with {{ClassFunction|Player|EnterVehicle}}.}}","examples":[{"code":"print(LocalPlayer():EyeAngles())","description":"Print the local player's angles"}],"isConstructor":false,"name":"EyeAngles","realm":"shared","returns":[{"description":"eyeAng","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Returns the position of an Player/NPC's view, or two vectors for ragdolls (one for each eye)","examples":[],"isConstructor":false,"name":"EyePos","realm":"shared","returns":[{"description":"View position of the entity.\nThis will be be position of the first eye for ragdoll.","type":"Vector"},{"description":"For a ragdoll, this is the position of the second eye.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The bodygroup name to search for.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Searches for bodygroup with given name.","examples":[],"isConstructor":false,"name":"FindBodygroupByName","realm":"shared","returns":[{"description":"Bodygroup ID, -1 if not found","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The currently playing sequence","isOptional":false,"isVarArg":false,"name":"currentSequence","type":"number"},{"default":"","description":"The goal sequence.","isOptional":false,"isVarArg":false,"name":"goalSequence","type":"number"}],"description":"Returns a transition from the given start and end sequence.\n\nThis function was only used by HL1 entities and NPCs, before the advent of sequence blending and gestures.","examples":[],"isConstructor":false,"name":"FindTransitionSequence","realm":"shared","returns":[{"description":"The transition sequence, -1 if not available.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the input to fire","isOptional":false,"isVarArg":false,"name":"input","type":"string"},{"default":"\"\"","description":"The value to give to the input, can also be a {{Type|number}}.","isOptional":true,"isVarArg":false,"name":"param","type":"string"},{"default":"0","description":"Delay in seconds before firing","isOptional":true,"isVarArg":false,"name":"delay","type":"number"}],"description":"Fires an entity's input. You can find inputs for most entities on the [https://developer.valvesoftware.com/wiki/Output Valve Developer Wiki]","examples":[{"code":"// Entity(1) is considered a player in this example\nlocal tr = Entity(1):GetEyeTrace()\nlocal ent = tr.Entity\nif IsValid(ent) then\n\tent:Fire(\"Lock\")\nend","description":"If you are looking at a door, this will lock it"}],"isConstructor":false,"name":"Fire","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The bullet data to be used. See the {{Struct|Bullet}}.","isOptional":false,"isVarArg":false,"name":"bulletInfo","type":"Bullet"},{"default":"false","description":"Has the effect of encasing the FireBullets call in {{GlobalFunction|SuppressHostEvents}}, only works in multiplayer.","isOptional":true,"isVarArg":false,"name":"suppressHostEvents","type":"boolean"}],"description":"Fires a bullet.\n\nWhen used in a [[:Category:WEAPON_Hooks | WEAPON]] hook such as {{HookFunction|WEAPON|Think}} or {{HookFunction|WEAPON|PrimaryAttack}}, it will use {{ClassFunction|Player|LagCompensation}} internally.\n\n{{Note|Lag compensation will not work if this function is called in a timer, regardless if the timer was made in a [[:Category:WEAPON_Hooks|WEAPON]] hook.}}","examples":[],"isConstructor":false,"name":"FireBullets","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"NULL","description":"The entity to follow the bone of. If unset, removes the FollowBone effect.","isOptional":true,"isVarArg":false,"name":"parent","type":"Entity"},{"default":"","description":"The bone to follow","isOptional":true,"isVarArg":false,"name":"boneid","type":"number"}],"description":"Makes an entity follow another entity's bone.\n\nInternally this function calls {{ClassFunction|Entity|SetParent}}( parent, boneid ) and {{ClassFunction|Entity|AddEffects}}( EF_FOLLOWBONE ).\n{{Note|If the entity vibrates, you probably need to run {{ClassFunction|Entity|SetPredictable}}( false ) clientside.}}\n{{Warning|This function will not work if the target bone's parent bone is invalid or if the bone is not used by VERTEX LOD0}}","examples":[],"isConstructor":false,"name":"FollowBone","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Forces the Entity to be dropped, when it is being held by a player's gravitygun or physgun.","examples":[],"isConstructor":false,"name":"ForcePlayerDrop","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Amount to advance frame by.","isOptional":false,"isVarArg":false,"name":"delta","type":"number"}],"description":"Advances the cycle of an animated entity by the given delta. Since cycle is a value between 0 and 1, delta should be as well.\n\nAnimations that loop will automatically reset the cycle so you don't have to - ones that do not will stop animating once you reach the end of their sequence.","examples":[{"code":"function PANEL:RunAnimation()\n\tself.Entity:FrameAdvance( (RealTime()-self.LastPaint) * self.m_fAnimSpeed )\t\nend","description":"From DModelPanel"}],"isConstructor":false,"name":"FrameAdvance","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the entity's velocity.\n\n{{Note|Actually binds to CBaseEntity::GetLocalVelocity() which retrieves the velocity of the entity due to its movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision.}}","examples":[],"isConstructor":false,"name":"GetAbsVelocity","realm":"shared","returns":[{"description":"The velocity of the entity.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Gets the angles of given entity.\n\n{{Bug|Issue=2764|This returns incorrect results for the local player clientside.}}\n\n{{Bug|Issue=3106|This will return the local player's {{GlobalFunction|EyeAngles}} in [http://wiki.garrysmod.com/page/Category:3D_Rendering_Hooks rendering hooks].}}\n\n{{Bug|Issue=3107|This will return {{GlobalFunction|Angle}}(0,0,0) in [http://wiki.garrysmod.com/page/Category:3D_Rendering_Hooks rendering hooks] while paused in single-player.}}","examples":[{"code":"print( player.GetByID(1):GetAngles() )","description":"Prints the 1st player's angles."}],"isConstructor":false,"name":"GetAngles","realm":"shared","returns":[{"description":"The angles of the entity.","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The animation ID to look up","isOptional":false,"isVarArg":false,"name":"animIndex","type":"number"}],"description":"Returns a table containing the number of frames, flags, name, and FPS of an entity's animation ID.\n\n{{Note|Animation ID is not the same as sequence ID.}}\n\n{{Warning|Using an animation ID that is too far out of a model's range of animations can crash the client/server. When there are no animations left in the model the default animation info (animIndex <nowiki>=</nowiki> 0) is returned.}}","examples":[{"code":"function GetAnimInfoSequence( ent, seq )\n\n\tif( !IsValid( ent ) ) then return nil end\n\n\tlocal seqname = ent:GetSequenceName( seq )\n\t\n\tif( seqname == \"Unknown\" ) then return nil end\n\n\tlocal info = nil\n\tlocal done = ent:GetAnimInfo(0).label\t-- this is how we know when to stop\n\tlocal i = 1\n\n\t-- We don't want to increment too high or we will run into errors or possibly crashes\n\twhile(i < 1600) do    -- arbitrary failsafe\n\t\n\t\tinfo = ent:GetAnimInfo(i)\n\t\t\n\t\tif(string.find(info.label, \"@\"..seqname) or string.find(info.label, \"a_\"..seqname)) then\n\t\t\treturn info\n\t\tend\n\t\t\n\t\t-- the first animation info is repeated when there are no animations left in the model\n\t\tif(info.label == done) then break end\n\t\t\n\t\ti = i + 1\n\t\t\n\tend\n\n\treturn nil\n\nend","description":"A function that finds an entity sequence's corresponding animation and returns the animation info."}],"isConstructor":false,"name":"GetAnimInfo","realm":"shared","returns":[{"description":"Information about the animation","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the last time the entity had an animation update. Returns 0 if the entity doesn't animate.","examples":[],"isConstructor":false,"name":"GetAnimTime","realm":"client","returns":[{"description":"The last time the entity had an animation update.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The internal ID of the attachment.","isOptional":false,"isVarArg":false,"name":"attachmentId","type":"number"}],"description":"Gets the orientation and position of the attachment by its ID, returns nothing if the attachment does not exist.\n\n{{Note|The update rate of this function is limited by the setting of ENT.AutomaticFrameAdvance for [[Scripted Entities]]!}}\n\n{{Bug|Issue=1255|This will return improper values for viewmodels if used in {{HookFunction|GM|CalcView}}.}}","examples":[{"code":"local vm = ply:GetViewModel()\nlocal obj = vm:LookupAttachment( \"muzzle\" )\nlocal muzzlepos = vm:GetAttachment( obj )","description":"Grabs the muzzle position of a player's view model"}],"isConstructor":false,"name":"GetAttachment","realm":"shared","returns":[{"description":"The angle and position of the attachment. See the {{Struct|AngPos}}. Most notably, the table contains the keys \"Ang\" and \"Pos\".","type":"AngPos"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table containing all attachments of the given entitys model.<br>\nReturns an empty table or '''nil''' in case it's model has no attachments.\n\n{{Bug|Issue=3167|This can have inconsistent results in single-player.}}","examples":[{"code":"PrintTable(LocalPlayer():GetAttachments())","description":"All the attachments present on the Kliener player model"}],"isConstructor":false,"name":"GetAttachments","realm":"shared","returns":[{"description":"Attachment data. See {{Struct|AttachmentData}}.","type":"AttachmentData"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity's base velocity which is their velocity due to forces applied by other entities. This includes entity-on-entity collision or riding a treadmill.","examples":[],"isConstructor":false,"name":"GetBaseVelocity","realm":"shared","returns":[{"description":"The base velocity of the entity.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the blood color of this entity. This can be set with {{ClassFunction|Entity|SetBloodColor}}.","examples":[],"isConstructor":false,"name":"GetBloodColor","realm":"server","returns":[{"description":"Color from {{Enum|BLOOD_COLOR}}","type":"BLOOD_COLOR"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The id of bodygroup to get value of. Starts from 0.","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Gets the exact value for specific bodygroup of given entity.","examples":[{"code":"print( Entity(1):GetEyeTrace().Entity:GetBodygroup(2) )","description":"Gets the value of bodygroup 2 of entity player 1 is aiming at."}],"isConstructor":false,"name":"GetBodygroup","realm":"shared","returns":[{"description":"Current bodygroup. Starts from 0.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of bodygroup to retrieve count of.","isOptional":false,"isVarArg":false,"name":"bodygroup","type":"number"}],"description":"Returns the count of possible values for this bodygroup.\n\nThis is '''not''' the maximum value, since the bodygroups start with 0, not 1.","examples":[],"isConstructor":false,"name":"GetBodygroupCount","realm":"shared","returns":[{"description":"Count of values of passed bodygroup.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The id of bodygroup to get the name of.","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Gets the name of specific bodygroup for given entity.","examples":[{"code":"print( player.GetByID(1):GetEyeTrace().Entity:GetBodygroupName(1) )","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"GetBodygroupName","realm":"shared","returns":[{"description":"The name of the bodygroup","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns a list of all attachments of the entity.","examples":[],"isConstructor":false,"name":"GetBodyGroups","realm":"shared","returns":[{"description":"Bodygroups as a table of {{Struct|BodyGroupData}}s if the entity can have bodygroups.","type":"BodyGroupData[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"ID of the bone controller. Goes from 0 to 3.","isOptional":false,"isVarArg":false,"name":"boneID","type":"number"}],"description":"Returns the value of the bone controller with the specified ID.\n\n{{Note|This is the precursor of pose parameters, and only works for Half Life 1: Source models supporting it.}}","examples":[],"isConstructor":false,"name":"GetBoneController","realm":"shared","returns":[{"description":"The value set on the bone controller.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of bones in the entity.","examples":[{"code":"print( Entity(1):GetBoneCount() )","description":"Prints amount of bones in player 1"}],"isConstructor":false,"name":"GetBoneCount","realm":"shared","returns":[{"description":"The amount of bones in given entity; -1 on failure.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The bone to retrieve matrix of.\n* Bones clientside and serverside will differ","isOptional":false,"isVarArg":false,"name":"boneID","type":"number"}],"description":"Returns the matrix (position / rotation transform) of a given bone entity.\n\n{{Bug|Issue=884|This can return the server's matrix during server lag.}}\n\n{{Bug|Issue=3285|This can return garbage serverside or a 0,0,0 fourth column (represents position) for v49 models.}}","examples":[],"isConstructor":false,"name":"GetBoneMatrix","realm":"shared","returns":[{"description":"The matrix\n\n* Some entities don't update animation every frame such as prop_physics and won't have accurate bone matrix.","type":"VMatrix"}]},{"accessModifier":"public","arguments":[{"default":"","description":"ID of bone to lookup name of","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"Returns name of given bone id.","examples":[{"code":"print( Entity( 1 ):GetBoneName( 0 ) )","description":"Will print name of bone name with id 0 for first player."},{"code":"function PrintBones(ent)\n    for i=0, ent:GetBoneCount()-1 do\n        print(i,ent:GetBoneName(i))\n    end\nend","description":"Prints all the bones of an entity."}],"isConstructor":false,"name":"GetBoneName","realm":"shared","returns":[{"description":"The name of given bone\n\n* nil in case we failed or entity doesn't have a model\n* \"__INVALIDBONE__\" in case the name cannot be read or the index is out of range.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The bode ID of the bone to get parent of","isOptional":false,"isVarArg":false,"name":"bone","type":"number"}],"description":"Returns parent bone of given bone.","examples":[],"isConstructor":false,"name":"GetBoneParent","realm":"shared","returns":[{"description":"Parent bone ID or -1 if we failed for some reason.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The bone index of the bone to get the position of. See {{ClassFunction|Entity|LookupBone}}.","isOptional":false,"isVarArg":false,"name":"boneIndex","type":"number"}],"description":"Returns the position and angle of the given attachment, relative to the world.\n\n{{Bug|Issue=884|This can return the server's position during server lag.}}\n\n{{Bug|Issue=3285|This can return garbage serverside or {{GlobalFunction|Vector}}(0,0,0) for v49 models.}}","examples":[],"isConstructor":false,"name":"GetBonePosition","realm":"shared","returns":[{"description":"The bone's position relative to the world.","type":"Vector"},{"description":"The bone's angle relative to the world.","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The index of the plane to get info of. Starts from 0.","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Returns info about given plane of non-nodraw brush model surfaces of the entity's model. Works on worldspawn as well.","examples":[],"isConstructor":false,"name":"GetBrushPlane","realm":"shared","returns":[{"description":"The origin of the plane.\n\nThis will be either the first vertex's position (if available) or the plane's normal multiplied by the plane's distance.","type":"Vector"},{"description":"The normal of the plane.","type":"Vector"},{"description":"The \"distance\" of the plane.\n\nThe distance is the dot product of the plane's normal and the point it was initialized with.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of planes of non-nodraw brush model surfaces of the entity's model.","examples":[],"isConstructor":false,"name":"GetBrushPlaneCount","realm":"shared","returns":[{"description":"The amount of brush model planes of the entity's model.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The hook to retrieve the callbacks from, see [[Entity Callbacks]] for the possible hooks.","isOptional":false,"isVarArg":false,"name":"hook","type":"string"}],"description":"Returns the specified hook callbacks for this entity added with {{ClassFunction|Entity|AddCallback}}\n\nThe callbacks can then be removed with {{ClassFunction|Entity|RemoveCallback}}.","examples":[],"isConstructor":false,"name":"GetCallbacks","realm":"shared","returns":[{"description":"A table containing the callbackid and function of all the callbacks for the specified hook","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Bone id to lookup children of","isOptional":false,"isVarArg":false,"name":"boneid","type":"number"}],"description":"Returns ids of child bones of given bone.","examples":[],"isConstructor":false,"name":"GetChildBones","realm":"shared","returns":[{"description":"A table of bone ids","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Gets the children of the entity - that is, every entity whose move parent is this entity.\n\n{{Note|This function returns {{ClassFunction|Entity|SetMoveParent}} children, '''NOT''' {{ClassFunction|Entity|SetParent}}!<br/>{{ClassFunction|Entity|SetParent}} however also calls {{ClassFunction|Entity|SetMoveParent}}.<br/><br/>This means that some entities in the returned list might have a NULL {{ClassFunction|Entity|GetParent}}.<br/>This also means that using this function on players will return their weapons on the client but not the server.}}","examples":[{"code":"-- ent is a prop_effect entity\nPrintTable( ent:GetChildren() )","description":"Example usage and output"}],"isConstructor":false,"name":"GetChildren","realm":"shared","returns":[{"description":"A list of movement children entities","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the classname of a entity. This is often the name of the Lua file or folder containing the files for the entity","examples":[{"code":"print( LocalPlayer( ):GetActiveWeapon( ):GetClass( ) )","description":"Prints the classname of the weapon that the player is holding."}],"isConstructor":false,"name":"GetClass","realm":"shared","returns":[{"description":"The entity's classname","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns an entity's collision bounding box. In most cases, this will return the same bounding box as {{ClassFunction|Entity|GetModelBounds}} unless the entity does not have a physics mesh or it has a {{Type|PhysObj}} different from the default.\n\n{{Bug|Issue=223|This can be out-of-sync between the client and server for weapons.}}","examples":[],"isConstructor":false,"name":"GetCollisionBounds","realm":"shared","returns":[{"description":"The minimum vector of the collision bounds","type":"Vector"},{"description":"The maximum vector of the collision bounds","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity's collision group","examples":[],"isConstructor":false,"name":"GetCollisionGroup","realm":"shared","returns":[{"description":"The collision group. See {{Enum|COLLISION_GROUP}}","type":"COLLISION_GROUP"}]},{"accessModifier":"public","arguments":[],"description":"Returns the color the entity is set to.\n\n{{Bug|Issue=2407|The returned color will not have the color metatable.}}","examples":[{"code":"","description":""}],"isConstructor":false,"name":"GetColor","realm":"shared","returns":[{"description":"The color of the entity as a {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[],"description":"Returns the two entities involved in a constraint ent, or nil if the entity is not a constraint.","examples":[{"code":"function gmsave.ConstraintSave( ent )\n\tlocal t = {}\n\tt.EntOne, t.EntTwo = ent:GetConstrainedEntities()\n\tlocal PhysA, PhysB = ent:GetConstrainedPhysObjects()\n\n\tt.BoneOne = GetPhysicsObjectNum( t.EntOne, PhysA )\n\tt.BoneTwo = GetPhysicsObjectNum( t.EntTwo, PhysB )\n\tt.EntOne = gmsave.EntityEncode( t.EntOne )\n\tt.EntTwo = gmsave.EntityEncode( t.EntTwo )\n\treturn t\n\nend","description":"From gmsave/constraints.lua"}],"isConstructor":false,"name":"GetConstrainedEntities","realm":"server","returns":[{"description":"ent1","type":"Entity"},{"description":"ent2","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns the two entities physobjects involved in a constraint ent, or no value if the entity is not a constraint.","examples":[{"code":"function gmsave.ConstraintSave( ent )\n local t = {}\n t.EntOne, t.EntTwo = ent:GetConstrainedEntities()\n local PhysA, PhysB = ent:GetConstrainedPhysObjects()\n \n t.BoneOne = GetPhysicsObjectNum( t.EntOne, PhysA )\n t.BoneTwo = GetPhysicsObjectNum( t.EntTwo, PhysB )\n t.EntOne = gmsave.EntityEncode( t.EntOne )\n t.EntTwo = gmsave.EntityEncode( t.EntTwo )\n return t\nend","description":"From gmsave/constraints.lua"}],"isConstructor":false,"name":"GetConstrainedPhysObjects","realm":"server","returns":[{"description":"phys1","type":"PhysObj"},{"description":"phys2","type":"PhysObj"}]},{"accessModifier":"public","arguments":[],"description":"Returns entity's creation ID. Unlike {{ClassFunction|Entity|EntIndex}} or  {{ClassFunction|Entity|MapCreationID}}, it will always increase and old values won't be reused.","examples":[],"isConstructor":false,"name":"GetCreationID","realm":"server","returns":[{"description":"The creation ID","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the time the entity was created on, relative to {{GlobalFunction|CurTime}}.","examples":[],"isConstructor":false,"name":"GetCreationTime","realm":"shared","returns":[{"description":"The time the entity was created on.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the creator of the SENT.","examples":[],"isConstructor":false,"name":"GetCreator","realm":"server","returns":[{"description":"The creator, NULL for no creator.","type":"Player"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether this entity uses custom collision check set by {{ClassFunction|Entity|SetCustomCollisionCheck}}.","examples":[],"isConstructor":false,"name":"GetCustomCollisionCheck","realm":"shared","returns":[{"description":"Whether this entity uses custom collision check or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the frame of the currently played sequence. This will be a number between 0 and 1 as a representation of sequence progress.","examples":[],"isConstructor":false,"name":"GetCycle","realm":"shared","returns":[{"description":"The frame of the currently played sequence","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Goes from 0 to 63.\nSpecifies what key to grab from datatable.","isOptional":false,"isVarArg":false,"name":"key","type":"number"}],"description":"{{Internal}}\nThis is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.\n\nGet an angle stored in the datatable of the entity.","examples":[],"isConstructor":false,"name":"GetDTAngle","realm":"shared","returns":[{"description":"Requested angle.","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Goes from 0 to 63.\nSpecifies what key to grab from datatable.","isOptional":false,"isVarArg":false,"name":"key","type":"number"}],"description":"{{Internal}}\nThis is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.\n\nGet a boolean stored in the datatable of the entity.","examples":[],"isConstructor":false,"name":"GetDTBool","realm":"shared","returns":[{"description":"Requested boolean.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Goes from 0 to 63.\nSpecifies what key to grab from datatable.","isOptional":false,"isVarArg":false,"name":"key","type":"number"}],"description":"{{Internal}}\nThis is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.\n\nReturns an entity stored in the datatable of the entity.","examples":[],"isConstructor":false,"name":"GetDTEntity","realm":"shared","returns":[{"description":"Requested entity.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Goes from 0 to 63.\nSpecifies what key to grab from datatable.","isOptional":false,"isVarArg":false,"name":"key","type":"number"}],"description":"{{Internal}}\nThis is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.\n\nGet a float stored in the datatable of the entity.","examples":[],"isConstructor":false,"name":"GetDTFloat","realm":"shared","returns":[{"description":"Requested float.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Goes from 0 to 63.\nSpecifies what key to grab from datatable.","isOptional":false,"isVarArg":false,"name":"key","type":"number"}],"description":"{{Internal}}\nThis is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.\n\nGet an integer stored in the datatable of the entity.","examples":[],"isConstructor":false,"name":"GetDTInt","realm":"shared","returns":[{"description":"32-bit signed integer","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Goes from 0 to 3.\nSpecifies what key to grab from datatable.","isOptional":false,"isVarArg":false,"name":"key","type":"number"}],"description":"{{Internal}}\nThis is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.\n\nGet a string stored in the datatable of the entity.","examples":[],"isConstructor":false,"name":"GetDTString","realm":"shared","returns":[{"description":"Requested string.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Goes from 0 to 63.\nSpecifies what key to grab from datatable.","isOptional":false,"isVarArg":false,"name":"key","type":"number"}],"description":"{{Internal}}\nThis is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.\n\nGet a vector stored in the datatable of the entity.","examples":[],"isConstructor":false,"name":"GetDTVector","realm":"shared","returns":[{"description":"Requested vector.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns a bit flag of all engine effect flags of the entity.","examples":[],"isConstructor":false,"name":"GetEffects","realm":"shared","returns":[{"description":"Engine effect flags, see {{Enum|EF}}","type":"EF"}]},{"accessModifier":"public","arguments":[],"description":"Returns a bit flag of all engine flags of the entity.","examples":[],"isConstructor":false,"name":"GetEFlags","realm":"shared","returns":[{"description":"Engine flags, see {{Enum|EFL}}","type":"EFL"}]},{"accessModifier":"public","arguments":[],"description":"Returns the elasticity of this entity, used by some flying entities such as the Helicopter NPC to determine how much it should bounce around when colliding.","examples":[],"isConstructor":false,"name":"GetElasticity","realm":"shared","returns":[{"description":"elasticity","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns all flags of given entity.","examples":[],"isConstructor":false,"name":"GetFlags","realm":"shared","returns":[{"description":"Flags of given entity as a bitflag, see {{Enum|FL}}","type":"FL"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of the flex to look up bounds of","isOptional":false,"isVarArg":false,"name":"flex","type":"number"}],"description":"Returns acceptable value range for the flex.","examples":[],"isConstructor":false,"name":"GetFlexBounds","realm":"shared","returns":[{"description":"The minimum value for this flex","type":"number"},{"description":"The maximum value for this flex","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the flex to get the ID of. Case sensitive.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Returns the ID of the flex based on given name.","examples":[],"isConstructor":false,"name":"GetFlexIDByName","realm":"shared","returns":[{"description":"The ID of flex\n* nil if no flex with given name was found","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The flex id to look up name of","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Returns flex name.","examples":[],"isConstructor":false,"name":"GetFlexName","realm":"shared","returns":[{"description":"The flex name","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the number of flexes this entity has.","examples":[],"isConstructor":false,"name":"GetFlexNum","realm":"shared","returns":[{"description":"The number of flexes.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the flex scale of the entity.","examples":[],"isConstructor":false,"name":"GetFlexScale","realm":"shared","returns":[{"description":"The flex scale","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of the flex to get weight of","isOptional":false,"isVarArg":false,"name":"flex","type":"number"}],"description":"Returns current weight ( value ) of the flex.","examples":[],"isConstructor":false,"name":"GetFlexWeight","realm":"shared","returns":[{"description":"The current weight of the flex","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the forward vector of the entity, as a normalized direction vector","examples":[],"isConstructor":false,"name":"GetForward","realm":"shared","returns":[{"description":"forwardDir","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns how much friction an entity has. Entities default to 1 (100%) and can be higher or even negative.","examples":[],"isConstructor":false,"name":"GetFriction","realm":"server","returns":[{"description":"friction","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the gravity multiplier of the entity.","examples":[],"isConstructor":false,"name":"GetGravity","realm":"shared","returns":[{"description":"gravityMultiplier","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the object the entity is standing on.","examples":[],"isConstructor":false,"name":"GetGroundEntity","realm":"shared","returns":[{"description":"The ground entity.","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity's ground speed velocity, which is based on the entity's walk/run speed and/or the ground speed of their sequence ( {{ClassFunction|Entity|GetSequenceGroundSpeed}} ). Will return an empty {{Type|Vector}} if the entity isn't moving on the ground.","examples":[],"isConstructor":false,"name":"GetGroundSpeedVelocity","realm":"server","returns":[{"description":"The ground speed velocity.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The number of the hit box.","isOptional":false,"isVarArg":false,"name":"hitbox","type":"number"},{"default":"","description":"The number of the hit box group. This should be 0 in most cases.\n\nNumbering for these groups start from 0. The total group count can be found with {{ClassFunction|Entity|GetHitBoxGroupCount}}.","isOptional":false,"isVarArg":false,"name":"group","type":"number"}],"description":"Gets the bone the hit box is attached to.","examples":[{"code":"local ply = LocalPlayer()\nlocal numHitBoxGroups = ply:GetHitBoxGroupCount()\n\nfor group=0, numHitBoxGroups - 1 do\n  local numHitBoxes = ply:GetHitBoxCount( group )\n    \n  for hitbox=0, numHitBoxes - 1 do\n    local bone = ply:GetHitBoxBone(hitbox, group)\n\n    print( \"Hit box group \" .. group .. \", hitbox \" .. hitbox .. \" is attached to bone \" .. ply:GetBoneName(bone) )\n  end\nend","description":""}],"isConstructor":false,"name":"GetHitBoxBone","realm":"shared","returns":[{"description":"The number of the bone. Will be nil if the hit box index was out of range.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|You should use {{ClassFunction|Entity|GetHitBoxBone}} instead.}}","examples":[],"isConstructor":false,"name":"GetHitboxBone","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The number of the hit box.","isOptional":false,"isVarArg":false,"name":"hitbox","type":"number"},{"default":"","description":"The group of the hit box. This should be 0 in most cases.","isOptional":false,"isVarArg":false,"name":"group","type":"number"}],"description":"Gets the bounds (min and max corners) of a hit box.","examples":[{"code":"local mins, maxs = LocalPlayer():GetHitBoxBounds(0, 0)\nprint(mins, maxs)","description":"Displays the mins and maxs for the client's first hitbox in the first group, which is generally the head."}],"isConstructor":false,"name":"GetHitBoxBounds","realm":"shared","returns":[{"description":"Hit box mins. Will be nil if the hit box index was out of range.","type":"Vector"},{"description":"Hit box maxs. Will be nil if the hit box index was out of range.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The number of the hit box group","isOptional":false,"isVarArg":false,"name":"group","type":"number"}],"description":"Gets how many hit boxes are in a given hit box group","examples":[{"code":"local numHitBoxGroups = LocalPlayer():GetHitBoxGroupCount()\n\nfor i=0, numHitBoxGroups - 1 do\n  local numHitBoxes = LocalPlayer():GetHitBoxCount( i )\n  print(\"Hit box group \" .. i .. \" has \" .. numHitBoxes .. \" hit boxes!\")\nend","description":"Will print out how many hit boxes the client has in each of their hit box groups"}],"isConstructor":false,"name":"GetHitBoxCount","realm":"shared","returns":[{"description":"The number of hit boxes.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the number of hit box groups that an entity has.","examples":[{"code":"local numHitBoxGroups = LocalPlayer():GetHitBoxGroupCount()\nprint(numHitBoxGroups)","description":"Prints how many hit box groups the client has"}],"isConstructor":false,"name":"GetHitBoxGroupCount","realm":"shared","returns":[{"description":"number of hit box groups","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns entity's current hit box set","examples":[],"isConstructor":false,"name":"GetHitboxSet","realm":"shared","returns":[{"description":"The current hit box set id, or no value if the entity doesn't have hit boxes","type":"number"},{"description":"The current hit box set name, or no value if the entity doesn't have hit boxes","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of hitbox sets in the entity.","examples":[],"isConstructor":false,"name":"GetHitboxSetCount","realm":"shared","returns":[{"description":"The amount of hitbox sets in the entity.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of variable corresponding to an entity save value.","isOptional":false,"isVarArg":false,"name":"VariableName","type":"string"}],"description":"An interface for accessing internal key values on entities.<br/>\nThis function returns variables created with '''DEFINE_KEYFIELD''' in C++ entities.\n\nSee {{ClassFunction|Entity|GetSaveTable}} for a more detailed explanation.\n\n{{Bug|Issue=2552|This is missing prediction fields and most of the datatable clientside.}}","examples":[],"isConstructor":false,"name":"GetInternalVariable","realm":"shared","returns":[{"description":"The internal variable value","type":"any"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table containing all key values the entity has.\n\n{{Note|This only includes engine defined key values. \"targetname\" is not an actual key value in-engine, use {{ClassFunction|Entity|GetName}} for that instead. For custom key values, use {{HookFunction|GM|EntityKeyValue}} or {{HookFunction|ENTITY|KeyValue}} to capture and store them.}}","examples":[],"isConstructor":false,"name":"GetKeyValues","realm":"server","returns":[{"description":"A table of key values.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The Layer ID","isOptional":false,"isVarArg":false,"name":"layerID","type":"number"}],"description":"Returns the animation cycle/frame for given layer.\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"GetLayerCycle","realm":"server","returns":[{"description":"The animation cycle/frame for given layer.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The Layer ID","isOptional":false,"isVarArg":false,"name":"layerID","type":"number"}],"description":"Returns the duration of given layer.\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"GetLayerDuration","realm":"server","returns":[{"description":"The duration of the layer","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The Layer ID","isOptional":false,"isVarArg":false,"name":"layerID","type":"number"}],"description":"Returns the current weight of the layer. See {{ClassFunction|Entity|SetLayerWeight}} for more information.\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"GetLayerWeight","realm":"server","returns":[{"description":"The current weight of the layer","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the rotation of the entity relative to its parent entity.","examples":[],"isConstructor":false,"name":"GetLocalAngles","realm":"shared","returns":[{"description":"Relative angle","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Returns the non-VPhysics angular velocity of the entity relative to its parent entity.","examples":[],"isConstructor":false,"name":"GetLocalAngularVelocity","realm":"shared","returns":[{"description":"The velocity","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Returns entity's position relative to it's parent.","examples":[],"isConstructor":false,"name":"GetLocalPos","realm":"shared","returns":[{"description":"Relative position","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The bone's ID","isOptional":false,"isVarArg":false,"name":"boneID","type":"number"}],"description":"Gets the entity's angle manipulation of the given bone. This is relative to the default angle, so the angle is zero when unmodified.","examples":[],"isConstructor":false,"name":"GetManipulateBoneAngles","realm":"shared","returns":[{"description":"The entity's angle manipulation of the given bone.","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The bone ID","isOptional":false,"isVarArg":false,"name":"boneID","type":"number"}],"description":"{{Validate}}\n\nReturns the jiggle amount of the entity's bone. Seems to be broken.","examples":[],"isConstructor":false,"name":"GetManipulateBoneJiggle","realm":"shared","returns":[{"description":"Returns a value ranging from 0 to 255 depending on the value set with {{ClassFunction|Entity|ManipulateBoneJiggle}}.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The bone's ID","isOptional":false,"isVarArg":false,"name":"boneId","type":"number"}],"description":"Gets the entity's position manipulation of the given bone. This is relative to the default position, so it is zero when unmodified.","examples":[],"isConstructor":false,"name":"GetManipulateBonePosition","realm":"shared","returns":[{"description":"The entity's position manipulation of the given bone.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The bone's ID","isOptional":false,"isVarArg":false,"name":"boneID","type":"number"}],"description":"Gets the entity's scale manipulation of the given bone. Normal scale is Vector( 1, 1, 1 )","examples":[],"isConstructor":false,"name":"GetManipulateBoneScale","realm":"shared","returns":[{"description":"The entity's scale manipulation of the given bone","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the material override for this entity. \n\nReturns an empty string if no material override exists. Use {{ClassFunction|Entity|GetMaterials}} to list it's default materials.\n\n{{Bug|Issue=3362|The server's value takes priority on the client.}}","examples":[],"isConstructor":false,"name":"GetMaterial","realm":"shared","returns":[{"description":"material","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns all materials of the entity's model.\n\nThis function is unaffected by {{ClassFunction|Entity|SetSubMaterial}} as it returns the original materials.\n\n{{Bug|Issue=3362|The server's values take priority on the client.}}\n\n{{Bug|The table returned by this function will not contain materials if they are missing from the disk/repository. This means that if you are attempting to find the ID of a material to replace with {{ClassFunction|Entity|SetSubMaterial}} and there are missing materials on the model, all subsequent materials will be offset in the table, meaning that the ID you are trying to get will be incorrect.}}","examples":[],"isConstructor":false,"name":"GetMaterials","realm":"shared","returns":[{"description":"A table containing full paths to the materials of the model.\n\n{{Bug|Issue=3216|This table is limited to 127 materials, even if the entity has more.}}","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the surface material of this entity.","examples":[{"code":"local function BackwardsEnums( enumname ) -- Helper function to build our table of values.\n\tlocal backenums = {}\n\n\tfor k, v in pairs( _G ) do\n\t\tif type( k ) == \"string\" and string.find( k, \"^\"..enumname ) then\n\t\t\tbackenums[ v ] = k\n\t\tend\n\tend\n\n\treturn backenums\nend\n\nlocal MAT = BackwardsEnums( \"MAT_\" )\n\nlocal validclasses = { prop_physics = true, prop_physics_multiplayer = true, prop_dynamic = true }\nfor k, v in pairs( ents.GetAll() ) do\n\tif validclasses[ v:GetClass() ] then\n\t\tprint( v:GetModel(), MAT[ v:GetMaterialType() ] or \"UNKNOWN\" )\n\tend\nend","description":"Prints the MAT_ enum name for every prop on the map."}],"isConstructor":false,"name":"GetMaterialType","realm":"server","returns":[{"description":"Surface material. See {{Enum|MAT}}","type":"MAT"}]},{"accessModifier":"public","arguments":[],"description":"Returns the max health that the entity was given. It can be set via {{ClassFunction|Entity|SetMaxHealth}}.","examples":[{"code":"print( Entity( 1 ):GetMaxHealth() )","description":"Prints the maximum health set for player 1."}],"isConstructor":false,"name":"GetMaxHealth","realm":"shared","returns":[{"description":"Max health.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the model of given entity.\n\n{{Note|This does not necessarily return the model's path, as is the case for brush and virtual models.}}","examples":[],"isConstructor":false,"name":"GetModel","realm":"shared","returns":[{"description":"The entity's model. Will be a filesystem path for most models.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity's model bounds. This is different than the collision bounds/hull. This is not scaled with {{ClassFunction|Entity|SetModelScale}}, and will return the model's original, unmodified mins and maxs.","examples":[],"isConstructor":false,"name":"GetModelBounds","realm":"shared","returns":[{"description":"The minimum vector of the bounds","type":"Vector"},{"description":"The maximum vector of the bounds","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Gets the physics bone count of the entity's model. This is only applicable to ragdoll models and only to \"anim\" type [[Scripted Entities]].","examples":[],"isConstructor":false,"name":"GetModelPhysBoneCount","realm":"client","returns":[{"description":"How many physics bones exist on the model.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the models radius.","examples":[{"code":"print( Entity(1):GetModelRadius() )","description":"Example usage of the function, tested on player."}],"isConstructor":false,"name":"GetModelRadius","realm":"shared","returns":[{"description":"The radius of the model","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Validate}}\nReturns the entity's model render bounds. By default this will return the same bounds as {{ClassFunction|Entity|GetModelBounds}}.","examples":[],"isConstructor":false,"name":"GetModelRenderBounds","realm":"shared","returns":[{"description":"The minimum vector of the bounds","type":"Vector"},{"description":"The maximum vector of the bounds","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Gets the selected entity's model scale.","examples":[{"code":"lua_run_cl print(LocalPlayer():GetModelScale())","description":"This example shows how one can get the model scale of their self."}],"isConstructor":false,"name":"GetModelScale","realm":"shared","returns":[{"description":"Scale of that entity's model.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The angle of rotation to compare - usually should be {{ClassFunction|Entity|GetAngles}}.","isOptional":false,"isVarArg":false,"name":"turnAngle","type":"Angle"}],"description":"Returns the amount a momentary_rot_button entity is turned based on the given angle. 0 meaning completely turned closed, 1 meaning completely turned open.","examples":[],"isConstructor":false,"name":"GetMomentaryRotButtonPos","realm":"server","returns":[{"description":"The amount the momentary_rot_button is turned, ranging from 0 to 1, or nil if the entity is not a momentary_rot_button.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide?","examples":[],"isConstructor":false,"name":"GetMoveCollide","realm":"shared","returns":[{"description":"The move collide type, see {{Enum|MOVECOLLIDE}}","type":"MOVECOLLIDE"}]},{"accessModifier":"public","arguments":[],"description":"Returns the movement parent of this entity.\n\nSee {{ClassFunction|Entity|SetMoveParent}} for more info.","examples":[],"isConstructor":false,"name":"GetMoveParent","realm":"shared","returns":[{"description":"The movement parent of this entity.","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity's movetype","examples":[],"isConstructor":false,"name":"GetMoveType","realm":"shared","returns":[{"description":"Move type. See {{Enum|MOVETYPE}}","type":"MOVETYPE"}]},{"accessModifier":"public","arguments":[],"description":"Returns the mapping name of this entity.","examples":[],"isConstructor":false,"name":"GetName","realm":"server","returns":[{"description":"The name of the Entity","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Gets networked angles for entity.","examples":[],"isConstructor":false,"name":"GetNetworkAngles","realm":"client","returns":[{"description":"angle","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key that is associated with the value","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"Angle( 0, 0, 0 )","description":"The value to return if we failed to retrieve the value. ( If it isn't set )","isOptional":true,"isVarArg":false,"name":"fallback","type":"Angle"}],"description":"{{Deprecated|You should use {{ClassFunction|Entity|GetNWAngle}} instead.}}\n\nRetrieves a networked angle value at specified index on the entity that is set by {{ClassFunction|Entity|SetNetworkedAngle}}.","examples":[],"isConstructor":false,"name":"GetNetworkedAngle","realm":"shared","returns":[{"description":"The retrieved value","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key that is associated with the value","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"false","description":"The value to return if we failed to retrieve the value. ( If it isn't set )","isOptional":true,"isVarArg":false,"name":"fallback","type":"boolean"}],"description":"{{Deprecated|You should use {{ClassFunction|Entity|GetNWBool}} instead.}}\n\nRetrieves a networked boolean value at specified index on the entity that is set by {{ClassFunction|Entity|SetNetworkedBool}}.","examples":[],"isConstructor":false,"name":"GetNetworkedBool","realm":"shared","returns":[{"description":"The retrieved value","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key that is associated with the value","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"NULL","description":"The value to return if we failed to retrieve the value. ( If it isn't set )","isOptional":true,"isVarArg":false,"name":"fallback","type":"Entity"}],"description":"{{Deprecated|You should use {{ClassFunction|Entity|GetNWEntity}} instead.}}\n\nRetrieves a networked float value at specified index on the entity that is set by {{ClassFunction|Entity|SetNetworkedEntity}}.","examples":[],"isConstructor":false,"name":"GetNetworkedEntity","realm":"shared","returns":[{"description":"The retrieved value","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key that is associated with the value","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"0","description":"The value to return if we failed to retrieve the value. ( If it isn't set )","isOptional":true,"isVarArg":false,"name":"fallback","type":"number"}],"description":"{{Deprecated|You should use {{ClassFunction|Entity|GetNWFloat}} instead.}}\n\nRetrieves a networked float value at specified index on the entity that is set by {{ClassFunction|Entity|SetNetworkedFloat}}.\n\nSeems to be the same as {{ClassFunction|Entity|GetNetworkedInt}}.","examples":[],"isConstructor":false,"name":"GetNetworkedFloat","realm":"shared","returns":[{"description":"The retrieved value","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key that is associated with the value","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"0","description":"The value to return if we failed to retrieve the value. ( If it isn't set )","isOptional":true,"isVarArg":false,"name":"fallback","type":"number"}],"description":"{{Deprecated|You should use {{ClassFunction|Entity|GetNWInt}} instead.}}\n\nRetrieves a networked integer value at specified index on the entity that is set by {{ClassFunction|Entity|SetNetworkedInt}}.","examples":[],"isConstructor":false,"name":"GetNetworkedInt","realm":"shared","returns":[{"description":"The retrieved value","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key that is associated with the value","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"\"\"","description":"The value to return if we failed to retrieve the value. ( If it isn't set )","isOptional":true,"isVarArg":false,"name":"fallback","type":"string"}],"description":"{{Deprecated|You should use {{ClassFunction|Entity|GetNWString}} instead.}}\n\nRetrieves a networked string value at specified index on the entity that is set by {{ClassFunction|Entity|SetNetworkedString}}.","examples":[],"isConstructor":false,"name":"GetNetworkedString","realm":"shared","returns":[{"description":"The retrieved value","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the NWVar to get callback of.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"{{Deprecated|You should be using {{ClassFunction|Entity|GetNWVarProxy}} instead.}}\nReturns callback function for given NWVar of this entity.\n{{Note|Currently this function only works for the NW2Var system (accessed by adding a 2 in between Networked and Var for most NetworkedVar functions), which will replace the original one at some point in the future}}","examples":[{"code":"print( Entity(1):GetNetworkedVarProxy( \"Key\" ) )\nEntity(1):SetNetworkedVarProxy( \"Key\", print )\nprint( Entity(1):GetNetworkedVarProxy( \"Key\" ) )","description":"Prints callback function of a NWVar called \"Key\" of Player 1."}],"isConstructor":false,"name":"GetNetworkedVarProxy","realm":"shared","returns":[{"description":"The callback of given NWVar, if any.","type":"Function"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|You should be using {{ClassFunction|Entity|GetNWVarTable}} instead.}}\n\nReturns all the networked variables in an entity.\n\n{{NextUpdate|This feature is currently unavailable. It will be released in a future update.}}","examples":[{"code":"PrintTable( Entity(1):GetNWVarTable() )","description":"Prints all NWVars that exist for Player 1."}],"isConstructor":false,"name":"GetNetworkedVarTable","realm":"shared","returns":[{"description":"Key-Value table of all networked variables.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key that is associated with the value","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"Vector( 0, 0, 0 )","description":"The value to return if we failed to retrieve the value. ( If it isn't set )","isOptional":true,"isVarArg":false,"name":"fallback","type":"Vector"}],"description":"{{Deprecated|You should use {{ClassFunction|Entity|GetNWVector}} instead.}}\n\nRetrieves a networked vector value at specified index on the entity that is set by {{ClassFunction|Entity|SetNetworkedVector}}.","examples":[],"isConstructor":false,"name":"GetNetworkedVector","realm":"shared","returns":[{"description":"The retrieved value","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Gets networked origin for entity.","examples":[],"isConstructor":false,"name":"GetNetworkOrigin","realm":"shared","returns":[{"description":"origin","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the entity's rendering and transmitting has been disabled.\n\n{{Note|This is equivalent to calling {{ClassFunction|Entity|IsEffectActive}}( EF_NODRAW )}}","examples":[],"isConstructor":false,"name":"GetNoDraw","realm":"shared","returns":[{"description":"Whether the entity's rendering and transmitting has been disabled.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the body group count of the entity.","examples":[],"isConstructor":false,"name":"GetNumBodyGroups","realm":"shared","returns":[{"description":"Amount of bodygroups the entitys model has","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the number of pose parameters this entity has.","examples":[{"code":"for i=0, ent:GetNumPoseParameters() - 1 do\n\tlocal min, max = ent:GetPoseParameterRange( i )\n\tprint( ent:GetPoseParameterName( i ) .. ' ' .. min .. \" / \" .. max )\nend","description":"Prints all the entities poses.\n\nThe entity used to generate the output is a model of the combine helicopter."}],"isConstructor":false,"name":"GetNumPoseParameters","realm":"shared","returns":[{"description":"Amount of pose parameters the entity has","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key that is associated with the value","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"Angle( 0, 0, 0 )","description":"The value to return if we failed to retrieve the value. (If it isn't set)","isOptional":true,"isVarArg":false,"name":"fallback","type":"any"}],"description":"Retrieves a networked angle value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWAngle}}.","examples":[],"isConstructor":false,"name":"GetNWAngle","realm":"shared","returns":[{"description":"The retrieved value","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key that is associated with the value","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"false","description":"The value to return if we failed to retrieve the value. (If it isn't set)","isOptional":true,"isVarArg":false,"name":"fallback","type":"any"}],"description":"Retrieves a networked boolean value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWBool}}.","examples":[],"isConstructor":false,"name":"GetNWBool","realm":"shared","returns":[{"description":"The retrieved value","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key that is associated with the value","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"NULL","description":"The value to return if we failed to retrieve the value. (If it isn't set)","isOptional":true,"isVarArg":false,"name":"fallback","type":"any"}],"description":"Retrieves a networked entity value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWEntity}}.","examples":[],"isConstructor":false,"name":"GetNWEntity","realm":"shared","returns":[{"description":"The retrieved value","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key that is associated with the value","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"0","description":"The value to return if we failed to retrieve the value. (If it isn't set)","isOptional":true,"isVarArg":false,"name":"fallback","type":"any"}],"description":"Retrieves a networked float value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWFloat}}.","examples":[],"isConstructor":false,"name":"GetNWFloat","realm":"shared","returns":[{"description":"The retrieved value","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key that is associated with the value","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"0","description":"The value to return if we failed to retrieve the value (If it isn't set).","isOptional":true,"isVarArg":false,"name":"fallback","type":"any"}],"description":"Retrieves a networked integer (whole number) value that was previously set by {{ClassFunction|Entity|SetNWInt}}.\n\n{{Bug|Issue=3374|This function will not round decimal values as it actually networks a float internally.}}","examples":[],"isConstructor":false,"name":"GetNWInt","realm":"shared","returns":[{"description":"The stored integer, or the fallback if it doesn't exist.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key that is associated with the value","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"\"\"","description":"The value to return if we failed to retrieve the value. (If it isn't set)","isOptional":true,"isVarArg":false,"name":"fallback","type":"any"}],"description":"Retrieves a networked string value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWString}}.","examples":[{"code":"print( Entity(1):GetNWString( \"usergroup\" ) )","description":"Prints the player's rank"}],"isConstructor":false,"name":"GetNWString","realm":"shared","returns":[{"description":"The retrieved value","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key of the NWVar to get callback of.","isOptional":false,"isVarArg":false,"name":"key","type":"any"}],"description":"Returns callback function for given NWVar of this entity.\n{{Note|Currently this function only works for the NW2Var system (accessed by adding a 2 in between NW and Var for most NWVar functions), which will replace the original one at some point in the future}}","examples":[{"code":"print( Entity(1):GetNWVarProxy( \"Key\" ) )\nEntity(1):SetNWVarProxy( \"Key\", print )\nprint( Entity(1):GetNWVarProxy( \"Key\" ) )","description":"Prints callback function of a NWVar called \"Key\" of Player 1."}],"isConstructor":false,"name":"GetNWVarProxy","realm":"shared","returns":[{"description":"The callback of given NWVar, or nil if not found.","type":"Function"}]},{"accessModifier":"public","arguments":[],"description":"Returns all the networked variables in an entity.\n\n{{NextUpdate|This feature is currently unavailable. It will be released in a future update.}}","examples":[{"code":"PrintTable( Entity(1):GetNWVarTable() )","description":"Prints all NWVars that exist for Player 1."}],"isConstructor":false,"name":"GetNWVarTable","realm":"shared","returns":[{"description":"Key-Value table of all networked variables.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key that is associated with the value","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"Vector( 0, 0, 0 )","description":"The value to return if we failed to retrieve the value. (If it isn't set)","isOptional":true,"isVarArg":false,"name":"fallback","type":"any"}],"description":"Retrieves a networked vector value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWVector}}.","examples":[],"isConstructor":false,"name":"GetNWVector","realm":"shared","returns":[{"description":"The retrieved value","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the owner entity of this entity. See {{ClassFunction|Entity|SetOwner}} for more info.","examples":[],"isConstructor":false,"name":"GetOwner","realm":"shared","returns":[{"description":"The owner entity of this entity.","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns the parent entity of this entity.","examples":[],"isConstructor":false,"name":"GetParent","realm":"shared","returns":[{"description":"parentEntity","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns the attachment index of the entity's parent. Returns 0 if the entity is not parented to a specific attachment or if it isn't parented at all.\n\nThis is set by second argument of {{ClassFunction|Entity|SetParent}} or the '''SetParentAttachment''' input.","examples":[],"isConstructor":false,"name":"GetParentAttachment","realm":"shared","returns":[{"description":"The parented attachment index","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"If the entity is parented to an entity that has a model with multiple physics objects (like a ragdoll), this is used to retrieve what physics object number the entity is parented to on it's parent.","examples":[],"isConstructor":false,"name":"GetParentPhysNum","realm":"shared","returns":[{"description":"The physics object id, or nil if the entity has no parent","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the entity is persistent or not.\n\nSee {{ClassFunction|Entity|SetPersistent}} for more information on persistence.","examples":[],"isConstructor":false,"name":"GetPersistent","realm":"shared","returns":[{"description":"True if the entity is set to be persistent.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The time to check if the entity was still a proper physics attacker.\n\n{{Note|Some entities such as the Combine Ball disregard the time limit and always return the physics attacker.}}","isOptional":false,"isVarArg":false,"name":"timeLimit","type":"number"}],"description":"Returns player who is claiming kills of physics damage the entity deals.","examples":[],"isConstructor":false,"name":"GetPhysicsAttacker","realm":"server","returns":[{"description":"The player. If entity that was set is not a player, it will return NULL entity.","type":"Player"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity's physics object, if the entity has physics.","examples":[{"code":"local phys = ent:GetPhysicsObject()\nif ( IsValid( phys ) ) then -- Always check with IsValid! The ent might not have physics!\n\treturn phys:GetMass()\nelse\n\treturn 0\nend","description":"Gets the mass of an entity."}],"isConstructor":false,"name":"GetPhysicsObject","realm":"shared","returns":[{"description":"The entity's physics object.","type":"PhysObj"}]},{"accessModifier":"public","arguments":[],"description":"Returns the number of physics objects an entity has (usually 1 for non-ragdolls)","examples":[{"code":"for i=0, ragdoll:GetPhysicsObjectCount() - 1 do -- \"ragdoll\" being a ragdoll entity\n \n\tlocal phys = ragdoll:GetPhysicsObjectNum(i)\n\tphys:ApplyForceCenter( Vector( 0, 0, 10000 ) )\n\nend","description":"Finds all the Physics Objects in a ragdoll and applies an upward force"}],"isConstructor":false,"name":"GetPhysicsObjectCount","realm":"shared","returns":[{"description":"numObjects","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The number corresponding to the {{Type|PhysObj}} to grab. Starts at 0.","isOptional":false,"isVarArg":false,"name":"physNum","type":"number"}],"description":"Returns a specific physics object from an entity with multiple {{Type|PhysObj}}ects (like ragdolls)\n\nSee also {{ClassFunction|Entity|TranslateBoneToPhysBone}}.","examples":[{"code":"if ( !LocalPlayer():Alive() && LocalPlayer():GetRagdollEntity() ) then\n\tlocal ent = LocalPlayer():GetRagdollEntity()\n\tlocal head = ent:GetPhysicsObjectNum( 10 ) // 10 is usually the bone number of the head.\n\thead:ApplyForceCenter( Vector( 0, 0, 6000 ) )\nend","description":"When run, if the player is dead it will throw their ragdoll up in the air by their head."},{"code":"function ApplySomeForce( ent )\n\tfor i = 0, ent:GetPhysicsObjectCount() - 1 do\n\t\tlocal phys = ent:GetPhysicsObjectNum( i )\n\t\tphys:ApplyForceCenter( Vector( 0, 0, 10000 ) )\n\tend\nend","description":"Example function that applies force to all physics objects of given entity."}],"isConstructor":false,"name":"GetPhysicsObjectNum","realm":"shared","returns":[{"description":"The physics object","type":"PhysObj"}]},{"accessModifier":"public","arguments":[],"description":"Returns the playback rate of the main sequence on this entity, with 1.0 being the default speed.","examples":[],"isConstructor":false,"name":"GetPlaybackRate","realm":"shared","returns":[{"description":"The playback rate.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the position of entity in world.","examples":[{"code":"concommand.Add( \"entity_pos\", function( ply )\n\tlocal tr = ply:GetEyeTrace()\n\tif ( IsValid( tr.Entity ) ) then\n\t\tprint( \"Entity position:\", tr.Entity:GetPos() )\n\telse\n\t\tprint( \"Crosshair position:\", tr.HitPos )\n\tend\nend )","description":"Utility command that would give you the position of the entity you are looking at."}],"isConstructor":false,"name":"GetPos","realm":"shared","returns":[{"description":"The position of the entity.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Pose parameter name to look up","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Returns the pose parameter value","examples":[],"isConstructor":false,"name":"GetPoseParameter","realm":"shared","returns":[{"description":"Value of given pose parameter.\n\n{{Warning|This value will be from 0 - 1 on the client and from minimum range to maximum range on the server! You'll have to [[math/Remap|remap]] this value clientside to {{ClassFunction|Entity|GetPoseParameterRange}}'s returns if you want get the actual pose parameter value. See {{ClassFunction|Entity|SetPoseParameter}}'s example.}}","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Id of the pose paremeter","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Returns name of given pose parameter","examples":[],"isConstructor":false,"name":"GetPoseParameterName","realm":"shared","returns":[{"description":"Name of given pose parameter","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Pose parameter ID to look up","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Returns pose parameter range","examples":[],"isConstructor":false,"name":"GetPoseParameterRange","realm":"shared","returns":[{"description":"The minimum value","type":"number"},{"description":"The maximum value","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether this entity is predictable or not.\n\nSee {{ClassFunction|Entity|SetPredictable}} for more information","examples":[],"isConstructor":false,"name":"GetPredictable","realm":"client","returns":[{"description":"Whether this entity is predictable or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity which the ragdoll came from. The opposite of {{ClassFunction|Player|GetRagdollEntity}}.","examples":[{"code":"for e, ent in pairs( ents.GetAll() ) do\n\tif( ent:GetRagdollOwner() ) then\n\t\tprint( ent:GetRagdollOwner() )\n\tend\nend","description":"Loop through all player ragdolls and print their owners."}],"isConstructor":false,"name":"GetRagdollOwner","realm":"shared","returns":[{"description":"The entity who owns the ragdoll.","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity's render angles, set by {{ClassFunction|Entity|SetRenderAngles}} in a drawing hook.","examples":[],"isConstructor":false,"name":"GetRenderAngles","realm":"client","returns":[{"description":"The entitys render angles","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Returns render bounds of the entity. Can be overridden by {{ClassFunction|Entity|SetRenderBounds}}.\n\nIf the render bounds are not inside players view, the entity will not be drawn!","examples":[],"isConstructor":false,"name":"GetRenderBounds","realm":"client","returns":[{"description":"The minimum vector of the bounds","type":"Vector"},{"description":"The maximum vector of the bounds.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns current render FX of the entity.","examples":[],"isConstructor":false,"name":"GetRenderFX","realm":"shared","returns":[{"description":"The current render FX of the entity. See {{Enum|kRenderFx}}","type":"kRenderFx"}]},{"accessModifier":"public","arguments":[],"description":"Returns the render group of the entity.","examples":[],"isConstructor":false,"name":"GetRenderGroup","realm":"client","returns":[{"description":"The render group. See {{Enum|RENDERGROUP}}","type":"RENDERGROUP"}]},{"accessModifier":"public","arguments":[],"description":"Returns the render mode of the entity.","examples":[],"isConstructor":false,"name":"GetRenderMode","realm":"shared","returns":[{"description":"The render Mode. See {{Enum|RENDERMODE}}","type":"RENDERMODE"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity's render origin, set by {{ClassFunction|Entity|SetRenderOrigin}} in a drawing hook.","examples":[],"isConstructor":false,"name":"GetRenderOrigin","realm":"client","returns":[{"description":"The entitys render origin","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the rightward vector of the entity, as a normalized direction vector","examples":[],"isConstructor":false,"name":"GetRight","realm":"shared","returns":[{"description":"rightDir","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Minimum extent of the bounding box.","isOptional":false,"isVarArg":false,"name":"min","type":"Vector"},{"default":"","description":"Maximum extent of the bounding box.","isOptional":false,"isVarArg":false,"name":"max","type":"Vector"}],"description":"Returns the min and max of the entity's axis-aligned bounding box.","examples":[{"code":"local a, b = ent:GetRotatedAABB( v:OBBMins(), v:OBBMaxs() )\nlocal pos = ( ent:GetPos() + ( a + b ) / 2 )","description":"The entity's AABB center (regardless of model origin) is stored in 'pos'."}],"isConstructor":false,"name":"GetRotatedAABB","realm":"shared","returns":[{"description":"Minimum extent of the AABB","type":"Vector"},{"description":"Maximum extent of the AABB","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table of save values for an entity.\n\nThese tables are not the same between the client and the server, and different entities may have different fields.\n\nYou can get the list different fields an entity has by looking at it's source code ( the 2013 SDK can be found online, https://github.com/ValveSoftware/source-sdk-2013 ). Accessible fields are defined by each DEFINE_FIELD and DEFINE_KEYFIELD inside the DATADESC block.\n\nTake the headcrab, for example:\n<pre>BEGIN_DATADESC( CBaseHeadcrab )\n\t// m_nGibCount - don't save\n\tDEFINE_FIELD( m_bHidden, FIELD_BOOLEAN ),\n\tDEFINE_FIELD( m_flTimeDrown, FIELD_TIME ),\n\tDEFINE_FIELD( m_bCommittedToJump, FIELD_BOOLEAN ),\n\tDEFINE_FIELD( m_vecCommittedJumpPos, FIELD_POSITION_VECTOR ),\n\tDEFINE_FIELD( m_flNextNPCThink, FIELD_TIME ),\n\tDEFINE_FIELD( m_flIgnoreWorldCollisionTime, FIELD_TIME ),\n\t\n\tDEFINE_KEYFIELD( m_bStartBurrowed, FIELD_BOOLEAN, \"startburrowed\" ),\n\tDEFINE_FIELD( m_bBurrowed, FIELD_BOOLEAN ),\n\tDEFINE_FIELD( m_flBurrowTime, FIELD_TIME ),\n\tDEFINE_FIELD( m_nContext, FIELD_INTEGER ),\n\tDEFINE_FIELD( m_bCrawlFromCanister, FIELD_BOOLEAN ),\n\tDEFINE_FIELD( m_bMidJump, FIELD_BOOLEAN ),\n\tDEFINE_FIELD( m_nJumpFromCanisterDir, FIELD_INTEGER ),\n\tDEFINE_FIELD( m_bHangingFromCeiling, FIELD_BOOLEAN ),\n\tDEFINE_FIELD( m_flIlluminatedTime, FIELD_TIME ),\n\t\t\n\tDEFINE_INPUTFUNC( FIELD_VOID, \"Burrow\", InputBurrow ),\n\tDEFINE_INPUTFUNC( FIELD_VOID, \"BurrowImmediate\", InputBurrowImmediate ),\n\tDEFINE_INPUTFUNC( FIELD_VOID, \"Unburrow\", InputUnburrow ),\n\tDEFINE_INPUTFUNC( FIELD_VOID, \"StartHangingFromCeiling\", InputStartHangingFromCeiling ),\n\tDEFINE_INPUTFUNC( FIELD_VOID, \"DropFromCeiling\", InputDropFromCeiling ),\n\t\n\t// Function Pointers\n\tDEFINE_THINKFUNC( EliminateRollAndPitch ),\n\tDEFINE_THINKFUNC( ThrowThink ),\n\tDEFINE_ENTITYFUNC( LeapTouch ),\nEND_DATADESC()\n</pre>\n\nFor each '''DEFINE_FIELD''', the save table will have a key with name of '''first''' argument.\n\nFor each '''DEFINE_KEYFIELD''', the save table will have a key with name of the '''third''' argument.\n\nSee {{ClassFunction|Entity|GetInternalVariable}} for only retrieving one key of the save table.\n\n{{Bug|Issue=2552|This is missing prediction fields and most of the datatable clientside.}}","examples":[{"code":"local meta = FindMetaTable( \"Player\" )\n\nfunction meta:GetLastDamageTime()\n\treturn self:GetSaveTable().m_flLastDamageTime\nend\n\nprint( Entity( 1 ):GetLastDamageTime() )","description":"Get how long it has been since the player was damaged"},{"code":"function IsDoorLocked(ent)\n\treturn ent:GetSaveTable().m_bLocked\nend","description":"Determine if a door is locked (only works on server side otherwise returns nil)"},{"code":"local TestingFunctions = {\n\t[\"func_door\"] = function( self )\n\t\treturn ( self:GetSaveTable().m_toggle_state == 0 )\n\tend,\n\t[\"func_door_rotating\"] = function( self )\n\t\treturn ( self:GetSaveTable().m_toggle_state == 0 )\n\tend,\n\t[\"prop_door_rotating\"] = function( self )\n\t\treturn ( self:GetSaveTable().m_eDoorState ~= 0 )\n\tend,\n}\nfunction DoorIsOpen( door )\n\tlocal func = TestingFunctions[door:GetClass()]\n\tif func then\n\t\treturn func( door )\n\tend\nend","description":"Function ''DoorIsOpen( door )'' that returns whether a door is open or not, for different door classes"}],"isConstructor":false,"name":"GetSaveTable","realm":"shared","returns":[{"description":"A table containing all save values in key/value format.\n\nThe value may be a sequential table (starting with 1) if the field in question is an array in engine.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Return the index of the model sequence that is currently active for the entity.","examples":[],"isConstructor":false,"name":"GetSequence","realm":"shared","returns":[{"description":"The index of the model sequence.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The sequence ID","isOptional":false,"isVarArg":false,"name":"seq","type":"number"}],"description":"Return activity id out of sequence id. Opposite of {{ClassFunction|Entity|SelectWeightedSequence}}.","examples":[],"isConstructor":false,"name":"GetSequenceActivity","realm":"shared","returns":[{"description":"The activity ID, ie {{Enum|ACT}}","type":"ACT"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The sequence id.","isOptional":false,"isVarArg":false,"name":"sequenceId","type":"number"}],"description":"Returns the activity name for the given sequence id.","examples":[],"isConstructor":false,"name":"GetSequenceActivityName","realm":"shared","returns":[{"description":"The {{Enum|ACT}} as a string, returns \"Not Found!\" with an invalid sequence and \"No model!\" when no model is set.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of sequences ( animations ) the entity's model has.","examples":[],"isConstructor":false,"name":"GetSequenceCount","realm":"shared","returns":[{"description":"The amount of sequences ( animations ) the entity's model has.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The sequence ID.","isOptional":false,"isVarArg":false,"name":"sequenceId","type":"number"}],"description":"Returns the ground speed of the entity's sequence.","examples":[{"code":"local sequence = self:LookupSequence( \"walk_all\" )\n\nif ( sequence ) then\n\tself:StartActivity( ACT_WALK )\n\tself:SetSequence( sequence )\n\tself.loco:SetDesiredSpeed( self:GetSequenceGroundSpeed( sequence ) )\nend","description":"Move the {{Type|NextBot}} based on the ground speed of its walking animation (within its {{Type|coroutine}}).\n\n{{Note|In most cases it's better to use {{ClassFunction|NextBot|BodyMoveXY}} instead.}}"}],"isConstructor":false,"name":"GetSequenceGroundSpeed","realm":"shared","returns":[{"description":"The ground speed of this sequence.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The sequence id of the entity.","isOptional":false,"isVarArg":false,"name":"sequenceId","type":"number"}],"description":"Returns a table of information about an entity's sequence.","examples":[{"code":"function GM:PostPlayerDraw( ply )\n\n\tseqinfo = ply:GetSequenceInfo( ply:GetSequence() )\n\tseqinfo.player = ply\n\t\n\trender.DrawWireframeBox( ply:GetPos(), ply:GetAngles(), seqinfo.bbmin, seqinfo.bbmax, color_white, true )\n\t\nend\n\nfunction GM:HUDPaint()\n\n\tlocal seqinfo, textpos = nil, nil\n\n\tfor p, ply in pairs(player.GetAll()) do\n\t\n\t\tseqinfo = ply:GetSequenceInfo(ply:GetSequence())\n\t\ttextpos = ( ply:GetPos() + Vector( 0, 0, seqinfo.bbmax.z + 10 ) ):ToScreen()\n\t\n\t\tif ( textpos.visible ) then\n\t\t\tdraw.SimpleText( seqinfo.label, \"GModNotify\", textpos.x, textpos.y, color_white, TEXT_ALIGN_CENTER )\n\t\t\tdraw.SimpleText( seqinfo.activity..\": \"..seqinfo.activityname, \"GModNotify\", textpos.x, textpos.y+20, color_white, TEXT_ALIGN_CENTER )\n\t\tend\n\t\n\tend\n\nend","description":"Draw each player's current sequence bounding box with sequence name, activity number, and activity name above their head."}],"isConstructor":false,"name":"GetSequenceInfo","realm":"shared","returns":[{"description":"Table of information about the entity's sequence.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns a list of all sequences ( animations ) the model has.","examples":[{"code":"PrintTable( Entity(1):GetSequenceList() )","description":"Example showing table structure. Prints a list of player model sequences."}],"isConstructor":false,"name":"GetSequenceList","realm":"shared","returns":[{"description":"The list of all sequences ( animations ) the model has. The indices start with 0!","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The sequence index.","isOptional":false,"isVarArg":false,"name":"sequenceId","type":"number"}],"description":"Returns an entity's sequence move distance (the change in position over the course of the entire sequence).","examples":[{"code":"local ply, seq, move_dist, seq_dur, ground_speed = nil, nil, nil, nil, nil\n\nfunction GM:Think()\n\n\t-- Player 1\n\tply = Entity(1)\n\t\n\t-- Current sequence\n\tseq = ply:GetSequence()\n\t\n\t-- The move distance\n\tmove_dist = ply:GetSequenceMoveDist(seq)\n\t\n\tif(move_dist == 0) then return end\t-- If it doesn't move, don't bother\n\t\n\t-- The sequence duration\n\tseq_dur = ply:SequenceDuration(seq)\n\t\n\t-- Actual sequence ground speed\n\tground_speed = ply:GetSequenceGroundSpeed(seq)\n\t\n\t-- Compare the calculated value to the actual value\n\tprint(tostring(ground_speed-(move_dist/seq_dur)))\n\nend","description":"Experiment which demonstrates that dividing the sequence move distance by {{ClassFunction|Entity|SequenceDuration}} results in a value extremely close to {{ClassFunction|Entity|GetSequenceGroundSpeed}}."}],"isConstructor":false,"name":"GetSequenceMoveDist","realm":"server","returns":[{"description":"The move distance of the sequence.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The sequence index. See {{ClassFunction|Entity|GetSequenceName}}.","isOptional":false,"isVarArg":false,"name":"sequenceId","type":"number"},{"default":"","description":"The sequence start cycle. 0 is the start of the animation, 1 is the end.","isOptional":false,"isVarArg":false,"name":"startCycle","type":"number"},{"default":"","description":"The sequence end cycle. 0 is the start of the animation, 1 is the end. Values like 2, etc are allowed.","isOptional":false,"isVarArg":false,"name":"endCyclnde","type":"number"}],"description":"Returns the delta movement and angles of a sequence of the entity's model.","examples":[],"isConstructor":false,"name":"GetSequenceMovement","realm":"shared","returns":[{"description":"Whether the operation was successful","type":"boolean"},{"description":"The delta vector of the animation, how much the model's origin point moved.","type":"Vector"},{"description":"The delta angle of the animation.","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The sequence index. See {{ClassFunction|Entity|LookupSequence}}.","isOptional":false,"isVarArg":false,"name":"seq","type":"number"}],"description":"Returns the change in heading direction in between the start and the end of the sequence.","examples":[],"isConstructor":false,"name":"GetSequenceMoveYaw","realm":"server","returns":[{"description":"The yaw delta. Returns 99999 for no movement.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The index of the sequence to look up.","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"Return the name of the sequence for the index provided.\nRefer to {{ClassFunction|Entity|GetSequence}} to find the current active sequence on this entity.","examples":[],"isConstructor":false,"name":"GetSequenceName","realm":"shared","returns":[{"description":"Name of the sequence.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Checks if the entity plays a sound when picked up by a player.\n\n{{Bug|Pull=1488|This will return nil if {{ClassFunction|Entity|SetShouldPlayPickupSound}} has not been called.}}","examples":[],"isConstructor":false,"name":"GetShouldPlayPickupSound","realm":"shared","returns":[{"description":"True if it plays the pickup sound, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if entity should create a server ragdoll on death or a client one.","examples":[],"isConstructor":false,"name":"GetShouldServerRagdoll","realm":"shared","returns":[{"description":"Returns true if ragdoll will be created on server, false if on client","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the skin index of the current skin.","examples":[],"isConstructor":false,"name":"GetSkin","realm":"shared","returns":[{"description":"skinIndex","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns solid type of an entity.","examples":[],"isConstructor":false,"name":"GetSolid","realm":"shared","returns":[{"description":"The solid type. See the {{Enum|SOLID}}.","type":"SOLID"}]},{"accessModifier":"public","arguments":[],"description":"Returns solid flag(s) of an entity.","examples":[],"isConstructor":false,"name":"GetSolidFlags","realm":"shared","returns":[{"description":"The flag(s) of the entity, see {{Enum|FSOLID}}.","type":"FSOLID"}]},{"accessModifier":"public","arguments":[],"description":"Returns if we should show a spawn effect on this entity.","examples":[{"code":"function GM:NetworkEntityCreated( ent )\n\n\t--\n\t-- If the entity wants to use a spawn effect\n\t-- then create a propspawn effect if the entity was\n\t-- created within the last second (this function gets called\n\t-- on every entity when joining a server)\n\t--\n\n\tif ( ent:GetSpawnEffect() && ent:GetCreationTime() > (CurTime() - 1.0) ) then\n\t\n\t\tlocal ed = EffectData()\n\t\t\ted:SetEntity( ent )\n\t\tutil.Effect( \"propspawn\", ed, true, true )\n\n\tend\n\nend","description":"Taken from sandbox's cl_init.lua"}],"isConstructor":false,"name":"GetSpawnEffect","realm":"shared","returns":[{"description":"The flag to allow or disallow the spawn effect.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the bitwise spawn flags used by the entity.","examples":[{"code":"local sf = ent:GetSpawnFlags()\n\nif( bit.band( sf, SF_PHYSPROP_PREVENT_PICKUP ) > 0 ) then\n\tprint( \"This prop cannot be picked up.\" )\nend","description":"An alternative to {{ClassFunction|Entity|HasSpawnFlags}}"}],"isConstructor":false,"name":"GetSpawnFlags","realm":"shared","returns":[{"description":"The spawn flags of the entity","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The index of the sub material. Acceptable values are from 0 to 31.","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"Returns the material override for the given index. \n\nReturns \"\" if no material override exists. Use {{ClassFunction|Entity|GetMaterials}} to list it's default materials.\n\n{{Bug|Issue=3362|The server's value takes priority on the client.}}","examples":[],"isConstructor":false,"name":"GetSubMaterial","realm":"shared","returns":[{"description":"The material that overrides this index, if any.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns a list of models included into the entity's model in the .qc file.","examples":[{"code":"PrintTable(Entity(1):GetSubModels() )","description":"Example structure of the  table. Prints into console sub models of a player model."}],"isConstructor":false,"name":"GetSubModels","realm":"shared","returns":[{"description":"The list of models included into the entity's model in the .qc file.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the table that contains all values saved within the entity.","examples":[],"isConstructor":false,"name":"GetTable","realm":"shared","returns":[{"description":"entTable","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the last trace used in the collision callbacks such as {{HookFunction|ENTITY|StartTouch}}, {{HookFunction|ENTITY|Touch}} and {{HookFunction|ENTITY|EndTouch}}.\n\n{{Note|This returns the last collision trace used, regardless of the entity that caused it. As such, it's only reliable when used in the hooks mentioned above}}","examples":[{"code":"function ENT:Touch( otherEntity )\n\tlocal tr = self:GetTouchTrace()\n\tlocal hitPos = tr.HitPos\n\n\tlocal effectdata = EffectData()\n\teffectdata:SetOrigin( hitPos )\n\tutil.Effect( \"Explosion\", effectdata )\n\nend","description":"Dispatches an explosion at the point of impact with another entity."}],"isConstructor":false,"name":"GetTouchTrace","realm":"shared","returns":[{"description":"The {{Struct|TraceResult}}","type":"TraceResult"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the TransmitWithParent flag is set or not.","examples":[],"isConstructor":false,"name":"GetTransmitWithParent","realm":"shared","returns":[{"description":"Is the TransmitWithParent flag is set or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the entity is unfreezable, meaning it can't be frozen with the physgun. By default props are freezable, so this function will typically return false.\n\n{{Bug|Pull=1488|This will return nil if {{ClassFunction|Entity|SetUnFreezable}} has not been called.}}","examples":[],"isConstructor":false,"name":"GetUnFreezable","realm":"server","returns":[{"description":"True if the entity is unfreezable, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the upward vector of the entity, as a normalized direction vector","examples":[],"isConstructor":false,"name":"GetUp","realm":"shared","returns":[{"description":"upDir","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Key of the value to retrieve","isOptional":false,"isVarArg":false,"name":"key","type":"any"},{"default":"nil","description":"A default value to fallback to if we couldn't retrieve the value from entity","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"any"}],"description":"Retrieves a value from entity's {{ClassFunction|Entity|GetTable}}. Set by {{ClassFunction|Entity|SetVar}}.","examples":[{"code":"print( Entity( 1 ):GetVar( \"Test\" ) )\n\nprint( Entity( 1 ).Test )","description":"The 2 lines of code are functionally identical."}],"isConstructor":false,"name":"GetVar","realm":"shared","returns":[{"description":"Retrieved value","type":"any"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity's velocity.\n\n{{Note|Actually binds to CBaseEntity::GetAbsVelocity() on the server and C_BaseEntity::EstimateAbsVelocity() on the client. This returns the total velocity of the entity and is equal to local velocity + base velocity.}}\n\n{{Bug|Issue=774|This can become out-of-sync on the client if the server has been up for a long time.}}","examples":[],"isConstructor":false,"name":"GetVelocity","realm":"shared","returns":[{"description":"The velocity of the entity.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}Returns ID of workshop addon that the entity is from.\n\n{{Warning|The function '''currently''' does nothing and always returns nil}}","examples":[],"isConstructor":false,"name":"GetWorkshopID","realm":"server","returns":[{"description":"The workshop ID","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the position and angle of the entity as a 3x4 matrix ({{Type|VMatrix}} is 4x4 so the fourth row goes unused). The first three columns store the angle as a [https://en.wikipedia.org/wiki/Rotation_matrix rotation matrix], and the fourth column stores the position vector.\n\n{{Bug|Issue=2764|This returns incorrect results for the angular component (columns 1-3) for the local player clientside.}}\n\n{{Bug|Issue=3106|This will use the local player's {{GlobalFunction|EyeAngles}} in [http://wiki.garrysmod.com/page/Category:3D_Rendering_Hooks rendering hooks].}}\n\n{{Bug|Issue=3107|Columns 1-3 will be all 0 (angular component) in [http://wiki.garrysmod.com/page/Category:3D_Rendering_Hooks rendering hooks] while paused in single-player.}}","examples":[],"isConstructor":false,"name":"GetWorldTransformMatrix","realm":"shared","returns":[{"description":"The position and angle matrix.","type":"VMatrix"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The force to apply to the created gibs","isOptional":false,"isVarArg":false,"name":"force","type":"Vector"}],"description":"Causes the entity to break into its current models gibs, if it has any.\n\nYou must call {{ClassFunction|Entity|PrecacheGibs}} on the entity before using this function, or it will not create any gibs.\n\nIf called on server, the gibs will be spawned on the currently connected clients and will not be synchronized. Otherwise the gibs will be spawned only for the client the function is called on.\n\nNote, that this function will not remove or hide the entity it is called on.\n\nFor more expensive version of this function see {{ClassFunction|Entity|GibBreakServer}}.","examples":[],"isConstructor":false,"name":"GibBreakClient","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The force to apply to the created gibs","isOptional":false,"isVarArg":false,"name":"force","type":"Vector"}],"description":"Causes the entity to break into its current models gibs, if it has any.\n\nYou must call {{ClassFunction|Entity|PrecacheGibs}} on the entity before using this function, or it will not create any gibs.\n\nThe gibs will be spawned on the server and be synchronized with all clients.\n\nNote, that this function will not remove or hide the entity it is called on.\n\n{{Warning|Large numbers of serverside gibs will cause lag.<br/>\nYou can avoid this cost by spawning the gibs on the client using {{ClassFunction|Entity|GibBreakClient}}}}\n\n{{Note|Despite existing on client, it doesn't actually do anything on client.}}","examples":[],"isConstructor":false,"name":"GibBreakServer","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the bone manipulation functions have ever been called on given  entity.\n\nRelated functions are {{ClassFunction|Entity|ManipulateBonePosition}}, {{ClassFunction|Entity|ManipulateBoneAngles}}, {{ClassFunction|Entity|ManipulateBoneJiggle}}, and {{ClassFunction|Entity|ManipulateBoneScale}}.\n\n{{Bug|Issue=3131|This will return true if the entity's bones have ever been manipulated. Resetting the position/angles/jiggle/scaling to 0,0,0 will not affect this function.}}","examples":[],"isConstructor":false,"name":"HasBoneManipulations","realm":"shared","returns":[{"description":"True if the entity has been bone manipulated, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the the entity has had flex manipulations performed with {{ClassFunction|Entity|SetFlexWeight}} or {{ClassFunction|Entity|SetFlexScale}}.","examples":[{"code":"function FlexExample(ent)\n\n\tif(!IsValid(ent)) then return end\n\t\n\t-- Loop through all flexes\n\tfor i = 0, ent:GetFlexNum()-1 do\n\t\n\t\t-- Set each flex to number ranging from 0.0 to 2.0\n\t\tent:SetFlexWeight(i, math.random()*2)\n\t\t\n\tend\n\t\n\t-- Print whether or not we have flex manipulations\n\tprint(ent:HasFlexManipulatior())\n\nend","description":"Defines server-side function which manipulates all of an entity's flexes and prints true if the entity has flex manipulations."}],"isConstructor":false,"name":"HasFlexManipulatior","realm":"shared","returns":[{"description":"True if the entity has flex manipulations, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The spawnflag bits to check, see {{Enum|SF}}.","isOptional":false,"isVarArg":false,"name":"spawnFlags","type":"SF"}],"description":"Returns whether this entity has the specified spawnflags bits set.","examples":[{"code":"function GM:PhysgunPickup( ply, ent )\n\n\t-- Don't move physboxes if the mapper logic says no\n\tif ( ent:GetClass() == \"func_physbox\" && ent:HasSpawnFlags( SF_PHYSBOX_MOTIONDISABLED ) ) then return false end\n\n\treturn true\n\t\nend","description":"As seen in sandbox's PhysgunPickup hook."}],"isConstructor":false,"name":"HasSpawnFlags","realm":"shared","returns":[{"description":"Whether the entity has that spawnflag set or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The vector of where the attack comes from.","isOptional":false,"isVarArg":false,"name":"origin","type":"Vector"}],"description":"Returns the position of the head of this entity, NPCs use this internally to aim at their targets.\n\n{{Note|This only works on players and NPCs.}}","examples":[],"isConstructor":false,"name":"HeadTarget","realm":"server","returns":[{"description":"The head position.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the health of the entity.","examples":[{"code":"print( Entity( 1 ):Health() >= Entity( 1 ):GetMaxHealth() )","description":"Prints if the entity's health is at full or more."}],"isConstructor":false,"name":"Health","realm":"shared","returns":[{"description":"health","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"How long to keep the entity ignited. Not supplying this argument will not ignite the entity at all.","isOptional":false,"isVarArg":false,"name":"length","type":"number"},{"default":"0","description":"The radius of the ignition, will ignite everything around the entity that is in this radius.","isOptional":true,"isVarArg":false,"name":"radius","type":"number"}],"description":"Sets the entity on fire.","examples":[{"code":"for k, v in pairs(ents.FindByClass(\"prop_physics\")) do\n   v:Ignite(30)\nend","description":"Ignite all props on the map for 30 seconds."}],"isConstructor":false,"name":"Ignite","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Initializes this entity as being clientside only.\n\nOnly works on entities fully created clientside, and as such it has currently no use due to the lack of clientside {{LibraryFunction|ents|Create}}.\n\nThis function is automatically called by {{LibraryFunction|ents|CreateClientProp}} and {{GlobalFunction|ClientsideModel}}, {{GlobalFunction|ClientsideModel}} and {{GlobalFunction|ClientsideScene}}.\n\n{{Bug|Issue=3368|Calling this on a clientside entity will crash the game.}}","examples":[],"isConstructor":false,"name":"InitializeAsClientEntity","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the input to fire","isOptional":false,"isVarArg":false,"name":"input","type":"string"},{"default":"","description":"The entity that is directly responsible","isOptional":false,"isVarArg":false,"name":"activator","type":"Entity"},{"default":"","description":"The entity that is indirectly responsible (often a player)","isOptional":false,"isVarArg":false,"name":"inflictor","type":"Entity"},{"default":"nil","description":"The value to give to the input. Can be a String, Float or Integer","isOptional":true,"isVarArg":false,"name":"param","type":"any"}],"description":"Fires input to the entity with the ability to make another entity responsible. Similar to {{ClassFunction|Entity|Fire}}","examples":[],"isConstructor":false,"name":"Input","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}} Sets up Data Tables from entity to use with {{ClassFunction|Entity|NetworkVar}}.","examples":[],"isConstructor":false,"name":"InstallDataTable","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resets the entity's bone cache values in order to prepare for a model change.\n\nThis should be called after calling {{ClassFunction|Entity|SetPoseParameter}}.","examples":[],"isConstructor":false,"name":"InvalidateBoneCache","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns true if the entity has constraints attached to it","examples":[{"code":"function ENT:PhysicsUpdate( physobj )\n\n\tif ( CLIENT ) then return end\n\n\t-- Don't do anything if the player isn't holding us\n\tif ( !self:IsPlayerHolding() && !self:IsConstrained() ) then\n\t\tphysobj:SetVelocity( Vector(0,0,0) )\n\t\tphysobj:Sleep() \n\tend\nend","description":"From entities/prop_effect.lua"}],"isConstructor":false,"name":"IsConstrained","realm":"shared","returns":[{"description":"Whether the entity is constrained or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if entity is constraint or not","examples":[{"code":"print( player.GetByID(1):GetEyeTrace().Entity:IsConstraint() )","description":"Returns true if player 1 is aiming at constraint."}],"isConstructor":false,"name":"IsConstraint","realm":"server","returns":[{"description":"Is the entity a constraint or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the entity is dormant or not. Client/server entities become dormant when they leave the PVS on the server. Client side entities can decide for themselves whether to become dormant. This mainly applies to PVS.","examples":[],"isConstructor":false,"name":"IsDormant","realm":"shared","returns":[{"description":"Whether the entity is dormant or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The effect to check for, see {{Enum|EF}}.","isOptional":false,"isVarArg":false,"name":"effect","type":"EF"}],"description":"Returns whether an entity has engine effect applied or not.","examples":[],"isConstructor":false,"name":"IsEffectActive","realm":"shared","returns":[{"description":"whether an entity has the engine effect applied or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The engine flag to test, see {{Enum|EFL}}","isOptional":false,"isVarArg":false,"name":"flag","type":"EFL"}],"description":"Checks if given flag is set or not.","examples":[],"isConstructor":false,"name":"IsEFlagSet","realm":"shared","returns":[{"description":"Is set or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The engine flag(s) to test, see {{Enum|FL}}","isOptional":false,"isVarArg":false,"name":"flag","type":"FL"}],"description":"Checks if given flag(s) is set or not.","examples":[{"code":"print( Entity( 1 ):IsFlagSet( FL_ONGROUND ))","description":"Checks if the player is on the ground."}],"isConstructor":false,"name":"IsFlagSet","realm":"shared","returns":[{"description":"Is set or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the entity is inside a wall or outside of the map.\n\n{{Note|Internally this function uses {{LibraryFunction|util|IsInWorld}}, that means that this function only checks {{ClassFunction|Entity|GetPos}} of the entity. If an entity is only partially inside a wall, or has a weird GetPos offset, this function may not give reliable output.}}","examples":[],"isConstructor":false,"name":"IsInWorld","realm":"server","returns":[{"description":"Is the entity in world","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the entity is lag compensated or not.","examples":[],"isConstructor":false,"name":"IsLagCompensated","realm":"server","returns":[{"description":"Whether the entity is lag compensated or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The target to test. You can also supply an {{Type|Entity}} instead of a {{Type|Vector}}","isOptional":false,"isVarArg":false,"name":"target","type":"Entity | Vector"}],"description":"Returns true if the target is in line of sight. This will only work on CBaseCombatCharacter entities.","examples":[],"isConstructor":false,"name":"IsLineOfSightClear","realm":"shared","returns":[{"description":"Returns true if the line of sight is clear","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Checks if the entity is an NPC or not.","examples":[],"isConstructor":false,"name":"IsNPC","realm":"shared","returns":[{"description":"Whether the entity is an NPC.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the entity is on fire.","examples":[{"code":"print( Entity(1):IsOnFire() )","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"IsOnFire","realm":"shared","returns":[{"description":"Whether the entity is on fire or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the entity is on ground or not.\n\nInternally, this checks if [[Enums/FL|FL_ONGROUND]] is set on the entity.\n\nThis function is an alias of {{ClassFunction|Entity|OnGround}}.","examples":[{"code":"print( Entity( 1 ):IsOnGround() )\nprint( IsValid( Entity( 1 ):GetGroundEntity() ) ) -- This should give the exact output as the first line","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"IsOnGround","realm":"shared","returns":[{"description":"Whether the entity is on ground or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Checks if the entity is a player or not.","examples":[{"code":"print( player.GetByID( 1 ):IsPlayer() )\nprint( ents.FindByClass( \"prop_physics\" )[ 1 ]:IsPlayer() )","description":"Checks if two entities are players."}],"isConstructor":false,"name":"IsPlayer","realm":"shared","returns":[{"description":"Whether the entity is a player.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the entity is being held by a player. Either by physics gun, gravity gun or use-key (+use).\n\n{{Bug|Issue=2046|If multiple players are holding an object and one drops it, this will return false for the player still holding the object.}}","examples":[],"isConstructor":false,"name":"IsPlayerHolding","realm":"server","returns":[{"description":"IsBeingHeld","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The activity to test. See {{Enum|ACT}}.","isOptional":false,"isVarArg":false,"name":"activity","type":"ACT"}],"description":"Returns whether there's a gesture is given activity being played.\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"IsPlayingGesture","realm":"server","returns":[{"description":"Whether there's a gesture is given activity being played.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Checks if the entity is a ragdoll.","examples":[],"isConstructor":false,"name":"IsRagdoll","realm":"shared","returns":[{"description":"Is ragdoll or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Checks if the entity is a SENT or a built-in entity.","examples":[],"isConstructor":false,"name":"IsScripted","realm":"shared","returns":[{"description":"Returns true if entity is scripted ( SENT ), false if not ( A built-in engine entity )","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the entity is solid or not.\nVery useful for determining if the entity is a trigger or not.","examples":[],"isConstructor":false,"name":"IsSolid","realm":"shared","returns":[{"description":"Whether the entity is solid or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the entity is a valid entity or not.\n\nAn entity is valid if:\n* It is not a [[Global_Variables|NULL]] entity\n* It is not the worldspawn entity ({{LibraryFunction|game|GetWorld}})\n\nInstead of calling this method directly, it's a good idea to call the global {{GlobalFunction|IsValid}} instead.<br/>It will check whether the given variable contains an object (an Entity) or nothing at all for you. See examples.","examples":[{"code":"if ( entity && entity:IsValid() ) then\n\t-- Do stuff\nend\n\n-- The above can be replaced with the following for the same effect (and cleaner code)\n\nif ( IsValid( entity ) ) then\n\t-- Do stuff\nend","description":"Shows how to use the global {{GlobalFunction|IsValid}} function instead of using this method directly."},{"code":"print( LocalPlayer():IsValid() )","description":""}],"isConstructor":false,"name":"IsValid","realm":"shared","returns":[{"description":"true if the entity is valid, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The Layer ID","isOptional":false,"isVarArg":false,"name":"layerID","type":"number"}],"description":"Returns whether the given layer ID is valid and exists on this entity.\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"IsValidLayer","realm":"server","returns":[{"description":"Whether the given layer ID is valid and exists on this entity.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Checks if the entity is a vehicle or not.","examples":[],"isConstructor":false,"name":"IsVehicle","realm":"shared","returns":[{"description":"Whether the entity is a vehicle.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Checks if the entity is a weapon or not.","examples":[],"isConstructor":false,"name":"IsWeapon","realm":"shared","returns":[{"description":"Whether the entity is a weapon","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the entity is a widget or not.\n\nThis is used by the \"Edit Bones\" context menu property.","examples":[],"isConstructor":false,"name":"IsWidget","realm":"shared","returns":[{"description":"Whether the entity is a widget or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the entity is the map's Entity[0] worldspawn","examples":[{"code":"","description":""}],"isConstructor":false,"name":"IsWorld","realm":"shared","returns":[{"description":"isWorld","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The local vector","isOptional":false,"isVarArg":false,"name":"lpos","type":"Vector"}],"description":"Converts a vector local to an entity into a worldspace vector","examples":[{"code":"return ent:LocalToWorld(Vector(100,0,0))","description":"Produces a worldvector 100 units in front of the center of the entity, taking into account the entity's angle"}],"isConstructor":false,"name":"LocalToWorld","realm":"shared","returns":[{"description":"The translated to world coordinates vector","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The local angle","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"Converts a local angle (local to the entity) to a world angle.","examples":[],"isConstructor":false,"name":"LocalToWorldAngles","realm":"shared","returns":[{"description":"The world angle","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the attachment.","isOptional":false,"isVarArg":false,"name":"attachmentName","type":"string"}],"description":"Gets the attachment index of the given attachment name, returns 0 if the attachment does not exist, or -1 if the model is invalid.","examples":[],"isConstructor":false,"name":"LookupAttachment","realm":"shared","returns":[{"description":"attachmentIndex","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the bone.\n\nCommon generic bones ( for player models and some HL2 models ): \n* ValveBiped.Bip01_Head1\n* ValveBiped.Bip01_Spine\n* ValveBiped.Anim_Attachment_RH\n\nCommon hand bones (left hand equivalents also available, replace _R_ with _L_)\n* ValveBiped.Bip01_R_Hand\n* ValveBiped.Bip01_R_Forearm\n* ValveBiped.Bip01_R_Foot\n* ValveBiped.Bip01_R_Thigh\n* ValveBiped.Bip01_R_Calf\n* ValveBiped.Bip01_R_Shoulder\n* ValveBiped.Bip01_R_Elbow","isOptional":false,"isVarArg":false,"name":"boneName","type":"string"}],"description":"Gets the bone index of the given bone name, returns nothing if the bone does not exist.","examples":[],"isConstructor":false,"name":"LookupBone","realm":"shared","returns":[{"description":"Index of the given bone name","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Sequence name","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Returns sequence ID from its name.","examples":[],"isConstructor":false,"name":"LookupSequence","realm":"shared","returns":[{"description":"Sequence ID for that name. This '''will''' differ for models with same sequence names. Will be -1 whether the sequence is invalid.","type":"number"},{"description":"The sequence duration\n* 0 if the sequence is invalid","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to allow the physics shadow to move under stress.","isOptional":false,"isVarArg":false,"name":"allowPhysicsMovement","type":"boolean"},{"default":"","description":"Whether to allow the physics shadow to rotate under stress.","isOptional":false,"isVarArg":false,"name":"allowPhysicsRotation","type":"boolean"}],"description":"Turns the {{ClassFunction|Entity|GetPhysicsObject}} into a physics shadow.\nIt's used internally for the Player's and NPC's physics object, and certain HL2 entities such as the crane.\n\nA physics shadow can be used to have static entities that never move by setting both arguments to false.\n\n{{Note|Unlike {{ClassFunction|Entity|PhysicsInitShadow}}, this function doesn't remove the current physics object.}}","examples":[],"isConstructor":false,"name":"MakePhysicsObjectAShadow","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index of the bone you want to manipulate","isOptional":false,"isVarArg":false,"name":"boneID","type":"number"},{"default":"","description":"Angle to apply.\n\nThe angle is relative to the original bone angle, not relative to the world or the entity.","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"Sets custom bone angles.\n\n{{Note|The repeated use of bone manipulation in multiplayer games is highly discouraged due to the huge produced network traffic.}}","examples":[{"code":"local server_only = true -- Change the value!\n\nif server_only then\n\tif SERVER then\n\t\thook.Add( \"Think\", \"bone_manipulation_test\", function()\n\t\t\tfor _,ent in ipairs( ents.FindByModel( \"models/buggy.mdl\" ) ) do\n\t\t\t\tent:ManipulateBoneAngles( 28, Angle( 0,0,RealTime()*180 ) )\n\t\t\tend\n\t\tend )\n\telse\n\t\thook.Add( \"Think\", \"bone_manipulation_test\", function()\n\t\tend )\n\tend\nelse\n\tif SERVER then\n\t\thook.Add( \"Think\", \"bone_manipulation_test\", function()\n\t\t\tfor _,ent in ipairs( ents.FindByModel( \"models/buggy.mdl\" ) ) do\n\t\t\t\tent:SetNWFloat( \"bone_manipulation_test\", RealTime()*180 ) -- Entity:SetNW....() do not broadcast new values instantly\n\t\t\tend\n\t\tend )\n\telse\n\t\thook.Add( \"Think\", \"bone_manipulation_test\", function()\n\t\t\tfor _,ent in ipairs( ents.GetAll() ) do\n\t\t\t\tif ent:GetModel() == \"models/buggy.mdl\" then\n\t\t\t\t\tent:ManipulateBoneAngles( 28, Angle( 0,0,ent:GetNWFloat( \"bone_manipulation_test\" ) ) )\n\t\t\t\tend\n\t\t\tend\n\t\tend )\n\tend\nend","description":"This example shows the network usage impact of repeatedly using bone manipulation serverside.\n\nTo see the difference, type in client's console: '''net_graph 3'''\n\nThe rotation is not smooth when using {{ClassFunction|Entity|SetNWFloat}}() because it does not update the value on every frame."}],"isConstructor":false,"name":"ManipulateBoneAngles","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index of the bone you want to manipulate.","isOptional":false,"isVarArg":false,"name":"boneID","type":"number"},{"default":"","description":"0 = No Jiggle\n1 = Jiggle","isOptional":false,"isVarArg":false,"name":"enabled","type":"number"}],"description":"Manipulates the bone's jiggle value(s).","examples":[{"code":"for k, v in pairs(player.GetAll()) do\n\tlocal i = 0\n\n\twhile i < v:GetBoneCount() do\n\t\tv:ManipulateBoneJiggle(i, 1)\n\t\ti = i + 1\n\tend\nend","description":"Turn everyone into jelly mode"}],"isConstructor":false,"name":"ManipulateBoneJiggle","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index of the bone you want to manipulate","isOptional":false,"isVarArg":false,"name":"boneID","type":"number"},{"default":"","description":"Position vector to apply<br/><br/>\nNote that the position is relative to the original bone position, not relative to the world or the entity.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Sets custom bone offsets.","examples":[],"isConstructor":false,"name":"ManipulateBonePosition","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index of the bone you want to manipulate","isOptional":false,"isVarArg":false,"name":"boneID","type":"number"},{"default":"","description":"Scale vector to apply. Note that the scale is relative to the original bone scale, not relative to the world or the entity.\n\n{{Bug|Issue=1249|The vector will be normalised if its longer than 32 units.}}","isOptional":false,"isVarArg":false,"name":"scale","type":"Vector"}],"description":"Sets custom bone scale.\n\n{{Warning|When used serverside, this method produces a huge network consumption!}}\n\n{{Bug|Issue=3502|This does not scale procedural bones.}}","examples":[],"isConstructor":false,"name":"ManipulateBoneScale","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns entity's map creation ID. Unlike {{ClassFunction|Entity|EntIndex}} or {{ClassFunction|Entity|GetCreationID}}, it will always be the same on same map, no matter how much you clean up or restart it.\n\nTo be used in conjunction with {{LibraryFunction|ents|GetMapCreatedEntity}}.","examples":[],"isConstructor":false,"name":"MapCreationID","realm":"server","returns":[{"description":"The map creation ID or -1 if the entity is not compiled into the map.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Refreshes the shadow of the entity.","examples":[],"isConstructor":false,"name":"MarkShadowAsDirty","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Fires the muzzle flash effect of the weapon the entity is carrying. This only creates a light effect and is often called alongside {{ClassFunction|Weapon|SendWeaponAnim}}","examples":[],"isConstructor":false,"name":"MuzzleFlash","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The vector to start the intersection from.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Performs a Ray OBBox intersection from the given position to the origin of the OBBox with the entity and returns the hit position on the OBBox","examples":[],"isConstructor":false,"name":"NearestPoint","realm":"shared","returns":[{"description":"The nearest hit point of the entity's bounding box in world coordinates.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Supported choices:\n\n* \"String\"\n* \"Bool\"\n* \"Float\"\n* \"Int\" (32-bit signed integer)\n* \"Vector\"\n* \"Angle\"\n* \"Entity\"","isOptional":false,"isVarArg":false,"name":"type","type":"string"},{"default":"","description":"Each network var has to have a unique slot. The slot is per type - so you can have an int in slot 0, a bool in slot 0 and a float in slot 0 etc. but you can't have two ints in slot 0 instead you would do a int in slot 0 and another int in slot 1. <br>\nThe max slots right now are 32 - so you should pick a number between 0 and 31. An exception to this is strings which has a max slots of 4.","isOptional":false,"isVarArg":false,"name":"slot","type":"number"},{"default":"","description":"The name will affect how you access it. If you call it \"Foo\" you would add two new functions on your entity - SetFoo and GetFoo. So be careful that what you call it won't collide with any existing functions (don't call it \"Pos\" for example).","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"nil","description":"A table of extended information. \n\n'''KeyName'''\n\nIf the table contains a \"KeyName\" key the value can be set using {{ClassFunction|Entity|SetKeyValue}}. This is useful if you're making an entity that you want to be loaded in a map. The sky entity uses this.\n\n'''Edit'''\n\nThe edit key lets you mark this variable as editable. See [[Editable Entities]] for more information.","isOptional":true,"isVarArg":false,"name":"extended","type":"table"}],"description":"Creates a network variable on the entity and adds Set/Get functions for it. This function should only be called in {{HookFunction|ENTITY|SetupDataTables}}.","examples":[{"code":"function ENT:SetupDataTables()\n\n\tself:NetworkVar( \"Float\", 0, \"Amount\" )\n\tself:NetworkVar( \"Vector\", 0, \"StartPos\" )\n\tself:NetworkVar( \"Vector\", 1, \"EndPos\" )\n\nend\n\n-- Code...\n\n-- Setting values on the entity\nself:SetStartPos( Vector( 1, 0, 0 ) )\nself:SetAmount( 100 )\n\n-- Code...\n\n-- Getting values\nlocal startpos = self:GetStartPos()","description":"Setting up data tables"}],"isConstructor":false,"name":"NetworkVar","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of variable to track changes of","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The function to call when the variable changes. It is passed 4 arugments:\n* {{FuncArg|Entity|entity|Entity whos variable changed (This will be variable called \"self\" in ENT:CallBack format.)}}\n* {{FuncArg|string|name|Name of changed variable}}\n* {{FuncArg|any|old|Old/current variable value}}\n* {{FuncArg|any|new|New variable value that it was set to}}","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Creates a callback that will execute when the given network variable changes - that is, when the Set<name> function is run.\n\n{{Note|The callback is executed ''before'' the value is changed, and is called even if the new and old values are the same.}}\n\n{{Note|This function does not exist on entities in which {{ClassFunction|Entity|InstallDataTable}} has not been called. By default, this means this function only exists on SENTs (both serverside and clientside) and on players with a [[Player Classes|Player Class]] (serverside and clientside {{GlobalFunction|LocalPlayer}} only!). It is therefore safest to only use this in {{HookFunction|ENTITY|SetupDataTables}}.}}\n\n{{Warning|A clientside NetworkVarNotify will not be called when the network var is  changed serverside! This makes the function less useful. This is a bug. [https://github.com/Facepunch/garrysmod-requests/issues/324]}}","examples":[{"code":"function ENT:SetupDataTables()\n\n\tself:NetworkVar( \"Float\", 0, \"Amount\" )\n\tself:NetworkVar( \"Vector\", 1, \"StartPos\" )\n\tself:NetworkVar( \"Vector\", 2, \"EndPos\" )\n\n\tif ( SERVER ) then\n\t\tself:NetworkVarNotify( \"EndPos\", self.OnVarChanged )\n\tend\n\nend\n\nfunction ENT:OnVarChanged( name, old, new )\n\tprint( name, old, new )\nend","description":"Example usage"}],"isConstructor":false,"name":"NetworkVarNotify","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The relative to {{GlobalFunction|CurTime}} timestamp, at which the next think should occur.","isOptional":false,"isVarArg":false,"name":"timestamp","type":"number"}],"description":"In the case of a scripted entity, this will cause the next {{HookFunction|ENTITY|Think}} event to be run at the given time.\n\nDoes not work clientside! Use {{ClassFunction|Entity|SetNextClientThink}} instead.\n\n{{Bug|Issue=3269|This does not work with SWEPs.}}","examples":[{"code":"function ENT:Think()\n    print(\"Hello, World!\")\n\n    self:NextThink( CurTime() + 1 )\n    return true -- Note: You need to return true to override the default next think time\nend","description":"Prints 'Hello, World!' in console and sleeps for a second."}],"isConstructor":false,"name":"NextThink","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the center of an entity's bounding box as a local vector.","examples":[],"isConstructor":false,"name":"OBBCenter","realm":"shared","returns":[{"description":"OBBCenter","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the highest corner of an entity's bounding box as a local vector.","examples":[],"isConstructor":false,"name":"OBBMaxs","realm":"shared","returns":[{"description":"The local position of the highest corner of the entity's oriented bounding box.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the lowest corner of an entity's bounding box as a local vector.","examples":[],"isConstructor":false,"name":"OBBMins","realm":"shared","returns":[{"description":"The local position of the lowest corner of the entity's oriented bounding box.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity's capabilities as a bitfield.<br>\nIn the engine this function is mostly used to check the use type, the save/restore system and level transitions flags.\n\nEven though the function is defined shared, it is not guaranteed to return the same value across states.\n\n{{Note|The enums for this are not currently implemented in Lua, however you can access the defines [https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/shared/baseentity_shared.h#L21-L38 here].}}","examples":[],"isConstructor":false,"name":"ObjectCaps","realm":"shared","returns":[{"description":"The bitfield, a combination of the [https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/shared/baseentity_shared.h#L21-L38 FCAP_] flags.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the entity is on the ground, and false if it isn't.\n\nInternally, this checks if [[Enums/FL|FL_ONGROUND]] is set on the entity. This is only updated for players and NPCs, and thus won't inherently work for other entities.","examples":[{"code":"print( Entity( 1 ):OnGround() )\nprint( Entity( 1 ):IsFlagSet( FL_ONGROUND ) ) -- This should give exact same output as the first line","description":"Prints if Entity(1) is on the ground or not."}],"isConstructor":false,"name":"OnGround","realm":"shared","returns":[{"description":"Whether the entity is on the ground or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The damage info to test","isOptional":false,"isVarArg":false,"name":"dmg","type":"CTakeDamageInfo"}],"description":"Tests whether the damage passes the entity filter.\n\nThis will call {{HookFunction|ENTITY|PassesDamageFilter}} on scripted entities of the type \"filter\".\n\n{{Note|This function only works on entities of the type \"filter\". ( filter_* entities, including base game filter entites )}}","examples":[],"isConstructor":false,"name":"PassesDamageFilter","realm":"server","returns":[{"description":"Whether the damage info passes the entity filter.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The initiator of the test.\n\nFor example the trigger this filter entity is used in.","isOptional":false,"isVarArg":false,"name":"caller","type":"Entity"},{"default":"","description":"The entity to test against the entity filter.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Tests whether the entity passes the entity filter.\n\nThis will call {{HookFunction|ENTITY|PassesFilter}} on scripted entities of the type \"filter\".\n\n{{Note|This function only works on entities of the type \"filter\". ( filter_* entities, including base game filter entites )}}","examples":[],"isConstructor":false,"name":"PassesFilter","realm":"server","returns":[{"description":"Whether the entity info passes the entity filter.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Destroys the current physics object of an entity.","examples":[],"isConstructor":false,"name":"PhysicsDestroy","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A table consisting of {{Struct|MeshVertex}} (only the ''pos'' element is taken into account). Every 3 vertices define a triangle in the physics mesh.","isOptional":false,"isVarArg":false,"name":"vertices","type":"MeshVertex"}],"description":"Initializes the physics mesh of the entity from a triangle soup defined by a table of vertices. The resulting mesh is hollow, may contain holes, and always has a volume of 0.\n\nWhile this is very useful for static geometry such as terrain displacements, it is advised to use {{ClassFunction|Entity|PhysicsInitConvex}} or {{ClassFunction|Entity|PhysicsInitMultiConvex}} for moving solid objects instead.\n\n{{ClassFunction|Entity|EnableCustomCollisions}} needs to be called if you want players to collide with the entity correctly.","examples":[],"isConstructor":false,"name":"PhysicsFromMesh","realm":"shared","returns":[{"description":"Returns true on success, nil otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The solid type of the physics object to create, see {{Enum|SOLID}}. Should be SOLID_VPHYSICS in most cases.\n\n{{Note|Using SOLID_NONE will only delete the current physics object - it does not create a new one.}}","isOptional":false,"isVarArg":false,"name":"solidType","type":"SOLID"}],"description":"Initializes the [[Entity/GetPhysicsObject|physics object]] of the entity using its current [[Entity/GetModel|model]]. Deletes the previous physics object if it existed and the new object creation was successful.\n\nIf the entity's current model has no physics mesh associated to it, no physics object will be created and the previous object will still exist, if applicable.\n\n{{Note|When called clientside, this will not create a valid {{Type|PhysObj}} if the model hasn't been [[util/PrecacheModel|precached]] serverside.}}\n\n{{Note|If successful, this function will automatically call {{ClassFunction|Entity|SetSolid}}( solidType ) and {{ClassFunction|Entity|SetSolidFlags}}( 0 ).}}\n\n{{Bug|Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.}}","examples":[],"isConstructor":false,"name":"PhysicsInit","realm":"shared","returns":[{"description":"Returns true on success, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum position of the box. This is automatically ordered with the maxs.","isOptional":false,"isVarArg":false,"name":"mins","type":"Vector"},{"default":"","description":"The maximum position of the box. This is automatically ordered with the mins.","isOptional":false,"isVarArg":false,"name":"maxs","type":"Vector"}],"description":"Makes the physics object of the entity a AABB.\n\n{{Note|If the volume of the resulting box is 0 (the mins and maxs are the same), the mins and maxs will be changed to {{GlobalFunction|Vector}}( -1, -1, -1 ) and {{GlobalFunction|Vector}}( 1, 1, 1 ), respectively.}}\n\n{{Note|This function will automatically destroy any previous physics objects if successful and call {{ClassFunction|Entity|SetSolid}}( SOLID_BBOX ), {{ClassFunction|Entity|SetMoveType}}( MOVETYPE_VPHYSICS ), and {{ClassFunction|Entity|SetCollisionBounds}}( mins, maxs ).}}\n\n{{Bug|Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.}}","examples":[],"isConstructor":false,"name":"PhysicsInitBox","realm":"shared","returns":[{"description":"Returns true on success, nil otherwise. This fails when the game cannot create any more {{Type|PhysCollide}}s.","type":"PhysCollide"}]},{"accessModifier":"public","arguments":[{"default":"","description":"A table of eight {{Type|Vector}}s, in local coordinates, to be used in the computation of the convex mesh. Order does not matter.","isOptional":false,"isVarArg":false,"name":"points","type":"Vector[]"}],"description":"Initializes the physics mesh of the entity with a convex mesh defined by a table of points. The resulting mesh is the [[wikipedia:Convex hull|convex hull]] of all the input points. If successful, the previous physics object will be removed.\n\nThis is the standard way of creating moving physics objects with a custom convex shape. For more complex, concave shapes, see {{ClassFunction|Entity|PhysicsInitMultiConvex}}.\n\n{{Bug|Issue=3301|This will crash if given all {{GlobalFunction|Vector}}(0,0,0)s.}}\n\n{{Bug|Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.}}","examples":[{"code":"function ENT:Initialize()\n\tif ( CLIENT ) then return end -- We only want to run this code serverside\n\n\tlocal x0 = -20 -- Define the min corner of the box\n\tlocal y0 = -10\n\tlocal z0 = -5\n\n\tlocal x1 = 20 -- Define the max corner of the box\n\tlocal y1 = 10\n\tlocal z1 = 5\n\n\tself:PhysicsInitConvex( {\n\t\tVector( x0, y0, z0 ),\n\t\tVector( x0, y0, z1 ),\n\t\tVector( x0, y1, z0 ),\n\t\tVector( x0, y1, z1 ),\n\t\tVector( x1, y0, z0 ),\n\t\tVector( x1, y0, z1 ),\n\t\tVector( x1, y1, z0 ),\n\t\tVector( x1, y1, z1 )\n\t} )\n\n\t-- Set up solidity and movetype\n\tself:SetMoveType( MOVETYPE_VPHYSICS )\n\tself:SetSolid( SOLID_VPHYSICS )\n\n\t-- Enable custom collisions on the entity\n\tself:EnableCustomCollisions( true )\nend","description":"Creates a \"box\" physics mesh for the entity."}],"isConstructor":false,"name":"PhysicsInitConvex","realm":"shared","returns":[{"description":"Returns true on success, nil otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"A table consisting of tables of {{Type|Vector}}s. Each sub-table defines a set of points to be used in the computation of one convex mesh.","isOptional":false,"isVarArg":false,"name":"vertices","type":"table"}],"description":"An advanced version of {{ClassFunction|Entity|PhysicsInitConvex}} which initializes a physics object from multiple convex meshes. This should be used for physics objects with a custom shape which cannot be represented by a single convex mesh.\n\nIf successful, the previous physics object will be removed.\n\n{{Bug|Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.}}","examples":[{"code":"local min1 = Vector( -30, -10, 0 ) -- Box1 minimum corner\nlocal max1 = Vector( -10, 10, 20 ) -- Box1 maximum corner\n\nlocal min2 = Vector( 10, -5, 10 ) -- Box2 minimum corner\nlocal max2 = Vector( 30, 5, 40 ) -- Box2 maximum corner\n\nif SERVER then\n\tfunction ENT:Initialize()\n\t\tself:SetModel( \"models/props_c17/oildrum001.mdl\" )\n\n\t\t-- Initializing the multi-convex physics mesh\n\t\tself:PhysicsInitMultiConvex( {\n\t\t\t{ -- Each sub-table is a set of vertices of a convex piece, order doesn't matter\n\t\t\t\tVector( min1.x, min1.y, min1.z ), -- The first box vertices\n\t\t\t\tVector( min1.x, min1.y, max1.z ),\n\t\t\t\tVector( min1.x, max1.y, min1.z ),\n\t\t\t\tVector( min1.x, max1.y, max1.z ),\n\t\t\t\tVector( max1.x, min1.y, min1.z ),\n\t\t\t\tVector( max1.x, min1.y, max1.z ),\n\t\t\t\tVector( max1.x, max1.y, min1.z ),\n\t\t\t\tVector( max1.x, max1.y, max1.z ),\n\t\t\t},\n\t\t\t{ -- All these tables together form a concave collision mesh\n\t\t\t\tVector( min2.x, min2.y, min2.z ), -- The second box vertices\n\t\t\t\tVector( min2.x, min2.y, max2.z ),\n\t\t\t\tVector( min2.x, max2.y, min2.z ),\n\t\t\t\tVector( min2.x, max2.y, max2.z ),\n\t\t\t\tVector( max2.x, min2.y, min2.z ),\n\t\t\t\tVector( max2.x, min2.y, max2.z ),\n\t\t\t\tVector( max2.x, max2.y, min2.z ),\n\t\t\t\tVector( max2.x, max2.y, max2.z ),\n\t\t\t},\n\t\t} )\n\n\t\tself:SetSolid( SOLID_VPHYSICS ) -- Setting the solidity\n\t\tself:SetMoveType( MOVETYPE_VPHYSICS ) -- Setting the movement type\n\n\t\tself:EnableCustomCollisions( true ) -- Enabling the custom collision mesh\n\n\t\tself:PhysWake() -- Enabling the physics motion\n\tend\nelse\n\tlocal col = Color( 0, 0, 255, 255 )\n\n\t-- Drawing collision boxes on the client\n\tfunction ENT:Draw()\n\t\tself:DrawModel()\n\n\t\tlocal pos, ang = self:GetPos(), self:GetAngles()\n\n\t\trender.DrawWireframeBox( pos, ang, min1, max1, col ) -- Drawing the first collision box\n\t\trender.DrawWireframeBox( pos, ang, min2, max2, col ) -- Drawing the second collision box\n\tend\nend","description":"Creates a physics mesh for the entity which consists of two boxes."}],"isConstructor":false,"name":"PhysicsInitMultiConvex","realm":"shared","returns":[{"description":"Returns true on success, nil otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"true","description":"Whether to allow the physics shadow to move under stress.","isOptional":true,"isVarArg":false,"name":"allowPhysicsMovement","type":"boolean"},{"default":"true","description":"Whether to allow the physics shadow to rotate under stress.","isOptional":true,"isVarArg":false,"name":"allowPhysicsRotation","type":"boolean"}],"description":"Initializes the entity's physics object as a physics shadow. Removes the previous physics object if successful. This is used internally for the Player's and NPC's physics object, and certain HL2 entities such as the crane.\n\nA physics shadow can be used to have static entities that never move by setting both arguments to false.\n\n{{Bug|Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.}}","examples":[],"isConstructor":false,"name":"PhysicsInitShadow","realm":"shared","returns":[{"description":"Return true on success, nil otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The radius of the sphere.","isOptional":false,"isVarArg":false,"name":"radius","type":"number"},{"default":"","description":"Physical material from [https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt surfaceproperties.txt] or added with {{LibraryFunction|physenv|AddSurfaceData}}.","isOptional":false,"isVarArg":false,"name":"physmat","type":"string"}],"description":"Makes the physics object of the entity a sphere.\n\n{{Note|This function will automatically destroy any previous physics objects and call {{ClassFunction|Entity|SetSolid}}( SOLID_BBOX ) and {{ClassFunction|Entity|SetMoveType}}( MOVETYPE_VPHYSICS ).}}\n\n{{Bug|Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.}}","examples":[],"isConstructor":false,"name":"PhysicsInitSphere","realm":"shared","returns":[{"description":"Returns true on success, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The solid type of the physics object to create, see {{Enum|SOLID}}. Should be SOLID_VPHYSICS in most cases.","isOptional":false,"isVarArg":false,"name":"solidType","type":"SOLID"}],"description":"Initializes a static physics object of the entity using its [[Entity/GetModel|current model]]. If successful, the previous physics object is removed.\n\nThis is what used by entities such as func_breakable, prop_dynamic, item_suitcharger, prop_thumper and npc_rollermine while it is in its \"buried\" state in the Half-Life 2 Campaign.\n\nIf the entity's current model has no physics mesh associated to it, no physics object will be created.\n\n{{Note|This function will automatically call {{ClassFunction|Entity|SetSolid}}( solidType ).}}\n\n{{Bug|Clientside physics objects are broken and do not move properly in some cases. Physics objects should only created on the server or you will experience incorrect physgun beam position, prediction issues, and other unexpected behavior.}}","examples":[],"isConstructor":false,"name":"PhysicsInitStatic","realm":"shared","returns":[{"description":"Returns true on success, false otherwise. This will fail if the entity's current model has no associated physics mesh.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Wakes up the entity's physics object","examples":[{"code":"local phys = self:GetPhysicsObject()\nif (phys:IsValid()) then\n\tphys:Wake()\nend","description":"This is what the function does internally."}],"isConstructor":false,"name":"PhysWake","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Filepath to scene","isOptional":false,"isVarArg":false,"name":"scene","type":"string"},{"default":"0","description":"Delay in seconds until the scene starts playing.","isOptional":true,"isVarArg":false,"name":"delay","type":"number"}],"description":"Makes the entity play a .vcd scene.","examples":[{"code":"local ent = Entity( 1 ):GetEyeTrace().Entity\n\nif( IsValid( ent ) ) then\n\tnpc:PlayScene( \"scenes/breencast/welcome.vcd\" )\nend","description":"Makes the entity that the player 1 is looking at play the \"Welcome to City 17\" speech."}],"isConstructor":false,"name":"PlayScene","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to face.","isOptional":false,"isVarArg":false,"name":"target","type":"Entity"}],"description":"Changes an entities angles so that it faces the target entity.","examples":[],"isConstructor":false,"name":"PointAtEntity","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Precaches gibs for the entity's model.\n\nNormally this function should be ran when the entity is spawned, for example the {{HookFunction|ENTITY|Initialize}}, after {{ClassFunction|Entity|SetModel}} is called.\n\nThis is required for {{ClassFunction|Entity|GibBreakServer}} and {{ClassFunction|Entity|GibBreakClient}} to work.","examples":[],"isConstructor":false,"name":"PrecacheGibs","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Normalizes the ragdoll. This is used alongside Kinect in {{ClassFunction|Entity|SetRagdollBuildFunction}}, for more info see ragdoll_motion entity.","examples":[],"isConstructor":false,"name":"RagdollSolve","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Sets the function to build the ragdoll. This is used alongside Kinect in {{ClassFunction|Entity|SetRagdollBuildFunction}}, for more info see ragdoll_motion entity.","examples":[],"isConstructor":false,"name":"RagdollStopControlling","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Makes the physics objects follow the set bone positions. This is used alongside Kinect in {{ClassFunction|Entity|SetRagdollBuildFunction}}, for more info see ragdoll_motion entity.","examples":[],"isConstructor":false,"name":"RagdollUpdatePhysics","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Removes the entity it is used on.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"Remove","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Removes all decals from the entities surface.","examples":[{"code":"for k, v in pairs( ents.FindByClass( \"prop_physics\" )) do\n\tv:RemoveAllDecals()\nend","description":"Removes all decals from all props in world."}],"isConstructor":false,"name":"RemoveAllDecals","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Removes and stops all gestures.\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"RemoveAllGestures","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The hook name to remove. See [[Entity Callbacks]]","isOptional":false,"isVarArg":false,"name":"hook","type":"string"},{"default":"","description":"The callback id previously retrieved with the return of {{ClassFunction|Entity|AddCallback}} or {{ClassFunction|Entity|GetCallbacks}}","isOptional":false,"isVarArg":false,"name":"callbackid","type":"number"}],"description":"Removes a callback previously added with {{ClassFunction|Entity|AddCallback}}","examples":[],"isConstructor":false,"name":"RemoveCallback","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Identifier of the function within CallOnRemove","isOptional":false,"isVarArg":false,"name":"identifier","type":"string"}],"description":"Removes a function previously added via {{ClassFunction|Entity|CallOnRemove}}.","examples":[{"code":"Entity:RemoveCallOnRemove(\"StopEngineSound\")","description":"Removes the call to stop an engine's sounds when the entity is removed"}],"isConstructor":false,"name":"RemoveCallOnRemove","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The effect to remove, see {{Enum|EF}}.","isOptional":false,"isVarArg":false,"name":"effect","type":"EF"}],"description":"Removes an engine effect applied to an entity.","examples":[],"isConstructor":false,"name":"RemoveEffects","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The flag to remove, see {{Enum|EFL}}","isOptional":false,"isVarArg":false,"name":"flag","type":"EFL"}],"description":"Removes specified engine flag","examples":[],"isConstructor":false,"name":"RemoveEFlags","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The flag(s) to remove, see {{Enum|FL}}","isOptional":false,"isVarArg":false,"name":"flag","type":"FL"}],"description":"Removes specified flag(s) from the entity","examples":[],"isConstructor":false,"name":"RemoveFlags","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|PhysObj}} to remove from the motion controller.","isOptional":false,"isVarArg":false,"name":"physObj","type":"PhysObj"}],"description":"Removes a {{Type|PhysObj}}ect from the entity's motion controller so that {{HookFunction|ENTITY|PhysicsSimulate}} will no longer be called for given {{Type|PhysObj}}ect.\n\nYou must first create a motion controller with {{ClassFunction|Entity|StartMotionController}}.\n\n{{Note| Only works on a scripted {{Type|Entity}} of anim type}}","examples":[],"isConstructor":false,"name":"RemoveFromMotionController","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The activity remove. See {{Enum|ACT}}.","isOptional":false,"isVarArg":false,"name":"activity","type":"ACT"}],"description":"Removes and stops the gesture with given activity.\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"RemoveGesture","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The flag(s) to remove, see {{Enum|FSOLID}}.","isOptional":false,"isVarArg":false,"name":"flags","type":"FSOLID"}],"description":"Removes solid flag(s) from the entity.","examples":[],"isConstructor":false,"name":"RemoveSolidFlags","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The sequence to play. Also accepts strings.\n\n{{Note|If set to a string, the function will automatically call {{ClassFunction|Entity|LookupSequence}} to retrieve the sequence ID as a number.}}","isOptional":false,"isVarArg":false,"name":"sequence","type":"number | string"}],"description":"Plays an animation on the entity. This may not always work on engine entities.\n\n{{Warning|This will not reset the animation on viewmodels, use {{ClassFunction|Entity|SendViewModelMatchingSequence}} instead.}}\n\n{{Note|This will not work properly if called directly after calling {{ClassFunction|Entity|SetModel}}. Consider waiting until the next Tick.}}\n\n{{Note|Will not work on players due to the animations being reset every frame by the base gamemode animation system. See {{HookFunction|GM|CalcMainActivity}}.}}","examples":[{"code":"ENT.Base = \"base_anim\"\nENT.Spawnable = true\nENT.AutomaticFrameAdvance = true\n\nENT.PrintName = \"Animation Test\"\nENT.Category = \"My Entity Category\"\n\nfunction ENT:Initialize()\n\tif ( SERVER ) then -- Only set this stuff on the server, it is networked to clients automatically\n\t\tself:SetModel( \"models/items/ammocrate_ar2.mdl\" ) -- Set the model\n\t\tself:PhysicsInit( SOLID_VPHYSICS ) -- Initialize physics\n\t\tself:SetUseType( SIMPLE_USE ) -- Make sure ENT:Use is ran only once per use ( per press of the use button on the entity, by default the E key )\n\tend\nend\n\nfunction ENT:Think()\n\tif ( SERVER ) then -- Only set this stuff on the server\n\t\tself:NextThink( CurTime() ) -- Set the next think for the serverside hook to be the next frame/tick\n\t\treturn true -- Return true to let the game know we want to apply the self:NextThink() call\n\tend\nend\n\nif ( SERVER ) then -- This hook is only available on the server\n\tfunction ENT:Use( activator, caller ) -- If a player uses this entity, play an animation\n\t\tif ( !self.Opened ) then -- If we are not \"opened\"\n\t\t\tself:ResetSequence( \"open\" ) -- Play the open sequence\n\t\t\tself.Opened = true -- We are now opened\n\t\telse\n\t\t\tself:ResetSequence( \"close\" ) -- Play the close sequence\n\t\t\tself.Opened = false -- We are now closed\n\t\tend\n\tend\nend","description":"Minimal code needed to make sequences work as expected on custom \"anim\" type entities.\n\nIn this example, when the player uses the crate, it will open, and when they use it again, it will close."}],"isConstructor":false,"name":"ResetSequence","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Reset entity sequence info such as playback rate, ground speed, last event check, etc.","examples":[],"isConstructor":false,"name":"ResetSequenceInfo","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Makes the entity/weapon respawn.\n\nOnly usable on HL2 pickups and any weapons. Seems to be buggy with weapons.\nVery unreliable.","examples":[],"isConstructor":false,"name":"Respawn","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The activity number to send to the entity. See {{Enum|ACT}} and {{ClassFunction|Entity|GetSequenceActivity}}","isOptional":false,"isVarArg":false,"name":"activity","type":"ACT"},{"default":"true","description":"Add/start the gesture to if it has not been yet started.","isOptional":true,"isVarArg":false,"name":"addIfMissing","type":"boolean"},{"default":"true","description":"","isOptional":true,"isVarArg":false,"name":"autokill","type":"boolean"}],"description":"Restarts the entity's animation gesture. If the given gesture is already playing, it will reset it and play it from the beginning.\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites.}}","examples":[],"isConstructor":false,"name":"RestartGesture","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The activity ID, see {{Enum|ACT}}.","isOptional":false,"isVarArg":false,"name":"act","type":"ACT"}],"description":"Returns sequence ID corresponding to given activity ID.\n\nOpposite of {{ClassFunction|Entity|GetSequenceActivity}}.\n\nSimilar to {{ClassFunction|Entity|LookupSequence}}.\n\nSee also {{ClassFunction|Entity|SelectWeightedSequenceSeeded}}.","examples":[{"code":"local VModel = self.Owner:GetViewModel()\n\nif ( self:Clip1() == 0 and VModel:SelectWeightedSequence( ACT_VM_RELOAD_EMPTY ) ) then\n\n\tlocal SEQ = self:LookupSequence( ACT_VM_RELOAD_EMPTY )\n\n\tif ( SEQ == -1 ) then\n\n\t\tprint( \"reload\" )\n\n\t\tlocal EnumToSeq = VModel:SelectWeightedSequence( ACT_VM_RELOAD )\n\n\t\t--\tPlay the normal reload animation\n\t\tVModel:SendViewModelMatchingSequence( EnumToSeq )\n\n\telse\n\n\t\tprint( \"reload empty\" )\n\n\t\tlocal EnumToSeq = VModel:SelectWeightedSequence( ACT_VM_RELOAD_EMPTY )\n\n\t\t-- Play the empty reload animation\n\t\tVModel:SendViewModelMatchingSequence( EnumToSeq )\n\t\t\n\tend\n\nend","description":"Use this hook to check if the model has a certain ACT_* enumeration, and if it does, play it."}],"isConstructor":false,"name":"SelectWeightedSequence","realm":"shared","returns":[{"description":"The sequence ID","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The activity ID, see {{Enum|ACT}}.","isOptional":false,"isVarArg":false,"name":"act","type":"ACT"},{"default":"","description":"The seed to use for randomly selecting a sequence in the case the activity ID has multiple sequences bound to it. {{ClassFunction|Entity|SelectWeightedSequence}} uses the same seed as {{LibraryFunction|util|SharedRandom}} internally for this.","isOptional":false,"isVarArg":false,"name":"seed","type":"number"}],"description":"Returns the sequence ID corresponding to given activity ID, and uses the provided seed for random selection. The seed should be the same server-side and client-side if used in a predicted environment.\n\nSee {{ClassFunction|Entity|SelectWeightedSequence}} for a provided-seed version of this function.","examples":[],"isConstructor":false,"name":"SelectWeightedSequenceSeeded","realm":"shared","returns":[{"description":"The sequence ID","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The sequence ID returned by {{ClassFunction|Entity|LookupSequence}} or  {{ClassFunction|Entity|SelectWeightedSequence}}.","isOptional":false,"isVarArg":false,"name":"seq","type":"number"}],"description":"Sends sequence animation to the view model. It is recommended to use this for view model animations, instead of {{ClassFunction|Entity|ResetSequence}}.\n\nThis function is only usable on view models.\n\n{{Bug|Issue=3229|Sequences 0-6 will not be looped regardless if they're marked as a looped animation or not.}}","examples":[{"code":"local VModel = self.Owner:GetViewModel( )\nlocal EnumToSeq = VModel:SelectWeightedSequence( ACT_VM_PRIMARYATTACK )\n\nVModel:SendViewModelMatchingSequence( EnumToSeq )","description":"Converting an ACT_VM_* enumeration to a sequence usable by the function."}],"isConstructor":false,"name":"SendViewModelMatchingSequence","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"A sequence ID to return the length specific sequence of instead of the entity's main/currently playing sequence.","isOptional":true,"isVarArg":false,"name":"seqid","type":"number"}],"description":"Returns length of currently played sequence.\n\n{{Bug|Issue=2783|This will return incorrect results for weapons and viewmodels clientside in thirdperson.}}","examples":[{"code":"local ply = Entity( 1 )\nlocal seq = ply:SelectWeightedSequence( ACT_GMOD_TAUNT_CHEER )\nlocal len = ply:SequenceDuration( seq )\nprint( ply, seq, len )","description":"Example usage for the argument. Retrieve length of animation on specific gesture slot."}],"isConstructor":false,"name":"SequenceDuration","realm":"shared","returns":[{"description":"The length of the sequence","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The new velocity to set.","isOptional":false,"isVarArg":false,"name":"velocity","type":"Vector"}],"description":"Sets the entity's velocity.\n\n{{Note|Actually binds to CBaseEntity::SetLocalVelocity() which sets the entity's velocity due to movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision or other world movement.}}","examples":[{"code":"Entity( 1 ):SetAbsVelocity( Vector( 0, 0, 500 ) )","description":"Makes Entity(1) fly upwards."}],"isConstructor":false,"name":"SetAbsVelocity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new angles.","isOptional":false,"isVarArg":false,"name":"angles","type":"Angle"}],"description":"Sets the angles of the entity.\n\n{{Note|To set a player's angles, use {{ClassFunction|Player|SetEyeAngles}} instead.}}","examples":[],"isConstructor":false,"name":"SetAngles","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player animation, see {{Enum|PLAYER}}.","isOptional":false,"isVarArg":false,"name":"playerAnim","type":"PLAYER_ANIM"}],"description":"Sets a player's third-person animation. Mainly used by {{Type|Weapon}}s to start the player's weapon attack and reload animations.","examples":[],"isConstructor":false,"name":"SetAnimation","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The current animation time.","isOptional":false,"isVarArg":false,"name":"time","type":"number"}],"description":"Sets the time (relative to {{GlobalFunction|CurTime}}) of the current animation frame, which is used to determine {{ClassFunction|Entity|GetCycle}}.","examples":[{"code":"function GM:PrePlayerDraw(ply)\n\n\tply:SetAnimTime(CurTime()+1)\n\nend","description":"Sets each player's animation time to 1 second in the future, which causes their animations to freeze in place."}],"isConstructor":false,"name":"SetAnimTime","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to attach/parent to","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The attachment ID to parent to","isOptional":false,"isVarArg":false,"name":"attachment","type":"number"}],"description":"{{Deprecated|You should be using {{ClassFunction|Entity|SetParent}} instead.}}\n\nParents the sprite to an attachment on another model.\n\nWorks only on env_sprite.\n\nDespite existing on client, it doesn't actually do anything on client.","examples":[],"isConstructor":false,"name":"SetAttachment","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"An integer corresponding to {{Enum|BLOOD_COLOR}}.","isOptional":false,"isVarArg":false,"name":"bloodColor","type":"BLOOD_COLOR"}],"description":"Sets the blood color this entity uses.","examples":[],"isConstructor":false,"name":"SetBloodColor","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The id of the bodygroup you're setting. Starts from 0.","isOptional":false,"isVarArg":false,"name":"bodygroup","type":"number"},{"default":"","description":"The value you're setting the bodygroup to. Starts from 0.","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Sets an entities' bodygroup.","examples":[],"isConstructor":false,"name":"SetBodygroup","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Body groups to set. Each single-digit number in the string represents a separate bodygroup. '''This make it impossible to set any bodygroup to a value higher than 9!''' For that you need to use {{ClassFunction|Entity|SetBodygroup}}.","isOptional":false,"isVarArg":false,"name":"bodygroups","type":"string"}],"description":"Sets the bodygroups from a string. A convenience function for {{ClassFunction|Entity|SetBodygroup}}.","examples":[{"code":"Entity(1):SetBodyGroups( \"021\" )","description":"Example of the format"}],"isConstructor":false,"name":"SetBodyGroups","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of the bone controller to set the value to.\nGoes from 0 to 3.","isOptional":false,"isVarArg":false,"name":"boneControllerID","type":"number"},{"default":"","description":"The value to set on the specified bone controller.","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Sets the specified value on the bone controller with the given ID of this entity, it's used in HL1 to change the head rotation of NPCs, turret aiming and so on.\n\n{{Note|This is the precursor of pose parameters, and only works for Half Life 1: Source models supporting it.}}","examples":[],"isConstructor":false,"name":"SetBoneController","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of the bone","isOptional":false,"isVarArg":false,"name":"boneid","type":"number"},{"default":"","description":"The matrix to set.","isOptional":false,"isVarArg":false,"name":"matrix","type":"VMatrix"}],"description":"Sets the bone matrix of given bone to given matrix. See also {{ClassFunction|Entity|GetBoneMatrix}}.\n\nDoes nothing on server.","examples":[],"isConstructor":false,"name":"SetBoneMatrix","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The bone ID to manipulate","isOptional":false,"isVarArg":false,"name":"bone","type":"number"},{"default":"","description":"The position to set","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"The angles to set","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"Sets the bone position and angles.","examples":[],"isConstructor":false,"name":"SetBonePosition","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum vector of the bounds. The vector must be smaller than second argument on all axises.","isOptional":false,"isVarArg":false,"name":"mins","type":"Vector"},{"default":"","description":"The maximum vector of the bounds. The vector must be bigger than first argument on all axises.","isOptional":false,"isVarArg":false,"name":"maxs","type":"Vector"}],"description":"Sets the collision bounds for the entity, which are used for triggers ( {{ClassFunction|Entity|SetTrigger}}, {{HookFunction|ENTITY|Touch}} ), determining if rendering is necessary clientside, and collision ( If {{ClassFunction|Entity|SetSolid}} set as [[Enums/SOLID|SOLID_BBOX]] ).\n\nInput bounds are relative to {{ClassFunction|Entity|GetPos}}! \nSee also {{ClassFunction|Entity|SetCollisionBoundsWS}}.","examples":[],"isConstructor":false,"name":"SetCollisionBounds","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The first vector of the bounds.","isOptional":false,"isVarArg":false,"name":"vec1","type":"Vector"},{"default":"","description":"The second vector of the bounds.","isOptional":false,"isVarArg":false,"name":"vec2","type":"Vector"}],"description":"Sets the collision bounds for the entity, which are used for triggers ( {{ClassFunction|Entity|SetTrigger}}, {{HookFunction|ENTITY|Touch}} ), determining if rendering is necessary clientside, and collision ( If {{ClassFunction|Entity|SetSolid}} set as [[Enums/SOLID|SOLID_BBOX]] ).\n\nInput bounds are in world coordinates!\nSee also {{ClassFunction|Entity|SetCollisionBounds}}.","examples":[],"isConstructor":false,"name":"SetCollisionBoundsWS","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Collision group of the entity, see {{Enum|COLLISION_GROUP}}","isOptional":false,"isVarArg":false,"name":"group","type":"COLLISION_GROUP"}],"description":"Sets the entity's collision group.\n\n{{Bug|Issue=3656|This doesn't work on players.}}","examples":[],"isConstructor":false,"name":"SetCollisionGroup","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"Color(255, 0, 255, 255)","description":"The color to set. Uses the {{Struct|Color}}.","isOptional":true,"isVarArg":false,"name":"color","type":"Color"}],"description":"Sets the color of an entity.","examples":[{"code":"local colBlack = Color( 0, 0, 0, 255 ) -- Creates a black color\nfor key, ply in pairs(player.GetAll()) do -- Loop through all players on the server\n\tply:SetColor(colBlack) -- Sets the players color to colBlack\nend","description":"Loop through all players, make them black"},{"code":"local ent = ents.Create(\"prop_physics\")\nent:SetPos(Vector(0,0,0))\nent:SetModel(\"models/props_junk/wood_crate001a.mdl\")\nent:Spawn()\n\nent:SetColor( Color( 0, 255, 0, 230 ) ) \nent:SetRenderMode( RENDERMODE_TRANSALPHA ) -- You need to set the render mode on some entities in order for the color to change","description":"Creates a wooden crate at 0,0,0 and turns it a transparent green"}],"isConstructor":false,"name":"SetColor","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The creator","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Sets the creator of the SENT.","examples":[],"isConstructor":false,"name":"SetCreator","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Enable or disable the custom collision check","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Marks the entity to call {{HookFunction|GM|ShouldCollide}}.","examples":[],"isConstructor":false,"name":"SetCustomCollisionCheck","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The desired cycle value","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Sets the progress of the current animation to a specific value between 0 and 1.\n\n{{Bug|Issue=3038|This does not work with viewmodels.}}","examples":[{"code":"ent:SetCycle( .5 )","description":"Set the entity to be half way through its current sequence"}],"isConstructor":false,"name":"SetCycle","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Goes from 0 to 31.","isOptional":false,"isVarArg":false,"name":"key","type":"number"},{"default":"","description":"The angle to write on the entity's datatable.","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"{{Internal}}\nThis is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified angle on the entity's datatable.","examples":[],"isConstructor":false,"name":"SetDTAngle","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Goes from 0 to 31.","isOptional":false,"isVarArg":false,"name":"key","type":"number"},{"default":"","description":"The boolean to write on the entity's metatable.","isOptional":false,"isVarArg":false,"name":"bool","type":"boolean"}],"description":"{{Internal}}\nThis is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified bool on the entity's datatable.","examples":[],"isConstructor":false,"name":"SetDTBool","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Goes from 0 to 31.","isOptional":false,"isVarArg":false,"name":"key","type":"number"},{"default":"","description":"The entity to write on this entity's datatable.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"{{Internal}}\nThis is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified entity on this entity's datatable.","examples":[],"isConstructor":false,"name":"SetDTEntity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Goes from 0 to 31.","isOptional":false,"isVarArg":false,"name":"key","type":"number"},{"default":"","description":"The float to write on the entity's datatable.","isOptional":false,"isVarArg":false,"name":"float","type":"number"}],"description":"{{Internal}}\nThis is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified float on the entity's datatable.","examples":[],"isConstructor":false,"name":"SetDTFloat","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Goes from 0 to 31.","isOptional":false,"isVarArg":false,"name":"key","type":"number"},{"default":"","description":"The integer to write on the entity's datatable. This will be cast to a 32-bit signed integer internally.","isOptional":false,"isVarArg":false,"name":"integer","type":"number"}],"description":"{{Internal}}\nThis is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified integer on the entity's datatable.","examples":[],"isConstructor":false,"name":"SetDTInt","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Goes from 0 to 3.","isOptional":false,"isVarArg":false,"name":"key","type":"number"},{"default":"","description":"The string to write on the entity's datatable, can't be more than 512 characters per string.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"{{Internal}}\nThis is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified string on the entity's datatable.\n\n{{Note|The length of these strings are capped at 512 characters.}}","examples":[],"isConstructor":false,"name":"SetDTString","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Goes from 0 to 31.","isOptional":false,"isVarArg":false,"name":"key","type":"number"},{"default":"","description":"The vector to write on the entity's datatable.","isOptional":false,"isVarArg":false,"name":"vec","type":"Vector"}],"description":"{{Internal}}\nThis is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.\n\nSets the specified vector on the entity's datatable.","examples":[],"isConstructor":false,"name":"SetDTVector","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The elasticity to set.","isOptional":false,"isVarArg":false,"name":"elasticity","type":"number"}],"description":"Sets the elasticity of this entity, used by some flying entities such as the Helicopter NPC to determine how much it should bounce around when colliding.","examples":[],"isConstructor":false,"name":"SetElasticity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the variable to modify.\nAccepted names are StartEntity and EndEntity.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The entity to apply to the specific attachment.","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"}],"description":"Allows you to set the Start or End entity attachment for the rope.","examples":[{"code":"local rope = ents.Create( \"keyframe_rope\" )\n\n-- Attachment point 1\nrope:SetEntity( \"StartEntity\", \tEntity(1) )\n-- Attachment point 2\nrope:SetEntity( \"EndEntity\", \tEntity(2) )","description":"As seen in the constraints module."}],"isConstructor":false,"name":"SetEntity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The world position the entity is looking toward.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Sets the position an entity's eyes look toward.","examples":[{"code":"for p, ply in pairs(player.GetAll()) do\n    if(ply:EyePos():Distance(self:EyePos()) <= 60) then\n        self:SetEyeTarget(ply:EyePos())\n        break\n    end\nend","description":"Makes an NPC (self) look into a nearby player's eyes."},{"code":"local lookat = Vector( 0, 0, 0 )\n\nlocal attachment = ent:GetAttachment( ent:LookupAttachment( \"eyes\" ) )\nlocal LocalPos, LocalAng = WorldToLocal( lookat, Angle( 0, 0, 0 ), attachment.Pos, attachment.Ang )\nent:SetEyeTarget( LocalPos )","description":"Makes an entity look at a vector the way the eyeposer does it"}],"isConstructor":false,"name":"SetEyeTarget","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new flex scale to set to","isOptional":false,"isVarArg":false,"name":"scale","type":"number"}],"description":"Sets the flex scale of the entity.\n\n{{Bug|Issue=1779|This does not work on {{GlobalFunction|ClientsideModel}}s or {{GlobalFunction|ClientsideRagdoll}}s.}}","examples":[],"isConstructor":false,"name":"SetFlexScale","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of the flex to modify weight of","isOptional":false,"isVarArg":false,"name":"flex","type":"number"},{"default":"","description":"The new weight to set","isOptional":false,"isVarArg":false,"name":"weight","type":"number"}],"description":"Sets the flex weight.","examples":[],"isConstructor":false,"name":"SetFlexWeight","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Friction multiplier","isOptional":false,"isVarArg":false,"name":"friction","type":"number"}],"description":"Sets how much friction an entity has when sliding against a surface. Entities default to 1 (100%) and can be higher or even negative.\n\n{{Note|Works only for MOVETYPE_STEP entities.}}\n\n{{Bug|Issue=1395|This has no effect on players.}}","examples":[],"isConstructor":false,"name":"SetFriction","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Value which specifies the gravity multiplier.","isOptional":false,"isVarArg":false,"name":"gravityMultiplier","type":"number"}],"description":"Sets the gravity multiplier of the entity.\n\n{{Bug|Issue=3648|This function is not predicted.}}","examples":[],"isConstructor":false,"name":"SetGravity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The ground entity.","isOptional":false,"isVarArg":false,"name":"ground","type":"Entity"}],"description":"Sets the ground the entity is standing on.","examples":[{"code":"-- shared.lua tick\nfunction GM:Tick()\n\t\n\tlocal trace = {}\n\tlocal world = Entity( 0 )\n\t\n\tfor p, ply in pairs( player.GetAll() ) do\n\t\n\t\ttrace = util.TraceLine( {\n\t\t\tstart = ply:GetPos() + Vector( 0, 0, 72),\n\t\t\tendpos = ply:GetPos() + Vector( 0, 0, -3 ),\n\t\t\tmask = MASK_WATER,\n\t\t\tfilter = function( ent ) return true end\n\t\t} )\n\t\t\n\t\tif( trace.Hit ) then\n\t\t\tply:SetGravity( 0.0001 )\n\t\t\tply:SetGroundEntity( world )\n\t\telse\n\t\t\tply:SetGravity( 1.0 )\n\t\tend\n\t\t\n\tend\n\t\nend","description":"Gives all players the ability to (sort of) walk on water."}],"isConstructor":false,"name":"SetGroundEntity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New health value.","isOptional":false,"isVarArg":false,"name":"newHealth","type":"number"}],"description":"Sets the health of the entity.\n\n{{Note|You may want to take {{ClassFunction|Entity|GetMaxHealth}} into account when calculating what to set health to, in case a gamemode has a different max health than 100.}}","examples":[{"code":"Entity( 1 ):SetHealth( Entity( 1 ):GetMaxHealth() )","description":"Sets the entity's health to their maximum health."},{"code":"Entity( 1 ):SetHealth( Entity( 1 ):Health() - 50 )","description":"Deducts 50 points of health from the entity."}],"isConstructor":false,"name":"SetHealth","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new hitbox set to set. Can be a name as a {{Type|string}}, or the ID as a {{Type|number}}.\n\nIf the operation failed, the function will silently fail.","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Sets the current Hitbox set for the entity.","examples":[],"isConstructor":false,"name":"SetHitboxSet","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"The state of the IK.","isOptional":true,"isVarArg":false,"name":"useIK","type":"boolean"}],"description":"Enables or disable the inverse kinematic usage of this entity.","examples":[],"isConstructor":false,"name":"SetIK","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"","description":"The value","isOptional":false,"isVarArg":false,"name":"value","type":"string"}],"description":"Sets key value for the entity.","examples":[],"isConstructor":false,"name":"SetKeyValue","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the entity should be lag compensated or not.","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"This allows the entity to be lag compensated during {{ClassFunction|Player|LagCompensation}}.\n\n{{Note|Players are lag compensated by default and there's no need to call this function for them.<br>\nIt's best to not enable lag compensation on parented entities, as the system does not handle it that well ( they will be moved back but then the entity will lag behind ).\nParented entities move back with the parent if it's lag compensated, so if you are making some kind of armor piece you shouldn't do anything.}}\n\nAs a side note for parented entities, if your entity can be shot at, keep in mind that its collision bounds need to be bigger than the bone's hitbox the entity is parented to, or hull/line traces ( such as the crowbar attack or bullets ) might not hit at all.","examples":[],"isConstructor":false,"name":"SetLagCompensated","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The Layer ID","isOptional":false,"isVarArg":false,"name":"layerID","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"blendIn","type":"number"}],"description":"{{Stub}}\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"SetLayerBlendIn","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The Layer ID","isOptional":false,"isVarArg":false,"name":"layerID","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"blendOut","type":"number"}],"description":"{{Stub}}\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"SetLayerBlendOut","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The Layer ID","isOptional":false,"isVarArg":false,"name":"layerID","type":"number"},{"default":"","description":"The new animation cycle/frame for given layer.","isOptional":false,"isVarArg":false,"name":"cycle","type":"number"}],"description":"Sets the animation cycle/frame of given layer.\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"SetLayerCycle","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The Layer ID","isOptional":false,"isVarArg":false,"name":"layerID","type":"number"},{"default":"","description":"The new duration of the layer in seconds.","isOptional":false,"isVarArg":false,"name":"duration","type":"number"}],"description":"Sets the duration of given layer. This internally overrides the {{ClassFunction|Entity|SetLayerPlaybackRate}}.\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"SetLayerDuration","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The Layer ID","isOptional":false,"isVarArg":false,"name":"layerID","type":"number"},{"default":"","description":"Whether the layer should loop or not.","isOptional":false,"isVarArg":false,"name":"loop","type":"boolean"}],"description":"Sets whether the layer should loop or not.\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"SetLayerLooping","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The Layer ID","isOptional":false,"isVarArg":false,"name":"layerID","type":"number"},{"default":"","description":"The new playback rate.","isOptional":false,"isVarArg":false,"name":"rate","type":"number"}],"description":"Sets the layer player back rate. See also {{ClassFunction|Entity|SetLayerDuration}}.\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"SetLayerPlaybackRate","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The Layer ID","isOptional":false,"isVarArg":false,"name":"layerID","type":"number"},{"default":"","description":"The new priority of the layer.","isOptional":false,"isVarArg":false,"name":"priority","type":"number"}],"description":"Sets the priority of given layer.\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"SetLayerPriority","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The Layer ID","isOptional":false,"isVarArg":false,"name":"layerID","type":"number"},{"default":"","description":"The new layer weight.","isOptional":false,"isVarArg":false,"name":"weight","type":"number"}],"description":"Sets the layer weight. This influences how strongly the animation should be overriding the normal animations of the entity.\n\n{{Note|This function only works on [[BaseAnimatingOverlay]] entites!}}","examples":[],"isConstructor":false,"name":"SetLayerWeight","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the entity should use the old bone transformation behaviour or not.","isOptional":false,"isVarArg":false,"name":"enabled","type":"boolean"}],"description":"This forces an entity to use the bone transformation behaviour from versions prior to '''2014-07-08'''.<br>\nThis behaviour affects {{ClassFunction|Entity|EnableMatrix}} and {{ClassFunction|Entity|SetModelScale}} and is incorrect, therefore this function be used exclusively as a quick fix for old scripts that rely on it.","examples":[],"isConstructor":false,"name":"SetLegacyTransform","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The local angle","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"Sets angles relative to angles of {{ClassFunction|Entity|GetParent}}","examples":[],"isConstructor":false,"name":"SetLocalAngles","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The angular velocity to set.","isOptional":false,"isVarArg":false,"name":"angVel","type":"Angle"}],"description":"Sets the entity's angular velocity (rotation speed).","examples":[],"isConstructor":false,"name":"SetLocalAngularVelocity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The local position","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Sets local position relative to the parented position. This is for use with {{ClassFunction|Entity|SetParent}} to offset position.","examples":[],"isConstructor":false,"name":"SetLocalPos","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new velocity to set.","isOptional":false,"isVarArg":false,"name":"velocity","type":"Vector"}],"description":"Sets the entity's local velocity which is their velocity due to movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision or other world movement.\n\n{{Warning|Same as {{ClassFunction|Entity|SetAbsVelocity}}, but clamps the given velocity, and is not recommended to be used because of that.}}","examples":[],"isConstructor":false,"name":"SetLocalVelocity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"-1","description":"The Level Of Detail model ID to use. -1 leaves the engine to automatically set the Level of Detail.\n\nThe Level Of Detail may range from 0 to 8, with 0 being the highest quality and 8 the lowest.","isOptional":true,"isVarArg":false,"name":"lod","type":"number"}],"description":"Sets the Level Of Detail model to use with this entity. This may not work for all models if the model doesn't include any LOD sub models.\n\nThis function works exactly like the clientside r_lod convar and takes priority over it.","examples":[],"isConstructor":false,"name":"SetLOD","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New material name. Use an empty string (<kbd>\"\"</kbd>) to reset to the default materials.","isOptional":false,"isVarArg":false,"name":"materialName","type":"string"},{"default":"false","description":"Use it if you wish to apply material other than VertexLitGeneric (such as tools/toolswhite).","isOptional":true,"isVarArg":false,"name":"forceMaterial","type":"boolean"}],"description":"Sets the rendering material override of the entity.\n\nTo set a Lua material created with {{GlobalFunction|CreateMaterial}}, just prepend a \"!\" to the material name.\n\n{{Note|If you wish to override a single material on the model, use {{ClassFunction|Entity|SetSubMaterial}} instead.}}\n\n{{Note|Please note that to apply materials to models, that material '''must''' have VertexLitGeneric shader. For that reason you cannot apply map textures onto models, map textures use a different material shader - LightmappedGeneric.}}\n\n{{Bug|Issue=3362|The server's value takes priority on the client.}}","examples":[],"isConstructor":false,"name":"SetMaterial","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"What the max health should be","isOptional":false,"isVarArg":false,"name":"maxhealth","type":"number"}],"description":"Sets the maximum health for entity. Note, that you can still set entity's health above this amount with {{ClassFunction|Entity|SetHealth}}.","examples":[],"isConstructor":false,"name":"SetMaxHealth","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New model value.","isOptional":false,"isVarArg":false,"name":"modelName","type":"string"}],"description":"Sets the model of the entity.","examples":[],"isConstructor":false,"name":"SetModel","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new model name.","isOptional":false,"isVarArg":false,"name":"modelname","type":"string"}],"description":"Alter the model name returned by {{ClassFunction|Entity|GetModel}}. Does not affect the entity's actual model.","examples":[],"isConstructor":false,"name":"SetModelName","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A float to scale the model by. 0 will not draw anything. < 0 will draw the model inverted.","isOptional":false,"isVarArg":false,"name":"scale","type":"number"},{"default":"0","description":"Transition time of the scale change, set to 0 to modify the scale right away.","isOptional":true,"isVarArg":false,"name":"deltaTime","type":"number"}],"description":"Scales the model of the entity, if the entity is a {{Type|Player}} or an {{Type|NPC}} the hitboxes will be scaled as well.\n\nFor some entities, calling {{ClassFunction|Entity|Activate}} after this will scale the collision bounds and {{Type|PhysObj}} as well; be wary as there's no optimization being done internally and highly complex collision models might crash the server.\n\nThis is the same system used in TF2 for the Mann Vs Machine robots.\n\nTo resize the entity along any axis, use {{ClassFunction|Entity|EnableMatrix}} instead.\n\nIf your old scales are wrong due to a recent update, use {{ClassFunction|Entity|SetLegacyTransform}} as a quick fix.\n\n{{Bug|Issue=2193|The hull does not scale properly with this function.}}\n\n{{Bug|Issue=3502|This does not scale procedural bones.}}","examples":[{"code":"ent:SetModelScale( ent:GetModelScale() * 1.25, 1 )","description":"From the \"Biggify\" option of right clicking an npc"}],"isConstructor":false,"name":"SetModelScale","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The move collide type, see {{Enum|MOVECOLLIDE}}","isOptional":false,"isVarArg":false,"name":"moveCollideType","type":"MOVECOLLIDE"}],"description":"Sets the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide?","examples":[],"isConstructor":false,"name":"SetMoveCollide","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to change this entity's Movement Parent to.","isOptional":false,"isVarArg":false,"name":"Parent","type":"Entity"}],"description":"Sets the Movement Parent of an entity to another entity.\n\nSimilar to {{ClassFunction|Entity|SetParent}}, except the object's coordinates are not translated automatically before parenting.","examples":[{"code":"local hat = ents.Create(\"prop_physics\")\n//Position and angles are relative to our future parent.\nhat:SetPos(Vector(0,0,10))\nhat:SetAngles(Angle(0,90,0))\n\nhat:SetMoveParent(Entity(1))\n\nhat:Spawn()","description":"Sets the Movement Entity of a new entity to Player 1."}],"isConstructor":false,"name":"SetMoveParent","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new movetype, see {{Enum|MOVETYPE}}","isOptional":false,"isVarArg":false,"name":"movetype","type":"MOVETYPE"}],"description":"Sets the entity's move type. This should be called before initializing the physics object on the entity, unless it will override SetMoveType such as {{ClassFunction|Entity|PhysicsInitBox}}.\n\nDespite existing on client, it doesn't actually do anything on client.","examples":[],"isConstructor":false,"name":"SetMoveType","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name to set for the entity.","isOptional":false,"isVarArg":false,"name":"mappingName","type":"string"}],"description":"Sets the mapping name of the entity.","examples":[],"isConstructor":false,"name":"SetName","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Networked angle.","isOptional":false,"isVarArg":false,"name":"angle","type":"Angle"}],"description":"Alters the entity's perceived serverside angle on the client.","examples":[],"isConstructor":false,"name":"SetNetworkAngles","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to associate the value with","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"Angle( 0, 0, 0 )","description":"The value to set","isOptional":true,"isVarArg":false,"name":"value","type":"Angle"}],"description":"{{Deprecated|You should use {{ClassFunction|Entity|SetNWAngle}} instead.}}\n\nSets a networked angle value at specified index on the entity.\n\nThe value then can be accessed with {{ClassFunction|Entity|GetNetworkedAngle}} both from client and server.\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on.}}","examples":[],"isConstructor":false,"name":"SetNetworkedAngle","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to associate the value with","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"false","description":"The value to set","isOptional":true,"isVarArg":false,"name":"value","type":"boolean"}],"description":"{{Deprecated|You should use {{ClassFunction|Entity|SetNWBool}} instead.}}\n\nSets a networked boolean value at specified index on the entity.\n\nThe value then can be accessed with {{ClassFunction|Entity|GetNetworkedBool}} both from client and server.\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on.}}","examples":[],"isConstructor":false,"name":"SetNetworkedBool","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to associate the value with","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"NULL","description":"The value to set","isOptional":true,"isVarArg":false,"name":"value","type":"Entity"}],"description":"{{Deprecated|You should use {{ClassFunction|Entity|SetNWEntity}} instead.}}\n\nSets a networked entity value at specified index on the entity.\n\nThe value then can be accessed with {{ClassFunction|Entity|GetNetworkedEntity}} both from client and server.\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on.}}","examples":[],"isConstructor":false,"name":"SetNetworkedEntity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to associate the value with","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"0","description":"The value to set","isOptional":true,"isVarArg":false,"name":"value","type":"number"}],"description":"{{Deprecated|You should use {{ClassFunction|Entity|SetNWFloat}} instead.}}\n\nSets a networked float value at specified index on the entity.\n\nThe value then can be accessed with {{ClassFunction|Entity|GetNetworkedFloat}} both from client and server.\n\nSeems to be the same as {{ClassFunction|Entity|GetNetworkedInt}}.\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on.}}","examples":[],"isConstructor":false,"name":"SetNetworkedFloat","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to associate the value with","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"0","description":"The value to set","isOptional":true,"isVarArg":false,"name":"value","type":"number"}],"description":"{{Deprecated|You should use {{ClassFunction|Entity|SetNWInt}} instead.}}\n\nSets a networked integer value at specified index on the entity.\n\nThe value then can be accessed with {{ClassFunction|Entity|GetNetworkedInt}} both from client and server.\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on.}}","examples":[],"isConstructor":false,"name":"SetNetworkedInt","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The index that the value is stored in.","isOptional":false,"isVarArg":false,"name":"index","type":"any"},{"default":"","description":"The value to network.","isOptional":false,"isVarArg":false,"name":"number","type":"number"}],"description":"Sets a networked number at the specified index on the entity.","examples":[{"code":"for k, v in pairs( player.GetAll() ) do\n    v:SetNetworkedInt( 'score', 3 )\nend","description":"This will set the networked number 'score' on all clients to 3."}],"isConstructor":false,"name":"SetNetworkedNumber","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to associate the value with","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"\"\"","description":"The value to set","isOptional":true,"isVarArg":false,"name":"value","type":"string"}],"description":"{{Deprecated|You should use {{ClassFunction|Entity|SetNWString}} instead.}}\n\nSets a networked string value at specified index on the entity.\n\nThe value then can be accessed with {{ClassFunction|Entity|GetNetworkedString}} both from client and server.\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on.}}","examples":[],"isConstructor":false,"name":"SetNetworkedString","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the NWVar to add callback for.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The function to be called when the NWVar changes.","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"}],"description":"{{Deprecated|You should be using {{ClassFunction|Entity|SetNWVarProxy}} instead.}}\nSets callback function to be called when given NWVar changes.\n{{Note|Currently this function only works for the NW2Var system (accessed by adding a 2 in between Networked and Var for most NetworkedVar functions), which will replace the original one at some point in the future}}","examples":[],"isConstructor":false,"name":"SetNetworkedVarProxy","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to associate the value with","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"Vector( 0, 0, 0 )","description":"The value to set","isOptional":true,"isVarArg":false,"name":"value","type":"Vector"}],"description":"{{Deprecated|You should use {{ClassFunction|Entity|SetNWVector}} instead.}}\n\nSets a networked vector value at specified index on the entity.\n\nThe value then can be accessed with {{ClassFunction|Entity|GetNetworkedVector}} both from client and server.\n\n{{Note|Running this function clientside will only set it clientside for the client it is called on.}}","examples":[],"isConstructor":false,"name":"SetNetworkedVector","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to make clients think this entity is at.","isOptional":false,"isVarArg":false,"name":"origin","type":"Vector"}],"description":"Virtually changes entity position for clients. Does the same thing as {{ClassFunction|Entity|SetPos}} when used serverside.","examples":[],"isConstructor":false,"name":"SetNetworkOrigin","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The next time, relative to {{GlobalFunction|CurTime}}, to execute the {{HookFunction|ENTITY|Think}} clientside.","isOptional":false,"isVarArg":false,"name":"nextthink","type":"number"}],"description":"Sets the next time the clientside {{HookFunction|ENTITY|Think}} is called.","examples":[],"isConstructor":false,"name":"SetNextClientThink","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"true disables drawing","isOptional":false,"isVarArg":false,"name":"shouldNotDraw","type":"boolean"}],"description":"Sets if the entity's model should render at all.\n\nIf set on the server, this entity will no longer network to clients, and for all intents and purposes cease to exist clientside.","examples":[],"isConstructor":false,"name":"SetNoDraw","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True will make the entity not solid, false will make it solid.","isOptional":false,"isVarArg":false,"name":"IsNotSolid","type":"boolean"}],"description":"Sets whether the entity is solid or not.","examples":[],"isConstructor":false,"name":"SetNotSolid","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to associate the value with","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"","description":"The value to set","isOptional":false,"isVarArg":false,"name":"value","type":"Angle"}],"description":"Sets a networked angle value on the entity.\n\nThe value can then be accessed with {{ClassFunction|Entity|GetNWAngle}} both from client and server.\n\n{{Note|Running this function clientside will only set it for the client it is called on.}}","examples":[{"code":"for k, v in pairs( player.GetAll() ) do\n    v:SetNWAngle( 'direction', Angle( -90, 0, 0 ) )\nend","description":"This will set the networked angle 'direction' on all clients that is pointing straight up."}],"isConstructor":false,"name":"SetNWAngle","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to associate the value with","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"","description":"The value to set","isOptional":false,"isVarArg":false,"name":"value","type":"boolean"}],"description":"Sets a networked boolean value on the entity.\n\nThe value can then be accessed with {{ClassFunction|Entity|GetNWBool}} both from client and server.\n\n{{Note|Running this function clientside will only set it for the client it is called on.}}","examples":[{"code":"player:SetNWBool( \"VIP\", true )\nprint( player:GetNWBool( \"VIP\" ) )","description":"Sets a networked boolean with a key of \"VIP\" and a value of true on a player."}],"isConstructor":false,"name":"SetNWBool","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to associate the value with","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"","description":"The value to set","isOptional":false,"isVarArg":false,"name":"value","type":"Entity"}],"description":"Sets a networked entity value on the entity.\n\nThe value can then be accessed with {{ClassFunction|Entity|GetNWEntity}} both from client and server.\n\n{{Note|Running this function clientside will only set it for the client it is called on.}}","examples":[{"code":"for k, v in pairs( player.GetAll() ) do\n    v:SetNWEntity( \"owner\", v )\nend","description":"This will set the networked entity 'owner' on all clients to themselves."}],"isConstructor":false,"name":"SetNWEntity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to associate the value with","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"","description":"The value to set","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Sets a networked float (number) value on the entity.\n\nThe value can then be accessed with {{ClassFunction|Entity|GetNWFloat}} both from client and server.\n\nUnlike {{ClassFunction|Entity|SetNWInt}}, floats don't have to be whole numbers.\n\n{{Note|Running this function clientside will only set it for the client it is called on.}}","examples":[{"code":"for k,v in pairs( player.GetAll() ) do\n    v:SetNWFloat( 'test', 0.5 )\nend","description":"This will set the networked float 'test' on all clients to 0.5."}],"isConstructor":false,"name":"SetNWFloat","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to associate the value with","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"","description":"The value to set","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Sets a networked integer (whole number) value on the entity.\n\nThe value can then be accessed with {{ClassFunction|Entity|GetNWInt}} both from client and server.\n\nSee {{ClassFunction|Entity|SetNWFloat}} for numbers that aren't integers.\n\n{{Note|Running this function clientside will only set it for the client it is called on.}}\n{{Bug|Issue=3374|This function will not round decimal values as it actually networks a float internally.}}","examples":[{"code":"for k, v in ipairs( player.GetAll() ) do\n    v:SetNWInt( 'money', 100 )\nend","description":"This will set the networked integer 'money' on all clients to 100."}],"isConstructor":false,"name":"SetNWInt","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to associate the value with","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"","description":"The value to set, up to 199 characters.","isOptional":false,"isVarArg":false,"name":"value","type":"string"}],"description":"Sets a networked string value on the entity.\n\nThe value can then be accessed with {{ClassFunction|Entity|GetNWString}} both from client and server.\n\n{{Note|Running this function clientside will only set it for the client it is called on.}}","examples":[{"code":"player:SetNWString( \"Nickname\", \"John\" )\nprint( player:GetNWString( \"Nickname\" ) )","description":"Sets a networked string with a key of \"Nickname\" and a value of \n\"John\" on a player."}],"isConstructor":false,"name":"SetNWString","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key of the NWVar to add callback for.","isOptional":false,"isVarArg":false,"name":"key","type":"any"},{"default":"","description":"The function to be called when the NWVar changes. It has 3 arguments:\n* {{FuncArg|Entity|ent|The entity}}\n* {{FuncArg|string|name|Name of the NWVar that has changed}}\n* {{FuncArg|any|oldval|The old value}}\n* {{FuncArg|any|newval|The new value}}","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Sets a function to be called when the NWVar changes.\n{{Note|Currently this function only works for the NW2Var system (accessed by adding a 2 in between NW and Var for most NWVar functions), which will replace the original one at some point in the future}}","examples":[{"code":"Entity( 1 ):SetNWVarProxy( \"Key\", print )\nEntity( 1 ):SetNWString( \"Key\", \"Value\" )\nEntity( 1 ):SetNWString( \"Key\", \"Table\" )","description":"Prints all changes to a NWVar called \"Key\" of Player 1."}],"isConstructor":false,"name":"SetNWVarProxy","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key to associate the value with","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"","description":"The value to set","isOptional":false,"isVarArg":false,"name":"value","type":"Vector"}],"description":"Sets a networked vector value on the entity.\n\nThe value can then be accessed with {{ClassFunction|Entity|GetNWVector}} both from client and server.\n\n{{Note|Running this function clientside will only set it for the client it is called on.}}","examples":[{"code":"for k, v in pairs( player.GetAll() ) do\n    v:SetNWVector( 'direction', Vector( 0, 0, 1 ) )\nend","description":"This will set the networked angle 'direction' on all clients to straight up."}],"isConstructor":false,"name":"SetNWVector","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"NULL","description":"The entity to be set as owner.","isOptional":true,"isVarArg":false,"name":"owner","type":"Entity"}],"description":"Sets the owner of this entity, disabling all physics interaction with it.\n\n{{Note|This function is generally used to disable physics interactions on projectiles being fired by their owner, but can also be used for normal ownership in case physics interactions are not involved at all. The Gravity gun will be able to pick up the entity even if the owner can't collide with it}}","examples":[{"code":"function SWEP:PrimaryAttack()\n\tself:SetNextPrimaryFire( CurTime() + 0.1 )\n\t\n\tif (!SERVER) then return end\n\n\tlocal Forward = self.Owner:EyeAngles():Forward()\n\n\tlocal ent = ents.Create( \"hunter_flechette\" )\n\t\n\tif ( IsValid( ent ) ) then\n\n\t\tent:SetPos( self.Owner:GetShootPos() + Forward * 32 )\n\t\tent:SetAngles( self.Owner:EyeAngles() )\n\t\tent:Spawn()\n\t\tent:SetVelocity( Forward * 2000 )\n\t\tent:SetOwner( self.Owner )\n\tend\nend","description":"Taken from Garry's Flechette gun , shoots a hunter's flechette and sets the owner of the flechette to the player using the weapon."}],"isConstructor":false,"name":"SetOwner","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"NULL","description":"The entity to parent to. Setting this to nil will clear the parent.","isOptional":true,"isVarArg":false,"name":"parent","type":"Entity"},{"default":"-1","description":"The attachment id to use when parenting, defaults to -1 or whatever the parent had set previously.<br/>\n{{Note|You must call {{ClassFunction|Entity|SetMoveType}}( MOVETYPE_NONE ) on the child for this argument to have any effect!}}","isOptional":true,"isVarArg":false,"name":"attachmentId","type":"number"}],"description":"Sets the parent of this entity, making it move with its parent.\n\n{{Note|This does not work on [[game/GetWorld|the world]].}}\n{{Warning|This can cause undefined physics behaviour when used on entities that don't support parenting. See the [https://developer.valvesoftware.com/wiki/Entity_Hierarchy_(parenting) Valve developer wiki] for more information.}}","examples":[],"isConstructor":false,"name":"SetParent","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Physics bone number to attach to. Use 0 for objects with only one physics bone. (See {{ClassFunction|Entity|GetPhysicsObjectNum}})","isOptional":false,"isVarArg":false,"name":"bone","type":"number"}],"description":"Sets the parent of an entity to another entity with the given physics bone number. Similar to {{ClassFunction|Entity|SetParent}}, except it is parented to a physbone. This function is useful mainly for ragdolls.\n\n{{Note|Despite this function being available server side, it doesn't actually do anything server side.}}","examples":[],"isConstructor":false,"name":"SetParentPhysNum","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether or not the entity should be persistent.","isOptional":false,"isVarArg":false,"name":"persist","type":"boolean"}],"description":"Sets whether or not the given entity is persistent. A persistent entity will be saved on server shutdown and loaded back when the server starts up. Additionally, by default persistent entities cannot be grabbed with the physgun and tools cannot be used on them.\n\nIn sandbox, this can be set on an entity by opening the context menu, right clicking the entity, and choosing \"Make Persistent\".\n\n{{Note|Persistence can only be enabled with the sbox_persist convar, which works as an identifier for the current set of persistent entities. An empty identifier (which is the default value) disables this feature.}}\n\n{{Note|This feature only works in Sandbox and Sandbox-derived gamemodes.}}","examples":[],"isConstructor":false,"name":"SetPersistent","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The first physics object to be constrained.","isOptional":false,"isVarArg":false,"name":"Phys1","type":"PhysObj"},{"default":"","description":"The second physics object to be constrained.","isOptional":false,"isVarArg":false,"name":"Phys2","type":"PhysObj"}],"description":"When called on a constraint entity, sets the two physics objects to be constrained.\n\nUsage is not recommended as the Constraint library provides easier ways to deal with constraints.","examples":[{"code":"Constraint = ents.Create(\"phys_lengthconstraint\")\n\tConstraint:SetPos( WPos1 )\n\tConstraint:SetKeyValue( \"attachpoint\", tostring(WPos2) )\n\tConstraint:SetKeyValue( \"minlength\", \"0.0\" )\n\tConstraint:SetKeyValue( \"length\", length + addlength )\n\tif ( forcelimit ) then Constraint:SetKeyValue( \"forcelimit\", forcelimit ) end\n\tif ( rigid ) then Constraint:SetKeyValue( \"spawnflags\", 2 ) end\n\tConstraint:SetPhysConstraintObjects( Phys1, Phys2 )\nConstraint:Spawn()\nConstraint:Activate()","description":"From constraint.lua"}],"isConstructor":false,"name":"SetPhysConstraintObjects","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player who gets the kills. Setting this to a non-player entity will not work.","isOptional":false,"isVarArg":false,"name":"ent","type":"Player"},{"default":"5","description":"Time in seconds until the entity forgets its physics attacker and prevents it from getting the kill credit.","isOptional":true,"isVarArg":false,"name":"timeLimit","type":"number"}],"description":"Sets the player who gets credit if this entity kills something with physics damage within the time limit.\n\n{{Note|This can only be called on props.}}","examples":[],"isConstructor":false,"name":"SetPhysicsAttacker","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"How fast the animation will play.","isOptional":false,"isVarArg":false,"name":"fSpeed","type":"number"}],"description":"Allows you to set how fast an entity's animation will play, with 1.0 being the default speed.","examples":[{"code":"Entity(1):GetViewModel():SetPlaybackRate(0.5)","description":"Makes Entity(1)'s viewmodel play animations 50% slower."}],"isConstructor":false,"name":"SetPlaybackRate","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to move the entity to.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Moves the entity to the specified position.\n\n{{Note|If the new position doesn't take effect right away, you can use {{ClassFunction|Entity|SetupBones}} to force it to do so. This issue is especially common when trying to render the same entity twice or more in a single frame at different positions.}}\n\n{{Warning|Entities with {{ClassFunction|Entity|GetSolid}} of SOLID_BBOX will have their angles reset!}}\n\n{{Bug|Issue=2447|This will fail inside of predicted functions called during player movement processing. This includes {{HookFunction|WEAPON|PrimaryAttack}} and {{HookFunction|WEAPON|Think}}.}}","examples":[{"code":"Entity( 1 ):SetPos( Vector( 0, 0, 0 ) )","description":"Sets the player's position to (0, 0, 0)"}],"isConstructor":false,"name":"SetPos","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the pose parameter.","isOptional":false,"isVarArg":false,"name":"poseName","type":"string"},{"default":"","description":"The value to set the pose to.","isOptional":false,"isVarArg":false,"name":"poseValue","type":"number"}],"description":"Sets the specified pose parameter to the specified value.\n\nYou should call {{ClassFunction|Entity|InvalidateBoneCache}} after calling this function.\n\n{{Note|Avoid calling this in draw hooks, especially when animating things, as it might cause visual artifacts.}}","examples":[{"code":"local function CopyPoseParams(pEntityFrom, pEntityTo)\n\tif (SERVER) then\n\t\tfor i = 0, pEntityFrom:GetNumPoseParameters() - 1 do\n\t\t\tlocal sPose = pEntityFrom:GetPoseParameterName(i)\n\t\t\tpEntityTo:SetPoseParameter(sPose, pEntityFrom:GetPoseParameter(sPose))\n\t\tend\n\telse\n\t\tfor i = 0, pEntityFrom:GetNumPoseParameters() - 1 do\n\t\t\tlocal flMin, flMax = pEntityFrom:GetPoseParameterRange(i)\n\t\t\tlocal sPose = pEntityFrom:GetPoseParameterName(i)\n\t\t\tpEntityTo:SetPoseParameter(sPose, math.Remap(pEntityFrom:GetPoseParameter(sPose), 0, 1, flMin, flMax))\n\t\tend\n\tend\nend","description":"Copies pose parameters from one entity to another. Since {{LibraryFunction|Entity|GetPoseParameter}} returns pose parameter values 0-1 on the client, they have to be remapped to the range returned by {{LibraryFunction|Entity|GetPoseParameterRange}} before being set on the target entity."}],"isConstructor":false,"name":"SetPoseParameter","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"whether to make this entity predictable or not.","isOptional":false,"isVarArg":false,"name":"setPredictable","type":"boolean"}],"description":"Sets whether an entity should be predictable or not.\nWhen an entity is set as predictable, its DT vars can be changed during predicted hooks. This is useful for entities which can be controlled by player input.\n\nAny datatable value that mismatches from the server will be overridden and a prediction error will be spewed.\n\nWeapons are predictable by default, and the drive system uses this function to make the controlled prop predictable as well.\n\nVisit [[:Category:Predicted_Hooks|Predicted Hooks]] for a list of all predicted hooks, and the [[Prediction]] page.\nFor further technical information on the subject, visit [https://developer.valvesoftware.com/wiki/Prediction valve's wiki].\n\n{{Note|This function resets the datatable variables everytime it's called, it should ideally be called when a player starts using the entity and when he stops}}\n{{Note|Entities set as predictable with this function will be unmarked when the user lags and receives a full packet update, to handle such case visit {{HookFunction|GM|NotifyShouldTransmit}}}}","examples":[],"isConstructor":false,"name":"SetPredictable","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player to stop networking the entity to.","isOptional":false,"isVarArg":false,"name":"player","type":"Player"},{"default":"","description":"true to stop the entity from networking, false to make it network again.","isOptional":false,"isVarArg":false,"name":"stopTransmitting","type":"boolean"}],"description":"Prevents the server from sending any further information about the entity to a player.\n\n{{Bug|Issue=1736|This does not work for nextbots.}}\n\n{{Validate}}\n\nUNCONFIRMED: When using this function, {{ClassFunction|Entity|SetFlexScale}} will conflict with this function. Instead, consider using {{ClassFunction|Entity|SetFlexScale}} on the client.","examples":[],"isConstructor":false,"name":"SetPreventTransmit","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Bone ID","isOptional":false,"isVarArg":false,"name":"boneid","type":"number"},{"default":"","description":"Angle to set","isOptional":false,"isVarArg":false,"name":"pos","type":"Angle"}],"description":"Sets the bone angles. This is used alongside Kinect in {{ClassFunction|Entity|SetRagdollBuildFunction}}, for more info see ragdoll_motion entity.","examples":[],"isConstructor":false,"name":"SetRagdollAng","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The build function. This function has one argument:\n* {{FuncArg|Entity|ragdoll|The ragdoll to build}}","isOptional":false,"isVarArg":false,"name":"func","type":"Function"}],"description":"Sets the function to build the ragdoll. This is used alongside Kinect, for more info see ragdoll_motion entity.","examples":[],"isConstructor":false,"name":"SetRagdollBuildFunction","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Bone ID","isOptional":false,"isVarArg":false,"name":"boneid","type":"number"},{"default":"","description":"Position to set","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Sets the bone position. This is used alongside Kinect in {{ClassFunction|Entity|SetRagdollBuildFunction}}, for more info see ragdoll_motion entity.","examples":[],"isConstructor":false,"name":"SetRagdollPos","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new render angles to be set to.","isOptional":false,"isVarArg":false,"name":"newAngles","type":"Angle"}],"description":"Sets the render angles of the Entity.","examples":[],"isConstructor":false,"name":"SetRenderAngles","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum corner of the bounds, relative to origin of the entity.","isOptional":false,"isVarArg":false,"name":"mins","type":"Vector"},{"default":"","description":"The maximum corner of the bounds, relative to origin of the entity.","isOptional":false,"isVarArg":false,"name":"maxs","type":"Vector"},{"default":"Vector( 0, 0, 0 )","description":"If defined, adds this vector to maxs and subtracts this vector from mins.","isOptional":true,"isVarArg":false,"name":"add","type":"Vector"}],"description":"Sets the render bounds for the entity. For world space coordinates see {{ClassFunction|Entity|SetRenderBoundsWS}}.","examples":[],"isConstructor":false,"name":"SetRenderBounds","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum corner of the bounds, relative to origin of the world/map.","isOptional":false,"isVarArg":false,"name":"mins","type":"Vector"},{"default":"","description":"The maximum corner of the bounds, relative to origin of the world/map.","isOptional":false,"isVarArg":false,"name":"maxs","type":"Vector"},{"default":"Vector( 0, 0, 0 )","description":"If defined, adds this vector to maxs and subtracts this vector from mins.","isOptional":true,"isVarArg":false,"name":"add","type":"Vector"}],"description":"Sets the render bounds for the entity in world space coordinates. For relative coordinates see {{ClassFunction|Entity|SetRenderBounds}}.","examples":[],"isConstructor":false,"name":"SetRenderBoundsWS","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The normal of the plane. Anything behind the normal will be clipped.","isOptional":false,"isVarArg":false,"name":"planeNormal","type":"Vector"},{"default":"","description":"The position of the plane.","isOptional":false,"isVarArg":false,"name":"planePosition","type":"number"}],"description":"Used to specify a plane, past which an object will be visually clipped.","examples":[{"code":"local ent = ents.Create( \"prop_physics\" )\nent:SetModel( \"models/props_borealis/bluebarrel001.mdl\" )\nent:SetPos( Vector(0, 0, 0) )\nent:Spawn()\nent:GetPhysicsObject():EnableMotion(false)\n\nlocal normal = ent:GetUp()\nlocal position = normal:Dot( ent:GetPos() )\nent:SetRenderClipPlaneEnabled( true )\nent:SetRenderClipPlane( normal, position )","description":"Creates a blue barrel at Vector(0, 0, 0), freezes it, and will visually clip the barrel's lower half."}],"isConstructor":false,"name":"SetRenderClipPlane","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Enable or disable clipping planes","isOptional":false,"isVarArg":false,"name":"enabled","type":"boolean"}],"description":"Enables the use of clipping planes to \"cut\" objects.","examples":[],"isConstructor":false,"name":"SetRenderClipPlaneEnabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new render FX to set, see {{Enum|kRenderFx}}","isOptional":false,"isVarArg":false,"name":"renderFX","type":"kRenderFx"}],"description":"Sets entity's render FX.","examples":[],"isConstructor":false,"name":"SetRenderFX","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New render mode to set, see {{Enum|RENDERMODE}}.","isOptional":false,"isVarArg":false,"name":"renderMode","type":"RENDERMODE"}],"description":"Sets the render mode of the entity.","examples":[],"isConstructor":false,"name":"SetRenderMode","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new origin in world coordinates where the Entity's model will now be rendered from.","isOptional":false,"isVarArg":false,"name":"newOrigin","type":"Vector"}],"description":"Set the origin in which the Entity will be drawn from.","examples":[],"isConstructor":false,"name":"SetRenderOrigin","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the save value to set","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Value to set","isOptional":false,"isVarArg":false,"name":"value","type":"any"}],"description":"Sets a save value for an entity.","examples":[{"code":"for k, v in pairs( ents.FindByClass( \"npc_rollermine\" ) ) do\n    v:SetSaveValue( \"m_bHackedByAlyx\", true )\nend","description":"Make all rollermines currently on the map friendly"}],"isConstructor":false,"name":"SetSaveValue","realm":"shared","returns":[{"description":"Key successfully set","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The sequence to play. Also accepts strings.\n\n{{Note|If set to a string, the function will automatically call {{ClassFunction|Entity|LookupSequence}} to retrieve the sequence ID as a number.}}","isOptional":false,"isVarArg":false,"name":"sequenceId","type":"number | string"}],"description":"Sets the entity's model sequence.\n\nIf the specified sequence is already active, the animation will not be restarted. See {{ClassFunction|Entity|ResetSequence}} for a function that restarts the animation even if it is already playing.\n\nIn some cases you want to run {{ClassFunction|Entity|ResetSequenceInfo}} to make this function run.\n\n{{Note|This will not work properly if called directly after calling {{ClassFunction|Entity|SetModel}}. Consider waiting until the next Tick.}}\n\n{{Note|Will not work on players due to the animations being reset every frame by the base gamemode animation system in {{HookFunction|GM|CalcMainActivity}}. For Players, use in {{HookFunction|GM|UpdateAnimation}} instead. }}","examples":[{"code":"self:SetSequence( \"idle\" )","description":"Set the entity to play the \"idle\" sequence."},{"code":"self:SetSequence( 0 )","description":"Set the entity to play the first sequence defined on the model (usually idle)."}],"isConstructor":false,"name":"SetSequence","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"True to play the pickup sound, false otherwise.","isOptional":true,"isVarArg":false,"name":"playsound","type":"boolean"}],"description":"Sets whether or not the entity should make a physics contact sound when it's been picked up by a player.","examples":[{"code":"function GM:OnEntityCreated(ent)\n    ent:SetShouldPlayPickupSound(true)\nend","description":"Enable pickup sound on all entities."}],"isConstructor":false,"name":"SetShouldPlayPickupSound","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Set true if ragdoll should be created on server, false if on client","isOptional":false,"isVarArg":false,"name":"serverragdoll","type":"boolean"}],"description":"Sets if entity should create a server ragdoll on death or a client one.","examples":[],"isConstructor":false,"name":"SetShouldServerRagdoll","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index of the skin to use.","isOptional":false,"isVarArg":false,"name":"skinIndex","type":"number"}],"description":"Sets the skin of the entity.","examples":[],"isConstructor":false,"name":"SetSkin","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The solid type. See the {{Enum|SOLID}}.","isOptional":false,"isVarArg":false,"name":"solid_type","type":"SOLID"}],"description":"Sets the solidity of an entity.","examples":[],"isConstructor":false,"name":"SetSolid","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The flag(s) to set, see {{Enum|FSOLID}}.","isOptional":false,"isVarArg":false,"name":"flags","type":"FSOLID"}],"description":"Sets solid flag(s) for the entity.\n\nThis overrides any other flags the entity might have had. See {{ClassFunction|Entity|AddSolidFlags}} for adding flags.","examples":[],"isConstructor":false,"name":"SetSolidFlags","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Sets if we should show a spawn effect.","isOptional":false,"isVarArg":false,"name":"spawnEffect","type":"boolean"}],"description":"Sets whether the entity should use a spawn effect. See also: {{ClassFunction|Entity|GetSpawnEffect}}\n\n{{Note|This function doesn't actually give the entity a spawn effect, but it's merely a networked bool.}}","examples":[{"code":"local function MakeRagdoll( Player, Pos, Ang, Model, PhysicsObjects, Data )\n\n\tlocal Ent = ents.Create( \"prop_ragdoll\" )\n\tduplicator.DoGeneric( Ent, Data )\n\tEnt:Spawn()\n\t\n\tduplicator.DoGenericPhysics( Ent, Player, Data )\n\tEnt:Activate()\n\n\tEnt:SetSpawnEffect( true );\n\treturn Ent\t\nend","description":"Simplified code taken from sandbox's commands.lua"}],"isConstructor":false,"name":"SetSpawnEffect","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"Index of the material to override, acceptable values are from 0 to 31.\n\nIndexes are by {{ClassFunction|Entity|GetMaterials}}, but you have to subtract 1 from them.\n\nIf called with no arguments, all sub materials will be reset.","isOptional":true,"isVarArg":false,"name":"index","type":"number"},{"default":"nil","description":"The material to override the default one with. Set to nil to revert to default material.","isOptional":true,"isVarArg":false,"name":"material","type":"string"}],"description":"Overrides a single material on the model of this entity.\n\nTo set a Lua material created with {{GlobalFunction|CreateMaterial}}, just prepend a \"!\" to the material name.\n\n{{Bug|Issue=3362|The server's value takes priority on the client.}}","examples":[],"isConstructor":false,"name":"SetSubMaterial","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Table for the entity to use","isOptional":false,"isVarArg":false,"name":"tab","type":"table"}],"description":"Changes the table that can be accessed by indexing an entity. Each entity starts with its own table by default.","examples":[],"isConstructor":false,"name":"SetTable","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Will set the TransmitWithParent flag on or off","isOptional":false,"isVarArg":false,"name":"onoff","type":"boolean"}],"description":"When this flag is set the entity will only transmit to the player when its parent is transmitted. This is useful for things like viewmodel attachments since without this flag they will transmit to everyone (and cause the viewmodels to transmit to everyone too).\n\n{{Note|In the case of scripted entities, this will override {{HookFunction|ENTITY|UpdateTransmitState}}}}","examples":[],"isConstructor":false,"name":"SetTransmitWithParent","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Make the entity trigger or not","isOptional":false,"isVarArg":false,"name":"maketrigger","type":"boolean"}],"description":"Marks the entity as a trigger, so it will generate {{HookFunction|ENTITY|StartTouch}}, {{HookFunction|ENTITY|Touch}} and {{HookFunction|ENTITY|EndTouch}} callbacks.\n\nInternally this is stored as {{Enum|FSOLID}} flag.","examples":[],"isConstructor":false,"name":"SetTrigger","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"True to make the entity unfreezable, false otherwise.","isOptional":true,"isVarArg":false,"name":"freezable","type":"boolean"}],"description":"Sets whether an entity can be unfrozen, meaning that it cannot be unfrozen using the physgun.","examples":[],"isConstructor":false,"name":"SetUnFreezable","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Forces the entity to reconfigure its bones. You might need to call this after changing your model's scales or when manually drawing the entity multiple times at different positions.\n\n{{Note|This calls the BuildBonePositions callback added via {{ClassFunction|Entity|AddCallback}}, so avoid calling this function inside it to prevent an infinite loop.}}","examples":[],"isConstructor":false,"name":"SetupBones","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The file prefix of the phoneme mappings (relative to \"garrysmod/expressions/\").","isOptional":false,"isVarArg":false,"name":"fileRoot","type":"string"}],"description":"Initializes the class names of an entity's phoneme mappings (mouth movement data). This is called by default with argument \"phonemes\" when a flex-based entity (such as an {{Type|NPC}}) is created.","examples":[{"code":"-- Turn phoneme mappings on or off\nfunction EnablePhonemes(ent, on)\n\n\tif(!IsValid(ent)) then return end\n\t\n\tif(!on) then\n\t\t-- Disable mouth movement\n\t\tent:SetupPhonemeMappings(\"\")\n\telse\n\t\t-- Enable mouth movement\n\t\tent:SetupPhonemeMappings(\"phonemes\")\n\tend\n\nend","description":"Defines a function that can enable or disable phoneme mappings on an entity."}],"isConstructor":false,"name":"SetupPhonemeMappings","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The use type to apply to the entity. Uses {{Enum|_USE}}.","isOptional":false,"isVarArg":false,"name":"useType","type":"_USE"}],"description":"Sets the use type of an entity, affecting how often {{HookFunction|ENTITY|Use}} will be called for Lua entities.","examples":[{"code":"Entity:SetUseType( SIMPLE_USE )","description":"Makes the {{HookFunction|ENTITY|Use}} hook only get called once at every use."}],"isConstructor":false,"name":"SetUseType","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Key of the value to set","isOptional":false,"isVarArg":false,"name":"key","type":"any"},{"default":"","description":"Value to set the variable to","isOptional":false,"isVarArg":false,"name":"value","type":"any"}],"description":"Allows to quickly set variable to entity's {{ClassFunction|Entity|GetTable}}.\n\n{{Note|This will not network the variable to client(s). You want {{ClassFunction|Entity|SetNWString}} and similar functions for that}}","examples":[],"isConstructor":false,"name":"SetVar","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new velocity to set.","isOptional":false,"isVarArg":false,"name":"velocity","type":"Vector"}],"description":"Sets the entity's velocity. For entities with physics, consider using {{ClassFunction|PhysObj|SetVelocity}} on the {{Type|PhysObj}} of the entity.\n\n{{Note|Actually binds to CBaseEntity::SetBaseVelocity() which sets the entity's velocity due to forces applied by other entities.}}\n\n{{Warning|If applied to a player, this will actually '''ADD''' velocity, not set it.}}","examples":[],"isConstructor":false,"name":"SetVelocity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The model string to give to this viewmodel.\nExample: \"models/weapons/c_smg1.mdl\"","isOptional":false,"isVarArg":false,"name":"viewModel","type":"string"},{"default":"NULL","description":"The weapon entity to associate this viewmodel to.","isOptional":true,"isVarArg":false,"name":"weapon","type":"Weapon"}],"description":"Sets the model and associated weapon to this viewmodel entity.\n\nThis is used internally when the player switches weapon.\n\n{{Note|View models are not drawn without a weapons associated to them.}}\n{{Warning|This will silently fail if the entity is not a viewmodel.}}","examples":[{"code":"Entity( 1 ):GetViewModel( 1 ):SetWeaponModel( \"models/weapons/c_smg1.mdl\", Entity( 1 ):GetActiveWeapon() )","description":"Sets the model of the second viewmodel to the smg and associates it with the player's current weapon."},{"code":"SWEP.ViewModel = \"models/weapons/v_pistol.mdl\"\nSWEP.UseHands = false\nSWEP.ViewModelFlip = false\t--the default viewmodel won't be flipped\nSWEP.ViewModelFlip1 = true\t--the second viewmodel will\n\n\nfunction SWEP:Deploy()\n\t--get the second viewmodel\n\tlocal viewmodel1 = self.Owner:GetViewModel( 1 )\n\tif ( IsValid( viewmodel1 ) ) then\n\t\t--associate its weapon to us\n\t\tviewmodel1:SetWeaponModel( self.ViewModel , self )\n\tend\n\t\n\tself:SendViewModelAnim( ACT_VM_DEPLOY , 1 )\n\t\n\treturn true\nend\n\nfunction SWEP:Holster()\n\tlocal viewmodel1 = self.Owner:GetViewModel( 1 )\n\tif ( IsValid( viewmodel1 ) ) then\n\t\t--set its weapon to nil, this way the viewmodel won't show up again\n\t\tviewmodel1:SetWeaponModel( self.ViewModel , nil )\n\tend\n\t\n\treturn true\nend\n\n--since self:SendWeaponAnim always sends the animation to the first viewmodel, we need this as a replacement\nfunction SWEP:SendViewModelAnim( act , index , rate )\n\t\n\tif ( not game.SinglePlayer() and not IsFirstTimePredicted() ) then\n\t\treturn\n\tend\n\t\n\tlocal vm = self.Owner:GetViewModel( index )\n\t\n\tif ( not IsValid( vm ) ) then\n\t\treturn\n\tend\n\t\n\tlocal seq = vm:SelectWeightedSequence( act )\n\t\n\tif ( seq == -1 ) then\n\t\treturn\n\tend\n\t\n\tvm:SendViewModelMatchingSequence( seq )\n\tvm:SetPlaybackRate( rate or 1 )\nend\n\nfunction SWEP:PrimaryAttack()\n\t\n\tself:SendViewModelAnim( ACT_VM_PRIMARYATTACK , 0 )--target the first viewmodel\n\tself:SetNextPrimaryFire( CurTime() + 0.25 )\n\t\nend\n\nfunction SWEP:SecondaryAttack()\n\t\n\tself:SendViewModelAnim( ACT_VM_PRIMARYATTACK , 1 )--target the second\n\tself:SetNextSecondaryFire( CurTime() + 0.25 )\n\t\nend","description":"Initializes the extra viewmodel in Deploy and hides it again on Holster, also plays the attack animation on left and right click."}],"isConstructor":false,"name":"SetWeaponModel","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of skins the entity has.","examples":[],"isConstructor":false,"name":"SkinCount","realm":"shared","returns":[{"description":"skinCount","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity to move the model instance from.","isOptional":false,"isVarArg":false,"name":"srcEntity","type":"Entity"}],"description":"Moves the model instance from the source entity to this entity. This can be used to transfer decals that have been applied on one entity to another.\n\nBoth entities must have the same model.","examples":[],"isConstructor":false,"name":"SnatchModelInstance","realm":"client","returns":[{"description":"Whether the operation was successful or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Initializes the entity and starts its networking. If called on a player, it will respawn them.\n\nThis calls {{HookFunction|ENTITY|Initialize}} on Lua-defined entities.","examples":[],"isConstructor":false,"name":"Spawn","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Sound to play. Can be either a sound script or a filepath.","isOptional":false,"isVarArg":false,"name":"sound","type":"string"}],"description":"Starts a \"looping\" sound. As with any other sound playing methods, this function expects the sound file to be looping itself and will not automatically loop a non looping sound file as one might expect.\n\nThis function is almost identical to {{GlobalFunction|CreateSound}}, with the exception of the sound being created in the STATIC channel and with normal attenuation.\n\nSee also {{ClassFunction|Entity|StopLoopingSound}}","examples":[],"isConstructor":false,"name":"StartLoopingSound","realm":"shared","returns":[{"description":"The ID number of started sound starting with 0, or -1 if we failed for some reason.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Starts a motion controller in the physics engine tied to this entity's {{Type|PhysObj}}, which enables the use of {{HookFunction|ENTITY|PhysicsSimulate}}.\n\nThe motion controller can later be destroyed via {{ClassFunction|Entity|StopMotionController}}.\n\nMotion controllers are used internally to control other Entities' {{Type|PhysObj}}ects, such as the Gravity Gun, +use pickup and the Physics Gun.\n\nThis function should be called every time you recreate the Entity's {{Type|PhysObj}}. Or alternatively you should call {{ClassFunction|Entity|AddToMotionController}} on the new {{Type|PhysObj}}.\n\nAlso see {{ClassFunction|Entity|AddToMotionController}} and {{ClassFunction|Entity|RemoveFromMotionController}}.\n\n{{Note|Only works on a scripted {{Type|Entity}} of anim type.}}","examples":[],"isConstructor":false,"name":"StartMotionController","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Stops all particle effects parented to the entity and immediately destroys them.","examples":[],"isConstructor":false,"name":"StopAndDestroyParticles","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The sound ID returned by {{ClassFunction|Entity|StartLoopingSound}}","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Stops a sound created by {{ClassFunction|Entity|StartLoopingSound}}.","examples":[],"isConstructor":false,"name":"StopLoopingSound","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Stops the motion controller created with {{ClassFunction|Entity|StartMotionController}}.","examples":[],"isConstructor":false,"name":"StopMotionController","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Stops all particle effects parented to the entity.\n\nThis is ran automatically on every client by {{ClassFunction|Entity|StopParticles}} if called on the server.","examples":[],"isConstructor":false,"name":"StopParticleEmission","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Stops any attached to the entity .pcf particles using {{GlobalFunction|ParticleEffectAttach}}.\n\nOn client, this is the same as {{ClassFunction|Entity|StopParticleEmission}}. ( and you should use StopParticleEmission instead )<br/>\nOn server, this is the same as running {{ClassFunction|Entity|StopParticleEmission}} on every client.","examples":[],"isConstructor":false,"name":"StopParticles","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the particle to stop.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Stops all particle effects parented to the entity with given name.","examples":[],"isConstructor":false,"name":"StopParticlesNamed","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the particle to stop.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The attachment of the entity to stop particles on.","isOptional":false,"isVarArg":false,"name":"attachment","type":"number"}],"description":"Stops all particle effects parented to the entity with given name on given attachment.","examples":[],"isConstructor":false,"name":"StopParticlesWithNameAndAttachment","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the sound script to stop playback of.","isOptional":false,"isVarArg":false,"name":"soundscript","type":"string"}],"description":"Stops emitting the given sound script from the entity, especially useful for looping sound scripts.\n\n{{Note|This only works with sound scripts ({{LibraryFunction|sound|Add}}), using a file path will not work!}}","examples":[],"isConstructor":false,"name":"StopSound","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The amount of damage to be applied.","isOptional":false,"isVarArg":false,"name":"damageAmount","type":"number"},{"default":"","description":"The entity that initiated the attack that caused the damage.","isOptional":false,"isVarArg":false,"name":"attacker","type":"Entity"},{"default":"","description":"The entity that applied the damage, eg. a weapon.","isOptional":false,"isVarArg":false,"name":"inflictor","type":"Entity"}],"description":"Applies the specified amount of damage to the entity with [[Enums/DMG|DMG_GENERIC]] flag.","examples":[],"isConstructor":false,"name":"TakeDamage","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The damage to apply.","isOptional":false,"isVarArg":false,"name":"damageInfo","type":"CTakeDamageInfo"}],"description":"Applies the damage specified by the damage info to the entity.","examples":[{"code":"function DissolveIt( ent )\n\tlocal d = DamageInfo()\n\td:SetDamage( ent:Health() )\n\td:SetAttacker( ent )\n\td:SetDamageType( DMG_DISSOLVE )\n\n\tent:TakeDamageInfo( d )\nend\n\nDissolveIt( Entity( 1 ) )","description":"Dissolve the target into oblivion."}],"isConstructor":false,"name":"TakeDamageInfo","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The damage to apply","isOptional":false,"isVarArg":false,"name":"dmginfo","type":"CTakeDamageInfo"}],"description":"Applies physics damage to the entity","examples":[],"isConstructor":false,"name":"TakePhysicsDamage","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"{{Type|Entity}} or {{Type|Vector}} to test against. If an entity is given, this function will test using its bounding box.","isOptional":false,"isVarArg":false,"name":"testPoint","type":"Entity | Vector"}],"description":"Check if the given position or entity is within this entity's PVS.\n\n{{Note|The function won't take in to account {{GlobalFunction|AddOriginToPVS}} and the like.}}","examples":[],"isConstructor":false,"name":"TestPVS","realm":"server","returns":[{"description":"True if the testPoint is within our PVS.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of a bone to look up the \"physics root\" bone of.","isOptional":false,"isVarArg":false,"name":"boneID","type":"number"}],"description":"Returns the ID of a {{Type|PhysObj}} attached to the given bone. To be used with {{ClassFunction|Entity|GetPhysicsObjectNum}}.\n\nSee {{ClassFunction|Entity|TranslatePhysBoneToBone}} for reverse function.","examples":[],"isConstructor":false,"name":"TranslateBoneToPhysBone","realm":"shared","returns":[{"description":"The {{Type|PhysObj}} ID of the given bone.\n\n* -1 if we somehow cannot translate","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|PhysObj}} number on the entity","isOptional":false,"isVarArg":false,"name":"physNum","type":"number"}],"description":"Returns the boneID of the bone the given {{Type|PhysObj}} is attached to.\n\nSee {{ClassFunction|Entity|TranslateBoneToPhysBone}} for reverse function.","examples":[{"code":"local tr = LocalPlayer():GetEyeTrace()\nlocal bone = tr.Entity:TranslatePhysBoneToBone( tr.PhysicsBone )\nprint( bone )","description":"Does a trace, gets the physics bone from the trace, converts the physics bone number into the bone number and prints the result"}],"isConstructor":false,"name":"TranslatePhysBoneToBone","realm":"shared","returns":[{"description":"The boneID of the bone the {{Type|PhysObj}} is attached to.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Note|Does nothing on server.}}\n\nAnimations will be handled purely clientside instead of a fixed animtime, enabling interpolation. This does not affect layers and gestures.","examples":[],"isConstructor":false,"name":"UseClientSideAnimation","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Should we enable or disable the bounds.","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"},{"default":"0","description":"The distance/size of the trigger bounds.","isOptional":true,"isVarArg":false,"name":"bloat","type":"number"}],"description":"Enables or disables trigger bounds.\n\nThis will give the entity a \"trigger box\" that extends around its bounding box by iBloatSize units in X/Y and (iBloatSize/2) in +Z (-Z remains the same).<br/>\nThe trigger box is world aligned and will work regardless of the object's solidity and collision group.<br/>\nIt will be visible as a light blue box when the ent_bbox console command is used.<br/>\nValve use trigger boxes for all pickup items. Their bloat size is 24, a surprisingly large figure.","examples":[],"isConstructor":false,"name":"UseTriggerBounds","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the index of this view model, it can be used to identify which one of the player's view models this entity is.","examples":[],"isConstructor":false,"name":"ViewModelIndex","realm":"shared","returns":[{"description":"View model index, ranges from 0 to 2, nil if the entity is not a view model","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity to check for visibility to.","isOptional":false,"isVarArg":false,"name":"target","type":"Entity"}],"description":"Returns whether the target/given entity is visible from the this entity.\n\nThis is meant to be used only with NPCs.\n\nDifferences from a simple trace include:\n* If target has '''FL_NOTARGET''', returns false\n* If '''ai_ignoreplayers''' is turned on and target is a player, returns false\n* Reacts to '''ai_LOS_mode''':\n** If 1, does a simple trace with '''COLLISION_GROUP_NONE''' and '''MASK_BLOCKLOS'''\n** If not, does a trace with '''MASK_BLOCKLOS_AND_NPCS''' ( - '''CONTENTS_BLOCKLOS''' is target is player ) and a custom LOS filter ( '''CTraceFilterLOS''' )\n* Returns true if hits a vehicle the target is driving","examples":[],"isConstructor":false,"name":"Visible","realm":"server","returns":[{"description":"If the entities can see each other.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to check for visibility","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Returns true if supplied vector is visible from the entity's line of sight.\n\nThis is achieved similarly to a trace.","examples":[],"isConstructor":false,"name":"VisibleVec","realm":"server","returns":[{"description":"Within line of sight","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns an integer that represents how deep in water the entity is.\n\n\n* '''0''' - The entity isn't in water.\n\n* '''1''' - Slightly submerged (at least to the feet).\n\n* '''2''' - The majority of the entity is submerged (at least to the waist).\n\n* '''3''' - Completely submerged.","examples":[],"isConstructor":false,"name":"WaterLevel","realm":"shared","returns":[{"description":"The water level.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Activity number. See {{Enum|ACT}}.","isOptional":false,"isVarArg":false,"name":"act","type":"ACT"},{"default":"","description":"How long the animation should take in seconds.","isOptional":false,"isVarArg":false,"name":"duration","type":"number"}],"description":"Sets the activity of the entity's active weapon.\n\n{{Note|This does nothing on the client.}}\n{{Note|Only works for CBaseCombatCharacter entities, which includes players and NPCs.}}","examples":[],"isConstructor":false,"name":"Weapon_SetActivity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The activity to translate","isOptional":false,"isVarArg":false,"name":"act","type":"number"}],"description":"Calls and returns {{HookFunction|WEAPON|TranslateActivity}} on the weapon the entity ( player or NPC ) carries.\n\nDespite existing on client, it doesn't actually do anything on client.","examples":[],"isConstructor":false,"name":"Weapon_TranslateActivity","realm":"shared","returns":[{"description":"The translated activity","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns two vectors representing the minimum and maximum extent of the entity's bounding box.","examples":[{"code":"local min,max = Entity(1):WorldSpaceAABB()\nprint(max)","description":"Prints Entity(1)'s maximum bounding box vector."}],"isConstructor":false,"name":"WorldSpaceAABB","realm":"shared","returns":[{"description":"The minimum vector for the entity's bounding box.","type":"Vector"},{"description":"The maximum vector for the entity's bounding box.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the center of the entity according to its collision model.","examples":[],"isConstructor":false,"name":"WorldSpaceCenter","realm":"shared","returns":[{"description":"The center of the entity","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The world vector","isOptional":false,"isVarArg":false,"name":"wpos","type":"Vector"}],"description":"Converts a worldspace vector into a vector local to an entity","examples":[],"isConstructor":false,"name":"WorldToLocal","realm":"shared","returns":[{"description":"The local vector","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The world angles","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"Converts world angles to local angles ( local to the entity )","examples":[],"isConstructor":false,"name":"WorldToLocalAngles","realm":"shared","returns":[{"description":"The local angles","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The bone to follow","isOptional":false,"isVarArg":false,"name":"boneid","type":"number"}],"description":"Makes an entity follow another entity's bone.\n\nInternally this function calls {{ClassFunction|Entity|SetParent}}( parent, boneid ) and {{ClassFunction|Entity|AddEffects}}( EF_FOLLOWBONE ).\n{{Note|If the entity vibrates, you probably need to run {{ClassFunction|Entity|SetPredictable}}( false ) clientside.}}\n{{Warning|This function will not work if the target bone's parent bone is invalid or if the bone is not used by VERTEX LOD0}}","examples":[],"isConstructor":false,"name":"FollowBone","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the input that was triggered.","isOptional":false,"isVarArg":false,"name":"inputName","type":"string"},{"default":"","description":"The initial cause for the input getting triggered.","isOptional":false,"isVarArg":false,"name":"activator","type":"Entity"},{"default":"","description":"The entity that directly trigger the input.","isOptional":false,"isVarArg":false,"name":"called","type":"Entity"},{"default":"","description":"The data passed.","isOptional":false,"isVarArg":false,"name":"data","type":"string"}],"description":"Called when another entity fires an event to this entity.","examples":[],"isConstructor":false,"name":"AcceptInput","realm":"server","returns":[{"description":"Should we suppress the default action for this input?","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity's actual position. May differ from {{ClassFunction|Entity|GetPos}}","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"The entity's actual angles. May differ from {{ClassFunction|Entity|GetAngles}}","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"Called whenever the entity's position changes. A callback for when an entity's angle changes is available via {{ClassFunction|Entity|AddCallback}}.\n\nLike {{HookFunction|ENTITY|RenderOverride}}, this hook works on any entity (scripted or not) it is applied on.","examples":[],"isConstructor":false,"name":"CalcAbsolutePosition","realm":"shared","returns":[{"description":"New position","type":"Vector"},{"description":"New angles","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Player, that tried to use the property","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Class of the property that is tried to use, for example - bonemanipulate","isOptional":false,"isVarArg":false,"name":"property","type":"string"}],"description":"Controls if a property can be used on this entity or not.\n\nThis hook will only work in Sandbox derived gamemodes that do not have {{HookFunction|SANDBOX|CanProperty}} overridden.","examples":[],"isConstructor":false,"name":"CanProperty","realm":"shared","returns":[{"description":"Return false to disallow using that property, return true to allow.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called whenever an engine schedule is being ran.","examples":[],"isConstructor":false,"name":"DoingEngineSchedule","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The schedule to run.","isOptional":false,"isVarArg":false,"name":"sched","type":"table"}],"description":"Runs a Lua schedule. Runs tasks inside the schedule.\n\n[[Category:ENT_AI_Hooks]]","examples":[],"isConstructor":false,"name":"DoSchedule","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The bit flags from {{Enum|STUDIO}}","isOptional":false,"isVarArg":false,"name":"flags","type":"STUDIO"}],"description":"Called if and when the entity should be drawn opaquely, based on the {{ClassFunction|Entity|GetRenderGroup}} of the entity.\n\nSee {{Struct|ENT}} and {{Enum|RENDERGROUP}} for more information.\n\nSee also {{HookFunction|ENTITY|DrawTranslucent}}.","examples":[{"code":"function ENT:Draw()\n\t// Draw the model\n\tself:DrawModel()\n\n\t// The text to display\n\tlocal text = \"Example Text\"\n\n\t// The position. We use model bounds to make the text appear just above the model. Customize this to your liking.\n\tlocal mins, maxs = self:GetModelBounds()\n\tlocal pos = self:GetPos() + Vector( 0, 0, maxs.z + 2 )\n\n\t// The angle\n\tlocal ang = Angle( 0, SysTime() * 100 % 360, 90 )\n\n\t// Draw front\n\tcam.Start3D2D( pos, ang, 0.2 )\n\t\t// Actually draw the text. Customize this to your liking.\n\t\tdraw.DrawText( text, \"Default\", 0, 0, Color( 0, 255, 0, 255 ), TEXT_ALIGN_CENTER )\n\tcam.End3D2D()\n\n\t// Flip the angle 180 degress around the UP axis\n\tang:RotateAroundAxis( Vector( 0, 0, 1 ), 180 )\n\n\t// Draw back\n\tcam.Start3D2D( pos, ang, 0.2 )\n\t\t// Actually draw the text. Customize this to your liking.\n\t\tdraw.DrawText( text, \"Default\", 0, 0, Color( 0, 255, 0, 255 ), TEXT_ALIGN_CENTER )\n\tcam.End3D2D()\nend","description":"Draws the model and makes a rotating text over the entity"}],"isConstructor":false,"name":"Draw","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The bit flags from {{Enum|STUDIO}}","isOptional":false,"isVarArg":false,"name":"flags","type":"STUDIO"}],"description":"Called when the entity should be drawn translucently.","examples":[{"code":"function ENT:DrawTranslucent()\n\n\t-- This is here just to make it backwards compatible.\n\t-- You shouldn't really be drawing your model here unless it's translucent\n\n\tself:Draw()\n\nend","description":"The default action for this hook is to call {{HookFunction|ENTITY|Draw}}."}],"isConstructor":false,"name":"DrawTranslucent","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity which was touched.","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"}],"description":"Called when the entity stops touching another entity.\n\n{{Warning|This only works for '''brush''' entities and for entities that have {{ClassFunction|Entity|SetTrigger}} set to true.}}","examples":[],"isConstructor":false,"name":"EndTouch","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called whenever an engine schedule is finished.","examples":[],"isConstructor":false,"name":"EngineScheduleFinish","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path of the expression.","isOptional":false,"isVarArg":false,"name":"strExp","type":"string"}],"description":"{{Validate}}Called when an NPC's expression has finished.","examples":[],"isConstructor":false,"name":"ExpressionFinished","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Position of the effect","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"Angle of the effect","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"},{"default":"","description":"The event ID of happened even. See [http://developer.valvesoftware.com/wiki/Animation_Events this page].","isOptional":false,"isVarArg":false,"name":"event","type":"number"},{"default":"","description":"Name of the event","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Called before firing animation events, such as muzzle flashes or shell ejections.\n\n{{Note|This hook only works on \"anim\" type entities.}}","examples":[],"isConstructor":false,"name":"FireAnimationEvent","realm":"shared","returns":[{"description":"Return true to disable the effect","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The weapon being used by the NPC.","isOptional":false,"isVarArg":false,"name":"wep","type":"Entity"},{"default":"","description":"The target the NPC is attacking","isOptional":false,"isVarArg":false,"name":"target","type":"Entity"}],"description":"{{Validate}} Called to determine how good an NPC is at using a particular weapon.","examples":[],"isConstructor":false,"name":"GetAttackSpread","realm":"server","returns":[{"description":"The number of degrees of inaccuracy in the NPC's attack.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity in question","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called when scripted NPC needs to check how he \"feels\" against another entity, such as when {{ClassFunction|NPC|Disposition}} is called.","examples":[],"isConstructor":false,"name":"GetRelationship","realm":"server","returns":[{"description":"How our scripter NPC \"feels\" towards the entity in question. See {{Enum|D}}.","type":"D"}]},{"accessModifier":"public","arguments":[],"description":"Specify a mesh that should be rendered instead of this SENT's model.","examples":[{"code":"AddCSLuaFile()\n\nDEFINE_BASECLASS( \"base_anim\" )\n\nENT.PrintName = \"Other Cube\"\nENT.Spawnable = true\n\nENT.Mins = Vector( -16, -16, -16 )\nENT.Maxs = Vector(  16,  16,  16 )\n\nENT.Material = Material( \"hunter/myplastic\" )\n\nfunction ENT:SpawnFunction( ply, tr, ClassName )\n    local ent = ents.Create( ClassName )\n    ent:SetPos( tr.HitPos + tr.HitNormal * 32 )\n    ent:Spawn()\n    return ent\nend\n\nfunction ENT:Initialize()\n    if CLIENT then\n        self:CreateMesh()\n        self:SetRenderBounds( self.Mins, self.Maxs )\n    end\n\n    self:DrawShadow( false )\nend\n\nfunction ENT:GetRenderMesh()\n    return { Mesh = self.Mesh, Material = self.Material }\nend\n\nfunction ENT:CreateMesh()\n    self.Mesh = Mesh()\n\n    local positions = {\n        Vector( -0.5, -0.5, -0.5 ),\n        Vector(  0.5, -0.5, -0.5 ),\n        Vector( -0.5,  0.5, -0.5 ),\n        Vector(  0.5,  0.5, -0.5 ),\n        Vector( -0.5, -0.5,  0.5 ),\n        Vector(  0.5, -0.5,  0.5 ),\n        Vector( -0.5,  0.5,  0.5 ),\n        Vector(  0.5,  0.5,  0.5 ),\n    };\n\n    local indices = {\n        1, 7, 5,\n        1, 3, 7,\n        6, 4, 2,\n        6, 8, 4,\n        1, 6, 2,\n        1, 5, 6,\n        3, 8, 7,\n        3, 4, 8,\n        1, 4, 3,\n        1, 2, 4,\n        5, 8, 6,\n        5, 7, 8,\n    }\n\n    local normals = {\n       Vector( -1,  0,  0 ),\n       Vector(  1,  0,  0 ),\n       Vector(  0, -1,  0 ),\n       Vector(  0,  1,  0 ),\n       Vector(  0,  0, -1 ),\n       Vector(  0,  0,  1 ),\n    }\n\n    local tangents = {\n        { 0, 1, 0, -1 },\n        { 0, 1, 0, -1 },\n        { 0, 0, 1, -1 },\n        { 1, 0, 0, -1 },\n        { 1, 0, 0, -1 },\n        { 0, 1, 0, -1 },\n    }\n\n    local uCoords = {\n       0, 1, 0,\n       0, 1, 1,\n       0, 1, 0,\n       0, 1, 1,\n       0, 1, 0,\n       0, 1, 1,\n       0, 1, 0,\n       0, 1, 1,\n       0, 1, 0,\n       0, 1, 1,\n       0, 1, 0,\n       0, 1, 1,\n    }\n\n    local vCoords = {\n       0, 1, 1,\n       0, 0, 1,\n       0, 1, 1,\n       0, 0, 1,\n       0, 1, 1,\n       0, 0, 1,\n       0, 1, 1,\n       0, 0, 1,\n       0, 1, 1,\n       0, 0, 1,\n       0, 1, 1,\n       0, 0, 1,\n    }\n\n    local verts = {}\n    local scale = self.Maxs - self.Mins\n\n    for vert_i = 1, #indices do\n        local face_i = math.ceil( vert_i / 6 )\n\n        verts[vert_i] = {\n            pos = positions[indices[vert_i]] * scale,\n            normal = normals[face_i],\n            u = uCoords[vert_i],\n            v = vCoords[vert_i],\n            userdata = tangents[face_i]\n        }\n    end\n    \n    self.Mesh:BuildFromTriangles( verts )\nend","description":"A box that renders nicely with ambient lighting, projected textures, and bumpmaps. Performed in the most lines of code possible."}],"isConstructor":false,"name":"GetRenderMesh","realm":"client","returns":[{"description":"A table containing the following keys:\n*{{FuncArg|IMesh|Mesh|Required}}\n*{{FuncArg|IMaterial|Material|Required}}\n*{{FuncArg|VMatrix|Matrix|Optional}}","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player aiming at us","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called by {{HookFunction|GM|GravGunPickupAllowed}} on ALL entites in Sandbox-derived  gamemodes and acts as an override.","examples":[],"isConstructor":false,"name":"GravGunPickupAllowed","realm":"server","returns":[{"description":"Return true to allow the entity to be picked up","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player pressing left-click with the gravity gun at an entity","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called when this entity is about to be punted with the gravity gun (primary fire).\n\nOnly works in Sandbox derived gamemodes and only if {{HookFunction|GM|GravGunPunt}} is not overridden.","examples":[{"code":"function ENT:GravGunPunt( ply )\n\tself:GetPhysicsObject():EnableMotion( true )\n\treturn true\nend","description":"Enables a scripted entity to be punted even when frozen."}],"isConstructor":false,"name":"GravGunPunt","realm":"shared","returns":[{"description":"Return true or false to enable or disable punting respectively.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The event ID of happened even. See [http://developer.valvesoftware.com/wiki/Animation_Events this page].","isOptional":false,"isVarArg":false,"name":"event","type":"number"},{"default":"","description":"The absolute time this event occurred using {{GlobalFunction|CurTime}}.","isOptional":false,"isVarArg":false,"name":"eventTime","type":"number"},{"default":"","description":"The frame this event occurred as a number between 0 and 1.","isOptional":false,"isVarArg":false,"name":"cycle","type":"number"},{"default":"","description":"Event type. See [https://github.com/ValveSoftware/source-sdk-2013/blob/master/mp/src/game/shared/eventlist.h#L14-L23 the Source SDK].","isOptional":false,"isVarArg":false,"name":"type","type":"number"},{"default":"","description":"Name or options of this event.","isOptional":false,"isVarArg":false,"name":"options","type":"string"}],"description":"Called before firing animation events, such as muzzle flashes or shell ejections.\n\n{{Note|This hook only works on \"anim\" type entities.}}","examples":[],"isConstructor":false,"name":"HandleAnimEvent","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The trace that hit this entity as a {{Struct|TraceResult}}.","isOptional":false,"isVarArg":false,"name":"traceResult","type":"TraceResult"},{"default":"","description":"The damage bits associated with the trace, see {{Enum|DMG}}","isOptional":false,"isVarArg":false,"name":"damageType","type":"DMG"},{"default":"nil","description":"The effect name to override the impact effect with.\nPossible arguments are ImpactJeep, AirboatGunImpact, HelicopterImpact, ImpactGunship.","isOptional":true,"isVarArg":false,"name":"customImpactName","type":"string"}],"description":"Called when a bullet trace hits this entity and allows you to override the default behavior by returning true.","examples":[{"code":"function ENT:ImpactTrace(trace,dmgtype,customimpactname)\n\tlocal effectdata = EffectData()\n\teffectdata:SetOrigin( trace.HitPos )\n\tutil.Effect( \"Explosion\", effectdata )\n\treturn true\nend","description":"Hides the original bullet impact effect and dispatches explosions instead."}],"isConstructor":false,"name":"ImpactTrace","realm":"client","returns":[{"description":"Return true to override the default impact effects.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called when the entity is created. This is called when you {{ClassFunction|Entity|Spawn}} the custom entity.\n\nThis is called '''after''' {{HookFunction|ENTITY|SetupDataTables}} and {{HookFunction|GM|OnEntityCreated}}.\n\n{{Bug|Issue=2732|This is sometimes not called clientside. You can work around this by setting a variable in Initialize and check if it exists in {{HookFunction|ENTITY|Think}}. See the example below.}}","examples":[{"code":"function ENT:Initialize()\n\t-- Sets what model to use\n\tself:SetModel( \"models/props/cs_assault/money.mdl\" )\n\n\t-- Sets what color to use\n\tself:SetColor( Color( 200, 255, 200 ) )\n\n\t-- Physics stuff\n\tself:SetMoveType( MOVETYPE_VPHYSICS )\n\tself:SetSolid( SOLID_VPHYSICS )\n\n\t-- Init physics only on server, so it doesn't mess up physgun beam\n\tif ( SERVER ) then self:PhysicsInit( SOLID_VPHYSICS ) end\n\t\n\t-- Make prop to fall on spawn\n\tlocal phys = self:GetPhysicsObject()\n\tif ( IsValid( phys ) ) then phys:Wake() end\nend","description":"Example Initialize function"},{"code":"function SWEP:Initialize()\n\tself.m_bInitialized = true\n\n\t-- Other code\nend\n\nfunction SWEP:Think()\n\tif (not self.m_bInitialized) then\n\t\tself:Initialize()\n\tend\n\n\t-- Other code\nend","description":"Fixes the function not being called clientside."}],"isConstructor":false,"name":"Initialize","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key that was affected.","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"","description":"The new value.","isOptional":false,"isVarArg":false,"name":"value","type":"string"}],"description":"Called when the engine sets a value for this scripted entity.\n\nSee {{HookFunction|GM|EntityKeyValue}} for a hook that works for all entities.<br/>\nSee {{HookFunction|WEAPON|KeyValue}} for a hook that works for scripted weapons.","examples":[],"isConstructor":false,"name":"KeyValue","realm":"server","returns":[{"description":"Return true to suppress this KeyValue or return false or nothing to apply this key value.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The schedule to start next task in.","isOptional":false,"isVarArg":false,"name":"sched","type":"table"}],"description":"Start the next task in specific schedule.","examples":[],"isConstructor":false,"name":"NextTask","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of condition. See {{ClassFunction|NPC|ConditionName}}.","isOptional":false,"isVarArg":false,"name":"conditionID","type":"number"}],"description":"Called each time the NPC updates its condition.","examples":[],"isConstructor":false,"name":"OnCondition","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"{{Struct|EntityCopyData}} of the source entity.","isOptional":false,"isVarArg":false,"name":"entTable","type":"EntityCopyData"}],"description":"Called on any entity after it has been created by the {{Lib|duplicator}} and before any bone/entity modifiers have been applied.\n\nThis hook is called after {{HookFunction|ENTITY|Initialize}} and before {{HookFunction|ENTITY|PostEntityPaste}}.","examples":[],"isConstructor":false,"name":"OnDuplicated","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The save {{Struct|EntityCopyData}} that you can modify.","isOptional":false,"isVarArg":false,"name":"data","type":"EntityCopyData"}],"description":"Called after duplicator finishes saving the entity, allowing you to modify the save data.\n\nThis is called after {{HookFunction|ENTITY|PostEntityCopy}}.","examples":[{"code":"function ENT:OnEntityCopyTableFinish( data )\n\tfor k, v in pairs( data ) do data[ k ] = nil end\nend","description":"Prevent this entity from being copied and subsequently pasted."}],"isConstructor":false,"name":"OnEntityCopyTableFinish","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the entity is reloaded by the lua auto-refresh system, i.e. when the developer edits the lua file for the entity while the game is running.","examples":[],"isConstructor":false,"name":"OnReloaded","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the entity is about to be removed.\n\nSee also {{ClassFunction|Entity|CallOnRemove}}, which can even be used on engine (non-Lua) entities.\n\n==Clientside behaviour remarks==\n\n{{Validate}}\n\nThis hook may be called at odd times (when entity has actually not yet been removed from the server). This happens during fullupdate with the {{HookFunction|ENTITY|Initialize}} function not being called even when the entity reappears.\nYou can debug this behaviour by enabling cheats and running '''cl_fullupdate''' on the client.\n\n{{HookFunction|GM|NotifyShouldTransmit}} can be used to circumvent this problem. {{HookFunction|ENTITY|Think}} can also be used to detect that the entity has reappeared. You may reinitialize any necessary data in these hooks.","examples":[],"isConstructor":false,"name":"OnRemove","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the entity is reloaded from a Source Engine save (not the Sandbox saves or dupes) or on a changelevel (for example Half-Life 2 campaign level transitions).\n\nFor the {{Lib|duplicator}} callbacks, see {{HookFunction|ENTITY|OnDuplicated}}.","examples":[],"isConstructor":false,"name":"OnRestore","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The damage to be applied to the entity.","isOptional":false,"isVarArg":false,"name":"damage","type":"CTakeDamageInfo"}],"description":"Called when the entity is taking damage.","examples":[],"isConstructor":false,"name":"OnTakeDamage","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called from the engine when TaskComplete is called.\nThis allows us to move onto the next task - even when TaskComplete was called from an engine side task.","examples":[],"isConstructor":false,"name":"OnTaskComplete","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity that is about to trigger.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Polls whenever the entity should trigger the brush.\n\n{{Warning|This hook is broken and will not work without code below}}","examples":[{"code":"ENT.Entities = {}\n\nfunction ENT:IsTouchedBy( ent )\n\treturn table.HasValue( self.Entities, ent )\nend\n\nfunction ENT:StartTouch( ent )\n\tif ( !self:PassesTriggerFilters( ent ) ) then return end\n\ttable.insert( self.Entities, ent )\n\n\t/* Code */\nend\n\nfunction ENT:Touch( ent )\n\tif ( !self:PassesTriggerFilters( ent ) ) then return end\n\tif ( !table.HasValue( ent ) ) then table.insert( self.Entities, ent ) end\n\n\t/* Code */\nend\n\nfunction ENT:EndTouch( ent )\n\tif ( !self:IsTouchedBy( ent ) ) then return end\n\ttable.RemoveByValue( self.Entities, ent )\n\n\t/* Code */\nend","description":"How this is supposed to work internally"}],"isConstructor":false,"name":"PassesTriggerFilters","realm":"server","returns":[{"description":"Should trigger or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Information regarding the collision. See {{Struct|CollisionData}}.","isOptional":false,"isVarArg":false,"name":"colData","type":"CollisionData"},{"default":"","description":"The physics object that collided.","isOptional":false,"isVarArg":false,"name":"collider","type":"PhysObj"}],"description":"Called when the entity collides with anything. The move type and solid type must be VPHYSICS for the hook to be called.\n\n{{Note|If you want to use this hook on default/engine/non-Lua entites ( like prop_physics ), use {{ClassFunction|Entity|AddCallback}} instead! This page describes a hook for Lua entities}}","examples":[{"code":"function ENT:PhysicsCollide( data, phys )\n\tif ( data.Speed > 50 ) then self:EmitSound( Sound( \"Flashbang.Bounce\" ) ) end\nend","description":"Play a sound when we hit something."}],"isConstructor":false,"name":"PhysicsCollide","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The physics object of the entity.","isOptional":false,"isVarArg":false,"name":"phys","type":"PhysObj"},{"default":"","description":"Time since the last call.","isOptional":false,"isVarArg":false,"name":"deltaTime","type":"number"}],"description":"Called from the Entity's motion controller to simulate physics.\n\nThis will only be called after using {{ClassFunction|Entity|StartMotionController}} on a scripted entity of \"anim\" type.\n\n{{Note|This hook can work on the CLIENT if you call {{ClassFunction|Entity|StartMotionController}} and use {{ClassFunction|Entity|AddToMotionController}} on the physics objects you want to control}}\n\n{{Warning|Do not use functions such as {{ClassFunction|PhysObj|EnableCollisions}} or {{ClassFunction|PhysObj|EnableGravity}} in this hook as they're very likely to crash your game. You may want to use {{HookFunction|ENTITY|PhysicsUpdate}} instead.}}","examples":[],"isConstructor":false,"name":"PhysicsSimulate","realm":"shared","returns":[{"description":"Angular force","type":"Vector"},{"description":"Linear force","type":"Vector"},{"description":"One of the {{Enum|SIM}}.","type":"SIM"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The physics object of the entity.","isOptional":false,"isVarArg":false,"name":"phys","type":"PhysObj"}],"description":"Called whenever the physics of the entity are updated.\n\n{{Warning|This hook won't be called if the Entity's {{Type|PhysObj}} goes asleep}}","examples":[],"isConstructor":false,"name":"PhysicsUpdate","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called after the duplicator finished copying the entity","examples":[],"isConstructor":false,"name":"PostEntityCopy","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who pasted the entity.\n\n{{Warning|This may not be a valid player in some circumstances. For example, when a save is loaded from the main menu, this hook will be called before the player is spawned. This argument will be a NULL entity in that case.}}\n{{Bug|Pull=1408|This will be nil for invalid players.}}","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The entity itself. Same as 'self'.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"All entities that are within the placed dupe. {{Note|The keys of each value in this table are the original entity indexes when the duplication was created. This can be utilized to restore entity references that don't get saved in duplications.}}","isOptional":false,"isVarArg":false,"name":"createdEntities","type":"table"}],"description":"Called after the {{Lib|duplicator}} pastes the entity, after the bone/entity modifiers have been applied to the entity.\n\nThis hook is called after {{HookFunction|ENTITY|OnDuplicated}}.","examples":[],"isConstructor":false,"name":"PostEntityPaste","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called before the duplicator copies the entity.\n\nIf you are looking for a way to make the duplicator spawn another entity when duplicated. ( For example, you duplicate a \"prop_physics\", but you want the duplicator to spawn \"prop_physics_my\" ), you should add prop_physics.ClassOverride = \"prop_physics_my\". The duplication table should be also stored on that prop_physics, not on prop_physics_my.","examples":[{"code":"-- Store the value for duplicator\nfunction ENT:PreEntityCopy()\n\tself.MyDuplicatorVariasble = self:GetSequence()\nend\n\n-- Restore the saved value\nfunction ENT:PostEntityPaste()\n\t-- Always validate data before using it\n\tif ( !self.MyDuplicatorVariasble ) then return end\n\n\tself:ResetSequence( self.MyDuplicatorVariasble )\nend","description":"Example on how to store values for duplicator, and then restore them afterwards"}],"isConstructor":false,"name":"PreEntityCopy","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called instead of the engine drawing function of the entity. This hook works on any entity (scripted or not) it is applied on.\n\nThis does not work on \"physgun_beam\", use {{HookFunction|GM|DrawPhysgunBeam}} instead.\n\n{{Note|As a downside of this implementation, only one RenderOverride may be applied at a time.}}\n\n{{Bug|Issue=3292|Drawing a viewmodel in this function will cause {{HookFunction|GM|PreDrawViewModel}}, {{HookFunction|WEAPON|PreDrawViewModel}}, {{HookFunction|WEAPON|ViewModelDrawn}}, {{HookFunction|GM|PostDrawViewModel}}, and {{HookFunction|WEAPON|PostDrawViewModel}} to be called twice.}}\n\n{{Bug|Issue=3299|This is called before PrePlayerDraw for players. If this function exists at all on a player, their worldmodel will always be rendered regardless of PrePlayerDraw's return.}}","examples":[{"code":"local function DontDrawMe( self )\n\tif ( self:GetOwner() == LocalPlayer() ) then\n\t\treturn\n\tend\n\t\n\tself:DrawModel()\nend\n\nlocal pickent = LocalPlayer():GetEyeTrace().Entity\n\nif ( IsValid( pickent ) ) then\n\tpickent.RenderOverride = DontDrawMe\nend","description":"Set the entity the player is looking at to not draw if the player is its owner."}],"isConstructor":false,"name":"RenderOverride","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called from the engine every 0.1 seconds.","examples":[],"isConstructor":false,"name":"RunAI","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The task ID, see [https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502 ai_task.h]","isOptional":false,"isVarArg":false,"name":"taskID","type":"number"},{"default":"","description":"The task data.","isOptional":false,"isVarArg":false,"name":"taskData","type":"number"}],"description":"Called when an engine task is ran on the entity.\n\n{{Note|This hook only exists for '''ai''' type SENTs}}","examples":[],"isConstructor":false,"name":"RunEngineTask","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The task to run","isOptional":false,"isVarArg":false,"name":"task","type":"table"}],"description":"Called every think on running task.\nThe actual task function should tell us when the task is finished.","examples":[],"isConstructor":false,"name":"RunTask","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called whenever a schedule is finished.","examples":[],"isConstructor":false,"name":"ScheduleFinished","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"iNPCState","type":"number"}],"description":"Set the schedule we should be playing right now.","examples":[{"code":"local schdTest = ai_schedule.New( \"Test Schedule\" )\n \nschdTest:EngTask( \"TASK_GET_PATH_TO_RANDOM_NODE\",  128 )\nschdTest:EngTask( \"TASK_RUN_PATH\", \t\t   0   )\nschdTest:EngTask( \"TASK_WAIT_FOR_MOVEMENT\", \t   0   )\n \n \nfunction ENT:SelectSchedule()\n \n\tself:StartSchedule( schdTest )\n \nend","description":"Creates a new schedule and assigns it to a scripted NPC."}],"isConstructor":false,"name":"SelectSchedule","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether or not to set automatic frame advancing.","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Toggles automatic frame advancing for animated sequences on an entity.\n\nThis has the same effect as setting the '''ENT.AutomaticFrameAdvance''' property.","examples":[],"isConstructor":false,"name":"SetAutomaticFrameAdvance","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The task to set.","isOptional":false,"isVarArg":false,"name":"task","type":"table"}],"description":"Sets the current task.","examples":[],"isConstructor":false,"name":"SetTask","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the entity should set up its [[Networking Entities| Data Tables]].\n\nThis is a much better option than using Set/Get Networked Values.","examples":[{"code":"function ENT:SetupDataTables()\n\n\tself:NetworkVar( \"Float\", 0, \"Amount\" )\n\tself:NetworkVar( \"Vector\", 0, \"BloodPos\" )\n\tself:NetworkVar( \"Vector\", 1, \"UrinePos\" )\n\n\tif SERVER then\n\t\tself:SetAmount(3)\n\t\tself:SetBloodPos(Vector(0,-32,0))\n\t\tself:SetUrinePos(Vector(0,0,-16))\n\tend\n\nend","description":"Sets up networked variables, adds functions SetAmount, GetAmount, GetBloodPos, SetBloodPos, GetUrinePos, SetUrinePos.\n\nThis function only supports 64 data tables per type (#0-63), except for strings which only supports 4."}],"isConstructor":false,"name":"SetupDataTables","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player that is spawning this SENT","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"A {{Struct|TraceResult}} from player eyes to their aim position","isOptional":false,"isVarArg":false,"name":"tr","type":"TraceResult"},{"default":"","description":"The classname of your entity","isOptional":false,"isVarArg":false,"name":"ClassName","type":"string"}],"description":"This is the spawn function. It's called when a player spawns the entity from the spawnmenu.\n\nIf you want to make your SENT spawnable you need this function to properly create the entity.","examples":[{"code":"function ENT:SpawnFunction( ply, tr, ClassName )\n\n\tif ( !tr.Hit ) then return end\n\n\tlocal SpawnPos = tr.HitPos + tr.HitNormal * 16\n\n\tlocal ent = ents.Create( ClassName )\n\tent:SetPos( SpawnPos )\n\tent:SetBallSize( math.random( 16, 48 ) )\n\tent:Spawn()\n\tent:Activate()\n\n\treturn ent\n\nend","description":"This is how it is defined in sent_ball"},{"code":"function ENT:SpawnFunction( ply, tr, ClassName )\n\n\tif ( !tr.Hit ) then return end\n\t\n\tlocal SpawnPos = tr.HitPos + tr.HitNormal * 10\n\tlocal SpawnAng = ply:EyeAngles()\n\tSpawnAng.p = 0\n\tSpawnAng.y = SpawnAng.y + 180\n\t\n\tlocal ent = ents.Create( ClassName )\n\tent:SetPos( SpawnPos )\n\tent:SetAngles( SpawnAng )\n\tent:Spawn()\n\tent:Activate()\n\t\n\treturn ent\n\t\nend","description":"This is how base_edit spawns (also rotates the entity to face the player, remove * 10 if it spawns in the air)"}],"isConstructor":false,"name":"SpawnFunction","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Schedule ID to start. See {{Enum|SCHED}}","isOptional":false,"isVarArg":false,"name":"scheduleID","type":"SCHED"}],"description":"Starts an engine schedule.","examples":[],"isConstructor":false,"name":"StartEngineSchedule","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Task ID to start, see [https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502 ai_task.h]","isOptional":false,"isVarArg":false,"name":"taskID","type":"number"},{"default":"","description":"Task data","isOptional":false,"isVarArg":false,"name":"TaskData","type":"number"}],"description":"Called when an engine task has been started on the entity.\n\n{{Note|This hook only exists for '''ai''' type SENTs}}","examples":[],"isConstructor":false,"name":"StartEngineTask","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Schedule to start.","isOptional":false,"isVarArg":false,"name":"sched","type":"Schedule"}],"description":"Starts a schedule previously created by {{LibraryFunction|ai_schedule|New}}.\n\nNot to be confused with {{HookFunction|ENTITY|StartEngineSchedule}} or {{ClassFunction|NPC|SetSchedule}} which start an Engine-based schedule.","examples":[],"isConstructor":false,"name":"StartSchedule","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The task to start, created by {{LibraryFunction|ai_task|New}}.","isOptional":false,"isVarArg":false,"name":"task","type":"Task"}],"description":"Called once on starting task.","examples":[{"code":"function ENT:StartTask( task )\n\ttask:Start( self.Entity )\nend","description":"How it is defined:"}],"isConstructor":false,"name":"StartTask","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity which is being touched.","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"}],"description":"Called when the entity starts touching another entity.\n\n{{Warning|This only works for '''brush''' entities and for entities that have {{ClassFunction|Entity|SetTrigger}} set to true.}}","examples":[],"isConstructor":false,"name":"StartTouch","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of output to store","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Output info","isOptional":false,"isVarArg":false,"name":"info","type":"string"}],"description":"Used to store an output so it can be triggered with {{HookFunction|ENTITY|TriggerOutput}}.\nOutputs compiled into a map are passed to entities as key/value pairs through {{HookFunction|ENTITY|KeyValue}}.\n\nTriggerOutput will do nothing if this function has not been called first.","examples":[{"code":"function ENT:KeyValue( k, v )\n\t-- 99% of all outputs are named 'OnSomethingHappened'.\n\tif ( string.Left( k, 2 ) == \"On\" ) then\n\t\tself:StoreOutput( k, v )\n\tend\nend","description":"Stores all outputs that are assigned to an entity in Hammer."}],"isConstructor":false,"name":"StoreOutput","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns true if the current running Task is finished.","examples":[],"isConstructor":false,"name":"TaskFinished","realm":"server","returns":[{"description":"Is the current running Task is finished or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns how many seconds we've been doing this current task","examples":[],"isConstructor":false,"name":"TaskTime","realm":"server","returns":[{"description":"How many seconds we've been doing this current task","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Start position of the trace","isOptional":false,"isVarArg":false,"name":"startpos","type":"Vector"},{"default":"","description":"Offset from startpos to the endpos of the trace","isOptional":false,"isVarArg":false,"name":"delta","type":"Vector"},{"default":"","description":"Is the trace a hull trace?","isOptional":false,"isVarArg":false,"name":"isbox","type":"boolean"},{"default":"","description":"Size of the hull trace?","isOptional":false,"isVarArg":false,"name":"extents","type":"Vector"},{"default":"","description":"The {{Enum|CONTENTS}} mask","isOptional":false,"isVarArg":false,"name":"mask","type":"CONTENTS"}],"description":"Allows you to override trace result when a trace hits the entitys Bounding Box.<br/><br/>\n{{Note|Your entity must have {{ClassFunction|Entity|EnableCustomCollisions}} enabled for this hook to work}}","examples":[{"code":"function ENT:TestCollision( startpos, delta, isbox, extents )\n\n        if ( isbox ) then return end\n        if ( !widgets.Tracing ) then return end\n        \n        -- TODO. Actually trace against our cube!\n        \n        return \n        { \n                HitPos                = self:GetPos(),\n                Fraction        = 0.5 * self:GetPriority()\n        }\n\nend","description":"Example taken from lua/entities/widget_base.lua"}],"isConstructor":false,"name":"TestCollision","realm":"shared","returns":[{"description":"A table containing new HitPos, Fraction and Normal. Returning nothing allows the trace to ignore the entity completely.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Called every frame on the client.\nCalled every tick on the server.\n\n{{Note|By default, it runs about 5-6 times per second on the server, but you can force it to run at servers tickrate using the example below.}}","examples":[{"code":"function ENT:Think()\n\t-- Do stuff\n\n\tself:NextThink( CurTime() )\n\treturn true\nend","description":"Force the think hook to run at the maximum frequency.\nThis is generally only useable for anim entities, if the entity has any animations."}],"isConstructor":false,"name":"Think","realm":"shared","returns":[{"description":"Return true if you used {{ClassFunction|Entity|NextThink}} to override the next execution time.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity that touched it.","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"}],"description":"Called every tick for every entity being \"touched\".\n\nSee also {{HookFunction|ENTITY|StartTouch}} and {{HookFunction|ENTITY|EndTouch}}.\n\n{{Warning|This only works for '''brush''' entities and for entities that have {{ClassFunction|Entity|SetTrigger}} set to true.}}\n\n{{Note|For physics enabled entities, this hook will '''not''' be ran while the entity's physics is asleep. See {{ClassFunction|PhysObj|Wake}}.}}","examples":[{"code":"function ENTITY:Touch(entity)\n\tself:EmitSound(\"ambient/explosions/explode_\" .. math.random(1, 9) .. \".wav\")\n\tself:Remove()\nend","description":""}],"isConstructor":false,"name":"Touch","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of output to fire","isOptional":false,"isVarArg":false,"name":"output","type":"string"},{"default":"","description":"Activator entity","isOptional":false,"isVarArg":false,"name":"activator","type":"Entity"},{"default":"nil","description":"The data to give to the output.","isOptional":true,"isVarArg":false,"name":"data","type":"string"}],"description":"Triggers all outputs stored using {{HookFunction|ENTITY|StoreOutput}}.","examples":[],"isConstructor":false,"name":"TriggerOutput","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called whenever the transmit state should be updated.","examples":[{"code":"function ENT:Touch( other )\n\tif ( self.NextRespawn > CurTime() ) then return end\n\t\n\tself.NextRespawn = CurTime() + 5\n\tself:AddEFlags( EFL_FORCE_CHECK_TRANSMIT )\nend\n\nfunction ENT:UpdateTransmitState()\n\tif ( self.NextRespawn > CurTime() ) then\n\t\treturn TRANSMIT_NEVER\n\tend\n\t\n\treturn TRANSMIT_PVS\nend\n\nfunction ENT:Think()\n\tif ( self.NextRespawn != -1 && self.NextRespawn < CurTime() ) then\n\t\tself.NextRespawn = -1\n\t\tself:AddEFlags( EFL_FORCE_CHECK_TRANSMIT )\n\tend\nend","description":"Entity pickup example, stops the entity from being networked after it's been picked up, and restores it once it \"respawns\"."}],"isConstructor":false,"name":"UpdateTransmitState","realm":"server","returns":[{"description":"Transmit state to set, see {{Enum|TRANSMIT}}.","type":"TRANSMIT"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The initial cause for the input getting triggered. This can be different from the caller in some cases.","isOptional":false,"isVarArg":false,"name":"activator","type":"Entity"},{"default":"","description":"The entity originally responsible for the input. Typically you should use this if you're checking for which player pressed +use.","isOptional":false,"isVarArg":false,"name":"caller","type":"Entity"},{"default":"","description":"Use type, see {{Enum|USE}}.","isOptional":false,"isVarArg":false,"name":"useType","type":"USE"},{"default":"","description":"Any passed value.","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Called when another entity uses this entity, example would be a player pressing \"+use\" this entity.\n\nTo change how often the function is called, see {{ClassFunction|Entity|SetUseType}}.","examples":[{"code":"function ENT:Use( activator, caller )\n\tif IsValid(caller) and caller:IsPlayer() then \n\t\tcaller:Kill()\n\tend\nend","description":"Kills any player that uses this entity."}],"isConstructor":false,"name":"Use","realm":"server","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"Entity"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A tab oriented control where you can create multiple tabs with items within. Used mainly for organization.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 500, 300 )\nframe:Center()\nframe:MakePopup()\n\nlocal sheet = vgui.Create( \"DPropertySheet\", frame )\nsheet:Dock( FILL )\n\nlocal panel1 = vgui.Create( \"DPanel\", sheet )\npanel1.Paint = function( self, w, h ) draw.RoundedBox( 4, 0, 0, w, h, Color( 0, 128, 255, self:GetAlpha() ) ) end \nsheet:AddSheet( \"test\", panel1, \"icon16/cross.png\" )\n\nlocal panel2 = vgui.Create( \"DPanel\", sheet )\npanel2.Paint = function( self, w, h ) draw.RoundedBox( 4, 0, 0, w, h, Color( 255, 128, 0, self:GetAlpha() ) ) end \nsheet:AddSheet( \"test 2\", panel2, \"icon16/tick.png\" )","description":"Example of how you'd create and use this panel."}],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Name of the tab","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Panel to be used as contents of the tab. This normally should be a {{Type|DPanel}}","isOptional":false,"isVarArg":false,"name":"pnl","type":"DPanel"},{"default":"nil","description":"Icon for the tab. This will ideally be a [[Silkicons|silkicon]], but any material name can be used.","isOptional":true,"isVarArg":false,"name":"icon","type":"string"},{"default":"false","description":"Should {{Type|DPropertySheet}} try to fill itself with given panel horizontally.","isOptional":true,"isVarArg":false,"name":"noStretchX","type":"DPropertySheet"},{"default":"false","description":"Should {{Type|DPropertySheet}} try to fill itself with given panel vertically.","isOptional":true,"isVarArg":false,"name":"noStretchY","type":"DPropertySheet"},{"default":"nil","description":"Tooltip for the tab when user hovers over it with his cursor","isOptional":true,"isVarArg":false,"name":"tooltip","type":"string"}],"description":"Adds a new tab.","examples":[{"code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize( ScrW() / 2, ScrH() / 2 )\nframe:SetTitle( \"Test Frame\" )\nframe:MakePopup()\nframe:Center()\n\nlocal tabs = vgui.Create( \"DPropertySheet\", frame )\ntabs:Dock( FILL )\n\nlocal tab1panel = vgui.Create( \"DPanel\" )\n\nlocal SheetItem = vgui.Create( \"DButton\", tab1panel )\nSheetItem:SetText( \"Suicide\" )\nSheetItem:SetConsoleCommand( \"kill\" )\n \ntabs:AddSheet( \"Tab 1\", tab1panel, \"icon16/user.png\", false, false, \"Description of first tab\")","description":""}],"isConstructor":false,"name":"AddSheet","realm":"client","returns":[{"description":"A table containing the following keys:\n* {{FuncArg|Panel|Tab|The created {{Type|DTab}}.}}\n* {{FuncArg|string|Name|Name of the created tab}}\n* {{FuncArg|Panel|Panel|The contents panel of the tab}}","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|DTab}} of the sheet from {{Type|DPropertySheet}}.\n\nSee {{ClassFunction|DPropertySheet|GetItems}}.","isOptional":false,"isVarArg":false,"name":"tab","type":"DTab | DPropertySheet"},{"default":"","description":"Set to true to remove the associated panel object as well.","isOptional":false,"isVarArg":false,"name":"removePanel","type":"boolean"}],"description":"Removes tab and/or panel from the parent DPropertySheet.","examples":[],"isConstructor":false,"name":"CloseTab","realm":"client","returns":[{"description":"The panel of the tab.","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"anim","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"delta","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"data","type":"table"}],"description":"{{Internal}}\n\nInternal function that handles the cross fade animation when the player switches tabs.","examples":[],"isConstructor":false,"name":"CrossFade","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the active {{Type|DTab}} of this {{Type|DPropertySheet}}.","examples":[],"isConstructor":false,"name":"GetActiveTab","realm":"client","returns":[{"description":"The {{Type|DTab}}","type":"DTab"}]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of time (in seconds) it takes to fade between tabs.\n\nSet by {{ClassFunction|DPropertySheet|SetFadeTime}}","examples":[],"isConstructor":false,"name":"GetFadeTime","realm":"client","returns":[{"description":"The amount of time (in seconds) it takes to fade between tabs.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns a list of all tabs of this {{Type|DPropertySheet}}.","examples":[],"isConstructor":false,"name":"GetItems","realm":"client","returns":[{"description":"A table of tables.\n\nEach table contains 3 key-value pairs:<br/>\n{{FuncArg|string|Name|The name of the tab.}}<br/>\n{{FuncArg|Panel|Tab|The {{Type|DTab}} associated with the tab}}<br/>\n{{FuncArg|Panel|Panel|The {{Type|Panel}} associated with the tab}}<br/>\n<br/>","type":"table[]"}]},{"accessModifier":"public","arguments":[],"description":"Gets the padding from the parent panel to child panels.","examples":[],"isConstructor":false,"name":"GetPadding","realm":"client","returns":[{"description":"Padding","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nReturns whatever value was set by {{ClassFunction|DPropertySheet|SetShowIcons}}.","examples":[],"isConstructor":false,"name":"GetShowIcons","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The previously active {{Type|DTab}}","isOptional":false,"isVarArg":false,"name":"old","type":"DTab"},{"default":"","description":"The newly active {{Type|DTab}}","isOptional":false,"isVarArg":false,"name":"newVal","type":"DTab"}],"description":"Called when a player switches the tabs","examples":[],"isConstructor":false,"name":"OnActiveTabChanged","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|DTab}} to set active.\n\nSee {{ClassFunction|DPropertySheet|GetItems}}","isOptional":false,"isVarArg":false,"name":"tab","type":"DTab"}],"description":"Sets the active tab of the {{Type|DPropertySheet}}.","examples":[],"isConstructor":false,"name":"SetActiveTab","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"0.1","description":"The amount of time it takes (in seconds) to fade between tabs.","isOptional":true,"isVarArg":false,"name":"time","type":"number"}],"description":"Sets the amount of time (in seconds) it takes to fade between tabs.","examples":[{"code":"DPropertySheet.SetFadeTime(0.5)","description":"Sets the fade time to 0.5 seconds (500 milliseconds)"},{"code":"DPropertySheet.SetFadeTime(2)","description":"Sets the fade time to 2 seconds (2000 milliseconds)"}],"isConstructor":false,"name":"SetFadeTime","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"8","description":"Amount of padding","isOptional":true,"isVarArg":false,"name":"padding","type":"number"}],"description":"Sets the padding from parent panel to children panel.","examples":[],"isConstructor":false,"name":"SetPadding","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"show","type":"boolean"}],"description":"{{Deprecated}}\n\nDoes nothing.","examples":[],"isConstructor":false,"name":"SetShowIcons","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Callback function to be called when the close button is pressed.","isOptional":false,"isVarArg":false,"name":"func","type":"Function"}],"description":"Creates a close button on the right side of the {{Type|DPropertySheet}} that will run the given callback function when pressed.","examples":[],"isConstructor":false,"name":"SetupCloseButton","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Sets the width of the {{Type|DPropertySheet}} to fit the contents of all of the tabs.","examples":[],"isConstructor":false,"name":"SizeToContentWidth","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Case sensitive name of the tab.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Switches the active tab to a tab with given name.","examples":[],"isConstructor":false,"name":"SwitchToName","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DPropertySheet"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The net library is one of a number of ways to send data between the client and server. \n\nThe major advantages of the net library are the large size limit (64kb/message) and the ability to send data backwards - from the client to the server.\n\nRefer to [[Net Library Usage]] for a short introduction.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Sends the currently built net message to all connected players.\nMore information can be found in [[Net Library Usage]].","examples":[{"code":"net.Start(\"NETHOOK\")\n    net.WriteString(\"some text\")\nnet.Broadcast()","description":"Sends a packet to all players."}],"isConstructor":false,"name":"Broadcast","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the size of the current message in bytes.","examples":[],"isConstructor":false,"name":"BytesWritten","realm":"shared","returns":[{"description":"The amount of bytes written to the current net message.\nReturns nil if no net message has been started.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The message length, in bits.","isOptional":false,"isVarArg":false,"name":"length","type":"number"},{"default":"","description":"The player that sent the message. This will be nil in the client state.","isOptional":false,"isVarArg":false,"name":"client","type":"Player"}],"description":"{{Internal|You may be looking for {{LibraryFunction|net|Receive}}.}}\nFunction called by the engine to tell the lua state a message arrived.","examples":[],"isConstructor":false,"name":"Incoming","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Reads an angle from the received net message.\n{{Warning|You '''must''' read information in same order as you write it.}}","examples":[],"isConstructor":false,"name":"ReadAngle","realm":"shared","returns":[{"description":"The read angle, or Angle(0,0,0) if no angle could be read","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Reads a bit from the received net message.\n\n{{Warning|You '''must''' read information in same order as you write it.}}","examples":[],"isConstructor":false,"name":"ReadBit","realm":"shared","returns":[{"description":"0 or 1, or 0 if the bit could not be read.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Reads a boolean from the received net message.\n{{Warning|You '''must''' read information in same order as you write it.}}","examples":[],"isConstructor":false,"name":"ReadBool","realm":"shared","returns":[{"description":"true or false, or false if the bool could not be read.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Reads a {{Struct|Color}} from the current net message.\n{{Warning|You '''must''' read information in same order as you write it.}}","examples":[],"isConstructor":false,"name":"ReadColor","realm":"shared","returns":[{"description":"The {{Struct|Color}} read from the current net message, or Color(0,0,0,0) if the color could not be read.","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The length of the data to be read, in bytes.","isOptional":false,"isVarArg":false,"name":"length","type":"number"}],"description":"Reads pure binary data from the message.\n{{Warning|You '''must''' read information in same order as you write it.}}","examples":[],"isConstructor":false,"name":"ReadData","realm":"shared","returns":[{"description":"The binary data read, or a string containing one character with a byte of 0 if no data could be read.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Reads a double-precision number from the received net message.\n{{Warning|You '''must''' read information in same order as you write it.}}","examples":[],"isConstructor":false,"name":"ReadDouble","realm":"shared","returns":[{"description":"The double-precision number, or 0 if no number could be read.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Reads an entity from the received net message. You should always check if the specified entity exists as it may have been removed and therefor NULL if it is outside of the players PVS or was already removed.\n{{Warning|You '''must''' read information in same order as you write it.}}","examples":[],"isConstructor":false,"name":"ReadEntity","realm":"shared","returns":[{"description":"The entity, or Entity(0) if no entity could be read.","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Reads a floating point number from the received net message.\n{{Warning|You '''must''' read information in same order as you write it.}}","examples":[],"isConstructor":false,"name":"ReadFloat","realm":"shared","returns":[{"description":"The floating point number, or 0 if no number could be read.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the \"header\" of the message which contains a short which can be converted to the corresponding message name via {{LibraryFunction|util|NetworkIDToString}}.","examples":[],"isConstructor":false,"name":"ReadHeader","realm":"shared","returns":[{"description":"The header number","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The amount of bits to be read.\n\nThis must be set to what you set to {{LibraryFunction|net|WriteInt}}. Read more information at {{LibraryFunction|net|WriteInt}}.","isOptional":false,"isVarArg":false,"name":"bitCount","type":"number"}],"description":"Reads an integer from the received net message.\n{{Warning|You '''must''' read information in same order as you write it.}}","examples":[],"isConstructor":false,"name":"ReadInt","realm":"shared","returns":[{"description":"The read integer number, or 0 if no integer could be read.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Reads a {{Type|VMatrix}} from the received net message.\n{{Warning|You '''must''' read information in same order as you write it.}}","examples":[],"isConstructor":false,"name":"ReadMatrix","realm":"shared","returns":[{"description":"The matrix, or an empty matrix if no matrix could be read.","type":"VMatrix"}]},{"accessModifier":"public","arguments":[],"description":"Reads a normal vector from the net message.\n{{Warning|You '''must''' read information in same order as you write it.}}","examples":[],"isConstructor":false,"name":"ReadNormal","realm":"shared","returns":[{"description":"The normalized vector ( length = 1 ), or Vector(0,0,1) if no normal could be read.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Reads a null terminated string from the net stream. The size of the string is 8 bits plus 8 bits for every ASCII character in the string.\n{{Warning|You '''must''' read information in same order as you write it.}}","examples":[],"isConstructor":false,"name":"ReadString","realm":"shared","returns":[{"description":"The read string, or a string with 0 length if no string could be read.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Reads a table from the received net message.\n\n{{Note|Sometimes when sending a table through the net library, the order of the keys may be switched. So be cautious when comparing (See Example 1).}}\n{{Warning|You '''must''' read information in same order as you write it.}}","examples":[{"code":"--Client:\nfunction SendTable()\n     local Table = {}\n     Table.Type = \"Dining\"\n     Table.Legs = 4\n     Table.Material = \"Wood\"\n     net.Start(\"TableSend\")\n      net.WriteTable(Table)\n     net.SendToServer()\n     PrintTable(Table) -- Prints the order client side\nend\n\n--Server:\nfunction GotTable(len, Player)\n     PrintTable(net.ReadTable()) -- Prints the order server side\nend\nnet.Receive(\"TableSend\", GotTable)","description":"This is an example of how the keys order may be switched:"}],"isConstructor":false,"name":"ReadTable","realm":"shared","returns":[{"description":"Table recieved via the net message, or a blank table if no table could be read.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"net.ReadUInt(8)","description":"The type of value to be read, using {{Enum|TYPE}}.","isOptional":true,"isVarArg":false,"name":"typeID","type":"TYPE"}],"description":"{{Internal|Used internally by {{LibraryFunction|net|ReadTable}}.}}\n\nReads a value from the net message with the specified type, written by {{LibraryFunction|net|WriteType}}.\n\n{{Warning|You '''must''' read information in same order as you write it.}}","examples":[],"isConstructor":false,"name":"ReadType","realm":"shared","returns":[{"description":"The value, or the respective blank value based on the type you're reading if the value could not be read.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The size of the integer to be read, in bits.","isOptional":false,"isVarArg":false,"name":"numberOfBits","type":"number"}],"description":"Reads an unsigned integer with the specified number of bits from the received net message.\n{{Warning|You '''must''' read information in same order as you write it.}}","examples":[],"isConstructor":false,"name":"ReadUInt","realm":"shared","returns":[{"description":"The unsigned integer read, or 0 if the integer could not be read.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Reads a vector from the received net message.  Vectors sent by this function are compressed, which may result in precision loss. See {{LibraryFunction|net|WriteVector}} for more information.\n{{Warning|You '''must''' read information in same order as you write it.}}","examples":[],"isConstructor":false,"name":"ReadVector","realm":"shared","returns":[{"description":"The read vector, or Vector(0,0,0) if no vector could be read.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The message name to hook to.","isOptional":false,"isVarArg":false,"name":"messageName","type":"string"},{"default":"","description":"The function to be called if the specified message was received. Arguments are:\n\n{{FuncArg|number|len|Length of the message, in bits}}\n{{FuncArg|Player|ply|The player that sent the message, works only serverside}}","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Adds a net message handler. Only one receiver can be used to receive the net message.\n{{Note|The message-name is converted to lower-case so the message-names \"''BigBlue''\" and \"''bigblue''\" would be equal.}}\n{{Warning|You '''must''' put this function '''outside''' of any other function or hook for it to work properly unless you know what you are doing!}}\n{{Warning|You '''must''' read information in the same order as you write it.}}\n{{Warning|Each net message has a length limit of 64KB!}}","examples":[{"code":"net.Receive( \"my_message\", function( len, pl )\n\tif ( IsValid( pl ) and pl:IsPlayer() ) then\n\t\tprint( \"Message from \" .. pl:Nick() .. \" received. Its length is \" .. len .. \".\" )\n\telse\n\t\tprint( \"Message from server received. Its length is \" .. len .. \".\" )\n\tend\nend )","description":"A simple callback"}],"isConstructor":false,"name":"Receive","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player(s) to send the message to. Can be a table of players or a {{Type|CRecipientFilter}}.","isOptional":false,"isVarArg":false,"name":"ply","type":"CRecipientFilter"}],"description":"Sends the current message to the specified player, or to all players listed in the table.","examples":[],"isConstructor":false,"name":"Send","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player(s) to NOT send the message to. Can be a table of players","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Sends the current message to all except the specified, or to all except all players in the table.","examples":[],"isConstructor":false,"name":"SendOmit","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"PAS position.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Sends the message to all players that are in the same potentially audible set(PAS) as the position, or simply said, it adds all players that can potentially hear sounds from this position.","examples":[],"isConstructor":false,"name":"SendPAS","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Position that must be in players' visibility set.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Sends the message to all players the position is in the PVS of or, more simply said, sends the message to players that can potentially see this position.","examples":[],"isConstructor":false,"name":"SendPVS","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Sends the current message to the server.","examples":[{"code":"net.Start( \"hello_world\" )\n\tnet.WriteString( \"Hi\" )\nnet.SendToServer()","description":"Sends a simple \"hello_world\" message with the string \"Hi\" to the server"}],"isConstructor":false,"name":"SendToServer","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the message to send","isOptional":false,"isVarArg":false,"name":"messageName","type":"string"},{"default":"false","description":"If set to true, the message is not guaranteed to reach its destination","isOptional":true,"isVarArg":false,"name":"unreliable","type":"boolean"}],"description":"Begins a new net message. If another net message is already started and hasn't been sent yet, it will be discarded.\n\n{{Warning|Each net message has a length limit of 64KB!}}\n\n{{Warning|The message name must be pooled with {{LibraryFunction|util|AddNetworkString}} beforehand!}}","examples":[],"isConstructor":false,"name":"Start","realm":"shared","returns":[{"description":"True if the message has been started.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The angle to be sent.","isOptional":false,"isVarArg":false,"name":"angle","type":"Angle"}],"description":"Writes an angle to the current net message.","examples":[],"isConstructor":false,"name":"WriteAngle","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Bit status (false = 0, true = 1)","isOptional":false,"isVarArg":false,"name":"boolean","type":"boolean"}],"description":"Appends a boolean (as 1 or 0) to the current net message.\n\nPlease note that the bit is written here from a {{Type|boolean}} (true/false) but {{LibraryFunction|net|ReadBit}} returns a number.","examples":[],"isConstructor":false,"name":"WriteBit","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Boolean value to write","isOptional":false,"isVarArg":false,"name":"boolean","type":"boolean"}],"description":"Appends a boolean to the current net message. Alias of {{LibraryFunction|net|WriteBit}}","examples":[],"isConstructor":false,"name":"WriteBool","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Struct|Color}} you want to append to the net message.","isOptional":false,"isVarArg":false,"name":"Color","type":"Color"}],"description":"Appends a {{Struct|Color}} to the current net message.","examples":[],"isConstructor":false,"name":"WriteColor","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The binary data to be sent.","isOptional":false,"isVarArg":false,"name":"binaryData","type":"string"},{"default":"","description":"The length of the binary data to be sent, in bytes.","isOptional":false,"isVarArg":false,"name":"length","type":"number"}],"description":"Writes a chunk of binary data to the message.","examples":[],"isConstructor":false,"name":"WriteData","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The double to be sent","isOptional":false,"isVarArg":false,"name":"double","type":"number"}],"description":"Appends a double-precision number to the current net message.","examples":[],"isConstructor":false,"name":"WriteDouble","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to be sent.","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"}],"description":"Appends an entity to the current net message.","examples":[],"isConstructor":false,"name":"WriteEntity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The float to be sent.","isOptional":false,"isVarArg":false,"name":"float","type":"number"}],"description":"Appends a float (number with decimals) to the current net message.","examples":[],"isConstructor":false,"name":"WriteFloat","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The integer to be sent.","isOptional":false,"isVarArg":false,"name":"integer","type":"number"},{"default":"","description":"The amount of bits the number consists of. This must be 32 or less.\n\nIf you are unsure what to set, just set it to 32.\n\n{{{!}} class=\"mw-collapsible mw-collapsed wikitable\"\n{{!}}+Consult the table below to determine the bit count you need.\n! Bit Count\n! Minimum value\n! Maximum value\n{{!}}-\n{{!}} 2\n{{!}} -2\n{{!}} 1\n{{!}}-\n{{!}}  3\n{{!}} -4\n{{!}} 3\n{{!}}-\n{{!}}  4\n{{!}} -8\n{{!}} 7\n{{!}}-\n{{!}}  5\n{{!}} -16\n{{!}} 15\n{{!}}-\n{{!}}  6\n{{!}} -32\n{{!}} 31\n{{!}}-\n{{!}}  7\n{{!}} -64\n{{!}} 63\n{{!}}-\n{{!}}  8\n{{!}} -128\n{{!}} 127\n{{!}}-\n{{!}}  9\n{{!}} -256\n{{!}} 255\n{{!}}-\n{{!}}  10\n{{!}} -512\n{{!}} 511\n{{!}}-\n{{!}}  11\n{{!}} -1024\n{{!}} 1023\n{{!}}-\n{{!}}  12\n{{!}} -2048\n{{!}} 2047\n{{!}}-\n{{!}}  13\n{{!}} -4096\n{{!}} 4095\n{{!}}-\n{{!}}  14\n{{!}} -8192\n{{!}} 8191\n{{!}}-\n{{!}}  15\n{{!}} -16384\n{{!}} 16383\n{{!}}-\n{{!}}  16\n{{!}} -32768\n{{!}} 32767\n{{!}}-\n{{!}}  17\n{{!}} -65536\n{{!}} 65535\n{{!}}-\n{{!}}  18\n{{!}} -131072\n{{!}} 131071\n{{!}}-\n{{!}}  19\n{{!}} -262144\n{{!}} 262143\n{{!}}-\n{{!}}  20\n{{!}} -524288\n{{!}} 524287\n{{!}}-\n{{!}}  21\n{{!}} -1048576\n{{!}} 1048575\n{{!}}-\n{{!}}  22\n{{!}} -2097152\n{{!}} 2097151\n{{!}}-\n{{!}}  23\n{{!}} -4194304\n{{!}} 4194303\n{{!}}-\n{{!}}  24\n{{!}} -8388608\n{{!}} 8388607\n{{!}}-\n{{!}}  25\n{{!}} -16777216\n{{!}} 16777215\n{{!}}-\n{{!}}  26\n{{!}} -33554432\n{{!}} 33554431\n{{!}}-\n{{!}}  27\n{{!}} -67108864\n{{!}} 67108863\n{{!}}-\n{{!}}  28\n{{!}} -134217728\n{{!}} 134217727\n{{!}}-\n{{!}}  29\n{{!}} -268435456\n{{!}} 268435455\n{{!}}-\n{{!}}  30\n{{!}} -536870912\n{{!}} 536870911\n{{!}}-\n{{!}}  31\n{{!}} -1073741824\n{{!}} 1073741823\n{{!}}-\n{{!}}  32\n{{!}} -2147483648\n{{!}} 2147483647\n{{!}}}","isOptional":false,"isVarArg":false,"name":"bitCount","type":"number"}],"description":"Appends an integer - a whole number - to the current net message. Can be read back with {{LibraryFunction|net|ReadInt}} on the receiving end.\n\nUse {{LibraryFunction|net|WriteUInt}} to send an unsigned number (that you know will never be negative). Use {{LibraryFunction|net|WriteFloat}} for a non-whole number (e.g. 2.25).","examples":[{"code":"--Client\nfunction SendAge()\n     net.Start(\"SendAge\")\n     net.WriteInt(3, 3)  -- Only 2 bits are needed to store the number '3', but we add one because of the rule.\n     net.SendToServer()\nend\n\n--Server\nutil.AddNetworkString(\"SendAge\")\n\nlocal function GetAge(len, ply)\n     local age = net.ReadInt(3) -- use the same number of bits that were written\n     print(\"Player \" .. ply:Nick() .. \" is \" .. age .. \" years old.\"\nend\nnet.Receive(\"SendAge\", GetAge)","description":"Sends the server the client's age."}],"isConstructor":false,"name":"WriteInt","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The matrix to be sent.","isOptional":false,"isVarArg":false,"name":"matrix","type":"VMatrix"}],"description":"Writes a {{Type|VMatrix}} to the current net message.","examples":[],"isConstructor":false,"name":"WriteMatrix","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The normalized/direction vector to be send.","isOptional":false,"isVarArg":false,"name":"normal","type":"Vector"}],"description":"Writes a normalized/direction vector ( Vector with length of 1 ) to the net message.\n\nThis function uses less bandwidth compared to {{LibraryFunction|net|WriteVector}} and will not send vectors with length of > 1 properly.","examples":[{"code":"if ( SERVER ) then\n\tutil.AddNetworkString( \"test1\" )\n\tutil.AddNetworkString( \"test2\" )\n\t\n\ttimer.Simple( 1, function()\n\t\tnet.Start( \"test1\" )\n\t\t\tnet.WriteVector( Vector( 1.23456789, 2.3456789, 3.456789 ) )\n\t\tnet.Broadcast()\n\t\n\t\tnet.Start( \"test2\" )\n\t\t\tnet.WriteNormal( Vector( 1.23456789, 2.3456789, 3.456789 ) )\n\t\tnet.Broadcast()\n\n\t\tnet.Start( \"test2\" )\n\t\t\tnet.WriteNormal( Vector( 1.23456789, 2.3456789, 3.456789 ):GetNormalized() )\n\t\tnet.Broadcast()\n\t\n\t\tnet.Start( \"test2\" )\n\t\t\tnet.WriteNormal( Vector( 0.5, -0.5, 0.23 ) )\n\t\tnet.Broadcast()\n\tend )\nelse\n\tnet.Receive( \"test1\", function( ... )\n\t\tprint( ... ) \n\t\tprint( net.ReadVector() ) \n\tend )\n\t\n\tnet.Receive( \"test2\", function( ... )\n\t\tprint( ... ) \n\t\tprint( net.ReadNormal() ) \n\tend )\nend","description":"Showcases the difference between this function and {{LibraryFunction|net|WriteVector}}."}],"isConstructor":false,"name":"WriteNormal","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to be sent.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Appends a string to the current net message. The size of the string is 8 bits plus 8 bits for every ASCII character in the string. The maximum allowed length of a single written string is 65533 characters.","examples":[],"isConstructor":false,"name":"WriteString","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to be sent.","isOptional":false,"isVarArg":false,"name":"table","type":"table"}],"description":"Appends a table to the current net message. Adds 16 extra bits per key/value pair so you're better off writing each individual key/value as the exact type if possible.\n\n{{Warning|All net messages have a 64kb buffer. This function will not check or error when that buffer is overflown. You might want to consider using {{LibraryFunction|util|TableToJSON}} and {{LibraryFunction|util|Compress}} and send the resulting string in 60kb chunks, doing the opposite on the receiving end.}}","examples":[],"isConstructor":false,"name":"WriteTable","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The data to be sent","isOptional":false,"isVarArg":false,"name":"Data","type":"any"}],"description":"{{Internal|Used internally by {{LibraryFunction|net|WriteTable}}.}}\n\nAppends any type of value to the current net message.\n\n{{Note|An additional 8-bit unsigned integer indicating the type will automatically be written to the packet before the value, in order to facilitate reading with {{LibraryFunction|net|ReadType}}. If you know the data type you are writing, use a function meant for that specific data type to reduce amount of data sent.}}","examples":[],"isConstructor":false,"name":"WriteType","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The unsigned integer to be sent.","isOptional":false,"isVarArg":false,"name":"unsignedInteger","type":"number"},{"default":"","description":"The size of the integer to be sent, in bits. Acceptable values range from any number 1 to 32 inclusive. For reference, 1 = bit, 4 = nibble, 8 = byte, 16 = short, 32 = long.","isOptional":false,"isVarArg":false,"name":"numberOfBits","type":"number"}],"description":"Appends an unsigned integer with the specified number of bits to the current net message.","examples":[],"isConstructor":false,"name":"WriteUInt","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The vector to be sent.","isOptional":false,"isVarArg":false,"name":"vector","type":"Vector"}],"description":"Appends a vector to the current net message.\nVectors sent by this function are compressed, which may result in precision loss.  XYZ components greater than 16384 or less than -16384 are irrecoverably altered (most significant bits are trimmed) and precision after the decimal point is low.","examples":[{"code":"if SERVER then\n\n    util.AddNetworkString(\"testingvecs\")\n    function testvecs_sv()\n        net.Start(\"testingvecs\")\n        net.WriteVector(Vector(10000, 20000, -20000.123456789))\n        net.Broadcast()\n    end\n    concommand.Add(\"dovectest\", testvecs_sv)\n\nelseif CLIENT then\n\n    function testvecs_cl(len)\n        print(\"RECV: vec = \" .. tostring(net.ReadVector()) .. \"\\n\")\n    end\n    net.Receive(\"testingvecs\", testvecs_cl)\n\nend","description":"Create a serverside command to send a vector to all clients, and a function to receive the vector on the clientside.  This example displays the vector compression discussed above."}],"isConstructor":false,"name":"WriteVector","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"net"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"DRGBPicker is an interactive panel which can be used to select a color hue.\n\nSee {{Type|DColorCube}} for a color picker which controls brightness and saturation.\n\nSee {{Type|DColorMixer}} for a color picker that allows control over hue, saturation, and brightness at once.","examples":[{"code":"-- Background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(100, 200)\nBGPanel:Center()\n\n-- Color picker\nlocal color_picker = vgui.Create(\"DRGBPicker\", BGPanel)\ncolor_picker:SetPos(35, 10)\ncolor_picker:SetSize(30, 180)\n\n-- When the picked color is changed...\nfunction color_picker:OnChange(col)\n\n\t-- Change the panel background color\n\tBGPanel:SetBackgroundColor(col)\n\t\nend","description":"Creates a color picker which controls the color of the background panel it's parented to."},{"code":"-- Background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(200, 200)\nBGPanel:Center()\n\n-- Color label\nlocal color_label = Label(\"Color( 255, 255, 255 )\", BGPanel)\ncolor_label:SetPos(40, 160)\ncolor_label:SetSize(150, 20)\ncolor_label:SetHighlight(true)\ncolor_label:SetColor(Color(0, 0, 0))\n\n-- Color picker\nlocal color_picker = vgui.Create(\"DRGBPicker\", BGPanel)\ncolor_picker:SetPos(5, 5)\ncolor_picker:SetSize(30, 190)\n\n-- Color cube\nlocal color_cube = vgui.Create(\"DColorCube\", BGPanel)\ncolor_cube:SetPos(40, 5)\nolor_cube:SetSize(155, 155)\n\n-- When the picked color is changed...\nfunction color_picker:OnChange(col)\n\t\n\t-- Get the hue of the RGB picker and the saturation and vibrance of the color cube\n\tlocal h = ColorToHSV(col)\n\tlocal _, s, v = ColorToHSV(color_cube:GetRGB())\n\t\n\t-- Mix them together and update the color cube\n\tcol = HSVToColor(h, s, v)\n\tcolor_cube:SetColor(col)\n\t\n\t-- Lastly, update the background color and label\n\tUpdateColors(col)\n\t\t\nend\n\nfunction color_cube:OnUserChanged(col)\n\n\t-- Update background color and label\n\tUpdateColors(col)\n\nend\n\n-- Updates display colors, label, and clipboard text\nfunction UpdateColors(col)\n\n\tBGPanel:SetBackgroundColor(col)\n\tcolor_label:SetText(\"Color( \"..col.r..\", \"..col.g..\", \"..col.b..\" )\")\n\tcolor_label:SetColor(Color((255-col.r), (255-col.g), (255-col.b)))\n\tSetClipboardText(color_label:GetText())\n\nend","description":"Creates a DRGBPicker that controls the hue of  a {{Type|DColorCube}}, which outputs the color to the background panel, label, and your copy/paste buffer."}],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The X coordinate on the texture to get the color from","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The Y coordinate on the texture to get the color from","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"{{Internal}}\n\nReturns the color at given position on the internal texture.","examples":[],"isConstructor":false,"name":"GetPosColor","realm":"client","returns":[{"description":"{{Struct|Color}}","type":"Color"},{"description":"The X-coordinate clamped to the texture's width.","type":"number"},{"description":"The Y-coordinate clamped to the texture's height.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the color currently set on the color picker.","examples":[{"code":"local color_picker = vgui.Create(\"DRGBPicker\")\ncolor_picker:SetSize(25, 150)\ncolor_picker:Center()\n\nprint(color_picker:GetRGB())","description":"Prints out the default set color."}],"isConstructor":false,"name":"GetRGB","realm":"client","returns":[{"description":"The color set on the color picker, see {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The color that is selected on the color picker ({{Struct|Color}} form).","isOptional":false,"isVarArg":false,"name":"col","type":"Color"}],"description":"Function which is called when the cursor is clicked and/or moved on the color picker. Meant to be overridden.","examples":[{"code":"-- Frame\nMainFrame = vgui.Create(\"DFrame\")\nMainFrame:SetSize(200, 200)\nMainFrame:Center()\nMainFrame:SetTitle(\"Pick a color\")\n\n-- Image of a ball\nlocal ball_img = vgui.Create(\"DImage\", MainFrame)\nball_img:SetPos(20, 45)\nball_img:SetSize(128, 128)\n\nball_img:SetImage(\"sprites/sent_ball\")\n\n-- Vertical color picker\nlocal color_picker = vgui.Create(\"DRGBPicker\", MainFrame)\ncolor_picker:SetPos(165, 30)\ncolor_picker:SetSize(25, 150)\n\nfunction color_picker:OnChange(col)\n\n\tball_img:SetImageColor(col)\n\t\nend","description":"Creates a color picker which controls the color of a ball image."}],"isConstructor":false,"name":"OnChange","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The color to set, see {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Sets the color stored in the color picker.\n\n{{Note|This function is meant to be called internally and will not update the position of the color picker line or call {{ClassFunction|DRGBPicker|OnChange}}}}","examples":[{"code":"-- Background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(100, 200)\nBGPanel:Center()\n\n-- Color picker\nlocal color_picker = vgui.Create(\"DRGBPicker\", BGPanel)\ncolor_picker:SetSize(30, 150)\ncolor_picker:Center()\n\n-- Custom function that sets color picker position and updates color\nfunction color_picker:SetColor(col)\n\n\t-- Get hue\n\tlocal h = ColorToHSV(col)\n\t\n\t-- Maximize saturation and vibrance\n\tcol = HSVToColor(h, 1, 1)\n\n\t-- Set color var\n\tself:SetRGB(col)\n\t\n\t-- Calculate position of color picker line\n\tlocal _, height = self:GetSize()\n\tself.LastY = height*(1-(h/360))\n\t\n\t-- Register that a change has occured\n\tself:OnChange(self:GetRGB())\n\nend\n\n-- Update background color\nfunction color_picker:OnChange(col)\n\n\tBGPanel:SetBackgroundColor(col)\n\nend\n\n-- Set to random color every second for 10 seconds\ntimer.Create(\"RandomizeColorPicker\", 1, 10, function ()\n\n\tcolor_picker:SetColor(Color(math.random(0, 255), math.random(0, 255), math.random(0, 255), 255))\n\t\nend)","description":"Defines a new function SetColor which will allow proper modification of the color picker directly."}],"isConstructor":false,"name":"SetRGB","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DRGBPicker"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}\n\nAn internal panel used by {{Type|DVScrollBar}} as the grip (middle) part of the scrollbar.","examples":[],"extends":"DPanel","functions":[],"isHook":false,"isPureAbstract":true,"name":"DScrollBarGrip"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"Used to display notifications on the screen (mid-right).","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The string to display","isOptional":false,"isVarArg":false,"name":"Text","type":"string"},{"default":"","description":"Determines the method for displaying the notification. See the {{Enum|NOTIFY}}","isOptional":false,"isVarArg":false,"name":"Type","type":"NOTIFY"},{"default":"","description":"The number of seconds to display the notification for","isOptional":false,"isVarArg":false,"name":"Length","type":"number"}],"description":"Adds a standard notification to your screen.","examples":[{"code":"notification.AddLegacy( \"Undone Prop\", NOTIFY_UNDO, 2 )\nsurface.PlaySound( \"buttons/button15.wav\" )\nMsg( \"Prop undone\\n\" )","description":"Adds a prop undo notification to the screen, like in Sandbox."}],"isConstructor":false,"name":"AddLegacy","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Can be any type. It's used as an index.","isOptional":false,"isVarArg":false,"name":"id","type":"any"},{"default":"","description":"The text to show","isOptional":false,"isVarArg":false,"name":"strText","type":"string"}],"description":"Adds a notification with an animated progress bar.","examples":[{"code":"notification.AddProgress(\"FileDownload\", \"Downloading file...\")\ntimer.Simple(3, function()\n\tnotification.Kill(\"FileDownload\")\nend)","description":"Add a notification that says \"Downloading file...\", and remove after three seconds."}],"isConstructor":false,"name":"AddProgress","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique ID of the notification","isOptional":false,"isVarArg":false,"name":"uid","type":"any"}],"description":"Removes the notification after 0.8 seconds.","examples":[],"isConstructor":false,"name":"Kill","realm":"client and menu","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"notification"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"This is the file object. It used used primarily to read or write binary data from files.\n\nThe object is returned by {{LibraryFunction|file|Open}}.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Dumps the file changes to disk and closes the file handle which makes the handle useless.","examples":[],"isConstructor":false,"name":"Close","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Dumps the file changes to disk and saves the file.","examples":[],"isConstructor":false,"name":"Flush","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Reads the specified amount of chars.","isOptional":false,"isVarArg":false,"name":"length","type":"number"}],"description":"Reads the specified amount of chars and returns them as a binary string.","examples":[{"code":"function file.Read( filename, path )\n\tif ( path == true ) then path = \"GAME\" end\n\tif ( path == nil or path == false ) then path = \"DATA\" end\n\n\tlocal f = file.Open( filename, \"r\", path )\n\tif ( !f ) then return end\n\tlocal str = f:Read( f:Size() )\n\tf:Close()\n\treturn str or \"\"\nend","description":"Adapted from extensions/file.lua"}],"isConstructor":false,"name":"Read","realm":"shared","returns":[{"description":"data","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Reads one byte of the file and returns whether that byte was not 0.","examples":[],"isConstructor":false,"name":"ReadBool","realm":"shared","returns":[{"description":"val","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Reads one unsigned 8-bit integer from the file.","examples":[],"isConstructor":false,"name":"ReadByte","realm":"shared","returns":[{"description":"The unsigned 8-bit integer from the file.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Reads 8 bytes from the file converts them to a double and returns them.","examples":[],"isConstructor":false,"name":"ReadDouble","realm":"shared","returns":[{"description":"value","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Reads 4 bytes from the file converts them to a float and returns them.","examples":[],"isConstructor":false,"name":"ReadFloat","realm":"shared","returns":[{"description":"value","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the contents of the file from the current position up until the end of the current line. This function will not return more than 8192 characters.","examples":[],"isConstructor":false,"name":"ReadLine","realm":"shared","returns":[{"description":"The string of data from the read line.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Reads a signed 32-bit integer from the file.","examples":[],"isConstructor":false,"name":"ReadLong","realm":"shared","returns":[{"description":"A signed 32-bit integer","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Reads a signed 16-bit integer from the file.","examples":[],"isConstructor":false,"name":"ReadShort","realm":"shared","returns":[{"description":"int16","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Reads a unsigned 32-bit integer from the file.","examples":[],"isConstructor":false,"name":"ReadULong","realm":"shared","returns":[{"description":"An unsigned 32-bit integer","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Reads a unsigned 16-bit integer from the file.","examples":[],"isConstructor":false,"name":"ReadUShort","realm":"shared","returns":[{"description":"The 16-bit integer","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Pointer position.","isOptional":false,"isVarArg":false,"name":"pos","type":"number"}],"description":"Sets the file pointer to the specified position.","examples":[],"isConstructor":false,"name":"Seek","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the size of the file in bytes.","examples":[],"isConstructor":false,"name":"Size","realm":"shared","returns":[{"description":"size","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The amount of chars to skip, can be negative to skip backwards.","isOptional":false,"isVarArg":false,"name":"amount","type":"number"}],"description":"Moves the file pointer by the specified amount of chars.","examples":[],"isConstructor":false,"name":"Skip","realm":"shared","returns":[{"description":"amount","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current position of the file pointer.","examples":[],"isConstructor":false,"name":"Tell","realm":"shared","returns":[{"description":"pos","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Binary data to write to the file.","isOptional":false,"isVarArg":false,"name":"data","type":"string"}],"description":"Writes the given string into the file.","examples":[],"isConstructor":false,"name":"Write","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The bool to be written to the file.","isOptional":false,"isVarArg":false,"name":"bool","type":"boolean"}],"description":"Writes a boolean value to the file as one '''byte'''.","examples":[],"isConstructor":false,"name":"WriteBool","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The 8-bit unsigned integer to be written to the file.","isOptional":false,"isVarArg":false,"name":"uint8","type":"number"}],"description":"Write an 8-bit unsigned integer to the file.","examples":[],"isConstructor":false,"name":"WriteByte","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The double to be written to the file.","isOptional":false,"isVarArg":false,"name":"double","type":"number"}],"description":"Writes a 8byte floating point double to the file.","examples":[],"isConstructor":false,"name":"WriteDouble","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The float to be written to the file.","isOptional":false,"isVarArg":false,"name":"float","type":"number"}],"description":"Writes a 4byte float to the file.","examples":[],"isConstructor":false,"name":"WriteFloat","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The 32-bit signed integer to be written to the file.","isOptional":false,"isVarArg":false,"name":"int32","type":"number"}],"description":"Writes a 32-bit signed integer to the file.","examples":[],"isConstructor":false,"name":"WriteLong","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The 16-bit signed integer to be written to the file.","isOptional":false,"isVarArg":false,"name":"int16","type":"number"}],"description":"Writes a 16-bit signed integer to the file.","examples":[],"isConstructor":false,"name":"WriteShort","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The unsigned 32-bit integer to be written to the file.","isOptional":false,"isVarArg":false,"name":"uint32","type":"number"}],"description":"Writes an unsigned 32-bit integer to the file.","examples":[],"isConstructor":false,"name":"WriteULong","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The unsigned 16-bit integer to the file.","isOptional":false,"isVarArg":false,"name":"uint16","type":"number"}],"description":"Writes an unsigned 16-bit integer to the file.","examples":[],"isConstructor":false,"name":"WriteUShort","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"File"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The numpad module allows you to execute functions on a key press or release.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The player whose numpad should be simulated","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The key to press, see {{Enum|KEY}}","isOptional":false,"isVarArg":false,"name":"key","type":"KEY"},{"default":"","description":"Should this keypress pretend to be a from a gmod_button? (causes {{LibraryFunction|numpad|FromButton}} to return true)","isOptional":false,"isVarArg":false,"name":"isButton","type":"boolean"}],"description":"Activates numpad key owned by the player","examples":[],"isConstructor":false,"name":"Activate","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player whose numpad should be simulated","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The key to press, corresponding to {{Enum|KEY}}","isOptional":false,"isVarArg":false,"name":"key","type":"KEY"},{"default":"","description":"Should this keypress pretend to be a from a gmod_button? (causes {{LibraryFunction|numpad|FromButton}} to return true)","isOptional":false,"isVarArg":false,"name":"isButton","type":"boolean"}],"description":"Deactivates numpad key owned by the player","examples":[],"isConstructor":false,"name":"Deactivate","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns true during a function added with {{LibraryFunction| numpad|Register}} when the third argument to {{LibraryFunction|numpad|Activate}} is true.\n\nThis is caused when a numpad function is triggered by a button SENT being used.","examples":[],"isConstructor":false,"name":"FromButton","realm":"server","returns":[{"description":"wasButton","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player whose numpad should be watched","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The key, corresponding to {{Enum|KEY}}","isOptional":false,"isVarArg":false,"name":"key","type":"KEY"},{"default":"","description":"The name of the function to run, corresponding with the one used in {{LibraryFunction|numpad|Register}}","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Arguments to pass to the function passed to {{LibraryFunction|numpad|Register}}.","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Calls a function registered with {{LibraryFunction|numpad|Register}} when a player presses specified key.\n\nSee for key released action: {{LibraryFunction|numpad|OnUp}}","examples":[],"isConstructor":false,"name":"OnDown","realm":"server","returns":[{"description":"The impulse ID","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player whose numpad should be watched","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The key, corresponding to {{Enum|KEY}}","isOptional":false,"isVarArg":false,"name":"key","type":"KEY"},{"default":"","description":"The name of the function to run, corresponding with the one used in {{LibraryFunction|numpad|Register}}","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Arguments to pass to the function passed to {{LibraryFunction|numpad|Register}}.","isOptional":false,"isVarArg":true,"name":"args","type":"any"}],"description":"Calls a function registered with {{LibraryFunction|numpad|Register}} when a player releases specified key.\n\nSee for key pressed action: {{LibraryFunction|numpad|OnDown}}","examples":[],"isConstructor":false,"name":"OnUp","realm":"server","returns":[{"description":"The impulse ID","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique id of your action.","isOptional":false,"isVarArg":false,"name":"id","type":"string"},{"default":"","description":"The function to be executed.\n\nArguments are:<br>\n{{FuncArg|Player|ply|The player who pressed the button}}<br>\n{{FuncArg|vararg|...|The 4th and all subsequent arguments passed from {{LibraryFunction|numpad|OnDown}} and/or {{LibraryFunction|numpad|OnUp}}}}<br>\n<br>\n\nReturning <b>false</b> in this function will remove the listener which triggered this function (example: return false if one of your varargs is an entity which is no longer valid)","isOptional":false,"isVarArg":false,"name":"func","type":"Function"}],"description":"Registers a numpad library action for use with {{LibraryFunction|numpad|OnDown}} and {{LibraryFunction|numpad|OnUp}}","examples":[],"isConstructor":false,"name":"Register","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The impulse ID returned by {{LibraryFunction|numpad|OnUp}} or {{LibraryFunction|numpad|OnDown}}","isOptional":false,"isVarArg":false,"name":"ID","type":"number"}],"description":"Removes a function added by either {{LibraryFunction|numpad|OnUp}} or {{LibraryFunction|numpad|OnDown}}","examples":[],"isConstructor":false,"name":"Remove","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player whose numpad should be simulated","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"The key to press, corresponding to {{Enum|KEY}}","isOptional":false,"isVarArg":false,"name":"key","type":"KEY"}],"description":"Either runs {{LibraryFunction|numpad|Activate}} or {{LibraryFunction|numpad|Deactivate}} depending on the key's current state","examples":[],"isConstructor":false,"name":"Toggle","realm":"server","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"numpad"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"DScrollPanel is a VGUI Element similar to DPanel however it has a vertical scrollbar docked to the right which can be used to put more content in a smaller area. DScrollPanels are essentially {{Type|DPanel}}s with the Scroll Bar.\n\nThis can be used to replace the {{Type|DPanelList}} with {{ClassFunction|DPanelList|EnableVerticalScrollbar}} and get similar functionality as well as using a non-deprecated element.\n\nIf you would like to paint or edit the elements of the scrollbar use {{VGUIElementMethodInternal|GetVBar}}. If you want to see if the scrollbar is visible then use the VBar.Enabled variable on the scrollbar's VBar.\n\n{{Note|{{ClassFunction|Panel|DockPadding}} will not have an effect on children of this panel. Use the function on {{ClassFunction|DScrollPanel|GetCanvas}} instead.}}","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 500, 500 )\nframe:Center()\nframe:MakePopup()\n\nlocal DScrollPanel = vgui.Create( \"DScrollPanel\", frame )\nDScrollPanel:Dock( FILL )\n\nfor i=0, 100 do\n\tlocal DButton = DScrollPanel:Add( \"DButton\" )\n\tDButton:SetText( \"Button #\" .. i )\n\tDButton:Dock( TOP )\n\tDButton:DockMargin( 0, 0, 0, 5 )\nend","description":"Creates a {{Type|DScrollPanel}} and adds 100 {{Type|DButton}}s to it."}],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The panel to add.","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"Parents the passed panel to the DScrollPanel's canvas.","examples":[],"isConstructor":false,"name":"AddItem","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the canvas ( The panel all child panels are parented to ) of the DScrollPanel.","examples":[],"isConstructor":false,"name":"GetCanvas","realm":"client","returns":[{"description":"The canvas","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Gets the DScrollPanels padding","examples":[],"isConstructor":false,"name":"GetPadding","realm":"client","returns":[{"description":"DScrollPanels padding","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the vertical scroll bar of the panel.","examples":[{"code":"local DFrame = vgui.Create(\"DFrame\")\nDFrame:SetSize(500, 500)\nDFrame:Center()\nDFrame:MakePopup()\nDFrame:SetTitle(\"Scrollbar Example\")\nfunction DFrame:Paint(w, h)\n\tdraw.RoundedBox(0, 0, 0, w, h, Color(0, 100, 100))\nend\n\nlocal DScrollPanel = vgui.Create(\"DScrollPanel\", DFrame)\nDScrollPanel:SetSize(400, 250)\nDScrollPanel:Center()\n\nlocal sbar = DScrollPanel:GetVBar()\nfunction sbar:Paint(w, h)\n\tdraw.RoundedBox(0, 0, 0, w, h, Color(0, 0, 0, 100))\nend\nfunction sbar.btnUp:Paint(w, h)\n\tdraw.RoundedBox(0, 0, 0, w, h, Color(200, 100, 0))\nend\nfunction sbar.btnDown:Paint(w, h)\n\tdraw.RoundedBox(0, 0, 0, w, h, Color(200, 100, 0))\nend\nfunction sbar.btnGrip:Paint(w, h)\n\tdraw.RoundedBox(0, 0, 0, w, h, Color(100, 200, 0))\nend\n\nlocal str = \"\"\nfor i = 1, 50 do str = str .. \"more space!\\n\" end\n\nlocal DLabel = vgui.Create(\"DLabel\", DScrollPanel)\nDLabel:SetText(str)\nDLabel:Center()\nDLabel:SizeToContents()","description":"Example of styling a scrollbar"}],"isConstructor":false,"name":"GetVBar","realm":"client","returns":[{"description":"The {{Type|DVScrollBar}}.","type":"DVScrollBar"}]},{"accessModifier":"public","arguments":[],"description":"Return the width of the DScrollPanel's canvas.","examples":[],"isConstructor":false,"name":"InnerWidth","realm":"client","returns":[{"description":"The width of the DScrollPanel's canvas","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"Rebuild","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to scroll to, must be a child of the DScrollPanel.","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"}],"description":"Scrolls to the given child","examples":[],"isConstructor":false,"name":"ScrollToChild","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new canvas","isOptional":false,"isVarArg":false,"name":"canvas","type":"Panel"}],"description":"{{Internal}}Sets the canvas of the DScrollPanel.","examples":[],"isConstructor":false,"name":"SetCanvas","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The padding of the DScrollPanel.","isOptional":false,"isVarArg":false,"name":"padding","type":"number"}],"description":"Sets the DScrollPanel's padding. This function appears to be unused.","examples":[],"isConstructor":false,"name":"SetPadding","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DScrollPanel"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The os library is a standard Lua library originally intended to allow Lua access to various features of the Operating System it's running on, however many of the features and functions have been removed in Garry's Mod due to security issues. It's only used in Garry's Mod for date & time operations.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the approximate cpu time the application ran.","examples":[{"code":"print(os.clock())","description":"Prints the amount of time since Garry's Mod has been open to the console."}],"isConstructor":false,"name":"clock","realm":"shared and menu","returns":[{"description":"runtime","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The format string.\n\nIf this is equal to '*t' or '!*t' then this function will return a {{Struct|DateData}}, otherwise it will return a string.\n\nIf this starts with an '!', the returned data will use the UTC timezone rather than the local timezone.\n\nSee http://www.mkssoftware.com/docs/man3/strftime.3.asp for available format flags.\n\n{{Bug|Issue=3438|'''Not all flags are available on all operating systems''' and the result of using an invalid flag is undefined. This currently crashes the game on Windows. Most or all flags are available on OS X and Linux but considerably fewer are available on Windows. See http://msdn.microsoft.com/en-us/library/fe06s4ak.aspx for a list of available flags on Windows. Note that the '''#''' flags also crashes the game on Windows.}}","isOptional":false,"isVarArg":false,"name":"format","type":"string"},{"default":"","description":"Time to use for the format.","isOptional":false,"isVarArg":false,"name":"time","type":"number"}],"description":"Returns the date/time as a formatted string or in a table.","examples":[{"code":"local Timestamp = os.time()\nlocal TimeString = os.date( \"%H:%M:%S - %d/%m/%Y\" , Timestamp )\nprint( \"Timestamp:\", Timestamp )\nprint( \"TimeString:\", TimeString )","description":"This will use the os.time() function, and return it in a friendly way.\nos.time() is useful for storing as a date stamp but needs this to make it readable."}],"isConstructor":false,"name":"date","realm":"shared and menu","returns":[{"description":"Formatted date\n{{Note|This will be a {{Struct|DateData}} if the first argument equals to '*t' or '!*t'}}","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The first value.","isOptional":false,"isVarArg":false,"name":"timeA","type":"number"},{"default":"","description":"The value to subtract.","isOptional":false,"isVarArg":false,"name":"timeB","type":"number"}],"description":"Subtracts the second of the first value and rounds the result.","examples":[],"isConstructor":false,"name":"difftime","realm":"shared and menu","returns":[{"description":"diffTime","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"nil","description":"Table to generate the time from. This table's data is interpreted as being in the local timezone. See {{Struct|DateData}}","isOptional":true,"isVarArg":false,"name":"dateData","type":"DateData"}],"description":"Returns the system time in seconds past the unix epoch. If a table is supplied, the function attempts to build a system time with the specified table members.","examples":[{"code":"print( os.time() )","description":"Prints out the current time, in seconds past the unix epoch."}],"isConstructor":false,"name":"time","realm":"shared and menu","returns":[{"description":"Seconds passed since Unix epoch","type":"number"}]}],"isHook":false,"isPureAbstract":false,"name":"os"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The package library is a standard Lua library, it's mainly for use with the module system built into Lua.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The module table to be given a metatable","isOptional":false,"isVarArg":false,"name":"module","type":"table"}],"description":"Sets a metatable for module with its __index field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to {{GlobalFunction|module}}.","examples":[],"isConstructor":false,"name":"seeall","realm":"shared and menu","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"package"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Draw a shape on a derma panel. Only one kind of shape, a rectangle, is available for use.","examples":[{"code":"local Frame = vgui.Create( \"DFrame\" ) -- Create a frame \nFrame:SetTitle( \"Test panel\" )\nFrame:SetSize(400,400)\nFrame:Center()\t\t\t\nFrame:MakePopup()\n\nlocal Shape = vgui.Create( \"DShape\", Frame )\nShape:SetType( \"Rect\" ) -- This is the only type it can be\nShape:SetPos( 100, 100 ) \nShape:SetColor( Color(0, 255, 0, 255) )\nShape:SetSize( 200, 200 )","description":"Creates the DShape rectangle within a small popup frame"}],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the current type of shape this panel is set to display.\n\nSee {{ClassFunction|DShape|SetBorderColor}}.","examples":[],"isConstructor":false,"name":"GetBorderColor","realm":"client","returns":[{"description":"The border color \n\nSee {{Struct|Color}}","type":"Color"}]},{"accessModifier":"public","arguments":[],"description":"Returns the color set to display the shape with.","examples":[],"isConstructor":false,"name":"GetColor","realm":"client","returns":[{"description":"The {{Struct|Color}}","type":"Color"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current type of shape this panel is set to display.\n\nSee {{ClassFunction|DShape|SetType}}.","examples":[],"isConstructor":false,"name":"GetType","realm":"client","returns":[{"description":"","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The desired border color.\n\nSee {{Struct|Color}}","isOptional":false,"isVarArg":false,"name":"clr","type":"Color"}],"description":"Sets the border color of the shape.\n\nCurrently does nothing.","examples":[],"isConstructor":false,"name":"SetBorderColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Struct|Color}}","isOptional":false,"isVarArg":false,"name":"clr","type":"Color"}],"description":"Sets the color to display the shape with.","examples":[],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The render type of the DShape. Only rectangles (''Rect'') work currently. If you don't define a type immediately, the {{HookFunction|PANEL|Paint}} method will generate errors until you do.","isOptional":false,"isVarArg":false,"name":"type","type":"string"}],"description":"Sets the shape to be drawn.","examples":[{"code":"local Shape = vgui.Create( \"DShape\" )\nShape:SetType( \"Rect\" )\nShape:SetSize(500,500)\nShape:SetPos(10, 10)","description":"Creates a DShape and sets the render type."}],"isConstructor":false,"name":"SetType","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DShape"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A helper panel that will automatically resize itself to fit all its children using {{ClassFunction|Panel|SizeToChildren}}.","examples":[],"extends":"Panel","functions":[],"isHook":false,"isPureAbstract":true,"name":"DSizeToContents"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The physenv library allows you to control the physics environment created by the engine, and lets you modify constants such as gravity and maximum velocity.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The properties to add. Each one should include \"base\" or the game will crash due to some values being missing.","isOptional":false,"isVarArg":false,"name":"properties","type":"string"}],"description":"Adds surface properties to the game's physics environment.\n\n{{Bug|Issue=2604|The game has a limit of 128 surface properties - this includes properties loaded automatically from [https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt surfaceproperties.txt]. Due to this, there's only a small amount of open slots that can be registered with GMod's provided surfaceproperties.txt.}}","examples":[{"code":"physenv.AddSurfaceData([[\"scout_baseball\"\n{\n\t\"base\"\t\t\"rubber\"\n\n\t\"bulletimpact\"\t\"Weapon_Baseball.HitWorld\"\n\t\"scraperough\"\t\"Grenade.ScrapeRough\"\n\t\"scrapesmooth\"\t\"Grenade.ScrapeSmooth\"\n\t\"impacthard\"\t\"Weapon_Baseball.HitWorld\"\n\t\"impactsoft\"\t\"Weapon_Baseball.HitWorld\"\n\t\"rolling\"\t\"Grenade.Roll\"\n}]])","description":"Adds the \"\" surface property from TF2."}],"isConstructor":false,"name":"AddSurfaceData","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the air density.","examples":[],"isConstructor":false,"name":"GetAirDensity","realm":"shared","returns":[{"description":"airDensity","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the global gravity.","examples":[],"isConstructor":false,"name":"GetGravity","realm":"shared","returns":[{"description":"gravity","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Gets the current performance settings in table form.","examples":[],"isConstructor":false,"name":"GetPerformanceSettings","realm":"shared","returns":[{"description":"Performance settings. See {{Struct|PhysEnvPerformanceSettings}}","type":"PhysEnvPerformanceSettings"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The new air density.","isOptional":false,"isVarArg":false,"name":"airDensity","type":"number"}],"description":"Sets the air density.","examples":[],"isConstructor":false,"name":"SetAirDensity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new gravity.","isOptional":false,"isVarArg":false,"name":"gravity","type":"Vector"}],"description":"Sets the directional gravity, does not work on players.","examples":[],"isConstructor":false,"name":"SetGravity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new performance settings. See {{Struct|PhysEnvPerformanceSettings}}","isOptional":false,"isVarArg":false,"name":"performanceSettings","type":"PhysEnvPerformanceSettings"}],"description":"Sets the performance settings.","examples":[],"isConstructor":false,"name":"SetPerformanceSettings","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"physenv"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A sound channel returned by a callback of {{LibraryFunction|sound|PlayURL}} and {{LibraryFunction|sound|PlayFile}}.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Enable or disable looping of this audio channel.","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Enables or disables looping of audio channel, requires noblock flag.","examples":[],"isConstructor":false,"name":"EnableLooping","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to output the DFT magnitudes (numbers between 0 and 1) into. Indices start from 1.","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"},{"default":"","description":"The number of samples to use. See {{Enum|FFT}}","isOptional":false,"isVarArg":false,"name":"size","type":"FFT"}],"description":"Computes the [https://en.wikipedia.org/wiki/Discrete_Fourier_transform DFT (discrete Fourier transform)] of the sound channel.\n\nThe size parameter specifies the number of consecutive audio samples to use as the input to the DFT and is restricted to a power of two. A [https://en.wikipedia.org/wiki/Hann_function Hann window] is applied to the input data.\n\nThe computed DFT has the same number of frequency bins as the number of samples. Only half of this DFT is returned, since [https://en.wikipedia.org/wiki/Discrete_Fourier_transform#The_real-input_DFT the DFT magnitudes are symmetric for real input data]. The magnitudes of the DFT (values from 0 to 1) are used to fill the output table, starting at index 1.\n\n'''Visualization protip:''' For a size N DFT, bin k (1-indexed) corresponds to a frequency of (k - 1) / N * sampleRate.\n\n'''Visualization protip:''' Sound energy is proportional to the square of the magnitudes. Adding magnitudes together makes no sense physically, but adding energies does.\n\n'''Visualization protip:''' The human ear works on a logarithmic amplitude scale. You can convert to [https://en.wikipedia.org/wiki/Decibel decibels] by taking 20 log<sub>10</sub> of frequency magnitudes, or 10 log<sub>10</sub> of energy. The decibel values will range from -infinity to 0.","examples":[],"isConstructor":false,"name":"FFT","realm":"client","returns":[{"description":"The number of frequency bins that have been filled in the output table.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns 3D cone of the sound channel. See {{ClassFunction|IGModAudioChannel|Set3DCone}}.","examples":[],"isConstructor":false,"name":"Get3DCone","realm":"client","returns":[{"description":"The angle of the inside projection cone in degrees.","type":"number"},{"description":"The angle of the outside projection cone in degrees.","type":"number"},{"description":"The delta-volume outside the outer projection cone.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns 3D fade distances of a sound channel.","examples":[],"isConstructor":false,"name":"Get3DFadeDistance","realm":"client","returns":[{"description":"The minimum distance. The channel's volume is at maximum when the listener is within this distance","type":"number"},{"description":"The maximum distance. The channel's volume stops decreasing when the listener is beyond this distance","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the average bit rate of the sound channel.","examples":[],"isConstructor":false,"name":"GetAverageBitRate","realm":"client","returns":[{"description":"The average bit rate of the sound channel.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Retrieves the number of bits per sample of the sound channel.\n\nDoesn't work for mp3 and ogg files.","examples":[],"isConstructor":false,"name":"GetBitsPerSample","realm":"client","returns":[{"description":"Number of bits per sample, or 0 if unknown.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the filename for the sound channel.","examples":[],"isConstructor":false,"name":"GetFileName","realm":"client","returns":[{"description":"The file name. This will not be always what you have put into the {{LibraryFunction|sound|PlayURL}} as first argument.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the length of sound played by the sound channel.","examples":[],"isConstructor":false,"name":"GetLength","realm":"client","returns":[{"description":"The length of the sound. This value seems to be less then 0 for continuous radio streams.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the right and left levels of sound played by the sound channel.","examples":[],"isConstructor":false,"name":"GetLevel","realm":"client","returns":[{"description":"The left sound level. The value is between 0 and 1.","type":"number"},{"description":"The right sound level. The value is between 0 and 1.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the playback rate of the sound channel.","examples":[],"isConstructor":false,"name":"GetPlaybackRate","realm":"client","returns":[{"description":"The current playback rate of the sound channel","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns position of the sound channel","examples":[],"isConstructor":false,"name":"GetPos","realm":"client","returns":[{"description":"The position of the sound channel, previously set by {{ClassFunction|IGModAudioChannel|SetPos}}","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the sample rate for currently playing sound.","examples":[],"isConstructor":false,"name":"GetSamplingRate","realm":"client","returns":[{"description":"The sample rate in MHz. This should always be 44100.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the state of a sound channel","examples":[],"isConstructor":false,"name":"GetState","realm":"client","returns":[{"description":"The state of the sound channel, see {{Enum|GMOD_CHANNEL}}","type":"GMOD_CHANNEL"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current time of the sound channel","examples":[],"isConstructor":false,"name":"GetTime","realm":"client","returns":[{"description":"The current time of the stream","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns volume of a sound channel","examples":[],"isConstructor":false,"name":"GetVolume","realm":"client","returns":[{"description":"The volume of the sound channel","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the sound channel is in 3D mode or not.","examples":[],"isConstructor":false,"name":"Is3D","realm":"client","returns":[{"description":"Is 3D or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the audio stream is block streamed or not.","examples":[],"isConstructor":false,"name":"IsBlockStreamed","realm":"client","returns":[{"description":"Is the audio stream block streamed or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the sound channel is looping or not.","examples":[],"isConstructor":false,"name":"IsLooping","realm":"client","returns":[{"description":"Is looping or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the sound channel is streamed from the Internet or not.","examples":[],"isConstructor":false,"name":"IsOnline","realm":"client","returns":[{"description":"Is online or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the sound channel is valid or not.","examples":[],"isConstructor":false,"name":"IsValid","realm":"client","returns":[{"description":"Is the sound channel valid or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Pauses the stream. It can be started again using {{ClassFunction|IGModAudioChannel|Play}}","examples":[],"isConstructor":false,"name":"Pause","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Starts playing the stream.","examples":[],"isConstructor":false,"name":"Play","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The angle of the inside projection cone in degrees.<br/><br/>\nRange is from 0 (no cone) to 360 (sphere), -1 = leave current.","isOptional":false,"isVarArg":false,"name":"innerAngle","type":"number"},{"default":"","description":"The angle of the outside projection cone in degrees.<br/><br/>\nRange is from 0 (no cone) to 360 (sphere), -1 = leave current.","isOptional":false,"isVarArg":false,"name":"outerAngle","type":"number"},{"default":"","description":"The delta-volume outside the outer projection cone.<br/><br/>\nRange is from 0 (silent) to 1 (same as inside the cone), less than 0 = leave current.","isOptional":false,"isVarArg":false,"name":"outerVolume","type":"number"}],"description":"Sets 3D cone of the sound channel.","examples":[{"code":"Channel:Set3DCone( 360, 360, 0 )","description":"The default values"}],"isConstructor":false,"name":"Set3DCone","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum distance. The channel's volume is at maximum when the listener is within this distance.<br/><br/>\n0 or less = leave current.","isOptional":false,"isVarArg":false,"name":"min","type":"number"},{"default":"","description":"The maximum distance. The channel's volume stops decreasing when the listener is beyond this distance.<br/><br/>\n0 or less = leave current.","isOptional":false,"isVarArg":false,"name":"max","type":"number"}],"description":"Sets 3D fade distances of a sound channel.","examples":[{"code":"Channel:Set3DFadeDistance( 200, 1000000000 )","description":"The default values."}],"isConstructor":false,"name":"Set3DFadeDistance","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Playback rate to set to. 1 is normal speed, 0.5 is half the normal speed, etc.","isOptional":false,"isVarArg":false,"name":"rate","type":"number"}],"description":"Sets the playback rate of the sound channel. May not work with high values for radio streams.","examples":[],"isConstructor":false,"name":"SetPlaybackRate","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to put the sound into","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"Vector( 0, 0, 0 )","description":"The direction of the sound","isOptional":true,"isVarArg":false,"name":"dir","type":"Vector"}],"description":"Sets position of sound channel in case the sound channel has a 3d option set.","examples":[],"isConstructor":false,"name":"SetPos","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The time to set the stream to, in seconds.","isOptional":false,"isVarArg":false,"name":"secs","type":"number"}],"description":"Sets the sound channel to specified time ( Rewind to that position of the song ). Does not work on online radio streams.\n\nStreamed sounds must have \"noblock\" parameter for this to work.","examples":[],"isConstructor":false,"name":"SetTime","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Volume to set, a number between 0 and 1","isOptional":false,"isVarArg":false,"name":"volume","type":"number"}],"description":"Sets the volume of a sound channel","examples":[],"isConstructor":false,"name":"SetVolume","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Stop the stream. It can be started again using {{ClassFunction|IGModAudioChannel|Play}}.\n\n{{Bug|Issue=1497|Calling this invalidates the IGModAudioChannel object rendering it unusable for further functions.}}","examples":[],"isConstructor":false,"name":"Stop","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"IGModAudioChannel"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The player_manager library lets you manage players, such as setting their models or creating player classes.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Player model name","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Hands model","isOptional":false,"isVarArg":false,"name":"model","type":"string"},{"default":"","description":"Skin to apply to the hands","isOptional":false,"isVarArg":false,"name":"skin","type":"number"},{"default":"","description":"Bodygroups to apply to the hands","isOptional":false,"isVarArg":false,"name":"bodygroups","type":"string"}],"description":"Assigns view model hands to player model.","examples":[{"code":"player_manager.AddValidHands( \"hostage01\", \"models/weapons/c_arms_cstrike.mdl\", 0, \"10000000\" )\nplayer_manager.AddValidHands( \"hostage02\", \"models/weapons/c_arms_cstrike.mdl\", 0, \"10000000\" )\nplayer_manager.AddValidHands( \"hostage03\", \"models/weapons/c_arms_cstrike.mdl\", 0, \"10000000\" )\nplayer_manager.AddValidHands( \"hostage04\", \"models/weapons/c_arms_cstrike.mdl\", 0, \"10000000\" )","description":"Adds CS:S hands for hostage playermodels"}],"isConstructor":false,"name":"AddValidHands","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Simplified name","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Valid PlayerModel path","isOptional":false,"isVarArg":false,"name":"model","type":"string"}],"description":"Associates a simplified name with a path to a valid player model.<br/>\nOnly used internally.","examples":[],"isConstructor":false,"name":"AddValidModel","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the entire list of valid player models.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"AllValidModels","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player to clear class from","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Clears a player's class association by setting their ClassID to 0","examples":[{"code":"","description":""}],"isConstructor":false,"name":"ClearPlayerClass","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player to get class","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Gets a players class","examples":[],"isConstructor":false,"name":"GetPlayerClass","realm":"shared","returns":[{"description":"The players class","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Player to setup","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Applies basic class variables when the player spawns.\n\nCalled from {{HookFunction|GM|PlayerSpawn}} in the base gamemode.","examples":[{"code":"function OnPlayerSpawn( ply )\n\n local class = LookupPlayerClass( ply )\n if ( !class ) then return end\n\n ply:SetWalkSpeed( class.WalkSpeed )\n ply:SetRunSpeed( class.RunSpeed )\n ply:SetCrouchedWalkSpeed( class.CrouchedWalkSpeed )\n ply:SetDuckSpeed( class.DuckSpeed )\n ply:SetUnDuckSpeed( class.UnDuckSpeed )\n ply:SetJumpPower( class.JumpPower )\n ply:AllowFlashlight( class.CanUseFlashlight )\n ply:SetMaxHealth( class.MaxHealth )\n ply:SetHealth( class.StartHealth )\n ply:SetArmor( class.StartArmor )\n ply:ShouldDropWeapon( class.DropWeaponOnDie )\n ply:SetNoCollideWithTeammates( class.TeammateNoCollide )\n ply:SetAvoidPlayers( class.AvoidPlayers )\n\nend","description":"Source for player_manager.OnPlayerSpawn (from lua/includes/modules/player_manager.lua)"}],"isConstructor":false,"name":"OnPlayerSpawn","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Class name","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Class metatable","isOptional":false,"isVarArg":false,"name":"table","type":"table"},{"default":"","description":"Base class name","isOptional":false,"isVarArg":false,"name":"base","type":"string"}],"description":"Register a class metatable to be assigned to players later","examples":[{"code":"local PLAYER = {}\n\nPLAYER.DisplayName = \"Default Class\"\n\n...\n\nplayer_manager.RegisterClass( \"player_default\", PLAYER, nil )","description":"A quick look at registering a class table"},{"code":"PrintTable(baseclass.Get( \"player_default\" ))","description":"You can retrieve the data you've set when registering the table using baseclass.Get( \"<classname>\" )"}],"isConstructor":false,"name":"RegisterClass","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player to execute function on.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Name of function.","isOptional":false,"isVarArg":false,"name":"funcName","type":"string"},{"default":"","description":"Optional arguments. Can be of any type.","isOptional":false,"isVarArg":true,"name":"arguments","type":"any"}],"description":"Execute a named function within the player's set class","examples":[{"code":"function GM:PlayerLoadout( ply )\n\n\tplayer_manager.RunClass( ply, \"Loadout\" )\n \nend","description":"Run the player's class 'Loadout' function when PlayerLoadout is called"},{"code":"local PLAYER = {}\nPLAYER.DisplayName = \"Hooman\"\nPLAYER.WalkSpeed = 200\nPLAYER.greet = function( tbl ) // create a function named 'greet'\n// the first argument passed is the source table\n// which includes the classID, the player entity, and the function itself\n\tlocal ply = tbl.Player // here we extract the player entity from the table\n    ply:ChatPrint(\"Hello \"..ply:Nick()..\" !\") // tell the player\nend\n\n// link it to the spawn hook, so each time a player (re-)spawns, he will be greeted with a hello\nhook.Add(\"PlayerSpawn\",\"greet\",function(ply)\n\tplayer_manager.RunClass( ply, \"greet\" )\nend)","description":"Call a greeting function within the playerclass system."}],"isConstructor":false,"name":"RunClass","realm":"shared","returns":[{"description":"The values returned by the called function.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Player to set class","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Name of class to set","isOptional":false,"isVarArg":false,"name":"classname","type":"string"}],"description":"Sets a player's class","examples":[{"code":"","description":""}],"isConstructor":false,"name":"SetPlayerClass","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Player model name","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Retrieves correct hands for given player model. By default returns citizen hands.","examples":[],"isConstructor":false,"name":"TranslatePlayerHands","realm":"shared","returns":[{"description":"A table with following contents:\n* {{Type|string}} model - Model of hands\n* {{Type|number}} skin - Skin of hands\n* {{Type|string}} body - Bodygroups of hands","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The short name of the model.","isOptional":false,"isVarArg":false,"name":"shortName","type":"string"}],"description":"Returns the valid model path for a simplified name.","examples":[{"code":"print(player_manager.TranslatePlayerModel(\"alyx\"))","description":"Print the valid model path for \"Alyx\"."}],"isConstructor":false,"name":"TranslatePlayerModel","realm":"shared","returns":[{"description":"The valid model path for the short name.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The model path to a player model","isOptional":false,"isVarArg":false,"name":"model","type":"string"}],"description":"Returns the simplified name for a valid model path of a player model.\n\nOpposite of {{LibraryFunction|player_manager|TranslatePlayerModel}}.","examples":[],"isConstructor":false,"name":"TranslateToPlayerModelName","realm":"shared","returns":[{"description":"The simplified name for that model","type":"string"}]}],"isHook":false,"isPureAbstract":false,"name":"player_manager"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Creates a slider that can be moved along the X and/or Y axis","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 500, 300 )\nframe:Center()\nframe:MakePopup()\n\nlocal Slider = vgui.Create( \"DSlider\", frame )\nSlider:SetPos( 50, 50 )\nSlider:SetSize( 100, 20 )","description":"Make a slider at 50, 50 that can move 100 pixels on the X axis."}],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[],"description":"Identical to {{ClassFunction|DSlider|IsEditing}}","examples":[],"isConstructor":false,"name":"GetDragging","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the draggable panel's lock on the X axis.\n\nSee {{ClassFunction|DSlider|SetLockX}} for more info.","examples":[],"isConstructor":false,"name":"GetLockX","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the draggable panel's lock on the Y axis.\n\nSee {{ClassFunction|DSlider|SetLockY}} for more info.","examples":[],"isConstructor":false,"name":"GetLockY","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nAppears to be non functioning, however is still used by panels such as {{Type|DNumSlider}}.","examples":[],"isConstructor":false,"name":"GetNotches","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nDoes nothing.","examples":[],"isConstructor":false,"name":"GetNumSlider","realm":"client","returns":[{"description":"","type":"any"}]},{"accessModifier":"public","arguments":[],"description":"Returns the target position of the draggable \"knob\" panel of the slider on the X axis.\n\nSet by {{ClassFunction|DSlider|SetSlideX}}.","examples":[],"isConstructor":false,"name":"GetSlideX","realm":"client","returns":[{"description":"The value range seems to be from 0 to 1","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the target position of the draggable \"knob\" panel of the slider on the Y axis.\n\nSet by {{ClassFunction|DSlider|SetSlideY}}.","examples":[],"isConstructor":false,"name":"GetSlideY","realm":"client","returns":[{"description":"The value range seems to be from 0 to 1","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nAppears to be non functioning, however is still used by panels such as {{Type|DNumSlider}}.","examples":[],"isConstructor":false,"name":"GetTrapInside","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if this element is being edited by the player.","examples":[],"isConstructor":false,"name":"IsEditing","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Path to the image.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"Sets the background for the slider.","examples":[],"isConstructor":false,"name":"SetBackground","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"dragging","type":"boolean"}],"description":"{{Internal}}\n\nSets whether or not the slider is being dragged.","examples":[],"isConstructor":false,"name":"SetDragging","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nDoes nothing.","examples":[],"isConstructor":false,"name":"SetImage","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nDoes nothing.","examples":[],"isConstructor":false,"name":"SetImageColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"Set to nil to reset lock.\n\nThe value range is from 0 to 1.","isOptional":true,"isVarArg":false,"name":"lockX","type":"number"}],"description":"Sets the lock on the X axis. \n\nFor example the value 0.5 will lock the draggable panel to half the width of the slider's panel.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 500, 300 )\nframe:Center()\nframe:MakePopup()\n\nlocal Slider = vgui.Create( \"DSlider\", frame )\nSlider:SetPos( 50, 50 )\nSlider:SetSize( 100, 100 )\nSlider:SetLockX()\nSlider:SetLockY()","description":"Example of a slider that can be dragged on the X and Y axis."}],"isConstructor":false,"name":"SetLockX","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"Set to nil to reset lock.\n\nThe value range is from 0 to 1.","isOptional":true,"isVarArg":false,"name":"lockY","type":"number"}],"description":"Sets the lock on the Y axis. \n\nFor example the value 0.5 will lock the draggable panel to half the height of the slider's panel.","examples":[],"isConstructor":false,"name":"SetLockY","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"notches","type":"number"}],"description":"{{Deprecated}}\n\nAppears to be non functioning, however is still used by panels such as {{Type|DNumSlider}}.","examples":[],"isConstructor":false,"name":"SetNotches","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"slider","type":"any"}],"description":"{{Deprecated}}\n\nDoes nothing.","examples":[],"isConstructor":false,"name":"SetNumSlider","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value range seems to be from 0 to 1","isOptional":false,"isVarArg":false,"name":"x","type":"number"}],"description":"{{Internal}}\n\nUsed to position the draggable panel of the slider on the X axis.","examples":[],"isConstructor":false,"name":"SetSlideX","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value range seems to be from 0 to 1","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"{{Internal}}\n\nUsed to position the draggable panel of the slider on the Y axis.","examples":[],"isConstructor":false,"name":"SetSlideY","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"trap","type":"boolean"}],"description":"{{Deprecated}}\n\nAppears to be non functioning, however is still used by panels such as {{Type|DNumSlider}}.","examples":[],"isConstructor":false,"name":"SetTrapInside","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"For override by child panels, such as {{Type|DNumSlider}}.","examples":[],"isConstructor":false,"name":"TranslateValues","realm":"client","returns":[{"description":"x","type":"number"},{"description":"y","type":"number"}]}],"isHook":false,"isPureAbstract":true,"name":"DSlider"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The player library is used to get the Lua objects that represent players in-game.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The name of the bot, using an already existing name will append brackets at the end of it with a number pertaining it.\n\nExample: \"Bot name test\", \"Bot name test(1)\".","isOptional":false,"isVarArg":false,"name":"botName","type":"string"}],"description":"Similar to the serverside command \"bot\", this function creates a new Player bot with the given name. This bot will not obey to the usual \"bot_*\" commands, and it's the same bot base used in TF2 and CS:S.\n\nThe best way to control the behaviour of a Player bot right now is to use the {{HookFunction|GM|StartCommand}} hook and modify its input serverside.\n\n{{Note|Despite this Player being fake, it has to be removed from the server by using {{ClassFunction|Player|Kick}} and '''NOT''' {{ClassFunction|Entity|Remove}}.\nAlso keep in mind that these bots still use player slots, so you won't be able to spawn them in singleplayer!}}\n\n{{Note|Any Bot created using this method will be considered UnAuthed by Garry's Mod}}","examples":[{"code":"local listBots = {}\n\nfunction CreateBot()\n\n    if ( !game.SinglePlayer() && #player.GetAll() < game.MaxPlayers() ) then \n\n        local num = #listBots\n\n        listBots[ num ] = player.CreateNextBot(\"Bot_\" .. ( num + 1 ) )\n\n\t    return listBots[ num ]\n\n    else\n\n\t    print( \"Can't create bot!\" )\n\n    end\n\nend","description":"Create a bot if that is possible."}],"isConstructor":false,"name":"CreateNextBot","realm":"server","returns":[{"description":"The newly created Player bot. Returns NULL if there's no Player slots available to host it.","type":"Player"}]},{"accessModifier":"public","arguments":[],"description":"Gets all the current players in the server (not including connecting clients).\n\n{{Note|This function returns bots as well as human players. See {{LibraryFunction|player|GetBots}} and  {{LibraryFunction|player|GetHumans}}.}}","examples":[{"code":"PrintTable( player.GetAll() )","description":"Prints all the players currently in the server."},{"code":"print(#player.GetAll())","description":"Prints the number of players in the server. The same output can be achieved more efficiently with {{LibraryFunction|player|GetCount}}."}],"isConstructor":false,"name":"GetAll","realm":"shared","returns":[{"description":"All {{Type|Player}}s currently in the server.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table of all bots on the server.","examples":[],"isConstructor":false,"name":"GetBots","realm":"shared","returns":[{"description":"A table only containing bots ( AI / non human players )","type":"Player[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{ClassFunction|Player|AccountID}} to find the player by.","isOptional":false,"isVarArg":false,"name":"accountID","type":"string"}],"description":"Gets the player with the specified AccountID.","examples":[],"isConstructor":false,"name":"GetByAccountID","realm":"shared","returns":[{"description":"Player if one is found, false otherwise.","type":"Player"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The connection ID to find the player by.","isOptional":false,"isVarArg":false,"name":"connectionID","type":"number"}],"description":"Gets the player with the specified connection ID.\n\nConnection ID can be retrieved via {{LibraryFunction|gameevent|Listen}} events.\n\nFor a function that returns a player based on their {{ClassFunction|Entity|EntIndex}}, see {{GlobalFunction|Entity}}.<br/>\nFor a function that returns a player based on their {{ClassFunction|Player|UserID}}, see {{GlobalFunction|Player}}.","examples":[],"isConstructor":false,"name":"GetByID","realm":"shared","returns":[{"description":"Player if one is found, nil otherwise","type":"Player"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{ClassFunction|Player|SteamID}} to find the player by.","isOptional":false,"isVarArg":false,"name":"steamID","type":"string"}],"description":"Gets the player with the specified SteamID.","examples":[],"isConstructor":false,"name":"GetBySteamID","realm":"shared","returns":[{"description":"Player if one is found, false otherwise.","type":"Player"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{ClassFunction|Player|SteamID64}} to find the player by. Also accepts numbers.","isOptional":false,"isVarArg":false,"name":"steamID64","type":"string"}],"description":"Gets the player with the specified SteamID64.","examples":[],"isConstructor":false,"name":"GetBySteamID64","realm":"shared","returns":[{"description":"Player if one is found, false otherwise.","type":"Player"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{ClassFunction|Player|UniqueID}} to find the player by.","isOptional":false,"isVarArg":false,"name":"uniqueID","type":"string"}],"description":"Gets the player with the specified uniqueID (not recommended way to identify players).\n\n{{Warning|It is highly recommended to use {{LibraryFunction|player|GetBySteamID}} or {{LibraryFunction|player|GetBySteamID64}} instead as this function can have collisions ( be same for different people ) while SteamID is guaranteed to unique to each player.}}","examples":[],"isConstructor":false,"name":"GetByUniqueID","realm":"shared","returns":[{"description":"Player if one is found, false otherwise.","type":"Player"}]},{"accessModifier":"public","arguments":[],"description":"Gives you the player count.\nSimilar to #{{LibraryFunction|player|GetAll}} but with much better performance.","examples":[],"isConstructor":false,"name":"GetCount","realm":"shared","returns":[{"description":"Number of players","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table of all human ( non bot/AI ) players.\n\nUnlike {{LibraryFunction|player|GetAll}}, this does not include bots.","examples":[],"isConstructor":false,"name":"GetHumans","realm":"shared","returns":[{"description":"A table of all human ( non bot/AI ) players.","type":"Player[]"}]}],"isHook":false,"isPureAbstract":false,"name":"player"},{"classFields":[],"collectionType":"class","customConstructor":"CreateSprite","description":"A panel that draws a sprite on the player's HUD with the given {{Type|IMaterial}}, {{GlobalFunction|Color}} and rotation.\n\nA shortcut for this is {{GlobalFunction|CreateSprite}}().","examples":[{"code":"local sprite = vgui.Create(\"DSprite\")\nsprite:SetMaterial(Material(\"sprites/sent_ball\"))\nsprite:SetColor(Color(0, 255, 255))\nsprite:Center()\nsprite:SetSize(200, 200)","description":"Creates a DSprite with the ''sent_ball'' material, and sets the color to cyan."}],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Material the sprite should draw.","isOptional":false,"isVarArg":false,"name":"material","type":"IMaterial"}],"description":"Creates and returns a new {{Type|DSprite}} element with the supplied material.","examples":[],"isConstructor":true,"name":"constructor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Gets the color the sprite is using as a modifier.","examples":[],"isConstructor":false,"name":"GetColor","realm":"client","returns":[{"description":"The {{GlobalFunction|Color}} being used.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetHandle","realm":"client","returns":[{"description":"","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Gets the material the sprite is using.","examples":[],"isConstructor":false,"name":"GetMaterial","realm":"client","returns":[{"description":"The material in use.","type":"IMaterial"}]},{"accessModifier":"public","arguments":[],"description":"Gets the 2D rotation angle of the sprite, in the plane of the screen.","examples":[],"isConstructor":false,"name":"GetRotation","realm":"client","returns":[{"description":"The anti-clockwise rotation in degrees.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{GlobalFunction|Color}} to use.","isOptional":false,"isVarArg":false,"name":"color","type":"table"}],"description":"Sets the color modifier for the sprite.","examples":[],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"vec","type":"Vector"}],"description":"{{Stub}}\n\nSeems to be an unused feature. Does nothing.","examples":[],"isConstructor":false,"name":"SetHandle","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The material to use. This will ideally be an [https://developer.valvesoftware.com/wiki/UnlitGeneric UnlitGeneric].","isOptional":false,"isVarArg":false,"name":"material","type":"IMaterial"}],"description":"Sets the source material for the sprite.","examples":[],"isConstructor":false,"name":"SetMaterial","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The anti-clockwise rotation in degrees.","isOptional":false,"isVarArg":false,"name":"ang","type":"number"}],"description":"Sets the 2D rotation angle of the sprite, in the plane of the screen.","examples":[],"isConstructor":false,"name":"SetRotation","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DSprite"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The presets library lets you add and modify the pre-set options for scripted tools (selected via the white bar at the top of each tools control panel).","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The preset group name, usually it's tool class name.","isOptional":false,"isVarArg":false,"name":"groupname","type":"string"},{"default":"","description":"Preset name, must be unique.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"A table of preset console commands.","isOptional":false,"isVarArg":false,"name":"values","type":"table"}],"description":"Adds preset to a preset group.","examples":[{"code":"presets.Add( \"face\", \"Open Eyes\", {\n\tfaceposer_flex0\t= \"1\",\n\tfaceposer_flex1\t= \"1\",\n\tfaceposer_flex2\t= \"0\",\n\tfaceposer_flex3\t= \"0\",\n\tfaceposer_flex4\t= \"0\",\n\tfaceposer_flex5\t= \"0\",\n\tfaceposer_flex6\t= \"0\",\n\tfaceposer_flex7\t= \"0\",\n\tfaceposer_flex8\t= \"0\",\n\tfaceposer_flex9\t= \"0\"\n} )","description":"A simple faceposer preset."}],"isConstructor":false,"name":"Add","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nUsed internally to tell the player that the name they tried to use in their preset is not acceptable.","examples":[],"isConstructor":false,"name":"BadNameAlert","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The preset group name, usually it's tool class name.","isOptional":false,"isVarArg":false,"name":"type","type":"string"},{"default":"","description":"Name of the preset to test","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Returns whether a preset with given name exists or not","examples":[],"isConstructor":false,"name":"Exists","realm":"client","returns":[{"description":"true if the preset does exist","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Preset group name.","isOptional":false,"isVarArg":false,"name":"groupname","type":"string"}],"description":"Returns a table with preset names and values from a single preset group.","examples":[],"isConstructor":false,"name":"GetTable","realm":"client","returns":[{"description":"All presets in specified group.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"}],"description":"{{Internal}}\n\nUsed internally to ask the player if they want to override an already existing preset.","examples":[],"isConstructor":false,"name":"OverwritePresetPrompt","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Preset group to remove from","isOptional":false,"isVarArg":false,"name":"groupname","type":"string"},{"default":"","description":"Name of preset to remove","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Removes a preset entry from a preset group.","examples":[],"isConstructor":false,"name":"Remove","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Preset group name","isOptional":false,"isVarArg":false,"name":"groupname","type":"string"},{"default":"","description":"Old preset name","isOptional":false,"isVarArg":false,"name":"oldname","type":"string"},{"default":"","description":"New preset name","isOptional":false,"isVarArg":false,"name":"newname","type":"string"}],"description":"Renames preset.","examples":[],"isConstructor":false,"name":"Rename","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"presets"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}A tab for internal use on the DPropertySheet.","examples":[],"extends":"DButton","functions":[],"isHook":false,"isPureAbstract":true,"name":"DTab"},{"classFields":[],"collectionType":"class","customConstructor":"Material","description":"A Material object. It represents a game material, similarly to how a .vmt file does.\n\nIt can be created with {{GlobalFunction|Material}} or {{GlobalFunction|CreateMaterial}}.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The material name or path. The path is relative to the '''materials/''' folder. You do not need to add '''materials/''' to your path.\n\nTo retrieve a Lua material created with {{GlobalFunction|CreateMaterial}}, just prepend a \"!\" to the material name.","isOptional":false,"isVarArg":false,"name":"materialName","type":"string"},{"default":"nil","description":"A string containing space separated keywords which will be used to add material parameters.\n\nSee [[Material Parameters]] for more information.\n\n{{Note|This feature only works when importing .png or .jpeg image files}}","isOptional":true,"isVarArg":false,"name":"pngParameters","type":"string"}],"description":"Either returns the material with the given name, or loads the material interpreting the first argument as the path.\n\n{{Note|When using .png or .jpg textures, make sure that their sizes are Power Of 2 (1, 2, 4, 8, 16, 32, 64, etc). If they are not, they will be automatically stretched to the nearest PO2 size and cause graphical artifacts.}}","examples":[{"code":"local wave = Material( \"vgui/wave.png\", \"noclamp smooth\" )","description":"Creates a PNG material with noclamp and smooth parameters set.\n\nIn this example the .png file is located in '''materials/vgui/wave.png'''"},{"code":"local mat_color = Material( \"pp/colour\" )  -- used outside of the hook for performance\n\nhook.Add(\"RenderScreenspaceEffects\", \"ColorExample\", function()\n\trender.UpdateScreenEffectTexture()\n\n\tmat_color:SetTexture( \"$fbtexture\", render.GetScreenEffectTexture() )\n\n\tmat_color:SetFloat( \"$pp_colour_addr\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_addg\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_addb\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_mulr\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_mulg\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_mulb\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_brightness\", 0 )\n\tmat_color:SetFloat( \"$pp_colour_contrast\", 0.5 )\n\tmat_color:SetFloat( \"$pp_colour_colour\", 5 )\n\n\trender.SetMaterial( mat_color )\n\trender.DrawScreenQuad()\nend )","description":"Acquires and uses one of the [[Post-Processing Materials]] to make the screen darker and more saturated"}],"isConstructor":true,"name":"constructor","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The X coordinate.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The Y coordinate.","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"Returns the color of the specified pixel of the $basetexture, only works for materials created from PNG files.\n\nBasically identical to {{ClassFunction|ITexture|GetColor}} used on {{ClassFunction|IMaterial|GetTexture}}( \"$basetexture\" ).\n\n{{Bug|Issue=2407|The returned color will not have the color metatable.}}","examples":[{"code":"local m = Material( \"gui/colors_dark.png\" )\nlocal t = m:GetTexture(\"$basetexture\")\n\nPrintTable( t:GetColor( 5, 5 ) )\nPrintTable( m:GetColor( 5, 5 ) )","description":"Identical functionality."}],"isConstructor":false,"name":"GetColor","realm":"shared","returns":[{"description":"The color of the pixel as a {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the material value.","isOptional":false,"isVarArg":false,"name":"materialFloat","type":"string"}],"description":"Returns the specified material value as a float, or nil if the value is not set.","examples":[],"isConstructor":false,"name":"GetFloat","realm":"shared","returns":[{"description":"float","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the material integer.","isOptional":false,"isVarArg":false,"name":"materialInt","type":"string"}],"description":"Returns the specified material value as a int, rounds the value if its a float, or nil if the value is not set.","examples":[],"isConstructor":false,"name":"GetInt","realm":"shared","returns":[{"description":"int","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets all the key values defined for the material.","examples":[{"code":"PrintTable( Material( \"pp/add\" ):GetKeyValues() )","description":"Example output of this function"}],"isConstructor":false,"name":"GetKeyValues","realm":"shared","returns":[{"description":"The material's key values.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the material matrix.","isOptional":false,"isVarArg":false,"name":"materialMatrix","type":"string"}],"description":"Returns the specified material matrix as a int, or nil if the value is not set or is not a matrix.","examples":[],"isConstructor":false,"name":"GetMatrix","realm":"shared","returns":[{"description":"matrix","type":"VMatrix"}]},{"accessModifier":"public","arguments":[],"description":"Returns the name of the material, in most cases the path.","examples":[],"isConstructor":false,"name":"GetName","realm":"shared","returns":[{"description":"Material name/path","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the name of the materials shader.\n\n{{Bug|Issue=3256|This function does not work serverside on Linux SRCDS.}}","examples":[],"isConstructor":false,"name":"GetShader","realm":"shared","returns":[{"description":"shaderName","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the material string.","isOptional":false,"isVarArg":false,"name":"materialString","type":"string"}],"description":"Returns the specified material string, or nil if the value is not set or if the value can not be converted to a string.","examples":[],"isConstructor":false,"name":"GetString","realm":"shared","returns":[{"description":"The value as a string","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The [https://developer.valvesoftware.com/wiki/Category:List_of_Shader_Parameters shader parameter] to retrieve. This should normally be ''$basetexture''.","isOptional":false,"isVarArg":false,"name":"param","type":"string"}],"description":"Returns an {{Type|ITexture}} based on the passed shader parameter.","examples":[],"isConstructor":false,"name":"GetTexture","realm":"shared","returns":[{"description":"The value of the shader parameter. Returns nothing if the param doesn't exist.","type":"ITexture"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the material vector.","isOptional":false,"isVarArg":false,"name":"materialVector","type":"string"}],"description":"Returns the specified material vector, or nil if the value is not set.\n\nSee also {{ClassFunction|IMaterial|GetVectorLinear}}","examples":[],"isConstructor":false,"name":"GetVector","realm":"shared","returns":[{"description":"The color vector","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the material vector.","isOptional":false,"isVarArg":false,"name":"materialVector","type":"string"}],"description":"Returns the specified material linear color vector, or nil if the value is not set.\n\nSee https://en.wikipedia.org/wiki/Gamma_correction\n\nSee also {{ClassFunction|IMaterial|GetVector}}","examples":[],"isConstructor":false,"name":"GetVectorLinear","realm":"shared","returns":[{"description":"The linear color vector","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the height of the member texture set for $basetexture.","examples":[],"isConstructor":false,"name":"Height","realm":"shared","returns":[{"description":"height","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the material was not loaded successfully.","examples":[],"isConstructor":false,"name":"IsError","realm":"shared","returns":[{"description":"isError","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Recomputes the material's snapshot. This needs to be called if you have changed variables on your material and it isn't changing. \n\nBe careful though - this function is slow - so try to call it only when needed!","examples":[],"isConstructor":false,"name":"Recompute","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the material float.","isOptional":false,"isVarArg":false,"name":"materialFloat","type":"string"},{"default":"","description":"The new float value.","isOptional":false,"isVarArg":false,"name":"float","type":"number"}],"description":"Sets the specified material float to the specified float, does nothing on a type mismatch.","examples":[],"isConstructor":false,"name":"SetFloat","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the material int.","isOptional":false,"isVarArg":false,"name":"materialInt","type":"string"},{"default":"","description":"The new int value.","isOptional":false,"isVarArg":false,"name":"int","type":"number"}],"description":"Sets the specified material value to the specified int, does nothing on a type mismatch.","examples":[],"isConstructor":false,"name":"SetInt","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the material int.","isOptional":false,"isVarArg":false,"name":"materialMatrix","type":"string"},{"default":"","description":"The new matrix.","isOptional":false,"isVarArg":false,"name":"matrix","type":"VMatrix"}],"description":"Sets the specified material value to the specified matrix, does nothing on a type mismatch.","examples":[],"isConstructor":false,"name":"SetMatrix","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the shader","isOptional":false,"isVarArg":false,"name":"shaderName","type":"string"}],"description":"{{Deprecated|This function does nothing}}The functionality of this function was removed due to the amount of crashes it caused.","examples":[],"isConstructor":false,"name":"SetShader","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the material string.","isOptional":false,"isVarArg":false,"name":"materialString","type":"string"},{"default":"","description":"The new string.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Sets the specified material value to the specified string, does nothing on a type mismatch.","examples":[],"isConstructor":false,"name":"SetString","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the keyvalue on the material to store the texture on.","isOptional":false,"isVarArg":false,"name":"materialTexture","type":"string"},{"default":"","description":"The new texture. This can also be a string, the name of the new texture.","isOptional":false,"isVarArg":false,"name":"texture","type":"ITexture"}],"description":"Sets the specified material texture to the specified texture, does nothing on a type mismatch.","examples":[{"code":"local blur_mat = Material( \"pp/bokehblur\" )\n\nblur_mat:SetTexture( \"$basetexture\", render.GetScreenEffectTexture() )","description":"Example usage of this function."},{"code":"local blur_mat = Material( \"pp/bokehblur\" )\n\nblur_mat:SetTexture( \"$basetexture\", \"_rt_fullframefb\" )","description":"Equivalent of Example 1, demonstrating the use of a texture's name."}],"isConstructor":false,"name":"SetTexture","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the material value to be unset.","isOptional":false,"isVarArg":false,"name":"materialValueName","type":"string"}],"description":"Unsets the value for the specified material value.","examples":[],"isConstructor":false,"name":"SetUndefined","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the material vector.","isOptional":false,"isVarArg":false,"name":"MaterialVector","type":"string"},{"default":"","description":"The new vector.","isOptional":false,"isVarArg":false,"name":"vec","type":"Vector"}],"description":"Sets the specified material vector to the specified vector, does nothing on a type mismatch.","examples":[],"isConstructor":false,"name":"SetVector","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the width of the member texture set for $basetexture.","examples":[],"isConstructor":false,"name":"Width","realm":"shared","returns":[{"description":"width","type":"number"}]}],"isHook":false,"isPureAbstract":false,"name":"IMaterial"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The properties library gives you access to the menu that shows up when right clicking entities while holding C.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"A unique name used to identify the property","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"A table that defines the property. Uses the {{Struct|PropertyAdd}}.","isOptional":false,"isVarArg":false,"name":"propertyData","type":"PropertyAdd"}],"description":"Add properties to the properties module","examples":[{"code":"properties.Add( \"ignite\", {\n\tMenuLabel = \"#ignite\", -- Name to display on the context menu\n\tOrder = 999, -- The order to display this property relative to other properties\n\tMenuIcon = \"icon16/fire.png\", -- The icon to display next to the property\n\n\tFilter = function( self, ent, ply ) -- A function that determines whether an entity is valid for this property\n\t\tif ( !IsValid( ent ) ) then return false end\n\t\tif ( ent:IsPlayer() ) then return false end\n\t\tif ( !CanEntityBeSetOnFire( ent ) ) then return false end\n\t\tif ( !gamemode.Call( \"CanProperty\", ply, \"ignite\", ent ) ) then return false end\n\n\t\treturn !ent:IsOnFire() \n\tend,\n\tAction = function( self, ent ) -- The action to perform upon using the property ( Clientside )\n\n\t\tself:MsgStart()\n\t\t\tnet.WriteEntity( ent )\n\t\tself:MsgEnd()\n\n\tend,\n\tReceive = function( self, length, player ) -- The action to perform upon using the property ( Serverside )\n\t\tlocal ent = net.ReadEntity()\n\t\tif ( !self:Filter( ent, player ) ) then return end\n\t\t\n\t\tent:Ignite( 360 )\n\tend \n} )","description":"Defines a property that can be used to ignite entities (from Sandbox)"}],"isConstructor":false,"name":"Add","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to test","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"If given, will also perform a distance check based on the entity's Orientated Bounding Box.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Returns true if given entity can be targeted by the player via the properties system.\n\nThis should be used serverside in your properties to prevent abuse by clientside scripting.","examples":[],"isConstructor":false,"name":"CanBeTargeted","realm":"shared","returns":[{"description":"True if entity can be targeted, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Eye position of local player, {{ClassFunction|Entity|EyePos}}","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"Aim vector of local player, {{ClassFunction|Player|GetAimVector}}","isOptional":false,"isVarArg":false,"name":"aimVec","type":"Vector"}],"description":"Returns an entity player is hovering over with his cursor.","examples":[],"isConstructor":false,"name":"GetHovered","realm":"client","returns":[{"description":"The hovered entity","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The eye pos of a player","isOptional":false,"isVarArg":false,"name":"eyepos","type":"Vector"},{"default":"","description":"The aim vector of a player","isOptional":false,"isVarArg":false,"name":"eyevec","type":"Vector"}],"description":"Checks if player hovers over any entities and open a properties menu for it.","examples":[],"isConstructor":false,"name":"OnScreenClick","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to open menu for","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The trace that is passed as second argument to Action callback of a property","isOptional":false,"isVarArg":false,"name":"tr","type":"table"}],"description":"Opens properties menu for given entity.","examples":[],"isConstructor":false,"name":"OpenEntityMenu","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"properties"},{"classFields":[],"collectionType":"class","customConstructor":"Mesh","description":"Renderable mesh object, can be used to create models on the fly. The only way to create your own IMesh object is to call [[Global/Mesh|Mesh]].\n\n{{Bug|Issue=2301|IMeshes only respond to one projected texture.}}","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"nil","description":"The material the mesh is intended to be rendered with. It's merely a hint that tells that mesh what vertex format it should use.","isOptional":true,"isVarArg":false,"name":"mat","type":"IMaterial"}],"description":"Returns a new mesh object.","examples":[{"code":"local mat = Material( \"editor/wireframe\" ) -- The material (a wireframe)\nlocal obj = Mesh() -- Create the IMesh object\n\nlocal verts = { -- A table of 3 vertices that form a triangle\n\t{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, -- Vertex 1\n\t{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, -- Vertex 2\n\t{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, -- Vertex 3\n}\n\nobj:BuildFromTriangles( verts ) -- Load the vertices into the IMesh object\n\nhook.Add( \"PostDrawOpaqueRenderables\", \"IMeshTest\", function()\n\n\trender.SetMaterial( mat ) -- Apply the material\n\tobj:Draw() -- Draw the mesh\nend )","description":"Draws a triangle near Vector( 0, 0, 0 ) in the map."}],"isConstructor":true,"name":"constructor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A table consisting of {{Struct|MeshVertex}}s.","isOptional":false,"isVarArg":false,"name":"vertexes","type":"MeshVertex"}],"description":"Builds the mesh from a table mesh vertexes.","examples":[],"isConstructor":false,"name":"BuildFromTriangles","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Deletes the mesh and frees the memory used by it..","examples":[],"isConstructor":false,"name":"Destroy","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Renders the mesh with the active matrix.","examples":[],"isConstructor":false,"name":"Draw","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"IMesh"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"The object used in the {{Lib|saverestore}}, mainly in {{LibraryFunction|saverestore|AddRestoreHook}}.\n\nIt allows you to read blocks directly from the save game files used by Half-Life 2 save system when such save is loaded.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Ends current data block started with {{ClassFunction|IRestore|StartBlock}} and returns to the parent block.\n\nTo avoid all sorts of errors, you '''must''' end all blocks you start.","examples":[],"isConstructor":false,"name":"EndBlock","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Reads next bytes from the restore object as an {{Type|Angle}}.","examples":[],"isConstructor":false,"name":"ReadAngle","realm":"shared","returns":[{"description":"The angle that has been read","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Reads next bytes from the restore object as a {{Type|boolean}}.","examples":[],"isConstructor":false,"name":"ReadBool","realm":"shared","returns":[{"description":"The boolean that has been read","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Reads next bytes from the restore object as an {{Type|Entity}}.","examples":[],"isConstructor":false,"name":"ReadEntity","realm":"shared","returns":[{"description":"The entity that has been read.","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Reads next bytes from the restore object as a floating point {{Type|number}}.","examples":[],"isConstructor":false,"name":"ReadFloat","realm":"shared","returns":[{"description":"The read floating point number.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Reads next bytes from the restore object as an integer {{Type|number}}.","examples":[],"isConstructor":false,"name":"ReadInt","realm":"shared","returns":[{"description":"The read integer number.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Reads next bytes from the restore object as a {{Type|string}}.","examples":[],"isConstructor":false,"name":"ReadString","realm":"shared","returns":[{"description":"The read string. Maximum length is 1024.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Reads next bytes from the restore object as a {{Type|Vector}}.","examples":[],"isConstructor":false,"name":"ReadVector","realm":"shared","returns":[{"description":"The read vector.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Loads next block of data to be read inside current block. Blocks '''must''' be ended with {{ClassFunction|IRestore|EndBlock}}.","examples":[{"code":"saverestore.AddRestoreHook( \"HookNameHere\", function( save )\n\tlocal name = save:StartBlock()\n\tlocal myval = save:ReadString()\n\tsave:EndBlock()\n\n\tprint( name, myval )\nend )","description":"Example usage."}],"isConstructor":false,"name":"StartBlock","realm":"shared","returns":[{"description":"The name of the next data block to be read.","type":"string"}]}],"isHook":false,"isPureAbstract":false,"name":"IRestore"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A form which may be used to display text the player is meant to select and copy or alternately allow them to enter some text of their own . Do note that at least one of your DTextEntry's parents must either be an {{Type|EditablePanel}} or derived from it (like a {{Type|DFrame}}, for example), else it won't be able to focus and thus be unselectable. You must also call {{ClassFunction|Panel|MakePopup}} on said panel or the DTextEntry will not work.\n\n{{Bug|Issue=1588|This does not clear out previously-pasted text properly.}}","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 400, 200 )\nframe:Center()\nframe:MakePopup()\n\nlocal TextEntry = vgui.Create( \"DTextEntry\", frame ) -- create the form as a child of frame\nTextEntry:SetPos( 25, 50 )\nTextEntry:SetSize( 75, 85 )\nTextEntry:SetText( \"Placeholder Text\" )\nTextEntry.OnEnter = function( self )\n\tchat.AddText( self:GetValue() )\t-- print the form's text as server text\nend","description":"Creates a text entry form that allows you to print messages into the local player's chat window."}],"extends":"TextEntry","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The last character entered into the panel.","isOptional":false,"isVarArg":false,"name":"char","type":"string"}],"description":"Called whenever the value of the panel has been updated (whether by user input or otherwise).\n\nIt allows you to determine whether a user can modify the {{Type|TextEntry}}'s text.\n\nBy default, this only checks whether the panel disallows numeric characters, preventing it from being edited if the value contains any.\n\nThis is actually an engine hook that only works on {{Type|TextEntry}} derived elements.","examples":[{"code":"local TextEntry = vgui.Create( \"DTextEntry\" )\nTextEntry.AllowInput = function( self, stringValue )\n\treturn true\nend","description":"Prevents the user from editing the text entirely."}],"isConstructor":false,"name":"AllowInput","realm":"client","returns":[{"description":"Return true to prevent the value from changing, false to allow it.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to check.","isOptional":false,"isVarArg":false,"name":"strValue","type":"string"}],"description":"Returns whether a string is numeric or not.\nAlways returns false if the {{ClassFunction|DTextEntry|SetNumeric}} is set to false.","examples":[],"isConstructor":false,"name":"CheckNumeric","realm":"client","returns":[{"description":"Whether the string is numeric or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the cursor color of a DTextEntry.","examples":[{"code":"local TextEntry = vgui.Create( \"DTextEntry\" )\nTextEntry:SetCursorColor( Color( 255, 0, 0, 255 ))\nPrintTable( TextEntry:GetCursorColor() )","description":""}],"isConstructor":false,"name":"GetCursorColor","realm":"client","returns":[{"description":"The color of the cursor as a {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether only numeric characters (123456789.-) can be entered into the DTextEntry.","examples":[],"isConstructor":false,"name":"GetNumeric","realm":"client","returns":[{"description":"Whether the DTextEntry is numeric or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the text color of a DTextEntry.","examples":[{"code":"local TextEntry = vgui.Create( \"DTextEntry\" )\nTextEntry:SetTextColor( Color( 255, 0, 0, 255 ))\nPrintTable( TextEntry:GetTextColor() )","description":""}],"isConstructor":false,"name":"GetTextColor","realm":"client","returns":[{"description":"The color of the text as a {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the {{Type|DTextEntry}} is set to run {{ClassFunction|DTextEntry|OnValueChange}} every time a character is typed or deleted or only when Enter is pressed.","examples":[],"isConstructor":false,"name":"GetUpdateOnType","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether this DTextEntry is being edited or not. (i.e. has focus)","examples":[],"isConstructor":false,"name":"IsEditing","realm":"client","returns":[{"description":"Whether this DTextEntry is being edited or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called internally by {{ClassFunction|DTextEntry|OnTextChanged}} when the user modifies the text in the DTextEntry.\n\nYou should override this function to define custom behavior when the DTextEntry text changes.","examples":[],"isConstructor":false,"name":"OnChange","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called whenever enter is pressed on a DTextEntry.\n\n{{Note|{{ClassFunction|DTextEntry|IsEditing}} will still return true in this callback!}}","examples":[{"code":"local TextEntry = vgui.Create( \"DTextEntry\" )\nTextEntry:SetTextColor( Color( 255, 0, 0, 255 ) )\n\nTextEntry.OnEnter = function()\n    TextEntry:SetTextColor( Color( 0, 0, 255, 255 ) )\nend","description":""}],"isConstructor":false,"name":"OnEnter","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"They key code of the key pressed, see {{Enum|KEY}}.","isOptional":false,"isVarArg":false,"name":"keyCode","type":"KEY"}],"description":"Called whenever a valid character is typed while the text entry is focused.\n\n{{Note|This hook only works on panels derived from {{Type|TextEntry}}, such as {{Type|DTextEntry}}.}}","examples":[],"isConstructor":false,"name":"OnKeyCodeTyped","realm":"client","returns":[{"description":"Whether you've handled the key press. Returning true prevents the default text entry behavior from occurring.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Determines whether to remove the autocomplete menu (false) or not (true).","isOptional":false,"isVarArg":false,"name":"noMenuRemoval","type":"boolean"}],"description":"{{Internal}}Called internally when the text inside the DTextEntry changes.\n\nYou should not override this function. Use {{ClassFunction|DTextEntry|OnValueChange}} instead.","examples":[],"isConstructor":false,"name":"OnTextChanged","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The DTextEntry text.","isOptional":false,"isVarArg":false,"name":"value","type":"string"}],"description":"Called internally when the text changes of the {{Type|DTextEntry}} are applied. (And set to the attached console variable, if one is given)\n\nSee also {{ClassFunction|DTextEntry|OnChange}} for a function that is called on every text change, even if the console variable is not updated.\n\nYou should override this function to define custom behavior when the text changes.\n\nThis method is called:\n* When Enter is pressed after typing\n* When {{ClassFunction|DTextEntry|SetValue}} is used\n* For every key typed - only if {{ClassFunction|DTextEntry|SetUpdateOnType}} was set to true (default is false)","examples":[],"isConstructor":false,"name":"OnValueChange","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the textbox should be disabled","isOptional":false,"isVarArg":false,"name":"disabled","type":"boolean"}],"description":"{{Deprecated|Use {{ClassFunction|Panel|SetEnabled}} instead.}}\n\nDisables input on a DTextEntry and greys it out visually. This differs from {{ClassFunction|DTextEntry|SetEditable}} which doesn't visually change the textbox.","examples":[],"isConstructor":false,"name":"SetDisabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the DTextEntry should be editable","isOptional":false,"isVarArg":false,"name":"enabled","type":"boolean"}],"description":"Disables Input on a DTextEntry. This differs from {{ClassFunction|DTextEntry|SetDisabled}} - SetEditable will not affect the appearance of the textbox.","examples":[{"code":"local TextEntry = vgui.Create( \"DTextEntry\", frame ) -- create the form as a child of frame\nTextEntry:SetPos( 25, 50 )\nTextEntry:SetSize( 75, 85 )\nTextEntry:SetText( \"Sample String\" )\nTextEntry:SetEditable ( false)","description":""}],"isConstructor":false,"name":"SetEditable","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the font to be changed to.","isOptional":false,"isVarArg":false,"name":"font","type":"string"}],"description":"Changes the font of the DTextEntry.","examples":[{"code":"local textentry = vgui.Create(\"DTextEntry\")\ntextentry:SetFont(\"DermaDefault\")","description":"Restores the original font the the DTextEntry."}],"isConstructor":false,"name":"SetFont","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to accept only numeric characters.","isOptional":false,"isVarArg":false,"name":"numericOnly","type":"boolean"}],"description":"Sets whether or not to decline non-numeric characters as input.\n\nNumeric characters are 1234567890.-","examples":[{"code":"local TextEntry = vgui.Create( \"DTextEntry\" )\nTextEntry:SetNumeric(true)","description":""}],"isConstructor":false,"name":"SetNumeric","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"","isOptional":true,"isVarArg":false,"name":"text","type":"string"}],"description":"Allow you to add a hint.","examples":[],"isConstructor":false,"name":"SetPlaceholderText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"updateOnType","type":"boolean"}],"description":"Sets whether we should fire {{ClassFunction|DTextEntry|OnValueChange}} every time we type or delete a character or only when Enter is pressed.","examples":[],"isConstructor":false,"name":"SetUpdateOnType","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to set.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Sets the text of the {{Type|DTextEntry}} and calls {{ClassFunction|DTextEntry|OnValueChange}}.","examples":[],"isConstructor":false,"name":"SetValue","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DTextEntry"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"The object used in the {{Lib|saverestore}}, mainly in {{LibraryFunction|saverestore|AddSaveHook}}.\n\nIt allows you to write blocks directly into the save game files used by Half-Life 2 save system when such save is being saved.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Ends current data block started with {{ClassFunction|ISave|StartBlock}} and returns to the parent block.\n\nTo avoid all sorts of errors, you '''must''' end all blocks you start.","examples":[],"isConstructor":false,"name":"EndBlock","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the new block. Used for determining which block is which, returned by {{ClassFunction|IRestore|StartBlock}} during game load.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Starts a new block of data that you can write to inside current block. Blocks '''must''' be ended with {{ClassFunction|ISave|EndBlock}}.","examples":[{"code":"saverestore.AddSaveHook( \"HookNameHere\", function( save )\n\tsave:StartBlock( \"Test\" )\n\t\tsave:WriteString( \"myawesomestring\" )\n\tsave:EndBlock()\nend )","description":"Example usage"}],"isConstructor":false,"name":"StartBlock","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The angle to write.","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"Writes an {{Type|Angle}} to the save object.","examples":[],"isConstructor":false,"name":"WriteAngle","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The boolean to write.","isOptional":false,"isVarArg":false,"name":"bool","type":"boolean"}],"description":"Writes a {{Type|boolean}} to the save object.","examples":[],"isConstructor":false,"name":"WriteBool","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to write.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Writes an {{Type|Entity}} to the save object.","examples":[],"isConstructor":false,"name":"WriteEntity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The floating point number to write.","isOptional":false,"isVarArg":false,"name":"float","type":"number"}],"description":"Writes a floating point {{Type|number}} to the save object.","examples":[],"isConstructor":false,"name":"WriteFloat","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The integer number to write.","isOptional":false,"isVarArg":false,"name":"int","type":"number"}],"description":"Writes an integer {{Type|number}} to the save object.","examples":[],"isConstructor":false,"name":"WriteInt","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to write. Maximum length is 1024.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Writes a {{Type|string}} to the save object.","examples":[],"isConstructor":false,"name":"WriteString","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The vector to write.","isOptional":false,"isVarArg":false,"name":"vec","type":"Vector"}],"description":"Writes a {{Type|Vector}} to the save object.","examples":[],"isConstructor":false,"name":"WriteVector","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"ISave"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"An object representing game texture, like a .vtf file. Do not confuse with {{Type|IMaterial}}. Returned by {{ClassFunction|IMaterial|GetTexture}}","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Invokes the generator of the texture. Reloads file based textures from disk and clears render target textures.","examples":[],"isConstructor":false,"name":"Download","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The X coordinate.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The Y coordinate.","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"Returns the color of the specified pixel, only works for textures created from PNG files.\n\n{{Bug|Issue=2407|The returned color will not have the color metatable.}}","examples":[],"isConstructor":false,"name":"GetColor","realm":"shared","returns":[{"description":"The color of the pixel as a {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[],"description":"Returns the true unmodified height of the texture.","examples":[],"isConstructor":false,"name":"GetMappingHeight","realm":"shared","returns":[{"description":"height","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the true unmodified width of the texture.","examples":[],"isConstructor":false,"name":"GetMappingWidth","realm":"shared","returns":[{"description":"width","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the name of the texture, in most cases the path.","examples":[],"isConstructor":false,"name":"GetName","realm":"shared","returns":[{"description":"name","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the modified height of the texture, this value may be affected by mipmapping and other factors.","examples":[],"isConstructor":false,"name":"Height","realm":"shared","returns":[{"description":"height","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the texture is invalid or not.","examples":[],"isConstructor":false,"name":"IsError","realm":"shared","returns":[{"description":"isError","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the modified width of the texture, this value may be affected by mipmapping and other factors.","examples":[],"isConstructor":false,"name":"Width","realm":"shared","returns":[{"description":"width","type":"number"}]}],"isHook":false,"isPureAbstract":false,"name":"ITexture"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"This is returned from {{LibraryFunction|video|Record}}.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Usually set to what {{GlobalFunction|FrameTime}} is, or simply 1/fps.","isOptional":false,"isVarArg":false,"name":"frameTime","type":"number"},{"default":"","description":"If true it will downsample the whole screenspace to the videos width and height, otherwise it will just record from the top left corner to the given width and height and therefor not the whole screen.","isOptional":false,"isVarArg":false,"name":"downsample","type":"boolean"}],"description":"Adds the current framebuffer to the video stream.","examples":[{"code":"--Taken from /lua/menu/video.lua\n\nhook.Add( \"DrawOverlay\", \"CaptureFrames\", function()\n\n\tif ( !ActiveVideo ) then return end\n\t\n\tActiveVideo:AddFrame( FrameTime(), true );\n\nend )","description":"If ActiveVideo was a {{Type|IVideoWriter}}, it would record the screen every frame."}],"isConstructor":false,"name":"AddFrame","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Ends the video recording and dumps it to disk.","examples":[],"isConstructor":false,"name":"Finish","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the height of the video stream.","examples":[],"isConstructor":false,"name":"Height","realm":"client","returns":[{"description":"height","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Record.","isOptional":false,"isVarArg":false,"name":"record","type":"boolean"}],"description":"Sets whether to record sound or not.","examples":[],"isConstructor":false,"name":"SetRecordSound","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the width of the video stream.","examples":[],"isConstructor":false,"name":"Width","realm":"client","returns":[{"description":"width","type":"number"}]}],"isHook":false,"isPureAbstract":false,"name":"IVideoWriter"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Similarly to {{Type|DIconLayout}}, this lays out panels in two dimensions as tiles. The difference between this and {{Type|DIconLayout}} is that {{Type|DIconLayout}} items all have the same height while {{Type|DTileLayout}} items do not have this enforcement. {{Type|DTileLayout}} will find the best way to \"pack\" its chidren. For example, in a two column layout, a item of height 2 units will be placed in one column while two items of height 1 unit will be placed in the other column. It is worth noting however that because this panel iterates through its children in an undefined order and lays out while it is iterating, there is no guarentee that this packing will lead to the lowest possible height.\n\nThis is used by the spawnmenu to arrange spawnicons.\n\nThe base size defines the smallest a tile can be, and it will resize vertically to accommodate all child panels. The number of elements in each row is determinded by the base size and width.\n\nIt also optionally permits the rearrangement of these tiles. To enable this functionality, call {{ClassFunction|DDragBase|MakeDroppable}} on the DTileLayout with a unique identifier. All panels added following this will be moveable.","examples":[{"code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize(300, 300)\nframe:SetTitle(\"DTileLayout Example\")\nframe:MakePopup()\nframe:Center()\n\nlocal layout = vgui.Create(\"DTileLayout\", frame)\nlayout:SetBaseSize(32) -- Tile size\nlayout:Dock(FILL)\n\n//Draw a background so we can see what it's doing\nlayout:SetDrawBackground(true)\nlayout:SetBackgroundColor(Color(0, 100, 100))\n\nlayout:MakeDroppable(\"unique_name\") -- Allows us to rearrange children\n\nfor i = 1, 32 do\n\tlayout:Add(Label(\" Label \" .. i))\nend","description":"Creates a DTileLayout within a {{Type|DFrame}}, sets the base size and adds 32 {{Type|DLabel}}s."}],"extends":"DDragBase","functions":[{"accessModifier":"public","arguments":[],"description":"{{Internal}} Clears the panel's tile table. Used by {{ClassFunction|DTileLayout|LayoutTiles}}.","examples":[],"isConstructor":false,"name":"ClearTiles","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The x coordinate of the top-left corner of the panel.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The y coordinate of the top-left corner of the panel.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The panel's width.","isOptional":false,"isVarArg":false,"name":"w","type":"number"},{"default":"","description":"The panel's height.","isOptional":false,"isVarArg":false,"name":"h","type":"number"}],"description":"{{Internal}} Called to designate a range of tiles as occupied by a panel.","examples":[],"isConstructor":false,"name":"ConsumeTiles","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Creates and returns an exact copy of the DTileLayout.","examples":[],"isConstructor":false,"name":"Copy","realm":"client","returns":[{"description":"The created copy.","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The source panel from which to copy all children.","isOptional":false,"isVarArg":false,"name":"source","type":"Panel"}],"description":"Creates copies of all the children from the given panel object and parents them to this one.","examples":[],"isConstructor":false,"name":"CopyContents","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The x coordinate to start looking from.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The y coordinate to start looking from.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The needed width.","isOptional":false,"isVarArg":false,"name":"w","type":"number"},{"default":"","description":"The needed height.","isOptional":false,"isVarArg":false,"name":"h","type":"number"}],"description":"{{Internal}} Finds the coordinates of the first group of free tiles that fit the given size.","examples":[],"isConstructor":false,"name":"FindFreeTile","realm":"client","returns":[{"description":"The x coordinate of the found available space.","type":"number"},{"description":"The y coordinate of the found available space.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The x coordinate of the first tile.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The y coordinate of the first tile.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The width needed.","isOptional":false,"isVarArg":false,"name":"w","type":"number"},{"default":"","description":"The height needed.","isOptional":false,"isVarArg":false,"name":"h","type":"number"}],"description":"{{Internal}} Determines if a group of tiles is vacant.","examples":[],"isConstructor":false,"name":"FitsInTile","realm":"client","returns":[{"description":"Whether or not this group is available for occupation.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the size of each single tile, set with {{ClassFunction|DTileLayout|SetBaseSize}}.","examples":[],"isConstructor":false,"name":"GetBaseSize","realm":"client","returns":[{"description":"Base tile size.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the border spacing set by {{ClassFunction|DTileLayout|SetBorder}}.","examples":[],"isConstructor":false,"name":"GetBorder","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the minimum height the DTileLayout can resize to.","examples":[],"isConstructor":false,"name":"GetMinHeight","realm":"client","returns":[{"description":"The minimum height the panel can shrink to.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the X axis spacing between 2 elements set by {{ClassFunction|DTileLayout|SetSpaceX}}.","examples":[],"isConstructor":false,"name":"GetSpaceX","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the Y axis spacing between 2 elements set by {{ClassFunction|DTileLayout|SetSpaceY}}.","examples":[],"isConstructor":false,"name":"GetSpaceY","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The x coordinate of the tile.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The y coordinate of the tile.","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"{{Internal}} Gets the occupied state of a tile.","examples":[],"isConstructor":false,"name":"GetTile","realm":"client","returns":[{"description":"The occupied state of the tile, normally ''1'' or ''nil''.","type":"any"}]},{"accessModifier":"public","arguments":[],"description":"Resets the last width/height info, and invalidates the panel's layout, causing it to recalculate all child positions. It is called whenever a child is added or removed, and can be called to refresh the panel.","examples":[],"isConstructor":false,"name":"Layout","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}} Called by {{HookFunction|PANEL|PerformLayout}} to arrange and lay out the child panels, if it has changed in size.","examples":[],"isConstructor":false,"name":"LayoutTiles","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when anything is dropped on or rearranged within the DTileLayout.","examples":[],"isConstructor":false,"name":"OnModified","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The size of each tile. It is recommended you use 2<sup>n</sup> (''16, 32, 64...'') numbers, and those above ''4'', as numbers lower than this will result in many tiles being processed and therefore slow operation.","isOptional":false,"isVarArg":false,"name":"size","type":"number"}],"description":"Sets the size of a single tile. If a child panel is larger than this size, it will occupy several tiles.\n\nIf you are setting the size of the children properly then you probably don't need to change this.","examples":[],"isConstructor":false,"name":"SetBaseSize","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"border","type":"number"}],"description":"Sets the spacing between the border/edge of the {{Type|DTileLayout}} and all the elements inside.","examples":[],"isConstructor":false,"name":"SetBorder","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum height the panel can shrink to.","isOptional":false,"isVarArg":false,"name":"minH","type":"number"}],"description":"Determines the minimum height the DTileLayout will resize to. This is useful if child panels will be added/removed often.","examples":[],"isConstructor":false,"name":"SetMinHeight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"spacingX","type":"number"}],"description":"Sets the spacing between 2 elements in the {{Type|DTileLayout}} on the X axis.","examples":[],"isConstructor":false,"name":"SetSpaceX","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"spaceY","type":"number"}],"description":"Sets the spacing between 2 elements in the {{Type|DTileLayout}} on the Y axis.","examples":[],"isConstructor":false,"name":"SetSpaceY","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The x coordinate of the tile.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The y coordinate of the tile.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The new state of the tile, normally ''1'' or ''nil''.","isOptional":false,"isVarArg":false,"name":"state","type":"any"}],"description":"{{Internal}} Called to set the occupied state of a tile.","examples":[],"isConstructor":false,"name":"SetTile","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when anything is dropped on or rearranged within the {{Type|DDragBase}}.","examples":[],"isConstructor":false,"name":"OnModified","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DTileLayout"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Object containing parsed markup for later rendering. Created by {{LibraryFunction|markup|Parse}}.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"{{Internal}}\nCreates a new empty markupobject. Use {{LibraryFunction|markup|Parse}} instead of calling this.","examples":[],"isConstructor":false,"name":"Create","realm":"client","returns":[{"description":"The created object.","type":"MarkupObject"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The X coordinate on the screen.","isOptional":false,"isVarArg":false,"name":"xOffset","type":"number"},{"default":"","description":"The Y coordinate on the screen.","isOptional":false,"isVarArg":false,"name":"yOffset","type":"number"},{"default":"","description":"The alignment of the x coordinate using {{Enum|TEXT_ALIGN}}","isOptional":false,"isVarArg":false,"name":"xAlign","type":"TEXT_ALIGN"},{"default":"","description":"The alignment of the y coordinate using {{Enum|TEXT_ALIGN}}","isOptional":false,"isVarArg":false,"name":"yAlign","type":"TEXT_ALIGN"},{"default":"255","description":"Sets the alpha of all drawn objects to this.","isOptional":true,"isVarArg":false,"name":"alphaoverride","type":"number"}],"description":"Draws the computed markupobject to the screen.","examples":[],"isConstructor":false,"name":"Draw","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Gets computed the height of the markupobject.","examples":[],"isConstructor":false,"name":"GetHeight","realm":"client","returns":[{"description":"The computed height.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets computed the width of the markupobject.","examples":[],"isConstructor":false,"name":"GetWidth","realm":"client","returns":[{"description":"The computed width.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets computed the width and height of the markupobject.","examples":[],"isConstructor":false,"name":"Size","realm":"client","returns":[{"description":"The computed width.","type":"number"},{"description":"The computed height.","type":"number"}]}],"isHook":false,"isPureAbstract":false,"name":"MarkupObject"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}\n\nThe panel used internally for tool tips. See {{ClassFunction|Panel|SetTooltip}}.","examples":[{"code":"local DFrame = vgui.Create( \"DFrame\" )\nDFrame:SetPos( 100, 100 )\nDFrame:SetSize( 100, 100 )\n\nlocal DTooltip = vgui.Create( \"DTooltip\" )\nDTooltip:SetPos( 0, 0 )\nDTooltip:SetSize( 250, 50 )\nDTooltip:SetText( \"Manual Tooltip\" )\nDTooltip:OpenForPanel( DFrame )\nDTooltip:PositionTooltip()\nDTooltip.Paint = function()\n\tdraw.RoundedBox( 5, 0, 0, 250, 50, Color( 255, 255, 255, 255 ) )\nend","description":"Drawing a Tool Tip manually, then painting over it."}],"extends":"DLabel","functions":[{"accessModifier":"public","arguments":[],"description":"Forces the tooltip to close. This will remove the panel.","examples":[],"isConstructor":false,"name":"Close","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"arrow location on the x axis","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"arrow location on the y axis","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"Used to draw a triangle beneath the {{Type|DTooltip}}\n{{Note|Requires {{ClassFunction|DTooltip|SetContents}}, without this it will error}}","examples":[],"isConstructor":false,"name":"DrawArrow","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"Sets up the tooltip for display for given panel and starts the timer.","examples":[],"isConstructor":false,"name":"OpenForPanel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nPositions the {{Type|DTooltip}} so it doesn't stay in the same draw position.","examples":[],"isConstructor":false,"name":"PositionTooltip","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Contents","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"},{"default":"false","description":"If set to true, the panel in the first argument will be automatically removed when {{Type|DTooltip}} is closed via {{ClassFunction|DTooltip|Close}}.","isOptional":true,"isVarArg":false,"name":"bDelete","type":"DTooltip"}],"description":"What Panel you want put inside of the {{Type|DTooltip}}\n\n{{Note|You can only have one Panel at a time; use Parenting to add more}}","examples":[],"isConstructor":false,"name":"SetContents","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DTooltip"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"'''NextBots''' are a new system to create NPCs in the Source Engine, utilizing the more powerful {{Lib|navmesh}} system for navigation over the old node based system.\n\nThis page lists all possible functions usable with '''NextBot'''s.\n\nSee [[NextBot NPC Creation]] for more information on how to create NextBot NPCs.","examples":[],"extends":"Entity","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Damage info passed from an onkilled event","isOptional":false,"isVarArg":false,"name":"info","type":"CTakeDamageInfo"}],"description":"Become a ragdoll and remove the entity.","examples":[],"isConstructor":false,"name":"BecomeRagdoll","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Should only be called in BodyUpdate. This sets the move_x and move_y pose parameters of the bot to fit how they're currently moving, sets the animation speed to suit the ground speed, and calls FrameAdvance.\n\n{{Bug|Issue=3420|This function might cause crashes with some activities.}}","examples":[],"isConstructor":false,"name":"BodyMoveXY","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Either \"random\", \"near\", \"far\"","isOptional":false,"isVarArg":false,"name":"type","type":"string"},{"default":"","description":"This table should contain the search info.<br/><br/>\n\n{{FuncArg|string|type|The type (Only'hiding' for now)}}<br/>{{FuncArg|Vector|pos|the position to search.}}<br/>{{FuncArg|number|radius|the radius to search.}}<br/>{{FuncArg|number|stepup|the highest step to step up.}}<br/>{{FuncArg|number|stepdown|the highest we can step down without being hurt.}}","isOptional":false,"isVarArg":false,"name":"options","type":"table"}],"description":"Like {{ClassFunction|NextBot|FindSpots}} but only returns a vector.","examples":[],"isConstructor":false,"name":"FindSpot","realm":"server","returns":[{"description":"If it finds a spot it will return a vector. If not it will return nil.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"This table should contain the search info.<br/><br/>\n\n{{FuncArg|string|type|The type (either 'hiding')}}<br/>{{FuncArg|Vector|pos|the position to search.}}<br/>{{FuncArg|number|radius|the radius to search.}}<br/>{{FuncArg|number|stepup|the highest step to step up.}}<br/>{{FuncArg|number|stepdown|the highest we can step down without being hurt.}}","isOptional":false,"isVarArg":false,"name":"specs","type":"table"}],"description":"Returns a table of hiding spots.","examples":[],"isConstructor":false,"name":"FindSpots","realm":"server","returns":[{"description":"An unsorted table of tables containing:<br/><br/>\n{{FuncArg|Vector|vector|The position of the hiding spot}}<br/>{{FuncArg|number|distance|the distance to that position}}","type":"table[]"}]},{"accessModifier":"public","arguments":[],"description":"Returns the currently running activity","examples":[],"isConstructor":false,"name":"GetActivity","realm":"server","returns":[{"description":"The current activity","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to measure distance to. Can be an entity.","isOptional":false,"isVarArg":false,"name":"to","type":"Vector"}],"description":"Returns squared distance to an entity or a position.\n\nSee also {{ClassFunction|NextBot|GetRangeTo}}.","examples":[],"isConstructor":false,"name":"GetRangeSquaredTo","realm":"server","returns":[{"description":"The squared distance","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to measure distance to. Can be an entity.","isOptional":false,"isVarArg":false,"name":"to","type":"Vector"}],"description":"Returns the distance to an entity or position.\n\nSee also {{ClassFunction|NextBot|GetRangeSquaredTo}}.","examples":[],"isConstructor":false,"name":"GetRangeTo","realm":"server","returns":[{"description":"The distance","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the solid mask for given NextBot.","examples":[],"isConstructor":false,"name":"GetSolidMask","realm":"server","returns":[{"description":"The solid mask, see {{Enum|CONTENTS}} and {{Enum|MASK}}","type":"CONTENTS | MASK"}]},{"accessModifier":"public","arguments":[],"description":"Called from Lua when the NPC is stuck. This should only be called from the behaviour coroutine - so if you want to override this function and do something special that yields - then go for it.\n\nYou should always call self.loco:ClearStuck() in this function to reset the stuck status - so it knows it's unstuck. See {{ClassFunction|CLuaLocomotion|ClearStuck}}.","examples":[],"isConstructor":false,"name":"HandleStuck","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position we want to get to","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"A table containing a bunch of tweakable options.<br/><br/>\n\n{{FuncArg|number|lookahead|Minimum look ahead distance.}}<br/>\n{{FuncArg|number|tolerance|How close we must be to the goal before it can be considered complete.}}<br/>\n{{FuncArg|boolean|draw|Draw the path. Only visible on listen servers and single player.}}<br/>\n{{FuncArg|number|maxage|Maximum age of the path before it times out.}}<br/>\n{{FuncArg|number|repath|Rebuilds the path after this number of seconds.}}","isOptional":false,"isVarArg":false,"name":"options","type":"table"}],"description":"To be called in the behaviour coroutine only! Will yield until the bot has reached the goal or is stuck","examples":[],"isConstructor":false,"name":"MoveToPos","realm":"server","returns":[{"description":"Either \"failed\", \"stuck\", \"timeout\" or \"ok\" - depending on how the NPC got on","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The sequence name","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"1","description":"Playback Rate of that sequence","isOptional":true,"isVarArg":false,"name":"speed","type":"number"}],"description":"To be called in the behaviour coroutine only! Plays an animation sequence and waits for it to end before returning.","examples":[],"isConstructor":false,"name":"PlaySequenceAndWait","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new mask, see {{Enum|CONTENTS}} and {{Enum|MASK}}","isOptional":false,"isVarArg":false,"name":"mask","type":"CONTENTS | MASK"}],"description":"Sets the solid mask for given NextBot.\n\nThe default solid mask of a NextBot is [[Enums/MASK|MASK_NPCSOLID]].","examples":[],"isConstructor":false,"name":"SetSolidMask","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"One of the {{Enum|ACT}}","isOptional":false,"isVarArg":false,"name":"activity","type":"ACT"}],"description":"Start doing an activity (animation)","examples":[],"isConstructor":false,"name":"StartActivity","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called to initialize the behaviour.\n\nYou shouldn't override this - it's used to kick off the coroutine that runs the bot's behaviour. \n\nThis is called automatically when the NPC is created, there should be no need to call it manually.","examples":[],"isConstructor":false,"name":"BehaveStart","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"How long since the last update","isOptional":false,"isVarArg":false,"name":"interval","type":"number"}],"description":"Called to update the bot's behaviour.","examples":[],"isConstructor":false,"name":"BehaveUpdate","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called to update the bot's animation.","examples":[],"isConstructor":false,"name":"BodyUpdate","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity the nextbot came in contact with.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called when the nextbot touches another entity.","examples":[],"isConstructor":false,"name":"OnContact","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the bot is ignited.","examples":[],"isConstructor":false,"name":"OnIgnite","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The damage info","isOptional":false,"isVarArg":false,"name":"info","type":"CTakeDamageInfo"}],"description":"Called when the bot gets hurt.","examples":[],"isConstructor":false,"name":"OnInjured","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The damage info","isOptional":false,"isVarArg":false,"name":"info","type":"CTakeDamageInfo"}],"description":"Called when the bot gets killed.","examples":[{"code":"function ENT:OnKilled( dmginfo )\n\n\thook.Call( \"OnNPCKilled\", GAMEMODE, self, dmginfo:GetAttacker(), dmginfo:GetInflictor() )\n\n\tself:BecomeRagdoll( dmginfo )\n\nend","description":"Example of NPC becoming a ragdoll after death and sending death notification to everybodys killfeed."},{"code":"function ENT:OnKilled( dmginfo )\n\t\n\thook.Call( \"OnNPCKilled\", GAMEMODE, self, dmginfo:GetAttacker(), dmginfo:GetInflictor() )\n\t\n\tlocal body = ents.Create( \"prop_ragdoll\" )\n\tbody:SetPos( self:GetPos() )\n\tbody:SetModel( self:GetModel() )\n\tbody:Spawn()\n\t\n\tself:Remove()\n\t\n\ttimer.Simple( 5, function()\n\t\n\t\tbody:Remove()\n\t\t\n\tend )\n\nend","description":"Removes the body after 5 seconds, to prevent having lots of bodies laying around after a while."}],"isConstructor":false,"name":"OnKilled","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity the nextbot has landed on.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called when the bot's feet return to the ground.","examples":[],"isConstructor":false,"name":"OnLandOnGround","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity the bot \"jumped\" from.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Called when the bot's feet leave the ground - for whatever reason.","examples":[],"isConstructor":false,"name":"OnLeaveGround","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The navigation area the bot just left","isOptional":false,"isVarArg":false,"name":"old","type":"CNavArea"},{"default":"","description":"The navigation area the bot just entered","isOptional":false,"isVarArg":false,"name":"newVal","type":"CNavArea"}],"description":"Called when the nextbot enters a new navigation area.","examples":[],"isConstructor":false,"name":"OnNavAreaChanged","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The victim that was killed","isOptional":false,"isVarArg":false,"name":"victim","type":"Entity"},{"default":"","description":"The damage info","isOptional":false,"isVarArg":false,"name":"info","type":"CTakeDamageInfo"}],"description":"Called when someone else or something else has been killed.","examples":[],"isConstructor":false,"name":"OnOtherKilled","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the bot thinks it is stuck.","examples":[{"code":"function ENT:OnStuck()\n\n\tlocal dmginfo = DamageInfo()\n\tdmginfo:SetAttacker( self )\n\n\tself:OnKilled( dmginfo )\n\t\nend","description":"Kills the bot when getting stuck, using a new damageinfo object."}],"isConstructor":false,"name":"OnStuck","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the bot thinks it is un-stuck.","examples":[],"isConstructor":false,"name":"OnUnStuck","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called every tick on the server. Called every frame on the client.","examples":[],"isConstructor":false,"name":"Think","realm":"shared","returns":[{"description":"Return true if you used {{ClassFunction|Entity|NextThink}} to override the next execution time.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The initial cause for the use.","isOptional":false,"isVarArg":false,"name":"activator","type":"Entity"},{"default":"","description":"The entity that directly triggered the use.","isOptional":false,"isVarArg":false,"name":"caller","type":"Entity"},{"default":"","description":"The type of use, see {{Enum|USE}}","isOptional":false,"isVarArg":false,"name":"useType","type":"USE"},{"default":"","description":"Any passed value","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Called when a player 'uses' the entity.","examples":[],"isConstructor":false,"name":"Use","realm":"server","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"NextBot"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A tree view element for Derma.\n\nSee also {{Type|DTree_Node}}.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 300, 500 )\nframe:Center()\nframe:MakePopup()\n\nlocal dtree  = vgui.Create( \"DTree\", frame )\ndtree:Dock( FILL )\n\nlocal node = dtree:AddNode( \"Node One\" )\nlocal node = dtree:AddNode( \"Node Two\" )\nlocal cnode = node:AddNode( \"Node 2.1\" )\nlocal cnode = node:AddNode( \"Node 2.2\" )\nlocal cnode = node:AddNode( \"Node 2.3\" )\nlocal cnode = node:AddNode( \"Node 2.4\" )\nlocal cnode = node:AddNode( \"Node 2.5\" )\nlocal gcnode = cnode:AddNode( \"Node 2.5\" )\nlocal cnode = node:AddNode( \"Node 2.6\" )\nlocal node = dtree:AddNode( \"Node Three ( Maps Folder )\" )\nnode:MakeFolder( \"maps\", \"GAME\", true )\nlocal node = dtree:AddNode( \"Node Four\" )","description":"Example of using DTree"}],"extends":"DScrollPanel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Name of the option.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"\"icon16/folder.png\"","description":"The icon that will show nexto the node in the DTree.","isOptional":true,"isVarArg":false,"name":"icon","type":"string"}],"description":"Add a node to the DTree","examples":[],"isConstructor":false,"name":"AddNode","realm":"client","returns":[{"description":"Returns the created {{Type|DTree_Node}} panel.","type":"DTree_Node"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"bExpand","type":"boolean"}],"description":"{{Internal}}\n\nCalls directly to {{ClassFunction|Panel|InvalidateLayout}}.\nCalled by {{Type|DTree_Node}}s when a sub element has been expanded or collapsed.\n\nUsed as a placeholder function alongside {{ClassFunction|DTree|ExpandTo}}, {{ClassFunction|DTree|SetExpanded}} and {{ClassFunction|DTree|MoveChildTo}}.\n\nThe {{Type|DTree}} acts a root node and methods with the same name in {{Type|DTree_Node}} call to the parent.","examples":[],"isConstructor":false,"name":"ChildExpanded","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the any node is clicked. Called by {{ClassFunction|DTree_Node|DoClick}}.","examples":[],"isConstructor":false,"name":"DoClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the any node is right clicked. Called by {{ClassFunction|DTree_Node|DoRightClick}}.","examples":[],"isConstructor":false,"name":"DoRightClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"bExpand","type":"boolean"}],"description":"{{Internal}}\n\nDoes nothing. Used as a placeholder empty function alongside {{ClassFunction|DTree|MoveChildTo}}, {{ClassFunction|DTree|SetExpanded}} and {{ClassFunction|DTree|ChildExpanded}}.\n\nThe {{Type|DTree}} acts a root node and methods with the same name in {{Type|DTree_Node}} call to the parent.","examples":[],"isConstructor":false,"name":"ExpandTo","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the status of {{ClassFunction|DTree|SetClickOnDragHover}}. See that for more info.","examples":[],"isConstructor":false,"name":"GetClickOnDragHover","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the indentation size of the {{Type|DTree}}, the distance between each \"level\" of the tree is offset on the left from the previous level.\n\nCurrently this feature has no effect on the {{Type|DTree}} element.","examples":[],"isConstructor":false,"name":"GetIndentSize","realm":"client","returns":[{"description":"The indentation size.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the height of each {{Type|DTree_Node}} in the tree.","examples":[],"isConstructor":false,"name":"GetLineHeight","realm":"client","returns":[{"description":"The height of each {{Type|DTree_Node}} in the tree.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the currently selected node.","examples":[],"isConstructor":false,"name":"GetSelectedItem","realm":"client","returns":[{"description":"Curently selected node.","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the [[Silkicons]] next to each node of the DTree will be displayed.\n\nIndividual icons can be set with {{ClassFunction|DTree_Node|SetIcon}} or passed as the second argument in {{ClassFunction|DTree|AddNode}}.","examples":[],"isConstructor":false,"name":"GetShowIcons","realm":"client","returns":[{"description":"Whether or not the silkicons next to each node will be displayed.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nDoes nothing.","examples":[],"isConstructor":false,"name":"LayoutTree","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The node to move","isOptional":false,"isVarArg":false,"name":"child","type":"Panel"},{"default":"","description":"{{Deprecated}} Unused, does nothing.","isOptional":false,"isVarArg":false,"name":"pos","type":"number"}],"description":"Moves given node to the top of {{Type|DTree}}s children. (Makes it the topmost mode)\n\nUsed as a placeholder function alongside {{ClassFunction|DTree|ExpandTo}}, {{ClassFunction|DTree|SetExpanded}} and {{ClassFunction|DTree|ChildExpanded}}.\n\nThe {{Type|DTree}} acts a root node and methods with the same name in {{Type|DTree_Node}} call to the parent.","examples":[],"isConstructor":false,"name":"MoveChildTo","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The node that was selected.","isOptional":false,"isVarArg":false,"name":"node","type":"Panel"}],"description":"This function is called when a node within a tree is selected.","examples":[],"isConstructor":false,"name":"OnNodeSelected","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the root {{Type|DTree_Node}}, the node that is the parent to all other nodes of the DTree.","examples":[],"isConstructor":false,"name":"Root","realm":"client","returns":[{"description":"Root node.","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Enables the \"click when drag-hovering\" functionality.\n\nIf enabled, when hovering over any {{Type|DTree_Node}} of this {{Type|DTree}} while dragging a panel, the node will be automatically clicked on (and subsequently {{ClassFunction|DTree|OnNodeSelected}} will be called) to open any attached panels, such as spawnlists in spawnmenu.\n\nSee also {{ClassFunction|Panel|DragHoverClick}}","examples":[],"isConstructor":false,"name":"SetClickOnDragHover","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"bExpand","type":"boolean"}],"description":"{{Internal}}\n\nDoes nothing. Is not called by the {{Type|DTree}} itself.\n\nUsed as a placeholder empty function alongside {{ClassFunction|DTree|ExpandTo}}, {{ClassFunction|DTree|MoveChildTo}} and {{ClassFunction|DTree|ChildExpanded}} to prevent errors when {{ClassFunction|DTree_Node|SetExpanded}} is incorrectly used on a {{Type|DTree}}.","examples":[],"isConstructor":false,"name":"SetExpanded","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new indentation size.","isOptional":false,"isVarArg":false,"name":"size","type":"number"}],"description":"Sets the indentation size of the {{Type|DTree}}, the distance between each \"level\" of the tree is offset on the left from the previous level.\n\nCurrently this feature has no effect on the {{Type|DTree}} element.","examples":[],"isConstructor":false,"name":"SetIndentSize","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The height to set.","isOptional":false,"isVarArg":false,"name":"h","type":"number"}],"description":"Sets the height of each {{Type|DTree_Node}} in the tree.\n\nThe default value is 17.","examples":[],"isConstructor":false,"name":"SetLineHeight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"{{Type|DTree_Node}} to select.","isOptional":false,"isVarArg":false,"name":"node","type":"DTree_Node"}],"description":"Set the currently selected top-level node.","examples":[],"isConstructor":false,"name":"SetSelectedItem","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether or not to show icons.","isOptional":false,"isVarArg":false,"name":"show","type":"boolean"}],"description":"Sets whether or not the [[Silkicons]] next to each node of the DTree will be displayed.\n\nIndividual icons can be set with {{ClassFunction|DTree_Node|SetIcon}} or passed as the second argument in {{ClassFunction|DTree|AddNode}}.","examples":[],"isConstructor":false,"name":"SetShowIcons","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the [[Silkicons]] next to each node of the DTree will be displayed.\n\nAlias of {{ClassFunction|DTree|GetShowIcons}}.","examples":[],"isConstructor":false,"name":"ShowIcons","realm":"client","returns":[{"description":"Whether or not the silkicons next to each node will be displayed.","type":"boolean"}]}],"isHook":false,"isPureAbstract":true,"name":"DTree"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The render library is a powerful set of functions that let you control how the world and its contents are rendered. It can also be used to draw some 3D clientside effects such as beams, boxes and spheres.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Beam start position.","isOptional":false,"isVarArg":false,"name":"startPos","type":"Vector"},{"default":"","description":"The width of the beam.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The end coordinate of the texture used.","isOptional":false,"isVarArg":false,"name":"textureEnd","type":"number"},{"default":"","description":"The color to be used. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Adds a beam segment to the beam started by {{LibraryFunction|render|StartBeam}}.","examples":[],"isConstructor":false,"name":"AddBeam","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The texture to blur","isOptional":false,"isVarArg":false,"name":"rendertarget","type":"ITexture"},{"default":"","description":"Horizontal amount of blur","isOptional":false,"isVarArg":false,"name":"blurx","type":"number"},{"default":"","description":"Vertical amount of blur","isOptional":false,"isVarArg":false,"name":"blury","type":"number"},{"default":"","description":"Amount of passes to go through","isOptional":false,"isVarArg":false,"name":"passes","type":"number"}],"description":"Blurs the render target ( or a given texture )","examples":[],"isConstructor":false,"name":"BlurRenderTarget","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"&nbsp;","isOptional":true,"isVarArg":false,"name":"mat","type":"IMaterial"}],"description":"{{Warning|This function is broken and does absolutely nothing}}","examples":[],"isConstructor":false,"name":"BrushMaterialOverride","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Parameters of the capture. See {{Struct|RenderCaptureData}}.","isOptional":false,"isVarArg":false,"name":"captureData","type":"RenderCaptureData"}],"description":"Captures a part of the current render target and returns the data as a binary string in the given format.\n\nSince the pixel buffer clears itself every frame, this will return a black screen outside of [[:Category:Render_Hooks|render hooks]]. To capture the user's final view, use {{HookFunction|GM|PostRender}}. This will not capture the Steam overlay or third-party injections (such as the Discord overlay, Overwolf, and advanced cheats) on the user's screen.\n\n{{Bug|Issue=2571|This sets the alpha channel incorrectly in PNG mode, causing the foreground to be rendered almost completely transparent.}}","examples":[{"code":"local ScreenshotRequested = false\nfunction RequestAScreenshot()\n\tScreenshotRequested = true\nend\n\n-- For the sake of this example, we use a console command to request a screenshot\nconcommand.Add( \"make_screenshot\", RequestAScreenshot )\n\nhook.Add( \"PostRender\", \"example_screenshot\", function()\n\tif ( !ScreenshotRequested ) then return end\n\tScreenshotRequested = false\n\n\tlocal data = render.Capture( {\n\t\tformat = \"jpeg\",\n\t\tquality = 70, //100 is max quality, but 70 is good enough.\n\t\th = ScrH(),\n\t\tw = ScrW(),\n\t\tx = 0,\n\t\ty = 0,\n\t} )\n\tlocal f = file.Open( \"Image.jpg\", \"wb\", \"DATA\" )\n\tf:Write( data )\n\tf:Close()\nend )","description":"How you could use this to save a picture of your screen."}],"isConstructor":false,"name":"Capture","realm":"client","returns":[{"description":"binaryData","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Dumps the current render target and allows the pixels to be accessed by {{LibraryFunction|render|ReadPixel}}.","examples":[],"isConstructor":false,"name":"CapturePixels","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Red component to clear to.","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"Green component to clear to.","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"Blue component to clear to.","isOptional":false,"isVarArg":false,"name":"b","type":"number"},{"default":"","description":"Alpha component to clear to.","isOptional":false,"isVarArg":false,"name":"a","type":"number"},{"default":"false","description":"Clear the depth.","isOptional":true,"isVarArg":false,"name":"clearDepth","type":"boolean"},{"default":"false","description":"Clear the stencil.","isOptional":true,"isVarArg":false,"name":"clearStencil","type":"boolean"}],"description":"Clears the current render target and the specified buffers.\n\n{{Bug|Issue=2085|This sets the alpha incorrectly for {{Lib|surface}} draw calls for render targets.}}","examples":[],"isConstructor":false,"name":"Clear","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Value of the red channel to clear the current rt with.","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"Value of the green channel to clear the current rt with.","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"Value of the blue channel to clear the current rt with.","isOptional":false,"isVarArg":false,"name":"b","type":"number"},{"default":"","description":"Value of the alpha channel to clear the current rt with.","isOptional":false,"isVarArg":false,"name":"a","type":"number"},{"default":"","description":"Clear the depth buffer.","isOptional":false,"isVarArg":false,"name":"depth","type":"boolean"}],"description":"Clears the current rendertarget for obeying the current stencil buffer conditions.","examples":[{"code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\trender.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\trender.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Set the reference value to 1. This is what the compare function tests against\n\trender.SetStencilReferenceValue( 1 )\n\t-- Refuse to write things to the screen unless that pixel's value is 1\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\t-- Write a 1 to the centre third of the screen. Because we cleared it earlier, everything is currently 0\n\tlocal w, h = ScrW() / 3, ScrH() / 3\n\tlocal x_start, y_start = w, h\n\tlocal x_end, y_end = x_start + w, y_start + h\n\trender.ClearStencilBufferRectangle( x_start, y_start, x_end, y_end, 1 )\n\n\t-- Tell the render library to clear the screen, but obeying the stencil test function.\n\t-- This means it will only clear the centre third.\n\trender.ClearBuffersObeyStencil(0, 148, 133, 255, false);\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","description":"Clearing a section of the screen via the stencil buffer"}],"isConstructor":false,"name":"ClearBuffersObeyStencil","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resets the depth buffer.\n\n{{Bug|Issue=3317|This function also clears the stencil buffer. Use {{LibraryFunction|render|Clear}} in the meantime.}}","examples":[],"isConstructor":false,"name":"ClearDepth","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"texture","type":"ITexture"},{"default":"","description":"The color, see {{Struct|Color}}","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Clears a render target\n\nIt uses {{LibraryFunction|render|Clear}} then {{LibraryFunction|render|SetRenderTarget}} on the modified render target.","examples":[],"isConstructor":false,"name":"ClearRenderTarget","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resets all values in the stencil buffer to zero.","examples":[{"code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\trender.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\trender.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Set the reference value to 1. This is what the compare function tests against\n\trender.SetStencilReferenceValue( 1 )\n\t-- Refuse to write things to the screen unless that pixel's value is 1\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\t-- Set the entire screen to 0\n\trender.ClearStencil()\n\n\t-- Attempt to draw our entities. Nothing will draw, because nothing in the buffer is 1.\n\tfor _, ent in pairs( ents.FindByClass( \"sent_stencil_test\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","description":"A silly example that shows that nothing will render if you clear the stencil buffer. (From \n[https://github.com/Lexicality/stencil-tutorial Lex's Stencil Tutorial])"}],"isConstructor":false,"name":"ClearStencil","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"X origin of the rectangle.","isOptional":false,"isVarArg":false,"name":"originX","type":"number"},{"default":"","description":"Y origin of the rectangle.","isOptional":false,"isVarArg":false,"name":"originY","type":"number"},{"default":"","description":"The end X coordinate of the rectangle.","isOptional":false,"isVarArg":false,"name":"endX","type":"number"},{"default":"","description":"The end Y coordinate of the rectangle.","isOptional":false,"isVarArg":false,"name":"endY","type":"number"},{"default":"","description":"Value to set cleared stencil buffer to.","isOptional":false,"isVarArg":false,"name":"stencilValue","type":"number"}],"description":"Sets the stencil value in a specified rect.\n\nThis is '''not''' affected by {{LibraryFunction|render|SetStencilWriteMask}}","examples":[{"code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\trender.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\trender.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Set the reference value to 1. This is what the compare function tests against\n\trender.SetStencilReferenceValue( 1 )\n\t-- Refuse to write things to the screen unless that pixel's value is 1\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\t-- Write a 1 to the centre third of the screen. Because we cleared it earlier, everything is currently 0\n\tlocal w, h = ScrW() / 3, ScrH() / 3\n\tlocal x_start, y_start = w, h\n\tlocal x_end, y_end = x_start + w, y_start + h\n\trender.ClearStencilBufferRectangle( x_start, y_start, x_end, y_end, 1 )\n\n\t-- Draw our entities. They will only draw in the area cleared above\n\tfor _, ent in pairs( ents.FindByClass( \"sent_stencil_test\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","description":"A basic stencil operation that limits rendering to the centre of the screen"}],"isConstructor":false,"name":"ClearStencilBufferRectangle","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to sample from.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"The normal of the surface.","isOptional":false,"isVarArg":false,"name":"normal","type":"Vector"}],"description":"Calculates the lighting caused by dynamic lights for the specified surface.","examples":[],"isConstructor":false,"name":"ComputeDynamicLighting","realm":"client","returns":[{"description":"A vector representing the light at that point.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The position of the surface to get the light from.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"The normal of the surface to get the light from.","isOptional":false,"isVarArg":false,"name":"normal","type":"Vector"}],"description":"Calculates the light color of a certain surface.","examples":[],"isConstructor":false,"name":"ComputeLighting","realm":"client","returns":[{"description":"A vector representing the light at that point.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The texture to copy to","isOptional":false,"isVarArg":false,"name":"Target","type":"ITexture"}],"description":"Copies the currently active Render Target to the specified texture.","examples":[{"code":"function render.CopyTexture( from, to )\n\n\tlocal OldRT = render.GetRenderTarget()\n\n\t\trender.SetRenderTarget( from )\n\t\trender.CopyRenderTargetToTexture( to )\n\n\trender.SetRenderTarget( OldRT )\n\nend","description":"This is how it's used in {{LibraryFunction|render|CopyTexture}}"}],"isConstructor":false,"name":"CopyRenderTargetToTexture","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"texture_from","type":"ITexture"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"texture_to","type":"ITexture"}],"description":"Copies the contents of one texture to another. Only works with rendertargets.","examples":[],"isConstructor":false,"name":"CopyTexture","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Cullmode, see {{Enum|MATERIAL_CULLMODE}}","isOptional":false,"isVarArg":false,"name":"cullMode","type":"MATERIAL_CULLMODE"}],"description":"Changes the cull mode.","examples":[],"isConstructor":false,"name":"CullMode","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum depth of the upcoming render. 0.0 = render normally; 1.0 = render nothing","isOptional":false,"isVarArg":false,"name":"depthmin","type":"number"},{"default":"","description":"The maximum depth of the upcoming render. 0.0 = render everything (through walls); 1.0 = render normally","isOptional":false,"isVarArg":false,"name":"depthmax","type":"number"}],"description":"Set's the depth range of the upcoming render.","examples":[{"code":"local depthmin = 1.0\n\nfunction GM:PreDrawOpaqueRenderables(bDrawingDepth, bDrawingSkybox)\n\n\trender.DepthRange(depthmin, 1.0)\n\t\n\tif(depthmin > 0.0) then\n\t\tdepthmin = depthmin - 0.001\n\tend\n\t\nend","description":"Perform a downward screen wipe effect on all opaque objects once the client connects."},{"code":"local depthmin = 1.0\nlocal spawn_copies = {}\t-- The shadow copies\n\nfunction GM:PreDrawOpaqueRenderables(bDrawingDepth, bDrawingSkybox)\n\n\trender.DepthRange(depthmin, 1.0)\n\t\n\tif(!spawn_copies) then return false end\n\t\n\tif(depthmin > 0.0) then\n\t\tdepthmin = depthmin - 0.001\n\telse\n\t\n\t\tlocal alpha = 0\n\t\tlocal valid_copies = 0\n\t\t\n\t\t-- Fade out the shadow copies and remove them\n\t\tfor _, spawncopy in pairs(spawn_copies) do\n\t\t\tif(IsValid(spawncopy)) then\n\t\t\t\talpha = spawncopy:GetColor().a\n\t\t\t\tif(alpha > 0) then\n\t\t\t\t\tspawncopy:SetColor(Color(255, 255, 255, alpha-1))\n\t\t\t\telse\n\t\t\t\t\tspawncopy:Remove()\n\t\t\t\tend\n\t\t\t\tvalid_copies = valid_copies + 1\n\t\t\tend\n\t\tend\n\t\t\n\t\t-- Nullify table since we aren't using it any more\n\t\tif(valid_copies == 0) then\n\t\t\tspawn_copies = nil\n\t\tend\n\t\t\t\n\tend\n\t\nend\n\nfunction GM:OnEntityCreated(ent)\n\n\tif(!spawn_copies) then return end\n\t\n\t-- Prevents infinite loop and other errors\n\tif(ent:GetClass() != \"class C_BaseFlex\" &&\n\t\tent:GetRenderGroup() == RENDERGROUP_OPAQUE &&\n\t\tent:GetClass() != \"gmod_hands\") then\n\t\n\t\tlocal mdl = ent:GetModel()\n\t\t\n\t\t-- Check that the entity is a model and not a brush\n\t\tif(mdl && string.find(mdl, \".mdl\")) then\n\t\t\n\t\t\tlocal spawncopy = ClientsideModel(mdl)\n\t\t\t\n\t\t\t-- A material with $ignorez set to 1 works best here\n\t\t\tspawncopy:SetMaterial(\"models/overlay_rendertarget\")\n\t\t\tspawncopy:AddEffects(EF_BONEMERGE)\n\t\t\tspawncopy:SetParent(ent)\n\t\t\tspawncopy:SetRenderMode(RENDERMODE_TRANSALPHA)\n\t\t\tspawncopy:SetColor(Color(255, 255, 255, 92))\n\t\t\ttable.insert(spawn_copies, spawncopy)\n\t\t\t\n\t\tend\n\t\t\n\tend\n\t\nend","description":"Same effect as above but with a dark shadow skin present where the model is being drawn."}],"isConstructor":false,"name":"DepthRange","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Beam start position.","isOptional":false,"isVarArg":false,"name":"startPos","type":"Vector"},{"default":"","description":"Beam end position.","isOptional":false,"isVarArg":false,"name":"endPos","type":"Vector"},{"default":"","description":"The width of the beam.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The start coordinate of the texture used.","isOptional":false,"isVarArg":false,"name":"textureStart","type":"number"},{"default":"","description":"The end coordinate of the texture used.","isOptional":false,"isVarArg":false,"name":"textureEnd","type":"number"},{"default":"","description":"The color to be used. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Draws textured beam.\n\n{{RenderingContext|Function|3D}}","examples":[],"isConstructor":false,"name":"DrawBeam","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Origin of the box.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"Orientation of the box.","isOptional":false,"isVarArg":false,"name":"angles","type":"Angle"},{"default":"","description":"Start position of the box, relative to origin.","isOptional":false,"isVarArg":false,"name":"mins","type":"Vector"},{"default":"","description":"End position of the box, relative to origin.","isOptional":false,"isVarArg":false,"name":"maxs","type":"Vector"},{"default":"","description":"The color of the box. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"},{"default":"","description":"Should this render call write to the depth buffer.","isOptional":false,"isVarArg":false,"name":"writeZ","type":"boolean"}],"description":"Draws a box in 3D space.\n\n{{RenderingContext|Function|3D}}","examples":[],"isConstructor":false,"name":"DrawBox","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Line start position in world coordinates.","isOptional":false,"isVarArg":false,"name":"startPos","type":"Vector"},{"default":"","description":"Line end position in world coordinates.","isOptional":false,"isVarArg":false,"name":"endPos","type":"Vector"},{"default":"","description":"The color to be used. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"},{"default":"false","description":"Whether or not to consider the Z buffer. If false, the line will be drawn over everything currently drawn, if true, the line will be drawn with depth considered, as if it were a regular object in 3D space.\n\n{{Bug|Issue=1086|Enabling this option will cause the line to ignore the color's alpha.}}","isOptional":true,"isVarArg":false,"name":"writeZ","type":"boolean"}],"description":"Draws a line in 3D space.\n\n{{RenderingContext|Function|3D}}","examples":[],"isConstructor":false,"name":"DrawLine","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"First vertex.","isOptional":false,"isVarArg":false,"name":"vert1","type":"Vector"},{"default":"","description":"The second vertex.","isOptional":false,"isVarArg":false,"name":"vert2","type":"Vector"},{"default":"","description":"The third vertex.","isOptional":false,"isVarArg":false,"name":"vert3","type":"Vector"},{"default":"","description":"The fourth vertex.","isOptional":false,"isVarArg":false,"name":"vert4","type":"Vector"},{"default":"Color( 255, 255, 255 )","description":"The color of the quad. See {{GlobalFunction|Color}}","isOptional":true,"isVarArg":false,"name":"color","type":"table"}],"description":"Draws 2 connected triangles.\n\n{{RenderingContext|Function|3D}}","examples":[],"isConstructor":false,"name":"DrawQuad","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Origin of the sprite.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"The face direction of the quad.","isOptional":false,"isVarArg":false,"name":"normal","type":"Vector"},{"default":"","description":"The width of the quad.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The height of the quad.","isOptional":false,"isVarArg":false,"name":"height","type":"number"},{"default":"","description":"The color of the quad. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"},{"default":"","description":"The rotation of the quad in degrees.","isOptional":false,"isVarArg":false,"name":"rotation","type":"number"}],"description":"Draws a quad.\n\n{{RenderingContext|Function|3D}}","examples":[{"code":"local mat = Material( \"sprites/sent_ball\" )\nlocal mat2 = Material( \"models/wireframe\" )\nhook.Add(\"PostDrawTranslucentRenderables\", \"DrawQuadEasyExample\", function()\n\n\t-- Draw a rotating circle under local player\n\trender.SetMaterial( mat )\n\tlocal pos = LocalPlayer():GetPos()\n\trender.DrawQuadEasy( pos + Vector( 0, 0, 1 ), Vector( 0, 0, 1 ), 64, 64, Color( 255, 255, 255, 200 ), ( CurTime() * 50 ) % 360 )\n\n\t-- Draw 3 rotating wireframe quads where local player is looking at\n\trender.SetMaterial( mat2 )\n\tlocal tr = LocalPlayer():GetEyeTrace()\n\trender.DrawQuadEasy( tr.HitPos + tr.HitNormal, tr.HitNormal, 64, 64, Color( 255, 255, 255 ), ( CurTime() * 50 ) % 360 )\n\n\tlocal dir = tr.HitNormal:Angle()\n\tdir:RotateAroundAxis( tr.HitNormal, ( CurTime() * 50 ) % 360 )\n\tdir = dir:Up()\n\n\t-- We need to call this function twice, once for each side\n\trender.DrawQuadEasy( tr.HitPos + tr.HitNormal * 32, dir, 64, 64, Color( 255, 255, 255 ), 0 )\n\trender.DrawQuadEasy( tr.HitPos + tr.HitNormal * 32, -dir, 64, 64, Color( 255, 255, 255 ), 0 )\nend )","description":"Example usage of this function."}],"isConstructor":false,"name":"DrawQuadEasy","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Draws the the current material set by {{LibraryFunction|render|SetMaterial}} to the whole screen.\n\n{{RenderingContext|Function|2D}}","examples":[],"isConstructor":false,"name":"DrawScreenQuad","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"X start position of the rect.","isOptional":false,"isVarArg":false,"name":"startX","type":"number"},{"default":"","description":"Y start position of the rect.","isOptional":false,"isVarArg":false,"name":"startY","type":"number"},{"default":"","description":"Width of the rect.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"Height of the rect.","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Draws the the current material set by {{LibraryFunction|render|SetMaterial}} to the area specified.\n\n{{RenderingContext|Function|2D}}","examples":[],"isConstructor":false,"name":"DrawScreenQuadEx","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Position of the sphere.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"Radius of the sphere. Negative radius will make the sphere render inwards rather than outwards.","isOptional":false,"isVarArg":false,"name":"radius","type":"number"},{"default":"","description":"The number of longitude steps. This controls the quality of the sphere. Higher quality will lower performance significantly. 50 is a good number to start with.","isOptional":false,"isVarArg":false,"name":"longitudeSteps","type":"number"},{"default":"","description":"The number of latitude steps. This controls the quality of the sphere. Higher quality will lower performance significantly. 50 is a good number to start with.","isOptional":false,"isVarArg":false,"name":"latitudeSteps","type":"number"},{"default":"{{GlobalFunction|Color}}( 255, 255, 255 )","description":"The color of the sphere. Uses the {{Struct|Color}}.","isOptional":true,"isVarArg":false,"name":"color","type":"Color"}],"description":"Draws a sphere in 3D space. The material previously set with {{LibraryFunction|render|SetMaterial}} will be applied the sphere's surface.\n\nSee also {{LibraryFunction|render|DrawWireframeSphere}} for a wireframe equivalent.\n\n{{RenderingContext|Function|3D}}","examples":[{"code":"hook.Add( \"PostDrawTranslucentRenderables\", \"test\", function()\n\n\t--[[\n\t\twhen you draw a sphere, you have to specify what material the sphere is\n\t\tgoing to have before rendering it, render.SetColorMaterial()\n\t\tjust sets it to a white material so we can recolor it easily.\n\t]]\n\trender.SetColorMaterial()\n\n\t-- The position to render the sphere at, in this case, the looking position of the local player\n\tlocal pos = LocalPlayer():GetEyeTrace().HitPos\n\n\t-- Draw the sphere!\n\trender.DrawSphere( pos, 50, 30, 30, Color( 0, 175, 175, 100 ) )\n\nend )","description":"This will draw a blue, half-translucent sphere (force field) at the position local player is looking."}],"isConstructor":false,"name":"DrawSphere","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Position of the sprite.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"Width of the sprite.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"Height of the sprite.","isOptional":false,"isVarArg":false,"name":"height","type":"number"},{"default":"","description":"Color of the sprite. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Draws a sprite in 3d space.\n\n{{RenderingContext|Function|3D}}","examples":[{"code":"local pos,material,white = Vector(0,0,0), Material( \"sprites/splodesprite\" ),Color(255,255,255,255) --Define this sort of stuff outside of loops to make more efficient code.\nhook.Add( \"HUDPaint\", \"paintsprites\", function()\n\tcam.Start3D() -- Start the 3D function so we can draw onto the screen.\n\t\trender.SetMaterial( material ) -- Tell render what material we want, in this case the flash from the gravgun\n\t\trender.DrawSprite( pos, 16, 16, white) -- Draw the sprite in the middle of the map, at 16x16 in it's original colour with full alpha.\n\tcam.End3D()\nend )","description":"Draw a sprite at the center of the map"},{"code":"local toDraw3d = {}\nlocal sprites3d = 0\n\nlocal toDraw2d = {}\nlocal sprites2d = 0\n\nlocal material = Material(\"sprites/light_ignorez\")\n\nfunction draw.VectorSprite(position, size, color, constantSize)\n\tif (not isvector(position)) then\n\t\terror(\"bad argument #1 to draw.DrawVectorSprite (Vector expected, got \" .. type(position) .. \")\")\n\tend\n\n\tif (not isnumber(size)) then\n\t\terror(\"bad argument #2 to draw.DrawVectorSprite (number expected, got \" .. type(size) .. \")\")\n\tend\n\n\tif (not IsColor(color)) then\n\t\terror(\"bad argument #3 to draw.DrawVectorSprite (Color expected, got \" .. type(color) .. \")\")\n\tend\n\n\tlocal tbl = {position, size, color}\n\n\tif (constantSize) then\n\t\tsprites2d = sprites2d + 1\n\t\ttoDraw2d[sprites2d] = tbl\n\telse\n\t\tsprites3d = sprites3d + 1\n\t\ttoDraw3d[sprites3d] = tbl\n\tend\nend\n\nlocal render_SetMaterial = render.SetMaterial\nlocal render_DrawSprite = render.DrawSprite\nhook.Add(\"PreDrawEffects\", \"draw.VectorSprite\", function()\n\tif (sprites3d ~= 0) then\n\t\trender_SetMaterial(material)\n\n\t\tfor i = 1, sprites3d do\n\t\t\tlocal info = toDraw3d[i]\n\t\t\ttoDraw3d[i] = nil -- Clear the table every frame\n\n\t\t\trender_DrawSprite(info[1], info[2], info[2], info[3])\n\t\tend\n\n\t\tsprites3d = 0\n\tend\nend)\n\nlocal surface_SetMaterial = surface.SetMaterial\nlocal surface_SetDrawColor = surface.SetDrawColor\nlocal surface_DrawTexturedRect = surface.DrawTexturedRect\nhook.Add(\"DrawOverlay\", \"draw.VectorSprite\", function()\n\tif (sprites2d ~= 0) then\n\t\tsurface_SetMaterial(material)\n\n\t\tfor i = 1, sprites2d do\n\t\t\tlocal info = toDraw2d[i]\n\t\t\ttoDraw2d[i] = nil\n\n\t\t\tlocal pos2d = info[1]:ToScreen()\n\n\t\t\tif pos2d.visible then\n\t\t\t\tsurface_SetDrawColor(info[3])\n\t\t\t\tsurface_DrawTexturedRect(pos2d.x, pos2d.y, info[2], info[2])\n\t\t\tend\n\t\tend\n\n\t\tsprites2d = 0\n\tend\nend)","description":"Function that displays a sprite at the given position, without the need of a specific rendering context\n\ndraw.VectorSprite({{Type|Vector}} position, {{Type|number}} size, {{Struct|Color}} color, {{Type|boolean}} constantSize)"}],"isConstructor":false,"name":"DrawSprite","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The texture to draw","isOptional":false,"isVarArg":false,"name":"tex","type":"ITexture"}],"description":"Draws a texture over the whole screen.\n\n{{RenderingContext|Function|2D}}","examples":[],"isConstructor":false,"name":"DrawTextureToScreen","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The texture to draw","isOptional":false,"isVarArg":false,"name":"tex","type":"ITexture"},{"default":"","description":"The x coordinate of the rectangle to draw.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The y coordinate of the rectangle to draw.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The width of the rectangle to draw.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The height of the rectangle to draw.","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Draws a textured rectangle.\n\n{{RenderingContext|Function|2D}}","examples":[],"isConstructor":false,"name":"DrawTextureToScreenRect","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Position of the box.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"Angles of the box.","isOptional":false,"isVarArg":false,"name":"angle","type":"Angle"},{"default":"","description":"The lowest corner of the box.","isOptional":false,"isVarArg":false,"name":"mins","type":"Vector"},{"default":"","description":"The highest corner of the box.","isOptional":false,"isVarArg":false,"name":"maxs","type":"Vector"},{"default":"","description":"The color of the box. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"},{"default":"false","description":"Sets whenever to write to the zBuffer.","isOptional":true,"isVarArg":false,"name":"writeZ","type":"boolean"}],"description":"Draws a wireframe box in 3D space.\n\n{{RenderingContext|Function|3D}}","examples":[],"isConstructor":false,"name":"DrawWireframeBox","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Position of the sphere.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"The size of the sphere.","isOptional":false,"isVarArg":false,"name":"radius","type":"number"},{"default":"","description":"The amount of longitude steps. \nThe larger this number is, the smoother the sphere is.","isOptional":false,"isVarArg":false,"name":"longitudeSteps","type":"number"},{"default":"","description":"The amount of latitude steps. \nThe larger this number is, the smoother the sphere is.","isOptional":false,"isVarArg":false,"name":"latitudeSteps","type":"number"},{"default":"{{GlobalFunction|Color}}( 255, 255, 255 )","description":"The color of the wireframe. Uses the {{Struct|Color}}.","isOptional":true,"isVarArg":false,"name":"color","type":"Color"},{"default":"false","description":"Whether or not to consider the Z buffer. If false, the wireframe will be drawn over everything currently drawn. If true, it will be drawn with depth considered, as if it were a regular object in 3D space.","isOptional":true,"isVarArg":false,"name":"writeZ","type":"boolean"}],"description":"Draws a wireframe sphere in 3d space.\n\n{{RenderingContext|Function|3D}}","examples":[{"code":"hook.Add( \"PostDrawTranslucentRenderables\", \"test\", function()\n\n\t-- Set the draw material to solid white\n\trender.SetColorMaterial()\n\n\t-- The position to render the sphere at, in this case, the looking position of the local player\n\tlocal pos = LocalPlayer():GetEyeTrace().HitPos\n\n\tlocal radius = 50\n\tlocal wideSteps = 10\n\tlocal tallSteps = 10\n\n\t-- Draw the sphere!\n\trender.DrawSphere( pos, radius, wideSteps, tallSteps, Color( 0, 175, 175, 100 ) )\n\n\t-- Draw the wireframe sphere!\n\trender.DrawWireframeSphere( pos, radius, wideSteps, tallSteps, Color( 255, 255, 255, 255 ) )\n\nend )","description":"Draws a wireframe sphere over a normal sphere for an artistic effect."}],"isConstructor":false,"name":"DrawWireframeSphere","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New clipping state.","isOptional":false,"isVarArg":false,"name":"state","type":"boolean"}],"description":"Sets the status of the clip renderer, returning previous state.\n\n{{Warning|To prevent unintended rendering behavior of other mods/the game, you must reset the clipping state to its previous value.}}\n\n{{Bug|Issue=3105|Reloading the map does not reset the previous value of this function.}}","examples":[{"code":"-- Inside some rendering hook\n\nlocal oldclip = render.EnableClipping( true )\n\n-- Your code here\n\nrender.EnableClipping( oldclip )","description":"Properly using the function."},{"code":"function ENT:Draw()\n    local normal = self:GetUp() -- Everything \"behind\" this normal will be clipped\n    local position = normal:Dot( self:GetPos() ) -- self:GetPos() is the origin of the clipping plane\n\n    local oldEC = render.EnableClipping( true )\n    render.PushCustomClipPlane( normal, position )\n\n    self:DrawModel()\n\n    render.PopCustomClipPlane()\n    render.EnableClipping( oldEC )\nend","description":"Clips the lower half of your custom entity"}],"isConstructor":false,"name":"EnableClipping","realm":"client","returns":[{"description":"Previous clipping state.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Ends the beam mesh of a beam started with {{LibraryFunction|render|StartBeam}}.","examples":[],"isConstructor":false,"name":"EndBeam","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Red channel of the fog color, 0 - 255.","isOptional":false,"isVarArg":false,"name":"red","type":"number"},{"default":"","description":"Green channel of the fog color, 0 - 255.","isOptional":false,"isVarArg":false,"name":"green","type":"number"},{"default":"","description":"Blue channel of the fog color, 0 - 255.","isOptional":false,"isVarArg":false,"name":"blue","type":"number"}],"description":"Sets the color of the fog.","examples":[],"isConstructor":false,"name":"FogColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The distance at which the fog reaches its max density.\n\n{{Note|If used in {{HookFunction|GM|SetupSkyboxFog}}, this value '''must''' be scaled by the first argument of the hook}}","isOptional":false,"isVarArg":false,"name":"distance","type":"number"}],"description":"Sets the at which the fog reaches its max density.","examples":[],"isConstructor":false,"name":"FogEnd","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The maximum density of the fog, 0-1.","isOptional":false,"isVarArg":false,"name":"maxDensity","type":"number"}],"description":"Sets the maximum density of the fog.","examples":[],"isConstructor":false,"name":"FogMaxDensity","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Fog mode, see {{Enum|MATERIAL_FOG}}.","isOptional":false,"isVarArg":false,"name":"fogMode","type":"MATERIAL_FOG"}],"description":"Sets the mode of fog.","examples":[],"isConstructor":false,"name":"FogMode","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The distance at which the fog starts showing up.\n<br>\n{{Note|If used in {{HookFunction|GM|SetupSkyboxFog}}, this value '''must''' be scaled by the first argument of the hook}}","isOptional":false,"isVarArg":false,"name":"fogStart","type":"number"}],"description":"Sets the distance at which the fog starts showing up.","examples":[],"isConstructor":false,"name":"FogStart","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the ambient color of the map.","examples":[],"isConstructor":false,"name":"GetAmbientLightColor","realm":"client","returns":[{"description":"color","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current alpha blending.","examples":[],"isConstructor":false,"name":"GetBlend","realm":"client","returns":[{"description":"blend","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetBloomTex0","realm":"client","returns":[{"description":"The bloom texture","type":"ITexture"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetBloomTex1","realm":"client","returns":[{"description":"","type":"ITexture"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current color modulation values as normals.","examples":[],"isConstructor":false,"name":"GetColorModulation","realm":"client","returns":[{"description":"r","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the maximum available directX version.","examples":[],"isConstructor":false,"name":"GetDXLevel","realm":"client","returns":[{"description":"dxLevel","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current fog color.","examples":[],"isConstructor":false,"name":"GetFogColor","realm":"client","returns":[{"description":"Red part of the color.","type":"number"},{"description":"Green part of the color","type":"number"},{"description":"Blue part of the color","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the fog start and end distance.","examples":[],"isConstructor":false,"name":"GetFogDistances","realm":"client","returns":[{"description":"Fog start distance set by {{LibraryFunction|render|FogStart}}","type":"number"},{"description":"For end distance set by {{LibraryFunction|render|FogEnd}}","type":"number"},{"description":"Fog Z distance set by {{LibraryFunction|render|SetFogZ}}","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the fog mode.","examples":[],"isConstructor":false,"name":"GetFogMode","realm":"client","returns":[{"description":"Fog mode, see {{Enum|MATERIAL_FOG}}","type":"MATERIAL_FOG"}]},{"accessModifier":"public","arguments":[],"description":"Returns the _rt_FullFrameDepth texture. Alias of _rt_PowerOfTwoFB","examples":[],"isConstructor":false,"name":"GetFullScreenDepthTexture","realm":"client","returns":[{"description":"","type":"ITexture"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The position of the surface to get the light from.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Gets the light exposure on the specified position.","examples":[],"isConstructor":false,"name":"GetLightColor","realm":"client","returns":[{"description":"lightColor","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetMoBlurTex0","realm":"client","returns":[{"description":"","type":"ITexture"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetMoBlurTex1","realm":"client","returns":[{"description":"","type":"ITexture"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetMorphTex0","realm":"client","returns":[{"description":"","type":"ITexture"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetMorphTex1","realm":"client","returns":[{"description":"","type":"ITexture"}]},{"accessModifier":"public","arguments":[],"description":"Returns the render target's power of two texture.","examples":[],"isConstructor":false,"name":"GetPowerOfTwoTexture","realm":"client","returns":[{"description":"The power of two texture, which is '''_rt_poweroftwofb''' by default.","type":"ITexture"}]},{"accessModifier":"public","arguments":[],"description":"Alias of {{LibraryFunction|render|GetPowerOfTwoTexture}}.","examples":[],"isConstructor":false,"name":"GetRefractTexture","realm":"client","returns":[{"description":"","type":"ITexture"}]},{"accessModifier":"public","arguments":[],"description":"Returns the currently active render target.\n\nInstead of saving the current render target using this function and restoring to it later, it is generally better practice to use {{LibraryFunction|render|PushRenderTarget}} and {{LibraryFunction|render|PopRenderTarget}}.","examples":[{"code":"local oldRt = render.GetRenderTarget() -- we'll save the old screen and draw on a new one!\nlocal w, h = ScrW(), ScrH()\nlocal customRt = GetRenderTarget( \"some_unique_render_target_nameeeee\", w, h, true )\n\nrender.SetRenderTarget( customRt )\nrender.Clear( 0, 0, 255, 255, true ) -- fill the background with blue!\n\n-- draw all props on the blue background!\nfor key, prop in pairs(ents.FindByClass( \"prop_physics\" )) do\n    prop:DrawModel()\nend\n\n-- save the picture to the garrysmod/data folder.  ~format=\"jpg\" will not work.\nlocal data = render.Capture({ format = \"jpeg\", quality = 70, x = 0, y = 0, h = h, w = w })\t\nlocal pictureFile = file.Open( \"RenderTargetsAreAwesome.jpg\", \"wb\", \"DATA\" )\t\npictureFile:Write( data )\npictureFile:Close()\n\nrender.SetRenderTarget( oldRt )","description":"Render something to a different render target, then restore the old render target"},{"code":"local w, h = ScrW(), ScrH()\nlocal customRt = GetRenderTarget( \"some_unique_render_target_nameeeee\", w, h, true )\n\nrender.PushRenderTarget( customRt )\n    render.Clear( 0, 0, 255, 255, true ) -- fill the background with blue!\n\n    -- draw all props on the blue background!\n    for key, prop in pairs(ents.FindByClass( \"prop_physics\" )) do\n        prop:DrawModel()\n    end\n\n    -- save the picture to the garrysmod/data folder.  ~format=\"jpg\" will not work.\n    local data = render.Capture({ format = \"jpeg\", quality = 70, x = 0, y = 0, h = h, w = w })\t\n    local pictureFile = file.Open( \"RenderTargetsAreAwesome.jpg\", \"wb\", \"DATA\" )\t\n    pictureFile:Write( data )\n    pictureFile:Close()\nrender.PopRenderTarget()","description":"Same as above, but using {{LibraryFunction|render|PushRenderTarget}} and {{LibraryFunction|render|PopRenderTarget}} instead of {{LibraryFunction|render|GetRenderTarget}} and {{LibraryFunction|render|SetRenderTarget}}"}],"isConstructor":false,"name":"GetRenderTarget","realm":"client","returns":[{"description":"The currently active Render Target","type":"ITexture"}]},{"accessModifier":"public","arguments":[],"description":"Returns the _rt_ResolvedFullFrameDepth texture for SSAO depth.","examples":[],"isConstructor":false,"name":"GetResolvedFullFrameDepth","realm":"client","returns":[{"description":"","type":"ITexture"}]},{"accessModifier":"public","arguments":[{"default":"0","description":"Max index is 3, but engine only creates the first two for you.","isOptional":true,"isVarArg":false,"name":"textureIndex","type":"number"}],"description":"Obtain an {{Type|ITexture}} of the screen. You must call {{LibraryFunction|render|UpdateScreenEffectTexture}} in order to update this texture with the currently rendered scene.\n\nThis texture is mainly used within {{HookFunction|GM|RenderScreenspaceEffects}}","examples":[{"code":"print(render.GetScreenEffectTexture(0):GetName())\nprint(render.GetScreenEffectTexture(1):GetName())","description":"Print the texture name of the returned textures."}],"isConstructor":false,"name":"GetScreenEffectTexture","realm":"client","returns":[{"description":"","type":"ITexture"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetSmallTex0","realm":"client","returns":[{"description":"","type":"ITexture"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetSmallTex1","realm":"client","returns":[{"description":"","type":"ITexture"}]},{"accessModifier":"public","arguments":[],"description":"<onlyinclude>Returns a floating point texture the same resolution as the screen.\n\n{{Note|The {{ShaderLink|gmodscreenspace}} doesn't behave as expected when drawing a floating-point texture to an integer texture (e.g. the default render target). Use an UnlitGeneric material instead}}</onlyinclude>","examples":[],"isConstructor":false,"name":"GetSuperFPTex","realm":"client","returns":[{"description":"Render target named \"__rt_supertexture1\"","type":"ITexture"}]},{"accessModifier":"public","arguments":[],"description":"{{:render/GetSuperFPTex}}","examples":[],"isConstructor":false,"name":"GetSuperFPTex2","realm":"client","returns":[{"description":"Render target named \"__rt_supertexture2\"","type":"ITexture"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The start position to trace from.","isOptional":false,"isVarArg":false,"name":"startPos","type":"Vector"},{"default":"","description":"The end position of the trace.","isOptional":false,"isVarArg":false,"name":"endPos","type":"Vector"}],"description":"Performs a render trace and returns the color of the surface hit, this uses a low res version of the texture.","examples":[],"isConstructor":false,"name":"GetSurfaceColor","realm":"client","returns":[{"description":"color","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns a vector representing linear tone mapping scale.","examples":[],"isConstructor":false,"name":"GetToneMappingScaleLinear","realm":"client","returns":[{"description":"The vector representing linear tone mapping scale.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The material to use as override, use nil to disable.","isOptional":false,"isVarArg":false,"name":"material","type":"IMaterial"}],"description":"Sets the render material override for all next calls of {{ClassFunction|Entity|DrawModel}}. Also overrides {{LibraryFunction|render|MaterialOverrideByIndex}}.","examples":[],"isConstructor":false,"name":"MaterialOverride","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Starts with 0, the index of the material to override","isOptional":false,"isVarArg":false,"name":"index","type":"number"},{"default":"","description":"The material to override with","isOptional":false,"isVarArg":false,"name":"material","type":"IMaterial"}],"description":"Similar to {{LibraryFunction|render|MaterialOverride}}, but overrides the materials per index.\n\n{{LibraryFunction|render|MaterialOverride}} overrides effects of this function.","examples":[],"isConstructor":false,"name":"MaterialOverrideByIndex","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the maximum texture height the renderer can handle.","examples":[],"isConstructor":false,"name":"MaxTextureHeight","realm":"client","returns":[{"description":"maxTextureHeight","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the maximum texture width the renderer can handle.","examples":[],"isConstructor":false,"name":"MaxTextureWidth","realm":"client","returns":[{"description":"maxTextureWidth","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Requires:\n* {{FuncArg|string|model|The model to draw}}\n* {{FuncArg|Vector|pos|The position to draw the model at}}\n* {{FuncArg|Angle|angle|The angles to draw the model at}}","isOptional":false,"isVarArg":false,"name":"settings","type":"table"},{"default":"nil","description":"If provided, this entity will be reused instead of creating a new one with {{GlobalFunction|ClientsideModel}}. Note that the ent's model, position and angles will be changed, and {{ClassFunction|Entity|SetNoDraw}} will be set to true.","isOptional":true,"isVarArg":false,"name":"ent","type":"CSEnt"}],"description":"Creates a new {{GlobalFunction|ClientsideModel}}, renders it at the specified pos/ang, and removes it. Can also be given an existing {{Type|CSEnt}} to reuse instead.\n\n{{Note|This function is only meant to be used in a single render pass kind of scenario, if you need to render a model continuously, use a cached {{GlobalFunction|ClientsideModel}} and provide it as a second argument.}}\n\n{{Bug|Issue=3307|Using this with a map model ({{LibraryFunction|game|GetWorld}}():[[Entity/GetModel|GetModel]]()) crashes the game.}}","examples":[],"isConstructor":false,"name":"Model","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The material override.","isOptional":false,"isVarArg":false,"name":"material","type":"IMaterial"}],"description":"Sets a material to override a model's default material. Similar to {{ClassFunction|Entity|SetMaterial}} except it uses an {{Type|IMaterial}} argument and it can be used to change materials on models which are part of the world geometry.","examples":[{"code":"local error_mat = Material(\"models/error/new light1\")\n\nfunction GM:PreDrawOpaqueRenderables(bDrawingDepth, bDrawingSkybox)\n\n\trender.ModelMaterialOverride(error_mat)\n\t\nend","description":"Sets the material of all opaque models to the red flashing \"ERROR\" texture."}],"isConstructor":false,"name":"ModelMaterialOverride","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Enable or disable the override.","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"},{"default":"","description":"If the previous argument is true, sets whether the next rendering operations should write to the alpha channel or not. Has no effect if the previous argument is false.","isOptional":false,"isVarArg":false,"name":"shouldWrite","type":"boolean"}],"description":"Overrides the write behaviour of all next rendering operations towards the alpha channel of the current render target.\n\nSee also {{LibraryFunction|render|OverrideBlend}}.\n\n{{Note|Doing {{Lib|surface}} draw calls with alpha set to 0 is a no-op and will never have any effect.}}","examples":[{"code":"render.PushRenderTarget( texture )\nrender.OverrideAlphaWriteEnable( true, true )\n\nrender.ClearDepth()\nrender.Clear( 0, 0, 0, 0 )\n\nrender.OverrideAlphaWriteEnable( false )\nrender.PopRenderTarget()","description":"Shows how you can use alpha channel with render targets."}],"isConstructor":false,"name":"OverrideAlphaWriteEnable","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"true to enable, false to disable. No other arguments are required when disabling.","isOptional":false,"isVarArg":false,"name":"enabled","type":"boolean"},{"default":"","description":"The source color blend function {{Enum|BLEND}}. Determines how a rendered texture's final color should be calculated.","isOptional":false,"isVarArg":false,"name":"srcBlend","type":"BLEND"},{"default":"","description":"The destination color blend function {{Enum|BLEND}}.","isOptional":false,"isVarArg":false,"name":"destBlend","type":"BLEND"},{"default":"","description":"The blend mode used for drawing the color layer {{Enum|BLENDFUNC}}.","isOptional":false,"isVarArg":false,"name":"blendFunc","type":"BLENDFUNC"},{"default":"none","description":"The source alpha blend function {{Enum|BLEND}}. Determines how a rendered texture's final alpha should be calculated.","isOptional":true,"isVarArg":false,"name":"srcBlendAlpha","type":"BLEND"},{"default":"none","description":"The destination alpha blend function {{Enum|BLEND}}.","isOptional":true,"isVarArg":false,"name":"destBlendAlpha","type":"BLEND"},{"default":"none","description":"The blend mode used for drawing the alpha layer {{Enum|BLENDFUNC}}.","isOptional":true,"isVarArg":false,"name":"blendFuncAlpha","type":"BLENDFUNC"}],"description":"Overrides the internal graphical functions used to determine the final color and alpha of a rendered texture.\n\nSee also {{LibraryFunction|render|OverrideAlphaWriteEnable}}.\n\n{{Note|Doing {{Lib|surface}} draw calls with alpha set to 0 is a no-op and won't have an effect.}}","examples":[],"isConstructor":false,"name":"OverrideBlend","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"true to enable, false to disable. No other arguments are required when disabling.","isOptional":false,"isVarArg":false,"name":"enabled","type":"boolean"},{"default":"","description":"The source color blend function {{Enum|BLEND}}. Determines how a rendered texture's final color should be calculated.","isOptional":false,"isVarArg":false,"name":"srcBlend","type":"BLEND"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"destBlend","type":"number"},{"default":"nil","description":"The source alpha blend function {{Enum|BLEND}}. Determines how a rendered texture's final alpha should be calculated.","isOptional":true,"isVarArg":false,"name":"srcBlendAlpha","type":"BLEND"},{"default":"nil","description":"","isOptional":true,"isVarArg":false,"name":"destBlendAlpha","type":"number"}],"description":"{{Deprecated|Use {{LibraryFunction|render|OverrideBlend}} instead.}}\n\nOverrides the internal graphical functions used to determine the final color and alpha of a rendered texture.\n\nSee also {{LibraryFunction|render|OverrideAlphaWriteEnable}}.\n\n{{Note|Doing {{Lib|surface}} draw calls with alpha set to 0 is a no-op and will never have any effect.}}","examples":[{"code":"-- Our sprite texture to render. Rendering this texture without\n-- render.OverrideBlendFunc will result in black borders around the lightning beam.\nlocal lightningMaterial = Material(\"sprites/lgtning\")\n\nfunction GM:PreDrawTranslucentRenderables(isDrawingDepth, isDrawingSkybox)\n\n\tif isDrawingDepth or isDrawSkybox then return end\n\n\tlocal ply = Entity(1)\n\n\tif !IsValid(ply) then return end\n\n\t-- Calculate a random UV to use for the lightning to give it some movement\n\tlocal uv = math.Rand(0, 1)\n\n\t-- Enable blend override to interpret the color and alpha from the texture.\n\trender.OverrideBlendFunc( true, BLEND_SRC_COLOR, BLEND_SRC_ALPHA, BLEND_ONE, BLEND_ZERO)\n\n\trender.SetMaterial(lightningMaterial)\n\n\t-- Render a lightning beam along points randomly offset from a line above the player.\n\trender.StartBeam(5)\n\trender.AddBeam(ply:GetPos() + Vector(0,0,035), 20, uv, Color(255,255,255,255))\n\trender.AddBeam(ply:GetPos() + Vector(0,0,135) + Vector(math.Rand(-20,20),math.Rand(-20,20),0), 20, uv*2, Color(255,255,255,255))\n\trender.AddBeam(ply:GetPos() + Vector(0,0,235) + Vector(math.Rand(-20,20),math.Rand(-20,20),0), 20, uv*3, Color(255,255,255,255))\n\trender.AddBeam(ply:GetPos() + Vector(0,0,335) + Vector(math.Rand(-20,20),math.Rand(-20,20),0), 20, uv*4, Color(255,255,255,255))\n\trender.AddBeam(ply:GetPos() + Vector(0,0,435) + Vector(math.Rand(-20,20),math.Rand(-20,20),0), 20, uv*5, Color(255,255,255,255))\n\trender.EndBeam()\n\n\t -- Disable blend override\n\trender.OverrideBlendFunc( false )\n\nend","description":"In this example we draw a lightning bolt over our player's head.\n\nWe shouldn't really draw the lightning in the PreDrawTranslucentRenderables hook as this causes issues rendering transparent objects behind the lightning, but it's a quick example of how the function works. Normally it should be drawn in a custom lua effect's {{HookFunction|EFFECT|Render}}."}],"isConstructor":false,"name":"OverrideBlendFunc","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Enable or disable the override.","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"},{"default":"","description":"If the previous argument is true, sets whether the next rendering operations should write to the color channel or not. Has no effect if the previous argument is false.","isOptional":false,"isVarArg":false,"name":"shouldWrite","type":"boolean"}],"description":"Overrides the write behaviour of all next rendering operations towards the color channel of the current render target.","examples":[],"isConstructor":false,"name":"OverrideColorWriteEnable","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Enable or disable the override.","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"},{"default":"","description":"If the previous argument is true, sets whether the next rendering operations should write to the depth buffer or not. Has no effect if the previous argument is false.","isOptional":false,"isVarArg":false,"name":"shouldWrite","type":"boolean"}],"description":"Overrides the write behaviour of all next rendering operations towards the depth buffer.","examples":[],"isConstructor":false,"name":"OverrideDepthEnable","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"PerformFullScreenStencilOperation","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Removes the current active clipping plane from the clip plane stack.","examples":[],"isConstructor":false,"name":"PopCustomClipPlane","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Pops the current texture magnification filter from the filter stack.\n\nSee {{LibraryFunction|render|PushFilterMag}}","examples":[],"isConstructor":false,"name":"PopFilterMag","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Pops the current texture minification filter from the filter stack.\n\nSee {{LibraryFunction|render|PushFilterMin}}","examples":[],"isConstructor":false,"name":"PopFilterMin","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Pops the current flashlight mode from the flashlight mode stack.","examples":[],"isConstructor":false,"name":"PopFlashlightMode","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Pops the last render target and viewport from the RT stack and sets them as the current render target and viewport.\n\nThis is should be called to restore the previous render target and viewport after a call to {{LibraryFunction|render|PushRenderTarget}}.","examples":[],"isConstructor":false,"name":"PopRenderTarget","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The normal of the clipping plane.","isOptional":false,"isVarArg":false,"name":"normal","type":"Vector"},{"default":"","description":"The distance of the plane from the world origin. You can use {{ClassFunction|Vector|Dot}} between the normal and any point on the plane to find this, see [[#Example|Example 1]].","isOptional":false,"isVarArg":false,"name":"distance","type":"number"}],"description":"Pushes a new clipping plane of the clip plane stack and sets it as active.\n\n{{Note|A max of 2 clip planes are supported on Linux/POSIX, and 6 on Windows.}}","examples":[{"code":"function ENT:Draw()\n    local normal = self:GetUp() -- Everything \"behind\" this normal will be clipped\n    local position = normal:Dot( self:GetPos() ) -- self:GetPos() is the origin of the clipping plane\n\n    local oldEC = render.EnableClipping( true )\n    render.PushCustomClipPlane( normal, position )\n\n    self:DrawModel()\n\n    render.PopCustomClipPlane()\n    render.EnableClipping( oldEC )\nend","description":"Clips the lower half of your custom entity"}],"isConstructor":false,"name":"PushCustomClipPlane","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The texture filter type, see {{Enum|TEXFILTER}}","isOptional":false,"isVarArg":false,"name":"texFilterType","type":"TEXFILTER"}],"description":"Pushes a texture filter onto the magnification texture filter stack.","examples":[],"isConstructor":false,"name":"PushFilterMag","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The texture filter type, see {{Enum|TEXFILTER}}","isOptional":false,"isVarArg":false,"name":"texFilterType","type":"TEXFILTER"}],"description":"Pushes a texture filter onto the minification texture filter stack.","examples":[{"code":"render.PushFilterMag( TEXFILTER.ANISOTROPIC )\nrender.PushFilterMin( TEXFILTER.ANISOTROPIC )\n\n-- Render stuff here\n\nrender.PopFilterMag()\nrender.PopFilterMin()","description":"Anisotropic Filtering (This is not antialiasing)"}],"isConstructor":false,"name":"PushFilterMin","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"Whether the flashlight mode should be enabled or disabled.","isOptional":true,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Enables the flashlight projection for the upcoming rendering.\n\n{{Bug|Issue=3029|This will leave models lit under specific conditions.}}","examples":[],"isConstructor":false,"name":"PushFlashlightMode","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new render target to be used.","isOptional":false,"isVarArg":false,"name":"texture","type":"ITexture"},{"default":"0","description":"X origin of the viewport.","isOptional":true,"isVarArg":false,"name":"x","type":"number"},{"default":"0","description":"Y origin of the viewport.","isOptional":true,"isVarArg":false,"name":"y","type":"number"},{"default":"texture:Width()","description":"Width of the viewport.","isOptional":true,"isVarArg":false,"name":"w","type":"number"},{"default":"texture:Height()","description":"Height of the viewport","isOptional":true,"isVarArg":false,"name":"h","type":"number"}],"description":"Pushes the current render target and viewport to the RT stack then sets a new current render target and viewport. If the viewport is not specified, the dimensions of the render target are used instead.\n\nThis is similar to a call to {{LibraryFunction|render|SetRenderTarget}} and {{LibraryFunction|render|SetViewPort}} where the current render target and viewport have been saved beforehand, except the viewport isn't clipped to screen bounds.\n\nSee also {{LibraryFunction|render|PopRenderTarget}}.\n\n{{Note|If you want to render to the render target in 2d mode and it is not the same size as the screen, use {{LibraryFunction|cam|Start2D}} and {{LibraryFunction|cam|End2D}}.}}\n{{Note|If the render target is bigger than the screen, rendering done with the surface library will be clipped to the screen bounds unless you call {{LibraryFunction|surface|DisableClipping}} }}","examples":[{"code":"render.PushRenderTarget( texture )\nrender.OverrideAlphaWriteEnable( true, true )\n\nrender.ClearDepth()\nrender.Clear( 0, 0, 0, 0 )\n\nrender.OverrideAlphaWriteEnable( false )\nrender.PopRenderTarget()","description":"Shows how you can use alpha channel with render targets."}],"isConstructor":false,"name":"PushRenderTarget","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The x coordinate.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The y coordinate.","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"Reads the color of the specified pixel from the RenderTarget sent by {{LibraryFunction|render|CapturePixels}}","examples":[],"isConstructor":false,"name":"ReadPixel","realm":"client","returns":[{"description":"r","type":"number"},{"description":"g","type":"number"},{"description":"b","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"false","description":"When true, this will also apply lighting changes to static props. This is really slow on large maps.","isOptional":true,"isVarArg":false,"name":"DoStaticProps","type":"boolean"}],"description":"This applies the changes made to map lighting using {{LibraryFunction|engine|LightStyle}}.","examples":[],"isConstructor":false,"name":"RedownloadAllLightmaps","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"X position for the HUD draw origin.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"Y position for the HUD draw origin.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"Width of the HUD draw.","isOptional":false,"isVarArg":false,"name":"w","type":"number"},{"default":"","description":"Height of the HUD draw.","isOptional":false,"isVarArg":false,"name":"h","type":"number"}],"description":"Renders the HUD on the screen.","examples":[],"isConstructor":false,"name":"RenderHUD","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"The view data to be used in the rendering. See {{Struct|ViewData}}. Any missing value is assumed to be that of the current view. Similarly, you can make a normal render by simply not passing this table at all.","isOptional":true,"isVarArg":false,"name":"view","type":"ViewData"}],"description":"Renders the scene with the specified viewData to the current active render target.\n\n{{Bug|Issue=1330|Static props and LODs are rendered improperly due to incorrectly perceived distance.}}","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( ScrW() - 100, ScrH() - 100 )\nframe:Center()\nframe:MakePopup()\n\nfunction frame:Paint( w, h )\n\n\tlocal x, y = self:GetPos()\n\n\trender.RenderView( {\n\t\torigin = Vector( 0, 0, 0 ),\n\t\tangles = Angle( 0, 0, 0 ),\n\t\tx = x, y = y,\n\t\tw = w, h = h\n\t} )\n\nend","description":"How you could use this to draw the view on a derma panel."}],"isConstructor":false,"name":"RenderView","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The red part of the color, 0-1","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"The green part of the color, 0-1","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"The blue part of the color, 0-1","isOptional":false,"isVarArg":false,"name":"b","type":"number"}],"description":"Resets the model lighting to the specified color.\n\nCalls {{LibraryFunction|render|SetModelLighting}} for every direction with given color.","examples":[],"isConstructor":false,"name":"ResetModelLighting","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value which should be used as multiplier.","isOptional":false,"isVarArg":false,"name":"scale","type":"number"}],"description":"Resets the HDR tone multiplier to the specified value.\n\nThis will only work on HDR maps, and the value will automatically fade to what it was ( or whatever {{LibraryFunction|render|SetGoalToneMappingScale}} is ) if called only once.","examples":[],"isConstructor":false,"name":"ResetToneMappingScale","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The red part of the color, 0-1.","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"The green part of the color, 0-1.","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"The blue part of the color, 0-1.","isOptional":false,"isVarArg":false,"name":"b","type":"number"}],"description":"Sets the ambient lighting for any upcoming render operation.","examples":[],"isConstructor":false,"name":"SetAmbientLight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Blending value from 0-1.","isOptional":false,"isVarArg":false,"name":"blending","type":"number"}],"description":"Sets the alpha blending for every upcoming render operation.\n\n{{Bug|Issue=3166|This does not affect non-model render.Draw* functions.}}","examples":[],"isConstructor":false,"name":"SetBlend","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Sets the current drawing material to \"color\".\n\nThe material is defined as:\n \"UnlitGeneric\"\n {\n \t\"$basetexture\" \"color/white\"\n \t\"$model\" \t\t1\n \t\"$translucent\" \t1\n \t\"$vertexalpha\" \t1\n \t\"$vertexcolor\" \t1\n }","examples":[{"code":"render.SetMaterial( Material( \"color\" ) )","description":"Equivalent of this function"}],"isConstructor":false,"name":"SetColorMaterial","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Sets the current drawing material to \"color_ignorez\".\n\nThe material is defined as:\n \"UnlitGeneric\"\n {\n \t\"$basetexture\" \"color/white\"\n  \t\"$model\" \t\t1\n \t\"$translucent\" \t1\n \t\"$vertexalpha\" \t1\n \t\"$vertexcolor\" \t1\n \t\"$ignorez\"\t\t1\n }","examples":[{"code":"render.SetMaterial( Material( \"color_ignorez\" ) )","description":"Equivalent of this function"}],"isConstructor":false,"name":"SetColorMaterialIgnoreZ","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The red channel multiplier normal ranging from 0-1.","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"The green channel multiplier normal ranging from 0-1.","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"The blue channel multiplier normal ranging from 0-1.","isOptional":false,"isVarArg":false,"name":"b","type":"number"}],"description":"Sets the color modulation.","examples":[],"isConstructor":false,"name":"SetColorModulation","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The fog Z.","isOptional":false,"isVarArg":false,"name":"fogZ","type":"number"}],"description":"If the fog mode is set to [[Enums/MATERIAL_FOG|MATERIAL_FOG_LINEAR_BELOW_FOG_Z]], the fog will only be rendered below the specified height.","examples":[],"isConstructor":false,"name":"SetFogZ","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The target scale.","isOptional":false,"isVarArg":false,"name":"scale","type":"number"}],"description":"Sets the goal HDR tone mapping scale.\n\nUse this in a rendering/think hook as it is reset every frame.","examples":[],"isConstructor":false,"name":"SetGoalToneMappingScale","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Lighting render mode\n\nPossible values are:\n* 0 - Default\n* 1 - Total fullbright, similar to ''mat_fullbright 1'' but excluding some weapon view models\n* 2 - Increased brightness(?), models look fullbright","isOptional":false,"isVarArg":false,"name":"Mode","type":"number"}],"description":"Sets lighting mode when rendering something.\n\n{{Note|'''Do not forget to restore the default value''' to avoid unexpected behavior, like the world and the HUD/UI being affected}}","examples":[{"code":"local MATERIAL = Material(\"skybox/trainup\")\n\nhook.Add(\"PostDraw2DSkyBox\", \"Quaddrawer\", function()\n\trender.OverrideDepthEnable( true, false )\n\trender.SetLightingMode(2)\n\n\tcam.Start3D(Vector(0, 0, 0), EyeAngles())\n\t\trender.SetMaterial(MATERIAL)\n\t\trender.DrawQuadEasy(Vector(200,0,0), Vector(-1,0,0), 64, 64, Color(255,255,255), 180)\n\tcam.End3D()\n\n\trender.OverrideDepthEnable( false, false )\n\trender.SetLightingMode(0)\nend)","description":"Draws a fullbright quad on 2D skybox"},{"code":"local LightingModeChanged = false\nhook.Add( \"PreRender\", \"fullbright\", function()\n\trender.SetLightingMode( 1 )\n\tLightingModeChanged = true\nend )\n\nlocal function EndOfLightingMod()\n\tif LightingModeChanged then\n\t\trender.SetLightingMode( 0 )\n\t\tLightingModeChanged = false\n\tend\nend\nhook.Add( \"PostRender\", \"fullbright\", EndOfLightingMod )\nhook.Add( \"PreDrawHUD\", \"fullbright\", EndOfLightingMod )","description":"Display everything the same way as when you set ''mat_fullbright'' to 1."}],"isConstructor":false,"name":"SetLightingMode","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position from which the light should be \"emitted\".","isOptional":false,"isVarArg":false,"name":"lightingOrigin","type":"Vector"}],"description":"Sets the lighting origin.\n\n{{Bug|Issue=2804|This does not work for prop_physics.}}","examples":[],"isConstructor":false,"name":"SetLightingOrigin","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The texture to be used as the lightmap.","isOptional":false,"isVarArg":false,"name":"tex","type":"ITexture"}],"description":"Sets the texture to be used as the lightmap in upcoming rendering operations. This is required when rendering meshes using a material with a lightmapped shader such as LightmappedGeneric.\n\n{{RenderingContext|Function|3D}}\n{{RenderingContext|Function|2D}}","examples":[{"code":"-- LightmappedGeneric material that we'll use for our mesh\nlocal meshMat = Material( \"concrete/concretefloor001a\" )\n\n-- Mesh vertices (notice that it's not MeshVertex structure format, just something similar)\n-- Notice that we have 2 UV coordinates channels, one for texture, one for lightmap\nlocal meshVertices = {\n\n\t{ pos = Vector( 0, 0, 0 ), u0 = 0, v0 = 0, u1 = 0, v1 = 0, n = Vector( 1, 0, 0 ) },\n\t{ pos = Vector( 0, 100, 0 ), u0 = 1, v0 = 0, u1 = 3, v1 = 0, n = Vector( 1, 0, 0 ) },\n\t{ pos = Vector( 0, 100, -100 ), u0 = 1, v0 = 1, u1 = 3, v1 = 3, n = Vector( 1, 0, 0 ) },\n\t{ pos = Vector( 0, 0, -100 ), u0 = 0, v0 = 1, u1 = 0, v1 = 3, n = Vector( 1, 0, 0 ) },\n}\n\n-- Run this command while ingame to create the mesh at map origin\nconcommand.Add( \"meshtest\", function()\n\n\t-- Creating a render target to be used as lightmap texture\n\tmeshLightmap = GetRenderTarget( \"test_mesh_lightmap\", 128, 128, false )\n\n\t-- Filling the lightmap texture with some stuff for visualization\n\trender.PushRenderTarget( meshLightmap )\n\n\t\tcam.Start2D()\n\n\t\t\t-- Resetting lightmap to be monotone gray\n\t\t\trender.Clear( 128, 128, 128, 255 )\n\n\t\t\t-- Drawing a dark rectangle\n\t\t\trender.SetColorMaterial()\n\t\t\tsurface.SetDrawColor( 80, 80, 80, 255 )\n\t\t\tsurface.DrawRect( 32, 32, 64, 64 )\n\n\t\t\t-- And some color text, why not! Lightmaps support RGB color\n\t\t\tdraw.SimpleText( \"This is lightmap\", \"DermaDefault\", 64, 64, Color( 255, 0, 0, 255 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )\n\n\t\tcam.End2D()\n\n\trender.PopRenderTarget()\n\n\t-- Creating the mesh. Don't forget to pass the material you're gonna use with it!\n\t-- Shader of the material defines some features of the mesh, vertex structure\n\t-- specifically (LightmappedGeneric requires each vertex to store 2 UV channels,\n\t-- for instance. This is important in this case)\n\tmyTestMesh = Mesh( meshMat )\n\n\t-- Creating the mesh\n\tmesh.Begin( myTestMesh, MATERIAL_QUADS, 1 )\n\n\t\tfor i, vertex in pairs( meshVertices ) do\n\n\t\t\tmesh.Position( vertex.pos )\n\n\t\t\t-- Texture coordinates go to channel 0\n\t\t\tmesh.TexCoord( 0, vertex.u0, vertex.v0 )\n\n\t\t\t-- Lightmap texture coordinates go to channel 1\n\t\t\tmesh.TexCoord( 1, vertex.u1, vertex.v1 )\n\n\t\t\tmesh.Normal( vertex.n )\n\t\t\tmesh.AdvanceVertex()\n\t\tend\n\n\tmesh.End()\nend )\n\nhook.Add( \"PostDrawOpaqueRenderables\", \"LightmappedMeshTest\", function()\n\n\tif myTestMesh and myTestMesh ~= NULL then\n\n\t\trender.SetMaterial( meshMat )\n\t\trender.SetLightmapTexture( meshLightmap )\n\n\t\tmyTestMesh:Draw()\n\tend\nend )","description":"Creates a mesh with LightmappedGeneric material on it"}],"isConstructor":false,"name":"SetLightmapTexture","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"{}","description":"A table containing up to 4 tables for each light source that should be set up. Each of these tables should contain the properties of its associated light source, see {{Struct|LocalLight}}.","isOptional":true,"isVarArg":false,"name":"lights","type":"LocalLight"}],"description":"Sets up the local lighting for any upcoming render operation. Up to 4 local lights can be defined, with one of three different types (point, directional, spot).\n\nDisables all local lights if called with no arguments.","examples":[],"isConstructor":false,"name":"SetLocalModelLights","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The material to be used.","isOptional":false,"isVarArg":false,"name":"mat","type":"IMaterial"}],"description":"Sets the material to be used in any upcoming render operation using the {{Lib|render}}.\n\nNot to be confused with {{LibraryFunction|surface|SetMaterial}}.\n\n{{RenderingContext|Function|3D}}\n{{RenderingContext|Function|2D}}","examples":[],"isConstructor":false,"name":"SetMaterial","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The light source to edit, see {{Enum|BOX}}.","isOptional":false,"isVarArg":false,"name":"lightDirection","type":"BOX"},{"default":"","description":"The red component of the light color.","isOptional":false,"isVarArg":false,"name":"red","type":"number"},{"default":"","description":"The green component of the light color.","isOptional":false,"isVarArg":false,"name":"green","type":"number"},{"default":"","description":"The blue component of the light color.","isOptional":false,"isVarArg":false,"name":"blue","type":"number"}],"description":"Sets up the ambient lighting for any upcoming render operation. Ambient lighting can be seen as a cube enclosing the object to be drawn, each of its faces representing a directional light source that shines towards the object. Thus, there is a total of six different light sources that can be configured separately.\n\nLight color components are not restricted to a specific range (i.e. 0-255), instead, higher values will result in a brighter light.","examples":[],"isConstructor":false,"name":"SetModelLighting","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new render target to be used.","isOptional":false,"isVarArg":false,"name":"texture","type":"ITexture"}],"description":"Sets the render target to the specified rt.","examples":[],"isConstructor":false,"name":"SetRenderTarget","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The index of the rt to set.","isOptional":false,"isVarArg":false,"name":"rtIndex","type":"number"},{"default":"","description":"The new render target to be used.","isOptional":false,"isVarArg":false,"name":"texture","type":"ITexture"}],"description":"Sets the render target with the specified index to the specified rt.","examples":[],"isConstructor":false,"name":"SetRenderTargetEx","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"X start coordinate of the scissor rect.","isOptional":false,"isVarArg":false,"name":"startX","type":"number"},{"default":"","description":"Y start coordinate of the scissor rect.","isOptional":false,"isVarArg":false,"name":"startY","type":"number"},{"default":"","description":"X end coordinate of the scissor rect.","isOptional":false,"isVarArg":false,"name":"endX","type":"number"},{"default":"","description":"Y end coordinate of the scissor rect.","isOptional":false,"isVarArg":false,"name":"endY","type":"number"},{"default":"","description":"Enable or disable the scissor rect.","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Sets a scissoring rect which limits the drawing area.","examples":[{"code":"render.SetScissorRect( 0, 0, 512, 512, true ) -- Enable the rect\n\tdraw.RoundedBox( 4, 0, 0, ScrW(), ScrH(), color_white ) -- Draw a white rectangle over the whole screen\nrender.SetScissorRect( 0, 0, 0, 0, false ) -- Disable after you are done","description":"Shows how to use this function. This will cut the white rectangle from full screen to 512x512 box in top left corner"}],"isConstructor":false,"name":"SetScissorRect","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The red channel of the shadow color.","isOptional":false,"isVarArg":false,"name":"red","type":"number"},{"default":"","description":"The green channel of the shadow color.","isOptional":false,"isVarArg":false,"name":"green","type":"number"},{"default":"","description":"The blue channel of the shadow color.","isOptional":false,"isVarArg":false,"name":"blue","type":"number"}],"description":"Sets the shadow color.","examples":[],"isConstructor":false,"name":"SetShadowColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new shadow direction.","isOptional":false,"isVarArg":false,"name":"shadowDirections","type":"Vector"}],"description":"Sets the shadow projection direction.","examples":[],"isConstructor":false,"name":"SetShadowDirection","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new maximum shadow distance.","isOptional":false,"isVarArg":false,"name":"shadowDistance","type":"number"}],"description":"Sets the maximum shadow projection range.","examples":[],"isConstructor":false,"name":"SetShadowDistance","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"newState","type":"boolean"}],"description":"Sets whether any future render operations will ignore shadow drawing.","examples":[],"isConstructor":false,"name":"SetShadowsDisabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Compare function, see {{Enum|STENCILCOMPARISONFUNCTION}}, and {{Enum|STENCIL}} for short.","isOptional":false,"isVarArg":false,"name":"compareFunction","type":"STENCILCOMPARISONFUNCTION"}],"description":"Sets the compare function of the stencil.\n\nPixels which fail the stencil comparison function are not written to the render target. The operation to be performed on the stencil buffer values for these pixels can be set using {{LibraryFunction|render|SetStencilFailOperation}}.\n\nPixels which pass the stencil comparison function are written to the render target unless they fail the depth buffer test (where applicable). The operation to perform on the stencil buffer values for these pixels can be set using {{LibraryFunction|render|SetStencilPassOperation}} and {{LibraryFunction|render|SetStencilZFailOperation}}.","examples":[],"isConstructor":false,"name":"SetStencilCompareFunction","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new state.","isOptional":false,"isVarArg":false,"name":"newState","type":"boolean"}],"description":"Sets whether stencil tests are carried out for each rendered pixel.\n\nOnly pixels passing the stencil test are written to the render target.","examples":[{"code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\trender.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\trender.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Set the reference value to 1. This is what the compare function tests against\n\trender.SetStencilReferenceValue( 1 )\n\t-- Refuse to write things to the screen unless that pixel's value is 1\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\t-- Write a 1 to the centre third of the screen. Because we cleared it earlier, everything is currently 0\n\tlocal w, h = ScrW() / 3, ScrH() / 3\n\tlocal x_start, y_start = w, h\n\tlocal x_end, y_end = x_start + w, y_start + h\n\trender.ClearStencilBufferRectangle( x_start, y_start, x_end, y_end, 1 )\n\n\t-- Draw our entities. They will only draw in the area cleared above\n\tfor _, ent in pairs( ents.FindByClass( \"sent_stencil_test\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","description":"A basic stencil operation that limits rendering to the centre of the screen"}],"isConstructor":false,"name":"SetStencilEnable","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Fail operation function, see {{Enum|STENCILOPERATION}}","isOptional":false,"isVarArg":false,"name":"failOperation","type":"STENCILOPERATION"}],"description":"Sets the operation to be performed on the stencil buffer values if the compare function was not successful.\nNote that this takes place '''before''' depth testing.","examples":[{"code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\t-- render.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\t-- render.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Set the reference value to 1. This is what the compare function tests against\n\trender.SetStencilReferenceValue( 1 )\n\t-- Only draw things if their pixels are currently 1. Currently this is nothing.\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\t-- If something fails to draw to the screen, set the pixels it would have drawn to 1\n\t-- This includes if it's behind something.\n\trender.SetStencilFailOperation( STENCIL_REPLACE )\n\n\t-- Draw our entities. They will not draw, because everything is 0\n\tfor _, ent in pairs( ents.FindByClass( \"sent_stencil_test\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- If we were to re-draw our entities, we'd see them, but otherwise they're invisible.\n\t-- If we flush the screen, we can show the \"holes\" they've left in the stencil buffer\n\trender.ClearBuffersObeyStencil(0, 148, 133, 255, false);\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","description":"This is one of the most useful things stencils can do - not render something to the screen and then allow you to draw with the shape it would have been if it ''had'' rendered.\n\nYou can see in the output screenshot that a partially obscured entity will still write its entire shape to the stencil buffer."}],"isConstructor":false,"name":"SetStencilFailOperation","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Pass operation function, see {{Enum|STENCILOPERATION}}","isOptional":false,"isVarArg":false,"name":"passOperation","type":"STENCILOPERATION"}],"description":"Sets the operation to be performed on the stencil buffer values if the compare function was successful.","examples":[{"code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\t-- render.SetStencilCompareFunction( STENCIL_ALWAYS )\n\t-- render.SetStencilPassOperation( STENCIL_KEEP )\n\trender.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Set the reference value to 1. This is what the compare function tests against\n\trender.SetStencilReferenceValue( 1 )\n\t-- Only draw things if their pixels are NOT 1. Currently this is everything.\n\trender.SetStencilCompareFunction( STENCIL_NOTEQUAL )\n\t-- If something draws to the screen, set the pixels it draws to 1\n\trender.SetStencilPassOperation( STENCIL_REPLACE )\n\n\t-- Draw our entities. They will draw as normal\n\tfor _, ent in pairs( ents.FindByClass( \"sent_stencil_test\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- At this point, we cannot draw on top of anything that we have already drawn.\n\t-- So, if we flush the screen, our entities will still be there.\n\trender.ClearBuffersObeyStencil(0, 148, 133, 255, false);\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","description":"This uses the pass operation to blank out everything but what we just drew"}],"isConstructor":false,"name":"SetStencilPassOperation","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Reference value.","isOptional":false,"isVarArg":false,"name":"referenceValue","type":"number"}],"description":"Sets the reference value which will be used for all stencil operations. This is an unsigned integer.","examples":[],"isConstructor":false,"name":"SetStencilReferenceValue","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The mask bitflag.","isOptional":false,"isVarArg":false,"name":"mask","type":"number"}],"description":"Sets the unsigned 8-bit test bitflag mask to be used for any stencil testing.","examples":[{"code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\t--[[\n        To understand this tutorial you need to already understand the basics\n         of binary and bitwise operations.\n\n        It would also help to understand hexadecimal notation, since Lua\n         doesn't have a bitmask input, but I will include binary notation in\n         comments to help.\n\t--]]\n\n\t-- Reset everything to known good\n\t-- render.SetStencilWriteMask( 0xFF )\n\t-- render.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\t-- render.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\t-- render.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Force everything to fail\n\trender.SetStencilCompareFunction( STENCIL_NEVER )\n\t-- Save all the things we don't draw\n\trender.SetStencilFailOperation( STENCIL_REPLACE )\n\n\t-- Set the reference value to 00011100\n\trender.SetStencilReferenceValue( 0x1C )\n\t-- Set the write mask to 01010101\n\t-- Any writes to the stencil buffer will be bitwise ANDed with this mask.\n\t-- With our current reference value, the result will be 00010100.\n\trender.SetStencilWriteMask( 0x55 )\n\n\t-- Fail to draw our entities.\n\tfor _, ent in pairs( ents.FindByClass( \"sent_stencil_test\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- Set the test mask to 11110011.\n\t-- Any time a pixel is read out of the stencil buffer it will be bitwise ANDed with this mask.\n\trender.SetStencilTestMask( 0xF3 )\n\t-- Set the reference value to 00011100 & 01010101 & 11110011\n\trender.SetStencilReferenceValue( 0x10 )\n\t-- Pass if the masked buffer value matches the unmasked reference value\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\n\t-- Draw our entities\n\trender.ClearBuffersObeyStencil( 0, 148, 133, 255, false );\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","description":"A brief demonstration of masks"},{"code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\t--[[\n        To understand this tutorial you need to already understand the basics\n         of binary and bitwise operations.\n\n        It would also help to understand hexadecimal notation, since Lua\n         doesn't have a bitmask input, but I will include binary notation in\n         comments to help.\n\t--]]\n\n\t-- Reset everything to known good\n\t-- render.SetStencilWriteMask( 0xFF )\n\t-- render.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\t-- render.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\t-- render.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\n\t-- Only write to the upper 4 bits of the stencil buffer\n\trender.SetStencilWriteMask( 0xF0 )\n\t-- Wipe the stencil buffer to be 0001111. This is not affected by the write mask.\n\trender.ClearStencilBufferRectangle( 0, 0, ScrW(), ScrH(), 0x0F )\n\n\t-- Always fail\n\trender.SetStencilCompareFunction( STENCIL_NEVER )\n\t-- Don't read any bits from the stencil buffer\n\trender.SetStencilTestMask( 0x00 )\n\t-- When an operation fails, read the current value from the stencil buffer, add\n\t--  one to it and then write it back to the buffer\n\t-- This is not affected by the test mask, but it is affected by the write mask\n\t-- This means we will read 00001111, then write 00010000.\n\t-- However, due to the write mask, this won't affect the last four bits already\n\t--  in the buffer, resulting in 00011111.\n\trender.SetStencilFailOperation( STENCIL_INCR )\n\n\t-- Add something interesting to the stencil buffer\n\tfor _, ent in pairs( ents.FindByClass( \"sent_stencil_test\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\n\t-- Go back to reading the full value from the stencil buffer\n\trender.SetStencilTestMask( 0xFF )\n\t-- Set the reference value to 00011111\n\trender.SetStencilReferenceValue( 0x1F )\n\t-- Render the result\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\trender.ClearBuffersObeyStencil( 0, 148, 133, 255, false );\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","description":"A somewhat more complicated mask example"}],"isConstructor":false,"name":"SetStencilTestMask","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The mask bitflag.","isOptional":false,"isVarArg":false,"name":"mask","type":"number"}],"description":"Sets the unsigned 8-bit write bitflag mask to be used for any writes to the stencil buffer.","examples":[{"code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\t--[[\n        To understand this tutorial you need to already understand the basics\n         of binary and bitwise operations.\n\n        It would also help to understand hexadecimal notation, since Lua\n         doesn't have a bitmask input, but I will include binary notation in\n         comments to help.\n\t--]]\n\n\t-- Reset everything to known good\n\t-- render.SetStencilWriteMask( 0xFF )\n\t-- render.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\t-- render.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\t-- render.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Force everything to fail\n\trender.SetStencilCompareFunction( STENCIL_NEVER )\n\t-- Save all the things we don't draw\n\trender.SetStencilFailOperation( STENCIL_REPLACE )\n\n\t-- Set the reference value to 00011100\n\trender.SetStencilReferenceValue( 0x1C )\n\t-- Set the write mask to 01010101\n\t-- Any writes to the stencil buffer will be bitwise ANDed with this mask.\n\t-- With our current reference value, the result will be 00010100.\n\trender.SetStencilWriteMask( 0x55 )\n\n\t-- Fail to draw our entities.\n\tfor _, ent in pairs( ents.FindByClass( \"sent_stencil_test\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- Set the test mask to 11110011.\n\t-- Any time a pixel is read out of the stencil buffer it will be bitwise ANDed with this mask.\n\trender.SetStencilTestMask( 0xF3 )\n\t-- Set the reference value to 00011100 & 01010101 & 11110011\n\trender.SetStencilReferenceValue( 0x10 )\n\t-- Pass if the masked buffer value matches the unmasked reference value\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\n\t-- Draw our entities\n\trender.ClearBuffersObeyStencil( 0, 148, 133, 255, false );\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","description":"A brief demonstration of masks"},{"code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\t--[[\n        To understand this tutorial you need to already understand the basics\n         of binary and bitwise operations.\n\n        It would also help to understand hexadecimal notation, since Lua\n         doesn't have a bitmask input, but I will include binary notation in\n         comments to help.\n\t--]]\n\n\t-- Reset everything to known good\n\t-- render.SetStencilWriteMask( 0xFF )\n\t-- render.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\t-- render.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\t-- render.SetStencilFailOperation( STENCIL_KEEP )\n\trender.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\n\t-- Only write to the upper 4 bits of the stencil buffer\n\trender.SetStencilWriteMask( 0xF0 )\n\t-- Wipe the stencil buffer to be 0001111. This is not affected by the write mask.\n\trender.ClearStencilBufferRectangle( 0, 0, ScrW(), ScrH(), 0x0F )\n\n\t-- Always fail\n\trender.SetStencilCompareFunction( STENCIL_NEVER )\n\t-- Don't read any bits from the stencil buffer\n\trender.SetStencilTestMask( 0x00 )\n\t-- When an operation fails, read the current value from the stencil buffer, add\n\t--  one to it and then write it back to the buffer\n\t-- This is not affected by the test mask, but it is affected by the write mask\n\t-- This means we will read 00001111, then write 00010000.\n\t-- However, due to the write mask, this won't affect the last four bits already\n\t--  in the buffer, resulting in 00011111.\n\trender.SetStencilFailOperation( STENCIL_INCR )\n\n\t-- Add something interesting to the stencil buffer\n\tfor _, ent in pairs( ents.FindByClass( \"sent_stencil_test\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\n\t-- Go back to reading the full value from the stencil buffer\n\trender.SetStencilTestMask( 0xFF )\n\t-- Set the reference value to 00011111\n\trender.SetStencilReferenceValue( 0x1F )\n\t-- Render the result\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\trender.ClearBuffersObeyStencil( 0, 148, 133, 255, false );\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","description":"A somewhat more complicated mask example"}],"isConstructor":false,"name":"SetStencilWriteMask","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Z fail operation function, see {{Enum|STENCILOPERATION}}","isOptional":false,"isVarArg":false,"name":"zFailOperation","type":"STENCILOPERATION"}],"description":"Sets the operation to be performed on the stencil buffer values if the stencil test is passed but the depth buffer test fails.","examples":[{"code":"hook.Add( \"PostDrawOpaqueRenderables\", \"Stencil Tutorial Example\", function()\n\n\t-- Reset everything to known good\n\trender.SetStencilWriteMask( 0xFF )\n\trender.SetStencilTestMask( 0xFF )\n\trender.SetStencilReferenceValue( 0 )\n\t-- render.SetStencilCompareFunction( STENCIL_ALWAYS )\n\trender.SetStencilPassOperation( STENCIL_KEEP )\n\trender.SetStencilFailOperation( STENCIL_KEEP )\n\t-- render.SetStencilZFailOperation( STENCIL_KEEP )\n\trender.ClearStencil()\n\n\t-- Enable stencils\n\trender.SetStencilEnable( true )\n\t-- Set the reference value to 1. This is what the compare function tests against\n\trender.SetStencilReferenceValue( 1 )\n\t-- Always draw everything\n\trender.SetStencilCompareFunction( STENCIL_ALWAYS )\n\t-- If something would draw to the screen but is behind something, set the pixels it draws to 1\n\trender.SetStencilZFailOperation( STENCIL_REPLACE )\n\n\t-- Draw our entities. They will draw as normal\n\tfor _, ent in pairs( ents.FindByClass( \"sent_stencil_test\" ) ) do\n\t\tent:DrawModel()\n\tend\n\n\t-- Now, only draw things that have their pixels set to 1. This is the hidden parts of the stencil tests.\n\trender.SetStencilCompareFunction( STENCIL_EQUAL )\n\t-- Flush the screen. This will draw teal over all hidden sections of the stencil tests\n\trender.ClearBuffersObeyStencil(0, 148, 133, 255, false);\n\n\t-- Let everything render normally again\n\trender.SetStencilEnable( false )\nend )","description":"This shows how to reveal hidden sections of entities, wallhack style"}],"isConstructor":false,"name":"SetStencilZFailOperation","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"vec","type":"Vector"}],"description":"","examples":[],"isConstructor":false,"name":"SetToneMappingScaleLinear","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"X origin of the view port.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"Y origin of the view port.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"Width of the view port.","isOptional":false,"isVarArg":false,"name":"w","type":"number"},{"default":"","description":"Height of the view port.","isOptional":false,"isVarArg":false,"name":"h","type":"number"}],"description":"Changes the view port position and size.\n\n{{Note|This function will override values of {{GlobalFunction|ScrW}} and {{GlobalFunction|ScrH}} with the ones you set.}}\n\n{{Bug|Issue=1424|Arguments are clamped to the client's screen bounds, disallowing render targets bigger than the screen. {{LibraryFunction|render|PushRenderTarget}} doesn't suffer from this.}}","examples":[{"code":"local oldW, oldH = ScrW(), ScrH()\nlocal oldRT = render.GetRenderTarget()\n\nrender.SetRenderTarget(RTName)\nrender.Clear(0,0,0,255)\nrender.SetViewPort(0,0,32,32)\n\trender.RenderView(CamData)\n\trender.SetRenderTarget(oldRT)\nrender.SetViewPort(0,0,oldW,oldH)","description":"Renders a screen with a dimension of 32 X 32 and resets the render system to normal."}],"isConstructor":false,"name":"SetViewPort","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"","examples":[],"isConstructor":false,"name":"SetWriteDepthToDestAlpha","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Swaps the frame buffers/cycles the frame. In other words, this updates the screen.\n\nIf you take a really long time during a single frame render, it is a good idea to use this and let the user know that the game isn't stuck.","examples":[{"code":"-- Restore RT\nrender.SetRenderTarget( OldRT )\n\n-- Render our result buffer to the screen\nmatFSB:SetFloat( \"$alpha\", 1 )\nmatFSB:SetTexture( \"$basetexture\", texFSB )\n\nrender.SetMaterial( matFSB )\nrender.DrawScreenQuad()\n\ncam.Start2D()\n\tlocal add = ( i / ( math.pi*2 ) ) * ( 1 / passes )\n\tlocal percent = string.format( \"%.1f\", ( mul - ( 1 / passes ) + add ) * 100 )\n\tdraw.DrawText( percent .. \"%\", \"GModWorldtip\", view.w - 100, view.h - 100, Color( 0, 0, 0, 255 ), TEXT_ALIGN_CENTER )\n\tdraw.DrawText( percent .. \"%\", \"GModWorldtip\", view.w - 101, view.h - 101, Color( 255, 255, 255, 255 ), TEXT_ALIGN_CENTER )\ncam.End2D()\n\nrender.Spin()","description":"Code from [https://github.com/garrynewman/garrysmod/blob/master/garrysmod/lua/postprocess/super_dof.lua#L219-L236 Super DOF]; Push the current progress of rendering onto the screen and display a percentage of completion near the bottom right."}],"isConstructor":false,"name":"Spin","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Amount of beam segments that are about to be drawn.","isOptional":false,"isVarArg":false,"name":"segmentCount","type":"number"}],"description":"Start a new beam draw operation.\n\n{{RenderingContext|Function|3D}}","examples":[],"isConstructor":false,"name":"StartBeam","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns whether the game supports HDR, i.e. if the DirectX level is higher than or equal to 8.","examples":[],"isConstructor":false,"name":"SupportsHDR","realm":"client","returns":[{"description":"supportsHDR","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the current settings and the system allow the usage of pixel shaders 1.4.","examples":[],"isConstructor":false,"name":"SupportsPixelShaders_1_4","realm":"client","returns":[{"description":"Whether Pixel Shaders 1.4 are supported or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the current settings and the system allow the usage of pixel shaders 2.0.","examples":[],"isConstructor":false,"name":"SupportsPixelShaders_2_0","realm":"client","returns":[{"description":"Whether Pixel Shaders 2.0 are supported or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the current settings and the system allow the usage of vertex shaders 2.0.","examples":[],"isConstructor":false,"name":"SupportsVertexShaders_2_0","realm":"client","returns":[{"description":"Whether Vertex Shaders 2.0 are supported or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"True to suppress false to enable.","isOptional":false,"isVarArg":false,"name":"suppressLighting","type":"boolean"}],"description":"Suppresses or enables any engine lighting for any upcoming render operation.","examples":[],"isConstructor":false,"name":"SuppressEngineLighting","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Enables HDR tone mapping which influences the brightness.","examples":[],"isConstructor":false,"name":"TurnOnToneMapping","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Updates the texture returned by {{LibraryFunction|render|GetFullScreenDepthTexture}}.\n\nSilently fails if {{LibraryFunction|render|SupportsPixelShaders_2_0}} returns false.","examples":[],"isConstructor":false,"name":"UpdateFullScreenDepthTexture","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Updates the power of two texture.","examples":[],"isConstructor":false,"name":"UpdatePowerOfTwoTexture","realm":"client","returns":[{"description":"Returns {{LibraryFunction|render|GetPowerOfTwoTexture}}.","type":"ITexture"}]},{"accessModifier":"public","arguments":[],"description":"Pretty much alias of {{LibraryFunction|render|UpdatePowerOfTwoTexture}} but does not return the texture.","examples":[],"isConstructor":false,"name":"UpdateRefractTexture","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Copies the entire screen to the screen effect texture, which can be acquired via {{LibraryFunction|render|GetScreenEffectTexture}}. This function is mainly intended to be used in {{HookFunction|GM|RenderScreenspaceEffects}}","examples":[],"isConstructor":false,"name":"UpdateScreenEffectTexture","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"render"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The resource library is used to control what files are sent to clients who join a server, this includes models, materials, sounds, text files but not Lua files.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Virtual path of the file to be added, relative to garrysmod/. Do not add .bz2 to the filepath. Do not put gamemodes/<gamemodename>/content/ or addons/<addonname>/ into the path.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"Adds the specified and all related files to the files the client should download.\n\nFor convenience, this function will automatically add any other files that are related to the selected one, and throw an error if it can't find them. For example, a .vmt file will automatically add the .vtf with the same name, and a .mdl file will automatically add all .vvd, .ani, .dx80.vtx, .dx90.vtx, .sw.vtx, .phy and .jpg files with the same name, with a separate error for each missing file. If you do not want it to do this, use [[resource/AddSingleFile|resource.AddSingleFile]].\n\n{{Note|There's a 8192 downloadable file limit. If you need more, consider using Workshop addons - {{LibraryFunction|resource|AddWorkshop}}. You should also consider the fact that you have way too many downloads. This limit is shared among all resource.Add functions.}}\n\n{{Note|Running this function using a path relative to the main garrysmod/ folder will not work for files in addons and gamemodes. Instead, the files must be added relative to their respective content folders. For example, a sound file from an addon would use the path \"sound/[FILENAME_AND_EXTENSION],\" despite the file being located in \"addons/[ADDON_NAME]/sound/[FILENAME_AND_EXTENSION]\"}}","examples":[{"code":"resource.AddFile( \"materials/my/material.vmt\" ) -- Automatically adds materials/my/material.vtf\nresource.AddFile( \"models/my/model.mdl\" ) -- Automatically adds models/my/model.vtx and the rest\nresource.AddFile( \"sound/my/sound.wav\" ) -- Be careful, there's no S in the sound.","description":"Example of usage."}],"isConstructor":false,"name":"AddFile","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Path of the file to be added, relative to garrysmod/","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"Adds the specified file to the files the client should download.\n\n{{Note|There's a 8192 downloadable file limit. If you need more, consider using Workshop addons - {{LibraryFunction|resource|AddWorkshop}}. You should also consider the fact that you have way too many downloads. This limit is shared among all resource.Add functions.}}","examples":[],"isConstructor":false,"name":"AddSingleFile","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The workshop id of the file. This cannot be a collection.","isOptional":false,"isVarArg":false,"name":"workshopid","type":"string"}],"description":"Adds a workshop addon for the client to download before entering the server.\n\nHaving the raw files from a workshop item does not count as having already downloaded it.<br>\nSo players who previously downloaded a map through Fast Download will have to re-download it if you use the workshop.\n\nYou should try to only add addons that have custom content ( models, sounds, etc ).\n\nGamemodes that are [[Gamemode_Creation#Gamemode_Text_File|workshop enabled]] are automatically added to this list - so there's no need to add them.<br/>\nThe server's current map is also automatically added, if it is loaded from a workshop addon.\n\n{{Warning|This will not \"install\" the addon on your server, see [[Workshop for Dedicated Servers]] for installing Steam Workshop addons onto your servers}}","examples":[{"code":"resource.AddWorkshop( \"104606562\" )","description":"Adds the Achievement Viewer addon (workshop id 104606562).<br/>\nAny clients that join will download this addon if they haven't previously downloaded it from the workshop or from the server (via the workshop).\n\nYou get the ID from the URL of the workshop addon.<br/>\nFor example, here's the URL of the Achievement Viewer addon's page:<br/>\nhttp://steamcommunity.com/sharedfiles/filedetails/?id=104606562<br/>\nThe ID is 104606562."}],"isConstructor":false,"name":"AddWorkshop","realm":"server","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"resource"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}\n\nThis panel is created whenever you add a node to a {{Type|DTree}}.\n\nThe root node of a {{Type|DTree}} is also a {{Type|DTree_Node}} and controls much of its action; it can be accessed with {{ClassFunction|DTree|Root}}.","examples":[],"extends":"DPanel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The name of the new node","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The folder in the filesystem to use, relative to the garrysmod/ folder.","isOptional":false,"isVarArg":false,"name":"folder","type":"string"},{"default":"","description":"The path to search in. See [[File Search Paths]]","isOptional":false,"isVarArg":false,"name":"path","type":"string"},{"default":"false","description":"Should files be added as nodes (true) or folders only (false)","isOptional":true,"isVarArg":false,"name":"showFiles","type":"boolean"},{"default":"\"*\"","description":"The wildcard to use when searching for files.","isOptional":true,"isVarArg":false,"name":"wildcard","type":"string"},{"default":"false","description":"","isOptional":true,"isVarArg":false,"name":"bDontForceExpandable","type":"boolean"}],"description":"A helper function that adds a new node and calls to {{ClassFunction|DTree_Node|MakeFolder}} on it.","examples":[],"isConstructor":false,"name":"AddFolder","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the node.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"\"icon16/folder.png\"","description":"The icon that will show nexto the node in the DTree.","isOptional":true,"isVarArg":false,"name":"icon","type":"string"}],"description":"Add a child node to the DTree_Node","examples":[],"isConstructor":false,"name":"AddNode","realm":"client","returns":[{"description":"Returns the created {{Type|DTree_Node}} panel.","type":"DTree_Node"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to add.","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"{{Internal}}\n\nAdds the given panel to the child nodes list, a {{Type|DListLayout}}.","examples":[],"isConstructor":false,"name":"AddPanel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"anim","type":"table"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"delta","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"data","type":"table"}],"description":"{{Internal}}\n\nInternal function that handles the expand/collapse animations.","examples":[],"isConstructor":false,"name":"AnimSlide","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"expanded","type":"boolean"}],"description":"{{Internal}}\n\nCalled when a child node is expanded or collapsed to propagate this event to parent nodes to update layout.","examples":[],"isConstructor":false,"name":"ChildExpanded","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Cleans up the internal table of items (sub-nodes) of this node from invalid panels or sub-nodes that were moved from this node to another.\n\nAppears the be completely unused by the game on its own.","examples":[],"isConstructor":false,"name":"CleanList","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Create and returns a copy of this node, including all the sub-nodes.","examples":[],"isConstructor":false,"name":"Copy","realm":"client","returns":[{"description":"The copied {{Type|DTree_Node}}.","type":"DTree_Node"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nCreates the container {{Type|DListLayout}} for the {{Type|DTree_Node}}s.\n\nThis is called automatically so you don't have to.","examples":[],"isConstructor":false,"name":"CreateChildNodes","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nCalled automatically to update the status of {{ClassFunction|DTree_Node|GetLastChild}} on children of this node.","examples":[],"isConstructor":false,"name":"DoChildrenOrder","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the node is clicked.\n\nSee also {{ClassFunction|DTree_Node|DoRightClick}}.","examples":[],"isConstructor":false,"name":"DoClick","realm":"client","returns":[{"description":"Return true to prevent DoClick from being called on parent nodes or the {{Type|DTree}} itself.","type":"DTree"}]},{"accessModifier":"public","arguments":[],"description":"Called when the node is right clicked.\n\nSee also {{ClassFunction|DTree_Node|DoClick}}.","examples":[],"isConstructor":false,"name":"DoRightClick","realm":"client","returns":[{"description":"Return true to prevent DoRightClick from being called on parent nodes or the {{Type|DTree}} itself.","type":"DTree"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to expand (true) or collapse (false)","isOptional":false,"isVarArg":false,"name":"expand","type":"boolean"}],"description":"Expands or collapses this node, as well as ALL child nodes of this node.\n\nWorks opposite of {{ClassFunction|DTree_Node|ExpandTo}}.","examples":[],"isConstructor":false,"name":"ExpandRecurse","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to expand (true) or collapse (false)","isOptional":false,"isVarArg":false,"name":"expand","type":"boolean"}],"description":"Collapses or expands all nodes from the topmost-level node to this one.\n\nWorks opposite of {{ClassFunction|DTree_Node|ExpandRecurse}}.","examples":[],"isConstructor":false,"name":"ExpandTo","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Does nothing. Set to true if called from {{ClassFunction|DTree_Node|PopulateChildren}}.","isOptional":false,"isVarArg":false,"name":"bAndChildren","type":"boolean"},{"default":"","description":"Expand self once population process is finished.","isOptional":false,"isVarArg":false,"name":"bExpand","type":"boolean"}],"description":"{{Internal}}\n\nCalled automatically from {{ClassFunction|DTree_Node|PopulateChildrenAndSelf}} and {{ClassFunction|DTree_Node|PopulateChildren}} to populate this node with child nodes of files and folders.","examples":[],"isConstructor":false,"name":"FilePopulate","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A list of files in this folder","isOptional":false,"isVarArg":false,"name":"files","type":"table"},{"default":"","description":"A list of folder in this folder.","isOptional":false,"isVarArg":false,"name":"folders","type":"table"},{"default":"","description":"The folder name/path this node represents","isOptional":false,"isVarArg":false,"name":"foldername","type":"string"},{"default":"","description":"The Path ID search was performed with. See [[File Search Paths]]","isOptional":false,"isVarArg":false,"name":"path","type":"string"},{"default":"","description":"Inherited from the '''FilePopulate''' call. Does nothing","isOptional":false,"isVarArg":false,"name":"bAndChildren","type":"boolean"},{"default":"","description":"The wildcard that was given","isOptional":false,"isVarArg":false,"name":"wildcard","type":"string"}],"description":"{{Internal}}\n\nCalled automatically from {{ClassFunction|DTree_Node|FilePopulate}} to actually fill the node with sub-nodes based on set preferences like should files be added, etc.","examples":[],"isConstructor":false,"name":"FilePopulateCallback","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The number of the child to get, starting with 0","isOptional":false,"isVarArg":false,"name":"num","type":"number"}],"description":"Returns n-th child node.\n\nBasically an alias of {{ClassFunction|Panel|GetChild}}.","examples":[],"isConstructor":false,"name":"GetChildNode","realm":"client","returns":[{"description":"The child panel, if valid ID is given","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nReturns value set by {{ClassFunction|DTree_Node|SetDirty}}.","examples":[],"isConstructor":false,"name":"GetDirty","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the double clock to collapse/expand functionality is enabled on this node.","examples":[],"isConstructor":false,"name":"GetDoubleClickToOpen","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nReturns what is set by {{ClassFunction|DTree_Node|SetDraggableName}}.","examples":[],"isConstructor":false,"name":"GetDraggableName","realm":"client","returns":[{"description":"","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nReturns whether or not this node is drawing lines","examples":[],"isConstructor":false,"name":"GetDrawLines","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the filepath of the file attached to this node.","examples":[],"isConstructor":false,"name":"GetFileName","realm":"client","returns":[{"description":"","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the folder path to search in, set by {{ClassFunction|DTree_Node|MakeFolder}}.","examples":[],"isConstructor":false,"name":"GetFolder","realm":"client","returns":[{"description":"The folder path.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the expand/collapse button is shown on this node regardless of whether or not it has sub-nodes.\n\nSee also {{ClassFunction|DTree_Node|SetForceShowExpander}}.","examples":[],"isConstructor":false,"name":"GetForceShowExpander","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the expand button (little + button) should be shown or hidden.","examples":[],"isConstructor":false,"name":"GetHideExpander","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the image path to the icon of this node.","examples":[],"isConstructor":false,"name":"GetIcon","realm":"client","returns":[{"description":"The path to the image","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the indentation level of the {{Type|DTree}} this node belongs to.\n\nAlias of {{ClassFunction|DTree|GetIndentSize}}, see it for more info.","examples":[],"isConstructor":false,"name":"GetIndentSize","realm":"client","returns":[{"description":"The indentation level.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether this node is the last child on this level or not.","examples":[],"isConstructor":false,"name":"GetLastChild","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"The height of a single {{Type|DTree_Node}} of the {{Type|DTree}} this node belongs to.\n\nAlias of {{ClassFunction|DTree|GetLineHeight}}.","examples":[],"isConstructor":false,"name":"GetLineHeight","realm":"client","returns":[{"description":"The height of a single {{Type|DTree_Node}}.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\n{{Stub}}","examples":[],"isConstructor":false,"name":"GetNeedsChildSearch","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nReturns whether or not the node is set to be populated from the filesystem.","examples":[],"isConstructor":false,"name":"GetNeedsPopulating","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the parent {{Type|DTree_Node}}. Note that {{ClassFunction|Panel|GetParent}} will not be the same!","examples":[],"isConstructor":false,"name":"GetParentNode","realm":"client","returns":[{"description":"The parent node.","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns the path ID ([[File Search Paths]]) used in populating the {{Type|DTree}} from the filesystem.\n\nSee {{ClassFunction|DTree_Node|SetPathID}} and {{ClassFunction|DTree_Node|MakeFolder}}.","examples":[],"isConstructor":false,"name":"GetPathID","realm":"client","returns":[{"description":"The Path ID","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the root node, the {{Type|DTree}} this node is under.\n\nSee also {{ClassFunction|DTree_Node|GetParentNode}}.","examples":[],"isConstructor":false,"name":"GetRoot","realm":"client","returns":[{"description":"The root node","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not nodes for files should/will be added when populating the node from filesystem.","examples":[],"isConstructor":false,"name":"GetShowFiles","realm":"client","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the wildcard set by {{ClassFunction|DTree_Node|MakeFolder}}.","examples":[],"isConstructor":false,"name":"GetWildCard","realm":"client","returns":[{"description":"The search wildcard","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|DTree_Node}} to insert.","isOptional":false,"isVarArg":false,"name":"node","type":"DTree_Node"},{"default":"","description":"The node to insert the node above before or after.","isOptional":false,"isVarArg":false,"name":"nodeNextTo","type":"Panel"},{"default":"","description":"true to insert before, false to insert after.","isOptional":false,"isVarArg":false,"name":"before","type":"boolean"}],"description":"Inserts a sub-node into this node before or after the given node.","examples":[],"isConstructor":false,"name":"Insert","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Has to be {{Type|DTree_Node}}","isOptional":false,"isVarArg":false,"name":"node","type":"DTree_Node"}],"description":"{{Internal}}\n\nInserts an existing node as a \"child\" or a sub-node of this node.\nUsed internally by the drag'n'drop functionality.","examples":[],"isConstructor":false,"name":"InsertNode","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|DTree_Node}}.","isOptional":false,"isVarArg":false,"name":"node","type":"DTree_Node"}],"description":"{{Internal}}\n\nCalled automatically internally.\n\nMakes the target node compatible with this node's drag'n'drop.","examples":[],"isConstructor":false,"name":"InstallDraggable","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\n{{Stub}}\n\nSee {{ClassFunction|DTree_Node|DoClick}}","examples":[],"isConstructor":false,"name":"InternalDoClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\n{{Stub}}\n\nSee {{ClassFunction|DTree_Node|DoRightClick}}.","examples":[],"isConstructor":false,"name":"InternalDoRightClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns true if {{ClassFunction|DTree_Node|GetRoot}} is the same as {{ClassFunction|DTree_Node|GetParentNode}} of this node.","examples":[],"isConstructor":false,"name":"IsRootNode","realm":"client","returns":[{"description":"If this is a root node.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The node to remove","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"Removes given node as a sub-node of this node.\n\nIt doesn't actually remove or unparent the panel, just removes it from the internal {{Type|DListView}}.","examples":[],"isConstructor":false,"name":"LeaveTree","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The folder in the filesystem to use, relative to the garrysmod/ folder.","isOptional":false,"isVarArg":false,"name":"folder","type":"string"},{"default":"","description":"The path to search in. See [[File Search Paths]]","isOptional":false,"isVarArg":false,"name":"path","type":"string"},{"default":"false","description":"Should files be added as nodes (true) or folders only (false)","isOptional":true,"isVarArg":false,"name":"showFiles","type":"boolean"},{"default":"\"*\"","description":"The wildcard to use when searching for files.","isOptional":true,"isVarArg":false,"name":"wildcard","type":"string"},{"default":"false","description":"If set to true, don't show the expand buttons on empty nodes.","isOptional":true,"isVarArg":false,"name":"dontForceExpandable","type":"boolean"}],"description":"Makes this node a folder in the filesystem. This will make it automatically populated.\n\nSee also {{ClassFunction|DTree_Node|AddFolder}}.","examples":[],"isConstructor":false,"name":"MakeFolder","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The node to move.","isOptional":false,"isVarArg":false,"name":"node","type":"Panel"}],"description":"Moves given panel to the top of the children of this node.\n\nDespite name of this function, it cannot move the children to any position but the topmost.","examples":[],"isConstructor":false,"name":"MoveChildTo","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Moves this node to the top of the level.","examples":[],"isConstructor":false,"name":"MoveToTop","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when sub-nodes of this {{Type|DTree_Node}} were changed, such as being rearranged if that functionality is enabled.","examples":[],"isConstructor":false,"name":"OnModified","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"node","type":"Panel"}],"description":"{{Internal}}\n\nCalled when this or a sub node is selected. Do not use this, it is not for override.\n\nUse {{ClassFunction|DTree|OnNodeSelected}} or {{ClassFunction|DTree_Node|DoClick}} instead.","examples":[],"isConstructor":false,"name":"OnNodeSelected","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nCalled automatically to perform layout on this node if this node {{ClassFunction|DTree_Node|IsRootNode}}.","examples":[],"isConstructor":false,"name":"PerformRootNodeLayout","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nCalled automatically from {{ClassFunction|DTree_Node|PopulateChildrenAndSelf}}.","examples":[],"isConstructor":false,"name":"PopulateChildren","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Expand self once population process is finished.","isOptional":false,"isVarArg":false,"name":"expand","type":"boolean"}],"description":"{{Internal}}\n\nCalled automatically from {{ClassFunction|DTree_Node|SetExpanded}} (or when user manually expands the node) to populate the node with sub-nodes from the filesystem if this was enabled via {{ClassFunction|DTree_Node|MakeFolder}}.","examples":[],"isConstructor":false,"name":"PopulateChildrenAndSelf","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"dirty","type":"boolean"}],"description":"{{Deprecated}}\n\nAppears to have no effect on the {{Type|DTree_Node}}.","examples":[],"isConstructor":false,"name":"SetDirty","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"true to enable, false to disable this functionality.","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Sets whether double clicking the node should expand/collapse it or not.","examples":[],"isConstructor":false,"name":"SetDoubleClickToOpen","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"{{Internal}}\n\nUsed to store name for sub elements for a {{ClassFunction|Panel|Droppable}} call.","examples":[],"isConstructor":false,"name":"SetDraggableName","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"draw","type":"boolean"}],"description":"{{Internal}}\n\nSets whether or not this node should draw visual lines.","examples":[],"isConstructor":false,"name":"SetDrawLines","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to expand (true) or collapse (false)","isOptional":false,"isVarArg":false,"name":"expand","type":"boolean"},{"default":"false","description":"Whether to play animation (false) or not (true)","isOptional":true,"isVarArg":false,"name":"surpressAnimation","type":"boolean"}],"description":"Expands or collapses this node.","examples":[],"isConstructor":false,"name":"SetExpanded","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"filename","type":"string"}],"description":"{{Internal}}\n\nSets the file full filepath to the file attached to this node","examples":[],"isConstructor":false,"name":"SetFileName","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"folder","type":"string"}],"description":"{{Internal}}\n\nSets the folder to search files and folders in.\n\nUse {{ClassFunction|DTree_Node|MakeFolder}} instead.","examples":[],"isConstructor":false,"name":"SetFolder","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"forceShow","type":"boolean"}],"description":"Sets whether or not the expand/collapse button (+/- button) should be shown on this node regardless of whether it has sub-elements or not.","examples":[],"isConstructor":false,"name":"SetForceShowExpander","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"hide","type":"boolean"}],"description":"{{Internal}}\n\nSets whether the expand button (little + button) should be shown or hidden.","examples":[],"isConstructor":false,"name":"SetHideExpander","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path to the material to be used. Do not include \"materials/\". .pngs are supported.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"Sets the material for the icon of the {{Type|DTree_Node}}.","examples":[],"isConstructor":false,"name":"SetIcon","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"last","type":"boolean"}],"description":"{{Internal}}\n\nCalled automatically to set whether this node is the last child on this level or not.","examples":[],"isConstructor":false,"name":"SetLastChild","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"newState","type":"boolean"}],"description":"{{Internal}}\n\n{{Stub}}","examples":[],"isConstructor":false,"name":"SetNeedsChildSearch","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether or not the node needs populating","isOptional":false,"isVarArg":false,"name":"needs","type":"boolean"}],"description":"{{Internal}}\n\nSets whether or not the node needs populating from the filesystem.","examples":[],"isConstructor":false,"name":"SetNeedsPopulating","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to set as a parent node for this node","isOptional":false,"isVarArg":false,"name":"parent","type":"Panel"}],"description":"{{Internal}}\n\nSets the parent node of this node. Not the same as {{ClassFunction|Panel|SetParent}}.\n\nThis is set automatically, you shouldn't use this.","examples":[],"isConstructor":false,"name":"SetParentNode","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path ID to set.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"{{Internal}}\n\nSets the path ID ([[File Search Paths]]) for populating the tree from the filesystem.\n\nUse {{ClassFunction|DTree_Node|MakeFolder}} instead.","examples":[],"isConstructor":false,"name":"SetPathID","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to set as root node.","isOptional":false,"isVarArg":false,"name":"root","type":"Panel"}],"description":"{{Internal}}\n\nSets the root node (the {{Type|DTree}}) of this node.\n\nThis is set automatically, you shouldn't use this.","examples":[],"isConstructor":false,"name":"SetRoot","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether this node is currently selected or not.","isOptional":false,"isVarArg":false,"name":"selected","type":"boolean"}],"description":"{{Internal}}\n\nCalled automatically to update the \"selected\" status of this node.","examples":[],"isConstructor":false,"name":"SetSelected","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"showFiles","type":"boolean"}],"description":"{{Internal}}\n\nSets whether or not nodes for files should be added when populating the node from filesystem.","examples":[],"isConstructor":false,"name":"SetShowFiles","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nCurrently does nothing, not implemented.","examples":[],"isConstructor":false,"name":"SetupCopy","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The wildcard to set","isOptional":false,"isVarArg":false,"name":"wildcard","type":"string"}],"description":"{{Internal}}\n\nSets the search wildcard.\n\nUse {{ClassFunction|DTree_Node|MakeFolder}} instead","examples":[],"isConstructor":false,"name":"SetWildCard","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the {{Type|DTree}} this node is in has icons enabled.\n\nSee {{ClassFunction|DTree|ShowIcons}} for more info.","examples":[],"isConstructor":false,"name":"ShowIcons","realm":"client","returns":[{"description":"Whether the icons are shown or not","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The text value to set.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.\n\n{{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}\n[[Category:Label]]\n[[Category:DLabel]]\n[[Category:TextEntry]]\n[[Category:RichText]]\n[[Category:DTree_Node]]","examples":[{"code":"-- Window frame for the RichText\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"#VAC_ConnectionRefusedTitle\") -- Results in \"Connection Refused - VAC\"\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Set the text to the message you get when VAC banned\nrichtext:SetText(\"#VAC_ConnectionRefusedDetail\")","description":"Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message."}],"isConstructor":false,"name":"SetText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"Whether the object should be selected or deselected. {{ClassFunction|Panel|IsSelected}} can be used to determine the selected state of the object.","isOptional":true,"isVarArg":false,"name":"selected","type":"boolean"}],"description":"Sets the selected state of a selectable panel object. This functionality is set with {{ClassFunction|Panel|SetSelectable}} and checked with {{ClassFunction|Panel|IsSelectable}}.","examples":[],"isConstructor":false,"name":"SetSelected","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text value to set.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.\n\n{{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}\n[[Category:Label]]\n[[Category:DLabel]]\n[[Category:TextEntry]]\n[[Category:RichText]]\n[[Category:DTree_Node]]","examples":[{"code":"-- Window frame for the RichText\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"#VAC_ConnectionRefusedTitle\") -- Results in \"Connection Refused - VAC\"\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Set the text to the message you get when VAC banned\nrichtext:SetText(\"#VAC_ConnectionRefusedDetail\")","description":"Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message."}],"isConstructor":false,"name":"SetText","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"DTree_Node"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"This is a list of all methods only available for NPCs. It is also possible to call [http://wiki.garrysmod.com/index.php?title=Category:Entity Entity] functions on NPCs.","examples":[],"extends":"Entity","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The entity for the relationship to be applied to.","isOptional":false,"isVarArg":false,"name":"target","type":"Entity"},{"default":"","description":"A {{Enum|D}} representing the relationship type.","isOptional":false,"isVarArg":false,"name":"disposition","type":"D"},{"default":"","description":"How strong the relationship is.","isOptional":false,"isVarArg":false,"name":"priority","type":"number"}],"description":"Makes the NPC like, hate, feel neutral towards, or fear the entity in question. If you want to setup relationship towards a certain entity ''class'', use {{ClassFunction|NPC|AddRelationship}}.","examples":[{"code":"local hack = ents.Create( \"npc_manhack\" )\nhack:Spawn()\nhack:AddEntityRelationship( player.GetByID(1), D_FR, 99 )","description":"Spawns a manhack and makes it fear player 1."},{"code":"function ENT:Think()\nlocal enemy = ents.FindByClass(\"npc_*\") --Find any spawned entity in map with class beginning at npc\n    for _, x in pairs(enemy) do --for every found entity do\n       if !x:IsNPC() then return end -- if found entity is not NPC then do nothing \n       if x:GetClass() != self:GetClass() then -- if found entity is not self entity then continue\n        x:AddEntityRelationship( self, D_HT, 99 ) -- found entity will hate self entity\n        self:AddEntityRelationship( x, D_HT, 99 ) -- self entity will hate found entity          \n       end\n    end \nend","description":"Find wanted NPC class name and make them hate the entity."}],"isConstructor":false,"name":"AddEntityRelationship","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A string representing how the relationship should be set up.\nShould be formatted as \"npc_class {{Enum|D}} numberPriority\".","isOptional":false,"isVarArg":false,"name":"relationstring","type":"string"}],"description":"Changes how an NPC feels towards another NPC.  If you want to setup relationship towards a certain ''entity'', use {{ClassFunction|NPC|AddEntityRelationship}}.","examples":[{"code":"local hack = ents.Create( \"npc_manhack\" )\nhack:Spawn()\nhack:AddRelationship( \"npc_turret_floor D_HT 99\" )","description":"Spawns a manhack and makes it hate floor turrets."}],"isConstructor":false,"name":"AddRelationship","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Force an NPC to play his Alert sound.","examples":[],"isConstructor":false,"name":"AlertSound","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Capabilities to add, see {{Enum|CAP}}","isOptional":false,"isVarArg":false,"name":"capabilities","type":"CAP"}],"description":"Adds a capability to the NPC.","examples":[{"code":"self:CapabilitiesAdd(CAP_USE_SHOT_REGULATOR)","description":"Adds the CAP_USE_SHOT_REGULATOR to the NPC's capabilities."}],"isConstructor":false,"name":"CapabilitiesAdd","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Removes all of Capabilities the NPC has.","examples":[{"code":"self:CapabilitiesClear()","description":"Removes all of the Capabilities that the NPC has."}],"isConstructor":false,"name":"CapabilitiesClear","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the NPC's capabilities along the ones defined on its weapon.","examples":[],"isConstructor":false,"name":"CapabilitiesGet","realm":"server","returns":[{"description":"The capabilities as a bitflag.\nSee {{Enum|CAP}}","type":"CAP"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Capabilities to remove, see {{Enum|CAP}}","isOptional":false,"isVarArg":false,"name":"capabilities","type":"CAP"}],"description":"Remove a certain capability.","examples":[{"code":"self:CapabilitiesRemove(CAP_USE_SHOT_REGULATOR)","description":"Removes the CAP_USE_SHOT_REGULATOR capability, if the NPC has it."}],"isConstructor":false,"name":"CapabilitiesRemove","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the NPC class. Do not confuse with {{ClassFunction|Entity|GetClass}}!","examples":[],"isConstructor":false,"name":"Classify","realm":"server","returns":[{"description":"See {{Enum|CLASS}}","type":"CLASS"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Enum|COND}} to clear out.","isOptional":false,"isVarArg":false,"name":"condition","type":"COND"}],"description":"Clears out the specified {{Enum|COND}} on this NPC.","examples":[],"isConstructor":false,"name":"ClearCondition","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Clears the Enemy from the NPC's memory, effectively forgetting it until met again with either the NPC vision or with {{ClassFunction|NPC|UpdateEnemyMemory}}.","examples":[],"isConstructor":false,"name":"ClearEnemyMemory","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Clears the NPC's current expression which can be set with {{ClassFunction|NPC|SetExpression}}.","examples":[],"isConstructor":false,"name":"ClearExpression","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Clears the current NPC goal or target.","examples":[],"isConstructor":false,"name":"ClearGoal","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Stops the current schedule that the NPC is doing.","examples":[],"isConstructor":false,"name":"ClearSchedule","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The NPCs condition ID, see {{Enum|COND}}","isOptional":false,"isVarArg":false,"name":"cond","type":"COND"}],"description":"Translates condition ID to a string.","examples":[],"isConstructor":false,"name":"ConditionName","realm":"server","returns":[{"description":"A human understandable string equivalent of that condition.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to get the disposition from.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Returns the way the NPC \"feels\" about the entity.","examples":[{"code":"function FriendlyFireAnnouncement( ply, atk )\n   if atk:IsNPC() and atk:Disposition(ply) == D_LI then --like\n      PrintMessage(\"A \"..atk:GetClass()..\" attacked \"..ply:Nick()..\"!\", HUD_PRINTTALK)\n   end\nend\n\nhook.Add( \"PlayerHurt\", \"FriendlyFire\", FriendlyFireAnnouncement )","description":"If a player is hurt by a friendly NPC, announce it."}],"isConstructor":false,"name":"Disposition","realm":"server","returns":[{"description":"The NPCs disposition, see {{Enum|D}}.","type":"D"}]},{"accessModifier":"public","arguments":[],"description":"Makes an NPC exit a scripted sequence, if one is playing.","examples":[],"isConstructor":false,"name":"ExitScriptedSequence","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Force an NPC to play his Fear sound.","examples":[],"isConstructor":false,"name":"FearSound","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Force an NPC to play its FoundEnemy sound.","examples":[],"isConstructor":false,"name":"FoundEnemySound","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the weapon the NPC is currently carrying, or [http://wiki.garrysmod.com/page/Global_Variables NULL].","examples":[],"isConstructor":false,"name":"GetActiveWeapon","realm":"shared","returns":[{"description":"The NPCs current weapon","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns the NPC's current activity.","examples":[],"isConstructor":false,"name":"GetActivity","realm":"server","returns":[{"description":"Current activity, see {{Enum|ACT}}.","type":"ACT"}]},{"accessModifier":"public","arguments":[],"description":"Returns the aim vector of the NPC. NPC alternative of {{ClassFunction|Player|GetAimVector}}.","examples":[],"isConstructor":false,"name":"GetAimVector","realm":"server","returns":[{"description":"The aim direction of the NPC.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the activity to be played when the NPC arrives at its goal","examples":[],"isConstructor":false,"name":"GetArrivalActivity","realm":"server","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetArrivalSequence","realm":"server","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity blocking the NPC along its path.","examples":[],"isConstructor":false,"name":"GetBlockingEntity","realm":"server","returns":[{"description":"Blocking entity","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns the NPC's current schedule.","examples":[],"isConstructor":false,"name":"GetCurrentSchedule","realm":"server","returns":[{"description":"The NPCs schedule, see {{Enum|SCHED}} or -1 if we failed for some reason","type":"SCHED"}]},{"accessModifier":"public","arguments":[],"description":"Returns how proficient (skilled) an NPC is with its current weapon.","examples":[],"isConstructor":false,"name":"GetCurrentWeaponProficiency","realm":"server","returns":[{"description":"NPC's proficiency for current weapon. See {{Enum|WEAPON_PROFICIENCY}}.","type":"WEAPON_PROFICIENCY"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity that this NPC is trying to fight.\n\n{{Bug|Issue=3132|This returns nil if the NPC has no enemy. You should use {{GlobalFunction|IsValid}} (which accounts for nil and NULL) on the return to verify validity of the enemy.}}","examples":[{"code":"local function Think( )\n\tfor k, v in pairs( ents.GetAll( ) ) do\n\t\tif v:IsNPC( ) and v:GetEnemy( ) == Entity( 1 ) then\n\t\t\tv:TakeDamage( 999 )\n\t\tend\n\tend\nend\n\nhook.Add( \"Think\", \"Kill My Enemies\", Think )","description":"Kill any npc that sets the first player as its enemy."}],"isConstructor":false,"name":"GetEnemy","realm":"server","returns":[{"description":"Enemy NPC.","type":"NPC"}]},{"accessModifier":"public","arguments":[],"description":"Returns the expression file the NPC is currently playing.","examples":[],"isConstructor":false,"name":"GetExpression","realm":"server","returns":[{"description":"The file path of the expression.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns NPCs hull type set by {{ClassFunction|NPC|SetHullType}}.","examples":[],"isConstructor":false,"name":"GetHullType","realm":"server","returns":[{"description":"Hull type, see {{Enum|HULL}}","type":"HULL"}]},{"accessModifier":"public","arguments":[],"description":"Returns the NPC's current movement activity.","examples":[],"isConstructor":false,"name":"GetMovementActivity","realm":"server","returns":[{"description":"Current NPC movement activity, see {{Enum|ACT}}.","type":"ACT"}]},{"accessModifier":"public","arguments":[],"description":"Returns the index of the sequence the NPC uses to move.","examples":[],"isConstructor":false,"name":"GetMovementSequence","realm":"server","returns":[{"description":"The movement sequence index","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the NPC's state.","examples":[{"code":"function ReportIdleNPCs()\n\n\tfor _, npc in pairs(ents.FindByClass(\"npc_*\")) do\n\t\n\t\tif(IsValid(npc) && npc:IsNPC() &&\n\t\t\tnpc:GetNPCState() == NPC_STATE_IDLE) then\n\t\t\n\t\t\tprint(\"Ent #\"..npc:EntIndex()..\": \"..npc:GetClass()..\" is idle.\")\n\t\t\t\n\t\tend\n\t\t\n\tend\n\nend","description":"Function which prints out a list of idle NPCs to the server console."}],"isConstructor":false,"name":"GetNPCState","realm":"server","returns":[{"description":"The NPC's current state, see {{Enum|NPC_STATE}}.","type":"NPC_STATE"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetPathDistanceToGoal","realm":"server","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetPathTimeToGoal","realm":"server","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the shooting position of the NPC.\n\n{{Note|This only works properly when called on an NPC that can hold weapons, otherwise it will return the same value as {{ClassFunction|Entity|GetPos}}.}}","examples":[],"isConstructor":false,"name":"GetShootPos","realm":"server","returns":[{"description":"The NPC's shooting position.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the NPC's current target set by {{ClassFunction|NPC|SetTarget}}.\n\n{{Bug|Issue=3132|This returns nil if the NPC has no target. You should use {{GlobalFunction|IsValid}} (which accounts for nil and NULL) on the return to verify validity of the target.}}","examples":[],"isConstructor":false,"name":"GetTarget","realm":"server","returns":[{"description":"Target entity","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Class name of the weapon to equip to the NPC.","isOptional":false,"isVarArg":false,"name":"weapon","type":"string"}],"description":"Used to give a weapon to an already spawned NPC.","examples":[],"isConstructor":false,"name":"Give","realm":"server","returns":[{"description":"The weapon entity given to the NPC.","type":"Weapon"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The condition index, see {{Enum|COND}}.","isOptional":false,"isVarArg":false,"name":"condition","type":"COND"}],"description":"Returns whether or not the NPC has the given condition.","examples":[{"code":"function ListConditions(npc)\n\t\n\tif(!IsValid(npc)) then return end\n\t\n\tprint(npc:GetClass()..\" (\"..npc:EntIndex()..\") has conditions:\")\n\t\n\tfor c = 0, 100 do\n\t\n\t\tif(npc:HasCondition(c)) then\n\t\t\n\t\t\tprint(npc:ConditionName(c))\n\t\t\t\n\t\tend\n\t\t\n\tend\n\t\nend","description":"Function that prints a list of conditions an NPC has."}],"isConstructor":false,"name":"HasCondition","realm":"server","returns":[{"description":"True if the NPC has the given condition, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Force an NPC to play his Idle sound.","examples":[],"isConstructor":false,"name":"IdleSound","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The schedule number, see {{Enum|SCHED}}.","isOptional":false,"isVarArg":false,"name":"schedule","type":"SCHED"}],"description":"Returns whether or not the NPC is performing the given schedule.","examples":[{"code":"function GetNPCSchedule(npc)\n\n\tif(!IsValid(npc)) then return end\n\t\n\tfor s = 0, LAST_SHARED_SCHEDULE-1 do\n\t\tif(npc:IsCurrentSchedule(s)) then return s end\n\tend\n\t\n\treturn 0\n\t\nend","description":"Function which returns the schedule an NPC is performing."}],"isConstructor":false,"name":"IsCurrentSchedule","realm":"server","returns":[{"description":"True if the NPC is performing the given schedule, false otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the NPC is moving or not.","examples":[],"isConstructor":false,"name":"IsMoving","realm":"server","returns":[{"description":"Whether the NPC is moving or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"IsRunningBehavior","realm":"server","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to test.","isOptional":false,"isVarArg":false,"name":"testEntity","type":"Entity"}],"description":"Returns whether the entity given can be reached by this NPC.","examples":[],"isConstructor":false,"name":"IsUnreachable","realm":"server","returns":[{"description":"If the entity is reachable or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Force an NPC to play his LostEnemy sound.","examples":[],"isConstructor":false,"name":"LostEnemySound","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"MaintainActivity","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Causes the NPC to temporarily forget the current enemy and switch on to a better one.","examples":[],"isConstructor":false,"name":"MarkEnemyAsEluded","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"MoveOrder","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to set as the goal","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Sets the goal position for the NPC.","examples":[],"isConstructor":false,"name":"NavSetGoal","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The targeted entity to set the goal to.","isOptional":false,"isVarArg":false,"name":"target","type":"Entity"},{"default":"","description":"The offset to apply to the targeted entity's position.","isOptional":false,"isVarArg":false,"name":"offset","type":"Vector"}],"description":"Set the goal target for an NPC.","examples":[],"isConstructor":false,"name":"NavSetGoalTarget","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Minimum length of path in units","isOptional":false,"isVarArg":false,"name":"minPathLength","type":"number"},{"default":"","description":"Unit vector pointing in the direction of the target random node","isOptional":false,"isVarArg":false,"name":"dir","type":"Vector"}],"description":"Creates a random path of specified minimum length between a closest start node and random node in the specified direction.","examples":[],"isConstructor":false,"name":"NavSetRandomGoal","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"X offset","isOptional":false,"isVarArg":false,"name":"xoffset","type":"number"},{"default":"","description":"Y offset","isOptional":false,"isVarArg":false,"name":"yoffset","type":"number"}],"description":"Sets a goal in x, y offsets for the npc to wander to","examples":[{"code":"if npc:IsValid() then\n    npc:NavSetWanderGoal(100, 100)\n    npc:SetSchedule(SCHED_IDLE_WANDER)\nend","description":"Given an npc makes them wander to a location 100 units in both the x and y directions"}],"isConstructor":false,"name":"NavSetWanderGoal","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The sentence string to speak.","isOptional":false,"isVarArg":false,"name":"sentence","type":"string"},{"default":"","description":"Delay in seconds until the sentence starts playing.","isOptional":false,"isVarArg":false,"name":"delay","type":"number"},{"default":"","description":"The volume of the sentence, from 0 to 1.","isOptional":false,"isVarArg":false,"name":"volume","type":"number"}],"description":"Forces the NPC to play a sentence from scripts/sentences.txt","examples":[],"isConstructor":false,"name":"PlaySentence","realm":"server","returns":[{"description":"Returns the sentence index, -1 if the sentence couldn't be played.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nThis function crashes the game no matter how it is used and will be removed in a future update.\n\nUse {{ClassFunction|NPC|ClearEnemyMemory}} instead.","examples":[],"isConstructor":false,"name":"RemoveMemory","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The task ID, see [https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502 ai_task.h]","isOptional":false,"isVarArg":false,"name":"taskID","type":"number"},{"default":"","description":"The task data.","isOptional":false,"isVarArg":false,"name":"taskData","type":"number"}],"description":"","examples":[],"isConstructor":false,"name":"RunEngineTask","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"SentenceStop","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"act","type":"number"}],"description":"","examples":[],"isConstructor":false,"name":"SetArrivalActivity","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"SetArrivalDirection","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"SetArrivalDistance","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"SetArrivalSequence","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"SetArrivalSpeed","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The condition index, see {{Enum|COND}}.","isOptional":false,"isVarArg":false,"name":"condition","type":"COND"}],"description":"Sets an NPC condition.","examples":[{"code":"COND_NPC_UNFREEZE = 68\t-- Delete this line when COND_ enums are added\n\nfunction FreezeNPCTemporarily(npc, delay)\n\t\n\tif(!IsValid(npc)) then return end\n\t\n\tdelay = delay or 1\n\t\n\tnpc:SetSchedule(SCHED_NPC_FREEZE)\n\n\ttimer.Simple(delay, function()\n\t\tif(IsValid(npc)) then npc:SetCondition(COND_NPC_UNFREEZE) end\n\tend)\n\t\nend","description":"Freezes an NPC for a period of time."}],"isConstructor":false,"name":"SetCondition","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The proficiency for the NPC's current weapon. See {{Enum|WEAPON_PROFICIENCY}}.","isOptional":false,"isVarArg":false,"name":"proficiency","type":"WEAPON_PROFICIENCY"}],"description":"Sets the weapon proficiency of an NPC (how skilled an NPC is with its current weapon).","examples":[{"code":"for _, v in pairs( ents.FindByClass( \"npc_*\" ) ) do\n    v:SetCurrentWeaponProficiency( WEAPON_PROFICIENCY_POOR )\nend","description":"Makes all NPCs suck at using their current weapons."}],"isConstructor":false,"name":"SetCurrentWeaponProficiency","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The enemy that the NPC should target","isOptional":false,"isVarArg":false,"name":"enemy","type":"Entity"},{"default":"true","description":"Calls NPC:SetCondition(COND_NEW_ENEMY) if the new enemy is valid and not equal to the last enemy.","isOptional":true,"isVarArg":false,"name":"newenemy","type":"boolean"}],"description":"Sets the target for an NPC.","examples":[{"code":"for k, v in ipairs( ents.FindByClass(\"npc_*\") ) do\n\tif ( v:IsNPC() ) then\n\t\tif ( !IsValid( v:GetEnemy() ) ) then\n\t\t\tlocal nearest_ply\n\t\t\tlocal dist = 0\n\t\t\tfor i, j in ipairs( player.GetAll() ) do\n\t\t\t\tlocal dist2 = j:GetPos():Distance( v:GetPos() )\n\t\t\t\tif dist2 < dist then\n\t\t\t\t\tdist = dist2\n\t\t\t\t\tnearest_ply = j\n\t\t\t\tend\n\t\t\tend\n            v:SetEnemy(nearest_ply)\n\t\tend\n\tend\nend","description":"If any NPC has no specific target, it will go towards the nearest enemy. Place this in a think function in init.lua"}],"isConstructor":false,"name":"SetEnemy","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The expression filepath.","isOptional":false,"isVarArg":false,"name":"expression","type":"string"}],"description":"Sets the NPC's .vcd expression. Similar to {{ClassFunction|Entity|PlayScene}} except the scene is looped until it's interrupted by default NPC behavior or {{ClassFunction|NPC|ClearExpression}}.","examples":[{"code":"function GrenadesScene(ply)\n\n\tif(!IsValid(ply)) then return end\n\t\n\tlocal npc = ply:GetEyeTrace().Entity\n\t\n\tif(IsValid(npc) && npc:IsNPC()) then\n\t\tnpc:SetExpression(\"scenes/streetwar/sniper/ba_nag_grenade0\"..math.random(1, 5)..\".vcd\")\n\tend\n\t\nend","description":"Function which makes the NPC whom the player is looking at repeat an annoying scene."}],"isConstructor":false,"name":"SetExpression","realm":"server","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Updates the NPC's hull and physics hull in order to match its model scale. {{ClassFunction|Entity|SetModelScale}} seems to take care of this regardless.","examples":[],"isConstructor":false,"name":"SetHullSizeNormal","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Hull type. See {{Enum|HULL}}","isOptional":false,"isVarArg":false,"name":"hullType","type":"HULL"}],"description":"Sets the hull type for the NPC.","examples":[],"isConstructor":false,"name":"SetHullType","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Where the NPC's last position will be set.","isOptional":false,"isVarArg":false,"name":"Position","type":"Vector"}],"description":"Sets the last registered or memorized position for an npc. When using scheduling, the NPC will focus on navigating to the last position via nodes.\n\n{{Note|The navigation requires ground nodes to function properly, otherwise the NPC could only navigate in a small area. (https://developer.valvesoftware.com/wiki/Info_node)}}","examples":[{"code":"function NPCGoGoRun(npc, ply)\n\tnpc:SetLastPosition( ply:GetPos() )\n\tnpc:SetSchedule( SCHED_FORCED_GO_RUN )\nend","description":"Make an NPC chase a player"}],"isConstructor":false,"name":"SetLastPosition","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"SetMaxRouteRebuildTime","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The movement activity, see {{Enum|ACT}}.","isOptional":false,"isVarArg":false,"name":"activity","type":"ACT"}],"description":"Sets the activity the NPC uses when it moves.","examples":[{"code":"function GM:Think()\n\t\n\tfor _, npc in pairs(ents.FindByClass(\"npc_*\")) do\n\n\t\tif(IsValid(npc) && npc:IsNPC() && npc:GetMovementActivity() != ACT_WALK) then\n\t\t\tnpc:SetMovementActivity(ACT_WALK)\n\t\tend\n\n\tend\n\t\nend","description":"Makes all NPCs walk instead of run."}],"isConstructor":false,"name":"SetMovementActivity","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The movement sequence index","isOptional":false,"isVarArg":false,"name":"sequenceId","type":"number"}],"description":"Sets the sequence the NPC navigation path uses for speed calculation. Doesn't seem to have any visible effect on NPC movement.","examples":[],"isConstructor":false,"name":"SetMovementSequence","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New NPC state, see {{Enum|NPC_STATE}}","isOptional":false,"isVarArg":false,"name":"state","type":"NPC_STATE"}],"description":"Sets the state the NPC is in to help it decide on a ideal schedule.","examples":[],"isConstructor":false,"name":"SetNPCState","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The NPC schedule, see {{Enum|SCHED}}.","isOptional":false,"isVarArg":false,"name":"schedule","type":"SCHED"}],"description":"Sets the NPC's current schedule.","examples":[{"code":"function NPCMoveTo(npc, ent)\n\n\tif(!IsValid(npc) or !IsValid(ent)) then return end\n\t\t\n\tnpc:SetSaveValue(\"m_vecLastPosition\", ent:GetPos())\n\tnpc:SetSchedule(SCHED_FORCED_GO)\n\t\nend","description":"Function which forces an NPC to walk to an entity."}],"isConstructor":false,"name":"SetSchedule","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The target of the NPC.","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"}],"description":"Sets the NPC's target. This is used in some engine schedules.","examples":[{"code":"npc:SetTarget( Entity( 1 ) )","description":"Sets the NPC's target to first player."}],"isConstructor":false,"name":"SetTarget","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The id of the task to start, see [https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502 ai_task.h]","isOptional":false,"isVarArg":false,"name":"task","type":"number"},{"default":"","description":"The task data as a float, not all tasks make use of it.","isOptional":false,"isVarArg":false,"name":"taskData","type":"number"}],"description":"Forces the NPC to start an engine task, this has different results for every NPC.","examples":[],"isConstructor":false,"name":"StartEngineTask","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resets the NPC's movement animation and velocity. Does not actually stop the NPC from moving.","examples":[],"isConstructor":false,"name":"StopMoving","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"TargetOrder","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"TaskComplete","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A string most likely defined as a Source Task, for more information on Tasks go to https://developer.valvesoftware.com/wiki/Task","isOptional":false,"isVarArg":false,"name":"task","type":"string"}],"description":"","examples":[],"isConstructor":false,"name":"TaskFail","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The enemy to update.","isOptional":false,"isVarArg":false,"name":"enemy","type":"Entity"},{"default":"","description":"The last known position of the enemy.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Force the NPC to update information on the supplied enemy, as if it had line of sight to it.","examples":[],"isConstructor":false,"name":"UpdateEnemyMemory","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"UseActBusyBehavior","realm":"server","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"UseAssaultBehavior","realm":"server","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"UseFollowBehavior","realm":"server","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"UseFuncTankBehavior","realm":"server","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"UseLeadBehavior","realm":"server","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"UseNoBehavior","realm":"server","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"NPC"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}\n\nUsed by {{Type|DTree_Node}}.","examples":[],"extends":"DButton","functions":[],"isHook":false,"isPureAbstract":true,"name":"DTree_Node_Button"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Vertical version of {{Type|DHorizontalDivider}}.","examples":[],"extends":"DPanel","functions":[],"isHook":false,"isPureAbstract":true,"name":"DVerticalDivider"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The saverestore library contains functions relating to the singleplayer save system built into the game.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The unique identifier for this hook.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string"},{"default":"","description":"The function to be called when an engine save is being loaded. It has one argument:<br/>\n{{FuncArg|IRestore|save|The restore object to be used to read data from save file that is being loaded}}<br/>\n<br/>\nYou can also use those functions to read data:<br/>\n{{LibraryFunction|saverestore|ReadVar}}<br/>\n{{LibraryFunction|saverestore|ReadTable}}<br/>\n{{LibraryFunction|saverestore|LoadEntity}}<br/>\n<br/>","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Adds a restore/load hook for the Half-Life 2 save system.","examples":[{"code":"saverestore.AddRestoreHook( \"HookNameHere\", function( save )\n\tPrintTable( saverestore.ReadTable( save ) )\nend )","description":"Example usage."}],"isConstructor":false,"name":"AddRestoreHook","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique identifier for this hook.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string"},{"default":"","description":"The function to be called when an engine save is being saved. It has one argument:<br/>\n{{FuncArg|ISave|save|The save object to be used to write data to the save file that is being saved}}<br/>\n<br/>\nYou can also use those functions to save data:<br/>\n{{LibraryFunction|saverestore|WriteVar}}<br/>\n{{LibraryFunction|saverestore|WriteTable}}<br/>\n{{LibraryFunction|saverestore|SaveEntity}}<br/>\n<br/>","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Adds a save hook for the Half-Life 2 save system. You can this to carry data through level transitions in Half-Life 2.","examples":[{"code":"saverestore.AddSaveHook( \"HookNameHere\", function( save )\n\tsaverestore.WriteTable( { \"test\" }, save )\nend )","description":"Example usage."}],"isConstructor":false,"name":"AddSaveHook","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity which will receive the loaded values from the save.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The restore object to read the {{ClassFunction|Entity|GetTable}} from.","isOptional":false,"isVarArg":false,"name":"save","type":"IRestore"}],"description":"Loads {{ClassFunction|Entity|GetTable}} from the save game file that is being loaded and merges it with the given entitys {{ClassFunction|Entity|GetTable}}.","examples":[],"isConstructor":false,"name":"LoadEntity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The restore object to read data from the save file with.","isOptional":false,"isVarArg":false,"name":"save","type":"IRestore"}],"description":"{{Internal}}\n\nCalled by engine when a save is being loaded.\n\nThis handles loading gamemode and calls all of the hooks added with {{LibraryFunction|saverestore|AddRestoreHook}}.","examples":[],"isConstructor":false,"name":"LoadGlobal","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nCalled by the engine just before {{LibraryFunction|saverestore|LoadGlobal}} is.","examples":[],"isConstructor":false,"name":"PreRestore","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nCalled by the engine just before {{LibraryFunction|saverestore|SaveGlobal}} is.","examples":[],"isConstructor":false,"name":"PreSave","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The restore object to read the table from.","isOptional":false,"isVarArg":false,"name":"save","type":"IRestore"}],"description":"Reads a table from the save game file that is being loaded.","examples":[],"isConstructor":false,"name":"ReadTable","realm":"shared","returns":[{"description":"The table that has been read, if any","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The restore object to read variables from.","isOptional":false,"isVarArg":false,"name":"save","type":"IRestore"}],"description":"Loads a variable from the save game file that is being loaded.\n\nVariables will be read in the save order you have saved them.","examples":[],"isConstructor":false,"name":"ReadVar","realm":"shared","returns":[{"description":"The variable that was read, if any.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to save {{ClassFunction|Entity|GetTable}} of.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The save object to save {{ClassFunction|Entity|GetTable}} to.","isOptional":false,"isVarArg":false,"name":"save","type":"ISave"}],"description":"Saves entitys {{ClassFunction|Entity|GetTable}} to the save game file that is being saved.","examples":[],"isConstructor":false,"name":"SaveEntity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The save object to write data into the save file.","isOptional":false,"isVarArg":false,"name":"save","type":"ISave"}],"description":"{{Internal}}\n\nCalled by engine when a save is being saved.\n\nThis handles saving gamemode and calls all of the hooks added with {{LibraryFunction|saverestore|AddSaveHook}}.","examples":[],"isConstructor":false,"name":"SaveGlobal","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to test.","isOptional":false,"isVarArg":false,"name":"table","type":"table"}],"description":"Returns how many writable keys are in the given table.","examples":[],"isConstructor":false,"name":"WritableKeysInTable","realm":"shared","returns":[{"description":"The number of keys that can be written with {{LibraryFunction|saverestore|WriteTable}}.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to write","isOptional":false,"isVarArg":false,"name":"table","type":"table"},{"default":"","description":"The save object to write the table to.","isOptional":false,"isVarArg":false,"name":"save","type":"ISave"}],"description":"Write a table to a save game file that is being saved.","examples":[],"isConstructor":false,"name":"WriteTable","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to save.<br/>It can be one of the following types: {{Type|number}}, {{Type|boolean}}, {{Type|string}}, {{Type|Entity}}, {{Type|Angle}}, {{Type|Vector}} or {{Type|table}}.","isOptional":false,"isVarArg":false,"name":"value","type":"number | boolean | string | Entity | Angle | Vector | table"},{"default":"","description":"The save object to write the variable to.","isOptional":false,"isVarArg":false,"name":"save","type":"ISave"}],"description":"Writes a variable to the save game file that is being saved.","examples":[],"isConstructor":false,"name":"WriteVar","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"saverestore"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal|Use {{Type|DScrollPanel}}.}}A scrollbar used in {{Type|DScrollPanel}}.\n\nThe scrollbar notably contains '''DVScrollBar.btnUp, DVScrollBar.btnDown, and DVScrollBar.btnGrip''' which are the up button, down button, and grip respectively. Editing the paint functions of these allows custom scrollbar styling. See {{ClassFunction|DScrollPanel|GetVBar}} for an example.","examples":[],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"How much to scroll downwards. Can be negative for upwards scroll","isOptional":false,"isVarArg":false,"name":"add","type":"number"}],"description":"Adds specified amount of scroll in pixels.","examples":[],"isConstructor":false,"name":"AddScroll","realm":"client","returns":[{"description":"True if the scroll level was changed (i.e. if we did or did not scroll)","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The scroll level to animate to. In pixels from the top ( from 0 )","isOptional":false,"isVarArg":false,"name":"scroll","type":"number"},{"default":"","description":"Length of the animation in seconds","isOptional":false,"isVarArg":false,"name":"length","type":"number"},{"default":"0","description":"Delay of the animation in seconds","isOptional":true,"isVarArg":false,"name":"delay","type":"number"},{"default":"-1","description":"See {{ClassFunction|Panel|NewAnimation}} for explanation.","isOptional":true,"isVarArg":false,"name":"ease","type":"number"}],"description":"Smoothly scrolls to given level.","examples":[],"isConstructor":false,"name":"AnimateTo","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"BarScale","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the manual up/down scroll buttons are visible or not. Set by {{ClassFunction|DVScrollBar|SetHideButtons}}.","examples":[],"isConstructor":false,"name":"GetHideButtons","realm":"client","returns":[{"description":"Whether or not the manual up/down scroll buttons are visible or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the negative of {{ClassFunction|DVScrollBar|GetScroll}}.","examples":[],"isConstructor":false,"name":"GetOffset","realm":"client","returns":[{"description":"","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of scroll level from the top in pixels","examples":[],"isConstructor":false,"name":"GetScroll","realm":"client","returns":[{"description":"The amount of scroll level from the top","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nCalled from within {{Type|DScrollBarGrip}}","examples":[],"isConstructor":false,"name":"Grip","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to hide","isOptional":false,"isVarArg":false,"name":"hide","type":"boolean"}],"description":"Allows hiding the up and down buttons for better visual stylisation.","examples":[],"isConstructor":false,"name":"SetHideButtons","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"scroll","type":"number"}],"description":"Sets the scroll level in pixels.","examples":[],"isConstructor":false,"name":"SetScroll","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The size of the panel that holds the canvas, basically size of \"1 page\".","isOptional":false,"isVarArg":false,"name":"barSize","type":"number"},{"default":"","description":"The total size of the canvas, this typically is the bigger number.","isOptional":false,"isVarArg":false,"name":"cavasSize","type":"number"}],"description":"Sets up the scrollbar for use.\n\nThe scrollbar will automatically disable itself if the total height of the canvas is lower than the height of the panel that holds the canvas during this function call.","examples":[],"isConstructor":false,"name":"SetUp","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}}\n\nShould return nil in all cases. See {{ClassFunction|DVScrollBar|GetScroll}}.","examples":[],"isConstructor":false,"name":"Value","realm":"client","returns":[{"description":"","type":"any"}]}],"isHook":false,"isPureAbstract":true,"name":"DVScrollBar"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The scripted_ents library allows you to access information about any scripted entities loaded into the game, as well as register your own entities.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"A new string which can be used to refer to another classname","isOptional":false,"isVarArg":false,"name":"alias","type":"string"},{"default":"","description":"The classname the alias should refer to","isOptional":false,"isVarArg":false,"name":"classname","type":"string"}],"description":"Defines an alias string that can be used to refer to another classname","examples":[],"isConstructor":false,"name":"Alias","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The classname of the ENT table to return, can be an alias","isOptional":false,"isVarArg":false,"name":"classname","type":"string"}],"description":"Returns a copy of the ENT table for a class, including functions defined by the base class","examples":[{"code":"PrintTable(scripted_ents.Get(\"base_entity\"))","description":"Use of PrintTable function to print the contents of base_entity SENT table."}],"isConstructor":false,"name":"Get","realm":"shared","returns":[{"description":"entTable","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns a copy of the list of all ENT tables registered","examples":[],"isConstructor":false,"name":"GetList","realm":"shared","returns":[{"description":"A table of {{Struct|ENT}}s","type":"ENT[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity's class name","isOptional":false,"isVarArg":false,"name":"classRef","type":"string"},{"default":"","description":"Name of member to retrieve","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Retrieves a member of entity's table.","examples":[],"isConstructor":false,"name":"GetMember","realm":"shared","returns":[{"description":"The member or nil if failed","type":"any"}]},{"accessModifier":"public","arguments":[],"description":"Returns a list of all ENT tables which contain either ENT.Spawnable or ENT.AdminSpawnable","examples":[],"isConstructor":false,"name":"GetSpawnable","realm":"shared","returns":[{"description":"A table of {{Struct|ENT}}s","type":"ENT[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The classname of the ENT table to return","isOptional":false,"isVarArg":false,"name":"classname","type":"string"}],"description":"Returns the actual ENT table for a class. Modifying functions/variables in this table will change newly spawned entities","examples":[{"code":"","description":""}],"isConstructor":false,"name":"GetStored","realm":"shared","returns":[{"description":"entTable","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The classname to check","isOptional":false,"isVarArg":false,"name":"classname","type":"string"}],"description":"Returns the 'type' of a class, this will one of the following: 'anim', 'ai', 'brush', 'point'.","examples":[],"isConstructor":false,"name":"GetType","realm":"shared","returns":[{"description":"type","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity's class name to be checked","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Base class name to be checked","isOptional":false,"isVarArg":false,"name":"base","type":"string"}],"description":"Checks if name is based on base","examples":[{"code":"print(scripted_ents.IsBasedOn(\"gmod_hands\", \"base_anim\"))","description":"See if gmod_hands is based on base_anim."}],"isConstructor":false,"name":"IsBasedOn","realm":"shared","returns":[{"description":"Returns true if class name is based on base, else false.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nCalled after all ENTS have been loaded and runs {{LibraryFunction|baseclass|Set}} on each one.\n\nYou can retrieve all the currently registered ENTS with {{LibraryFunction|scripted_ents|GetList}}.\n\n{{Note|This is not called after an ENT auto refresh, and thus the inherited baseclass functions retrieved with {{LibraryFunction|baseclass|Get}} will not be updated}}","examples":[],"isConstructor":false,"name":"OnLoaded","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The ENT table to register","isOptional":false,"isVarArg":false,"name":"ENT","type":"table"},{"default":"","description":"The classname to register","isOptional":false,"isVarArg":false,"name":"classname","type":"string"}],"description":"Registers an ENT table with a classname. Reregistering an existing classname will automatically update the functions of all existing entities of that class.\n\n{{Bug|Pull=1300|Sub-tables provided in the first argument will not carry over their metatable, and will receive a BaseClass key if the table was merged with the base's. Userdata references, which includes Vectors, Angles, Entities, etc. will not be copied.}}","examples":[{"code":"local ENT = scripted_ents.Get(\"gmod_button\")\nlocal oldUse = ENT.Use\nfunction ENT:Use( activator, caller, type, value )\n print( tostring( self.Entity )..\" just got pressed!\" )\n oldUse( self,activator, caller, type, value )\nend\nscripted_ents.Register(ENT,\"gmod_button\")","description":""}],"isConstructor":false,"name":"Register","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"scripted_ents"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The search library.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Provider function. It has one argument: {{FuncArg|string|searchQuery}}\nYou must return a list of tables structured like this:\n* {{FuncArg|string|text|Text to \"Copy to clipboard\"}}\n* {{FuncArg|function|func|Function to use/spawn the item}}\n* {{FuncArg|Panel|icon|A panel to add to spawnmenu}}\n* {{FuncArg|table|words|A table of words?}}","isOptional":false,"isVarArg":false,"name":"provider","type":"Function"},{"default":"nil","description":"If provided, ensures that only one provider exists with the given ID at a time.","isOptional":true,"isVarArg":false,"name":"id","type":"string"}],"description":"Adds a search result provider. For examples, see gamemodes/sandbox/gamemode/cl_search_models.lua","examples":[],"isConstructor":false,"name":"AddProvider","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Search query","isOptional":false,"isVarArg":false,"name":"query","type":"string"}],"description":"Retrieves search results.","examples":[],"isConstructor":false,"name":"GetResults","realm":"client","returns":[{"description":"A table of results ( Maximum 1024 items )","type":"table"}]}],"isHook":false,"isPureAbstract":false,"name":"search"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Base panel used by {{Type|DFrame}}, this panel is needed so that elements such as the TextEntry can obtain focus.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The path to load the controls from.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"{{Deprecated}}\n{{Internal}}\nSimilar to {{ClassFunction|Panel|LoadControlsFromString}} but loads controls from a file.\n\n[[Category:EditablePanel]]","examples":[],"isConstructor":false,"name":"LoadControlsFromFile","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The data to load controls from. Format unknown.","isOptional":false,"isVarArg":false,"name":"data","type":"string"}],"description":"{{Deprecated}}\n{{Internal}}\nLoads controls(positions, etc) from given data. This is what the default options menu uses.\n\n[[Category:EditablePanel]]","examples":[],"isConstructor":false,"name":"LoadControlsFromString","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"state","type":"boolean"}],"description":"{{Stub}}\n\nSets the panel that owns this FocusNavGroup to be the root in the focus traversal hierarchy.\n\n[[Category:EditablePanel]]","examples":[],"isConstructor":false,"name":"SetFocusTopLevel","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"EditablePanel"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}A panel used by Sandbox's Finger Poser tool.","examples":[],"extends":"ContextBase","functions":[],"isHook":false,"isPureAbstract":true,"name":"fingerposer"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"Menu state library to query the master server list.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"{{Internal}}Adds current server the player is on to their favorites.","examples":[],"isConstructor":false,"name":"AddCurrentServerToFavorites","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The IP address of the server, including the port.","isOptional":false,"isVarArg":false,"name":"ip","type":"string"},{"default":"","description":"The function to be called if and when the request finishes. Function has one argument, a table containing tables with player info. \n\nEach table with player info has next fields:<br/>\n{{FuncArg|number|time|The amount of time the player is playing on the server, in seconds}}<br/>\n{{FuncArg|string|name|The player name}}<br/>\n{{FuncArg|number|score|The players score}}<br/>\n<br/>","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Queries a server for its player list.","examples":[],"isConstructor":false,"name":"PlayerList","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The information about what kind of servers we want. See {{Struct|ServerQueryData}}.","isOptional":false,"isVarArg":false,"name":"data","type":"ServerQueryData"}],"description":"Queries the master server for server list.","examples":[],"isConstructor":false,"name":"Query","realm":"menu","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"serverlist"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal|Used by the {{Type|fingerposer}} panel.}}A panel used by Sandbox's Finger Poser tool.","examples":[],"extends":"Panel","functions":[],"isHook":false,"isPureAbstract":true,"name":"FingerVar"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A window that in which you can place just about every other component and even another frame.","examples":[{"code":"local frame = vgui.Create(\"Frame\")\nframe:SetSize( ScrW()*0.25, ScrH()*0.25 )\nframe:Center()\nframe:SetVisible( true )\nframe:MakePopup()","description":"Creates a simple frame that's centered."}],"extends":"Panel","functions":[],"isHook":false,"isPureAbstract":true,"name":"Frame"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Path object for a NextBot NPC. Returned by {{GlobalFunction|Path}}.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The bot to update along the path","isOptional":false,"isVarArg":false,"name":"bot","type":"NextBot"},{"default":"","description":"The entity we want to chase","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"If you created your path with type \"Chase\" this functions should be used in place of {{ClassFunction|PathFollower|Update}} to cause the bot to chase the specified entity.","examples":[],"isConstructor":false,"name":"Chase","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The nextbot we're generating for","isOptional":false,"isVarArg":false,"name":"from","type":"NextBot"},{"default":"","description":"To point","isOptional":false,"isVarArg":false,"name":"to","type":"Vector"},{"default":"nil","description":"A funtion that allows you to alter the path generation. See example below for the default function.","isOptional":true,"isVarArg":false,"name":"generator","type":"Function"}],"description":"Compute shortest path from bot to 'goal' via A* algorithm.","examples":[{"code":"path:Compute( self, pos, function( area, fromArea, ladder, elevator, length )\n\tif ( !IsValid( fromArea ) ) then\n\n\t\t// first area in path, no cost\n\t\treturn 0\n\t\n\telse\n\t\n\t\tif ( !self.loco:IsAreaTraversable( area ) ) then\n\t\t\t// our locomotor says we can't move here\n\t\t\treturn -1\n\t\tend\n\n\t\t// compute distance traveled along path so far\n\t\tlocal dist = 0\n\n\t\tif ( IsValid( ladder ) ) then\n\t\t\tdist = ladder:GetLength()\n\t\telseif ( length > 0 ) then\n\t\t\t// optimization to avoid recomputing length\n\t\t\tdist = length\n\t\telse\n\t\t\tdist = ( area:GetCenter() - fromArea:GetCenter() ):GetLength()\n\t\tend\n\n\t\tlocal cost = dist + fromArea:GetCostSoFar()\n\n\t\t// check height change\n\t\tlocal deltaZ = fromArea:ComputeAdjacentConnectionHeightChange( area )\n\t\tif ( deltaZ >= self.loco:GetStepHeight() ) then\n\t\t\tif ( deltaZ >= self.loco:GetMaxJumpHeight() ) then\n\t\t\t\t// too high to reach\n\t\t\t\treturn -1\n\t\t\tend\n\n\t\t\t// jumping is slower than flat ground\n\t\t\tlocal jumpPenalty = 5\n\t\t\tcost = cost + jumpPenalty * dist\n\t\telseif ( deltaZ < -self.loco:GetDeathDropHeight() ) then\n\t\t\t// too far to drop\n\t\t\treturn -1\n\t\tend\n\n\t\treturn cost\n\tend\nend )","description":"The default path generator. You '''do not have''' to provide the PathFollower.Compute any generator functions if you want to use the default generator."}],"isConstructor":false,"name":"Compute","realm":"server","returns":[{"description":"<br/>\n* If returns true, path was found to the goal position.\n* If returns false, path may either be invalid (use IsValid() to check), or valid but doesn't reach all the way to the goal.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Draws the path. This is meant for debugging - and uses debug overlay.","examples":[],"isConstructor":false,"name":"Draw","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the first segment of the path.","examples":[],"isConstructor":false,"name":"FirstSegment","realm":"server","returns":[{"description":"A table with {{Struct|PathSegment}}.","type":"PathSegment"}]},{"accessModifier":"public","arguments":[],"description":"Returns the age since the path was built","examples":[],"isConstructor":false,"name":"GetAge","realm":"server","returns":[{"description":"Path age","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns all of the segments of the given path.","examples":[],"isConstructor":false,"name":"GetAllSegments","realm":"server","returns":[{"description":"A table of tables with {{Struct|PathSegment}}.","type":"table[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The point we're querying for","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"The closest position along the path to a position","examples":[],"isConstructor":false,"name":"GetClosestPosition","realm":"server","returns":[{"description":"The closest position on the path","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current goal data. Can return nil if the current goal is invalid, for example immediately after {{ClassFunction|PathFollower|Update}}.","examples":[],"isConstructor":false,"name":"GetCurrentGoal","realm":"server","returns":[{"description":"A table with {{Struct|PathSegment}}.","type":"PathSegment"}]},{"accessModifier":"public","arguments":[],"description":"Returns the cursor data","examples":[],"isConstructor":false,"name":"GetCursorData","realm":"server","returns":[{"description":"A table with 3 keys:\n{{FuncArg|number|curvature}}<br/>\n{{FuncArg|Vector|forward}}<br/>\n{{FuncArg|Vector|pos}}<br/>\n<br/>","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current progress along the path","examples":[],"isConstructor":false,"name":"GetCursorPosition","realm":"server","returns":[{"description":"The current progress","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the path end position","examples":[],"isConstructor":false,"name":"GetEnd","realm":"server","returns":[{"description":"The end position","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"GetHindrance","realm":"server","returns":[{"description":"","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns the total length of the path","examples":[],"isConstructor":false,"name":"GetLength","realm":"server","returns":[{"description":"The length of the path","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The distance along the path to query","isOptional":false,"isVarArg":false,"name":"distance","type":"number"}],"description":"Returns the vector position of distance along path","examples":[{"code":"path:GetPositionOnPath( path:GetCursorPosition() )","description":"Gets the current position on the path as a {{Type|Vector}}."}],"isConstructor":false,"name":"GetPositionOnPath","realm":"server","returns":[{"description":"The position","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the path start position","examples":[],"isConstructor":false,"name":"GetStart","realm":"server","returns":[{"description":"The start position","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Invalidates the current path","examples":[],"isConstructor":false,"name":"Invalidate","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns true if the path is valid","examples":[],"isConstructor":false,"name":"IsValid","realm":"server","returns":[{"description":"Wether the path is valid or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the last segment of the path.","examples":[],"isConstructor":false,"name":"LastSegment","realm":"server","returns":[{"description":"A table with {{Struct|PathSegment}}.","type":"PathSegment"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The distance to move the cursor (in relative world units)","isOptional":false,"isVarArg":false,"name":"distance","type":"number"}],"description":"Moves the cursor by give distance.\n\nFor a function that sets the distance, see {{ClassFunction|PathFollower|MoveCursorTo}}.","examples":[],"isConstructor":false,"name":"MoveCursor","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The distance to move the cursor (in world units)","isOptional":false,"isVarArg":false,"name":"distance","type":"number"}],"description":"Sets the cursor position to given distance.\n\nFor relative distance, see {{ClassFunction|PathFollower|MoveCursor}}.","examples":[],"isConstructor":false,"name":"MoveCursorTo","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"0","description":"Seek type<br/>\n0 = SEEK_ENTIRE_PATH - Search the entire path length<br/>\n1 = SEEK_AHEAD - Search from current cursor position forward toward end of path<br/>\n2 = SEEK_BEHIND - Search from current cursor position backward toward path start<br/>\n<br/>","isOptional":true,"isVarArg":false,"name":"type","type":"number"},{"default":"0","description":"","isOptional":true,"isVarArg":false,"name":"alongLimit","type":"number"}],"description":"Moves the cursor of the path to the closest position compared to given vector.","examples":[],"isConstructor":false,"name":"MoveCursorToClosestPosition","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Moves the cursor to the end of the path","examples":[],"isConstructor":false,"name":"MoveCursorToEnd","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Moves the cursor to the end of the path","examples":[],"isConstructor":false,"name":"MoveCursorToStart","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resets the age which is retrieved by {{ClassFunction|PathFollower|GetAge}} to 0.","examples":[],"isConstructor":false,"name":"ResetAge","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The distance we're setting it to","isOptional":false,"isVarArg":false,"name":"distance","type":"number"}],"description":"How close we can get to the goal to call it done","examples":[],"isConstructor":false,"name":"SetGoalTolerance","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum look ahead distance","isOptional":false,"isVarArg":false,"name":"mindist","type":"number"}],"description":"Sets minimum range movement goal must be along path","examples":[],"isConstructor":false,"name":"SetMinLookAheadDistance","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The bot to update along the path","isOptional":false,"isVarArg":false,"name":"bot","type":"NextBot"}],"description":"Move the bot along the path.","examples":[],"isConstructor":false,"name":"Update","realm":"server","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"PathFollower"},{"classFields":[],"collectionType":"class","customConstructor":"CreatePhysCollideBox","description":"A PhysCollide holds collision data from VPhysics. These objects can be used to run (currently quite limited) collision tests, but do not represent actual physics objects.\n\nCreated by {{GlobalFunction|CreatePhysCollideBox}} or {{GlobalFunction|CreatePhysCollidesFromModel}}.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Min corner of the box. This is not automatically ordered with the maxs and must contain the smallest vector components. See {{GlobalFunction|OrderVectors}}.","isOptional":false,"isVarArg":false,"name":"mins","type":"Vector"},{"default":"","description":"Max corner of the box. This is not automatically ordered with the mins and must contain the largest vector components.","isOptional":false,"isVarArg":false,"name":"maxs","type":"Vector"}],"description":"Creates a new {{Type|PhysCollide}} from the given bounds.\n\n{{Bug|Issue=3568|This fails to create planes or points - no components of the mins or maxs can be the same.}}","examples":[{"code":"AddCSLuaFile()\n\nDEFINE_BASECLASS( \"base_anim\" )\n\nENT.PrintName = \"Cube\"\nENT.Spawnable = true\n\nENT.Mins = Vector( -16, -16, -16 )\nENT.Maxs = Vector(  16,  16,  16 )\n\nfunction ENT:Initialize()\n    self.PhysCollide = CreatePhysCollideBox( self.Mins, self.Maxs )\n    self:SetCollisionBounds( self.Mins, self.Maxs )\n\n    if SERVER then\n        self:PhysicsInitBox( self.Mins, self.Maxs )\n        self:SetSolid( SOLID_VPHYSICS )\n        self:PhysWake()\n    end\n\n    if CLIENT then\n        self:SetRenderBounds( self.Mins, self.Maxs )\n    end\n\n    self:EnableCustomCollisions( true )\n    self:DrawShadow( false )\nend\n\n-- Handles collisions against traces. This includes player movement.\nfunction ENT:TestCollision( startpos, delta, isbox, extents )\n    if not IsValid( self.PhysCollide ) then\n        return\n    end\n\n    -- TraceBox expects the trace to begin at the center of the box, but TestCollision is bad\n    local max = extents\n    local min = -extents\n    max.z = max.z - min.z\n    min.z = 0\n\n    local hit, norm, frac = self.PhysCollide:TraceBox( self:GetPos(), self:GetAngles(), startpos, startpos + delta, min, max )\n\n    if not hit then\n        return\n    end\n\n    return { \n        HitPos = hit,\n        Normal  = norm,\n        Fraction = frac,\n    }\nend\n\nfunction ENT:Draw()\n    render.DrawWireframeBox( self:GetPos(), self:GetAngles(), self.Mins, self.Maxs, Color( 255, 0, 0 ), true )\nend","description":"A box that interacts correctly with VPhysics objects and player movement."}],"isConstructor":true,"name":"constructor","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Destroys the {{Type|PhysCollide}} object.","examples":[],"isConstructor":false,"name":"Destroy","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Checks whether this {{Type|PhysCollide}} object is valid or not.\n\nYou should just use {{GlobalFunction|IsValid}} instead.","examples":[],"isConstructor":false,"name":"IsValid","realm":"shared","returns":[{"description":"Is valid or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The origin for the PhysCollide during the trace","isOptional":false,"isVarArg":false,"name":"origin","type":"Vector"},{"default":"","description":"The angles for the PhysCollide during the trace","isOptional":false,"isVarArg":false,"name":"angles","type":"Angle"},{"default":"","description":"The start position of the trace","isOptional":false,"isVarArg":false,"name":"rayStart","type":"Vector"},{"default":"","description":"The end position of the trace","isOptional":false,"isVarArg":false,"name":"rayEnd","type":"Vector"},{"default":"","description":"The mins of the trace's bounds","isOptional":false,"isVarArg":false,"name":"rayMins","type":"Vector"},{"default":"","description":"The maxs of the trace's bounds","isOptional":false,"isVarArg":false,"name":"rayMaxs","type":"Vector"}],"description":"Performs a trace against this PhysCollide with the given parameters. This can be used for both line traces and box traces.","examples":[],"isConstructor":false,"name":"TraceBox","realm":"shared","returns":[{"description":"Hit position of the trace. This is false if the trace did not hit.","type":"Vector"},{"description":"Hit normal of the trace","type":"Vector"},{"description":"Fraction of the trace. This is calculated from the distance between startPos, hitPos, and endPos.","type":"number"}]}],"isHook":false,"isPureAbstract":false,"name":"PhysCollide"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"Used primarily for adding new soundscript entries.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The sounds properties. See {{Struct|SoundData}}","isOptional":false,"isVarArg":false,"name":"soundData","type":"SoundData"}],"description":"Creates a sound script. It can also override sounds, which seems to only work when set on the server.","examples":[{"code":"sound.Add( {\n\tname = \"enzo_engine_idle\",\n\tchannel = CHAN_STATIC,\n\tvolume = 1.0,\n\tlevel = 80,\n\tpitch = {95, 110},\n\tsound = \"vehicles/enzo/idle.wav\"\n} )","description":"Creates a sound script. It will automatically vary in pitch and be played in a given audio channel to better control which sounds mix with which sounds and how.\n\nIn this example, the file location could be: ( Choose one )\n* garrysmod/sound/vehicles/enzo/idle.wav\n* garrysmod/gamemodes/MyCoolGameMode/content/sound/vehicles/enzo/idle.wav\n* garrysmod/addons/myCoolAddon/sound/vehicles/enzo/idle.wav\n* garrysmod/addons/myCoolAddon/gamemodes/MyCoolGameMode/content/sound/vehicles/enzo/idle.wav"}],"isConstructor":false,"name":"Add","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Path to the script file to load.","isOptional":false,"isVarArg":false,"name":"filepath","type":"string"}],"description":"Overrides sounds defined inside of a txt file; typically used for adding map-specific sounds.","examples":[{"code":"sound.AddSoundOverrides(\"scripts/override_test.txt\")","description":"Adds and overrides all sounds defined in scripts/override_test.txt"}],"isConstructor":false,"name":"AddSoundOverrides","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"An unique identified for the sound. You cannot override already existing ones.","isOptional":false,"isVarArg":false,"name":"indentifier","type":"string"},{"default":"","description":"The sample rate of the sound. Must be 11025, 22050 or 44100.","isOptional":false,"isVarArg":false,"name":"samplerate","type":"number"},{"default":"","description":"The length in seconds of the sound to generate.","isOptional":false,"isVarArg":false,"name":"length","type":"number"},{"default":"","description":"A function which will be called to generate every sample on the sound. This function gets the current sample number passed as the first argument. The return value must be between -1.0 and 1.0. Other values will wrap back to the -1 to 1 range and basically clip. There are 65535 possible quantifiable values between -1 and 1.","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Creates a sound from a function.\n\n{{Bug|Issue=3360|This function cannot generate sounds that have a duration of less than 1 second.}}","examples":[{"code":"local frequency = 2000 -- Hz\nlocal samplerate = 44100\n\nlocal function data(t)\n    return math.sin( t * math.pi * 2 / samplerate * frequency )\nend\n\ntest_sound_id = test_sound_id and test_sound_id + 1 or 10\n\nsound.Generate   (\"testgen\" .. test_sound_id, samplerate, 2, data)\nsurface.PlaySound(\"testgen\" .. test_sound_id)","description":"Plays a 2000 Hz sine wave at maximum volume"}],"isConstructor":false,"name":"Generate","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the sound script","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Returns properties of the soundscript.","examples":[],"isConstructor":false,"name":"GetProperties","realm":"shared","returns":[{"description":"The properties of the soundscript. See {{Struct|SoundData}}","type":"SoundData"}]},{"accessModifier":"public","arguments":[],"description":"Returns a list of all registered sound scripts.","examples":[{"code":"file.Write(\"soundscripts.txt\",table.concat(sound.GetTable(),\"\\n\"))","description":"Writes all the sound scripts to a file in the data folder for easy searching."}],"isConstructor":false,"name":"GetTable","realm":"shared","returns":[{"description":"The list/array of all registered sound scripts ( No other information is provided )","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"A string path to the sound.","isOptional":false,"isVarArg":false,"name":"Name","type":"string"},{"default":"","description":"A vector describing where the sound should play.","isOptional":false,"isVarArg":false,"name":"Pos","type":"Vector"},{"default":"","description":"Sound level in decibels. 75 is normal. Ranges from 20 to 180, where 180 is super loud. This affects how far away the sound will be heard.","isOptional":false,"isVarArg":false,"name":"Level","type":"number"},{"default":"","description":"An integer describing the sound pitch. Range is from 0 to 255. 100 is normal pitch.","isOptional":false,"isVarArg":false,"name":"Pitch","type":"number"},{"default":"","description":"A float ranging from 0-1 describing the output volume of the sound.","isOptional":false,"isVarArg":false,"name":"Volume","type":"number"}],"description":"Plays a sound from the specified position in the world.\nIf you want to play a sound without a position, such as a UI sound, use {{LibraryFunction|surface|PlaySound}} instead.","examples":[{"code":"sound.Play( \"ambient/explosions/exp1.wav\", Vector(0, 0, 0) )","description":"Plays an explosion sound at the (0, 0, 0) map coordinates."}],"isConstructor":false,"name":"Play","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path to the file to play.\n\nUnlike other sound functions and structures, the path is relative to ''garrysmod/'' instead of ''garrysmod/sound/''","isOptional":false,"isVarArg":false,"name":"path","type":"string"},{"default":"","description":"Flags for the sound. Can be one or more of following, separated by a space (\" \"):\n* 3d - Makes the sound 3D, so you can set its position\n* mono - Forces the sound to have only one channel\n* noplay - Forces the sound not to play as soon as this function is called\n* noblock - Disables streaming in blocks. It is more resource-intensive, but it is required for {{ClassFunction|IGModAudioChannel|SetTime}}.<br/><br/>\nIf you don't want to use any of the above, you can just leave it as \"\".","isOptional":false,"isVarArg":false,"name":"flags","type":"string"},{"default":"","description":"Callback function that is called as soon as the the stream is loaded. It has next arguments:<br/>\n{{FuncArg|IGModAudioChannel|soundchannel|The sound channel. Will be nil if an error occured.}}<br/>\n{{FuncArg|number|errorID|ID of an error if an error has occured. Will be nil, otherwise.}}<br/>\n{{FuncArg|string|errorName|Name of an error if an error has occured. Will be nil, otherwise.}}<br/>\n<br/>","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Plays a file from GMod directory. You can find a list of all error codes [http://www.un4seen.com/doc/#bass/BASS_ErrorGetCode.html here]\n\nFor external file/stream playback, see {{LibraryFunction|sound|PlayURL}}.\n\n{{Bug|Issue=1752|This fails for looping .wav files in 3D mode.}}\n\n{{Bug|Issue=2304|This fails with unicode file names.}}","examples":[{"code":"sound.PlayFile( \"sound/music/vlvx_song22.mp3\", \"\", function( station )\n\tif ( IsValid( station ) ) then station:Play() end\nend )","description":"Plays the \"Vortal Combat\" soundtrack from Half-Life 2: Episode 2"}],"isConstructor":false,"name":"PlayFile","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The URL of the sound to play","isOptional":false,"isVarArg":false,"name":"url","type":"string"},{"default":"","description":"Flags for the sound. Can be one or more of following, separated by a space (\" \"):\n* 3d - Makes the sound 3D, so you can set its position\n* mono - Forces the sound to have only one channel\n* noplay - Forces the sound not to play as soon as this function is called\n* noblock - Disables streaming in blocks. It is more resource-intensive, but it is required for {{ClassFunction|IGModAudioChannel|SetTime}}.<br/><br/>\nIf you don't want to use any of the above, you can just leave it as \"\".","isOptional":false,"isVarArg":false,"name":"flags","type":"string"},{"default":"","description":"Callback function that is called as soon as the the stream is loaded. It has next arguments:<br/>\n{{FuncArg|IGModAudioChannel|soundchannel|The sound channel}}<br/>\n{{FuncArg|number|errorID|ID of an error, if an error has occured}}<br/>\n{{FuncArg|string|errorName|Name of an error, if an error has occured}}<br/>\n<br/>","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Allows you to play external sound files, as well as online radio streams.\nYou can find a list of all error codes [http://www.un4seen.com/doc/#bass/BASS_ErrorGetCode.html here]\n\nFor offline file playback, see {{LibraryFunction|sound|PlayFile}}.\n\n{{Bug|Issue=2296|Due to a bug with [http://www.un4seen.com/ BASS], AAC codec streams cannot be played in 3D mode.}}","examples":[{"code":"sound.PlayURL ( \"URL\", \"3d\", function( station )\n\tif ( IsValid( station ) ) then\n\n\t\tstation:SetPos( LocalPlayer():GetPos() )\n\t\n\t\tstation:Play()\n\n\telse\n\n\t\tLocalPlayer():ChatPrint( \"Invalid URL!\" )\n\n\tend\nend )","description":"Example usage of the function."}],"isConstructor":false,"name":"PlayURL","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"sound"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"The HTML control can be used to display HTML code just like an internet browser. Unlike {{Type|DHTML}}, this control cannot accept user input or complex interaction, such as retrieving image data.\n\n'''Blocked URL Extentions'''\n\n''This means your url cannot end in any of these extensions, e.g.: (http://yourdomain.com/garry.exe)''\n* .exe\n* .bat\n* .dll\n* .zip\n* .mp3\n* .swf","examples":[{"code":"HTMLTest = vgui.Create( \"HTML\" )\nHTMLTest:SetPos( 50, 50 )\nHTMLTest:SetSize( ScrW() - 100, ScrH() - 100 )\nHTMLTest:OpenURL( \"wiki.garrysmod.com\" )","description":"Creates an HTML control in the center of screen, and makes it display http://wiki.garrysmod.com/"}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[],"description":"Stops the loading of the HTML panel's current page.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"StopLoading","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the panel's HTML material. Only works with {{Type|Awesomium}}, {{Type|HTML}} and {{Type|DHTML}} panels that have been fully loaded.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[{"code":"AddCSLuaFile()\n\nENT.Type = \"anim\"\nENT.Base = \"base_entity\"\n\nENT.PrintName = \"Web Screen\"\nENT.Author = \"Microflash\"\nENT.Spawnable = true\n\nif ( CLIENT ) then\n\tENT.Mat = nil\n\tENT.Panel = nil\nend\n\nfunction ENT:Initialize()\n\n\tif ( SERVER ) then\n\t\t\n\t\tself:SetModel(\"models/props_phx/rt_screen.mdl\")\n\t\tself:SetMoveType(MOVETYPE_VPHYSICS)\n\t\tself:SetSolid(SOLID_VPHYSICS)\n\t\t\n\t\tself:PhysicsInit(SOLID_VPHYSICS)\n\t\t\n\t\tself:Freeze()\n\t\t\n\telse\n\t\n\t\t-- Reset material and panel and load DHTML panel\n\t\tself.Mat = nil\n\t\tself.Panel = nil\n\t\tself:OpenPage()\n\t\t\n\tend\n\t\nend\n\nfunction ENT:Freeze()\n\tlocal phys = self:GetPhysicsObject()\n\tif (IsValid(phys)) then phys:EnableMotion(false) end\nend\n\n-- Load the DHTML reference panel\nfunction ENT:OpenPage()\n\n\t-- Iff for some reason a panel is already loaded, delete it\n\tif(self.Panel) then\n\t\n\t\tself.Panel:Remove()\n\t\tself.Panel = nil\n\t\n\tend\n\n\t-- Create a web page panel and fill the entire screen\n\tself.Panel = vgui.Create(\"DHTML\")\n\tself.Panel:Dock(FILL)\n\t\n\t-- Wiki page URL\n\tlocal url = <nowiki>\"http://wiki.garrysmod.com/page/Category:Material\"</nowiki>\n\t\n\t-- Load the wiki page\n\tself.Panel:OpenURL(url)\n\t\n\t-- Hide the panel\n\tself.Panel:SetAlpha(0)\n\tself.Panel:SetMouseInputEnabled(false)\n\t\n\t-- Disable HTML messages\n\tfunction self.Panel:ConsoleMessage(msg) end\n\nend\n\nfunction ENT:Draw()\n\n\t-- Iff the material has already been grabbed from the panel\n\tif(self.Mat) then\n\t\t\n\t\t-- Apply it to the screen/model\n\t\tif(render.MaterialOverrideByIndex) then\n\t\t\trender.MaterialOverrideByIndex(1, self.Mat)\n\t\telse\n\t\t\trender.ModelMaterialOverride(self.Mat)\n\t\tend\n\t\t\n\t-- Otherwise, check that the panel is valid and the HTML material is finished loading\n\telseif(self.Panel && self.Panel:GetHTMLMaterial()) then\n\n\t\t-- Get the html material\n\t\tlocal html_mat = self.Panel:GetHTMLMaterial()\n\t\t\n\t\t-- Used to make the material fit the model screen\n\t\t-- May need to be changed iff using a different model\n\t\t-- For the multiplication number it goes in segments of 512\n\t\t-- Based off the players screen resolution\n\t\tlocal scale_x, scale_y = ScrW()/2048, ScrH()/1024\n\t\t\n\t\t-- Create a new material with the proper scaling and shader\n\t\tlocal matdata =\n\t\t{\n\t\t\t[\"$basetexture\"]=html_mat:GetName(),\n\t\t\t[\"$basetexturetransform\"]=\"center 0 0 scale \"..scale_x..\" \"..scale_y..\" rotate 0 translate 0 0\",\n\t\t\t[\"$model\"]=1\n\t\t}\n\t\t-- Unique ID used for material name\n\t\tlocal uid = string.Replace(html_mat:GetName(), \"__vgui_texture_\", \"\")\n\t\t\n\t\t-- Create the model material\n\t\tself.Mat = CreateMaterial(\"WebMaterial_\"..uid, \"VertexLitGeneric\", matdata)\n\t\n\tend\n\n\t-- Render the model\n\tself:DrawModel()\n\t\n\t-- Reset the material override or else everything will have a HTML material!\n\trender.ModelMaterialOverride(nil)\n\nend\n\nfunction ENT:OnRemove()\n\t-- Make sure the panel is removed too\n\tif(self.Panel) then self.Panel:Remove() end\nend","description":"Defines a new entity which can display a web page on a TV screen."}],"isConstructor":false,"name":"GetHTMLMaterial","realm":"client","returns":[{"description":"The HTML material used by the panel. Typically starts with \"__vgui_texture_\" followed by an incremental number.","type":"IMaterial"}]},{"accessModifier":"public","arguments":[],"description":"Goes back one page in the HTML panel's history if available.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"GoBack","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Goes forward one page in the HTML panel's history if available.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"GoForward","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The offset in the panel's back/forward history, relative to the current page, that you would like to skip to. Because this is relative, 0 = current page while negative goes back and positive goes forward. For example, -2 will go back 2 pages in the history.","isOptional":false,"isVarArg":false,"name":"offset","type":"number"}],"description":"Goes to the page in the HTML panel's history at the specified relative offset.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"GoToHistoryOffset","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"objectName","type":"string"}],"description":"{{Internal}}\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"NewObject","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"objectName","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"callbackName","type":"string"}],"description":"{{Internal}}\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"NewObjectCallback","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"URL to open","isOptional":false,"isVarArg":false,"name":"URL","type":"string"}],"description":"[[Category:HTML]][[Category:Awesomium]]Instructs a HTML control to download and parse a HTML script using the passed URL.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"HTML Example\" )\nframe:SetSize( ScrW() * 0.75, ScrH() * 0.75 )\nframe:Center()\nframe:MakePopup()\n\nlocal html = vgui.Create( \"HTML\", frame )\nhtml:Dock( FILL )\nhtml:OpenURL( \"wiki.garrysmod.com\" )","description":"Displays the Garry's Mod wiki page."},{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"HTML Example\" )\nframe:SetSize( ScrW() * 0.75, ScrH() * 0.75 )\nframe:Center()\nframe:MakePopup()\n\nlocal html = vgui.Create( \"HTML\", frame )\nhtml:Dock( FILL )\nhtml:OpenURL( \"asset://garrysmod/html/loading.html\" )","description":"Displays the default loading screen from the html folder."}],"isConstructor":false,"name":"OpenURL","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"If true, the refresh will ignore cached content similar to \"ctrl+f5\" in most browsers.","isOptional":true,"isVarArg":false,"name":"ignoreCache","type":"boolean"}],"description":"Refreshes the HTML panel's current page.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"Refresh","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The code to set.","isOptional":false,"isVarArg":false,"name":"HTML_code","type":"string"}],"description":"[[Category:HTML]][[Category:Awesomium]]Allows you to set HTML code within a panel.","examples":[{"code":"local HTML = vgui.Create( \"HTML\", DPanel )\nHTML:SetHTML( \"<p>Put HTML code here</p>\" )\nHTML:SetSize( 390, 400 )","description":""}],"isConstructor":false,"name":"SetHTML","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Forcibly updates the panels' HTML Material, similar to when Paint is called on it.<br />This is only useful if the panel is not normally visible, i.e the panel exists purely for its HTML Material.\n{{Note|Only works on with panels that have a HTML Material. See {{ClassFunction|Panel|GetHTMLMaterial}} for more details.}}\n{{Note|A good place to call this is in the {{HookFunction|GM|PreRender}} hook}}\n[[Category:HTML]][[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"UpdateHTMLTexture","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the panel's HTML material. Only works with {{Type|Awesomium}}, {{Type|HTML}} and {{Type|DHTML}} panels that have been fully loaded.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[{"code":"AddCSLuaFile()\n\nENT.Type = \"anim\"\nENT.Base = \"base_entity\"\n\nENT.PrintName = \"Web Screen\"\nENT.Author = \"Microflash\"\nENT.Spawnable = true\n\nif ( CLIENT ) then\n\tENT.Mat = nil\n\tENT.Panel = nil\nend\n\nfunction ENT:Initialize()\n\n\tif ( SERVER ) then\n\t\t\n\t\tself:SetModel(\"models/props_phx/rt_screen.mdl\")\n\t\tself:SetMoveType(MOVETYPE_VPHYSICS)\n\t\tself:SetSolid(SOLID_VPHYSICS)\n\t\t\n\t\tself:PhysicsInit(SOLID_VPHYSICS)\n\t\t\n\t\tself:Freeze()\n\t\t\n\telse\n\t\n\t\t-- Reset material and panel and load DHTML panel\n\t\tself.Mat = nil\n\t\tself.Panel = nil\n\t\tself:OpenPage()\n\t\t\n\tend\n\t\nend\n\nfunction ENT:Freeze()\n\tlocal phys = self:GetPhysicsObject()\n\tif (IsValid(phys)) then phys:EnableMotion(false) end\nend\n\n-- Load the DHTML reference panel\nfunction ENT:OpenPage()\n\n\t-- Iff for some reason a panel is already loaded, delete it\n\tif(self.Panel) then\n\t\n\t\tself.Panel:Remove()\n\t\tself.Panel = nil\n\t\n\tend\n\n\t-- Create a web page panel and fill the entire screen\n\tself.Panel = vgui.Create(\"DHTML\")\n\tself.Panel:Dock(FILL)\n\t\n\t-- Wiki page URL\n\tlocal url = <nowiki>\"http://wiki.garrysmod.com/page/Category:Material\"</nowiki>\n\t\n\t-- Load the wiki page\n\tself.Panel:OpenURL(url)\n\t\n\t-- Hide the panel\n\tself.Panel:SetAlpha(0)\n\tself.Panel:SetMouseInputEnabled(false)\n\t\n\t-- Disable HTML messages\n\tfunction self.Panel:ConsoleMessage(msg) end\n\nend\n\nfunction ENT:Draw()\n\n\t-- Iff the material has already been grabbed from the panel\n\tif(self.Mat) then\n\t\t\n\t\t-- Apply it to the screen/model\n\t\tif(render.MaterialOverrideByIndex) then\n\t\t\trender.MaterialOverrideByIndex(1, self.Mat)\n\t\telse\n\t\t\trender.ModelMaterialOverride(self.Mat)\n\t\tend\n\t\t\n\t-- Otherwise, check that the panel is valid and the HTML material is finished loading\n\telseif(self.Panel && self.Panel:GetHTMLMaterial()) then\n\n\t\t-- Get the html material\n\t\tlocal html_mat = self.Panel:GetHTMLMaterial()\n\t\t\n\t\t-- Used to make the material fit the model screen\n\t\t-- May need to be changed iff using a different model\n\t\t-- For the multiplication number it goes in segments of 512\n\t\t-- Based off the players screen resolution\n\t\tlocal scale_x, scale_y = ScrW()/2048, ScrH()/1024\n\t\t\n\t\t-- Create a new material with the proper scaling and shader\n\t\tlocal matdata =\n\t\t{\n\t\t\t[\"$basetexture\"]=html_mat:GetName(),\n\t\t\t[\"$basetexturetransform\"]=\"center 0 0 scale \"..scale_x..\" \"..scale_y..\" rotate 0 translate 0 0\",\n\t\t\t[\"$model\"]=1\n\t\t}\n\t\t-- Unique ID used for material name\n\t\tlocal uid = string.Replace(html_mat:GetName(), \"__vgui_texture_\", \"\")\n\t\t\n\t\t-- Create the model material\n\t\tself.Mat = CreateMaterial(\"WebMaterial_\"..uid, \"VertexLitGeneric\", matdata)\n\t\n\tend\n\n\t-- Render the model\n\tself:DrawModel()\n\t\n\t-- Reset the material override or else everything will have a HTML material!\n\trender.ModelMaterialOverride(nil)\n\nend\n\nfunction ENT:OnRemove()\n\t-- Make sure the panel is removed too\n\tif(self.Panel) then self.Panel:Remove() end\nend","description":"Defines a new entity which can display a web page on a TV screen."}],"isConstructor":false,"name":"GetHTMLMaterial","realm":"client","returns":[{"description":"The HTML material used by the panel. Typically starts with \"__vgui_texture_\" followed by an incremental number.","type":"IMaterial"}]},{"accessModifier":"public","arguments":[],"description":"Goes back one page in the HTML panel's history if available.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"GoBack","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Goes forward one page in the HTML panel's history if available.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"GoForward","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The offset in the panel's back/forward history, relative to the current page, that you would like to skip to. Because this is relative, 0 = current page while negative goes back and positive goes forward. For example, -2 will go back 2 pages in the history.","isOptional":false,"isVarArg":false,"name":"offset","type":"number"}],"description":"Goes to the page in the HTML panel's history at the specified relative offset.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"GoToHistoryOffset","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"objectName","type":"string"}],"description":"{{Internal}}\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"NewObject","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"objectName","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"callbackName","type":"string"}],"description":"{{Internal}}\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"NewObjectCallback","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"URL to open","isOptional":false,"isVarArg":false,"name":"URL","type":"string"}],"description":"[[Category:HTML]][[Category:Awesomium]]Instructs a HTML control to download and parse a HTML script using the passed URL.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"HTML Example\" )\nframe:SetSize( ScrW() * 0.75, ScrH() * 0.75 )\nframe:Center()\nframe:MakePopup()\n\nlocal html = vgui.Create( \"HTML\", frame )\nhtml:Dock( FILL )\nhtml:OpenURL( \"wiki.garrysmod.com\" )","description":"Displays the Garry's Mod wiki page."},{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"HTML Example\" )\nframe:SetSize( ScrW() * 0.75, ScrH() * 0.75 )\nframe:Center()\nframe:MakePopup()\n\nlocal html = vgui.Create( \"HTML\", frame )\nhtml:Dock( FILL )\nhtml:OpenURL( \"asset://garrysmod/html/loading.html\" )","description":"Displays the default loading screen from the html folder."}],"isConstructor":false,"name":"OpenURL","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"If true, the refresh will ignore cached content similar to \"ctrl+f5\" in most browsers.","isOptional":true,"isVarArg":false,"name":"ignoreCache","type":"boolean"}],"description":"Refreshes the HTML panel's current page.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"Refresh","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The code to set.","isOptional":false,"isVarArg":false,"name":"HTML_code","type":"string"}],"description":"[[Category:HTML]][[Category:Awesomium]]Allows you to set HTML code within a panel.","examples":[{"code":"local HTML = vgui.Create( \"HTML\", DPanel )\nHTML:SetHTML( \"<p>Put HTML code here</p>\" )\nHTML:SetSize( 390, 400 )","description":""}],"isConstructor":false,"name":"SetHTML","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Forcibly updates the panels' HTML Material, similar to when Paint is called on it.<br />This is only useful if the panel is not normally visible, i.e the panel exists purely for its HTML Material.\n{{Note|Only works on with panels that have a HTML Material. See {{ClassFunction|Panel|GetHTMLMaterial}} for more details.}}\n{{Note|A good place to call this is in the {{HookFunction|GM|PreRender}} hook}}\n[[Category:HTML]][[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"UpdateHTMLTexture","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"HTML"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"An icon editor that permits a user to modify a {{Type|SpawnIcon}} and re-render it. This is used by the spawn menu and is what is shown when you right-click an icon and select ''Edit Icon''.\n\nThis makes use of the {{Type|DAdjustableModelPanel}} element.\n\n{{Note|This panel is only available in Sandbox and Sandbox derived gamemodes!}}","examples":[{"code":"local frame = vgui.Create( \"DFrame\" ) -- Container for the SpawnIcon\nframe:SetPos( 200, 200 )\nframe:SetSize( 200, 200 )\nframe:SetTitle( \"Icon Editor Example\" )\nframe:MakePopup()\n\nlocal icon = vgui.Create( \"SpawnIcon\" , frame ) -- SpawnIcon, with blue barrel model\nicon:Center()\n-- It is important below to include the SkinID (0 = default skin); the IconEditor will not work otherwise\nicon:SetModel( \"models/props_borealis/bluebarrel001.mdl\", 0 )\n\nlocal editor = vgui.Create( \"IconEditor\" ) -- Create IconEditor\neditor:SetIcon( icon ) -- Set the SpawnIcon to modify\neditor:Refresh() -- Sets up the internal DAdjustableModelPanel and SpawnIcon\neditor:MakePopup()\neditor:Center()","description":"Creates an SpawnIcon with model <tt>\"models/props_borealis/bluebarrel001.mdl\"</tt> and IconEditor to modify it."}],"extends":"DFrame","functions":[{"accessModifier":"public","arguments":[],"description":"Applies the top-down view camera settings for the model in the {{Type|DAdjustableModelPanel}}.\n\nCalled when a user clicks the ''Above'' (third) button (See the [[:Category:IconEditor|example]]).","examples":[],"isConstructor":false,"name":"AboveLayout","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Applies the best camera settings for the model in the {{Type|DAdjustableModelPanel}}, using the values returned by {{GlobalFunction|PositionSpawnIcon}}.\n\nCalled when a user clicks the ''wand'' button (See the [[:Category:IconEditor|example]]) and when {{ClassFunction|IconEditor|Refresh}} is called.","examples":[],"isConstructor":false,"name":"BestGuessLayout","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity being rendered within the model panel.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"{{Internal}} Fills the {{Type|DListView}} on the left of the editor with the model entity's animation list. Called by {{ClassFunction|IconEditor|Refresh}}.","examples":[],"isConstructor":false,"name":"FillAnimations","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Applies the front view camera settings for the model in the {{Type|DAdjustableModelPanel}}.\n\nCalled when a user clicks the ''Front'' (second) button (See the [[:Category:IconEditor|example]]).","examples":[],"isConstructor":false,"name":"FullFrontalLayout","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Places the camera at the origin (0,0,0), relative to the entity, in the {{Type|DAdjustableModelPanel}}.\n\nCalled when a user clicks the ''Center'' (fifth) button (See the [[:Category:IconEditor|example]]).","examples":[],"isConstructor":false,"name":"OriginLayout","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Updates the internal {{Type|DAdjustableModelPanel}} and {{Type|SpawnIcon}}. \n\nThis should be called immediately after setting the SpawnIcon with {{ClassFunction|IconEditor|SetIcon}}.","examples":[],"isConstructor":false,"name":"Refresh","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Re-renders the {{Type|SpawnIcon}}.\n\nCalled when a user clicks the ''RENDER'' button, this retrieves the render data from the internal {{Type|DAdjustableModelPanel}} and passes it as a table to {{ClassFunction|Panel|RebuildSpawnIconEx}}.","examples":[],"isConstructor":false,"name":"RenderIcon","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Applies the right side view camera settings for the model in the {{Type|DAdjustableModelPanel}}.\n\nCalled when a user clicks the ''Right'' (fourth) button (See the [[:Category:IconEditor|example]]). (Note: The icon for this points left.)","examples":[],"isConstructor":false,"name":"RightLayout","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}} Sets up the default ambient and directional lighting for the {{Type|DAdjustableModelPanel}}. Called by {{ClassFunction|IconEditor|Refresh}}.","examples":[],"isConstructor":false,"name":"SetDefaultLighting","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to retrieve the model and skin from.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Sets the editor's model and icon from an entity. Alternative to {{ClassFunction|IconEditor|SetIcon}}, with uses a {{Type|SpawnIcon}}.\n\nYou do not need to call {{ClassFunction|IconEditor|Refresh}} after this.","examples":[],"isConstructor":false,"name":"SetFromEntity","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Type|SpawnIcon}} object to be modified.","isOptional":false,"isVarArg":false,"name":"icon","type":"SpawnIcon"}],"description":"Sets the {{Type|SpawnIcon}} to modify. You should call {{ClassFunction|Panel|Refresh}} immediately after this, as the user will not be able to make changes to the icon beforehand.","examples":[],"isConstructor":false,"name":"SetIcon","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity being rendered within the model panel.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"{{Internal}} Updates the entity being rendered in the internal {{Type|DAdjustableModelPanel}}. Called by the model panel's {{ClassFunction|DModelPanel|LayoutEntity}} method.","examples":[],"isConstructor":false,"name":"UpdateEntity","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Set to nil to remove the icon.\n\nOtherwise, set to file path to create the icon.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"Adds or removes an icon on the left of the {{Type|DFrame}}'s title.","examples":[],"isConstructor":false,"name":"SetIcon","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"IconEditor"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"","examples":[],"extends":"Button","functions":[],"isHook":false,"isPureAbstract":true,"name":"ImageCheckBox"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The spawnmenu library is a set of functions that allow you to control the spawn (Q) menu.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Tool class/file name","isOptional":false,"isVarArg":false,"name":"tool","type":"string"}],"description":"Activates a tool, opens context menu and brings up the tool gun.","examples":[],"isConstructor":false,"name":"ActivateTool","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The tabID of the tab to open the context menu in","isOptional":false,"isVarArg":false,"name":"tab","type":"number"},{"default":"","description":"The control panel to open","isOptional":false,"isVarArg":false,"name":"cp","type":"Panel"}],"description":"Activates tools context menu in specified tool tab.","examples":[],"isConstructor":false,"name":"ActivateToolPanel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns currently opened control panel of a tool, post process effect or some other menu in spawnmenu.","examples":[],"isConstructor":false,"name":"ActiveControlPanel","realm":"client","returns":[{"description":"The currently opened control panel, if any.","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"An unique name of the content type.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"A function that is called whenever we need create a new panel for this content type.\n\nIt has two arguments:<br/>\n{{FuncArg|Panel|container|The container/parent of the new panel}}<br/>\n{{FuncArg|table|data|Data for the content type passed from {{LibraryFunction|spawnmenu|CreateContentIcon}}}}<br/>\n<br/>","isOptional":false,"isVarArg":false,"name":"constructor","type":"Function"}],"description":"Registers a new content type that is saveable into spawnlists.\nCreated/called by {{LibraryFunction|spawnmenu|CreateContentIcon}}.","examples":[{"code":"spawnmenu.AddContentType( \"header\", function( container, obj )\n\n\tif ( !obj.text or type(obj.text) != \"string\" ) then return end\n\n\tlocal label = vgui.Create( \"ContentHeader\", container )\n\tlabel:SetText( obj.text )\n\t\n\tcontainer:Add( label )\n\t\nend )","description":"A simple header content type."}],"isConstructor":false,"name":"AddContentType","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"What text will appear on the tab (I.E Spawnlists).","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The function called to generate the content of the tab.","isOptional":false,"isVarArg":false,"name":"func","type":"Function"},{"default":"\"icon16/exclamation.png\"","description":"Path to the material that will be used as an icon on the tab.","isOptional":true,"isVarArg":false,"name":"material","type":"string"},{"default":"1000","description":"The order in which this tab should be shown relative to the other tabs on the creation menu.","isOptional":true,"isVarArg":false,"name":"order","type":"number"},{"default":"nil","description":"The tooltip to be shown for this tab.","isOptional":true,"isVarArg":false,"name":"tooltip","type":"string"}],"description":"Inserts a new tab into the CreationMenus table, which will be used by the creation menu to generate its tabs (Spawnlists, Weapons, Entities, etc.)","examples":[{"code":"spawnmenu.AddCreationTab( \"#spawnmenu.category.dupes\", function()\n\n    HTML = vgui.Create( \"DHTML\" );\n        JS_Language( HTML )\n        HTML:SetAllowLua( true );\n        HTML:OpenURL( \"asset://garrysmod/html/dupes.html\" );\n        HTML:Call( \"SetDupeSaveState( \" .. tostring( DupeInClipboard ).. \" );\" );        \n\n    return HTML\n\nend, \"icon16/control_repeat_blue.png\", 200 )","description":"An excerpt from the Dupe creation menu tab."}],"isConstructor":false,"name":"AddCreationTab","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The filename of the list. This name has to be unique, but doesn't have to actually exist. If a player saves changes made to this list, it will be saved under this name.","isOptional":false,"isVarArg":false,"name":"filename","type":"string"},{"default":"","description":"The name of the category e.g. ''Comic Props''.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"A table of entries for the spawn menu. It must be numerically indexed.\n\nEach member of the table is a sub-table containing a type member, and other members depending on the type.\n\n* {{FuncArg|string|type|\"header\" - a simple header for organization}}\n** {{FuncArg|string|text|The text that the header will display}}\n\n* {{FuncArg|string|type|\"model\" - spawns a model where the player is looking}}\n** {{FuncArg|string|model|The path to the model file}}\n** {{FuncArg|number|skin|The skin for the model to use (optional)}}\n** {{FuncArg|string|body|The bodygroups for the model (optional)}}\n** {{FuncArg|number|wide|The width of the spawnicon (optional)}}\n** {{FuncArg|number|tall|The height of the spawnicon (optional)}}\n\n* {{FuncArg|string|type|\"entity\" - spawns an entity where the player is looking (appears in the Entities tab by default)}}\n** {{FuncArg|string|spawnname|The filename of the entity, for example \"sent_ball\"}}\n** {{FuncArg|string|nicename|The name of the entity to display}}\n** {{FuncArg|string|material|The icon to display, this should be set to \"entities/<sent_name>.png\"}}\n** {{FuncArg|boolean|admin|Whether the entity is only spawnable by admins (optional)}}\n\n* {{FuncArg|string|type|\"vehicle\" - spawns a vehicle where the player is looking (appears in the Vehicles tab by default)}}\n** {{FuncArg|string|spawnname|The filename of the vehicle}}\n** {{FuncArg|string|nicename|The name of the vehicle to display}}\n** {{FuncArg|string|material|The icon to display}}\n** {{FuncArg|boolean|admin|Whether the vehicle is only spawnable by admins (optional)}}\n\n* {{FuncArg|string|type|\"npc\" - spawns an NPC where the player is looking (appears in the NPCs tab by default)}}\n** {{FuncArg|string|spawnname|The spawn name of the NPC}}\n** {{FuncArg|string|nicename|The name to display}}\n** {{FuncArg|string|material|The icon to display}}\n** {{FuncArg|table|weapon|A table of potential weapons (each a string) to give to the NPC. When spawned, one of these will be chosen randomly each time.}}\n** {{FuncArg|boolean|admin|Whether the NPC is only spawnable by admins (optional)}}\n\n* {{FuncArg|string|type|\"weapon\" - When clicked, gives the player a weapon; when middle-clicked, spawns a weapon where the player is looking (appears in the Weapons tab by default)}}\n** {{FuncArg|string|spawnname|The spawn name of the weapon}}\n** {{FuncArg|string|nicename|The name to display}}\n** {{FuncArg|string|material|The icon to display}}\n** {{FuncArg|boolean|admin|Whether the weapon is only spawnable by admins (optional)}}","isOptional":false,"isVarArg":false,"name":"contents","type":"table"},{"default":"","description":"The icon to use in the tree.","isOptional":false,"isVarArg":false,"name":"icon","type":"string"},{"default":"1000","description":"The unique ID number for the spawnlist category. Used to make sub categories. See \"parentID\" parameter below. If not set, it will be automatically set to ever increasing number, starting with 1000.","isOptional":true,"isVarArg":false,"name":"id","type":"number"},{"default":"0","description":"The unique ID of the parent category. This will make the category a subcategory of that given. ''0'' makes this a base category (such as ''Builder'').","isOptional":true,"isVarArg":false,"name":"parentID","type":"number"},{"default":"\"\"","description":"The needed game for this prop category, if one is needed. If the specified game is not mounted, the category isn't shown. This uses the shortcut name, e.g. ''cstrike'', and not the Steam AppID.","isOptional":true,"isVarArg":false,"name":"needsApp","type":"string"}],"description":"{{Internal|You should never try to modify player's customized spawnlists.}} \n\nUsed to populate prop categories in the spawnmenu tree. This function should generally be called within {{HookFunction|SANDBOX|PopulatePropMenu}}.\n\nLooking at [https://github.com/garrynewman/garrysmod/blob/master/garrysmod/settings/spawnlist/default/003-left%204%20dead.txt this file] will help you to understand where the information passed to this function comes from.","examples":[{"code":"hook.Add(\"PopulatePropMenu\", \"Add Two Of Each\", function()\n\t\n\tlocal contents = {}\n\t\n\t-- Props\n\ttable.insert( contents, {\n\t\ttype = \"header\",\n\t\ttext = \"Props\"\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"model\",\n\t\tmodel = \"models/props_c17/oildrum001.mdl\"\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"model\",\n\t\tmodel = \"models/props_wasteland/cargo_container01.mdl\",\n\t\tskin = 1,\n\t\twide = 128,\n\t\ttall = 64\n\t} )\n\n\t-- Entities\n\ttable.insert( contents, {\n\t\ttype = \"header\",\n\t\ttext = \"Entities\"\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"entity\",\n\t\tspawnname = \"sent_ball\",\n\t\tnicename = \"Bouncy Ball\",\n\t\tmaterial = \"entities/sent_ball.png\"\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"entity\",\n\t\tspawnname = \"combine_mine\",\n\t\tnicename = \"Hopper Mine\",\n\t\tmaterial = \"entities/combine_mine.png\"\n\t} )\n\n\t-- Vehicles\n\ttable.insert( contents, {\n\t\ttype = \"header\",\n\t\ttext = \"Vehicles\"\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"vehicle\",\n\t\tspawnname = \"Airboat\",\n\t\tnicename = \"Half-Life 2 Airboat\",\n\t\tmaterial = \"entities/Airboat.png\"\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"vehicle\",\n\t\tspawnname = \"Chair_Office2\",\n\t\tnicename = \"Executive's Chair\",\n\t\tmaterial = \"entities/Chair_Office2.png\"\n\t} )\n\n\t-- NPCs\n\ttable.insert( contents, {\n\t\ttype = \"header\",\n\t\ttext = \"NPCs\"\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"npc\",\n\t\tspawnname = \"npc_citizen\",\n\t\tnicename = \"A random citizen\",\n\t\tmaterial = \"entities/npc_citizen.png\",\n\t\tweapon = { \"weapon_smg1\", \"weapon_crowbar\" }\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"npc\",\n\t\tspawnname = \"npc_headcrab\",\n\t\tnicename = \"Headhumper\",\n\t\tmaterial = \"entities/npc_headcrab.png\"\n\t} )\n\n\t-- Weapons\n\ttable.insert( contents, {\n\t\ttype = \"header\",\n\t\ttext = \"Weapons\"\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"weapon\",\n\t\tspawnname = \"weapon_crowbar\",\n\t\tnicename = \"Crowbar\",\n\t\tmaterial = \"entities/weapon_crowbar.png\",\n\t} )\n\ttable.insert( contents, {\n\t\ttype = \"weapon\",\n\t\tspawnname = \"weapon_smg1\",\n\t\tnicename = \"SMG\",\n\t\tmaterial = \"entities/weapon_smg1.png\",\n\t} )\n\n\tspawnmenu.AddPropCategory( \"TwoOfEach\", \"Two of each type\", contents, \"icon16/box.png\" )\nend )","description":"Create a spawn menu with two icons for each type"}],"isConstructor":false,"name":"AddPropCategory","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The ToolTab name, as created with {{LibraryFunction|spawnmenu|AddToolTab}}.\n\nYou can also use the default ToolTab names \"Main\" and \"Utilities\".","isOptional":false,"isVarArg":false,"name":"tab","type":"string"},{"default":"","description":"The identifier name","isOptional":false,"isVarArg":false,"name":"RealName","type":"string"},{"default":"","description":"The displayed name","isOptional":false,"isVarArg":false,"name":"PrintName","type":"string"}],"description":"Used to create a new category in the list inside of a spawnmenu ToolTab.\n\nYou must call this function from {{HookFunction|SANDBOX|AddToolMenuCategories}} for it to work properly.","examples":[{"code":"spawnmenu.AddToolCategory( \"Main\", \"Constraints\", \"#spawnmenu.tools.constraints\" )","description":"Adds the Constraints category to the Main ToolTab. See ''lua\\includes\\modules\\spawnmenu.lua''."},{"code":"spawnmenu.AddToolCategory( \"Utilities\", \"User\", \"#spawnmenu.utilities.user\" )","description":"Adds the User category to the Utilities ToolTab. See ''lua\\autorun\\utilities_menu.lua''."}],"isConstructor":false,"name":"AddToolCategory","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The spawnmenu tab to add into (for example \"Utilities\")","isOptional":false,"isVarArg":false,"name":"tab","type":"string"},{"default":"","description":"The category to add into (for example \"Admin\")","isOptional":false,"isVarArg":false,"name":"category","type":"string"},{"default":"","description":"Unique identifier of option to add","isOptional":false,"isVarArg":false,"name":"classRef","type":"string"},{"default":"","description":"The nice name of item","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Command to execute when the item is selected","isOptional":false,"isVarArg":false,"name":"cmd","type":"string"},{"default":"","description":"Config name, used in older versions to load tool settings UI from a file. No longer works.\n\n{{Deprecated|Category=No}}","isOptional":false,"isVarArg":false,"name":"config","type":"string"},{"default":"","description":"A function to build the context panel. The function has one argument:\n* {{FuncArg|Panel|pnl|A {{Type|DForm}} that will be shown in the context menu}}","isOptional":false,"isVarArg":false,"name":"cpanel","type":"DForm"},{"default":"{}","description":"Allows to override the table that will be added to the tool list. Some of the fields will be overwritten by this function.","isOptional":true,"isVarArg":false,"name":"table","type":"table"}],"description":"Adds an option to the right side of the spawnmenu","examples":[{"code":"hook.Add( \"PopulateToolMenu\", \"CustomMenuSettings\", function()\n\tspawnmenu.AddToolMenuOption( \"Utilities\", \"Stuff\", \"Custom_Menu\", \"My Custom Menu\", \"\", \"\", function( panel )\n\t\tpanel:ClearControls()\n\t\tpanel:NumSlider( \"Gravity\", \"sv_gravity\", 0, 600 )\n\t\t-- Add stuff here\n\tend )\nend )","description":"Adds a new option to the menu with a slider to change the gravity"}],"isConstructor":false,"name":"AddToolMenuOption","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The internal name of the tab. This is used for sorting.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"name","description":"The 'nice' name of the tab (Tip: {{LibraryFunction|language|Add}})","isOptional":true,"isVarArg":false,"name":"label","type":"string"},{"default":"\"icon16/wrench.png\"","description":"The filepath to the icon of the tab. Should be a .png","isOptional":true,"isVarArg":false,"name":"icon","type":"string"}],"description":"Adds a new tool tab to the right side of the spawnmenu via the {{HookFunction|SANDBOX|AddToolMenuTabs}} hook.\n\nThis function is a inferior duplicate of {{LibraryFunction|spawnmenu|GetToolMenu}}, just without its return value.","examples":[{"code":"hook.Add( \"AddToolMenuTabs\", \"myHookClass\", function()\n\tspawnmenu.AddToolTab( \"Tab name!\", \"#Unique_Name\", \"icon16/wrench.png\" )\nend )","description":"Creates a new tab named, \"Tab name!\" with a unique name and a wrench icon."}],"isConstructor":false,"name":"AddToolTab","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"ClearToolMenus","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The type of the content icon.","isOptional":false,"isVarArg":false,"name":"type","type":"string"},{"default":"","description":"The parent to add the content icon to.","isOptional":false,"isVarArg":false,"name":"parent","type":"Panel"},{"default":"","description":"The data to send to the content icon in {{LibraryFunction|spawnmenu|AddContentType}}","isOptional":false,"isVarArg":false,"name":"data","type":"table"}],"description":"Creates a new content icon.","examples":[],"isConstructor":false,"name":"CreateContentIcon","realm":"client","returns":[{"description":"The created content icon, if it was returned by {{LibraryFunction|spawnmenu|AddContentType}}","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"A table containing spawnlists.","isOptional":false,"isVarArg":false,"name":"spawnlists","type":"table"}],"description":"{{Internal}}\n\nCalls {{LibraryFunction|spawnmenu|SaveToTextFiles}}.","examples":[],"isConstructor":false,"name":"DoSaveToTextFiles","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"contentType","type":"string"}],"description":"Returns the function to create an vgui element for a specified content type","examples":[],"isConstructor":false,"name":"GetContentType","realm":"client","returns":[{"description":"The panel creation function","type":"Function"}]},{"accessModifier":"public","arguments":[],"description":"Gets the CreationMenus table, which was filled with creation menu tabs from {{LibraryFunction|spawnmenu|AddCreationTab}}.","examples":[],"isConstructor":false,"name":"GetCreationTabs","realm":"client","returns":[{"description":"The CreationMenus table. See the {{Struct|CreationMenus}}.","type":"CreationMenus"}]},{"accessModifier":"public","arguments":[],"description":"Similar to {{LibraryFunction|spawnmenu|GetPropTable}}, but only returns spawnlists created by addons via {{LibraryFunction|spawnmenu|AddPropCategory}}.\n\nThese spawnlists are shown in a separate menu in-game.","examples":[],"isConstructor":false,"name":"GetCustomPropTable","realm":"client","returns":[{"description":"See {{LibraryFunction|spawnmenu|GetPropTable}} for table format.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table of all prop categories and their props in the spawnmenu.\n\nNote that if the spawnmenu has not been populated, this will return an empty table.\n\nThis will not return spawnlists created by addons, see  {{LibraryFunction|spawnmenu|GetCustomPropTable}} for that.","examples":[],"isConstructor":false,"name":"GetPropTable","realm":"client","returns":[{"description":"Table of all the prop categories and props in the following format:\n<pre>{\n\t[\"settings/spawnlist/001-construction props.txt\"] = {\n\t\tname = \"Construction Props\",\n\t\ticon = \"icon16/page.png\",\n\t\tid = 1,\n\t\tparentid = 0,\n\t\tneedsapp = \"\",\n\t\tcontents = {\n\t\t\t{\n\t\t\t\tmodel = \"models/Cranes/crane_frame.mdl\",\n\t\t\t\ttype = \"model\"\n\t\t\t}\n\t\t\t-- etc.\n\t\t},\n\t}\n\t-- etc.\n}</pre>","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The internal name of the tab. This is used for sorting.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"name","description":"The 'nice' name of the tab","isOptional":true,"isVarArg":false,"name":"label","type":"string"},{"default":"\"icon16/wrench.png\"","description":"The filepath to the icon of the tab. Should be a .png","isOptional":true,"isVarArg":false,"name":"icon","type":"string"}],"description":"Adds a new tool tab (or returns an existing one by name) to the right side of the spawnmenu via the {{HookFunction|SANDBOX|AddToolMenuTabs}} hook.","examples":[{"code":"PrintTable( spawnmenu.GetToolMenu( \"Main\" ) )","description":"Prints out the contents of the default Tool Tab."}],"isConstructor":false,"name":"GetToolMenu","realm":"client","returns":[{"description":"A table of tables representing categories and items in the left part of the tab. See example below to example structure.","type":"table[]"}]},{"accessModifier":"public","arguments":[],"description":"Gets a table of tools on the client.","examples":[{"code":"PrintTable( spawnmenu.GetTools() )","description":"Prints the output"}],"isConstructor":false,"name":"GetTools","realm":"client","returns":[{"description":"A table with groups of tools, along with information on each tool.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nCalls {{LibraryFunction|spawnmenu|PopulateFromTextFiles}}.","examples":[],"isConstructor":false,"name":"PopulateFromEngineTextFiles","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The function to call. Arguments are ( strFilename, strName, tabContents, icon, id, parentid, needsapp )","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Loads spawnlists from text files.","examples":[],"isConstructor":false,"name":"PopulateFromTextFiles","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A table containing spawnlists.","isOptional":false,"isVarArg":false,"name":"spawnlists","type":"table"}],"description":"{{Internal}}\n\nSaves a table of spawnlists to files.","examples":[],"isConstructor":false,"name":"SaveToTextFiles","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to set.","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"Sets currently active control panel to be returned by {{LibraryFunction|spawnmenu|ActiveControlPanel}}.","examples":[],"isConstructor":false,"name":"SetActiveControlPanel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The tab ID to open","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"{{Deprecated}}\n\nSupposed to open specified tool tab in spawnmenu, in reality does nothing.","examples":[],"isConstructor":false,"name":"SwitchToolTab","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"spawnmenu"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A basic label or \"single line text area\" that is non-editable.","examples":[{"code":"local frame = vgui.Create( \"Frame\" )\nframe.Label1 = vgui.Create( \"Label\", frame )\nframe.Label1:SetPos( 50, 50 )\nframe.Label1:SetText(\"Lua Labels!\")\nframe.Label1:SizeToContents()\n \nframe:SetSize( ScrW() * 0.25, ScrH() * 0.25 )\nframe:Center()\nframe:SetVisible( true )\nframe:MakePopup()","description":"Creates a label and fills it with the text \"Lua Labels!\" parented to a simple frame."}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[],"description":"Gets the size of the content/children within a panel object.\n\nOnly works with {{Type|Label}} derived panels by default such as {{Type|DLabel}}.<br/>\nWill also work on any panel that manually implements this method.\n\n[[Category:Label]]","examples":[{"code":"local PANEL = {}\n\nfunction PANEL:GetContentSize()\n\tsurface.SetFont( self:GetFont() )\n\treturn surface.GetTextSize( self:GetText() )\nend\n\nvgui.Register( \"DTextEntry_Edit\", PANEL, \"DTextEntry\" )\n\n-- Somewhere else, to test the newly created panel\nlocal frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 500, 200 )\nframe:Center()\nframe:MakePopup()\n\nlocal txt = vgui.Create( \"DTextEntry_Edit\", frame )\ntxt:SetPos( 5, 25 )\ntxt:SetSize( 100, 10 )\ntxt:SetText( \"Really long string that is bigger than 100 pixels\" )\ntxt:SizeToContentsX( 5 ) -- Must be called after setting the text\ntxt:SizeToContentsY( 5 ) -- These two functions will not have effect on a normal DTextEntry","description":"Demonstrates how to implement this function in your own panel."}],"isConstructor":false,"name":"GetContentSize","realm":"client","returns":[{"description":"The content width of the object.","type":"number"},{"description":"The content height of the object.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the left and top text margins of a text-based panel object, such as a {{Type|DButton}} or {{Type|DLabel}}. This is set with {{ClassFunction|Panel|SetTextInset}}.\n\n[[Category:Label]]","examples":[],"isConstructor":false,"name":"GetTextInset","realm":"client","returns":[{"description":"The left margin of the text, in pixels.","type":"number"},{"description":"The top margin of the text, in pixels.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the size of the text within a {{Type|Label}} derived panel.\n\n{{Bug|Issue=2576|This can return 0 incorrectly.}}\n\n[[Category:Label]]","examples":[],"isConstructor":false,"name":"GetTextSize","realm":"client","returns":[{"description":"The width of the text in the DLabel.","type":"number"},{"description":"The height of the text in the DLabel.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The direction of the content, based on the number pad.\n<table>\n<tr><td>{{Key|7}}: '''top-left'''</td><td>{{Key|8}}: '''top-center'''</td><td>{{Key|9}}: '''top-right'''</td></tr>\n<tr><td>{{Key|4}}: '''middle-left'''</td><td>{{Key|5}}: '''center'''</td><td>{{Key|6}}: '''middle-right'''</td></tr>\n<tr><td>{{Key|1}}: '''bottom-left'''</td><td>{{Key|2}}: '''bottom-center'''</td><td>{{Key|3}}: '''bottom-right'''</td></tr>\n</table>\n[[File:DLabel_SetContentAlignment.gif]]","isOptional":false,"isVarArg":false,"name":"alignment","type":"number"}],"description":"Sets the alignment of the contents.\n\n[[Category:Label]]\n[[Category:DLabel]]","examples":[],"isConstructor":false,"name":"SetContentAlignment","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The distance of the shadow from the panel.","isOptional":false,"isVarArg":false,"name":"distance","type":"number"},{"default":"","description":"The color of the shadow. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"Color","type":"Color"}],"description":"Adds a shadow falling to the bottom right corner of the panel's text. This has no effect on panels that do not derive from Label.\n\n[[Category:Label]]","examples":[],"isConstructor":false,"name":"SetExpensiveShadow","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the font.\n\nSee [[Default_Fonts|here]] for a list of existing fonts.\nAlternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font.","isOptional":false,"isVarArg":false,"name":"fontName","type":"string"}],"description":"Sets the font used to render this panel's text.\n\nTo retrieve the font used by a panel, call {{ClassFunction|Panel|GetFont}}.\n\n[[Category:Label]]\n[[Category:TextEntry]]\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"This is a font test\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Sample text\nrichtext:SetText(\"This is a sample of text using the chat box font.\")\n\n-- Ensure font and text color changes are applied\nfunction richtext:PerformLayout()\n\n\tself:SetFontInternal(\"ChatFont\")\n\tself:SetFGColor(Color(255, 255, 255))\n\t\nend","description":"Sets the font of a {{Type|RichText}} element to match the chat box font."}],"isConstructor":false,"name":"SetFontInternal","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text value to set.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.\n\n{{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}\n[[Category:Label]]\n[[Category:DLabel]]\n[[Category:TextEntry]]\n[[Category:RichText]]\n[[Category:DTree_Node]]","examples":[{"code":"-- Window frame for the RichText\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"#VAC_ConnectionRefusedTitle\") -- Results in \"Connection Refused - VAC\"\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Set the text to the message you get when VAC banned\nrichtext:SetText(\"#VAC_ConnectionRefusedDetail\")","description":"Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message."}],"isConstructor":false,"name":"SetText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The left margin for the text, in pixels. This will only affect centered text if the margin is greater than its x-coordinate.","isOptional":false,"isVarArg":false,"name":"insetX","type":"number"},{"default":"","description":"The top margin for the text, in pixels.","isOptional":false,"isVarArg":false,"name":"insetY","type":"number"}],"description":"Sets the left and top text margins of a text-based panel object, such as a {{Type|DButton}} or {{Type|DLabel}}.\n\n[[Category:Label]]","examples":[],"isConstructor":false,"name":"SetTextInset","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Gets the size of the content/children within a panel object.\n\nOnly works with {{Type|Label}} derived panels by default such as {{Type|DLabel}}.<br/>\nWill also work on any panel that manually implements this method.\n\n[[Category:Label]]","examples":[{"code":"local PANEL = {}\n\nfunction PANEL:GetContentSize()\n\tsurface.SetFont( self:GetFont() )\n\treturn surface.GetTextSize( self:GetText() )\nend\n\nvgui.Register( \"DTextEntry_Edit\", PANEL, \"DTextEntry\" )\n\n-- Somewhere else, to test the newly created panel\nlocal frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 500, 200 )\nframe:Center()\nframe:MakePopup()\n\nlocal txt = vgui.Create( \"DTextEntry_Edit\", frame )\ntxt:SetPos( 5, 25 )\ntxt:SetSize( 100, 10 )\ntxt:SetText( \"Really long string that is bigger than 100 pixels\" )\ntxt:SizeToContentsX( 5 ) -- Must be called after setting the text\ntxt:SizeToContentsY( 5 ) -- These two functions will not have effect on a normal DTextEntry","description":"Demonstrates how to implement this function in your own panel."}],"isConstructor":false,"name":"GetContentSize","realm":"client","returns":[{"description":"The content width of the object.","type":"number"},{"description":"The content height of the object.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the left and top text margins of a text-based panel object, such as a {{Type|DButton}} or {{Type|DLabel}}. This is set with {{ClassFunction|Panel|SetTextInset}}.\n\n[[Category:Label]]","examples":[],"isConstructor":false,"name":"GetTextInset","realm":"client","returns":[{"description":"The left margin of the text, in pixels.","type":"number"},{"description":"The top margin of the text, in pixels.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the size of the text within a {{Type|Label}} derived panel.\n\n{{Bug|Issue=2576|This can return 0 incorrectly.}}\n\n[[Category:Label]]","examples":[],"isConstructor":false,"name":"GetTextSize","realm":"client","returns":[{"description":"The width of the text in the DLabel.","type":"number"},{"description":"The height of the text in the DLabel.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The direction of the content, based on the number pad.\n<table>\n<tr><td>{{Key|7}}: '''top-left'''</td><td>{{Key|8}}: '''top-center'''</td><td>{{Key|9}}: '''top-right'''</td></tr>\n<tr><td>{{Key|4}}: '''middle-left'''</td><td>{{Key|5}}: '''center'''</td><td>{{Key|6}}: '''middle-right'''</td></tr>\n<tr><td>{{Key|1}}: '''bottom-left'''</td><td>{{Key|2}}: '''bottom-center'''</td><td>{{Key|3}}: '''bottom-right'''</td></tr>\n</table>\n[[File:DLabel_SetContentAlignment.gif]]","isOptional":false,"isVarArg":false,"name":"alignment","type":"number"}],"description":"Sets the alignment of the contents.\n\n[[Category:Label]]\n[[Category:DLabel]]","examples":[],"isConstructor":false,"name":"SetContentAlignment","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The distance of the shadow from the panel.","isOptional":false,"isVarArg":false,"name":"distance","type":"number"},{"default":"","description":"The color of the shadow. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"Color","type":"Color"}],"description":"Adds a shadow falling to the bottom right corner of the panel's text. This has no effect on panels that do not derive from Label.\n\n[[Category:Label]]","examples":[],"isConstructor":false,"name":"SetExpensiveShadow","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the font.\n\nSee [[Default_Fonts|here]] for a list of existing fonts.\nAlternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font.","isOptional":false,"isVarArg":false,"name":"fontName","type":"string"}],"description":"Sets the font used to render this panel's text.\n\nTo retrieve the font used by a panel, call {{ClassFunction|Panel|GetFont}}.\n\n[[Category:Label]]\n[[Category:TextEntry]]\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"This is a font test\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Sample text\nrichtext:SetText(\"This is a sample of text using the chat box font.\")\n\n-- Ensure font and text color changes are applied\nfunction richtext:PerformLayout()\n\n\tself:SetFontInternal(\"ChatFont\")\n\tself:SetFGColor(Color(255, 255, 255))\n\t\nend","description":"Sets the font of a {{Type|RichText}} element to match the chat box font."}],"isConstructor":false,"name":"SetFontInternal","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text value to set.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.\n\n{{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}\n[[Category:Label]]\n[[Category:DLabel]]\n[[Category:TextEntry]]\n[[Category:RichText]]\n[[Category:DTree_Node]]","examples":[{"code":"-- Window frame for the RichText\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"#VAC_ConnectionRefusedTitle\") -- Results in \"Connection Refused - VAC\"\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Set the text to the message you get when VAC banned\nrichtext:SetText(\"#VAC_ConnectionRefusedDetail\")","description":"Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message."}],"isConstructor":false,"name":"SetText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The left margin for the text, in pixels. This will only affect centered text if the margin is greater than its x-coordinate.","isOptional":false,"isVarArg":false,"name":"insetX","type":"number"},{"default":"","description":"The top margin for the text, in pixels.","isOptional":false,"isVarArg":false,"name":"insetY","type":"number"}],"description":"Sets the left and top text margins of a text-based panel object, such as a {{Type|DButton}} or {{Type|DLabel}}.\n\n[[Category:Label]]","examples":[],"isConstructor":false,"name":"SetTextInset","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"Label"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The SQL library allows you to access powerful database software included with Garry's Mod. It is the preferred and fastest method of storing large amounts of data. The database is located in sv.db serverside and cl.db clientside, both in the Garry's Mod base folder. SQL is a whole scripting language in itself although relatively simple, it's something you'll need to read up on before using this library.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Tells the engine a set of queries is coming. Will wait until {{LibraryFunction|sql|Commit}} is called to run them.<br>\nThis is most useful when you run more than 100+ queries.<br>\nThis is equivalent to <pre>sql.Query(\"BEGIN\")</pre>","examples":[],"isConstructor":false,"name":"Begin","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Tells the engine to execute a series of queries queued for execution, must be preceded by {{LibraryFunction|sql|Begin}}<br>\nThis is equivalent to <pre>sql.Query(\"COMMIT\")</pre>","examples":[],"isConstructor":false,"name":"Commit","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the last error from a SQLite query.","examples":[],"isConstructor":false,"name":"LastError","realm":"shared and menu","returns":[{"description":"error","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The query to execute.","isOptional":false,"isVarArg":false,"name":"query","type":"string"}],"description":"Performs a query on the local SQLite database, returns a table as result set, nil if result is empty and false on error.","examples":[{"code":"function CreateTable()\n     sql.Query(\"CREATE TABLE player_data(SteamID TEXT, Money INTEGER)\")\nend\n\nfunction NewPlayerToDataBase(ply)\n     sql.Query(\"INSERT INTO player_data(SteamID, Money) VALUES('\"..ply:SteamID()..\"', 0)\")\nend\n\nfunction SavePlayerToDatabase(ply, Money)\n     sql.Query(\"UPDATE player_data SET Money=\"..Money..\" WHERE SteamID='\"..ply:SteamID()..\"'\")\nend","description":"Functions that are examples of saving and creating information into the database."}],"isConstructor":false,"name":"Query","realm":"shared and menu","returns":[{"description":"false is returned if there is an error, nil if the query returned no data.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The input query","isOptional":false,"isVarArg":false,"name":"query","type":"string"},{"default":"1","description":"The row number. Say we receive back 5 rows, putting 3 as this argument will give us row #3.","isOptional":true,"isVarArg":false,"name":"row","type":"number"}],"description":"Performs the query like {{LibraryFunction|sql|Query}}, but returns the first row found.<br>\nBasically equivalent to<pre>sql.Query(\"*query* LIMIT 1\")</pre>","examples":[],"isConstructor":false,"name":"QueryRow","realm":"shared and menu","returns":[{"description":"The returned row.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The input query.","isOptional":false,"isVarArg":false,"name":"query","type":"string"}],"description":"Performs the query like {{LibraryFunction|sql|QueryRow}}, but returns the first value found.","examples":[],"isConstructor":false,"name":"QueryValue","realm":"shared and menu","returns":[{"description":"The returned value; the engine automatically converts numerical output to Lua numbers.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to be escaped.","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"false","description":"Set this as true, and the function will not wrap the input string in apostrophes.","isOptional":true,"isVarArg":false,"name":"bNoQuotes","type":"boolean"}],"description":"Escapes dangerous characters and symbols from user input used in an SQLite SQL Query.\n\n{{Note|this function is not meant to be used with external database engines such as ''MySQL''. Escaping strings with inadequate functions is dangerous!}}","examples":[],"isConstructor":false,"name":"SQLStr","realm":"shared and menu","returns":[{"description":"The escaped input.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the table to check.","isOptional":false,"isVarArg":false,"name":"tableName","type":"string"}],"description":"Returns if the table with the specified name exists.","examples":[],"isConstructor":false,"name":"TableExists","realm":"shared and menu","returns":[{"description":"exists","type":"boolean"}]}],"isHook":false,"isPureAbstract":false,"name":"sql"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Material is a VGUI element that renders a VMT material.","examples":[{"code":"-- Background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(400, 400)\nBGPanel:Center()\nBGPanel:SetBackgroundColor(Color(0, 0, 0, 255))\n\n-- Material panel with TV static\nlocal mat = vgui.Create(\"Material\", BGPanel)\nmat:SetPos(10, 10)\nmat:SetSize(380, 380)\nmat:SetMaterial(\"effects/tvscreen_noise002a\")\t-- Path to material VMT\n\n-- Set this to false to enable material stretching\nmat.AutoSize = false\n\n-- Model panel for GMod Logo\nlocal mdl = vgui.Create(\"DModelPanel\", BGPanel)\nmdl:SetPos(10, 10)\nmdl:SetSize(380, 380)\nmdl:SetModel(\"models/maxofs2d/logo_gmod_b.mdl\")\nmdl:SetCamPos(Vector(240, 0, 0))\nmdl:SetLookAt(Vector(0, 0, 0))\nmdl:SetFOV(40)\n\n-- Spin faster\nfunction mdl:LayoutEntity(ent)\n\tent:SetAngles(Angle(0, RealTime()*100,  0))\nend","description":"Creates a Material panel with TV static under a {{Type|DModelPanel}} with a spinning Garry's Mod logo model."},{"code":"-- Background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(720, 480)\nBGPanel:Center()\nBGPanel:SetBackgroundColor(Color(0, 0, 0, 255))\n\n-- Material data for the scanline background\nlocal matdata = {\n\t[\"$basetexture\"]=\"vgui/appchooser/background_portal_widescreen\",\n\t[\"$texture2\"]=\"dev/dev_scanline\",\n\t[\"Proxies\"]={\n\t\t[\"TextureScroll\"]={\n\t\t\t[\"texturescrollvar\"]=\"$texture2transform\",\n\t\t\t[\"texturescrollrate\"]=.06,\n\t\t\t[\"texturescrollangle\"]=-90\n\t\t}\n\t}\n}\n\n-- Create material and recompute just in case\nlocal portal_scanlines = CreateMaterial(\"PortalScanlines\", \"UnlitTwoTexture\", matdata)\nportal_scanlines:Recompute()\n\n-- Create material panel\nlocal mat = vgui.Create(\"Material\", BGPanel)\nmat:SetPos(5, 5)\nmat:SetSize(710, 470)\n\n-- This has to be set manually since mat:SetMaterial only accepts string argument\nmat.Material = portal_scanlines\n\n-- Stretch to fit\nmat.AutoSize = false","description":"Creates a custom VMT material (using existing textures) of a Portal background with scrolling scan lines, and then displays that material in a Material panel in the center of the screen."}],"extends":"Button","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The alpha value, from 0 to 255.","isOptional":false,"isVarArg":false,"name":"alpha","type":"number"}],"description":"Sets the alpha value of the Material panel.","examples":[{"code":"local mat = vgui.Create(\"Material\")\nmat:SetSize(200, 200)\nmat:Center()\nmat:SetMaterial(\"weapons/swep\")\n\t\nmat:SetAlpha(128)","description":"Creates a transparent SWEP icon in the middle of the screen."}],"isConstructor":false,"name":"SetAlpha","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The file path of the material to set (relative to \"garrysmod/materials/\").","isOptional":false,"isVarArg":false,"name":"matname","type":"string"}],"description":"Sets the material used by the panel.\n\n{{Note|If the material is not showing up as the correct size, try setting the Material panel's ''AutoSize'' variable to '''false'''}}","examples":[{"code":"-- Black background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(200, 200)\nBGPanel:Center()\nBGPanel:SetBackgroundColor(Color(0, 0, 0, 255))\n\t\t\nlocal mat = vgui.Create(\"Material\", BGPanel)\nmat:SetPos(5, 5)\nmat:SetSize(190, 190)\n\n-- It's not really good to use a models material for VGUI drawing\n-- But it looks good enough for a quick demo\nmat:SetMaterial(\"models/screenspace\")\n\n-- Stretch to fit\nmat.AutoSize = false","description":"Creates a Material panel and sets the material to a screen space effect."}],"isConstructor":false,"name":"SetMaterial","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The alpha value in the range of 0-255.","isOptional":false,"isVarArg":false,"name":"alpha","type":"number"}],"description":"Sets the alpha multiplier for the panel","examples":[],"isConstructor":false,"name":"SetAlpha","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"Material"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"The panel used by Material & Lamp Sandbox tools for texture selection.","examples":[],"extends":"ContextBase","functions":[],"isHook":false,"isPureAbstract":true,"name":"MatSelect"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}Panel used to display models, used by {{Type|SpawnIcon}}.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Causes a {{Type|SpawnIcon}} to rebuild its model image.\n[[Category:ModelImage]][[Category:SpawnIcon]]","examples":[],"isConstructor":false,"name":"RebuildSpawnIcon","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A four-membered table containing the information needed to re-render:\n* {{FuncArg|Vector|cam_pos|The relative camera position the model is viewed from.}}\n* {{FuncArg|Angle|cam_ang|The camera angle the model is viewed from.}}\n* {{FuncArg|number|cam_fov|The camera's field of view (FOV).}}\n* {{FuncArg|Entity|ent|The entity object of the model.}}\nSee the example below for how to retrieve these values.","isOptional":false,"isVarArg":false,"name":"data","type":"table"}],"description":"Re-renders a spawn icon with customized cam data.\n\n{{Note|This function does '''not''' accept the standard {{Struct|CamData}}.}}\n[[Category:ModelImage]][[Category:SpawnIcon]]","examples":[{"code":"function PANEL:RenderIcon()\n\t\n\tlocal ent = self.ModelPanel:GetEntity()\n\t\n\tlocal tab = {}\n\ttab.ent\t\t= ent\n\ttab.cam_pos = self.ModelPanel:GetCamPos()\n\ttab.cam_ang = self.ModelPanel:GetLookAng()\n\ttab.cam_fov = self.ModelPanel:GetFOV()\n\n\tself.SpawnIcon:RebuildSpawnIconEx( tab )\nend","description":"The ''RenderIcon'' method used by {{Type|IconEditor}}. ''SpawnIcon'' is a {{Type|SpawnIcon}} and ''ModelPanel'' is a {{Type|DAdjustableModelPanel}}."}],"isConstructor":false,"name":"RebuildSpawnIconEx","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path of the model to set","isOptional":false,"isVarArg":false,"name":"ModelPath","type":"string"},{"default":"0","description":"The skin to set","isOptional":true,"isVarArg":false,"name":"skin","type":"number"},{"default":"\"\"","description":"The body groups to set. Each single-digit number in the string represents a separate bodygroup, '''up to 9 in total'''.","isOptional":true,"isVarArg":false,"name":"bodygroups","type":"string"}],"description":"[[Category:ModelImage]][[Category:SpawnIcon]]Sets the model to be displayed by {{Type|SpawnIcon}}.\n\n{{Note|This must be called after setting size if you wish to use a different size spawnicon}}","examples":[],"isConstructor":false,"name":"SetModel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A path to the .png material, for example one of the [[Silkicons]] shipped with the game.","isOptional":false,"isVarArg":false,"name":"icon","type":"string"}],"description":"[[Category:ModelImage]][[Category:SpawnIcon]]Sets the .png image to be displayed on a  {{Type|SpawnIcon}} or the panel it is based on {{Type|ModelImage}}.\n\nOnly .png images can be used with this function.","examples":[],"isConstructor":false,"name":"SetSpawnIcon","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"ModelImage"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"<!-- This category uses the form [[Has default form::Function]]. // How does this help? -->\nSteamworks related functions.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Refreshes clients addons.","examples":[{"code":"steamworks.Subscribe( 21197 )\nsteamworks.ApplyAddons()","description":"Subscribes to gm_construct_beta and reloads addons."}],"isConstructor":false,"name":"ApplyAddons","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The Preview ID of workshop item.","isOptional":false,"isVarArg":false,"name":"workshopPreviewID","type":"string"},{"default":"","description":"Whether to uncompress the file or not, assuming it was compressed with LZMA.<br>\nYou will usually want to set this to true.","isOptional":false,"isVarArg":false,"name":"uncompress","type":"boolean"},{"default":"","description":"The function to process retrieved data. The first and only argument is a string, containing path to the saved file.","isOptional":false,"isVarArg":false,"name":"resultCallback","type":"Function"}],"description":"Downloads a file from the supplied addon and saves it as a .cache file in garrysmod/cache folder.\n\nThis is mostly used to download the preview image of the addon, but the game seems to also use it to download replays and saves.\n\nIn case the retrieved file is an image and you need the {{Type|IMaterial}}, use {{GlobalFunction|AddonMaterial}} with the path supplied from the callback.","examples":[{"code":"steamworks.FileInfo( 21197, function( result )\n\tsteamworks.Download( result.previewid, true, function( name )\n\t\tprint( name )\n\tend) \nend)","description":"Downloads and saves icon of Gm_construct_Beta Steam Workshop addon."}],"isConstructor":false,"name":"Download","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of Steam Workshop item.","isOptional":false,"isVarArg":false,"name":"workshopItemID","type":"string"},{"default":"","description":"The function to process retrieved data. The first and only argument is a table, containing all the info.","isOptional":false,"isVarArg":false,"name":"resultCallback","type":"Function"}],"description":"Retrieves info about supplied Steam Workshop addon.","examples":[{"code":"steamworks.FileInfo( 21197, function( result ) PrintTable( result ) end)","description":"Retries all info of gm_construct_Beta Steam Workshop addon."}],"isConstructor":false,"name":"FileInfo","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The type of items to retrieve.","isOptional":false,"isVarArg":false,"name":"type","type":"string"},{"default":"","description":"A table of tags to match.","isOptional":false,"isVarArg":false,"name":"tags","type":"table"},{"default":"","description":"How much of results to skip from first one. Mainly used for pages.","isOptional":false,"isVarArg":false,"name":"offset","type":"number"},{"default":"","description":"How much addons to retrieve.","isOptional":false,"isVarArg":false,"name":"numRetrieve","type":"number"},{"default":"","description":"When getting Most Popular content from Steam, this determines a time period. ( 7 = most popular addons in last 7 days, 1 = most popular addons today, etc )","isOptional":false,"isVarArg":false,"name":"days","type":"number"},{"default":"","description":"\"0\" to retrieve all addons, \"1\" to retrieve addons only published by you.","isOptional":false,"isVarArg":false,"name":"userID","type":"string"},{"default":"","description":"The function to process retrieved data. The first and only argument is a table, containing all the info.","isOptional":false,"isVarArg":false,"name":"resultCallback","type":"Function"}],"description":"Retrieves a customized list of Steam Workshop addons.","examples":[{"code":"steamworks.GetList( \"\", nil, nil, 10, nil, 0, function( data ) PrintTable(data) end )","description":"Retrieves top 10 of Steam Workshop addons."}],"isConstructor":false,"name":"GetList","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The 64bit Steam ID ( aka Community ID ) of the player","isOptional":false,"isVarArg":false,"name":"steamID64","type":"string"}],"description":"{{Deprecated|You should use the callback of {{LibraryFunction|steamworks|RequestPlayerInfo}} instead.}}\n\nRetrieves players name by his 64bit SteamID.\n\nYou must call {{LibraryFunction|steamworks|RequestPlayerInfo}} a decent amount of time before calling this function.","examples":[{"code":"steamworks.RequestPlayerInfo( LocalPlayer():SteamID64() )\ntimer.Simple( 1, function() -- this is not instant!\n\tprint( steamworks.GetPlayerName( LocalPlayer():SteamID64() ) )\nend )","description":"Retrieves name of local player."}],"isConstructor":false,"name":"GetPlayerName","realm":"client and menu","returns":[{"description":"The name of that player","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of the Steam Workshop item.","isOptional":false,"isVarArg":false,"name":"workshopItemID","type":"string"}],"description":"Returns whenever the client is subscribed to the specified Steam Workshop item.","examples":[{"code":"print( steamworks.IsSubscribed( 21197 ) )","description":"Checks if client is subscribed to Gm_construct_Beta Steam Workshop addon."}],"isConstructor":false,"name":"IsSubscribed","realm":"client and menu","returns":[{"description":"Is the client subscribed to the addon or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Opens the workshop website in the steam overlay browser.","examples":[{"code":"gui.OpenURL( \"http://steamcommunity.com/app/4000/workshop/\" )","description":"An alternative to this function."}],"isConstructor":false,"name":"OpenWorkshop","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The workshop tags to apply","isOptional":false,"isVarArg":false,"name":"tags","type":"table"},{"default":"","description":"Path to the file to upload","isOptional":false,"isVarArg":false,"name":"filename","type":"string"},{"default":"","description":"Path to the image to use as icon","isOptional":false,"isVarArg":false,"name":"image","type":"string"},{"default":"","description":"Name of the Workshop submission","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Description of the Workshop submission","isOptional":false,"isVarArg":false,"name":"desc","type":"string"}],"description":"{{Internal}}\nPublishes dupes, saves or demos to workshop.","examples":[],"isConstructor":false,"name":"Publish","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The 64bit Steam ID of player.","isOptional":false,"isVarArg":false,"name":"steamID64","type":"string"},{"default":"","description":"A callback function with only 1 argument - {{Type|string}} name.","isOptional":false,"isVarArg":false,"name":"callback","type":"string"}],"description":"Requests information of the player with SteamID64 for later use with {{LibraryFunction|steamworks|GetPlayerName}}.","examples":[{"code":"steamworks.RequestPlayerInfo( LocalPlayer():SteamID64(), function(steamName)\n\t\tprint( steamName )\nend )","description":"Gets and prints the steam name of the local player"}],"isConstructor":false,"name":"RequestPlayerInfo","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The Steam Workshop item id","isOptional":false,"isVarArg":false,"name":"workshopid","type":"string"}],"description":"","examples":[],"isConstructor":false,"name":"SetFileCompleted","realm":"menu","returns":[{"description":"Whatever you have put in as first argument","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The Steam Workshop item ID","isOptional":false,"isVarArg":false,"name":"workshopid","type":"string"}],"description":"Sets whether you have played this addon or not. This will be shown to the user in the Steam Workshop itself:\n[[File:steamworksSetFilePlayedExample.png]]","examples":[],"isConstructor":false,"name":"SetFilePlayed","realm":"menu","returns":[{"description":"Whatever you have put in as first argument","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of the Steam Workshop item we should enable/disable","isOptional":false,"isVarArg":false,"name":"workshopItemID","type":"string"},{"default":"","description":"true to enable the item, false to disable.","isOptional":false,"isVarArg":false,"name":"shouldMount","type":"boolean"}],"description":"Sets if an addon should be enabled or disabled. Call {{LibraryFunction|steamworks|ApplyAddons}} afterwards to update.","examples":[{"code":"steamworks.SetShouldMountAddon( 21197, true )\nsteamworks.ApplyAddons()","description":"Enables the Gm_construct_Beta Steam Workshop addon and reloads addons afterwards"}],"isConstructor":false,"name":"SetShouldMountAddon","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of the Steam Workshop","isOptional":false,"isVarArg":false,"name":"workshopItemID","type":"string"}],"description":"Returns whenever the specified Steam Workshop addon will be mounted or not.","examples":[{"code":"print( steamworks.ShouldMountAddon( 21197 ) )","description":"Checks if the client has enabled Gm_construct_Beta Steam Workshop addon."}],"isConstructor":false,"name":"ShouldMountAddon","realm":"client and menu","returns":[{"description":"Will the workshop item be mounted or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of the Steam Workshop item we should subscribe to","isOptional":false,"isVarArg":false,"name":"workshopItemID","type":"string"}],"description":"{{Internal}}\n\nSubscribes to the specified workshop addon. Call {{LibraryFunction|steamworks|ApplyAddons}} afterwards to update.","examples":[{"code":"steamworks.Subscribe( \"21197\" )\nsteamworks.ApplyAddons()","description":"Subscribes to the Gm_construct_Beta Steam Workshop addon and reloads addons afterwards"}],"isConstructor":false,"name":"Subscribe","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of the Steam Workshop item we should unsubscribe from.","isOptional":false,"isVarArg":false,"name":"workshopItemID","type":"string"}],"description":"{{Internal}} Unsubscribes to the specified workshop addon. Call {{LibraryFunction|steamworks|ApplyAddons}} afterwards to update.\n\nThis function should ''never'' be called without a user's consent and should not be called if the addon is currently in use (aka: the user is not in the main menu) as it may result in unexpected behaviour.","examples":[{"code":"steamworks.Unsubscribe( 21197 )\nsteamworks.ApplyAddons()","description":"Unsubscribes from the Gm_construct_Beta Steam Workshop addon, if subscribed, and reloads addons afterwards"}],"isConstructor":false,"name":"Unsubscribe","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of workshop item.","isOptional":false,"isVarArg":false,"name":"workshopItemID","type":"string"}],"description":"Opens the workshop website for specified Steam Workshop item in the Steam overlay browser.","examples":[{"code":"steamworks.ViewFile( 21197 )","description":"Opens web page of Gm_construct_Beta Steam Workshop addon in Steam overlay browser."}],"isConstructor":false,"name":"ViewFile","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of workshop item.","isOptional":false,"isVarArg":false,"name":"workshopItemID","type":"string"},{"default":"","description":"Sets if the user should vote up/down. True makes them upvote, false down","isOptional":false,"isVarArg":false,"name":"upOrDown","type":"boolean"}],"description":"{{Internal}} Makes the user vote for the specified addon","examples":[{"code":"= steamworks.Vote( 21197, true )","description":"= Give the Gm_construct_Beta Steam Workshop item a thumbs up."}],"isConstructor":false,"name":"Vote","realm":"menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of workshop item.","isOptional":false,"isVarArg":false,"name":"workshopItemID","type":"string"},{"default":"","description":"The function to process retrieved data. The first and only argument is a table, containing all the info.","isOptional":false,"isVarArg":false,"name":"resultCallback","type":"Function"}],"description":"Retrieves vote info of supplied addon.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"VoteInfo","realm":"client and menu","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"steamworks"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"This is the object returned by {{ClassFunction|Entity|GetPhysicsObject}} and {{ClassFunction|Entity|GetPhysicsObjectNum}}.\n\nIt represents a physics object.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Additional velocity.","isOptional":false,"isVarArg":false,"name":"angularVelocity","type":"Vector"}],"description":"Adds the specified velocity to the current.","examples":[],"isConstructor":false,"name":"AddAngleVelocity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Bitflag, see {{Enum|FVPHYSICS}}.","isOptional":false,"isVarArg":false,"name":"flags","type":"FVPHYSICS"}],"description":"Adds one or more bit flags.","examples":[],"isConstructor":false,"name":"AddGameFlag","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Additional velocity.","isOptional":false,"isVarArg":false,"name":"velocity","type":"Vector"}],"description":"Adds the specified velocity to the current.","examples":[],"isConstructor":false,"name":"AddVelocity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"from","type":"Angle"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"to","type":"Angle"}],"description":"{{Stub}}Rotates the object so that it's angles are aligned to the ones inputted.","examples":[],"isConstructor":false,"name":"AlignAngles","realm":"shared","returns":[{"description":"","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The force to be applied.","isOptional":false,"isVarArg":false,"name":"force","type":"Vector"}],"description":"Applies the specified force to the physics object. (in Newtons)\n\n{{Note|This will not work on players, use {{ClassFunction|Entity|SetVelocity}} instead.}}","examples":[{"code":"function ENT:Initialize()\n    self:SetModel(\"models/hunter/blocks/cube1x1x1.mdl\")\n\tself:PhysicsInit(SOLID_VPHYSICS)\n\tself:SetSolid(SOLID_VPHYSICS)\n\tself:SetMoveType(MOVETYPE_VPHYSICS)\n\n    if phys:IsValid() then\n        phys:EnableGravity(false) -- This is required. Since we are creating our own gravity.\n        phys:Wake()\n    end\nend\n\nfunction ENT:PhysicsUpdate(phys)\n    local phys = self:GetPhysicsObject()\n    phys:ApplyForceCenter(Vector(0,0,phys:GetMass()*-9.80665))\nend","description":"An entity that Simulates it's own gravity by applying a force downward on the entity based on the force equation.\n\n(Force = mass * acceleration)\n\nSince, by default, entities already have gravity. The default gravity must be turned off by adding \"phys:EnableGravity(false)\" in the entities Initialize function so that the default gravity doesn't interfere with our custom gravity.\n\nNOTE: We can get the mass of the entity by using the GetMass() function.\n\n\n\n{{Note| -9.80665 (meters / second^2)  Is the approximate acceleration of objects on Earth due to gravity. (It is negative because gravity pushes things downwards.)}}"}],"isConstructor":false,"name":"ApplyForceCenter","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The force to be applied.","isOptional":false,"isVarArg":false,"name":"force","type":"Vector"},{"default":"","description":"The position in world coordinates where the force is applied to the physics object.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Applies the specified force on the physics object at the specified position","examples":[{"code":"local tr = Entity(1):GetEyeTrace()\nif IsValid(tr.Entity) then\n\tlocal phys = tr.Entity:GetPhysicsObjectNum(tr.PhysicsBone)\n\t\n\tlocal pushvec = tr.Normal * -100000\n\tlocal pushpos = tr.HitPos\n\t\n\tphys:ApplyForceOffset(pushvec, pushpos)\nend","description":"Pull what the player is looking at towards him."}],"isConstructor":false,"name":"ApplyForceOffset","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The torque to be applied in kg * degrees / s.","isOptional":false,"isVarArg":false,"name":"torque","type":"Vector"}],"description":"Applies specified torque to the physics object.","examples":[],"isConstructor":false,"name":"ApplyTorqueCenter","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The initial force","isOptional":false,"isVarArg":false,"name":"force","type":"Vector"},{"default":"","description":"The location of the force in world coordinates","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Calculates the force and torque on the center of mass for an offset force impulse. The outputs can be directly passed to {{ClassFunction|PhysObj|ApplyForceCenter}} and {{ClassFunction|PhysObj|ApplyTorqueCenter}}, respectively.","examples":[],"isConstructor":false,"name":"CalculateForceOffset","realm":"shared","returns":[{"description":"The calculated force on the physics object's center of mass","type":"Vector"},{"description":"The calculated torque on the physics object's center of mass","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The initial force","isOptional":false,"isVarArg":false,"name":"force","type":"Vector"},{"default":"","description":"The location of the force in world coordinates","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"}],"description":"Calculates the linear and angular velocities on the center of mass for an offset force impulse. The outputs can be directly passed to {{ClassFunction|PhysObj|AddVelocity}} and {{ClassFunction|PhysObj|AddAngleVelocity}}, respectively.","examples":[],"isConstructor":false,"name":"CalculateVelocityOffset","realm":"shared","returns":[{"description":"The calculated linear velocity from the force on the physics object's center of mass","type":"Vector"},{"description":"The calculated angular velocity from the force on the physics object's center of mass","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Bitflag, see {{Enum|FVPHYSICS}}.","isOptional":false,"isVarArg":false,"name":"flags","type":"FVPHYSICS"}],"description":"Removes one of more specified flags.","examples":[],"isConstructor":false,"name":"ClearGameFlag","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The parameters for the shadow. See example code to see how its used.","isOptional":false,"isVarArg":false,"name":"shadowparams","type":"table"}],"description":"Allows you to move a PhysObj to a point and angle in 3D space.","examples":[{"code":"function ENT:Initialize()\n \n\tself:StartMotionController()\n\tself.ShadowParams = {}\n \nend\nfunction ENT:PhysicsSimulate( phys, deltatime )\n \n\tphys:Wake()\n \n\tself.ShadowParams.secondstoarrive = 1 // How long it takes to move to pos and rotate accordingly - only if it could move as fast as it want - damping and max speed/angular will make this invalid (Cannot be 0! Will give errors if you do)\n\tself.ShadowParams.pos = Vector( 0, 0, 0 ) // Where you want to move to\n\tself.ShadowParams.angle = Angle( 0, 0, 0 ) // Angle you want to move to\n\tself.ShadowParams.maxangular = 5000 //What should be the maximal angular force applied\n\tself.ShadowParams.maxangulardamp = 10000 // At which force/speed should it start damping the rotation\n\tself.ShadowParams.maxspeed = 1000000 // Maximal linear force applied\n\tself.ShadowParams.maxspeeddamp = 10000// Maximal linear force/speed before  damping\n\tself.ShadowParams.dampfactor = 0.8 // The percentage it should damp the linear/angular force if it reaches it's max amount\n\tself.ShadowParams.teleportdistance = 200 // If it's further away than this it'll teleport (Set to 0 to not teleport)\n\tself.ShadowParams.deltatime = deltatime // The deltatime it should use - just use the PhysicsSimulate one\n \n\tphys:ComputeShadowControl(self.ShadowParams)\n \nend","description":"Move a PhysObj to vector 0 0 0 with angles 0 0 0."}],"isConstructor":false,"name":"ComputeShadowControl","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to enable, false to disable.","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Sets whether the physics object should collide with anything or not, including world.\n\n{{Warning|This function currently has major problems with player collisions, and as such should be avoided at all costs.<br/><br/>A better alternative to this function would be using {{ClassFunction|Entity|SetCollisionGroup}}( COLLISION_GROUP_WORLD ).}}","examples":[],"isConstructor":false,"name":"EnableCollisions","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to enable, false to disable.","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Sets whenever the physics object should be affected by drag.","examples":[],"isConstructor":false,"name":"EnableDrag","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to enable, false to disable.","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Sets whether the PhysObject should be affected by gravity","examples":[],"isConstructor":false,"name":"EnableGravity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to enable, false to disable.","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Sets whether the physobject should be able to move or not.\n\nThis is the exact method the Physics Gun uses to freeze props. If a motion-disabled physics object is grabbed with the physics gun, the object will be able to move again. To disallow this, use {{HookFunction|GM|PhysgunPickup}}.","examples":[],"isConstructor":false,"name":"EnableMotion","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the mins and max of the physics object.","examples":[],"isConstructor":false,"name":"GetAABB","realm":"shared","returns":[{"description":"Mins","type":"Vector"},{"description":"Maxs","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the angles of the physics object.","examples":[],"isConstructor":false,"name":"GetAngles","realm":"shared","returns":[{"description":"The angles of the physics object.","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Gets the angular velocity of the object in degrees per second.","examples":[],"isConstructor":false,"name":"GetAngleVelocity","realm":"shared","returns":[{"description":"The angular velocity","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the contents flag of the {{Type|PhysObj}}.","examples":[],"isConstructor":false,"name":"GetContents","realm":"shared","returns":[{"description":"The {{Enum|CONTENTS}}.","type":"CONTENTS"}]},{"accessModifier":"public","arguments":[],"description":"Returns the linear and angular damping of the physics object.","examples":[],"isConstructor":false,"name":"GetDamping","realm":"shared","returns":[{"description":"The linear damping","type":"number"},{"description":"The angular damping","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the kinetic energy of the physobject.","examples":[],"isConstructor":false,"name":"GetEnergy","realm":"shared","returns":[{"description":"The kinetic energy","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the parent entity of the physics object.","examples":[],"isConstructor":false,"name":"GetEntity","realm":"shared","returns":[{"description":"parent","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns the directional inertia of the physics object.","examples":[],"isConstructor":false,"name":"GetInertia","realm":"shared","returns":[{"description":"directionalInertia","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns 1 divided by the inertia.","examples":[],"isConstructor":false,"name":"GetInvInertia","realm":"shared","returns":[{"description":"The inverted inertia","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns 1 divided by the physics object's mass.","examples":[],"isConstructor":false,"name":"GetInvMass","realm":"shared","returns":[{"description":"The inverted mass.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the mass of the physics object.","examples":[],"isConstructor":false,"name":"GetMass","realm":"shared","returns":[{"description":"The mass in kilograms.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the center of mass of the physics object as a local vector.","examples":[],"isConstructor":false,"name":"GetMassCenter","realm":"shared","returns":[{"description":"The center of mass of the physics object.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the physical material of the physics object.","examples":[],"isConstructor":false,"name":"GetMaterial","realm":"shared","returns":[{"description":"The physical material","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the physics mesh of the object which is used for physobj-on-physobj collision.","examples":[],"isConstructor":false,"name":"GetMesh","realm":"shared","returns":[{"description":"Table of {{Struct|MeshVertex}}s where each three vertices represent a triangle. Returns nil if the physics object is a sphere.","type":"MeshVertex[]"}]},{"accessModifier":"public","arguments":[],"description":"Returns all convex physics meshes of the object. See {{LibraryFunction|Entity|PhysicsInitMultiConvex}} for more information.","examples":[],"isConstructor":false,"name":"GetMeshConvexes","realm":"shared","returns":[{"description":"Table of {{Struct|MeshVertex}}s where each {{Struct|MeshVertex}} is an independent convex mesh and each three vertices represent a triangle. Returns nil if the physics object is a sphere.","type":"MeshVertex[]"}]},{"accessModifier":"public","arguments":[],"description":"Returns the name of the physics object.","examples":[],"isConstructor":false,"name":"GetName","realm":"shared","returns":[{"description":"The name of the physics object.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the position of the physics object.","examples":[],"isConstructor":false,"name":"GetPos","realm":"shared","returns":[{"description":"The position","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the position and angle of the physics object as a 3x4 matrix ({{Type|VMatrix}} is 4x4 so the fourth row goes unused). The first three columns store the angle as a [https://en.wikipedia.org/wiki/Rotation_matrix rotation matrix], and the fourth column stores the position vector.","examples":[],"isConstructor":false,"name":"GetPositionMatrix","realm":"shared","returns":[{"description":"The position and angle matrix.","type":"VMatrix"}]},{"accessModifier":"public","arguments":[],"description":"Returns the rotation damping of the physics object.","examples":[],"isConstructor":false,"name":"GetRotDamping","realm":"shared","returns":[{"description":"The rotation damping","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the angles of the {{Type|PhysObj}} shadow. See {{ClassFunction|PhysObj|UpdateShadow}}.","examples":[],"isConstructor":false,"name":"GetShadowAngles","realm":"shared","returns":[{"description":"The angles of the {{Type|PhysObj}} shadow.","type":"PhysObj"}]},{"accessModifier":"public","arguments":[],"description":"Returns the position of the {{Type|PhysObj}} shadow. See {{ClassFunction|PhysObj|UpdateShadow}}.","examples":[],"isConstructor":false,"name":"GetShadowPos","realm":"shared","returns":[{"description":"The position of the {{Type|PhysObj}} shadow.","type":"PhysObj"}]},{"accessModifier":"public","arguments":[],"description":"Returns the speed damping of the physics object.","examples":[],"isConstructor":false,"name":"GetSpeedDamping","realm":"shared","returns":[{"description":"speedDamping","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the stress of the entity.","examples":[],"isConstructor":false,"name":"GetStress","realm":"server","returns":[{"description":"exertedStress","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the surface area of the physics object in source-units².","examples":[],"isConstructor":false,"name":"GetSurfaceArea","realm":"shared","returns":[{"description":"The surface area","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the absolute directional velocity of the physobject.","examples":[],"isConstructor":false,"name":"GetVelocity","realm":"shared","returns":[{"description":"velocity","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"point","type":"Vector"}],"description":"Returns the world velocity of a point in world coordinates about the object.","examples":[],"isConstructor":false,"name":"GetVelocityAtPoint","realm":"shared","returns":[{"description":"","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the volume in source units³.","examples":[],"isConstructor":false,"name":"GetVolume","realm":"shared","returns":[{"description":"volume","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Bitflag, see {{Enum|FVPHYSICS}}.","isOptional":false,"isVarArg":false,"name":"flags","type":"FVPHYSICS"}],"description":"Returns whenever the specified flag(s) is/are set.","examples":[],"isConstructor":false,"name":"HasGameFlag","realm":"shared","returns":[{"description":"If flag was set or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the physics object is \"sleeping\".\n\nSee {{ClassFunction|PhysObj|Sleep}} for more information.","examples":[],"isConstructor":false,"name":"IsAsleep","realm":"shared","returns":[{"description":"Whether the physics object is sleeping.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the entity is able to collide or not.","examples":[],"isConstructor":false,"name":"IsCollisionEnabled","realm":"shared","returns":[{"description":"isCollisionEnabled","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the entity is affected by drag.","examples":[],"isConstructor":false,"name":"IsDragEnabled","realm":"shared","returns":[{"description":"dragEnabled","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the entity is affected by gravity.","examples":[],"isConstructor":false,"name":"IsGravityEnabled","realm":"shared","returns":[{"description":"gravitated","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the physics object can move itself (by velocity, acceleration)","examples":[],"isConstructor":false,"name":"IsMotionEnabled","realm":"shared","returns":[{"description":"motionEnabled","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the entity is able to move.","examples":[],"isConstructor":false,"name":"IsMoveable","realm":"shared","returns":[{"description":"movable","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the physics object is penetrating another physics object.\n\nThis is internally implemented as <pre class=\"inline\">PhysObj:HasGameFlag( FVPHYSICS_PENETRATING )</pre> and thus is only updated for non-static physics objects.","examples":[],"isConstructor":false,"name":"IsPenetrating","realm":"shared","returns":[{"description":"Whether the physics object is penetrating another object.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the physics object is valid/not NULL.","examples":[],"isConstructor":false,"name":"IsValid","realm":"shared","returns":[{"description":"isValid","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"A vector in the physics object's local frame","isOptional":false,"isVarArg":false,"name":"LocalVec","type":"Vector"}],"description":"Mapping a vector in local frame of the physics object to world frame.\n\n{{Note|this function does translation and rotation, with translation done first.}}","examples":[],"isConstructor":false,"name":"LocalToWorld","realm":"shared","returns":[{"description":"The corresponding vector in world frame","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"A vector in the physics object's local frame","isOptional":false,"isVarArg":false,"name":"LocalVec","type":"Vector"}],"description":"Rotate a vector from the local frame of the physics object to world frame.\n\n{{Note|This function only rotates the vector, without any translation operation.}}","examples":[{"code":"print( \"Angle of the PhysObj: \", PhysObj:GetAngles() )\nprint( \"Vector in world frame: \", PhysObj:LocalToWorld( Vector( 1, 2, 3 ) ) )","description":"Given the angle of the physics object is angle ( 0.045, 89.952, 89.99 ) ( This can be derived by PhysObj:GetAngles() ), convert the vector ( 1 ,2, 3 ) in this physics object's local frame into world frame."}],"isConstructor":false,"name":"LocalToWorldVector","realm":"shared","returns":[{"description":"The corresponding vector in world frame","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Prints debug info about the state of the physics object to the console.","examples":[{"code":"Entity(1):GetEyeTrace().Entity:GetPhysicsObject():OutputDebugInfo()","description":"Outputs physics info about the entity the player is looking at to the console."}],"isConstructor":false,"name":"OutputDebugInfo","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Call this when the collision filter conditions change due to this object's state (e.g. changing solid type or collision group)","examples":[],"isConstructor":false,"name":"RecheckCollisionFilter","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Direction, around which we will rotate","isOptional":false,"isVarArg":false,"name":"dir","type":"Vector"},{"default":"","description":"Amount of rotation, in degrees","isOptional":false,"isVarArg":false,"name":"ang","type":"number"}],"description":"A convinience function for {{ClassFunction|Angle|RotateAroundAxis}}.","examples":[{"code":"local phys = Entity(1):GetEyeTrace().Entity:GetPhysicsObject() -- Our physics object\n\nprint( phys:RotateAroundAxis( Vector( 1, 0, 0 ), 20 ) )\n\nlocal a = phys:GetAngles()\na:RotateAroundAxis( Vector( 1, 0, 0 ), 20 )\nprint( a )","description":"Shows that it is the same as {{ClassFunction|Angle|RotateAroundAxis}}."}],"isConstructor":false,"name":"RotateAroundAxis","realm":"shared","returns":[{"description":"The resulting angle","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"[https://en.wikipedia.org/wiki/Drag_coefficient Drag coefficient]. The bigger this value is, the slower the angles will change.","isOptional":false,"isVarArg":false,"name":"coefficient","type":"number"}],"description":"Sets the amount of [https://en.wikipedia.org/wiki/Drag_(physics) drag] to apply to a physics object when attempting to rotate.","examples":[],"isConstructor":false,"name":"SetAngleDragCoefficient","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new angles of the physobject.","isOptional":false,"isVarArg":false,"name":"angles","type":"Angle"}],"description":"Sets the angles of the physobject.","examples":[],"isConstructor":false,"name":"SetAngles","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Buoyancy ratio, where 0 is not buoyant at all (like a rock), and 1 is very buoyant (like wood)","isOptional":false,"isVarArg":false,"name":"buoyancy","type":"number"}],"description":"Sets the buoyancy ratio of the physics object. (How well it floats in water)","examples":[],"isConstructor":false,"name":"SetBuoyancyRatio","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The {{Enum|CONTENTS}}.","isOptional":false,"isVarArg":false,"name":"contents","type":"CONTENTS"}],"description":"Sets the contents flag of the {{Type|PhysObj}}.","examples":[],"isConstructor":false,"name":"SetContents","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Linear damping.","isOptional":false,"isVarArg":false,"name":"linearDamping","type":"number"},{"default":"","description":"Angular damping.","isOptional":false,"isVarArg":false,"name":"angularDamping","type":"number"}],"description":"Sets the linear and angular damping of the physics object.","examples":[],"isConstructor":false,"name":"SetDamping","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The drag coefficient\nIt can be positive or negative.","isOptional":false,"isVarArg":false,"name":"drag","type":"number"}],"description":"Modifies how much drag (air resistance) affects the object.","examples":[],"isConstructor":false,"name":"SetDragCoefficient","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The directional inertia of the object.<br>\nA value of Vector(0,0,0) makes the physobject go invalid.","isOptional":false,"isVarArg":false,"name":"directionalInertia","type":"Vector"}],"description":"Sets the directional inertia.","examples":[],"isConstructor":false,"name":"SetInertia","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The mass in kilograms.","isOptional":false,"isVarArg":false,"name":"mass","type":"number"}],"description":"Sets the mass of the physics object.","examples":[],"isConstructor":false,"name":"SetMass","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the phys material to use. From this list: [https://developer.valvesoftware.com/wiki/Material_surface_properties Valve Developer]","isOptional":false,"isVarArg":false,"name":"materialName","type":"string"}],"description":"Sets the material of the physobject.\n\n{{Note|Impact sounds will only change if this is called on client}}","examples":[{"code":"local tbl = {\n\t\"gmod_ice\", -- Makes the entity slide around\n\t\"gmod_bouncy\", -- Makes the entity bouncy\n\t\"gmod_silent\", -- Makes the entity not play sounds on impact\n\t\"flesh\" -- Makes the entity play flesh sounds on impact\n}\n\nlocal phys = SomeEntity:GetPhysicsObject()\n\nif ( IsValid( phys ) ) then\n\n\tphys:SetMaterial( table.Random( tbl ) )\n\nend","description":"Randomize the physical properties of an entity"}],"isConstructor":false,"name":"SetMaterial","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new position of the physobject.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"false","description":"","isOptional":true,"isVarArg":false,"name":"teleport","type":"boolean"}],"description":"Sets the position of the physobject.","examples":[],"isConstructor":false,"name":"SetPos","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new velocity of the phyiscs object.","isOptional":false,"isVarArg":false,"name":"velocity","type":"Vector"}],"description":"Sets the velocity of the physics object for the next iteration.","examples":[],"isConstructor":false,"name":"SetVelocity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new velocity of the physics object.","isOptional":false,"isVarArg":false,"name":"velocity","type":"Vector"}],"description":"Sets the velocity of the physics object.","examples":[],"isConstructor":false,"name":"SetVelocityInstantaneous","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Makes the physics object \"sleep\".\n\nThe physics object will no longer be moving unless it is \"woken up\" by either a collision with another moving object, or by {{ClassFunction|PhysObj|Wake}}. This is an optimization feature of the physics engine.","examples":[],"isConstructor":false,"name":"Sleep","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The position we should move to.","isOptional":false,"isVarArg":false,"name":"targetPosition","type":"Vector"},{"default":"","description":"The angle we should rotate towards.","isOptional":false,"isVarArg":false,"name":"targetAngles","type":"Angle"},{"default":"","description":"The frame time to use for this movement, can be generally filled with {{GlobalFunction|FrameTime}} or {{HookFunction|ENTITY|PhysicsSimulate}} with the deltaTime. \n\nCan be set to 0 when you need to update the physics object just once.","isOptional":false,"isVarArg":false,"name":"frameTime","type":"number"}],"description":"Unlike {{ClassFunction|PhysObj|SetPos}} and {{ClassFunction|PhysObj|SetAngles}}, this allows the movement of a physobj while leaving physics interactions intact.<br>\nThis is used internally by the motion controller of the Gravity Gun , the +use pickup and the Physics Gun, and entities such as the crane.\n\n{{Note|This is the ideal function to move a physics shadow created with {{ClassFunction|Entity|PhysicsInitShadow}} or {{ClassFunction|Entity|MakePhysicsObjectAShadow}}.}}","examples":[],"isConstructor":false,"name":"UpdateShadow","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Wakes the physics object.\n\nSee {{ClassFunction|PhysObj|Sleep}} for more information.","examples":[],"isConstructor":false,"name":"Wake","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The vector in world space coordinates.","isOptional":false,"isVarArg":false,"name":"vec","type":"Vector"}],"description":"Converts a vector to a relative to the physics object coordinate system.","examples":[],"isConstructor":false,"name":"WorldToLocal","realm":"shared","returns":[{"description":"The vector local to {{ClassFunction|PhysObj|GetPos}}.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"A vector in the world frame","isOptional":false,"isVarArg":false,"name":"WorldVec","type":"Vector"}],"description":"Rotate a vector from the world frame to the local frame of the physics object.\n\n{{Note|This function only rotates the vector, without any translation operation.}}","examples":[],"isConstructor":false,"name":"WorldToLocalVector","realm":"shared","returns":[{"description":"The corresponding vector relative to the PhysObj","type":"Vector"}]}],"isHook":false,"isPureAbstract":false,"name":"PhysObj"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The string ''type'' is a sequence of characters.\n\nThe string ''library'' is a standard Lua library which provides functions for the manipulation of strings.[https://www.lua.org/pil/20.html]\n\nIn Garry's Mod there are several extra useful functions and features added to this library.<br />\nMost notably all strings will access this library through the string metatable index function.[https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/includes/extensions/string.lua#L288-L299]\n\nThis means all strings are treated like table objects and the string library as its [http://wiki.garrysmod.com/page/Meta_Tables Meta Table]\n<pre>local x = \"Kittens\"\nfunction string.Foobar(self) return self:Right(4) end\n\nstring.Right(x,4) == x:Right(4) == x:Foobar() == (\"Kittens\"):Right(4) == x[-4]..x[-3]..x[-2]..x[-1]</pre>\n\nThe string ''metatable'' however is something else, and to access that you must use getmetatable(\"\"). \n<br />The difference here is related to [[Metamethods]], such as using (+) instead of (..) to concatenate strings.\n<pre>print(\"Kittens\" + \" And \" + \"Puppies\")\n\nfunction getmetatable(\"\").__add(str,x) return str..x end // This will work\nfunction string.__add(str,x) return str..x end // But this will not.</pre>\nSee [[Meta Tables]] and [[Metamethods]] for more information.\n{{Warning|Making changes to the string ''metatable'' is not a good idea unless you know what you are doing. Use the string ''library'' instead.}}\n\nThis category lists functions available in the string ''library''.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The string to get the chars from.","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"1","description":"The first character of the string to get the byte of.","isOptional":true,"isVarArg":false,"name":"startPos","type":"number"},{"default":"startPos","description":"The last character of the string to get the byte of.","isOptional":true,"isVarArg":false,"name":"endPos","type":"number"}],"description":"Returns the given string's characters in their numeric ASCII representation.","examples":[{"code":"print(string.byte(\"Hello, World!\", 1, 4))","description":"Prints the first 4 numerical bytes from the string \"Hello, World!\""}],"isConstructor":false,"name":"byte","realm":"shared and menu","returns":[{"description":"Numerical bytes","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The bytes to create the string from.","isOptional":false,"isVarArg":true,"name":"bytes","type":"any"}],"description":"Takes the given numerical bytes and converts them to a string.","examples":[{"code":"print( string.char( 72, 101, 108, 108, 111 ) )","description":"Prints a string consisting of the bytes 72, 101, 108, 108, 111"},{"code":"function string.Random( length )\n\n\tlocal length = tonumber( length )\n\n    if length < 1 then return end\n\n    local result = \"\" -- The empty string we start with\n\n    for i = 1, length do\n\n        result = result .. string.char( math.random(32, 126) )\n\n    end\n\n    return result\n\nend\n\nprint( string.Random( 10 ) )","description":"Helper function to create a random string."}],"isConstructor":false,"name":"char","realm":"shared and menu","returns":[{"description":"String built from given bytes","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The input number to commafy","isOptional":false,"isVarArg":false,"name":"InputNumber","type":"number"}],"description":"Inserts commas for every third digit.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"Comma","realm":"shared and menu","returns":[{"description":"Prettystring","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The function to get the bytecode of","isOptional":false,"isVarArg":false,"name":"func","type":"Function"},{"default":"false","description":"True to strip the debug data, false to keep it","isOptional":true,"isVarArg":false,"name":"stripDebugInfo","type":"boolean"}],"description":"Returns the binary bytecode of the given function.\n\n{{Note|This does not work with functions created in C/C++. An error will be thrown if it is}}","examples":[],"isConstructor":false,"name":"dump","realm":"shared and menu","returns":[{"description":"Bytecode","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string whose end is to be checked.","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"","description":"The string to be matched with the end of the first.","isOptional":false,"isVarArg":false,"name":"end","type":"string"}],"description":"Returns whether or not the second passed string matches the end of the first.","examples":[{"code":"local endswith = string.EndsWith(\"Supercalifragilisticexpialidocious\", \"docious\")\nif endswith then\n\tprint(\"Marry Poppins\")\nend","description":"Looks for arguments at the end of a string."}],"isConstructor":false,"name":"EndsWith","realm":"shared and menu","returns":[{"description":"''true'' if the first string ends with the second, or the second is empty, otherwise ''false''.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string will be separated wherever this sequence is found.","isOptional":false,"isVarArg":false,"name":"separator","type":"string"},{"default":"","description":"The string to split up.","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"","description":"Set this to true if your separator is a [[Patterns|pattern]].","isOptional":false,"isVarArg":false,"name":"use_patterns","type":"boolean"}],"description":"Splits a string up wherever it finds the given separator.\n\nThis is the reverse of {{LibraryFunction|string|Implode}}.","examples":[{"code":"local sentence = \"hello there my name is Player1\"\nlocal words = string.Explode( \" \", sentence )\nPrintTable( words )","description":"Splits a sentence into a table of the words in it."},{"code":"hook.Add( \"PlayerSay\", \"GiveHealth\", function( ply, text )\n\tlocal playerInput = string.Explode( \" \", text )\n\n\tif ( playerInput[1] == \"!givehealth\" ) then \n\n\t\tif ( tonumber( playerInput[2] ) ) then\n\n\t\t\tply:SetHealth( tonumber( playerInput[2] ) )\n\n\t\t\tprint( ply:Nick() .. \" set their health to \" .. playerInput[2] )\n\n\t\tend\n\n\tend\n\nend)","description":"Uses Explode to sort through words that a player says."}],"isConstructor":false,"name":"Explode","realm":"shared and menu","returns":[{"description":"Exploded string as a numerical sequential table.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to search in.","isOptional":false,"isVarArg":false,"name":"haystack","type":"string"},{"default":"","description":"The string to find, can contain patterns if enabled.","isOptional":false,"isVarArg":false,"name":"needle","type":"string"},{"default":"1","description":"The position to start the search from, can be negative start position will be relative to the end position.","isOptional":true,"isVarArg":false,"name":"startPos","type":"number"},{"default":"false","description":"Disable patterns.","isOptional":true,"isVarArg":false,"name":"noPatterns","type":"boolean"}],"description":"Attempts to find the specified substring in a string, uses [[Patterns]] by default.","examples":[{"code":"hook.Add( \"PlayerSay\", \"NoHeckHere\", function( ply, text )\n\tlocal heckStart, heckEnd = string.find( text:lower(), \"heck\" )\n\tif heckStart then\n\t\tlocal civilText = string.sub( text, 1, heckStart - 1 ) .. \"****\" .. string.sub( text, heckEnd + 1 )\n\t\treturn civilText\n\tend\nend )","description":"Change the word \"heck\" to \"****\" in chat messages"}],"isConstructor":false,"name":"find","realm":"shared and menu","returns":[{"description":"Starting position of the found text, or nil if the text wasn't found","type":"number"},{"description":"Ending position of found text, or nil if the text wasn't found","type":"number"},{"description":"Matched text for each group if patterns are enabled and used, or nil if the text wasn't found","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to be formatted.<br>\nFollows this format: http://www.cplusplus.com/reference/cstdio/printf/","isOptional":false,"isVarArg":false,"name":"format","type":"string"},{"default":"","description":"Values to be formatted into the string.","isOptional":false,"isVarArg":true,"name":"formatParameters","type":"any"}],"description":"Formats the specified values into the string given.","examples":[],"isConstructor":false,"name":"format","realm":"shared and menu","returns":[{"description":"The formatted string","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The time in seconds to format.","isOptional":false,"isVarArg":false,"name":"float","type":"number"},{"default":"nil","description":"An optional formatting to use. If no format it specified, a table will be returned instead.","isOptional":true,"isVarArg":false,"name":"format","type":"string"}],"description":"Returns the time as a formatted string or as a table if no format is given.","examples":[{"code":"local time = string.FormattedTime( 90, \"%02i:%02i:%02i\" )\nprint( time )","description":"Formats the time in seconds"},{"code":"local time = string.FormattedTime( 90 )\nPrintTable( time )","description":"Returns a table with the time separated by units."}],"isConstructor":false,"name":"FormattedTime","realm":"shared and menu","returns":[{"description":"Returns the time as a formatted string only if a format was specified.\n\nReturns a table only if no format was specified. The table will contain these fields:<br/>\n{{FuncArg|number|ms|milliseconds}}<br/>\n{{FuncArg|number|s|seconds}}<br/>\n{{FuncArg|number|m|minutes}}<br/>\n{{FuncArg|number|h|hours}}<br/>\n<br/>","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The color to put in the string.","isOptional":false,"isVarArg":false,"name":"color","type":"table"}],"description":"Creates a string from a Color variable.","examples":[{"code":"MsgN(string.FromColor(Color(255, 0, 255, 125)))","description":"Demonstrates the use of string.FromColor"}],"isConstructor":false,"name":"FromColor","realm":"shared and menu","returns":[{"description":"Output","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string that you will be searching with the supplied index.","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"","description":"The index's value of the string to be returned.","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"{{Deprecated|Use either string.sub(str, index, index) or str[index].}} Returns char value from the specified index in the supplied string.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"GetChar","realm":"shared and menu","returns":[{"description":"str","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"String eg. file-path to get the file extensions from.","isOptional":false,"isVarArg":false,"name":"file","type":"string"}],"description":"Returns extension of the file.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"GetExtensionFromFilename","realm":"shared and menu","returns":[{"description":"fileExtension","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string eg. file-path to get the file-name from.","isOptional":false,"isVarArg":false,"name":"pathString","type":"string"}],"description":"Returns file name and extension.","examples":[{"code":"print( string.GetFileFromFilename( \"garrysmod/lua/modules/string.lua\" ) )","description":"Returns the file name."}],"isConstructor":false,"name":"GetFileFromFilename","realm":"shared and menu","returns":[{"description":"The file name","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"String to get path from.","isOptional":false,"isVarArg":false,"name":"Inputstring","type":"string"}],"description":"Returns the path only from a file's path.","examples":[{"code":"MsgN(string.GetPathFromFilename(\"garrysmod/lua/modules/string.lua\"))","description":"Demonstrates the use of string.GetPathFromFilename"}],"isConstructor":false,"name":"GetPathFromFilename","realm":"shared and menu","returns":[{"description":"Path","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to search in","isOptional":false,"isVarArg":false,"name":"data","type":"string"},{"default":"","description":"The pattern to search for","isOptional":false,"isVarArg":false,"name":"pattern","type":"string"}],"description":"{{Deprecated|This function is removed in Lua versions later than what GMod is currently using. Use {{LibraryFunction|string|gmatch}} instead.}}Returns an iterator function that is called for every complete match of the pattern, all sub matches will be passed as to the loop.","examples":[{"code":"local s = \"my awesome stuff 12\"\nfor w in string.gfind(s, \"(%a)\") do\n    Msg(w)\nend","description":"Example usage of the function"}],"isConstructor":false,"name":"gfind","realm":"shared and menu","returns":[{"description":"The iterator function that can be used in a for-in loop","type":"Function"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to search in","isOptional":false,"isVarArg":false,"name":"data","type":"string"},{"default":"","description":"The pattern to search for","isOptional":false,"isVarArg":false,"name":"pattern","type":"string"}],"description":"Using [[Patterns]], returns an iterator which will return either one value if no capture groups are defined, or any capture group matches.","examples":[{"code":"str = \"qwe,a cde\"\nfor s in string.gmatch(str, \"[^%s,]+\") do\n    print(s)\nend","description":"Explodes the string for each space and comma in the string"}],"isConstructor":false,"name":"gmatch","realm":"shared and menu","returns":[{"description":"The iterator function that can be used in a for-in loop","type":"Function"}]},{"accessModifier":"public","arguments":[{"default":"","description":"String which should be modified.","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"","description":"The pattern that defines what should be matched and eventually be replaced.","isOptional":false,"isVarArg":false,"name":"pattern","type":"string"},{"default":"","description":"In case of a string the matches sequence will be replaced with it.\n\nIn case of a table, the matched sequence will be used as key and the table will tested for the key, if a value exists it will be used as replacement.\n\nIn case of a function all matches will be passed as parameters to the function, the return value(s) of the function will then be used as replacement.","isOptional":false,"isVarArg":false,"name":"replacement","type":"string"},{"default":"nil","description":"Maximum number of replacements to be made.","isOptional":true,"isVarArg":false,"name":"maxReplaces","type":"number"}],"description":"This functions main purpose is to replace certain character sequences in a string using [[Patterns]].","examples":[{"code":"string.gsub(\"hello there!\", \"hello\", \"hi\")","description":"Replaces \"hello\" with \"hi\" in the string \"hello there!\""}],"isConstructor":false,"name":"gsub","realm":"shared and menu","returns":[{"description":"replaceResult","type":"string"},{"description":"replaceCount","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"\"\"","description":"The separator to insert between each piece.","isOptional":true,"isVarArg":false,"name":"separator","type":"string"},{"default":"","description":"The table of pieces to concatenate. The keys for these must be numeric and sequential.","isOptional":true,"isVarArg":false,"name":"pieces","type":"table"}],"description":"{{Deprecated|You really should just use {{LibraryFunction|table|concat}}.}}\n\nJoins the values of a table together to form a string.\n\nThis is the reverse of {{LibraryFunction|string|Explode}} and is functionally identical to {{LibraryFunction|table|concat}}, but with less features.","examples":[{"code":"local tab = { \"one\", \"two\", \"three\" }\n\nprint( string.Implode( \" \", tab ) )","description":"Joins all values of a table with a space"}],"isConstructor":false,"name":"Implode","realm":"shared and menu","returns":[{"description":"Imploded pieces","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string that should be escaped.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Escapes special characters for JavaScript in a string, making the string safe for inclusion in to JavaScript strings.","examples":[{"code":"local user_input = \"The user's input lives in this variable\"\n\nlocal Panel = vgui.Create( \"DHTML\" )\nPanel:SetURL( \"example.com/something.html\" )\nPanel:Center()\nPanel:SetSize( 100, 100 )\nPanel:RunJavascript( \"MyJavaScriptFunction('\" .. string.JavascriptSafe( user_input ) .. \"')\" )","description":"Executes JavaScript on a panel using user input safely."}],"isConstructor":false,"name":"JavascriptSafe","realm":"shared and menu","returns":[{"description":"The escaped string.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to extract from.","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"","description":"Amount of chars relative to the beginning (starting from 1).","isOptional":false,"isVarArg":false,"name":"num","type":"number"}],"description":"Returns everything left of supplied place of that string.","examples":[{"code":"local text = \"garrys mod\"\nprint(string.Left(text, 5))","description":"Extracts \"garry\" from \"garrys mod\" string."}],"isConstructor":false,"name":"Left","realm":"shared and menu","returns":[{"description":"Returns a string containing a specified number of characters from the left side of a string.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to find the length of.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Counts the number of characters in the string (length). This is equivalent to using the length operator (#).","examples":[{"code":"print( string.len( \"hi\" ) )\nprint( string.len( \"drakehawke\" ) )\nprint( string.len( \"\" ) )\nprint( string.len( \"test\" ) == #\"test\" )","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"len","realm":"shared and menu","returns":[{"description":"Length of the string","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to convert.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Changes any upper-case letters in a string to lower-case letters.","examples":[{"code":"print( string.lower( \"ABCDEFG\" ) )\nprint( string.lower( \"AbCdefG\" ) )\nprint( string.lower( \"abcdefg\" ) )\nprint( string.lower( \"1234567890\" ) )","description":"Demonstrates the use of this function."},{"code":"-- All keys in this table must be lowercase:\nlocal products = {}\nproducts.apple = \"Buy an apple!\"\nproducts.banana = \"Buy a bunch of bananas!\"\nproducts.tomato = \"There's also tomatoes.\"\n\n-- This function is case-insensitive, meaning \"APPLE\", \"apple\", and \"APPle\" are all the same.\nfunction GetProduct(userinput)\n\treturn userinput, products[string.lower(userinput)]\nend\n\n-- Demonstration:\nprint(GetProduct(\"apple\"))\nprint(GetProduct(\"Apple\"))\nprint(GetProduct(\"APPLE\"))\nprint()\nprint(GetProduct(\"banana\"))\nprint(GetProduct(\"BaNaNa\"))","description":"Demonstrates a common use for string.lower - case-insensitive user input."}],"isConstructor":false,"name":"lower","realm":"shared and menu","returns":[{"description":"The original string, with all uppercase letters replaced with their lowercase variants.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"String which should be searched in for matches.","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"","description":"The pattern that defines what should be matched.","isOptional":false,"isVarArg":false,"name":"pattern","type":"string"},{"default":"1","description":"The start index to start the matching from, can be negative to start the match from a position relative to the end.","isOptional":true,"isVarArg":false,"name":"startPosition","type":"number"}],"description":"Finds a [[Patterns|Pattern]] in a string.","examples":[{"code":"local toMatch = \"this is a sample text\"\nprint( string.match( toMatch, \"sample\" ) )\n-- regex works\nprint( string.match( toMatch, \"^[a-z]\" ) )\nprint( string.match( toMatch, \"^this\" ) )\nprint( string.match( toMatch, \"^..is\" ) )\nprint( string.match( toMatch, \"text$\" ) )\n-- entire string\nprint( string.match( toMatch, \"^.*$\" ) )\n-- nil\nprint( string.match( toMatch, \"this$\" ) )\nprint( string.match( toMatch, \"nil\" ) )","description":""}],"isConstructor":false,"name":"match","realm":"shared and menu","returns":[{"description":"Matched text(s)","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The filesize in bytes.","isOptional":false,"isVarArg":false,"name":"bytes","type":"number"}],"description":"Converts a digital filesize to human-readable text.","examples":[{"code":"print(string.NiceSize(64512))","description":"Example output of this function."}],"isConstructor":false,"name":"NiceSize","realm":"shared and menu","returns":[{"description":"The human-readable filesize, in Bytes/KB/MB/GB (whichever is appropriate).","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The number to format, in seconds.","isOptional":false,"isVarArg":false,"name":"num","type":"number"}],"description":"Formats the supplied number (in seconds) to the highest possible time unit.","examples":[{"code":"print(string.NiceTime(600))\nprint(string.NiceTime(630))\nprint(string.NiceTime(660))\nprint(string.NiceTime(4356))\nprint(string.NiceTime(43545456))","description":""}],"isConstructor":false,"name":"NiceTime","realm":"shared and menu","returns":[{"description":"A nicely formatted time string.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to be sanitized","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Escapes all special characters within a string, making the string safe for inclusion in a Lua pattern.","examples":[{"code":"local result = string.gsub( \"You scored 100%!\", \n\t\t\t\t\t\t\tstring.PatternSafe( \"100%\" ), \n\t\t\t\t\t\t\tstring.PatternSafe( \"0%\" ) )\n\nprint( result )","description":"Replaces all occurrences of \"100%\" in a string with \"0%\" and prints it.\n\nWe call {{LibraryFunction|string|PatternSafe}} here as '%' is a special character when used in Lua patterns."}],"isConstructor":false,"name":"PatternSafe","realm":"shared and menu","returns":[{"description":"The string that has been sanitized for inclusion in Lua patterns","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to convert.","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"","description":"Timer to repeat, this values gets rounded internally.","isOptional":false,"isVarArg":false,"name":"repetitions","type":"number"},{"default":"\"\"","description":"String that will separate the repeated piece. Notice that it doesn't add this string to the start or the end of the result, only between the repeated parts.","isOptional":true,"isVarArg":false,"name":"separator","type":"string"}],"description":"Repeats a string by the provided number, with an optional separator.","examples":[{"code":"print(string.rep(\"abc\", 5))","description":"Repeating \"abc\" 5 times."},{"code":"print(string.rep(\"hello world\", 3, \" \"))","description":"Repeating \"hello world\" 3 times, with the separator \" \" (space)."}],"isConstructor":false,"name":"rep","realm":"shared and menu","returns":[{"description":"Repeated string.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string we are seeking to replace an occurrence(s).","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"","description":"What we are seeking to replace.","isOptional":false,"isVarArg":false,"name":"find","type":"string"},{"default":"","description":"What to replace find with.","isOptional":false,"isVarArg":false,"name":"replace","type":"string"}],"description":"Replaces all occurrences of the supplied second string.","examples":[{"code":"local text = \"Garrys Mod\"\nprint(string.Replace(text, \"Garrys\", \"Hers\"))","description":"Replaces the word \"Garrys\" by \"Hers\"."}],"isConstructor":false,"name":"Replace","realm":"shared and menu","returns":[{"description":"string","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to be reversed.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Reverses a string.","examples":[{"code":"print( string.reverse( \"abcdef\" ) )","description":"Reverse \"abcdef\"."}],"isConstructor":false,"name":"reverse","realm":"shared and menu","returns":[{"description":"reversed string","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to extract from.","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"","description":"Amount of chars relative to the end (starting from 1).","isOptional":false,"isVarArg":false,"name":"num","type":"number"}],"description":"Returns the last n-th characters of the string.","examples":[{"code":"local text = \"garrys mod\"\nprint( string.Right( text, 3 ) )","description":"Extracts \"mod\" from \"garrys mod\" string."}],"isConstructor":false,"name":"Right","realm":"shared and menu","returns":[{"description":"Returns a string containing a specified number of characters from the right side of a string.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The input string","isOptional":false,"isVarArg":false,"name":"InputString","type":"string"},{"default":"","description":"The character index, 1 is the first from left.","isOptional":false,"isVarArg":false,"name":"Index","type":"number"},{"default":"","description":"String to replace with.","isOptional":false,"isVarArg":false,"name":"ReplacementChar","type":"string"}],"description":"Sets the character at the specific index of the string.","examples":[{"code":"local str = \"Apples\"\nMsgN(string.SetChar(str, 3, \"g\"))","description":"Demonstrates the use of SetChar"}],"isConstructor":false,"name":"SetChar","realm":"shared and menu","returns":[{"description":"ModifiedString","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"String to split","isOptional":false,"isVarArg":false,"name":"Inputstring","type":"string"},{"default":"","description":"Character(s) to split with.","isOptional":false,"isVarArg":false,"name":"Separator","type":"string"}],"description":"Splits the string into a table of strings, separated by the second argument.","examples":[{"code":"local mystring = \"This is some text\"\nPrintTable( string.Split( mystring, \" \" ) )","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"Split","realm":"shared and menu","returns":[{"description":"Split table","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"String to check.","isOptional":false,"isVarArg":false,"name":"inputStr","type":"string"},{"default":"","description":"String to check with.","isOptional":false,"isVarArg":false,"name":"start","type":"string"}],"description":"Returns whether or not the first string starts with the second.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"StartWith","realm":"shared and menu","returns":[{"description":"Whether the first string starts with the second.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The path to change.","isOptional":false,"isVarArg":false,"name":"Inputstring","type":"string"}],"description":"Removes the extension of a path.","examples":[{"code":"MsgN(string.StripExtension(\"garrysmod/lua/modules/string.lua\"))","description":"Demonstrates the use of string.StripExtension"}],"isConstructor":false,"name":"StripExtension","realm":"shared and menu","returns":[{"description":"Modifiedstring","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string you'll take a sub-string out of.","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"","description":"The position of the first character that will be included in the sub-string.","isOptional":false,"isVarArg":false,"name":"StartPos","type":"number"},{"default":"nil","description":"The position of the last character to be included in the sub-string. It can be negative to count from the end.","isOptional":true,"isVarArg":false,"name":"EndPos","type":"number"}],"description":"Returns a sub-string, starting from the character at position ''StartPos'' of the string (inclusive), and optionally ending at the character at position ''EndPos'' of the string (also inclusive). If EndPos is not given, the rest of the string is returned.","examples":[{"code":"local mystring = \"Some random text\"\nprint(string.sub(mystring, 1, 4))","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"sub","realm":"shared and menu","returns":[{"description":"The substring.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to convert from.","isOptional":false,"isVarArg":false,"name":"Inputstring","type":"string"}],"description":"Fetches a Color type from a string.","examples":[{"code":"PrintTable( string.ToColor( \"255 0 255 125\" ) )","description":"Demonstrates the use of string.ToColor"}],"isConstructor":false,"name":"ToColor","realm":"shared and menu","returns":[{"description":"The output {{Struct|Color}}","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Time in seconds","isOptional":false,"isVarArg":false,"name":"time","type":"number"}],"description":"Returns given time in \"MM:SS\" format.","examples":[{"code":"print( string.ToMinutesSeconds( 61 ) )","description":"Example of using this function"}],"isConstructor":false,"name":"ToMinutesSeconds","realm":"shared and menu","returns":[{"description":"Formatted time","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Time in seconds","isOptional":false,"isVarArg":false,"name":"time","type":"number"}],"description":"Returns given time in \"MM:SS:MS\" format.","examples":[{"code":"print( string.ToMinutesSecondsMilliseconds( 61.128 ) )","description":"Example of using this function"}],"isConstructor":false,"name":"ToMinutesSecondsMilliseconds","realm":"shared and menu","returns":[{"description":"Formatted time","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string you'll turn into a table.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Splits the string into characters and creates a sequential table of characters.\n\n{{Warning|As a result of the [[Wikipedia:UTF-8|UTF-8]] encoding, non-ASCII characters will be split into more than one character in the output table. Each character value in the output table will always be 1 byte.}}","examples":[{"code":"local mystring = \"text\"\nPrintTable(string.ToTable(mystring))","description":"Demonstrates the use of this function."},{"code":"for k,v in ipairs(string.ToTable(\"abcd αβγδ\")) do\n\tprint(k, bit.tohex(string.byte(v)), v)\nend","description":"Demonstrates how this function behaves with non-ASCII characters - in this case, Greek letters."}],"isConstructor":false,"name":"ToTable","realm":"shared and menu","returns":[{"description":"A sequential table where each value is a character from the given string","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to trim.","isOptional":false,"isVarArg":false,"name":"Inputstring","type":"string"},{"default":"\" \"","description":"String to match.","isOptional":true,"isVarArg":false,"name":"Char","type":"string"}],"description":"Removes leading and trailing matches of a string.","examples":[{"code":"MsgN(string.Trim(\" hi whatsup \"))","description":"Demonstrates the use of string.Trim without second argument."}],"isConstructor":false,"name":"Trim","realm":"shared and menu","returns":[{"description":"Modified string","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"String to trim","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"\" \"","description":"Custom character to remove","isOptional":true,"isVarArg":false,"name":"char","type":"string"}],"description":"Removes leading spaces/characters from a string.","examples":[],"isConstructor":false,"name":"TrimLeft","realm":"shared and menu","returns":[{"description":"Trimmed string","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"String to remove from","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"\" \"","description":"Custom character to remove, default is a space","isOptional":true,"isVarArg":false,"name":"char","type":"string"}],"description":"Removes trailing spaces/passed character from a string.","examples":[],"isConstructor":false,"name":"TrimRight","realm":"shared and menu","returns":[{"description":"Trimmed string","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to convert.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Changes any lower-case letters in a string to upper-case letters.","examples":[{"code":"print( string.upper( \"ABCDEFG\" ) )\nprint( string.upper( \"AbCdefG\" ) )\nprint( string.upper( \"abcdefg\" ) )\nprint( string.upper( \"1234567890\" ) )","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"upper","realm":"shared and menu","returns":[{"description":"A string representing the value of a string converted to upper-case.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table of pieces to concatenate. The keys for these must be numeric and sequential.","isOptional":false,"isVarArg":false,"name":"pieces","type":"table"}],"description":"{{Deprecated|You really should just use {{LibraryFunction|table|concat}}.}}\n\nJoins the values of a table together to form a string.\n\nThis is the reverse of {{LibraryFunction|string|Explode}} and is functionally identical to {{LibraryFunction|table|concat}}, but with less features.","examples":[{"code":"local tab = { \"one\", \"two\", \"three\" }\n\nprint( string.Implode( \" \", tab ) )","description":"Joins all values of a table with a space"}],"isConstructor":false,"name":"Implode","realm":"shared and menu","returns":[{"description":"Imploded pieces","type":"string"}]}],"isHook":false,"isPureAbstract":false,"name":"string"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The surface library allows you to draw text and shapes on the screen. Primarily used for making HUDs & custom GUI panels.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The new font name.","isOptional":false,"isVarArg":false,"name":"fontName","type":"string"},{"default":"","description":"The font properties. See the {{Struct|FontData}}.","isOptional":false,"isVarArg":false,"name":"fontData","type":"FontData"}],"description":"Creates a new font.\n\nTo prevent the font from displaying incorrectly when using the \"outline\" setting, set \"antialias\" to false. This will ensure the text properly fills out the entire outline.\n\nBe sure to check the [[Default_Fonts|List of Default Fonts]] first! Those fonts can be used without using this function.\n\n{{Warning|Due to the static nature of fonts, do '''NOT''' create the font more than once. You should only be creating them once, it is recommended to create them at the top of your script. '''Do not use this function within '''{{HookFunction|GM|HUDPaint}}'''!'''}}\n\n{{Validate}}","examples":[{"code":"surface.CreateFont(\"TheDefaultSettings\", {\n\tfont = \"Arial\", --  Use the font-name which is shown to you by your operating system Font Viewer, not the file name\n\textended = false,\n\tsize = 13,\n\tweight = 500,\n\tblursize = 0,\n\tscanlines = 0,\n\tantialias = true,\n\tunderline = false,\n\titalic = false,\n\tstrikeout = false,\n\tsymbol = false,\n\trotary = false,\n\tshadow = false,\n\tadditive = false,\n\toutline = false,\n})","description":"Creates a font with all the defaults showing (any of the fields could be left out for an equivalent font)"}],"isConstructor":false,"name":"CreateFont","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to disable, false to enable the clipping","isOptional":false,"isVarArg":false,"name":"disable","type":"boolean"}],"description":"Enables or disables the clipping used by the VGUI that limits the drawing operations to a panels bounds.\n\nSee also {{GlobalFunction|DisableClipping}} and {{ClassFunction|Panel|NoClipping}}.","examples":[],"isConstructor":false,"name":"DisableClipping","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The center x integer coordinate.","isOptional":false,"isVarArg":false,"name":"originX","type":"number"},{"default":"","description":"The center y integer coordinate.","isOptional":false,"isVarArg":false,"name":"originY","type":"number"},{"default":"","description":"The radius of the circle.","isOptional":false,"isVarArg":false,"name":"radius","type":"number"},{"default":"","description":"The red value of the color to draw the circle with, or a {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"The green value of the color to draw the circle with. Unused if a {{Struct|Color}} was given.","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"The blue value of the color to draw the circle with. Unused if a {{Struct|Color}} was given.","isOptional":false,"isVarArg":false,"name":"b","type":"number"},{"default":"255","description":"The alpha value of the color to draw the circle with. Unused if a {{Struct|Color}} was given.","isOptional":true,"isVarArg":false,"name":"a","type":"number"}],"description":"Draws a hollow circle, made of dots. For a filled circle, see examples for {{LibraryFunction|surface|DrawPoly}}.\n\n{{RenderingContext|Function|2D}}","examples":[],"isConstructor":false,"name":"DrawCircle","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The start x integer coordinate.","isOptional":false,"isVarArg":false,"name":"startX","type":"number"},{"default":"","description":"The start y integer coordinate.","isOptional":false,"isVarArg":false,"name":"startY","type":"number"},{"default":"","description":"The end x integer coordinate.","isOptional":false,"isVarArg":false,"name":"endX","type":"number"},{"default":"","description":"The end y integer coordinate.","isOptional":false,"isVarArg":false,"name":"endY","type":"number"}],"description":"Draws a line from one point to another.\n\n{{RenderingContext|Function|2D}}","examples":[{"code":"hook.Add( \"HUDPaint\", \"Circle\", function()\n\tlocal center = Vector( ScrW() / 2, ScrH() / 2, 0 )\n\tlocal scale = Vector( 100, 100, 0 )\n\tlocal segmentdist = 360 / ( 2 * math.pi * math.max( scale.x, scale.y ) / 2 )\n\tsurface.SetDrawColor( 255, 0, 0, 255 )\n \n\tfor a = 0, 360 - segmentdist, segmentdist do\n\t\tsurface.DrawLine( center.x + math.cos( math.rad( a ) ) * scale.x, center.y - math.sin( math.rad( a ) ) * scale.y, center.x + math.cos( math.rad( a + segmentdist ) ) * scale.x, center.y - math.sin( math.rad( a + segmentdist ) ) * scale.y )\n\tend\nend )","description":"This example will draw a pixel perfect circle in the middle of your screen."}],"isConstructor":false,"name":"DrawLine","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The start x integer coordinate.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The start y integer coordinate.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The integer width.","isOptional":false,"isVarArg":false,"name":"w","type":"number"},{"default":"","description":"The integer height.","isOptional":false,"isVarArg":false,"name":"h","type":"number"}],"description":"Draws a hollow box with a border width of 1 px.\n\n{{RenderingContext|Function|2D}}","examples":[{"code":"surface.SetDrawColor( Color( 255, 255, 255, 255 ) )\nsurface.DrawOutlinedRect( 0, 0, 100, 100 )","description":"Draws a 100x100 outlined rectangle in top left corner."},{"code":"function draw.OutlinedBox( x, y, w, h, thickness, clr )\n\tsurface.SetDrawColor( clr )\n\tfor i=0, thickness - 1 do\n\t\tsurface.DrawOutlinedRect( x + i, y + i, w - i * 2, h - i * 2 )\n\tend\nend\n\n// Usage\nhook.Add( \"HUDPaint\", \"\", function()\n\tdraw.OutlinedBox( 0, 0, 100, 100, 2, Color( 255, 255, 255 ) )\nend )","description":"A convenience function to draw an outlined rect with given color and thickness"}],"isConstructor":false,"name":"DrawOutlinedRect","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A table containing integer vertices. See the {{Struct|PolygonVertex}}.\n\n'''The vertices must be in clockwise order.'''","isOptional":false,"isVarArg":false,"name":"vertices","type":"PolygonVertex"}],"description":"Draws a textured polygon (secretly a triangle fan) with a maximum of 256 vertices.\nOnly works properly with convex polygons. You may try to render concave polygons, but there is no guarantee that things wont get messed up.\n\nUnlike most surface library functions, non-integer coordinates are not rounded.\n\n{{Warning|You must reset the drawing color and texture before calling the function to ensure consistent results. See examples below.}}\n\n{{RenderingContext|Function|2D}}","examples":[{"code":"local triangle = {\n\t{ x = 100, y = 200 },\n\t{ x = 150, y = 100 },\n\t{ x = 200, y = 200 }\n}\n\nhook.Add(\"HUDPaint\", \"PolygonTest\", function()\n\t\n\tsurface.SetDrawColor( 255, 0, 0, 255 )\n\tdraw.NoTexture()\n\tsurface.DrawPoly( triangle )\n\nend )","description":"Draws a red triangle in the top left corner of the screen."},{"code":"function draw.Circle( x, y, radius, seg )\n\tlocal cir = {}\n\n\ttable.insert( cir, { x = x, y = y, u = 0.5, v = 0.5 } )\n\tfor i = 0, seg do\n\t\tlocal a = math.rad( ( i / seg ) * -360 )\n\t\ttable.insert( cir, { x = x + math.sin( a ) * radius, y = y + math.cos( a ) * radius, u = math.sin( a ) / 2 + 0.5, v = math.cos( a ) / 2 + 0.5 } )\n\tend\n\n\tlocal a = math.rad( 0 ) -- This is needed for non absolute segment counts\n\ttable.insert( cir, { x = x + math.sin( a ) * radius, y = y + math.cos( a ) * radius, u = math.sin( a ) / 2 + 0.5, v = math.cos( a ) / 2 + 0.5 } )\n\n\tsurface.DrawPoly( cir )\nend\n\nhook.Add(\"HUDPaint\", \"PolygonCircleTest\", function()\n\t\n\tsurface.SetDrawColor( 0, 0, 0, 200)\n\tdraw.NoTexture()\n\tdraw.Circle( ScrW() / 2, ScrH() / 2, 200, math.sin( CurTime() ) * 20 + 25 )\n\n\t--Usage:\n\t--draw.Circle( x, y, radius, segments )\n\nend )","description":"A helper function to draw a circle using surface.DrawPoly."}],"isConstructor":false,"name":"DrawPoly","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The X integer co-ordinate.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The Y integer co-ordinate.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The integer width of the rectangle.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The integer height of the rectangle.","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Draws a solid rectangle on the screen.\n\n{{RenderingContext|Function|2D}}","examples":[{"code":"hook.Add(\"HUDPaint\", \"MyRect\", function()\n    surface.SetDrawColor(255,255,255,255)\n    surface.DrawRect(25, 25, 100, 100)\nend)","description":"Draws a white 100 by 100 rectangle, 25 pixels from the top left of the screen."}],"isConstructor":false,"name":"DrawRect","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to be rendered.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Draw the specified text on the screen, using the previously set position, font and color.\n\n{{RenderingContext|Function|2D}}","examples":[{"code":"hook.Add( \"HUDPaint\", \"drawsometext\", function()\n\tsurface.SetFont( \"Default\" )\n\tsurface.SetTextColor( 255, 255, 255 )\n\tsurface.SetTextPos( 128, 128 ) \n\tsurface.DrawText( \"Hello World\" )\nend )","description":"Draws 'Hello World' on the screen. All functions in this example must be called for the draw to work flawlessly."}],"isConstructor":false,"name":"DrawText","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The X integer co-ordinate.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The Y integer co-ordinate.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The integer width of the rectangle.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The integer height of the rectangle.","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Draw a textured rectangle with the given position and dimensions on the screen, using the current active texture set with {{LibraryFunction|surface|SetMaterial}}. It is also affected by {{LibraryFunction|surface|SetDrawColor}}.\n\nSee also {{LibraryFunction|render|SetMaterial}} and {{LibraryFunction|render|DrawScreenQuadEx}}.<br>\nSee also {{LibraryFunction|surface|DrawTexturedRectUV}}.\n\n{{RenderingContext|Function|2D}}","examples":[{"code":"local ourMat = Material( \"models/wireframe\" ) -- Calling Material() every frame is quite expensive\n\nhook.Add( \"HUDPaint\", \"example_hook\", function()\n\tsurface.SetDrawColor( 255, 255, 255, 255 )\n\tsurface.SetMaterial( ourMat  ) -- If you use Material, cache it!\n\tsurface.DrawTexturedRect( 0, 0, 512, 512 )\nend )","description":"Draws a 512x512 textured rectangle with the wireframe texture."}],"isConstructor":false,"name":"DrawTexturedRect","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The X integer co-ordinate, representing the center of the rectangle.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The Y integer co-ordinate, representing the center of the rectangle.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The integer width of the rectangle.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The integer height of the rectangle.","isOptional":false,"isVarArg":false,"name":"height","type":"number"},{"default":"","description":"The rotation of the rectangle, in degrees.","isOptional":false,"isVarArg":false,"name":"rotation","type":"number"}],"description":"Draw a textured rotated rectangle with the given position and dimensions and angle on the screen, using the current active texture.\n\n{{RenderingContext|Function|2D}}","examples":[{"code":"function surface.DrawTexturedRectRotatedPoint( x, y, w, h, rot, x0, y0 )\n\t\n\tlocal c = math.cos( math.rad( rot ) )\n\tlocal s = math.sin( math.rad( rot ) )\n\t\n\tlocal newx = y0 * s - x0 * c\n\tlocal newy = y0 * c + x0 * s\n\t\n\tsurface.DrawTexturedRectRotated( x + newx, y + newy, w, h, rot )\n\t\nend","description":"A function that allows you to override the origin of rotation.\n\nx0 and y0 are relative to the center of the rectangle."},{"code":"function draw.RotatedBox( x, y, w, h, ang, color )\n\tdraw.NoTexture()\n\tsurface.SetDrawColor( color or color_white )\n\tsurface.DrawTexturedRectRotated( x, y, w, h, ang )\nend\n\nhook.Add( \"HUDPaint\", \"my_rotated_box\", function()\n\tdraw.RotatedBox( 100, 100, 100, 100, CurTime() % 360, Color( 255, 0, 0) )\nend )","description":"Draws a simple red forever rotating box."}],"isConstructor":false,"name":"DrawTexturedRectRotated","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The X integer coordinate.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The Y integer coordinate.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The integer width of the rectangle.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The integer height of the rectangle.","isOptional":false,"isVarArg":false,"name":"height","type":"number"},{"default":"","description":"The U texture mapping of the rectangle origin.","isOptional":false,"isVarArg":false,"name":"startU","type":"number"},{"default":"","description":"The V texture mapping of the rectangle origin.","isOptional":false,"isVarArg":false,"name":"startV","type":"number"},{"default":"","description":"The U texture mapping of the rectangle end.","isOptional":false,"isVarArg":false,"name":"endU","type":"number"},{"default":"","description":"The V texture mapping of the rectangle end.","isOptional":false,"isVarArg":false,"name":"endV","type":"number"}],"description":"Draws a textured rectangle with a repeated or partial texture.\n\nu and v refer to texture coordinates.\n* (u, v) = (0, 0) is the top left\n* (u, v) = (1, 0) is the top right\n* (u, v) = (1, 1) is the bottom right\n* (u, v) = (0, 1) is the bottom left\n\nUsing a start point of (1, 0) and an end point to (0, 1), you can draw an image flipped horizontally, same goes with other directions. Going above 1 will tile the texture. Negative values are allowed as well.\n\nHere's a helper image: http://i.imgur.com/SIKlpp4.png\n\n{{Note|If you are using a .png image, you need supply the \"noclamp\" flag as second parameter for {{GlobalFunction|Material}} if you intend to use tiling.}}\n\n{{Note|If you find that surface.DrawTexturedRectUV is getting your texture coordinates (u0, v0), (u1, v1) wrong and you're rendering with a material created with {{GlobalFunction|CreateMaterial}}, try adjusting them with the following code:\n<pre>\nlocal du = 0.5 / 32 -- half pixel anticorrection\nlocal dv = 0.5 / 32 -- half pixel anticorrection\nlocal u0, v0 = (u0 - du) / (1 - 2 * du), (v0 - dv) / (1 - 2 * dv)\nlocal u1, v1 = (u1 - du) / (1 - 2 * du), (v1 - dv) / (1 - 2 * dv)\n</pre>\n\n'''Explanation:'''<br>\nsurface.DrawTexturedRectUV tries to correct the texture coordinates by half a pixel (something to do with sampling) and computes the correction using IMaterial::GetMappingWidth()/GetMappingHeight(). If the material was created without a $basetexture, then GetMappingWidth()/GetMappingHeight() uses the width and height of the error material (which is 32x32).}}\n\n{{RenderingContext|Function|2D}}\n\n{{Bug|Issue=3173|The UV offsets might require (sub-)pixel correction for accurate tiling results.}}","examples":[{"code":"local mat = Material( \"gui/tool.png\" )\nhook.Add( \"HUDPaint\", \"DrawTexturedRectUV_example1\", function()\n\tsurface.SetDrawColor( color_white )\n\tsurface.SetMaterial( mat )\n\n\tsurface.DrawTexturedRect( 25, 25, 100, 100 )\n\tsurface.DrawTexturedRectUV( 25, 130, 100, 100, 0, 0, 1, 1 ) -- Exactly same as above line\n\n\t-- Draws right half of the texture\n\t-- Note that we also change the width of the rectangle to avoid stetcing of the texture\n\t-- This is for demonstration purposes, you can do whatever it is you need\n\tsurface.DrawTexturedRectUV( 130, 130, 50, 100, 0.5, 0, 1, 1 )\nend )","description":"Demonstrates the function usage."},{"code":"function PANEL:Paint( w, h )\n\t-- Size of your texture, texW - width, texH - height\n\tlocal texW = 16\n\tlocal texH = 16\n\n\tsurface.SetMaterial( Material( \"icon16/box.png\", \"noclamp\" ) )\n\tsurface.SetDrawColor( color_white )\n\tsurface.DrawTexturedRectUV( 0, 0, w, h, 0, 0, w / texW, h / texH )\nend","description":"Paints repeated texture over a panel"}],"isConstructor":false,"name":"DrawTexturedRectUV","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the current alpha multiplier affecting drawing operations.\n\n{{NextUpdate}}","examples":[],"isConstructor":false,"name":"GetAlphaMultiplier","realm":"client and menu","returns":[{"description":"The multiplier ranging from 0 to 1.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current color affecting draw operations.\n\n{{Bug|Issue=2407|The returned color will not have the color metatable.}}\n{{NextUpdate}}","examples":[],"isConstructor":false,"name":"GetDrawColor","realm":"client and menu","returns":[{"description":"The color that drawing operations will use as a {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the texture.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Gets the HUD texture with the specified name.","examples":[],"isConstructor":false,"name":"GetHUDTexture","realm":"client","returns":[{"description":"text","type":"ITexture"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current color affecting text draw operations.\n\n{{Bug|Issue=2407|The returned color will not have the color metatable.}}\n{{NextUpdate}}","examples":[],"isConstructor":false,"name":"GetTextColor","realm":"client and menu","returns":[{"description":"The color that text drawing operations will use as a {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to check the size of.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Returns the width and height (in pixels) of the given text, but only if the font has been set with {{LibraryFunction|surface|SetFont}}.","examples":[{"code":"surface.SetFont(\"Trebuchet24\")\n\nlocal message = \"Hello World\"\nlocal width, height = surface.GetTextSize(message)\n\nprint(\"Text width: \" .. width .. \", text height: \" .. height)","description":"Prints out the size of \"Hello World\" in the Trebuchet24 font."},{"code":"local message = \"Hello World\"\n\nsurface.SetFont(\"Trebuchet24\")\nlocal height = select(2, surface.GetTextSize(message))\n\nprint(height)","description":"Get text height very quickly. No tables or spare variables used."}],"isConstructor":false,"name":"GetTextSize","realm":"client and menu","returns":[{"description":"Width of the provided text","type":"number"},{"description":"Height of the provided text","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name or path of the texture.","isOptional":false,"isVarArg":false,"name":"name_path","type":"string"}],"description":"Returns the texture id of the material with the given name/path.\n\n{{Note|This function will not work with .png or .jpg images. For that, see {{GlobalFunction|Material}}}}","examples":[],"isConstructor":false,"name":"GetTextureID","realm":"client and menu","returns":[{"description":"The texture ID","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The texture ID, returned by {{LibraryFunction|surface|GetTextureID}}.","isOptional":false,"isVarArg":false,"name":"textureID","type":"number"}],"description":"Returns the size of the texture with the associated texture ID.","examples":[],"isConstructor":false,"name":"GetTextureSize","realm":"client and menu","returns":[{"description":"The texture width.","type":"number"},{"description":"The texture height.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The path to the sound file, which can be relative to the sound/ folder.","isOptional":false,"isVarArg":false,"name":"soundfile","type":"string"}],"description":"Play a sound file directly on the client (such as UI sounds, etc).","examples":[{"code":"surface.PlaySound( \"mysound.wav\" )","description":"Play a sound contained in addons/myaddon/sound/mysound.wav"},{"code":"surface.PlaySound(\"items/ammo_pickup.wav\")","description":"Plays the 'ammo pickup' sound."}],"isConstructor":false,"name":"PlaySound","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|You should use {{GlobalFunction|ScrH}} instead.}}\nReturns the height of the current client's screen.","examples":[{"code":"MsgN(\"Screen height: \" .. surface.ScreenHeight())","description":"Prints out the current height of the screen."}],"isConstructor":false,"name":"ScreenHeight","realm":"client and menu","returns":[{"description":"screenHeight","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|You should use {{GlobalFunction|ScrW}} instead.}}\nReturns the width of the current client's screen.","examples":[{"code":"MsgN(\"Screen width: \" .. surface.ScreenWidth())","description":"Prints out the current width of the screen."}],"isConstructor":false,"name":"ScreenWidth","realm":"client and menu","returns":[{"description":"screenWidth","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The multiplier ranging from 0 to 1.","isOptional":false,"isVarArg":false,"name":"multiplier","type":"number"}],"description":"Sets the alpha multiplier that will influence all upcoming drawing operations.","examples":[],"isConstructor":false,"name":"SetAlphaMultiplier","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The red value of color, or a {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"The green value of color. Unused if a {{Struct|Color}} was given.","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"The blue value of color. Unused if a {{Struct|Color}} was given.","isOptional":false,"isVarArg":false,"name":"b","type":"number"},{"default":"255","description":"The alpha value of color. Unused if a {{Struct|Color}} was given.","isOptional":true,"isVarArg":false,"name":"a","type":"number"}],"description":"Set the color of any future shapes to be drawn, can be set by either using r, g, b, a as separate values or by a {{Struct|Color}}. Using a color structure is not recommended to be created procedurally.","examples":[],"isConstructor":false,"name":"SetDrawColor","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the font to use.","isOptional":false,"isVarArg":false,"name":"fontName","type":"string"}],"description":"Set the current font to be used for text operations later.\n\nThe fonts must first be created with {{LibraryFunction|surface|CreateFont}} or be one of the [[Default Fonts]].","examples":[{"code":"hook.Add( \"HUDPaint\", \"HUDPaint_DrawABox\", function()\n\tsurface.SetDrawColor( 0, 0, 0, 128 ) -- Set color for background\n\tsurface.DrawRect( 100, 100, 128, 20 ) -- Draw background\n\n\tsurface.SetTextColor( 255, 255, 255 ) -- Set text color\n\tsurface.SetTextPos( 136, 104 ) -- Set text position, top left corner\n\tsurface.SetFont( \"Default\" ) -- Set the font\n\tsurface.DrawText( \"Hello World\" ) -- Draw the text\nend )","description":"Draws 'Hello World' on the screen, with the 'Default' font."}],"isConstructor":false,"name":"SetFont","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The material to be used.","isOptional":false,"isVarArg":false,"name":"material","type":"IMaterial"}],"description":"Sets the material to be used in all upcoming draw operations using the surface library.\n\nNot to be confused with {{LibraryFunction|render|SetMaterial}}.\n\nSee also {{LibraryFunction|surface|SetTexture}}.\n\n{{Warning|{{GlobalFunction|Material}} function calls are expensive to be done inside this function or inside rendering context, you should be caching the results of {{GlobalFunction|Material}} calls}}","examples":[],"isConstructor":false,"name":"SetMaterial","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The red value of color, or a {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"The green value of color","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"The blue value of color","isOptional":false,"isVarArg":false,"name":"b","type":"number"},{"default":"255","description":"The alpha value of color","isOptional":true,"isVarArg":false,"name":"a","type":"number"}],"description":"Set the color of any future text to be drawn, can be set by either using r, g, b, a as separate values or by a {{Struct|Color}}. Using a color structure is not recommended to be created procedurally.","examples":[{"code":"hook.Add( \"HUDPaint\", \"HUDPaint_DrawABox\", function()\n\tsurface.SetDrawColor( 0, 0, 0, 128 ) -- Set color for background\n\tsurface.DrawRect( 100, 100, 128, 20 ) -- Draw background\n\n\tsurface.SetTextColor( 255, 255, 255 ) -- Set text color\n\tsurface.SetTextPos( 136, 104 ) -- Set text position, top left corner\n\tsurface.SetFont( \"Default\" ) -- Set the font\n\tsurface.DrawText( \"Hello World\" ) -- Draw the text\nend )","description":"Draws 'Hello World', in white, near the top left of the screen."}],"isConstructor":false,"name":"SetTextColor","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The X integer co-ordinate.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The Y integer co-ordinate.","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"Set the top-left position to draw any future text at.","examples":[{"code":"hook.Add( \"HUDPaint\", \"HUDPaint_DrawABox\", function()\n\tsurface.SetDrawColor( 0, 0, 0, 128 ) -- Set color for background\n\tsurface.DrawRect( 100, 100, 128, 20 ) -- Draw background\n\n\tsurface.SetTextColor( 255, 255, 255 ) -- Set text color\n\tsurface.SetTextPos( 136, 104 ) -- Set text position, top left corner\n\tsurface.SetFont( \"Default\" ) -- Set the font\n\tsurface.DrawText( \"Hello World\" ) -- Draw the text\nend )","description":"Draws 'Hello World' on the screen, around top-left of the screen."}],"isConstructor":false,"name":"SetTextPos","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The ID of the texture to draw with returned by {{LibraryFunction|surface|GetTextureID}}.","isOptional":false,"isVarArg":false,"name":"textureID","type":"number"}],"description":"Sets the texture to be used in all upcoming draw operations using the surface library.\n\nSee also {{LibraryFunction|surface|SetMaterial}} for an {{Type|IMaterial}} alternative.","examples":[],"isConstructor":false,"name":"SetTexture","realm":"client and menu","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"surface"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The system library provides functions that allow you to gather information about the system running the game, such as operating system, uptime and battery level.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the total uptime of the current application as reported by Steam.\n\nThis will return a similar value to {{GlobalFunction|SysTime}}.\n\n{{Note|This function does not work on Dedicated Servers and will instead return no value.}}","examples":[],"isConstructor":false,"name":"AppTime","realm":"shared and menu","returns":[{"description":"Seconds of game uptime as an integer.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current battery power.","examples":[],"isConstructor":false,"name":"BatteryPower","realm":"shared and menu","returns":[{"description":"0-100 if on battery power.<br><br>\nIf plugged in, the value will be 255 regardless of charging state.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Flashes the window. Currently works only on Windows.","examples":[],"isConstructor":false,"name":"FlashWindow","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the country code of this computer, determined by the localisation settings of the OS.\n\n{{Note|This function does not work on Dedicated Servers and will instead return no value.}}","examples":[],"isConstructor":false,"name":"GetCountry","realm":"shared and menu","returns":[{"description":"Two-letter country code, using [http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1] standard.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the game window has focus.\n\nReturns true 100% of the time on OS X.\n\n{{Note|This function does not work on dedicated servers and will instead return no value.}}\n\n{{Bug|Issue=2424|This will return true when minimized in windowed-mode.}}","examples":[],"isConstructor":false,"name":"HasFocus","realm":"shared and menu","returns":[{"description":"Whether or not the game window has focus.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the current OS is Linux.","examples":[],"isConstructor":false,"name":"IsLinux","realm":"shared and menu","returns":[{"description":"Whether or not the game is running on Linux.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the current OS is OSX.","examples":[],"isConstructor":false,"name":"IsOSX","realm":"shared and menu","returns":[{"description":"Whether or not the game is running on OSX.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the game is being run in a window or in fullscreen (you can change this by opening the menu, clicking 'Options', then clicking the 'Video' tab, and changing the Display Mode using the dropdown menu):\n\n[[Image:DisplayModeDropdown.jpeg|300px]]","examples":[{"code":"if system.IsWindowed() then\n\tsystem.FlashWindow()\nend","description":"If the game is windowed, then the game window will flash"}],"isConstructor":false,"name":"IsWindowed","realm":"client and menu","returns":[{"description":"Is the game running in a window?","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the current OS is Windows.","examples":[],"isConstructor":false,"name":"IsWindows","realm":"shared and menu","returns":[{"description":"Whether the system the game runs on is Windows or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the synchronized Steam time. This is the number of seconds since the [http://en.wikipedia.org/wiki/Unix_time Unix epoch].\n\n{{Note|This function does not work on Dedicated Servers and will instead return no value.}}","examples":[],"isConstructor":false,"name":"SteamTime","realm":"shared and menu","returns":[{"description":"Current Steam-synchronized Unix time.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of seconds since the Steam user last moved their mouse.\n\nThis is a direct binding to ISteamUtils->GetSecondsSinceComputerActive, and is most likely related to Steam's automatic \"Away\" online status.\n\n{{Note|This function does not work on Dedicated Servers and will instead return no value.}}","examples":[],"isConstructor":false,"name":"UpTime","realm":"shared and menu","returns":[{"description":"The amount of seconds since the Steam user last moved their mouse.","type":"number"}]}],"isHook":false,"isPureAbstract":false,"name":"system"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The table ''type'' is an object that can store multiple values.\n\nThe table ''library'' is a standard Lua library which provides functions to manipulate tables. In Garry's Mod there are several extra useful functions added to this library.\n\nThis category lists the functions available in the table ''library''.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The table to insert the new values into.","isOptional":false,"isVarArg":false,"name":"target","type":"table"},{"default":"","description":"The table to retrieve the values from.","isOptional":false,"isVarArg":false,"name":"source","type":"table"}],"description":"Adds the contents from one table into another. The target table will be modified.\n\nSee also {{LibraryFunction|table|Inherit}} and {{LibraryFunction|table|Merge}}.","examples":[{"code":"local Test1 = {\"One\",\"Two\",\"Three\", \"Four\"}\nlocal Test2 = {\"Four\", \"Five\", \"Six\"}\ntable.Add( Test1, Test2 )\nprint( table.concat(Test1, \" \") )","description":"Demonstrates the use of this function. Note that duplicate values will be added."}],"isConstructor":false,"name":"Add","realm":"shared and menu","returns":[{"description":"The target table.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The original table to modify.","isOptional":false,"isVarArg":false,"name":"table","type":"table"},{"default":"false","description":"Save the keys within each member table. This will insert a new field ''__key'' into each value, and should not be used if the table contains non-table values.","isOptional":true,"isVarArg":false,"name":"saveKeys","type":"boolean"}],"description":"Changes all keys to sequential integers. This creates a new table object and does not affect the original.","examples":[{"code":"local Table = {One = \"A\", Two = \"B\", Three = \"C\"}\nlocal Table2 = table.ClearKeys(Table)\nPrintTable(Table2)","description":"Changes all the table's keys to integer values"},{"code":"local tbl = {\n\tFirstMember = { Name = \"John Smith\", Age  = 25 },\n\tSecondMember = { Name = \"Jane Doe\", Age = 42 },\n\tThirdMember = { Name = \"Joe Bloggs\", Age = 39 }\n}\nprint( \"<nowiki>===== Before =====</nowiki>\" )\nPrintTable( tbl )\nlocal tbl2 = table.ClearKeys( tbl, true )\nprint( \"<nowiki>===== After =====</nowiki>\" )\nPrintTable( tbl2 )","description":"Clears a table of its keys, and preserves the old key names within each member."}],"isConstructor":false,"name":"ClearKeys","realm":"shared and menu","returns":[{"description":"Table with integer keys.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Input table","isOptional":false,"isVarArg":false,"name":"input","type":"table"}],"description":"Collapses a table with keyvalue structure","examples":[{"code":"local output = table.CollapseKeyValue( {\n\t{ Key = \"mykey1\", Value = \"myvalue1\" },\n\t{ Key = 123, Value = 1345 },\n\t{ Key = 1345, Value = \"myvalue1\" },\n} )","description":"Example usage"}],"isConstructor":false,"name":"CollapseKeyValue","realm":"shared and menu","returns":[{"description":"Output table","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to concatenate.","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"},{"default":"\"\"","description":"A seperator to insert between strings","isOptional":true,"isVarArg":false,"name":"concatenator","type":"string"},{"default":"1","description":"The key to start at","isOptional":true,"isVarArg":false,"name":"startPos","type":"number"},{"default":"#tbl","description":"The key to end at","isOptional":true,"isVarArg":false,"name":"endPos","type":"number"}],"description":"Concatenates the contents of a table to a string.","examples":[{"code":"local Table = { \"A\", \"simple\", \"table.concat\", \"test\" }\nprint( table.concat( Table ) )\nprint( table.concat( Table, \" \" ) )\nprint( table.concat( Table, \" \", 3, 4 ) )","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"concat","realm":"shared and menu","returns":[{"description":"Concatenated values","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to be copied.","isOptional":false,"isVarArg":false,"name":"originalTable","type":"table"}],"description":"Creates a deep copy and returns that copy.\n\n{{Warning|This function does NOT copy userdata, such as {{Type|Vector}}s and {{Type|Angle}}s!}}","examples":[{"code":"B = table.Copy(A)","description":"Creates a deep copy of table A"}],"isConstructor":false,"name":"Copy","realm":"shared and menu","returns":[{"description":"A deep copy of the original table","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to copy from.","isOptional":false,"isVarArg":false,"name":"source","type":"table"},{"default":"","description":"The table to write to.","isOptional":false,"isVarArg":false,"name":"target","type":"table"}],"description":"Empties the target table, and merges all values from the source table into it.","examples":[{"code":"local Test1 = {A = \"String keys\", B = \"Table 1\"}\nlocal Test2 = {\"Numeric keys\", \"Table 2\"}\ntable.CopyFromTo( Test2, Test1 )\nPrintTable( Test1 )","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"CopyFromTo","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to count the keys of.","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"}],"description":"Counts the amount of keys in a table. This should only be used when a table is not numerically and sequentially indexed. For those tables, consider the length operator.","examples":[{"code":"Table = { A = \"1\", B = \"2\", C = \"3\", D = \"4\" }\n\nprint(table.Count( Table ) )","description":"There are 4 keys in this table. So it will output \"4\""}],"isConstructor":false,"name":"Count","realm":"shared and menu","returns":[{"description":"The number of keyvalue pairs. This includes non-numeric and non-sequential keys, unlike the length ('''#''') operator.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to be de-sanitised","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"}],"description":"Converts a table that has been sanitised with {{LibraryFunction|table|Sanitise}} back to its original form","examples":[],"isConstructor":false,"name":"DeSanitise","realm":"shared and menu","returns":[{"description":"De-sanitised table","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to empty.","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"}],"description":"Removes all values from a table.","examples":[{"code":"local Table = {\"String Value\", \"Another value\", Var = \"Non-integer key\"}\ntable.Empty(Table)\nprint( table.Count(Table) )","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"Empty","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to search","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"},{"default":"","description":"Value to return element after","isOptional":false,"isVarArg":false,"name":"value","type":"any"}],"description":"{{Deprecated|Instead, iterate the table using ipairs or increment from the previous index using {{GlobalFunction|next}}. Non-numerically indexed tables are not ordered.}}\nReturns the value positioned after the supplied value in a table. If it isn't found then the first element in the table is returned","examples":[{"code":"local tbl = {\"a\", \"b\", \"c\"}\n\nprint(table.FindNext(tbl, \"b\"))","description":"Print the next element after the \"b\" value of the table"}],"isConstructor":false,"name":"FindNext","realm":"shared and menu","returns":[{"description":"Found element","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to search","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"},{"default":"","description":"Value to return element before","isOptional":false,"isVarArg":false,"name":"value","type":"any"}],"description":"{{Deprecated|Instead, iterate your table with ipairs, storing the previous value and checking for the target. Non-numerically indexed tables are not ordered.}}\nReturns the value positioned before the supplied value in a table. If it isn't found then the last element in the table is returned","examples":[{"code":"local tbl = {\"a\", \"b\", \"c\"}\n\nprint(table.FindPrev(tbl, \"b\"))","description":"Print the previous item the value \"b\" of the table"}],"isConstructor":false,"name":"FindPrev","realm":"shared and menu","returns":[{"description":"Found element","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"{}","description":"Table to insert value in to","isOptional":true,"isVarArg":false,"name":"tab","type":"table"},{"default":"","description":"Value to insert","isOptional":true,"isVarArg":false,"name":"value","type":"any"}],"description":"Inserts a value in to the given table even if the table is non-existent","examples":[],"isConstructor":false,"name":"ForceInsert","realm":"shared and menu","returns":[{"description":"The supplied or created table","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to iterate over.","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"},{"default":"","description":"The function to run for each key and value.","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"}],"description":"{{Deprecated|This was deprecated in Lua 5.1 and removed in 5.2. You should use {{GlobalFunction|pairs}}() instead.}} Iterates for each key-value pair in the table, calling the function with the key and value of the pair. If the function returns anything, the loop is broken.\n\nThis is inherited from the original Lua implementation and is deprecated in Lua as of 5.1; see [http://lua-users.org/wiki/TableLibraryTutorial here]. You should use {{GlobalFunction|pairs}}() instead. The GLua interpretation of this is {{LibraryFunction|table|ForEach}}.","examples":[{"code":"local food = { \"Cake\", \"Pies\", Delicious = \"Cookies\", Awesome = \"Pizza\" }\ntable.foreach( food, function( key, value )\n print( tostring(key) ..\" \".. value)\nend)","description":"Demonstrates the use of this function."},{"code":"local tbl = { \"One\", \"Two\", \"Three\", \"Four\" }\ntable.foreach( tbl, function( key, value )\n   print( key, value )\n   if key == 2 then return true end\nend)","description":"Demonstrates the breaking effect if the callback returns a value."}],"isConstructor":false,"name":"foreach","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to iterate over.","isOptional":false,"isVarArg":false,"name":"tab","type":"table"},{"default":"","description":"Function to call for every key-value pair. Arguments passed are: \n* {{FuncArg|any|key}}\n* {{FuncArg|any|value}}","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"}],"description":"{{Deprecated|You should use {{GlobalFunction|pairs}}() instead.}} Iterates over a table and calls the given function for each key and value found. Unlike {{LibraryFunction|table|foreach}}, this ignores the value returned by the function.","examples":[],"isConstructor":false,"name":"ForEach","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to iterate over.","isOptional":false,"isVarArg":false,"name":"table","type":"table"},{"default":"","description":"The function to run for each index.","isOptional":false,"isVarArg":false,"name":"func","type":"Function"}],"description":"{{Deprecated|This was deprecated in Lua 5.1 and removed in 5.2. You should use {{GlobalFunction|ipairs}}() instead.}} Iterates for each numeric index in the table in order.\n\nThis is inherited from the original Lua implementation and is deprecated in Lua as of 5.1; see [http://lua-users.org/wiki/TableLibraryTutorial here]. You should use {{GlobalFunction|ipairs}}() instead.","examples":[],"isConstructor":false,"name":"foreachi","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to retrieve key from","isOptional":false,"isVarArg":false,"name":"tab","type":"table"}],"description":"{{Deprecated|Instead, expect the first key to be 1.\n\nNon-numerically indexed tables are not ordered and do not have a first key.}}\nReturns the first key found in the given table","examples":[],"isConstructor":false,"name":"GetFirstKey","realm":"shared and menu","returns":[{"description":"Key","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to retrieve value from","isOptional":false,"isVarArg":false,"name":"tab","type":"table"}],"description":"{{Deprecated|Instead, index the table with a key of 1.\n\nNon-numerically indexed tables are not ordered and do not have a first key.}}\nReturns the first value found in the given table","examples":[],"isConstructor":false,"name":"GetFirstValue","realm":"shared and menu","returns":[{"description":"Value","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to get keys of","isOptional":false,"isVarArg":false,"name":"tabl","type":"table"}],"description":"Returns all keys of a table.","examples":[{"code":"local tabl = {\none = \"A\",\ntwo = \"B\",\n}\nPrintTable( table.GetKeys( tabl ) )","description":"Example usage"}],"isConstructor":false,"name":"GetKeys","realm":"shared and menu","returns":[{"description":"Table of keys","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to retrieve key from","isOptional":false,"isVarArg":false,"name":"tab","type":"table"}],"description":"{{Deprecated|Instead, use the result of the length (#) operator, ensuring it is not zero. Non-numerically indexed tables are not ordered and do not have a last key.}}\nReturns the last key found in the given table","examples":[],"isConstructor":false,"name":"GetLastKey","realm":"shared and menu","returns":[{"description":"Key","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to retrieve value from","isOptional":false,"isVarArg":false,"name":"tab","type":"table"}],"description":"{{Deprecated|Instead, index the table with the result of the length (#) operator, ensuring it is not zero. Non-numerically indexed tables are not ordered and do not have a last key.}}\nReturns the last value found in the given table","examples":[],"isConstructor":false,"name":"GetLastValue","realm":"shared and menu","returns":[{"description":"Value","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to check.","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"}],"description":"{{Deprecated|This function was deprecated in Lua 5.1 and is removed in 5.2. Use the length (#) operator instead.}} Returns the length of the table.","examples":[],"isConstructor":false,"name":"getn","realm":"shared and menu","returns":[{"description":"Sequential length.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to search in.","isOptional":false,"isVarArg":false,"name":"inputTable","type":"table"}],"description":"Returns a key of the supplied table with the highest number value.","examples":[{"code":"favouriteFruit = { banana = 4, strawberry = 4, blueberry = 2, apple = 6 }\nprint(table.GetWinningKey(favouriteFruit))","description":"Code that looks up the most favourite fruit from a table where the fruit's name is the key, and it's number value determines how much favourite it is (the higher value, the better)."},{"code":"favouriteFruit = { apple = 1, banana = 7, strawberry = 3, blueberry = 7 }\nprint(table.GetWinningKey(favouriteFruit))","description":"A code that demonstrates a situation where there are two keys with the same value in the supplied table. String keys in the table represent the fruit name, and their number values determine how favourite it is (the higher value, the better)."}],"isConstructor":false,"name":"GetWinningKey","realm":"shared and menu","returns":[{"description":"winningKey","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to check","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"},{"default":"","description":"Value to search for","isOptional":false,"isVarArg":false,"name":"value","type":"any"}],"description":"Checks if a table has a value.\n{{Warning|This function is '''very inefficient for large tables''' (O(n)) and should probably not be called in things that run each frame. Instead, consider a table structure such as example 2 below.}}\n{{Note|For optimization, functions that look for a value by sorting the table should never be needed if you work on a table that you built yourself.}}","examples":[{"code":"local mytable = {\"123\", \"test\"}\nprint(table.HasValue(mytable, \"apple\"), table.HasValue(mytable, \"test\"))","description":"Creates a table with values \"123\" and \"test\" and checks to see it the table holds value \"apple\""},{"code":"local mytable = { [\"123\"] = true, test = true }\nprint(mytable[\"apple\"], mytable[\"test\"])","description":"Example usage of O(1) associative array structure"}],"isConstructor":false,"name":"HasValue","realm":"shared and menu","returns":[{"description":"Returns true if the table has that value, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to copy data to","isOptional":false,"isVarArg":false,"name":"target","type":"table"},{"default":"","description":"Table to copy data from","isOptional":false,"isVarArg":false,"name":"base","type":"table"}],"description":"Copies any missing data from base to target, and sets the target's ''BaseClass'' member to the base table's pointer.\n\nSee {{LibraryFunction|table|Merge}}, which overrides existing values and doesn't add a BaseClass member.<br/>\nSee also {{LibraryFunction|table|Add}}, which simply adds values of one table to another.\n\n{{Bug|Pull=1304|Sub-tables aren't inherited. The target's table value will take priority.}}","examples":[{"code":"local table1 = { \"A\", \"Golden\" }\nlocal table2 = { \"Two\", \"Orange\", \"Apple\" }\ntable.Inherit( table1, table2 )\nPrintTable( table1 )","description":"Example of how this function works."}],"isConstructor":false,"name":"Inherit","realm":"shared and menu","returns":[{"description":"Target","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to insert the variable into.","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"},{"default":"nil","description":"The position in the table to insert the variable.","isOptional":true,"isVarArg":false,"name":"position","type":"number"},{"default":"","description":"The variable to insert into the table.","isOptional":true,"isVarArg":false,"name":"value","type":"any"}],"description":"Inserts a value into a table at the end of the table or at the given position.","examples":[{"code":"sentence = { \"hello\", \"there\", \"my\", \"name\", \"is\", \"drakehawke\" }\ntable.insert( sentence, \"lol\" )\ntable.insert( sentence, 6, \"not\" )\n\nPrintTable( sentence )","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"insert","realm":"shared and menu","returns":[{"description":"The index the object was placed at.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to check","isOptional":false,"isVarArg":false,"name":"tab","type":"table"}],"description":"Returns whether or not the table's keys are sequential","examples":[],"isConstructor":false,"name":"IsSequential","realm":"shared and menu","returns":[{"description":"Is sequential","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to search","isOptional":false,"isVarArg":false,"name":"tab","type":"table"},{"default":"","description":"Value to search for","isOptional":false,"isVarArg":false,"name":"value","type":"any"}],"description":"Returns the first key found to be containing the supplied value","examples":[],"isConstructor":false,"name":"KeyFromValue","realm":"shared and menu","returns":[{"description":"Key","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to search","isOptional":false,"isVarArg":false,"name":"tab","type":"table"},{"default":"","description":"Value to search for","isOptional":false,"isVarArg":false,"name":"value","type":"any"}],"description":"Returns a table of keys containing the supplied value","examples":[],"isConstructor":false,"name":"KeysFromValue","realm":"shared and menu","returns":[{"description":"Keys","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to convert","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"}],"description":"Returns a copy of the input table with all string keys converted to be lowercase recursively","examples":[],"isConstructor":false,"name":"LowerKeyNames","realm":"shared and menu","returns":[{"description":"New table","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to search.","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"}],"description":"Returns the highest numerical key.","examples":[{"code":"local tbl = {\"One\", \"Two\", [6] = \"Six\", [42] = \"Answer to life, the universe, and everything\"}\n\nPrintTable(tbl)\nprint(\"\\n\" .. #tbl)\nprint(table.maxn(tbl))","description":"Demonstrates how this differs from the '''#''' operator."}],"isConstructor":false,"name":"maxn","realm":"shared and menu","returns":[{"description":"The highest numerical key.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table you want the source table to merge with","isOptional":false,"isVarArg":false,"name":"destination","type":"table"},{"default":"","description":"The table you want to merge with the destination table","isOptional":false,"isVarArg":false,"name":"source","type":"table"}],"description":"Merges the contents of the second table with the content in the first one.\n\nSee {{LibraryFunction|table|Inherit}}, which doesn't override existing values.<br/>\nSee also {{LibraryFunction|table|Add}}, which simply adds values of one table to another.","examples":[{"code":"local destination = {[1] = \"A\", [2] = \"Golden\", [3] = \"Apple\"}\nlocal source = {[1] = \"Two\", [2] = \"Orange\"}\ntable.Merge( destination, source )\nPrintTable( destination )","description":"\"Merges\" the content of the second table with the first one, overwriting any matching key/value pairs in the destination with the source's version and prints the resulting merge."}],"isConstructor":false,"name":"Merge","realm":"shared and menu","returns":[{"description":"Destination table","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to choose from.","isOptional":false,"isVarArg":false,"name":"haystack","type":"table"}],"description":"Returns a random value from the supplied table.\n\n{{Note|This function iterates over the given table '''twice''', therefore with sequential tables you should instead use following:\n<pre>mytable[ math.random( #mytable ) ]</pre>}}","examples":[{"code":"color = { \"green\", \"red\", \"blue\", \"yellow\" }\nobject = { \"car\", \"house\", \"bike\" }\n\nprint( \"I have a \" .. table.Random( color ) .. \" \" .. table.Random( object ) .. \".\" )","description":"A simple example of this function using two tables."},{"code":"websites = {\"facepunch.com\", \"google.com\", \"steampowered.com\"}\nprint(\"I think the best website ever is \" .. websites[math.random(1, #websites)] .. \".\")","description":"Example of using the alternative with sequential tables for performance reasons."}],"isConstructor":false,"name":"Random","realm":"shared and menu","returns":[{"description":"A random value from the table.","type":"any"},{"description":"The key associated with the random value.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to remove the value from.","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"},{"default":"#tbl","description":"The index of the value to remove.","isOptional":true,"isVarArg":false,"name":"index","type":"number"}],"description":"Removes a value from a table and shifts any other values down to fill the gap.","examples":[{"code":"sentence = { \"hello\", \"there\", \"my\", \"name\", \"is\", \"Player1\" }\nprint( table.remove( sentence ) ) -- Using no second arg removes the last value\nprint( table.remove( sentence, 2 ) )\nPrintTable( sentence )","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"remove","realm":"shared and menu","returns":[{"description":"The value that was removed.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table that will be searched.","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"},{"default":"","description":"The value to find within the table.","isOptional":false,"isVarArg":false,"name":"val","type":"any"}],"description":"Removes the first instance of a given value from the specified table with {{LibraryFunction|table|remove}}, then returns the key that the value was found at.","examples":[],"isConstructor":false,"name":"RemoveByValue","realm":"shared and menu","returns":[{"description":"The key at which the value was found, or false if the value was not found.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to reverse.","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"}],"description":"Returns a reversed copy of a sequential table. Any non-sequential and non-numeric keyvalue pairs will not be copied.","examples":[{"code":"local tbl = { \"One\", \"Two\", \"Three\", four = 4, [5] = \"5\" }\n\nPrintTable(tbl)\nprint(\"\")\nPrintTable(table.Reverse(tbl))","description":"Creates a table and reverses it."}],"isConstructor":false,"name":"Reverse","realm":"shared and menu","returns":[{"description":"A reversed copy of the table.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to sanitise","isOptional":false,"isVarArg":false,"name":"tab","type":"table"}],"description":"Converts {{Type|Vector}}s, {{Type|Angle}}s and {{Type|boolean}}s to be able to be converted to and from key-values. {{LibraryFunction|table|DeSanitise}} does the opposite","examples":[{"code":"local table1 = { \"A\", \"Golden\", Angle( 1, 2, 3 ), Vector( 1, 2, 3 ) }\n\nPrintTable( table.Sanitise( table1 ) )","description":"Example of what this function does."}],"isConstructor":false,"name":"Sanitise","realm":"shared and menu","returns":[{"description":"Sanitised table","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to sort.","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"},{"default":"","description":"If specified, the function will be called with 2 parameters each.\nReturn true in this function if you want the first parameter to come first in the sorted array.","isOptional":false,"isVarArg":false,"name":"sorter","type":"Function"}],"description":"Sorts a table either ascending or by the given sort function.","examples":[{"code":"local TABLE = {\n\t{\"Jeff\",8},\n\t{\"Peter\",17},\n\t{\"Shay\",11},\n\t{\"Janine\",1}\n}\n\ntable.sort(TABLE,function(a, b) return a[2] > b[2] end)","description":"Sorting table by an integer"},{"code":"local PLAYERS = player.GetAll()\n\ntable.sort(PLAYERS,function(a, b) return a:GetNWInt(\"Score\") > b:GetNWInt(\"Score\") end)","description":"Sorting a player table by a NWInt"}],"isConstructor":false,"name":"sort","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to sort. All values of this table must be of same type.","isOptional":false,"isVarArg":false,"name":"tab","type":"table"},{"default":"false","description":"Should the order be descending?","isOptional":true,"isVarArg":false,"name":"descending","type":"boolean"}],"description":"Returns a list of keys sorted based on values of those keys.\n\nFor normal sorting see {{LibraryFunction|table|sort}}.","examples":[{"code":"local t = {}\nt['h'] = 2 -- Lowest value\nt['a'] = 150 -- Highest value\nt['x'] = 30\n\nPrintTable( table.SortByKey( t ) )\nPrintTable( table.SortByKey( t , true ) )","description":"Example usage of the function."}],"isConstructor":false,"name":"SortByKey","realm":"shared and menu","returns":[{"description":"A table of keys sorted by values from supplied table.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to sort","isOptional":false,"isVarArg":false,"name":"tab","type":"table"},{"default":"","description":"The key used to identify the member","isOptional":false,"isVarArg":false,"name":"memberKey","type":"any"},{"default":"false","description":"Whether or not the order should be ascending","isOptional":true,"isVarArg":false,"name":"ascending","type":"boolean"}],"description":"Sorts a table by a named member","examples":[{"code":"local tab = {\n    {Name = \"Bill\", Age = 13},\n    {Name = \"Jill\", Age = 14},\n    {Name = \"Phil\", Age = 8}\n}\ntable.SortByMember(tab, \"Age\")\n\nfor k, v in ipairs(tab) do\n    print(v.Name)\nend","description":"Orders a table by a member and prints it"}],"isConstructor":false,"name":"SortByMember","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to sort in descending order.","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"}],"description":"Sorts a table in reverse order from {{LibraryFunction|table|sort}}","examples":[],"isConstructor":false,"name":"SortDesc","realm":"shared and menu","returns":[{"description":"sorted","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to iterate over.","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"},{"default":"","description":"Optional. A name for the table.","isOptional":false,"isVarArg":false,"name":"displayName","type":"string"},{"default":"","description":"Adds new lines and tabs to the string.","isOptional":false,"isVarArg":false,"name":"niceFormatting","type":"boolean"}],"description":"Converts a table into a string","examples":[{"code":"local Table = { Red = \"Apple\", Green = \"Celery\", Yellow = \"Banana\"}\nlocal String = table.ToString( Table, \"Fruit and Vegetable\", true )\nprint( String )","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"ToString","realm":"shared and menu","returns":[{"description":"The table formatted as a string.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to insert the variable into.","isOptional":false,"isVarArg":false,"name":"tbl","type":"table"},{"default":"","description":"The variable to insert into the table.","isOptional":false,"isVarArg":false,"name":"value","type":"any"}],"description":"Inserts a value into a table at the end of the table or at the given position.","examples":[{"code":"sentence = { \"hello\", \"there\", \"my\", \"name\", \"is\", \"drakehawke\" }\ntable.insert( sentence, \"lol\" )\ntable.insert( sentence, 6, \"not\" )\n\nPrintTable( sentence )","description":"Demonstrates the use of this function."}],"isConstructor":false,"name":"insert","realm":"shared and menu","returns":[{"description":"The index the object was placed at.","type":"number"}]}],"isHook":false,"isPureAbstract":false,"name":"table"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The team library gives you access to the team system built into the Source engine, and allows you to create custom teams and get information about them.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Index of the team","isOptional":false,"isVarArg":false,"name":"index","type":"number"},{"default":"","description":"Amount to increase the team's score by","isOptional":false,"isVarArg":false,"name":"increment","type":"number"}],"description":"Increases the score of the given team","examples":[],"isConstructor":false,"name":"AddScore","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the team index of the team with the least players. Falls back to TEAM_UNASSIGNED","examples":[],"isConstructor":false,"name":"BestAutoJoinTeam","realm":"shared","returns":[{"description":"Team index","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table consisting of information on every defined team","examples":[{"code":"PrintTable( team.GetAllTeams() )","description":"Prints all Jobs/Teams on the server. The list in printed from lowest to highest. Information about join able to the player, the score of the team and the colors."}],"isConstructor":false,"name":"GetAllTeams","realm":"shared","returns":[{"description":"Team info","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Index of the team","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"Returns the selectable classes for the given team. This can be added to with [[team/SetClass]]","examples":[],"isConstructor":false,"name":"GetClass","realm":"shared","returns":[{"description":"Selectable classes","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The team index.","isOptional":false,"isVarArg":false,"name":"teamIndex","type":"number"}],"description":"Returns the team's color.","examples":[],"isConstructor":false,"name":"GetColor","realm":"shared","returns":[{"description":"The team's color as a {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The team index.","isOptional":false,"isVarArg":false,"name":"teamIndex","type":"number"}],"description":"Returns the name of the team.","examples":[{"code":"print(team.GetName(Entity(1):Team()))","description":"Get's the teams string name."}],"isConstructor":false,"name":"GetName","realm":"shared","returns":[{"description":"The team name. If the team is not defined, returns an empty string.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The team index.","isOptional":false,"isVarArg":false,"name":"teamIndex","type":"number"}],"description":"Returns a table with all player of the specified team.","examples":[{"code":"PrintTable(team.GetPlayers(ply:Team()))","description":"Prints all the players in a player's team."}],"isConstructor":false,"name":"GetPlayers","realm":"shared","returns":[{"description":"A table of {{Type|Player}}s that belong to the requested team.","type":"Player[]"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The team index.","isOptional":false,"isVarArg":false,"name":"teamIndex","type":"number"}],"description":"Returns the score of the team.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"GetScore","realm":"shared","returns":[{"description":"score","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Index of the team","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"Returns a table of valid spawnpoint classes the team can use. These are set with {{LibraryFunction|team|SetSpawnPoint}}.","examples":[],"isConstructor":false,"name":"GetSpawnPoint","realm":"shared","returns":[{"description":"Valid spawnpoint classes","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Index of the team","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"Returns a table of valid spawnpoint entities the team can use. These are set with  {{LibraryFunction|team|SetSpawnPoint}}.","examples":[{"code":"print(table.Random(team.GetSpawnPoints(TEAM_RED)))","description":"Prints a random spawnpoint entity for TEAM_RED"}],"isConstructor":false,"name":"GetSpawnPoints","realm":"shared","returns":[{"description":"Valid spawnpoint entities","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The index of the team.","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"Returns if a team is joinable or not. This is set in {{LibraryFunction|team|SetUp}}.","examples":[],"isConstructor":false,"name":"Joinable","realm":"shared","returns":[{"description":"True if the team is joinable. False otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The team index.","isOptional":false,"isVarArg":false,"name":"teamIndex","type":"number"}],"description":"Returns the amount of players in a team.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"NumPlayers","realm":"shared","returns":[{"description":"playerCount","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Index of the team","isOptional":false,"isVarArg":false,"name":"index","type":"number"},{"default":"","description":"A class ID or table of class IDs","isOptional":false,"isVarArg":false,"name":"classes","type":"any"}],"description":"Sets valid classes for use by a team. Classes can be created using {{LibraryFunction|player_manager|RegisterClass}}","examples":[{"code":"team.SetClass( TEAM_RED, {\"Soldier\"} )","description":"Allows TEAM_RED to access the \"Soldier\" class"}],"isConstructor":false,"name":"SetClass","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The team index.","isOptional":false,"isVarArg":false,"name":"teamIndex","type":"number"},{"default":"","description":"The team's new color as a {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Sets the team's color.","examples":[],"isConstructor":false,"name":"SetColor","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index of the team","isOptional":false,"isVarArg":false,"name":"index","type":"number"},{"default":"","description":"The team's new score","isOptional":false,"isVarArg":false,"name":"score","type":"number"}],"description":"Sets the score of the given team","examples":[],"isConstructor":false,"name":"SetScore","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Index of the team","isOptional":false,"isVarArg":false,"name":"index","type":"number"},{"default":"","description":"A spawnpoint classname or table of spawnpoint classnames","isOptional":false,"isVarArg":false,"name":"classes","type":"any"}],"description":"Sets valid spawnpoint classes for use by a team.\n\n{{Note|GM.TeamBased must be set to true for this to work}}","examples":[{"code":"team.SetSpawnPoint( TEAM_BLUE, {\"info_terror\"} )","description":"Allows TEAM_BLUE to spawn at terrorist spawn points"}],"isConstructor":false,"name":"SetSpawnPoint","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The team index.","isOptional":false,"isVarArg":false,"name":"teamIndex","type":"number"},{"default":"","description":"The team name.","isOptional":false,"isVarArg":false,"name":"teamName","type":"string"},{"default":"","description":"The team color. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"teamColor","type":"Color"},{"default":"true","description":"Whether the team is joinable or not.","isOptional":true,"isVarArg":false,"name":"isJoinable","type":"boolean"}],"description":"Creates a new team.","examples":[{"code":"team.SetUp(2, \"Mingebags\", Color(255, 0, 0))","description":"Create team 2 with name \"Mingebags\" and color red"}],"isConstructor":false,"name":"SetUp","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The team index.","isOptional":false,"isVarArg":false,"name":"teamIndex","type":"number"}],"description":"Returns the sum of deaths of all players of the team.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"TotalDeaths","realm":"shared","returns":[{"description":"deathCount","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity or number.","isOptional":false,"isVarArg":false,"name":"Entity_or_number","type":"Entity"}],"description":"Get's the total frags in a team.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"TotalFrags","realm":"shared","returns":[{"description":"index","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Index of the team","isOptional":false,"isVarArg":false,"name":"index","type":"number"}],"description":"Returns true if the given team index is valid","examples":[],"isConstructor":false,"name":"Valid","realm":"shared","returns":[{"description":"Is valid","type":"boolean"}]}],"isHook":false,"isPureAbstract":false,"name":"team"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The timer library is a very useful set of functions which allow you to run a function periodically or after a given delay.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Identifier of the timer to adjust.","isOptional":false,"isVarArg":false,"name":"identifier","type":"any"},{"default":"","description":"The delay interval in seconds.","isOptional":false,"isVarArg":false,"name":"delay","type":"number"},{"default":"","description":"Repetitions. Use 0 for infinite.","isOptional":false,"isVarArg":false,"name":"repetitions","type":"number"},{"default":"","description":"The new function.","isOptional":false,"isVarArg":false,"name":"func","type":"Function"}],"description":"Adjusts the timer if the timer with the given identifier exists.","examples":[],"isConstructor":false,"name":"Adjust","realm":"shared and menu","returns":[{"description":"true if succeeded","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated}} This function does nothing.","examples":[],"isConstructor":false,"name":"Check","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Identifier of the timer to create. Must be unique. If a timer already exists with the same identifier, that timer will be updated to the new settings and reset.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string"},{"default":"","description":"The delay interval in seconds. If the delay is too small, the timer will fire on the next frame/tick.","isOptional":false,"isVarArg":false,"name":"delay","type":"number"},{"default":"","description":"The number of times to repeat the timer. Enter 0 for infinite repetitions.","isOptional":false,"isVarArg":false,"name":"repetitions","type":"number"},{"default":"","description":"Function called when timer has finished the countdown.","isOptional":false,"isVarArg":false,"name":"func","type":"Function"}],"description":"Creates a new timer that will repeat its function given amount of times.\nThis function also requires the timer to be named, which allows you to control it after it was created via the {{Lib|timer}}.\n\nFor a simple one-time timer with no identifiers, see {{LibraryFunction|timer|Simple}}.\n\n{{Note|Timers use {{GlobalFunction|CurTime}} for timing.}}\n{{Warning|Timers won't advance while the client is timing out from the server.}}","examples":[{"code":"local function PrintSomething( text )\n\tprint( text )\nend\n\nlocal function PrintNoArguments()\n\tprint( \"fun with timers!\" )\nend\n\nlocal function CreateSomeTimers( )\n\ttimer.Create( \"UniqueName1\", 1, 1, function() print(\"inside\") end )\n\ttimer.Create( \"UniqueName2\", 2, 0, function() PrintSomething(\"outside\") end )\n\ttimer.Create( \"UniqueName3\", 5, 1, PrintNoArguments )\nend\nhook.Add( \"Initialize\", \"Timer Example\", CreateSomeTimers )","description":"Creates a timer that has a 1 second delay and is only ran once ('UniqueName1'), a timer that has a 2 second delay and is ran continuously ('UniqueName2'), etc.\n\nThis shows the different ways you can interact with functions."},{"code":"local tick = {} \nlocal tick_key = 1 \n\nlocal function MinimumTimerDelay()\t\n\tlocal current_time = CurTime() \n\tif tick_key > 1 then \n\t\tprint( \"Timer Iteration #\" .. tick_key - 1 .. \" had a delay of \" .. current_time - tick[tick_key - 1])\n\tend\n\ttick[tick_key] = current_time \n\ttick_key = tick_key + 1\t\nend\n\nlocal function Timer()\n\ttimer.Create(\"Timer Delay\", (1/100), 10, MinimumTimerDelay ) \nend\n\nhook.Add(\"Initialize\", \"Commence Timers\", Timer)","description":"Creates a timer that has 0.01 second delay, to demonstrate that the \"minimum\" delay of a timer is locked at the tickrate period (1/66 seconds).\n\n(As the example below shows, by setting the delay rate to 1/100 (0.01 seconds), the difference in time between the iterations of the timer should be 0.01 seconds, but instead, it is 0.149 (1/66) seconds)."}],"isConstructor":false,"name":"Create","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Identifier of the timer to destroy.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string"}],"description":"{{Deprecated|You should be using {{LibraryFunction|timer|Remove}} instead.}} Stops and destroys the given timer. Alias of {{LibraryFunction|timer|Remove}}.","examples":[],"isConstructor":false,"name":"Destroy","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Identifier of the timer.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string"}],"description":"Returns whenever the given timer exists or not.","examples":[{"code":"if ( timer.Exists( \"TimerName\" ) ) then\n\n\t-- The timer exists\n\tprint( \"The timer exists\" )\n\t\nelse\n\t-- The timer doesn't exist\n\tprint( \"The timer does not exist!\" )\n\n\t-- Create a timer\n\ttimer.Create( \"TimerName\", 1, 0, function() print( \"I'm a Timer\" ) end)\nend","description":"Checks it the timer exists"}],"isConstructor":false,"name":"Exists","realm":"shared and menu","returns":[{"description":"Returns true if the timer exists, false if it doesn't","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Identifier of the timer.","isOptional":false,"isVarArg":false,"name":"identifier","type":"any"}],"description":"Pauses the given timer.","examples":[],"isConstructor":false,"name":"Pause","realm":"shared and menu","returns":[{"description":"false if the timer didn't exist or was already paused, true otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Identifier of the timer to remove.","isOptional":false,"isVarArg":false,"name":"identifier","type":"string"}],"description":"Stops and removes a timer created by {{LibraryFunction|timer|Create}}.","examples":[],"isConstructor":false,"name":"Remove","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Identifier of the timer.","isOptional":false,"isVarArg":false,"name":"identifier","type":"any"}],"description":"Returns amount of repetitions/executions left before the timer destroys itself.","examples":[],"isConstructor":false,"name":"RepsLeft","realm":"shared and menu","returns":[{"description":"The amount of executions left.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"How long until the function should be ran (in seconds). Use 0 to have the function run in the next {{HookFunction|GM|Think}}.","isOptional":false,"isVarArg":false,"name":"delay","type":"number"},{"default":"","description":"The function to run after the specified delay.","isOptional":false,"isVarArg":false,"name":"func","type":"Function"}],"description":"Creates a simple timer that runs the given function after a specified delay.\n\nFor a more advanced version that you can control after creation, see {{LibraryFunction|timer|Create}}.\n\n{{Note|Timers use {{GlobalFunction|CurTime}} for timing.}}\n{{Warning|Timers won't advance while the client is timing out from the server.}}","examples":[{"code":"timer.Simple( 5, function() print( \"Hello World\" ) end )","description":"Print \"Hello World\" after 5 seconds."},{"code":"for i = 1, 5 do\n\tlocal zombie = ents.Create(\"npc_zombie\")\n\tzombie:SetPos( Vector( i*40, 0 , 250 ) )\n\tzombie:Spawn()\n\n\ttimer.Simple( 10 + i, function() zombie:Remove() end  )\nend","description":"Spawns 5 zombies and creates a timer.Simple that removes them in 11, 12, 13, 14, and 15 seconds."}],"isConstructor":false,"name":"Simple","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Identifier of the timer.","isOptional":false,"isVarArg":false,"name":"identifier","type":"any"}],"description":"Restarts the given timer.\n\n{{Note|Timers use {{GlobalFunction|CurTime}} for timing.}}\n{{Warning|Timers won't advance while the client is timing out from the server.}}","examples":[],"isConstructor":false,"name":"Start","realm":"shared and menu","returns":[{"description":"true if the timer exists, false if it doesn't.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Identifier of the timer.","isOptional":false,"isVarArg":false,"name":"identifier","type":"any"}],"description":"Stops the given timer and rewinds it.","examples":[],"isConstructor":false,"name":"Stop","realm":"shared and menu","returns":[{"description":"false if the timer didn't exist or was already stopped, true otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Identifier of the timer.","isOptional":false,"isVarArg":false,"name":"identifier","type":"any"}],"description":"Returns amount of time left (in seconds) before the timer executes its function.\n\n{{Note|If the timer is paused, the amount will be negative.}}","examples":[],"isConstructor":false,"name":"TimeLeft","realm":"shared and menu","returns":[{"description":"The amount of time left (in seconds).","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Identifier of the timer.","isOptional":false,"isVarArg":false,"name":"identifier","type":"any"}],"description":"Runs either {{LibraryFunction|timer|Pause}} or {{LibraryFunction|timer|UnPause}} based on the timer's current status.","examples":[],"isConstructor":false,"name":"Toggle","realm":"shared and menu","returns":[{"description":"status of the timer.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Identifier of the timer.","isOptional":false,"isVarArg":false,"name":"identifier","type":"any"}],"description":"Unpauses the timer.","examples":[],"isConstructor":false,"name":"UnPause","realm":"shared and menu","returns":[{"description":"false if the timer didn't exist or was already running, true otherwise.","type":"boolean"}]}],"isHook":false,"isPureAbstract":false,"name":"timer"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"{{Deprecated|You should be using the {{Lib|net}} instead}}\n\nThe umsg (user message) library was previously the most common way of sending information from the server to the client. \n\n{{Warning|Usermessages have a limit of only 256 bytes!}}","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The angle to be sent.","isOptional":false,"isVarArg":false,"name":"angle","type":"Angle"}],"description":"Writes an angle to the usermessage.","examples":[],"isConstructor":false,"name":"Angle","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The bool to be sent.","isOptional":false,"isVarArg":false,"name":"bool","type":"boolean"}],"description":"Writes a bool to the usermessage.","examples":[],"isConstructor":false,"name":"Bool","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The char to be sent.","isOptional":false,"isVarArg":false,"name":"char","type":"number"}],"description":"Writes a signed char to the usermessage.","examples":[],"isConstructor":false,"name":"Char","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Dispatches the usermessage to the client(s).","examples":[],"isConstructor":false,"name":"End","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to be sent.","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"}],"description":"Writes an entity object to the usermessage.","examples":[],"isConstructor":false,"name":"Entity","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The float to be sent.","isOptional":false,"isVarArg":false,"name":"float","type":"number"}],"description":"Writes a float to the usermessage.","examples":[],"isConstructor":false,"name":"Float","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The int to be sent.","isOptional":false,"isVarArg":false,"name":"int","type":"number"}],"description":"Writes a signed int (32 bit) to the usermessage.","examples":[],"isConstructor":false,"name":"Long","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to be pooled.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"{{Deprecated|Inferior version of {{LibraryFunction|util|AddNetworkString}}}}\n\nThe string specified will be networked to the client and receive a identifying number, which will be sent instead of the string to optimize networking.","examples":[],"isConstructor":false,"name":"PoolString","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The short to be sent.","isOptional":false,"isVarArg":false,"name":"short","type":"number"}],"description":"Writes a signed short (16 bit) to the usermessage.","examples":[],"isConstructor":false,"name":"Short","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the message to be sent.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"If passed a player object, it will only be sent to the player, if passed a {{Type|CRecipientFilter}} of players, it will be sent to all specified players, if passed nil (or another invalid value), the message will be sent to all players.","isOptional":false,"isVarArg":false,"name":"filter","type":"CRecipientFilter"}],"description":"{{Deprecated|You should be using {{Lib|net}} instead}}\n\nStarts a new usermessage.\n\n{{Warning|Usermessages have a limit of only 256 bytes!}}","examples":[],"isConstructor":false,"name":"Start","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to be sent.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Writes a null terminated string to the usermessage.","examples":[{"code":"umsg.Start(\"Example_SendString\") -- With umsg.Start(\"Example_SendString\",pl) Must get pl value the player entity.\n\tumsg.String(\"Custom Text\")\numsg.End()","description":"An easy way to send any string to the client or clients"}],"isConstructor":false,"name":"String","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The vector to be sent.","isOptional":false,"isVarArg":false,"name":"vector","type":"Vector"}],"description":"Writes a Vector to the usermessage.","examples":[],"isConstructor":false,"name":"Vector","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The vector normal to be sent.","isOptional":false,"isVarArg":false,"name":"normal","type":"Vector"}],"description":"Writes a vector normal to the usermessage.","examples":[],"isConstructor":false,"name":"VectorNormal","realm":"server","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"umsg"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The undo library allows you to add custom entities to the undo list, allowing users to \"undo\" their creation with their undo (default: Z) key.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The entity to add","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Adds an entity to the current undo block","examples":[{"code":"prop = ents.Create(\"prop_physics\")\nprop:SetModel(\"models/props_junk/wood_crate001a.mdl\")\nprop:Spawn()\n\nundo.Create(\"prop\")\n\tundo.AddEntity(prop)\n\tundo.SetPlayer(Player)\nundo.Finish()","description":"This example creates a prop_physics, and adds it to the players undo list."}],"isConstructor":false,"name":"AddEntity","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The function to call","isOptional":false,"isVarArg":false,"name":"func","type":"Function"},{"default":"","description":"Arguments to pass to the function (after the undo info table)","isOptional":false,"isVarArg":true,"name":"arguments","type":"any"}],"description":"Adds a function to call when the current undo block is undone","examples":[{"code":"prop = ents.Create(\"prop_physics\")\nprop:SetModel(\"models/props_junk/wood_crate001a.mdl\")\nprop:Spawn()\nundo.Create(\"prop\")\n undo.AddEntity(prop)\n undo.AddFunction(function(tab, arg2)\n print(tab.Owner:GetName()..\" removed prop \"..tab.Entities[1]:GetModel()..\", code: \"..arg2)\n end, 556)\n undo.SetPlayer(ply)\nundo.Finish()","description":"This example creates a prop_physics, and adds it to the players undo list. A message will be printed to console about it."}],"isConstructor":false,"name":"AddFunction","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the undo message to show to players","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Begins a new undo entry","examples":[{"code":"","description":""}],"isConstructor":false,"name":"Create","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The undo block to process as an {{Struct|Undo}}","isOptional":false,"isVarArg":false,"name":"tab","type":"Undo"}],"description":"Processes an undo block (in table form). This is used internally by the undo manager when a player presses Z.","examples":[{"code":"local tab = {}\ntab.Owner = Entity(1)\ntab.Name = \"prop\"\ntab.Entities = {Entity(56),Entity(57)}\nundo.Do_Undo(tab)","description":"This example removes two entities, and informs player 1 that they just \"Undone Prop!\""}],"isConstructor":false,"name":"Do_Undo","realm":"server","returns":[{"description":"Number of removed entities","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Completes an undo entry, and registers it with the player's client","examples":[{"code":"","description":""}],"isConstructor":false,"name":"Finish","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Serverside, returns a table containing all undo blocks of all players. Clientside, returns a table of the local player's undo blocks.","examples":[],"isConstructor":false,"name":"GetTable","realm":"shared","returns":[{"description":"The undo table.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\nMakes the UI dirty - it will re-create the controls the next time it is viewed. We also take this opportun","examples":[],"isConstructor":false,"name":"MakeUIDirty","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The old entity","isOptional":false,"isVarArg":false,"name":"from","type":"Entity"},{"default":"","description":"The new entity to replace the old one","isOptional":false,"isVarArg":false,"name":"to","type":"Entity"}],"description":"Replaces any instance of the \"from\" reference with the \"to\" reference, in any existing undo block. Returns true if something was replaced","examples":[{"code":"","description":""}],"isConstructor":false,"name":"ReplaceEntity","realm":"server","returns":[{"description":"somethingReplaced","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to display when the undo block is undone","isOptional":false,"isVarArg":false,"name":"customText","type":"string"}],"description":"Sets a custom undo text for the current undo block","examples":[{"code":"local prop = ents.Create( \"prop_physics\" )\nprop:SetModel( \"models/props_junk/wood_crate001a.mdl\" )\nprop:Spawn()\nundo.Create( \"prop\" )\n undo.AddEntity( prop )\n undo.SetPlayer( Player )\n undo.SetCustomUndoText(\"Undone a crate prop\")\nundo.Finish()","description":"This example creates a prop_physics, adds it to the players undo list, and sets a custom undo text"}],"isConstructor":false,"name":"SetCustomUndoText","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player responsible for undoing the block","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Sets the player which the current undo block belongs to","examples":[{"code":"","description":""}],"isConstructor":false,"name":"SetPlayer","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\nAdds a hook (CPanelPaint) to the control panel paint function so we can determine when it is being drawn.","examples":[],"isConstructor":false,"name":"SetupUI","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"undo"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"{{Deprecated|You should be using the {{Lib|net}} instead}}\n\nThe usermessage library is used to receive user messages from the server on the client.\n\n{{Warning|Usermessages have a limit of only 256 bytes!}}","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Returns a table of every usermessage hook","examples":[],"isConstructor":false,"name":"GetTable","realm":"shared","returns":[{"description":"hooks","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The message name to hook to.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The function to be called if the specified message was received.\nParameters (Optional):\n* {{FuncArg|bf_read|msg}}\n* {{FuncArg|vararg|preArgs}}","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"},{"default":"nil","description":"Arguments that are passed to the callback function when the hook is called. *ring ring*","isOptional":false,"isVarArg":true,"name":"preArgs","type":"any"}],"description":"{{Deprecated|You should be using {{Lib|net}} instead}}\n\nSets a hook for the specified to be called when a usermessage with the specified name arrives.\n\n{{Warning|Usermessages have a limit of only 256 bytes!}}","examples":[],"isConstructor":false,"name":"Hook","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The message name.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The message.","isOptional":false,"isVarArg":false,"name":"msg","type":"bf_read"}],"description":"Called by the engine when a usermessage arrives, this method calls the hook function specified by {{LibraryFunction|usermessage|Hook}} if any.","examples":[],"isConstructor":false,"name":"IncomingMessage","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"usermessage"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The utf8 library provides basic support for UTF-8 encoding. This library does not provide any support for Unicode other than the handling of the encoding. Any operation that needs the meaning of a character, such as character classification, is outside its scope.\n\nUnless stated otherwise, all functions that expect a byte position as a parameter assume that the given position is either the start of a byte sequence or one plus the length of the subject string. As in the string library, negative indices count from the end of the string.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Unicode code points to be converted in to a UTF-8 string.","isOptional":false,"isVarArg":true,"name":"codepoints","type":"any"}],"description":"Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.","examples":[],"isConstructor":false,"name":"char","realm":"shared","returns":[{"description":"UTF-8 string generated from given arguments.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"=Not a function=\n\nThis is NOT a function, it's the [[Patterns|pattern]] (a string, not a function) <pre>\"[%z\\x01-\\x7F\\xC2-\\xF4][\\x80-\\xBF]*\"</pre>which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.\n\n[[Category:Functions]]\n[[Category:utf8]]\n[[Category:Shared]]\n[[Category:Documented_Functions]]\n[[Category:Library Functions]]","examples":[],"isConstructor":false,"name":"charpattern","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The string that you will get the code(s) from.","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"1","description":"The starting byte of the string to get the codepoint of.","isOptional":true,"isVarArg":false,"name":"startPos","type":"number"},{"default":"1","description":"The ending byte of the string to get the codepoint of.","isOptional":true,"isVarArg":false,"name":"endPos","type":"number"}],"description":"Returns the codepoints (as numbers) from all characters in the given string that start between byte position startPos and endPos. It raises an error if it meets any invalid byte sequence. This functions similarly to {{LibraryFunction|string|byte}}.","examples":[{"code":"print( utf8.codepoint( \"Мёнём\", 1, -1 ) )","description":"Demonstrates usage of the function."}],"isConstructor":false,"name":"codepoint","realm":"shared","returns":[{"description":"The codepoint number(s).","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string that you will get the codes from.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Returns an iterator (like {{LibraryFunction|string|gmatch}}) which returns both the position and codepoint of each utf8 character in the string. It raises an error if it meets any invalid byte sequence.","examples":[{"code":"for p, c in utf8.codes(\"( ͡° ͜ʖ ͡°)\") do\n    print(p,c)\nend","description":"Demonstrates usage of the function."}],"isConstructor":false,"name":"codes","realm":"shared","returns":[{"description":"The iterator (to be used in a for loop).","type":"Function"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string that will become a valid UTF-8 string.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Forces a string to contain only valid UTF-8 data. Invalid sequences are replaced with U+FFFD (the Unicode replacement character).\n\nThis is a lazy way for users to ensure a string contains only valid UTF-8 data.","examples":[],"isConstructor":false,"name":"force","realm":"shared","returns":[{"description":"The UTF-8 string.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to calculate the length of.","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"1","description":"The starting position to get the length from.","isOptional":true,"isVarArg":false,"name":"startPos","type":"number"},{"default":"-1","description":"The ending position to get the length from.","isOptional":true,"isVarArg":false,"name":"endPos","type":"number"}],"description":"Returns the number of UTF-8 sequences in the given string between positions startPos and endPos (both inclusive). If it finds any invalid UTF-8 byte sequence, returns false as well as the position of the first invalid byte.","examples":[{"code":"print( string.len( \"Мёнём\" ) )\nprint( utf8.len( \"Мёнём\" ) )","description":"Demonstrates output of this function compared to {{LibraryFunction|string|len}} when given a string that contains Russian text."}],"isConstructor":false,"name":"len","realm":"shared","returns":[{"description":"The number of UTF-8 characters in the string. If there are invalid bytes, this will be false.","type":"number"},{"description":"The position of the first invalid byte. If there were no invalid bytes, this will be nil.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string that you will get the byte position from.","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"","description":"The position to get the beginning byte position from.","isOptional":false,"isVarArg":false,"name":"n","type":"number"},{"default":"1 when n>=0, -1 otherwise","description":"The offset for n.","isOptional":true,"isVarArg":false,"name":"startPos","type":"number"}],"description":"Returns the byte-index of the n'th UTF-8-character after the given startPos (nil if none). startPos defaults to 1 when n is positive and -1 when n is negative. If n is zero, this function instead returns the byte-index of the UTF-8-character startPos lies within.","examples":[{"code":"print(utf8.offset(\"( ͡° ͜ʖ ͡°)\", 5))","description":"Returns the byte-index where the character at the 5th byte begins."}],"isConstructor":false,"name":"offset","realm":"shared","returns":[{"description":"Starting byte-index of the given position.","type":"number"}]}],"isHook":false,"isPureAbstract":false,"name":"utf8"},{"classFields":[],"collectionType":"class","customConstructor":"Player","description":"This is a list of all methods only available for players. It is also possible to call {{Type|Entity}} functions on the Player.","examples":[],"extends":"Entity","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The player index.","isOptional":false,"isVarArg":false,"name":"playerIndex","type":"number"}],"description":"Returns the player with the matching {{ClassFunction|Player|UserID}}.\n\nFor a function that returns a player based on their {{ClassFunction|Entity|EntIndex}}, see {{GlobalFunction|Entity}}.<br/>\nFor a function that returns a player based on their connection ID, see {{LibraryFunction|player|GetByID}}.<br/>","examples":[],"isConstructor":true,"name":"constructor","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the player's AccountID aka 32bit SteamID.\n\nFor bots and in singleplayer, this will return no value.","examples":[],"isConstructor":false,"name":"AccountID","realm":"shared","returns":[{"description":"Player's 32bit SteamID aka AccountID.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Cleanup type","isOptional":false,"isVarArg":false,"name":"type","type":"string"},{"default":"","description":"Entity to add","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Adds an entity to the players clean up list.<br/>\nNOTE: This function is only available in Sandbox and its derivatives.","examples":[],"isConstructor":false,"name":"AddCleanup","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity type","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"","description":"Entity","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Adds an entity to the total count of entities of same class.<br/>\n{{Note|This function is only available in Sandbox and its derivatives}}","examples":[],"isConstructor":false,"name":"AddCount","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"number of deaths to add","isOptional":false,"isVarArg":false,"name":"count","type":"number"}],"description":"Add a certain amount to the player's death count","examples":[{"code":"","description":""}],"isConstructor":false,"name":"AddDeaths","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"number of frags to add","isOptional":false,"isVarArg":false,"name":"count","type":"number"}],"description":"Add a certain amount to the player's frag count (or kills count)","examples":[{"code":"","description":""}],"isConstructor":false,"name":"AddFrags","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"Physics object belonging to ent","isOptional":false,"isVarArg":false,"name":"physobj","type":"PhysObj"}],"description":"Adds a entity to the players list of frozen objects.","examples":[],"isConstructor":false,"name":"AddFrozenPhysicsObject","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the vote","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Time until the vote expires","isOptional":false,"isVarArg":false,"name":"timeout","type":"number"},{"default":"","description":"The function to be run when the player presses 0-9 while a vote is active.","isOptional":false,"isVarArg":false,"name":"vote_callback","type":"Function"},{"default":"","description":"Used to draw the vote panel.","isOptional":false,"isVarArg":false,"name":"draw_callback","type":"Function"}],"description":"Sets up the voting system for the player.\nThis is a really barebone system. By calling this a vote gets started, when the player presses 0-9 the callback function gets called along with the key the player pressed. Use the draw callback to draw the vote panel.","examples":[{"code":"function AfterChoice(num) -- This is callback after we press number (Argument #3)\n\tchat.AddText(\"Your rate is \"..num..\". Thanks!\") \n\treturn true -- Return true to close vote\nend\n\nfunction VisualVote() -- This is drawing function (Argument #4)\n    draw.RoundedBox(4,ScrW()/2-300,ScrH()/2-25,600,50,Color(0,0,0,200))\n    draw.SimpleText(\"Rate our server by scale of zero to nine. Use number line to vote.\",\"Trebuchet24\",ScrW()/2,ScrH()/2,Color(255,255,255),1,1)\nend\n\nLocalPlayer():AddPlayerOption(\"SelectWeapon\",30,AfterChoice,VisualVote) -- Creates new vote","description":"Simple example. Prints player's choice in chat."}],"isConstructor":false,"name":"AddPlayerOption","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Gesture slot using {{Enum|GESTURE_SLOT}}","isOptional":false,"isVarArg":false,"name":"slot","type":"GESTURE_SLOT"},{"default":"","description":"The sequence ID to play, can be retrieved with {{ClassFunction|Entity|LookupSequence}}.","isOptional":false,"isVarArg":false,"name":"sequenceId","type":"number"},{"default":"","description":"The cycle to start the animation at, ranges from 0 to 1.","isOptional":false,"isVarArg":false,"name":"cycle","type":"number"},{"default":"false","description":"If the animation should not loop. true = stops the animation, false = the animation keeps playing.","isOptional":true,"isVarArg":false,"name":"autokill","type":"boolean"}],"description":"Plays a sequence directly from a sequence number, similar to {{ClassFunction|Player|AnimRestartGesture}}. This function has the advantage to play sequences that haven't been bound to an existing {{Enum|ACT}}","examples":[],"isConstructor":false,"name":"AddVCDSequenceToGestureSlot","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Checks if the player is alive.","examples":[{"code":"for k, v in pairs( player.GetAll() ) do\n   if ( v:Alive() ) then\n      v:Kill()\n   end\nend","description":"Loops through all the players and kills alive ones."}],"isConstructor":false,"name":"Alive","realm":"shared","returns":[{"description":"Whether the player is alive","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"True allows flashlight toggling","isOptional":false,"isVarArg":false,"name":"canFlashlight","type":"boolean"}],"description":"Sets if the player can toggle his flashlight. Function exists on both the server and client but has no effect when ran on the client.","examples":[],"isConstructor":false,"name":"AllowFlashlight","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Allow or disallow","isOptional":false,"isVarArg":false,"name":"allow","type":"boolean"}],"description":"Lets the player spray his decal without delay","examples":[],"isConstructor":false,"name":"AllowImmediateDecalPainting","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Slot to reset. See the {{Enum|GESTURE_SLOT}}.","isOptional":false,"isVarArg":false,"name":"slot","type":"GESTURE_SLOT"}],"description":"Resets player gesture in selected slot.","examples":[],"isConstructor":false,"name":"AnimResetGestureSlot","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Gesture slot using {{Enum|GESTURE_SLOT}}","isOptional":false,"isVarArg":false,"name":"slot","type":"GESTURE_SLOT"},{"default":"","description":"The activity ( see {{Enum|ACT}} ) or sequence that should be played","isOptional":false,"isVarArg":false,"name":"activity","type":"ACT"},{"default":"false","description":"Whether the animation should be automatically stopped. true = stops the animation, false = the animation keeps playing/looping","isOptional":true,"isVarArg":false,"name":"autokill","type":"boolean"}],"description":"Restart a gesture on a player, within a gesture slot.\n\n{{Warning|This is not automatically networked. This function has to be called on the client to be seen by said client.}}","examples":[{"code":"function SWEP:Initialize()\n\tself:SetHoldType(\"pistol\")\nend\n\nfunction SWEP:PrimaryAttack()\n\n\t-- Weapon attack delay\n\tself:SetNextPrimaryFire(CurTime()+0.5)\n\n\t-- Get entity in front of us\n\tlocal tr = util.TraceLine(util.GetPlayerTrace(self.Owner))\n\t\n\tlocal ent = tr.Entity\n\t\n\t-- If there's an enemy under 50 units in front of us\n\tif(IsValid(ent) && self.Owner:GetShootPos():Distance(tr.HitPos) < 50) then\n\t\n\t\t-- Play the melee attack animation\n\t\tself.Owner:AnimRestartGesture(GESTURE_SLOT_ATTACK_AND_RELOAD, ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE, true)\n\t\t\n\t\t-- Create damage info (server-side)\n\t\tif SERVER then\n\t\t\n\t\t\tlocal dmg = DamageInfo()\t\t\n\t\t\tdmg:SetDamage(math.random(5, 10))\n\t\t\tdmg:SetAttacker(self.Owner)\n\t\t\tdmg:SetInflictor(self)\n\t\t\tdmg:SetDamageForce(self.Owner:GetAimVector()*300)\n\t\t\tdmg:SetDamagePosition(tr.HitPos)\n\t\t\tdmg:SetDamageType(DMG_CLUB)\n\t\t\n\t\t\t-- Apply damage to enemy\n\t\t\tent:TakeDamageInfo(dmg)\n\t\t\t\n\t\tend\n\t\t\n\t\t-- Play impact sound\n\t\tent:EmitSound(\"physics/flesh/flesh_impact_bullet\"..math.random(1, 5)..\".wav\")\n\t\t\n\t\t-- Make viewmodel pistol whip effect\n\t\tself.Owner:ViewPunch(Angle(0, 45, 0))\n\t\t\n\telse\n\t\n\t\t-- Typical pistol shot code goes here\n\t\t-- Some can be found in 'weapon_base/shared.lua'\n\t\n\tend\n\t\nend","description":"Defines part of a SWEP with pistol whipping functionality by using a pistol hold type and AnimRestartGesture for the melee attack animation."}],"isConstructor":false,"name":"AnimRestartGesture","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Restarts the main animation on the player, has the same effect as calling {{ClassFunction|Entity|SetCycle}}( 0 ).","examples":[],"isConstructor":false,"name":"AnimRestartMainSequence","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The gesture slot. See {{Enum|GESTURE_SLOT}}","isOptional":false,"isVarArg":false,"name":"slot","type":"GESTURE_SLOT"},{"default":"","description":"Sequence ID to set.","isOptional":false,"isVarArg":false,"name":"sequenceID","type":"number"}],"description":"Sets the sequence of the animation playing in the given gesture slot.","examples":[],"isConstructor":false,"name":"AnimSetGestureSequence","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The gesture slot. See {{Enum|GESTURE_SLOT}}","isOptional":false,"isVarArg":false,"name":"slot","type":"GESTURE_SLOT"},{"default":"","description":"The weight this slot should be set to. Value must be ranging from 0 to 1.","isOptional":false,"isVarArg":false,"name":"weight","type":"number"}],"description":"Sets the weight of the animation playing in the given gesture slot.","examples":[],"isConstructor":false,"name":"AnimSetGestureWeight","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the player's armor.","examples":[{"code":"for _, v in pairs( player.GetAll( ) ) do\n    if v:Armor( ) == 0 then\n         v:SetArmor( 100 )\n    end\nend","description":"Loops through all the players and checks if they have any armor, if they do not, then sets their armor to 100."}],"isConstructor":false,"name":"Armor","realm":"shared","returns":[{"description":"The player's armor.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Duration of the ban in minutes (0 is permanent)","isOptional":false,"isVarArg":false,"name":"minutes","type":"number"},{"default":"false","description":"Whether to kick the player after banning then or not","isOptional":true,"isVarArg":false,"name":"kick","type":"boolean"}],"description":"Bans the player from the server for a certain amount of minutes.","examples":[{"code":"Entity(1):Ban( 1440, true )","description":"Kicks and bans the player for a day."}],"isConstructor":false,"name":"Ban","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns true if the player's flashlight hasn't been disabled by {{ClassFunction| Player|AllowFlashlight}}","examples":[],"isConstructor":false,"name":"CanUseFlashlight","realm":"shared","returns":[{"description":"canFlashlight","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"String to be printed","isOptional":false,"isVarArg":false,"name":"message","type":"string"}],"description":"Prints a string to the chatbox of the client.\n\n{{Warning|Just like the {{Lib|usermessage}}, this function is affected by the 255 byte limit!}}","examples":[{"code":"for k, ply in pairs(player.GetAll()) do\n\tply:ChatPrint(\"Hello World\")\nend","description":"Prints \"Hello World\" to chat of all players"}],"isConstructor":false,"name":"ChatPrint","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Limit type. In unmodified Sandbox possible values are:\n* \"props\"\n* \"ragdolls\"\n* \"vehicles\"\n* \"effects\"\n* \"balloons\"\n* \"cameras\"\n* \"npcs\"\n* \"sents\"\n* \"dynamite\"\n* \"lamps\"\n* \"lights\"\n* \"wheels\"\n* \"thrusters\"\n* \"hoverballs\"\n* \"buttons\"\n* \"emitters\"","isOptional":false,"isVarArg":false,"name":"limitType","type":"string"}],"description":"Checks if the limit is hit or not. If it is, it will throw a notification saying so.","examples":[],"isConstructor":false,"name":"CheckLimit","realm":"shared","returns":[{"description":"Returns true if limit is not hit, false if it is hit","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"command to run","isOptional":false,"isVarArg":false,"name":"command","type":"string"}],"description":"Runs the concommand on the player. This does not work on bots.\n\nIf you wish to directly modify the movement input of bots, use {{HookFunction|GM|StartCommand}} instead.\n\n{{Note|Some commands/convars are blocked from being ran/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see [[Blocked ConCommands]].}}","examples":[{"code":"ply:ConCommand(\"kill\")","description":"Kills the player using the concommand"}],"isConstructor":false,"name":"ConCommand","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Creates the player's ragdoll entity.<br/>\n<br/>\nThis is normally used when a player dies, to create their death ragdoll.<br/>\n<br/>\nThe ragdoll will be created with the player's properties such as [[Entity/GetPos|Position]], [[Entity/GetAngles|Angles]], [[Player/GetPlayerColor|PlayerColor]], [[Entity/GetVelocity|Velocity]] and [[Entity/GetModel|Model]].<br/>\n<br/>\nYou can retrieve the entity this creates with {{ClassFunction|Player|GetRagdollEntity}}.<br/>","examples":[],"isConstructor":false,"name":"CreateRagdoll","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Disables a players crosshair.","examples":[{"code":"Player(2):CrosshairDisable()","description":"Disables the players crosshair."}],"isConstructor":false,"name":"CrosshairDisable","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Enables crosshair of player.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"CrosshairEnable","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns whether the player is crouching or not","examples":[],"isConstructor":false,"name":"Crouching","realm":"shared","returns":[{"description":"Whether the player is crouching","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the player's death count","examples":[{"code":"function GM:PlayerDeathThink( ply, ent, att )\n\n\tif ply:Deaths() >= 10 then\n\n\t\treturn false\n\n\tend\n\n   return true\n\nend","description":"If the player's deaths are over 10, then they cannot spawn."}],"isConstructor":false,"name":"Deaths","realm":"shared","returns":[{"description":"The number of deaths the player has had.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Prints the players' name and position to the console.","examples":[],"isConstructor":false,"name":"DebugInfo","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Detonates all tripmines belonging to the player.","examples":[],"isConstructor":false,"name":"DetonateTripmines","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The data to send.","isOptional":false,"isVarArg":false,"name":"data","type":"number"}],"description":"Sends a third person animation event to the player.\n\nCalls {{HookFunction|GM|DoAnimationEvent}} with [[Enums/PLAYERANIMEVENT |PLAYERANIMEVENT_CUSTOM_GESTURE]] as the event, data as the given data.","examples":[],"isConstructor":false,"name":"DoAnimationEvent","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Starts the player's attack animation. The attack animation is determined by the weapon's HoldType.\n\nSimilar to other animation event functions, calls {{HookFunction|GM|DoAnimationEvent}} with [[Enums/PLAYERANIMEVENT |PLAYERANIMEVENT_ATTACK_PRIMARY]] as the event and no extra data.","examples":[],"isConstructor":false,"name":"DoAttackEvent","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The event to send. See {{Enum|PLAYERANIMEVENT}}.","isOptional":false,"isVarArg":false,"name":"event","type":"PLAYERANIMEVENT"},{"default":"","description":"The data to send alongside the event.","isOptional":false,"isVarArg":false,"name":"data","type":"number"}],"description":"Sends a specified third person animation event to the player.\n\nCalls {{HookFunction|GM|DoAnimationEvent}} with specified arguments.","examples":[],"isConstructor":false,"name":"DoCustomAnimEvent","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Sends a third person reload animation event to the player.\n\nSimilar to other animation event functions, calls {{HookFunction|GM|DoAnimationEvent}} with [[Enums/PLAYERANIMEVENT |PLAYERANIMEVENT_RELOAD]] as the event and no extra data.","examples":[],"isConstructor":false,"name":"DoReloadEvent","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Sends a third person secondary fire animation event to the player.\n\nSimilar to other animation event functions, calls {{HookFunction|GM|DoAnimationEvent}} with [[Enums/PLAYERANIMEVENT |PLAYERANIMEVENT_ATTACK_SECONDARY]] as the event and no extra data.","examples":[],"isConstructor":false,"name":"DoSecondaryAttack","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Should draw","isOptional":false,"isVarArg":false,"name":"draw","type":"boolean"},{"default":"0","description":"Which view model to show/hide, 0-2.","isOptional":true,"isVarArg":false,"name":"vm","type":"number"}],"description":"Show/Hide the player's weapon's viewmodel.","examples":[{"code":"local cvarObject = CreateClientConVar(\"nogun\", \"1\", true, false, \"Hide the current viewmodel.\") -- Create the ConVar object\n\nhook.Add(\"HUDPaint\", \"draw_viewmodel\", function()\n\tLocalPlayer():DrawViewModel(cvarObject:GetBool()) -- Call ConVar:GetBool() inside the parameters of DrawViewModel\nend)","description":"Create a {{Type|ConVar}} object on the client realm to enable/disable the viewmodel."}],"isConstructor":false,"name":"DrawViewModel","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Should draw","isOptional":false,"isVarArg":false,"name":"draw","type":"boolean"}],"description":"Show/Hide the player's weapon's worldmodel.","examples":[],"isConstructor":false,"name":"DrawWorldModel","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The class to drop.","isOptional":false,"isVarArg":false,"name":"classRef","type":"string"}],"description":"Drops the players' weapon of a specific class.","examples":[],"isConstructor":false,"name":"DropNamedWeapon","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Drops any object the player is currently holding with either gravitygun or +Use (E key)","examples":[],"isConstructor":false,"name":"DropObject","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Weapon to be dropped","isOptional":false,"isVarArg":false,"name":"weapon","type":"Weapon"}],"description":"Forces the player to drop the specified weapon","examples":[{"code":"local ply = Entity( 1 )\nfor k, v in pairs( ply:GetWeapons( ) ) do\n\tply:DropWeapon( v )\nend","description":"Drops all the player's weapons"}],"isConstructor":false,"name":"DropWeapon","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Vehicle the player will enter","isOptional":false,"isVarArg":false,"name":"vehicle","type":"Vehicle"}],"description":"Enters the player into specified vehicle","examples":[{"code":"local jeep = ply:GetEyeTrace().Entity\nply:EnterVehicle(jeep)","description":"Enters the player into the vehicle they're looking at"}],"isConstructor":false,"name":"EnterVehicle","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Equips the player with the HEV suit.\n\nAllows the player to zoom, walk slowly, sprint, pickup armor batteries, use the health and armor stations and also shows the HUD.<br>\nThe player also emits a flatline sound on death, which can be overridden with {{HookFunction|GM|PlayerDeathSound}}.\n\nThe player is automatically equipped with the suit on spawn, if you wish to stop that, use {{ClassFunction|Player|RemoveSuit}}.","examples":[],"isConstructor":false,"name":"EquipSuit","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Makes the player exit the vehicle if they're in one.","examples":[{"code":"Entity(1):ExitVehicle()","description":"Make player 1 leave his vehicle if he's driving one."}],"isConstructor":false,"name":"ExitVehicle","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Turns the flashlight on/off","isOptional":false,"isVarArg":false,"name":"isOn","type":"boolean"}],"description":"Enables/Disables the player's flashlight","examples":[{"code":"","description":""}],"isConstructor":false,"name":"Flashlight","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns true if the player's flashlight is on.","examples":[],"isConstructor":false,"name":"FlashlightIsOn","realm":"shared","returns":[{"description":"Whether the player's flashlight is on.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of kills a player has.","examples":[{"code":"print(Player2(1):Frags())","description":"Prints the players frags in console."}],"isConstructor":false,"name":"Frags","realm":"shared","returns":[{"description":"kills","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"false","description":"Whether the player should be frozen.","isOptional":true,"isVarArg":false,"name":"frozen","type":"boolean"}],"description":"Freeze the player. Frozen players cannot move, look around, or attack. Key bindings are still called. Similar to {{ClassFunction|Player|Lock}} but the player can still take damage.\n\nAdds or removes the [[Enums/FL|FL_FROZEN]] flag from the player.\n\n{{Note|Frozen bots will still be able to turn with bot_mimic 1}}","examples":[{"code":"for k, v in pairs(player.GetAll()) do\n    v:Freeze( true )\nend","description":"Freezes all players"}],"isConstructor":false,"name":"Freeze","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the player's active weapon.","examples":[{"code":"print(ply:GetActiveWeapon():GetClass())","description":"Prints the player's active weapon's class name."}],"isConstructor":false,"name":"GetActiveWeapon","realm":"shared","returns":[{"description":"The weapon the player is currently has equipped.","type":"Weapon"}]},{"accessModifier":"public","arguments":[],"description":"Returns the direction that the player is aiming.","examples":[{"code":"local pl = player.GetByID( 1 )\npl:SetVelocity( pl:GetAimVector() * 1000 )","description":"Launches the player in the direction they're facing."}],"isConstructor":false,"name":"GetAimVector","realm":"shared","returns":[{"description":"The direction vector of players aim","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the players' model is allowed to rotate around the pitch and roll axis.","examples":[],"isConstructor":false,"name":"GetAllowFullRotation","realm":"shared","returns":[{"description":"Allowed","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the player is allowed to use his weapons in a vehicle or not.","examples":[],"isConstructor":false,"name":"GetAllowWeaponsInVehicle","realm":"shared","returns":[{"description":"Whether the player is allowed to use his weapons in a vehicle or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The ammunition type. Can be either {{Type|number}} ammo ID or {{Type|string}} ammo name.","isOptional":false,"isVarArg":false,"name":"ammotype","type":"number | string"}],"description":"Gets the amount of ammo the player has.","examples":[{"code":"function GetAmmoForCurrentWeapon( ply )\n\tif ( !IsValid( ply ) ) then return -1 end\n\n\tlocal wep = ply:GetActiveWeapon()\n\tif ( !IsValid( wep ) ) then return -1 end\n \n\treturn ply:GetAmmoCount( wep:GetPrimaryAmmoType() )\nend","description":"A function that returns the ammo for the weapon the player is currently holding."},{"code":"print(Entity(1):GetAmmoCount( 3 ))\nprint(Entity(1):GetAmmoCount( \"3\" ))\nprint(Entity(1):GetAmmoCount( \"pistol\" ) )","description":"Example usage. \"pistol\" ammo type has ID of 3."}],"isConstructor":false,"name":"GetAmmoCount","realm":"shared","returns":[{"description":"The amount of ammo player has in reserve.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets if the player will be pushed out of nocollided players.","examples":[],"isConstructor":false,"name":"GetAvoidPlayers","realm":"shared","returns":[{"description":"pushed","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the player is able to walk using the (default) alt key.","examples":[],"isConstructor":false,"name":"GetCanWalk","realm":"shared","returns":[{"description":"AbleToWalk","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Determines whenever the player is allowed to use the zoom functionality.","examples":[],"isConstructor":false,"name":"GetCanZoom","realm":"shared","returns":[{"description":"canZoom","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the player's class id.","examples":[],"isConstructor":false,"name":"GetClassID","realm":"shared","returns":[{"description":"The player's class id.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity type to get count of.","isOptional":false,"isVarArg":false,"name":"type","type":"string"},{"default":"0","description":"If specified, it will reduce the counter by this value. Works only serverside.","isOptional":true,"isVarArg":false,"name":"minus","type":"number"}],"description":"Gets total count of entities of same class.<br/>\n{{Note|This function is only available in Sandbox and its derivatives}}","examples":[],"isConstructor":false,"name":"GetCount","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the crouched walk speed multiplier.\n\nSee also {{ClassFunction|Player|GetWalkSpeed}} and {{ClassFunction|Player|SetCrouchedWalkSpeed}}.","examples":[],"isConstructor":false,"name":"GetCrouchedWalkSpeed","realm":"shared","returns":[{"description":"The crouched walk speed multiplier.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the last command which was sent by the specified player. Can only be used in a [[:Category:Predicted_Hooks|Predicted Hook]].\n\n{{Note|When called clientside in singleplayer during {{HookFunction|WEAPON|Think}}, it will return nothing as the hook is not technically predicted in that instance. See the note on the page.}}\n\n{{Bug|Issue=3302|This will fail in {{HookFunction|GM|StartCommand}}.}}","examples":[],"isConstructor":false,"name":"GetCurrentCommand","realm":"shared","returns":[{"description":"Last user commands","type":"CUserCmd"}]},{"accessModifier":"public","arguments":[],"description":"Gets the '''actual''' view offset which equals the difference between the players actual position and their view when standing.\n\nDo not confuse with {{ClassFunction|Player|GetViewOffset}} and {{ClassFunction|Player|GetViewOffsetDucked}}","examples":[],"isConstructor":false,"name":"GetCurrentViewOffset","realm":"shared","returns":[{"description":"The actual view offset.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Gets the entity the player is currently driving.","examples":[],"isConstructor":false,"name":"GetDrivingEntity","realm":"shared","returns":[{"description":"DriveEntity","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns driving mode of the player. See [[Entity Driving]].","examples":[],"isConstructor":false,"name":"GetDrivingMode","realm":"shared","returns":[{"description":"The drive mode ID or 0 if player doesn't use the drive system.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns a player's duck speed (in seconds)","examples":[{"code":"","description":""}],"isConstructor":false,"name":"GetDuckSpeed","realm":"shared","returns":[{"description":"duckspeed","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table with information of what the player is looking at.\n\nThe results of this function are cached every frame.\n\nSee also {{ClassFunction|Player|GetEyeTraceNoCursor}}","examples":[{"code":"print( Entity( 1 ):GetEyeTrace().Entity )","description":"Prints the entity the player is looking at."}],"isConstructor":false,"name":"GetEyeTrace","realm":"shared","returns":[{"description":"Trace information, see {{Struct|TraceResult}}","type":"TraceResult"}]},{"accessModifier":"public","arguments":[],"description":"Returns the trace according to the players view direction, ignoring their mouse ( Holding C and moving the mouse in Sandbox ).\n\nThe results of this function are cached every frame.\n\nSee also {{ClassFunction|Player|GetEyeTrace}}","examples":[],"isConstructor":false,"name":"GetEyeTraceNoCursor","realm":"shared","returns":[{"description":"Trace result. See {{Struct|TraceResult}}","type":"TraceResult"}]},{"accessModifier":"public","arguments":[],"description":"Returns the FOV of the player.\n\n{{Bug|Issue=2474|This returns an int on the server and a float on the client.}}","examples":[],"isConstructor":false,"name":"GetFOV","realm":"shared","returns":[{"description":"FOV","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the steam \"relationship\" towards the player.","examples":[{"code":"print(ply:GetFriendStatus())","description":"Prints the steam relationship towards another player"}],"isConstructor":false,"name":"GetFriendStatus","realm":"client","returns":[{"description":"Should return one of four different things depending on their status on your friends list: \"friend\", \"blocked\", \"none\" or \"requested\".","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Gets the hands entity of a player","examples":[],"isConstructor":false,"name":"GetHands","realm":"shared","returns":[{"description":"The hands entity if players has one","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns the widget the player is hovering with his mouse.","examples":[],"isConstructor":false,"name":"GetHoveredWidget","realm":"shared","returns":[{"description":"The hovered widget.","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Gets the bottom base and the top base size of the player's hull.","examples":[{"code":"for k,v in pairs(player.GetAll()) do\n\n\tlocal bottom, top = v:GetHull()\n\n\tprint(bottom)\n\n\tprint(top)\n\nend","description":"Prints bases' size of the hull of all players."}],"isConstructor":false,"name":"GetHull","realm":"shared","returns":[{"description":"Player's hull bottom base size","type":"Vector"},{"description":"Player's hull top base size","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Gets the bottom base and the top base size of the player's crouch hull.","examples":[{"code":"for k,v in pairs(player.GetAll()) do\n\n\tlocal bottom, top = v:GetHullDuck()\n\n\tprint(bottom)\n\n\tprint(top)\n\nend","description":"Prints bases' size of the crouch hull of all players."}],"isConstructor":false,"name":"GetHullDuck","realm":"shared","returns":[{"description":"Player's crouch hull bottom base size","type":"Vector"},{"description":"Player's crouch hull top base size","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the client-side {{Type|ConVar}}","isOptional":false,"isVarArg":false,"name":"cVarName","type":"string"}],"description":"Retrieves the value of a client-side {{Type|ConVar}}. The {{Type|ConVar}} must have a [[Enums/FCVAR|FCVAR_USERINFO]] flag for this to work.\n\n{{Warning|The returned value is truncated to 31 bytes.}}","examples":[{"code":"if CLIENT then\n\tCreateConVar( \"Apple\", \"ILikeApples\", FCVAR_USERINFO )\nelse\n\tMsgN( Entity( 1 ):GetInfo( \"Apple\" ) )\nend","description":"Creates clientside {{Type|ConVar}} 'Apple' and retrieves value of it."}],"isConstructor":false,"name":"GetInfo","realm":"server","returns":[{"description":"The value of the {{Type|ConVar}}","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the {{Type|ConVar}} to query the value of","isOptional":false,"isVarArg":false,"name":"cVarName","type":"string"},{"default":"","description":"Default value if we failed to retrieve the number.","isOptional":false,"isVarArg":false,"name":"defaultVal","type":"number"}],"description":"Retrieves the numeric value of a client-side convar, returns nil if value is not convertible to a number. The {{Type|ConVar}} must have a [[Enums/FCVAR|FCVAR_USERINFO]] flag for this to work.","examples":[{"code":"if CLIENT then\n\tCreateConVar( \"Apple\", \"1\", FCVAR_USERINFO )\nelse\n\tMsgN( Entity( 1 ):GetInfoNum( \"Apple\" ) )\nend","description":"Creates clientside {{Type|ConVar}} 'Apple' and retrieves value of it."},{"code":"if CLIENT then\n\tCreateConVar( \"Apple\", \"1\", FCVAR_USERINFO )\nelse\n\tMsgN( type( Entity( 1 ):GetInfoNum( \"Apple\", 1 ) ) )\n\tMsgN( type( Entity( 1 ):GetInfo( \"Apple\" ) ) )\nend","description":"Shows difference between {{ClassFunction|Player|GetInfo}} and {{ClassFunction|Player|GetInfoNum}}."}],"isConstructor":false,"name":"GetInfoNum","realm":"server","returns":[{"description":"The value of the {{Type|ConVar}} or the default value","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the jump power of the player","examples":[{"code":"print( LocalPlayer():GetJumpPower() )","description":"Prints local player's jump power"}],"isConstructor":false,"name":"GetJumpPower","realm":"shared","returns":[{"description":"Jump power","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the timescale multiplier of the player movement.","examples":[],"isConstructor":false,"name":"GetLaggedMovementValue","realm":"shared","returns":[{"description":"The timescale multiplier, defaults to 1.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the player's maximum movement speed.\n\nSee also {{ClassFunction|Player|SetMaxSpeed}}, {{ClassFunction|Player|GetWalkSpeed}} and {{ClassFunction|Player|GetRunSpeed}}.","examples":[],"isConstructor":false,"name":"GetMaxSpeed","realm":"shared","returns":[{"description":"The maximum movement speed the player can go at.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the player's name, this is an alias of {{ClassFunction|Player|Nick}}.\n\n{{Note|This function overrides {{ClassFunction|Entity|GetName}} (in the Lua metatable, not in c++), keep it in mind when dealing with {{LibraryFunction|ents|FindByName}} or any engine function which requires the mapping name.}}","examples":[{"code":"print( Entity(1):GetName() )","description":"Prints the player's name"}],"isConstructor":false,"name":"GetName","realm":"shared","returns":[{"description":"The player's name.\n\n{{Bug|Issue=3178|This is limited to 31 characters even though Steam names can have 32.}}","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the player is set not to collide with their teammates.","examples":[],"isConstructor":false,"name":"GetNoCollideWithTeammates","realm":"shared","returns":[{"description":"noCollideWithTeammates","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the the observer mode of the player","examples":[],"isConstructor":false,"name":"GetObserverMode","realm":"shared","returns":[{"description":"Observe mode of that player, see {{Enum|OBS_MODE}}.","type":"OBS_MODE"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity the player is currently observing.\n\nSet using {{ClassFunction|Player|SpectateEntity}}.","examples":[],"isConstructor":false,"name":"GetObserverTarget","realm":"shared","returns":[{"description":"The entity the player is currently spectating, or [[Global_Variables|NULL]] if the player has no target.","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the PData key","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"nil","description":"Default value if PData key doesn't exist.","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"any"}],"description":"Returns a '''P'''layer '''Data''' key-value pair from the SQL database. (sv.db when called on server,  cl.db when called on client)\n\nInternally uses the {{Lib|sql}}.\n\n{{Warning|This function internally uses {{ClassFunction|Player|UniqueID}}, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.}}\n\n{{Note|PData is not networked from servers to clients!}}","examples":[{"code":"player.GetByID( 1 ):GetPData( \"money\", 0 )","description":"Reads the key \"money\" from player 1's PData"}],"isConstructor":false,"name":"GetPData","realm":"shared","returns":[{"description":"The data in the SQL database or the default value given.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns a player model's color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is Vector(r,g,b), and each color should be between 0 and 1.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"GetPlayerColor","realm":"shared","returns":[{"description":"color","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table containing player information.","examples":[{"code":"PrintTable( Entity( 1 ):GetPlayerInfo() ) -- A player\nPrintTable( Entity( 2 ):GetPlayerInfo() ) -- A bot","description":"Example output for a bot and a player."}],"isConstructor":false,"name":"GetPlayerInfo","realm":"client","returns":[{"description":"A table containing player information.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity to retrieve the carry angles of.","isOptional":false,"isVarArg":false,"name":"carryEnt","type":"Entity"}],"description":"Returns the preferred carry angles of an object, if any are set.\n\nCalls {{HookFunction|GM|GetPreferredCarryAngles}} with the target entity and returns the carry angles.","examples":[],"isConstructor":false,"name":"GetPreferredCarryAngles","realm":"server","returns":[{"description":"Carry angles or nil if the entity has no preferred carry angles.","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Returns the widget entity the player is using.\n\nHaving a pressed widget stops the player from firing his weapon to allow input to be passed onto the widget.","examples":[],"isConstructor":false,"name":"GetPressedWidget","realm":"shared","returns":[{"description":"The pressed widget.","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|You should use {{ClassFunction|Player|GetViewPunchAngles}} instead.}}\nReturns players screen punch effect angle.","examples":[],"isConstructor":false,"name":"GetPunchAngle","realm":"shared","returns":[{"description":"The punch angle","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Returns players death ragdoll. The ragdoll is created by {{ClassFunction|Player|CreateRagdoll}}.","examples":[],"isConstructor":false,"name":"GetRagdollEntity","realm":"shared","returns":[{"description":"The ragdoll.\n\nUnlike normal clientside ragdolls (C_ClientRagdoll), this will be a C_HL2MPRagdoll on the client, and hl2mp_ragdoll on the server.","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns the render angles for the player.","examples":[],"isConstructor":false,"name":"GetRenderAngles","realm":"shared","returns":[{"description":"The render angles of the player. Only '''yaw''' part of the angle seems to be present.","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Returns the player's sprint speed.\n\nSee also {{ClassFunction|Player|SetRunSpeed}}, {{ClassFunction|Player|GetWalkSpeed}} and {{ClassFunction|Player|GetMaxSpeed}}.","examples":[{"code":"print( Entity( 1 ):GetRunSpeed() )","description":"Prints the players run speed in the code."}],"isConstructor":false,"name":"GetRunSpeed","realm":"shared","returns":[{"description":"The sprint speed","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the position of a Player's view\n\n{{Note|This is the same as calling {{ClassFunction|Entity|EyePos}} on the player.}}","examples":[{"code":"print( player.GetByID( 1 ):GetShootPos() )","description":"Gets player 1's shoot position, and prints it to console"},{"code":"// run on client\nprint(LocalPlayer():GetEyeTrace().StartPos)\nprint(LocalPlayer():GetShootPos())\nprint(LocalPlayer():EyePos())","description":"Prints the position of your player's camera, but using 3 different functions.\n\nThis example demonstrates that it doesn't matter whichever of these functions you use, you will get the SAME result."}],"isConstructor":false,"name":"GetShootPos","realm":"shared","returns":[{"description":"aim pos","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the maximum height player can step onto.","examples":[],"isConstructor":false,"name":"GetStepSize","realm":"shared","returns":[{"description":"The maximum height player can get up onto without jumping, in hammer units.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the number of seconds that the player has been timing out for. You can check if a player is timing out with {{ClassFunction|Player|IsTimingOut}}.","examples":[],"isConstructor":false,"name":"GetTimeoutSeconds","realm":"server","returns":[{"description":"Timeout seconds.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"nil","description":"Classname of the tool to retrieve. ( Filename of the tool in gmod_tool/stools/ )","isOptional":true,"isVarArg":false,"name":"mode","type":"string"}],"description":"Returns TOOL table of players current tool, or of the one specified.","examples":[],"isConstructor":false,"name":"GetTool","realm":"shared","returns":[{"description":"TOOL table, or nil if the table wasn't found or the player doesn't have a tool gun.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns a player's unduck speed (in seconds)","examples":[{"code":"","description":""}],"isConstructor":false,"name":"GetUnDuckSpeed","realm":"shared","returns":[{"description":"unduck speed","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the player's user group.","examples":[],"isConstructor":false,"name":"GetUserGroup","realm":"shared","returns":[{"description":"The user group of the player.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Gets the vehicle the player is driving, returns NULL ENTITY if the player is not driving.","examples":[],"isConstructor":false,"name":"GetVehicle","realm":"shared","returns":[{"description":"vehicle","type":"Vehicle"}]},{"accessModifier":"public","arguments":[],"description":"Returns the entity the player is using to see from (such as the player itself, the camera, or another entity).","examples":[{"code":"print( Entity( 1 ):GetViewEntity() )","description":"Will print what entity the first player uses to look through."}],"isConstructor":false,"name":"GetViewEntity","realm":"shared","returns":[{"description":"The entity the player is using to see from","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"0","description":"optional index of the view model to return, can range from 0 to 2","isOptional":true,"isVarArg":false,"name":"index","type":"number"}],"description":"Returns the player's view model entity by the index.\nEach player has 3 view models by default, but only the first one is used.\n\nTo use the other viewmodels in your SWEP, see {{ClassFunction|Entity|SetWeaponModel}}.\n\n{{Note|In the Client [[States|realm]], other players' viewmodels are not available unless they are being spectated.}}","examples":[],"isConstructor":false,"name":"GetViewModel","realm":"shared","returns":[{"description":"The view model entity","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns the view offset of the player which equals the difference between the players actual position and their view.\n\nSee also {{ClassFunction|Player|GetViewOffsetDucked}}.","examples":[],"isConstructor":false,"name":"GetViewOffset","realm":"shared","returns":[{"description":"New view offset, must be local vector to players {{ClassFunction|Entity|GetPos}}","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the view offset of the player which equals the difference between the players actual position and their view when ducked.\n\nSee also {{ClassFunction|Player|GetViewOffset}}.","examples":[],"isConstructor":false,"name":"GetViewOffsetDucked","realm":"shared","returns":[{"description":"New crouching view offset, must be local vector to players {{ClassFunction|Entity|GetPos}}","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns players screen punch effect angle.","examples":[],"isConstructor":false,"name":"GetViewPunchAngles","realm":"shared","returns":[{"description":"The punch angle","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Returns the player's normal walking speed. Not sprinting, not slow walking. (+walk)\n\nSee also {{ClassFunction|Player|SetWalkSpeed}}, {{ClassFunction|Player|GetMaxSpeed}} and {{ClassFunction|Player|GetRunSpeed}}.","examples":[{"code":"print( Entity( 1 ):GetWalkSpeed() )","description":"Gets player 1's walk speed, and prints it to console"}],"isConstructor":false,"name":"GetWalkSpeed","realm":"shared","returns":[{"description":"The normal walking speed.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Class name of weapon","isOptional":false,"isVarArg":false,"name":"className","type":"string"}],"description":"Returns the weapon for the specified class","examples":[{"code":"print( Entity(1):GetWeapon( \"gmod_tool\" ) )","description":"Prints the weapon if the player has the toolgun"}],"isConstructor":false,"name":"GetWeapon","realm":"shared","returns":[{"description":"The weapon for the specified class.","type":"Weapon"}]},{"accessModifier":"public","arguments":[],"description":"Returns a player's weapon color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is Vector(r,g,b), and each color should be between 0 and 1.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"GetWeaponColor","realm":"shared","returns":[{"description":"color","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table of the player's weapons.\n\n{{Bug|Issue=3052|The table returned is not continuous so the # operator, {{GlobalFunction|ipairs}}, and a numeric-for loop shouldn't be used with it. Use {{LibraryFunction|table|Count}} to get the correct count, instead.}}","examples":[{"code":"print(table.Count(Player(1):GetWeapons()))","description":"Prints how many weapons the player has."}],"isConstructor":false,"name":"GetWeapons","realm":"shared","returns":[{"description":"All the weapons the player currently has.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Class name of weapon to give the player","isOptional":false,"isVarArg":false,"name":"weaponClassName","type":"string"},{"default":"false","description":"Set to true to not give any ammo on weapon spawn. (Reserve ammo set by DefaultClip)","isOptional":true,"isVarArg":false,"name":"bNoAmmo","type":"boolean"}],"description":"Gives the player a weapon.\n\n{{Note|While this function is meant for weapons/pickupables only, it is '''not''' restricted to weapons. Any entity can be spawned using this function, including NPCs and SENTs.}}","examples":[{"code":"Entity( 1 ):Give( \"gmod_tool\" )","description":"Gives the player a toolgun"},{"code":"Entity( 1 ):StripWeapons()\nEntity( 1 ):StripAmmo()\n\nlocal w = Entity( 1 ):Give( \"weapon_base\", true )","description":"Removes all weapons and ammo from a player and gives a weapon_base SWEP with no ammo in it."}],"isConstructor":false,"name":"Give","realm":"server","returns":[{"description":"The weapon given to the player, if one was given. It will return NULL if the player already has the weapon, or the weapon entity (entity with given classname) doesn't exist.","type":"Weapon"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Amount of ammo","isOptional":false,"isVarArg":false,"name":"amount","type":"number"},{"default":"","description":"Type of ammo.\n\nThis can also be a number for ammo ID, useful for custom ammo types.\n\nYou can find a list of default ammo types [[Default_Ammo_Types|here]].","isOptional":false,"isVarArg":false,"name":"type","type":"string"},{"default":"false","description":"Hide display popup when giving the ammo","isOptional":true,"isVarArg":false,"name":"hidePopup","type":"boolean"}],"description":"Gives ammo to a player","examples":[{"code":"player.GetByID(1):GiveAmmo( 200, \"Pistol\", true )","description":"Give the player 200 rounds for the pistol, hiding the popup."}],"isConstructor":false,"name":"GiveAmmo","realm":"server","returns":[{"description":"Ammo given.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Disables god mode on the player.","examples":[{"code":"for _, v in pairs(player.GetAll()) do\n    v:GodDisable()\nend","description":"Disables god mode on all players."}],"isConstructor":false,"name":"GodDisable","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Enables god mode on the player.","examples":[{"code":"for k, v in pairs(player.GetAll()) do\n    v:GodEnable()\nend","description":"Enable god mode on all players"}],"isConstructor":false,"name":"GodEnable","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns whether the player has god mode or not, contolled by {{ClassFunction|Player|GodEnable}} and {{ClassFunction|Player|GodDisable}}.\n\n{{Bug|Issue=2038|This is not synced between the client and server. This will cause the client to always return false even in godmode.}}","examples":[],"isConstructor":false,"name":"HasGodMode","realm":"shared","returns":[{"description":"Whether the player has god mode or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Class name of the weapon","isOptional":false,"isVarArg":false,"name":"className","type":"string"}],"description":"Returns if the player has the specified weapon","examples":[{"code":"print(player.GetByID(1):HasWeapon(\"weapon_physgun\"))","description":"prints if the player has the physgun"}],"isConstructor":false,"name":"HasWeapon","realm":"shared","returns":[{"description":"True if the player has the weapon","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the player is in a vehicle","examples":[],"isConstructor":false,"name":"InVehicle","realm":"shared","returns":[{"description":"Whether the player is in a vehicle.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the player's IP address and connection port in ip:port form","examples":[{"code":"print( Entity( 1 ):IPAddress() )","description":"Prints the player's IP and port"}],"isConstructor":false,"name":"IPAddress","realm":"server","returns":[{"description":"The player's IP address and connection port","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the player is an admin or not","examples":[{"code":"hook.Add(\"PlayerSpawn\", \"PrintIfAdmin\", function( ply )\n    if ( ply:IsAdmin() ) then \n       print( \"It's true, \" .. ply:Nick() .. \" is an admin\")\n    else\n       print( \"It's false, \" .. ply:Nick() .. \" is not an admin\")\n    end\nend )","description":"Every time a player spawns, print in the console whether they are an admin.<!-- Untested yet, will test in a few minutes -->"}],"isConstructor":false,"name":"IsAdmin","realm":"shared","returns":[{"description":"True if the player is an admin","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the player is an bot or not","examples":[],"isConstructor":false,"name":"IsBot","realm":"shared","returns":[{"description":"True if the player is a bot.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns true from the point when the player is sending client info but not fully in the game until they disconnect.","examples":[],"isConstructor":false,"name":"IsConnected","realm":"server","returns":[{"description":"isConnected","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Used to find out if a player is currently 'driving' an entity (by which we mean 'right click > drive' ).","examples":[{"code":"local plys = player.GetAll()\nfor _, ply in pairs( plys ) do\n    \n    if ( ply:IsDrivingEntity() ) then\n        ply:Kill()\n    end\n    \nend","description":"Kills every player currently 'driving' an entity."}],"isConstructor":false,"name":"IsDrivingEntity","realm":"shared","returns":[{"description":"A value representing whether or not the player is 'driving' an entity.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the players movement is currently frozen, contolled by {{ClassFunction|Player|Freeze}}.","examples":[],"isConstructor":false,"name":"IsFrozen","realm":"shared","returns":[{"description":"Whether the players movement is currently frozen or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the player identity was confirmed by the steam network.","examples":[],"isConstructor":false,"name":"IsFullyAuthenticated","realm":"server","returns":[{"description":"Whether the player has been fully authenticated or not.\n\nThis will always be true for singleplayer and the listen server host.\nThis will always be false for bots.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if a player is the host of the current session.","examples":[],"isConstructor":false,"name":"IsListenServerHost","realm":"server","returns":[{"description":"True if the player is the listen server host, false otherwise.\n\nThis will always be true in single player, and false on a dedicated server.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether or not the player is muted locally.","examples":[],"isConstructor":false,"name":"IsMuted","realm":"client","returns":[{"description":"whether or not the player is muted locally.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the player is playing a taunt.","examples":[],"isConstructor":false,"name":"IsPlayingTaunt","realm":"shared","returns":[{"description":"Whether the player is playing a taunt.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the player is heard by the local player.","examples":[],"isConstructor":false,"name":"IsSpeaking","realm":"client","returns":[{"description":"isSpeaking","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the player is currently sprinting or not.","examples":[],"isConstructor":false,"name":"IsSprinting","realm":"shared","returns":[{"description":"Is the player sprinting or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the player is equipped with the suit item.\n\n{{Bug|Issue=3449|This will only work for the local player clientside.}}","examples":[],"isConstructor":false,"name":"IsSuitEquipped","realm":"shared","returns":[{"description":"Is the suit equipped or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the player is a superadmin.","examples":[],"isConstructor":false,"name":"IsSuperAdmin","realm":"shared","returns":[{"description":"True if the player is a superadmin.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the player is timing out (i.e. is losing connection), false otherwise.","examples":[],"isConstructor":false,"name":"IsTimingOut","realm":"server","returns":[{"description":"isTimingOut","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the player is typing in their chat.\n\nThis may not work properly if the server uses a custom chatbox.","examples":[],"isConstructor":false,"name":"IsTyping","realm":"shared","returns":[{"description":"Whether the player is typing in their chat or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Group to check the player for.","isOptional":false,"isVarArg":false,"name":"groupname","type":"string"}],"description":"Returns true/false if the player is in specified group or not.","examples":[{"code":"if ( Player(2):IsUserGroup(\"superadmin\") ) then\n    print(\"yes, I'm awesome!\")\nend","description":"Prints in the players chat \"yes, I'm awesome!\" if he's in the superadmin group."}],"isConstructor":false,"name":"IsUserGroup","realm":"shared","returns":[{"description":"isInUserGroup","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the player can be heard by the local player.","examples":[],"isConstructor":false,"name":"IsVoiceAudible","realm":"client","returns":[{"description":"isAudible","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the player is in the context menu.\n\n{{Note|Although this is shared, it will only work properly on the CLIENT for the local player. Using this serverside or on other players will return false.}}","examples":[],"isConstructor":false,"name":"IsWorldClicking","realm":"shared","returns":[{"description":"Is the player world clicking or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key, see {{Enum|IN}}","isOptional":false,"isVarArg":false,"name":"key","type":"IN"}],"description":"Gets whether a key is down. This is not networked to other players, meaning only the local client can see the keys they are pressing.","examples":[{"code":"hook.Add(\"Tick\", \"KeyDown_Test\", function()\n    if (Entity(1):KeyDown(IN_FORWARD)) then\n        print(\"Player is pressing forward!\")\n    end\nend)","description":"Prints whenever the first player is holding forward key"}],"isConstructor":false,"name":"KeyDown","realm":"shared","returns":[{"description":"isDown","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key, see {{Enum|IN}}","isOptional":false,"isVarArg":false,"name":"key","type":"IN"}],"description":"Gets whether a key was down one tick ago.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"KeyDownLast","realm":"shared","returns":[{"description":"Is key down","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Corresponds to an {{Enum|IN}}","isOptional":false,"isVarArg":false,"name":"key","type":"IN"}],"description":"Gets whether a key was just pressed this tick","examples":[{"code":"hook.Add( \"Tick\", \"CheckPlayer1Forward\", function()\n   if( Entity( 1 ):KeyPressed( IN_FORWARD )) then\n        print( \"Ent1 just started moving forward!\" )\n    end\nend )","description":"Prints whenever the first player first starts pressing W"}],"isConstructor":false,"name":"KeyPressed","realm":"shared","returns":[{"description":"Was pressed or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key, see {{Enum|IN}}","isOptional":false,"isVarArg":false,"name":"key","type":"IN"}],"description":"Gets whether a key was just released this tick","examples":[{"code":"hook.Add( \"Tick\", \"CheckPlayer1Forward\", function()\n   if Entity( 1 ):KeyReleased( IN_FORWARD ) then print(\"Ent1 just stopped moving forward!\") end\nend)","description":"Prints whenever the first player first stops pressing W"}],"isConstructor":false,"name":"KeyReleased","realm":"shared","returns":[{"description":"Was released or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"\"No reason given\"","description":"Reason to show for disconnection.\n\n{{Warning|This will be shortened to ~512 chars, though this includes the command itself and the player index so will realistically be more around ~498. It is recommended to avoid going near the limit to avoid truncation.}}","isOptional":true,"isVarArg":false,"name":"reason","type":"string"}],"description":"Kicks the player from the server.","examples":[{"code":"ply:Kick( \"Goodbye\" )","description":"Kick a player with reason \"Goodbye\""}],"isConstructor":false,"name":"Kick","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Kills a player and calls {{HookFunction|GM|PlayerDeath}}.","examples":[{"code":"hook.Add( \"PlayerSay\", \"RespawnCommand\", function( ply, text, public )\n\tif ( string.lower( text ) == \"/respawn\" ) then\n\t\tply:Kill()\n\t\tply:Spawn()\n\t\treturn \"\"\n\tend\nend )","description":"When the user types \"/respawn\" the user will be killed and then respawned."}],"isConstructor":false,"name":"Kill","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Kills a player without notifying the rest of the server.\n\nThis will call {{HookFunction|GM|PlayerSilentDeath}} instead of {{HookFunction|GM|PlayerDeath}}.","examples":[{"code":"Player(2):KillSilent()","description":"Silently kills the player."}],"isConstructor":false,"name":"KillSilent","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The state of the lag compensation, true to enable and false to disable.","isOptional":false,"isVarArg":false,"name":"lagCompensation","type":"boolean"}],"description":"This allows the server to mitigate the lag of the player by moving back all the entities that can be lag compensated to the time the player attacked with his weapon.\n\nThis technique is most commonly used on things that hit other entities instantaneously, such as traces.\n\n{{Note|{{ClassFunction|Entity|FireBullets}} calls this function internally.}}\n\nLag compensation only works for players and entities that have been enabled with {{ClassFunction|Entity|SetLagCompensated}}\n\nDespite being defined shared, it can only be used server side in a [[:Category:Predicted_Hooks|Predicted Hook]].\n\n{{Warning|This function NEEDS to be disabled after you're done with it or it will break the movement of the entities affected!}}\n\n{{Bug|Issue=3683|Lag compensation does not support pose parameters.}}","examples":[{"code":"function SWEP:PrimaryAttack()\n\n\tlocal tracedata = {}\n\ttracedata.start = self.Owner:GetShootPos()\n\ttracedata.endpos = self.Owner:GetShootPos() + self.Owner:GetAimVector() * 75\n\ttracedata.filter = self.Owner\n\ttracedata.mins =  Vector( -8 , -8 , -8 )\n\ttracedata.maxs =  Vector( 8 , 8 , 8 )\n\t\n\t-- It is recommended to use an IsPlayer check in case the weapon is being used by an NPC.\n\tif ( self.Owner:IsPlayer() ) then\n\t\tself.Owner:LagCompensation( true )\n\tend\n\t\n\tlocal tr = util.TraceHull( tracedata )\n\t\n\tif ( self.Owner:IsPlayer() ) then\n\t\tself.Owner:LagCompensation( false )\n\tend\n\t\n\tif tr.Hit then\n\t\tprint( tr.Entity )\t--your code here\n\tend\n\t\n\tself:SetNextPrimaryFire( CurTime() + 0.5 )\nend","description":"Do a crowbar-like melee trace, enabling lag compensation before doing so."}],"isConstructor":false,"name":"LagCompensation","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the hitgroup where the player was last hit.","examples":[],"isConstructor":false,"name":"LastHitGroup","realm":"server","returns":[{"description":"Hitgroup, see {{Enum|HITGROUP}}","type":"HITGROUP"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Type of hit limit","isOptional":false,"isVarArg":false,"name":"type","type":"string"}],"description":"Shows \"limit hit\" notification in sandbox.<br/>\n{{Note|This function is only available in Sandbox and its derivatives}}","examples":[{"code":"for id, ply in pairs( player.GetAll() ) do\n       ply:LimitHit( \"test\" )\nend","description":"Sends a fake \"limit hit\" notification"}],"isConstructor":false,"name":"LimitHit","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Stops a player from using any inputs, such as moving, turning, or attacking. Key binds are still called. Similar to {{ClassFunction|Player|Freeze}} but the player takes no damage.\n\nAdds the [[Enums/FL|FL_FROZEN]] and [[Enums/FL|FL_GODMODE]] flags to the player.","examples":[],"isConstructor":false,"name":"Lock","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Bone to get the position of. Must be from 0 to 19.","isOptional":false,"isVarArg":false,"name":"bone","type":"number"}],"description":"Returns the position of a Kinect bone.","examples":[],"isConstructor":false,"name":"MotionSensorPos","realm":"shared","returns":[{"description":"Position of the bone.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the players name. Identical to {{ClassFunction|Player|Nick}} and {{ClassFunction|Player|GetName}}.","examples":[{"code":"print(Player(1):Name())","description":"Prints the players name in console."}],"isConstructor":false,"name":"Name","realm":"shared","returns":[{"description":"Player's Steam name.\n\n{{Bug|Issue=3178|This is limited to 31 characters even though Steam names can have 32.}}","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the player's nickname.","examples":[{"code":"print( Entity(1):Nick() )","description":"Prints the player's nickname"}],"isConstructor":false,"name":"Nick","realm":"shared","returns":[{"description":"Player's Steam name\n\n{{Bug|Issue=3178|This is limited to 31 characters even though Steam names can have 32.}}","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the packet loss of the client. It is not networked so it only returns 0 when run clientside.","examples":[],"isConstructor":false,"name":"PacketLoss","realm":"server","returns":[{"description":"name=packetsLost","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Unfreezes the props player is looking at. This is essentially the same as pressing reload with the physics gun, including double press for unfreeze all.","examples":[],"isConstructor":false,"name":"PhysgunUnfreeze","realm":"shared","returns":[{"description":"Number of props unfrozen.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity to pick up.","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"}],"description":"This makes the player hold ( same as pressing {{Key|E}} on a small prop ) the provided entity.\n\n{{Note|Don't get this confused with picking up items like ammo or health kits}}\n\n{{Note|This picks up the passed entity regardless of its mass or distance from the player}}","examples":[{"code":"function PlayerPickupObject(ply, obj)\n\tif ( obj:IsPlayerHolding() ) then return end\n\tply:PickupObject( obj )\nend","description":"An extra function to make sure the object isn't held before being picked up."}],"isConstructor":false,"name":"PickupObject","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the player's ping to server.","examples":[],"isConstructor":false,"name":"Ping","realm":"shared","returns":[{"description":"The player's ping.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Volume for the sound, in range from 0 to 1","isOptional":false,"isVarArg":false,"name":"volume","type":"number"}],"description":"Plays the correct step sound according to what the player is staying on.","examples":[],"isConstructor":false,"name":"PlayStepSound","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Which type of message should be sent to the player ({{Enum|HUD}})","isOptional":false,"isVarArg":false,"name":"type","type":"HUD"},{"default":"","description":"Message to be sent to the player","isOptional":false,"isVarArg":false,"name":"message","type":"string"}],"description":"Displays a message either in their chat, console, or center of the screen. See also {{GlobalFunction|PrintMessage}}.\n\n{{Note|When called serverside, this uses the archaic user message system (the {{Lib|umsg}}) and hence is limited to &asymp;250 characters.}}\n\n{{Note|''HUD_PRINTCENTER'' will not work when this is called clientside.}}","examples":[{"code":"Entity(1):PrintMessage(HUD_PRINTTALK, \"I'm new here.\")","description":"Prints into the first players chat: \"I'm new here.\""}],"isConstructor":false,"name":"PrintMessage","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Removes all ammo from a certain player","examples":[{"code":"","description":""}],"isConstructor":false,"name":"RemoveAllAmmo","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Removes all weapons and ammo from the player.","examples":[],"isConstructor":false,"name":"RemoveAllItems","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The amount of ammunition to remove.","isOptional":false,"isVarArg":false,"name":"ammoCount","type":"number"},{"default":"","description":"The name of the ammunition to remove from. This can also be a {{Type|number}} ammoID.","isOptional":false,"isVarArg":false,"name":"ammoName","type":"string"}],"description":"Removes the amount of the specified ammo from the player.","examples":[],"isConstructor":false,"name":"RemoveAmmo","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Key to remove","isOptional":false,"isVarArg":false,"name":"key","type":"string"}],"description":"Removes a '''P'''layer '''Data''' key-value pair from the SQL database. (sv.db when called on server,  cl.db when called on client)\n\nInternally uses the {{Lib|sql}}.\n\n{{Warning|This function internally uses {{ClassFunction|Player|UniqueID}}, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.}}","examples":[{"code":"player.GetByID( 1 ):RemovePData( \"money\" )","description":"Deletes the key \"money\" from player 1"}],"isConstructor":false,"name":"RemovePData","realm":"shared","returns":[{"description":"true is succeeded, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Strips the player's suit item.","examples":[],"isConstructor":false,"name":"RemoveSuit","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resets both normal and duck hulls to their default values.","examples":[],"isConstructor":false,"name":"ResetHull","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to force the player to say.","isOptional":false,"isVarArg":false,"name":"text","type":"string"},{"default":"false","description":"Whether to send this message to our own team only.","isOptional":true,"isVarArg":false,"name":"teamOnly","type":"boolean"}],"description":"Forces the player to say whatever the first argument is. Works on bots too.\n\n{{Note|This function ignores the default chat message cooldown}}","examples":[],"isConstructor":false,"name":"Say","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Fade flags defined with {{Enum|SCREENFADE}}.","isOptional":false,"isVarArg":false,"name":"flags","type":"SCREENFADE"},{"default":"color_white","description":"The color of the screenfade","isOptional":true,"isVarArg":false,"name":"clr","type":"number"},{"default":"","description":"Fade(in/out) effect transition time ( From no fade to full fade and vice versa )","isOptional":true,"isVarArg":false,"name":"fadeTime","type":"number"},{"default":"","description":"Fade effect hold time","isOptional":true,"isVarArg":false,"name":"fadeHold","type":"number"}],"description":"Fades the screen","examples":[{"code":"hook.Add( \"PlayerHurt\", \"hurt_effect_fade\", function( ply )\n\tply:ScreenFade( SCREENFADE.IN, Color( 255, 0, 0, 128 ), 0.3, 0 )\nend )","description":"Flashes the screen red to nothing over 0.3 seconds when a player gets hurt."}],"isConstructor":false,"name":"ScreenFade","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The class name of the weapon to switch to.<br><br>The player must already have this weapon. You can use {{ClassFunction|Player|Give}} if not.","isOptional":false,"isVarArg":false,"name":"className","type":"string"}],"description":"Sets the active weapon of the player by its class name.\n\n{{Warning|This will switch the weapon out of prediction, causing delay on the client and {{HookFunction|WEAPON|Deploy}} to be called out of prediction. Try using {{ClassFunction|CUserCmd|SelectWeapon}} or {{LibraryFunction|input|SelectWeapon}}, instead.}}\n\n{{Note|This will trigger the weapon switch event and associated animations. To switch weapons silently, use {{ClassFunction|Player|SetActiveWeapon}}.}}","examples":[{"code":"Entity(1):SelectWeapon(\"gmod_tool\")","description":"Force the player to switch to toolgun"},{"code":"local weapons = Entity( 1 ):GetWeapons()\nlocal weapon = weapons[ math.random( #weapons ) ]\n\nEntity( 1 ):SelectWeapon( weapon:GetClass() )","description":"Selects a random weapon from the player's inventory and switches to it."}],"isConstructor":false,"name":"SelectWeapon","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name/class/index of the hint. The text of the hint will contain this value. ( \"#Hint_\" .. name ) An example is ''PhysgunFreeze''.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Delay in seconds before showing the hint","isOptional":false,"isVarArg":false,"name":"delay","type":"number"}],"description":"Sends a hint to a player.\n\n{{Note|This function is only available in Sandbox and its derivatives. Since this adds ''#Hint_'' to the beginning of each message, you should only use it with default hint messages, or those cached with {{LibraryFunction|language|Add}}. For hints with custom text, look at {{LibraryFunction|notification|AddLegacy}}}}","examples":[],"isConstructor":false,"name":"SendHint","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The script to execute.","isOptional":false,"isVarArg":false,"name":"script","type":"string"}],"description":"Executes a simple Lua string on the player. \n\n'''Note:''' The string is limited to 254 bytes. Consider using the [[Net Library Usage|net library]] for more advanced server-client interaction.","examples":[{"code":"local pl = Entity( 1 )\npl:SendLua( \"print( 'Hello World' )\" )","description":"Sends \"Hello World\" to the client's console."}],"isConstructor":false,"name":"SendLua","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The weapon to equip.","isOptional":false,"isVarArg":false,"name":"weapon","type":"Weapon"}],"description":"Sets the player's active weapon. You should use {{ClassFunction|CUserCmd|SelectWeapon}} or {{ClassFunction|Player|SelectWeapon}}, instead in most cases.\n\n{{Note|This function will not trigger the weapon switch event or associated equip animations. You can achieve this using {{ClassFunction|Player|SelectWeapon}} with {{ClassFunction|Entity|GetClass}}.}}\n\n{{Note|This will not call {{HookFunction|GM|PlayerSwitchWeapon}}.}}","examples":[],"isConstructor":false,"name":"SetActiveWeapon","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Allowed to rotate","isOptional":false,"isVarArg":false,"name":"Allowed","type":"boolean"}],"description":"Set if the players' model is allowed to rotate around the pitch and roll axis.","examples":[],"isConstructor":false,"name":"SetAllowFullRotation","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Show we allow player to use his weapons in a vehicle or not.","isOptional":false,"isVarArg":false,"name":"allow","type":"boolean"}],"description":"Allows player to use his weapons in a vehicle. You need to call this before entering a vehicle.\n\n{{Bug|Issue=1277|Shooting in a vehicle fires two bullets.}}\n\n{{Bug|Issue=3261|Weapon viewpunch does not decay while in a vehicle, leading to incorrect aim angles.}}","examples":[],"isConstructor":false,"name":"SetAllowWeaponsInVehicle","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The amount of ammunition to set.","isOptional":false,"isVarArg":false,"name":"ammoCount","type":"number"},{"default":"","description":"The ammunition type. Can be either {{Type|number}} ammo ID or {{Type|string}} ammo name.","isOptional":false,"isVarArg":false,"name":"ammoType","type":"number | string"}],"description":"Sets the amount of the specified ammo for the player.","examples":[],"isConstructor":false,"name":"SetAmmo","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The amount that the player armor is going to be set to.","isOptional":false,"isVarArg":false,"name":"Amount","type":"number"}],"description":"Sets the player armor to the argument.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"SetArmor","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Avoid or not avoid.","isOptional":false,"isVarArg":false,"name":"avoidPlayers","type":"boolean"}],"description":"Pushes the player away from another player whenever it's inside the other players bounding box.","examples":[],"isConstructor":false,"name":"SetAvoidPlayers","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True allows the player to walk.","isOptional":false,"isVarArg":false,"name":"abletowalk","type":"boolean"}],"description":"Set if the player should be allowed to walk using the (default) alt key.","examples":[],"isConstructor":false,"name":"SetCanWalk","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to make the player able or unable to zoom.","isOptional":false,"isVarArg":false,"name":"canZoom","type":"boolean"}],"description":"Sets whether the player can use the HL2 suit zoom (\"+zoom\" bind) or not.","examples":[],"isConstructor":false,"name":"SetCanZoom","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The class id the player is being set with.","isOptional":false,"isVarArg":false,"name":"classID","type":"number"}],"description":"Sets the player's class id.","examples":[],"isConstructor":false,"name":"SetClassID","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The walk speed multiplier that crouch speed should be.","isOptional":false,"isVarArg":false,"name":"speed","type":"number"}],"description":"Sets the crouched walk speed multiplier.\n\nDoesn't work for values above 1.\n\nSee also {{ClassFunction|Player|SetWalkSpeed}} and {{ClassFunction|Player|GetCrouchedWalkSpeed}}.","examples":[{"code":"Entity(1):SetCrouchedWalkSpeed( 1 )","description":"Set the crouch speed to be as fast as the players walk speed."}],"isConstructor":false,"name":"SetCrouchedWalkSpeed","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new view offset.","isOptional":false,"isVarArg":false,"name":"viewOffset","type":"Vector"}],"description":"Sets the '''actual''' view offset which equals the difference between the players actual position and their view when standing.\n\nDo not confuse with {{ClassFunction|Player|SetViewOffset}} and {{ClassFunction|Player|SetViewOffsetDucked}}","examples":[],"isConstructor":false,"name":"SetCurrentViewOffset","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Number of deaths (positive or negative)","isOptional":false,"isVarArg":false,"name":"deathcount","type":"number"}],"description":"Sets a player's death count","examples":[{"code":"","description":""}],"isConstructor":false,"name":"SetDeaths","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"NULL","description":"The entity the player should drive.","isOptional":true,"isVarArg":false,"name":"drivingEntity","type":"Entity"},{"default":"","description":"The driving mode index.","isOptional":true,"isVarArg":false,"name":"drivingMode","type":"number"}],"description":"{{Internal}}\nSets the driving entity and driving mode.\n\nUse {{LibraryFunction|drive|PlayerStartDriving}} instead, see [[Entity Driving]].","examples":[],"isConstructor":false,"name":"SetDrivingEntity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The index of the sound filter to apply.\nPick from the [https://developer.valvesoftware.com/wiki/Dsp_presets list of DSP's].","isOptional":false,"isVarArg":false,"name":"soundFilter","type":"number"},{"default":"","description":"If set to true the sound filter will be removed faster.","isOptional":false,"isVarArg":false,"name":"fastReset","type":"boolean"}],"description":"Applies the specified sound filter to the player.","examples":[],"isConstructor":false,"name":"SetDSP","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"How quickly the player will duck.","isOptional":false,"isVarArg":false,"name":"duckSpeed","type":"number"}],"description":"Sets how quickly a player ducks.\n\n{{Bug|Issue=2722|This will not work for values >{{eq}} 1.}}","examples":[],"isConstructor":false,"name":"SetDuckSpeed","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Angle to set the view to","isOptional":false,"isVarArg":false,"name":"angle","type":"Angle"}],"description":"Sets the angle of the player's view (may rotate body too if angular difference is large)","examples":[{"code":"local ply = LocalPlayer() // Or any player\nlocal vec1 = Vector(0,0,0) -- Where we're looking at\nlocal vec2 = ply:GetShootPos() -- The player's eye pos\nply:SetEyeAngles((vec1 - vec2):Angle()) -- Sets to the angle between the two vectors","description":"Points a player at Vector(0,0,0)"}],"isConstructor":false,"name":"SetEyeAngles","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"the angle of perception (FOV). Set to 0 to return to default user FOV. ( Which is ranging from 75 to 90, depending on user settings )","isOptional":false,"isVarArg":false,"name":"fov","type":"number"},{"default":"","description":"the time it takes to transition to the FOV expressed in a floating point.","isOptional":false,"isVarArg":false,"name":"time","type":"number"}],"description":"Set a player's FOV (Field Of View) over a certain amount of time.","examples":[],"isConstructor":false,"name":"SetFOV","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Number of frags (positive or negative)","isOptional":false,"isVarArg":false,"name":"fragcount","type":"number"}],"description":"Sets a player's frags (kills)","examples":[{"code":"player.GetByID( 1 ):SetFrags( 9001 )","description":"Sets the frags of player 1 to 9001"}],"isConstructor":false,"name":"SetFrags","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The hands entity to set","isOptional":false,"isVarArg":false,"name":"hands","type":"Entity"}],"description":"Sets the hands entity of a player.\n\nThe hands entity is an entity introduced in Garry's Mod 13 and it's used to show the player's hands attached to the viewmodel.\nThis is similar to the approach used in L4D and CS:GO, for more information on how to implement this system in your gamemode visit [[Using Viewmodel Hands]].","examples":[],"isConstructor":false,"name":"SetHands","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"NULL","description":"The widget entity that the player is hovering.","isOptional":true,"isVarArg":false,"name":"widget","type":"Entity"}],"description":"Sets the widget that is currently hovered by the player's mouse.","examples":[],"isConstructor":false,"name":"SetHoveredWidget","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The min coordinates of the hull.","isOptional":false,"isVarArg":false,"name":"hullMins","type":"Vector"},{"default":"","description":"The max coordinates of the hull.","isOptional":false,"isVarArg":false,"name":"hullMaxs","type":"Vector"}],"description":"Sets the mins and maxs of the AABB of the players collision.\n\n{{Bug|Issue=3365|Setting both the mins and maxs to {{GlobalFunction|Vector}}(0,0,0) will crash the game.}}","examples":[],"isConstructor":false,"name":"SetHull","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The min coordinates of the hull.","isOptional":false,"isVarArg":false,"name":"hullMins","type":"Vector"},{"default":"","description":"The max coordinates of the hull.","isOptional":false,"isVarArg":false,"name":"hullMaxs","type":"Vector"}],"description":"Sets the mins and maxs of the AABB of the players collision when ducked.","examples":[],"isConstructor":false,"name":"SetHullDuck","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new jump velocity.","isOptional":false,"isVarArg":false,"name":"jumpPower","type":"number"}],"description":"Sets the jump power, eg. the velocity the player will applied to when he jumps.","examples":[],"isConstructor":false,"name":"SetJumpPower","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The timescale multiplier.","isOptional":false,"isVarArg":false,"name":"timescale","type":"number"}],"description":"Slows down the player movement simulation by the timescale, this is used internally in the HL2 weapon stripping sequence.\n\nIt achieves such behavior by multiplying the {{GlobalFunction|FrameTime}} by the specified timescale at the start of the movement simulation and then restoring it afterwards.\n\n{{Note|This is reset to 1 on spawn}}\n\n{{Note|There is no weapon counterpart to this, you'll have to hardcode the multiplier in the weapon or call {{ClassFunction|Weapon|SetNextPrimaryFire}} / {{ClassFunction|Weapon|SetNextSecondaryFire}} manually from a [[:Category:Predicted_Hooks|Predicted Hook]]}}","examples":[],"isConstructor":false,"name":"SetLaggedMovementValue","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The maximum speed.","isOptional":false,"isVarArg":false,"name":"walkSpeed","type":"number"}],"description":"Sets the maximum speed which the player can move at.\n\n{{Note|This is called automatically by the engine. If you wish to limit player speed without setting their run/sprint speeds, see {{ClassFunction|CMoveData|SetMaxClientSpeed}}.}}","examples":[],"isConstructor":false,"name":"SetMaxSpeed","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Mute or unmute.","isOptional":false,"isVarArg":false,"name":"mute","type":"boolean"}],"description":"Sets if the player should be muted locally.\n\n{{Bug|Issue=3616|This only works correctly for the first 32 players. Using this function on players with a [[Player/UserID|UserID]] 32 or above will apply the muting to the user with ID % 32. For example, {{GlobalFunction|Player}}(54):SetMuted(true) will actually mute player 22 since 54 % 32 {{eq}} 22.}}","examples":[{"code":"for k, v in pairs(player.GetAll()) do\n\tv:SetMuted(true)\nend","description":"Mutes all players on the server"}],"isConstructor":false,"name":"SetMuted","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to disable, false to enable collision.","isOptional":false,"isVarArg":false,"name":"shouldNotCollide","type":"boolean"}],"description":"Sets whenever the player should not collide with their teammates.\n\n{{Bug|Issue=2757|This only works with {{ClassFunction|Player|Team}} IDs 1-4. This also has major collision issues.}}","examples":[],"isConstructor":false,"name":"SetNoCollideWithTeammates","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The visibility.","isOptional":false,"isVarArg":false,"name":"visibility","type":"boolean"}],"description":"Sets the players visibility towards NPCs.","examples":[],"isConstructor":false,"name":"SetNoTarget","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Spectator mode using {{Enum|OBS_MODE}}.","isOptional":false,"isVarArg":false,"name":"mode","type":"OBS_MODE"}],"description":"Sets the players observer mode. You must start the spectating first with {{ClassFunction|Player|Spectate}}.","examples":[],"isConstructor":false,"name":"SetObserverMode","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the PData key","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"","description":"Value to write to the key ('''must''' be an SQL valid data type, such as a string or integer)","isOptional":false,"isVarArg":false,"name":"value","type":"any"}],"description":"Writes a '''P'''layer '''Data''' key-value pair to the SQL database. (sv.db when called on server,  cl.db when called on client)\n\nInternally uses the {{Lib|sql}}.\n\n{{Warning|This function internally uses {{ClassFunction|Player|UniqueID}}, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.}}\n\n{{Note|PData is not networked from servers to clients!}}","examples":[{"code":"player.GetByID( 1 ):SetPData( \"money\", 100 )","description":"Sets the key \"money\" from player 1's PData to 100"}],"isConstructor":false,"name":"SetPData","realm":"shared","returns":[{"description":"Whether the operation was successful or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"This is the color to be set. The format is Vector(r,g,b), and each color should be between 0 and 1.","isOptional":false,"isVarArg":false,"name":"Color","type":"Vector"}],"description":"Sets the player model's color. The part of the model that is colored is determined by the model itself, and is different for each model.","examples":[{"code":"function GM:PlayerSpawn( ply )\n\tply:SetPlayerColor( Vector(1,0,0) )\nend","description":"When a player spawns their color will be red."},{"code":"local function SetColor( ply, color )\n\tply:SetPlayerColor( Vector( color.r / 255, color.g / 255, color.b / 255 ) )\nend","description":"A function you could use to set the player's color to a {{GlobalFunction|Color}} rather than a {{Type|Vector}}"}],"isConstructor":false,"name":"SetPlayerColor","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"NULL","description":"The widget the player is currently using.","isOptional":true,"isVarArg":false,"name":"pressedWidget","type":"Entity"}],"description":"Sets the widget that is currently in use by the player's mouse.\n\nHaving a pressed widget stops the player from firing his weapon to allow input to be passed onto the widget.","examples":[],"isConstructor":false,"name":"SetPressedWidget","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new render angles to set","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"Sets the render angles of a player.","examples":[],"isConstructor":false,"name":"SetRenderAngles","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new sprint speed when sv_friction is below 10. Higher sv_friction values will result in slower speed.\n\nHas to be 7 or above or the player won't be able to move.","isOptional":false,"isVarArg":false,"name":"runSpeed","type":"number"}],"description":"Sets the player's sprint speed.\n\nSee also {{ClassFunction|Player|GetRunSpeed}}, {{ClassFunction|Player|SetWalkSpeed}} and {{ClassFunction|Player|SetMaxSpeed}}.","examples":[],"isConstructor":false,"name":"SetRunSpeed","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new maximum height the player can step onto without jumping","isOptional":false,"isVarArg":false,"name":"stepHeight","type":"number"}],"description":"Sets the maximum height a player can step onto without jumping.","examples":[],"isConstructor":false,"name":"SetStepSize","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whenever to suppress the notice or not.","isOptional":false,"isVarArg":false,"name":"doSuppress","type":"boolean"}],"description":"Sets whenever to suppress the pickup notification for the player.","examples":[],"isConstructor":false,"name":"SetSuppressPickupNotices","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The team that the player is being set to.","isOptional":false,"isVarArg":false,"name":"Team","type":"number"}],"description":"Sets the player to the chosen team.","examples":[{"code":"function ChangeMyTeam( ply, cmd, args )\n    ply:SetTeam( args[1] )\n    ply:Spawn()\nend\nconcommand.Add( \"set_team\", ChangeMyTeam )","description":"Sets the players team to the first argument when writing \"set_team\" into the console and respawns the player afterwards, ex. \"set_team 1\"."}],"isConstructor":false,"name":"SetTeam","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"How quickly the player will un-duck","isOptional":false,"isVarArg":false,"name":"UnDuckSpeed","type":"number"}],"description":"Sets how quickly a player un-ducks","examples":[],"isConstructor":false,"name":"SetUnDuckSpeed","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"If the player is spectating an entity, this should be the entity the player is spectating, so we can use its hands model instead.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Sets up the players view model hands. Calls {{HookFunction|GM|PlayerSetHandsModel}} to set the model of the hands.","examples":[],"isConstructor":false,"name":"SetupHands","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The user group of the player.","isOptional":false,"isVarArg":false,"name":"groupName","type":"string"}],"description":"Sets the usergroup of the player.","examples":[{"code":"Entity(1):SetUserGroup(\"superadmin\")\nprint(Entity(1):GetUserGroup())","description":"Make the player superadmin and print their group."}],"isConstructor":false,"name":"SetUserGroup","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity to attach the player view to.","isOptional":false,"isVarArg":false,"name":"viewEntity","type":"Entity"}],"description":"Attaches the players view to the position and angles of the specified entity.","examples":[],"isConstructor":false,"name":"SetViewEntity","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new desired view offset when standing.","isOptional":false,"isVarArg":false,"name":"viewOffset","type":"Vector"}],"description":"Sets the '''desired''' view offset which equals the difference between the players actual position and their view when standing.\n\nIf you want to set '''actual''' view offset, use {{ClassFunction|Player|SetCurrentViewOffset}}\n\nSee also {{ClassFunction|Player|SetViewOffsetDucked}} for '''desired''' view offset when crouching.","examples":[],"isConstructor":false,"name":"SetViewOffset","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new desired view offset when crouching.","isOptional":false,"isVarArg":false,"name":"viewOffset","type":"Vector"}],"description":"Sets the '''desired''' view offset which equals the difference between the players actual position and their view when crouching.\n\nIf you want to set '''actual''' view offset, use {{ClassFunction|Player|SetCurrentViewOffset}}\n\nSee also {{ClassFunction|Player|SetViewOffset}} for '''desired''' view offset when standing.","examples":[],"isConstructor":false,"name":"SetViewOffsetDucked","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The angle to set.","isOptional":false,"isVarArg":false,"name":"punchAngle","type":"Angle"}],"description":"Sets client's view punch. See {{ClassFunction|Player|ViewPunch}}","examples":[],"isConstructor":false,"name":"SetViewPunchAngles","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new walk speed when sv_friction is below 10. Higher sv_friction values will result in slower speed.\n\nHas to be 7 or above or the player won't be able to move.","isOptional":false,"isVarArg":false,"name":"walkSpeed","type":"number"}],"description":"Sets the player's normal walking speed. Not sprinting, not slow walking {{Key|+walk}}.\n\nThere currently is no way to modify the slow walking {{Key|+walk}} speed.\n\nSee also {{ClassFunction|Player|GetWalkSpeed}}, {{ClassFunction|Player|SetCrouchedWalkSpeed}}, {{ClassFunction|Player|SetMaxSpeed}} and {{ClassFunction|Player|SetRunSpeed}}.\n\n{{Bug|Issue=2030|Using a speed of 0 can lead to prediction errors.}}","examples":[],"isConstructor":false,"name":"SetWalkSpeed","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"This is the color to be set. The format is Vector(r,g,b), and each color should be between 0 and 1.","isOptional":false,"isVarArg":false,"name":"Color","type":"Vector"}],"description":"Sets the player weapon's color. The part of the model that is colored is determined by the model itself, and is different for each model.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"SetWeaponColor","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Polls the engine to request if the player should be drawn at the time the function is called.","examples":[],"isConstructor":false,"name":"ShouldDrawLocalPlayer","realm":"client","returns":[{"description":"shouldDraw","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to drop the player's current weapon or not","isOptional":false,"isVarArg":false,"name":"drop","type":"boolean"}],"description":"Sets whether the player's current weapon should drop on death.\n\n'''NOTE!''' This seems to be reset to false when player dies.","examples":[],"isConstructor":false,"name":"ShouldDropWeapon","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Opens the player steam profile page in the steam overlay browser.","examples":[],"isConstructor":false,"name":"ShowProfile","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity that was dropped.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Signals the entity that it was dropped by the gravity gun.","examples":[],"isConstructor":false,"name":"SimulateGravGunDrop","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity picked up","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Signals the entity that it was picked up by the gravity gun. This call is only required if you want to simulate the situation of picking up objects.","examples":[],"isConstructor":false,"name":"SimulateGravGunPickup","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Spectate mode, see {{Enum|OBS_MODE}}.","isOptional":false,"isVarArg":false,"name":"mode","type":"OBS_MODE"}],"description":"Starts spectate mode for given player. This will also affect the players movetype in some cases.","examples":[],"isConstructor":false,"name":"Spectate","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity to spectate.","isOptional":false,"isVarArg":false,"name":"entity","type":"Entity"}],"description":"Makes the player spectate the entity\n\nTo get the applied spectated entity, use {{ClassFunction|Player|GetObserverTarget}}().\n\n{{Bug|Issue=3267|The player's position will not update while spectating, causing area portals and other map optimisations to not work properly. You can fix this by setting the player's position to the spectated entity's each tick.}}","examples":[{"code":"local ent = ents.Create( \"prop_physics\" )\nent:SetModel( \"models/hunter/misc/sphere025x025.mdl\" )\nent:SetPos( Vector( 0, 0, 0 ) )\nent:Spawn()\n \nfor _, ply in pairs( player.GetAll() ) do\n\tply:Spectate( OBS_MODE_CHASE )\n\tply:SpectateEntity( ent )\n\tply:StripWeapons()\n\n\ttimer.Simple( 5, function()\n\t\tply:UnSpectate()\n\t\tply:Spawn()\n\tend )\nend","description":"Creates a entity, spectates it and after 5 seconds, stops spectating it."}],"isConstructor":false,"name":"SpectateEntity","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The location to spray from","isOptional":false,"isVarArg":false,"name":"sprayOrigin","type":"Vector"},{"default":"","description":"The location to spray to","isOptional":false,"isVarArg":false,"name":"sprayEndPos","type":"Vector"}],"description":"Makes a player spray their decal.","examples":[{"code":"ply:SprayDecal(ply:EyePos(),ply:EyePos() + ply:GetAimVector()*5000)","description":"Makes the player spray their decal 5000 units away."}],"isConstructor":false,"name":"SprayDecal","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Disables the sprint on the player.\n\n{{Bug|Issue=2390|Not working - use {{ClassFunction|Player|SetRunSpeed}} or {{ClassFunction|CMoveData|SetMaxSpeed}} in a {{HookFunction|GM|Move}} hook, instead.}}","examples":[{"code":"player.GetByID( 1 ):SprintDisable()","description":"Stops and prevents player with ID 1 from sprinting"}],"isConstructor":false,"name":"SprintDisable","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Enables the sprint on the player.\n\n{{Bug|Issue=2390|Not working - use {{ClassFunction|Player|SetRunSpeed}} or {{ClassFunction|CMoveData|SetMaxSpeed}} in a {{HookFunction|GM|Move}} hook, instead.}}","examples":[{"code":"player.GetByID( 1 ):SprintEnable()","description":"Allows the player with ID 1 to use the sprint ({{Key|SHIFT}} by default) feature."}],"isConstructor":false,"name":"SprintEnable","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.}}\n\nDoesn't appear to do anything.","examples":[{"code":"local vDelay = 0\nlocal prevDown = 0\nhook.Add( \"StartCommand\", \"TestFunc\", function( ply, cmd )\n    if ( cmd:KeyDown( IN_FORWARD ) and prevDown == false ) then\n        vDelay = CurTime() + 0.4\n    elseif ( cmd:KeyDown( IN_FORWARD ) ) then\n        if ( vDelay < CurTime() )then\n            cmd:SetButtons( bit.bor( cmd:GetButtons(), IN_SPEED ) )\n        end\n    end\n\tprevDown = cmd:KeyDown(IN_FORWARD)\nend )","description":"An example alternative to this function."}],"isConstructor":false,"name":"StartSprinting","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.}}\n\nWhen used in a {{HookFunction|GM|SetupMove}} hook, this function will force the player to walk, as well as preventing the player from sprinting.","examples":[{"code":"hook.Add( \"SetupMove\", \"TestFunc\", function( ply, mv, cmd )\n\tply:StartWalking()\nend )","description":"Example usage, forces the player to walk. (+walk console command)"}],"isConstructor":false,"name":"StartWalking","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the player's SteamID. In singleplayer, this will be STEAM_ID_PENDING serverside.\n\nFor Bots this will return \"BOT\" on the server and on the client it returns \"NULL\".","examples":[{"code":"for k, v in pairs( player.GetAll() ) do\n     print( \"[\" .. v:EntIndex() .. \"]\", v:Name(), v:SteamID( ) )\nend","description":"Prints the EntityID, Name and SteamID of all players"}],"isConstructor":false,"name":"SteamID","realm":"shared","returns":[{"description":"SteamID","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the player's 64bit SteamID aka CommunityID.\n\nIn singleplayer, this will return no value serverside.\n\nFor bots, this will return 90071996842377216 (equivalent to STEAM_0:0:0) for the first bot to join.<br/>\nFor each additional bot, the number increases by 1. So the next bot will be 90071996842377217 (STEAM_0:1:0) then 90071996842377218 (STEAM_0:0:1) and so on.\n\nOn the client it returns no value for bots.","examples":[{"code":"print(ply:SteamID64())","description":"Prints the 64bit SteamID of player"}],"isConstructor":false,"name":"SteamID64","realm":"shared","returns":[{"description":"Player's 64bit SteamID aka CommunityID.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.}}\n\nWhen used in a {{HookFunction|GM|SetupMove}} hook, this function will prevent the player from sprinting.\n\nWhen +walk is engaged, the player will still be able to sprint to half speed (normal run speed) as opposed to full sprint speed without this function.","examples":[{"code":"hook.Add( \"SetupMove\", \"TestFunc\", function( ply, mv, cmd )\n\tply:StopSprinting()\nend )","description":"Example usage, disables sprinting at all times."}],"isConstructor":false,"name":"StopSprinting","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.}}\n\nWhen used in a {{HookFunction|GM|SetupMove}} hook, this function behaves unexpectedly by preventing the player from sprinting similar to {{ClassFunction|Player|StopSprinting}}.","examples":[{"code":"hook.Add( \"SetupMove\", \"TestFunc\", function( ply, mv, cmd )\n\tply:StopWalking()\nend )","description":"Disables Sprinting, not Walking."}],"isConstructor":false,"name":"StopWalking","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Turns off the zoom mode of the player. (+zoom console command)\n\nBasically equivalent of entering \"-zoom\" into player's console.","examples":[],"isConstructor":false,"name":"StopZooming","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Removes all ammo from the player.","examples":[],"isConstructor":false,"name":"StripAmmo","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The weapon class to remove","isOptional":false,"isVarArg":false,"name":"weapon","type":"string"}],"description":"Removes the specified weapon class from a certain player","examples":[{"code":"player.GetByID( 1 ):StripWeapon(\"weapon_crowbar\")","description":"Removes the crowbar from the player with the ID 1"}],"isConstructor":false,"name":"StripWeapon","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Removes all weapons from a certain player","examples":[{"code":"","description":""}],"isConstructor":false,"name":"StripWeapons","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Hint name/class/index to prevent from showing up","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Prevents a hint from showing up.<br/>\n{{Note|This function is only available in Sandbox and its derivatives}}","examples":[],"isConstructor":false,"name":"SuppressHint","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Attempts to switch the player weapon to the one specified in the \"cl_defaultweapon\" convar, if the player does not own the specified weapon nothing will happen.\n\nIf you want to switch to a specific weapon, use: {{ClassFunction|Player|SetActiveWeapon}}","examples":[],"isConstructor":false,"name":"SwitchToDefaultWeapon","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the player's team ID.\n\nReturns 0 clientside when the game is not fully loaded.","examples":[{"code":"print(team.GetName( Entity( 1 ):Team() ) )","description":"Prints the name of the player's team"}],"isConstructor":false,"name":"Team","realm":"shared","returns":[{"description":"The player's team's index number, as in the {{Enum|TEAM}} or a custom team defined in {{LibraryFunction|team|SetUp}}.","type":"TEAM"}]},{"accessModifier":"public","arguments":[],"description":"Returns the time in second since the player connected.","examples":[],"isConstructor":false,"name":"TimeConnected","realm":"server","returns":[{"description":"connectTime","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The start position of the hull trace.","isOptional":false,"isVarArg":false,"name":"startPos","type":"Vector"},{"default":"","description":"The end position of the hull trace.","isOptional":false,"isVarArg":false,"name":"endPos","type":"Vector"},{"default":"","description":"The minimum coordinates of the hull.","isOptional":false,"isVarArg":false,"name":"mins","type":"Vector"},{"default":"","description":"The maximum coordinates of the hull.","isOptional":false,"isVarArg":false,"name":"maxs","type":"Vector"},{"default":"","description":"The damage to be applied.","isOptional":false,"isVarArg":false,"name":"damage","type":"number"},{"default":"","description":"Bitflag specifying the damage type, see {{Enum|DMG}}.","isOptional":false,"isVarArg":false,"name":"damageFlags","type":"Vector"},{"default":"","description":"The force to be applied to the hit object.","isOptional":false,"isVarArg":false,"name":"damageForce","type":"number"},{"default":"","description":"Whether to apply damage to all hit NPCs or not.","isOptional":false,"isVarArg":false,"name":"damageAllNPCs","type":"boolean"}],"description":"Performs a trace hull and applies damage to the entities hit, returns the first entity hit.","examples":[],"isConstructor":false,"name":"TraceHullAttack","realm":"server","returns":[{"description":"The hit entity","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The initial {{Enum|ACT}}","isOptional":false,"isVarArg":false,"name":"act","type":"ACT"}],"description":"Translates {{Enum|ACT}} according to the holdtype of players currently held weapon.","examples":[],"isConstructor":false,"name":"TranslateWeaponActivity","realm":"shared","returns":[{"description":"Translated {{Enum|ACT}}","type":"ACT"}]},{"accessModifier":"public","arguments":[],"description":"Unfreezes all objects the player has frozen with their Physics Gun. Same as double pressing R while holding Physics Gun.","examples":[],"isConstructor":false,"name":"UnfreezePhysicsObjects","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Warning|'''This function has collisions,''' where more than one player has the same UniqueID. It is '''highly''' recommended to use {{ClassFunction|Player|AccountID}}, {{ClassFunction|Player|SteamID}} or {{ClassFunction|Player|SteamID64}} instead, which are guaranteed to be unique to each player.}}\n\nReturns a 32 bit integer that remains constant for a player across joins/leaves and across different servers. This can be used when a string is inappropriate - e.g. in a database primary key.\n\n{{Note|In Singleplayer, this function will always return 1.}}","examples":[{"code":"Entity( 1 ):UniqueID()","description":"Gets the Unique ID of a player."},{"code":"local ply = Entity( 1 )\nlocal uniqueid = util.CRC( \"gm_\" .. ply:SteamID() .. \"_gm\" )\nprint( uniqueid )","description":"Functional equivalent of this function."}],"isConstructor":false,"name":"UniqueID","realm":"shared","returns":[{"description":"The player's Unique ID","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Unique table key.","isOptional":false,"isVarArg":false,"name":"key","type":"any"}],"description":"Returns a table that will stay allocated for the specific player between connects until the server shuts down. Note, that this table is not synchronized between client and server.","examples":[{"code":"local table = Entity( 1 ):UniqueIDTable( \"mytable\" )\ntable.MyValue = \"test\"\n\n// Somewhere else\nlocal table = Entity( 1 ):UniqueIDTable( \"mytable\" )\nprint( table.MyValue )\nlocal table = Entity( 1 ):UniqueIDTable( \"mytable_other\" )\nprint( table.MyValue )","description":"Example usage"}],"isConstructor":false,"name":"UniqueIDTable","realm":"shared","returns":[{"description":"The table that contains any info you have put in it.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Unlocks the player movement if locked previously. <br />\nWill disable godmode for the player if locked previously.","examples":[],"isConstructor":false,"name":"UnLock","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Stops the player from spectating another entity.","examples":[],"isConstructor":false,"name":"UnSpectate","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the player's ID.\nYou can use {{GlobalFunction|Player}}() to get the player by their ID.","examples":[],"isConstructor":false,"name":"UserID","realm":"shared","returns":[{"description":"The player's user ID","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The angle in which to push the player's screen.","isOptional":false,"isVarArg":false,"name":"PunchAngle","type":"Angle"}],"description":"Simulates a push on the client's screen.","examples":[{"code":"player:ViewPunch(Angle(-10, 0, 0))","description":"Knocks the player's camera upward"}],"isConstructor":false,"name":"ViewPunch","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"0","description":"Reset all ViewPunch below this threshold.","isOptional":true,"isVarArg":false,"name":"tolerance","type":"number"}],"description":"Resets the player's view punch ( {{ClassFunction|Player|ViewPunch}} ) effect back to normal.","examples":[],"isConstructor":false,"name":"ViewPunchReset","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the players voice volume, how loud the player's voice communication currently is, as a normal number. Doesn't work on local player unless the voice_loopback convar is set to 1.","examples":[],"isConstructor":false,"name":"VoiceVolume","realm":"client","returns":[{"description":"The voice volume.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The driving mode index.","isOptional":false,"isVarArg":false,"name":"drivingMode","type":"number"}],"description":"{{Internal}}\nSets the driving entity and driving mode.\n\nUse {{LibraryFunction|drive|PlayerStartDriving}} instead, see [[Entity Driving]].","examples":[],"isConstructor":false,"name":"SetDrivingEntity","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"Player"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"This is the base panel for every other VGUI panel.\n\nIt contains all of the basic methods, some of which may only work on certain VGUI elements. As their functionality is provided at the game's C/C++ level rather than by its Lua script extension, they are unfortunately unavailable for most practical purposes, however, they can still be obtained in a way similar to that provided by the {{Type|baseclass}} library:\n<pre>\n-- Create a new panel type NewPanel that inherits all of its functionality from DLabel,\n-- but has a different SetText method than DLabel does - all without the hassle of that\n-- old DLabel's default text getting in the way. Fun stuff.\n\nlocal PANEL = {}\n\nfunction PANEL:Init()\n\n\tself:SetText_Base( \"\" )\n\tself:SetText( \"Time for something different!\" )\n\nend\n\nfunction PANEL:Paint( aWide, aTall )\n\n\tlocal TextX, TextY = 0, 0\n\tlocal TextColor = Color( 255, 000, 000, 255 )\n\n\tsurface.SetFont( self:GetFont() or \"default\" )\n\tsurface.SetTextColor( TextColor )\n\tsurface.SetTextPos( TextX, TextY )\n\tsurface.DrawText( self:GetText() )\n\nend\n\n-- And here we go:\nPANEL.SetText_Base = FindMetaTable( \"Panel\" ).SetText\n\nfunction PANEL:SetText( aText ) \n\n\tself.Text = tostring( aText ) \n\nend\n\nfunction PANEL:GetText() \n\n\treturn self.Text or \"\" \n\nend\n\nvgui.Register( \"NewPanel\", PANEL, \"DLabel\" )\n</pre>","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The panel to be added (parented). Can also be:\n* {{FuncArg|string|Class Name|creates panel with the specified name and adds it to the panel.}}\n* {{FuncArg|table|PANEL table|creates a panel from table and adds it to the panel.}}","isOptional":false,"isVarArg":false,"name":"object","type":"Panel"}],"description":"Adds the specified object to the panel.","examples":[],"isConstructor":false,"name":"Add","realm":"client","returns":[{"description":"New panel","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|Does nothing}}\nThis function does nothing.","examples":[],"isConstructor":false,"name":"AddText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"0","description":"The align offset.","isOptional":true,"isVarArg":false,"name":"offset","type":"number"}],"description":"Aligns the panel on the bottom of its parent with the specified offset.","examples":[],"isConstructor":false,"name":"AlignBottom","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"0","description":"The align offset.","isOptional":true,"isVarArg":false,"name":"offset","type":"number"}],"description":"Aligns the panel on the left of its parent with the specified offset.","examples":[],"isConstructor":false,"name":"AlignLeft","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"0","description":"The align offset.","isOptional":true,"isVarArg":false,"name":"offset","type":"number"}],"description":"Aligns the panel on the right of its parent with the specified offset.","examples":[],"isConstructor":false,"name":"AlignRight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"0","description":"The align offset.","isOptional":true,"isVarArg":false,"name":"offset","type":"number"}],"description":"Aligns the panel on the top of its parent with the specified offset.","examples":[],"isConstructor":false,"name":"AlignTop","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The alpha value (0-255) to approach.","isOptional":false,"isVarArg":false,"name":"alpha","type":"number"},{"default":"","description":"The time in seconds it should take to reach the alpha.","isOptional":false,"isVarArg":false,"name":"duration","type":"number"},{"default":"0","description":"The delay before the animation starts.","isOptional":true,"isVarArg":false,"name":"delay","type":"number"},{"default":"","description":"The function to be called once the animation finishes. Arguments are:\n* {{FuncArg|table|animData|The {{Struct|AnimationData}} that was used.}}\n* {{FuncArg|Panel|pnl|The panel object whose alpha was changed.}}","isOptional":true,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Uses animation to transition the current alpha value of a panel to a new alpha, over a set period of time and after a specified delay.","examples":[],"isConstructor":false,"name":"AlphaTo","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}} Performs the per-frame operations required for panel animations.\n\nThis is called every frame by {{HookFunction|PANEL|AnimationThink}}.","examples":[],"isConstructor":false,"name":"AnimationThinkInternal","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the {{GlobalFunction|SysTime}} value when all animations for this panel object will end.","examples":[],"isConstructor":false,"name":"AnimTail","realm":"client","returns":[{"description":"The system time value when all animations will end for this panel.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to append (add on).","isOptional":false,"isVarArg":false,"name":"txt","type":"string"}],"description":"Appends text to a {{Type|RichText}} element. This does not automatically add a new line.\n\n[[Category:RichText]]","examples":[],"isConstructor":false,"name":"AppendText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The GWEN controls table to apply to the panel.","isOptional":false,"isVarArg":false,"name":"GWENTable","type":"table"}],"description":"Used by {{ClassFunction|Panel|LoadGWENFile}} and {{ClassFunction|Panel|LoadGWENString}} to apply a GWEN controls table to a panel object.\n\nYou can do this manually using {{LibraryFunction|file|Read}} and {{LibraryFunction|util|JSONToTable}} to import and create a GWEN table structure from a ''.gwen'' file. This method can then be called, passing the GWEN table's ''Controls'' member.","examples":[],"isConstructor":false,"name":"ApplyGWEN","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Centers the panel on its parent.","examples":[],"isConstructor":false,"name":"Center","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"0.5","description":"The center fraction.","isOptional":true,"isVarArg":false,"name":"fraction","type":"number"}],"description":"Centers the panel horizontally with specified fraction.","examples":[],"isConstructor":false,"name":"CenterHorizontal","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"0.5","description":"The center fraction.","isOptional":true,"isVarArg":false,"name":"fraction","type":"number"}],"description":"Centers the panel vertically with specified fraction.","examples":[],"isConstructor":false,"name":"CenterVertical","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of children of the of panel.","examples":[],"isConstructor":false,"name":"ChildCount","realm":"client","returns":[{"description":"childCount","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the width and height of the space between the position of the panel (upper-left corner) and the max bound of the children panels (farthest reaching lower-right corner).","examples":[{"code":"-- Parent panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(200, 200)\nBGPanel:Center()\n\nlocal panel, child_size_w, child_size_h = nil, 0, 0\n\n-- Create increasingly large blocks until children size exceeds the size of the panel\nwhile(BGPanel:ChildrenSize() < BGPanel:GetSize()) do\n\n\tchild_w, child_h = BGPanel:ChildrenSize()\n\n\tpanel = vgui.Create(\"DPanel\", BGPanel)\n\tpanel:SetPos(0, 0)\n\t\n\t-- Increase size based on the children size\n\tpanel:SetSize(child_w+10, child_h+10)\n\t\n\t-- Random bluish color every frame\n\tfunction panel:PerformLayout()\n\t\tself:InvalidateLayout()\t-- Call this again next frame\n\t\tself:SetBackgroundColor(Color(math.random(0, 255), 255, math.random(0, 255)))\n\tend\n\t\n\t-- Move to back so we can see the effect\n\tpanel:MoveToBack()\n\t\nend","description":"Creates a recursively generated box of panels where the size of each panel is determined by the parent panel's children size + 10x10 pixels.\n\nAlso they flash bluish colors, just for good measure."}],"isConstructor":false,"name":"ChildrenSize","realm":"client","returns":[{"description":"The children size width.","type":"number"},{"description":"The children size height.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Marks all of the panel's children for deletion.","examples":[],"isConstructor":false,"name":"Clear","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The color to fade to","isOptional":false,"isVarArg":false,"name":"color","type":"table"},{"default":"","description":"Length of the animation","isOptional":false,"isVarArg":false,"name":"length","type":"number"},{"default":"","description":"Delay before start fading","isOptional":false,"isVarArg":false,"name":"delay","type":"number"},{"default":"","description":"Function to execute when finished","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Fades panels color to specified one. It won't work unless panel has SetColor function.","examples":[],"isConstructor":false,"name":"ColorTo","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The command to send to the panel.","isOptional":false,"isVarArg":false,"name":"command","type":"string"}],"description":"Sends an action command signal to the panel. The response is handled by {{HookFunction|PANEL|ActionSignal}}.","examples":[{"code":"function DisconnectDialog()\n\n\t-- Remove existing dialog box\n\tif(DialogBox) then DialogBox:Remove() end\n\t\n\t-- Font and message\n\tlocal font = \"ChatFont\"\n\tlocal msg = \"Would you like to disconnect?\"\n\t\n\t-- Get the size of the text\n\tsurface.SetFont(font)\n\tlocal msg_w, msg_h = surface.GetTextSize(msg)\n\t\n\t-- Padding and button size\n\tlocal padding = 15\n\tlocal btn_w, btn_h = 35, 25\n\t\n\t-- Calculate dialog box size\n\tlocal dialog_w = msg_w+(padding*2)\n\tlocal dialog_h = msg_h+(padding*3)+btn_h\n\t\n\t-- Create the dialog box\n\tDialogBox = vgui.Create(\"DPanel\")\n\tDialogBox:SetSize(dialog_w, dialog_h)\n\tDialogBox:Center()\n\tDialogBox:SetBackgroundColor(Color(64, 64, 92, 255))\n\t\n\t-- Message\n\tlocal lbl = vgui.Create(\"DLabel\", DialogBox)\n\tlbl:SetPos(padding, padding)\n\tlbl:SetSize(msg_w, msg_h)\n\tlbl:SetText(msg)\n\tlbl:SetFont(font)\n\t\n\t-- Yes button\n\tlocal yes = vgui.Create(\"DButton\", DialogBox)\n\tyes:SetPos((dialog_w/2)-btn_w-20, msg_h+padding*2)\n\tyes:SetSize(btn_w, btn_h)\n\tyes:SetText(\"Yes\")\n\tyes:SetFont(font)\n\tyes.DoClick = function() DialogBox:Command(\"yes\") end\n\t\n\t-- No button\n\tlocal no = vgui.Create(\"DButton\", DialogBox)\n\tno:SetPos((dialog_w/2)+20, msg_h+padding*2)\n\tno:SetSize(btn_w, btn_h)\n\tno:SetText(\"No\")\n\tno:SetFont(font)\n\tno.DoClick = function() DialogBox:Command(\"no\") end\n\t\n\t-- Force mouse input\n\tDialogBox:MakePopup()\n\t\n\t-- Hook fired when DialogBox:Command is used\n\tfunction DialogBox:ActionSignal(signalName, signalValue)\n\t\n\t\t-- Thank the player and disconnect after 2 seconds\n\t\tif(signalName == \"yes\") then\n\t\t\n\t\t\tchat.AddText(Color(192, 192, 224), \"Thanks for playing \"..LocalPlayer():Nick()..\", come back soon!\")\n\t\t\t\n\t\t\ttimer.Simple(2.0, function()\n\t\t\t\tRunConsoleCommand(\"disconnect\")\n\t\t\tend)\n\t\t\t\n\t\t\tself:Remove()\n\t\t\n\t\t-- Remove the dialog box\n\t\telseif(signalName == \"no\") then\n\t\t\n\t\t\tself:Remove()\n\t\t\n\t\tend\n\t\n\tend\n\t\nend","description":"Defines a function which displays a dialog box that asks the player if they want to leave the server. Clicking the buttons fire panel commands that call the {{HookFunction|PANEL|ActionSignal}} which handles what action should be taken."}],"isConstructor":false,"name":"Command","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new value to set the associated console variable to.","isOptional":false,"isVarArg":false,"name":"newValue","type":"string"}],"description":"Updates a panel object's associated console variable. This must first be set up with {{GlobalFunction|Derma_Install_Convar_Functions}}, and have a ConVar set using {{ClassFunction|Panel|SetConVar}}.","examples":[],"isConstructor":false,"name":"ConVarChanged","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"A think hook for {{Type|Panel}}s using ConVars as a value. Call it in the Think hook. Sets the panel's value should the convar change.\n\nThis function is best for: checkboxes, sliders, number wangs\n\nFor a string alternative, see [[Panel/ConVarStringThink|Panel.ConVarStringThink]].\n\n''Important'': Make sure your Panel has a SetValue function, else you may get errors.","examples":[{"code":"function PANEL:Think()\n\tself:ConVarNumberThink()\nend","description":"How it should be implemented into your input."}],"isConstructor":false,"name":"ConVarNumberThink","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"A think hook for [[Panel|panels]] using ConVars as a value. Call it in the Think hook. Sets the panel's value should the convar change.\n\nThis function is best for: text inputs, read-only inputs, dropdown selects\n\nFor a number alternative, see [[Panel/ConVarNumberThink|Panel.ConVarNumberThink]].\n\n''Important'': Make sure your Panel has a SetValue function, else you may get errors.","examples":[{"code":"function PANEL:Think()\n\tConVarStringThink()\nend","description":"How it should be implemented into your input."}],"isConstructor":false,"name":"ConVarStringThink","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to copy the boundary and dock settings from.","isOptional":false,"isVarArg":false,"name":"srcPanel","type":"Panel"}],"description":"Gets the size, position and dock state of the passed panel object, and applies it to this one.","examples":[],"isConstructor":false,"name":"CopyBase","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to copy size and position from.","isOptional":false,"isVarArg":false,"name":"base","type":"Panel"}],"description":"Copies position and size of the panel.","examples":[],"isConstructor":false,"name":"CopyBounds","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to copy the height from.","isOptional":false,"isVarArg":false,"name":"base","type":"Panel"}],"description":"Copies the height of the panel.","examples":[],"isConstructor":false,"name":"CopyHeight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to position the width from.","isOptional":false,"isVarArg":false,"name":"base","type":"Panel"}],"description":"Copies the position of the panel.","examples":[],"isConstructor":false,"name":"CopyPos","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Performs the \"CONTROL + C\" key combination effect ( Copy selection to clipboard ) on selected text.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"CopySelected","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to copy the width from.","isOptional":false,"isVarArg":false,"name":"base","type":"Panel"}],"description":"Copies the width of the panel.","examples":[],"isConstructor":false,"name":"CopyWidth","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the cursor position relative to the top left of the panel.\n\nThis is equivalent to calling {{LibraryFunction|gui|MousePos}} and then {{ClassFunction|Panel|ScreenToLocal}}.\n\n{{Warning|This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass.<br>\nie. inaccurate results may be returned if the panel or any of its ancestors have been repositioned outside of {{HookFunction|PANEL|Think}} or {{HookFunction|PANEL|PerformLayout}} within the last frame.}}","examples":[],"isConstructor":false,"name":"CursorPos","realm":"client","returns":[{"description":"X coordinate of the cursor, relative to the top left of the panel.","type":"number"},{"description":"Y coordinate of the cursor, relative to the top left of the panel.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Performs the \"CONTROL + X\" ( delete text and copy it to clipboard buffer ) action on selected text.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"CutSelected","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique cookie name to delete.","isOptional":false,"isVarArg":false,"name":"cookieName","type":"string"}],"description":"Deletes a cookie value using the panel's cookie name ( {{ClassFunction|Panel|GetCookieName}} ) and the passed extension.","examples":[],"isConstructor":false,"name":"DeleteCookie","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resets the panel object's {{ClassFunction|Panel|SetPos}} method and removes its animation table (''Panel.LerpAnim''). This effectively undoes the changes made by {{ClassFunction|Panel|LerpPositions}}.\n\nIn order to use Lerp animation again, you must call {{ClassFunction|Panel|Stop}} before setting its ''SetPosReal'' property to 'nil'. See the example below.","examples":[{"code":"function ChangeLerpSpeed( pnl, newSpeed, ease )\n\t\n\tif !ispanel(pnl) or !IsValid(pnl) then return end -- Make sure panel is valid\n\t\n\tpnl:DisableLerp()\n\tpnl:Stop()\n\tpnl.SetPosReal = nil\n\t\n\tpnl:LerpPositions( newSpeed, ease )\n\t\nend","description":"Creates a function for changing the Lerp animation speed of a panel."}],"isConstructor":false,"name":"DisableLerp","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The target object with which to compare position.","isOptional":false,"isVarArg":false,"name":"tgtPanel","type":"Panel"}],"description":"Returns the linear distance from the centre of this panel object and another.","examples":[],"isConstructor":false,"name":"Distance","realm":"client","returns":[{"description":"The linear (straight-line) distance between the centres of the two objects.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The horizontal (x) position in pixels of the point to compare with. Local to the parent panel, or container.","isOptional":false,"isVarArg":false,"name":"posX","type":"number"},{"default":"","description":"The vertical (y) position in pixels of the point to compare with. Local to the parent panel, or container.","isOptional":false,"isVarArg":false,"name":"posY","type":"number"}],"description":"Returns the distance between the centre of this panel object and a specified point (local to the parent panel).","examples":[],"isConstructor":false,"name":"DistanceFrom","realm":"client","returns":[{"description":"The linear (straight-line) distance between the specified point and the centre of the panel object.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Dock type using {{Enum|DOCK}}.","isOptional":false,"isVarArg":false,"name":"dockType","type":"DOCK"}],"description":"Sets the dock type of the panel.\n\n{{Note|After using this function, if you want to get the correct panel's bounds (position, size), use {{ClassFunction|Panel|InvalidateParent}} (use '''true''' as argument if you need to update immediately)}}","examples":[{"code":"local f = vgui.Create( \"DFrame\" )\nf:SetTitle( \"Dock Test\" )\nf:SetSize( 256, 256 )\nf:Center()\nf:MakePopup()\n\nlocal p = vgui.Create( \"DPanel\", f )\np:Dock( FILL )\np:DockMargin( 0, 0, 0, 0 )\n\nfor i = 0, 10, 1 do\n\tlocal l = vgui.Create( \"DLabel\", p )\n\tl:Dock( TOP )\n\tl:DockMargin( 4, 0, 0, 0 ) -- shift to the right\n\tl:SetColor( color_black )\n\tl:SetText( \"Hi! I'm a label!\" )\nend","description":"Example docking including DockMargin. Provided by Walrus Viking in [http://facepunch.com/showthread.php?t=1439021&p=47095061&viewfull=1#post47095061 this] Facepunch post."},{"code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize(600, 300)\nframe:SetTitle(\"Docking Demonstration\")\nframe:Center()\nframe:MakePopup(true)\n\nlocal panel = vgui.Create(\"DPanel\", frame) --Create a panel on the left\npanel:SetSize(300, 0) --Height doesn't matter since we're docking it to the left anyways\npanel:Dock(LEFT)\nlocal fill = vgui.Create(\"DButton\", panel) --Create a button and dock it\nfill:SetText(\"FILL\")\nfill:Dock(FILL)\nlocal left = vgui.Create(\"DButton\", panel)\nleft:SetText(\"LEFT\")\nleft:Dock(LEFT)\nlocal right = vgui.Create(\"DButton\", panel)\nright:SetText(\"RIGHT\")\nright:Dock(RIGHT)\nlocal top = vgui.Create(\"DButton\", panel)\ntop:SetText(\"TOP\")\ntop:Dock(TOP)\nlocal bottom = vgui.Create(\"DButton\", panel)\nbottom:SetText(\"BOTTOM\")\nbottom:Dock(BOTTOM)\n\nlocal panel = vgui.Create(\"DPanel\", frame) --Do the same thing on the right, but this time with top and bottom before left and right\npanel:SetSize(300, 0)\npanel:Dock(RIGHT)\nlocal fill = vgui.Create(\"DButton\", panel)\nfill:SetText(\"FILL\")\nfill:Dock(FILL)\nlocal top = vgui.Create(\"DButton\", panel)\ntop:SetText(\"TOP\")\ntop:Dock(TOP)\nlocal bottom = vgui.Create(\"DButton\", panel)\nbottom:SetText(\"BOTTOM\")\nbottom:Dock(BOTTOM)\nlocal left = vgui.Create(\"DButton\", panel)\nleft:SetText(\"LEFT\")\nleft:Dock(LEFT)\nlocal right = vgui.Create(\"DButton\", panel)\nright:SetText(\"RIGHT\")\nright:Dock(RIGHT)","description":"Example showing how multiple docked elements behave."}],"isConstructor":false,"name":"Dock","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The left margin to the parent.","isOptional":false,"isVarArg":false,"name":"marginLeft","type":"number"},{"default":"","description":"The top margin to the parent.","isOptional":false,"isVarArg":false,"name":"marginTop","type":"number"},{"default":"","description":"The right margin to the parent.","isOptional":false,"isVarArg":false,"name":"marginRight","type":"number"},{"default":"","description":"The bottom margin to the parent.","isOptional":false,"isVarArg":false,"name":"marginBottom","type":"number"}],"description":"Sets the dock margin of the panel.\n\nThe dock margin is the extra space that will be left around the edge when this element is docked inside its parent element.","examples":[{"code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize(600, 300)\nframe:SetTitle(\"Docking Demonstration\")\nframe:Center()\nframe:MakePopup(true)\n\nlocal panel = vgui.Create(\"DPanel\", frame)\npanel:DockMargin(10, 20, 30, 40)\npanel:DockPadding(40, 30, 20, 10)\npanel:Dock(FILL)\n\nlocal button = vgui.Create(\"DButton\", panel)\nbutton:SetText(\"Lopsided proportions!\")\nbutton:Dock(FILL)","description":"Example showing the effects of DockMargin and DockPadding"}],"isConstructor":false,"name":"DockMargin","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The left padding to the parent.","isOptional":false,"isVarArg":false,"name":"paddingLeft","type":"number"},{"default":"","description":"The top padding to the parent.","isOptional":false,"isVarArg":false,"name":"paddingTop","type":"number"},{"default":"","description":"The right padding to the parent.","isOptional":false,"isVarArg":false,"name":"paddingRight","type":"number"},{"default":"","description":"The bottom padding to the parent.","isOptional":false,"isVarArg":false,"name":"paddingBottom","type":"number"}],"description":"Sets the dock padding of the panel.\n\nThe dock padding is the extra space that will be left around the edge when child elements are docked inside this element.","examples":[{"code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize(600, 300)\nframe:SetTitle(\"Docking Demonstration\")\nframe:Center()\nframe:MakePopup(true)\n\nlocal panel = vgui.Create(\"DPanel\", frame)\npanel:DockMargin(10, 20, 30, 40)\npanel:DockPadding(40, 30, 20, 10)\npanel:Dock(FILL)\n\nlocal button = vgui.Create(\"DButton\", panel)\nbutton:SetText(\"Lopsided proportions!\")\nbutton:Dock(FILL)","description":"Example showing the effects of DockMargin and DockPadding"}],"isConstructor":false,"name":"DockPadding","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Makes the panel \"lock\" the screen until it is removed. It will silently fail if used while cursor is not visible. Call {{ClassFunction|Panel|MakePopup}} before calling this function.\n\n{{Bug|Issue=3457|You can still click in the world even if locked.}}","examples":[],"isConstructor":false,"name":"DoModal","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}} Called by {{ClassFunction|Panel|DragMouseRelease}} when a user clicks one mouse button whilst dragging with another.","examples":[],"isConstructor":false,"name":"DragClick","realm":"client","returns":[{"description":"Always returns ''true''.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"If this time is greater than 0.1, {{ClassFunction|Panel|DragHoverClick}}, passing it as an argument.","isOptional":false,"isVarArg":false,"name":"HoverTime","type":"number"}],"description":"{{Internal}} Called by {{LibraryFunction|dragndrop|HoverThink}} to perform actions on an object that is dragged and hovered over another.","examples":[],"isConstructor":false,"name":"DragHover","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}} Called to end a drag and hover action. This resets the panel's {{HookFunction|PANEL|PaintOver}} method, and is primarily used by {{LibraryFunction|dragndrop|StopDragging}}.","examples":[],"isConstructor":false,"name":"DragHoverEnd","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The code for the mouse button pressed, passed by, for example, {{HookFunction|PANEL|OnMousePressed}}. See the {{Enum|MOUSE}}.","isOptional":false,"isVarArg":false,"name":"mouseCode","type":"MOUSE"}],"description":"Called to inform the {{Lib|dragndrop}} that a mouse button is being held down on a panel object.","examples":[],"isConstructor":false,"name":"DragMousePress","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The code for the mouse button pressed, passed by, for example, {{HookFunction|PANEL|OnMouseReleased}}. See the {{Enum|MOUSE}}.","isOptional":false,"isVarArg":false,"name":"mouseCode","type":"MOUSE"}],"description":"Called to inform the {{Lib|dragndrop}} that a mouse button has been depressed on a panel object.","examples":[],"isConstructor":false,"name":"DragMouseRelease","realm":"client","returns":[{"description":"''true'' if an object was being dragged, otherwise ''false''.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The x coordinate of the top-left corner of the drop area.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The y coordinate of the top-left corner of the drop area.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The width of the drop area.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The height of the drop area.","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"{{Internal}} Called to draw the drop target when an object is being dragged across another. See {{ClassFunction|Panel|SetDropTarget}}.","examples":[],"isConstructor":false,"name":"DrawDragHover","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Draws a coloured rectangle to fill the panel object this method is called on. The colour is set using {{LibraryFunction|surface|SetDrawColor}}. This should only be called within the object's {{HookFunction|PANEL|Paint}} or {{HookFunction|PANEL|PaintOver}} hooks, as a shortcut for {{LibraryFunction|surface|DrawRect}}.","examples":[],"isConstructor":false,"name":"DrawFilledRect","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Draws a hollow rectangle the size of the panel object this method is called on, with a border width of 1 px. The border colour is set using {{LibraryFunction|surface|SetDrawColor}}. This should only be called within the object's {{HookFunction|PANEL|Paint}} or {{HookFunction|PANEL|PaintOver}} hooks, as a shortcut for {{LibraryFunction|surface|DrawOutlinedRect}}.","examples":[],"isConstructor":false,"name":"DrawOutlinedRect","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Used to draw the magenta highlight colour of a panel object when it is selected. This should be called in the object's {{HookFunction|PANEL|PaintOver}} hook. Once this is implemented, the highlight colour will be displayed only when the object is selectable and selected. This is achieved using {{ClassFunction|Panel|SetSelectable}} and {{ClassFunction|Panel|SetSelected}} respectively.","examples":[],"isConstructor":false,"name":"DrawSelections","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The colour of the main text.","isOptional":false,"isVarArg":false,"name":"textCol","type":"table"},{"default":"","description":"The colour of the selection highlight (when selecting text).","isOptional":false,"isVarArg":false,"name":"highlightCol","type":"table"},{"default":"","description":"The colour of the text cursor (or caret).","isOptional":false,"isVarArg":false,"name":"cursorCol","type":"table"}],"description":"Used to draw the text in a {{Type|DTextEntry}} within a derma skin. This should be called within the {{HookFunction|SKIN|PaintTextEntry}} skin hook.\n\n[[Category:TextEntry]]","examples":[{"code":"function SKIN:PaintTextEntry( panel, w, h )\n\n\tif ( panel.m_bBackground ) then\n\t\n\t\tif ( panel:GetDisabled() ) then\n\t\t\tself.tex.TextBox_Disabled( 0, 0, w, h )\n\t\telseif ( panel:HasFocus() ) then\n\t\t\tself.tex.TextBox_Focus( 0, 0, w, h )\n\t\telse\n\t\t\tself.tex.TextBox( 0, 0, w, h )\n\t\tend\n\t\n\tend\n\t\n\tpanel:DrawTextEntryText( panel.m_colText, panel.m_colHighlight, panel.m_colCursor )\n\t\nend","description":"The paint function used in the default derma skin."}],"isConstructor":false,"name":"DrawTextEntryText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Draws a textured rectangle to fill the panel object this method is called on. The texture is set using {{LibraryFunction|surface|SetTexture}} or {{LibraryFunction|surface|SetMaterial}}. This should only be called within the object's {{HookFunction|PANEL|Paint}} or {{HookFunction|PANEL|PaintOver}} hooks, as a shortcut for {{LibraryFunction|surface|DrawTexturedRect}}.","examples":[],"isConstructor":false,"name":"DrawTexturedRect","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of your droppable panel","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Makes this panel droppable. This is used with {{ClassFunction|Panel|Receiver}} to create drag and drop events.\n\nCan be called multiple times with different names allowing to be dropped onto different receivers.","examples":[],"isConstructor":false,"name":"Droppable","realm":"client","returns":[{"description":"Blank table stored on the panel itself under pnl.m_DragSlot[ name ]. Is reset every time this function is called and does not appear to be used or exposed anywhere else.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Completes a box selection. If the end point of the selection box is within the selection canvas, mouse capture is disabled for the panel object, and the selected state of each child object within the selection box is toggled.","examples":[],"isConstructor":false,"name":"EndBoxSelection","realm":"client","returns":[{"description":"Whether the end point of the selection box was within the selection canvas.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The command to be run.","isOptional":false,"isVarArg":false,"name":"cmd","type":"string"}],"description":"{{Internal}} Used to run commands within a {{Type|DHTML}} window.","examples":[],"isConstructor":false,"name":"Exec","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the panel that should be found.","isOptional":false,"isVarArg":false,"name":"panelName","type":"string"}],"description":"Finds a panel in its children(and sub children) with the given name.","examples":[],"isConstructor":false,"name":"Find","realm":"client","returns":[{"description":"foundPanel","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Focuses the next panel in the focus queue.","examples":[],"isConstructor":false,"name":"FocusNext","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Focuses the previous panel in the focus queue.","examples":[],"isConstructor":false,"name":"FocusPrevious","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the alpha multiplier for this panel.","examples":[],"isConstructor":false,"name":"GetAlpha","realm":"client","returns":[{"description":"alphaMul","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the position and size of the panel.\n\nThis is equivalent to calling {{ClassFunction|Panel|GetPos}} and {{ClassFunction|Panel|GetSize}} together.","examples":[],"isConstructor":false,"name":"GetBounds","realm":"client","returns":[{"description":"The x coordinate of the panel, relative to its parent's top left.","type":"number"},{"description":"The y coordinate of the panel, relative to its parent's top left.","type":"number"},{"description":"The width of the panel.","type":"number"},{"description":"The height of the panel.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the position/offset of the caret (or text cursor) in a text-based panel object.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"GetCaretPos","realm":"client","returns":[{"description":"The caret position/offset from the start of the text. A value of ''0'' means the caret sits before the first character.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The index of the child to get.\n\n{{Note|This index starts at 0, except when you use this on a {{Type|DMenu}}.}}","isOptional":false,"isVarArg":false,"name":"childIndex","type":"number"}],"description":"Gets a child by its index.","examples":[],"isConstructor":false,"name":"GetChild","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to get the position of.","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"Gets a child object's position relative to this panel object. The number of levels is not relevant; the child may have many parents between itself and the object on which the method is called.","examples":[],"isConstructor":false,"name":"GetChildPosition","realm":"client","returns":[{"description":"The horizontal (x) position of the child relative to this panel object.","type":"number"},{"description":"The vertical (y) position of the child relative to this panel object.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table with all the child panels of the panel.","examples":[],"isConstructor":false,"name":"GetChildren","realm":"client","returns":[{"description":"children","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The horizontal (x) position of the top-left corner of the rectangle, relative to the panel object.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The vertical (y) position of the top-left corner of the rectangle, relative to the panel object.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The width of the rectangle.","isOptional":false,"isVarArg":false,"name":"w","type":"number"},{"default":"","description":"The height of the rectangle.","isOptional":false,"isVarArg":false,"name":"h","type":"number"}],"description":"Returns a table of all visible, selectable children of the panel object that lie at least partially within the specified rectangle.","examples":[],"isConstructor":false,"name":"GetChildrenInRect","realm":"client","returns":[{"description":"A table of panel objects that lie at least partially within the specified rectangle.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the class name of the panel.","examples":[],"isConstructor":false,"name":"GetClassName","realm":"client","returns":[{"description":"className","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The horizontal (x) position of the point.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The vertical (y) position of the point.","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"Returns the child of this panel object that is closest to the specified point. The point is relative to the object on which the method is called. The distance the child is from this point is also returned.","examples":[],"isConstructor":false,"name":"GetClosestChild","realm":"client","returns":[{"description":"The child object that was closest to the specified point.","type":"Panel"},{"description":"The distance that this child was from the point.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the size of the content/children within a panel object.\n\nOnly works with {{Type|Label}} derived panels by default such as {{Type|DLabel}}.<br/>\nWill also work on any panel that manually implements this method.\n\n[[Category:Label]]","examples":[{"code":"local PANEL = {}\n\nfunction PANEL:GetContentSize()\n\tsurface.SetFont( self:GetFont() )\n\treturn surface.GetTextSize( self:GetText() )\nend\n\nvgui.Register( \"DTextEntry_Edit\", PANEL, \"DTextEntry\" )\n\n-- Somewhere else, to test the newly created panel\nlocal frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 500, 200 )\nframe:Center()\nframe:MakePopup()\n\nlocal txt = vgui.Create( \"DTextEntry_Edit\", frame )\ntxt:SetPos( 5, 25 )\ntxt:SetSize( 100, 10 )\ntxt:SetText( \"Really long string that is bigger than 100 pixels\" )\ntxt:SizeToContentsX( 5 ) -- Must be called after setting the text\ntxt:SizeToContentsY( 5 ) -- These two functions will not have effect on a normal DTextEntry","description":"Demonstrates how to implement this function in your own panel."}],"isConstructor":false,"name":"GetContentSize","realm":"client","returns":[{"description":"The content width of the object.","type":"number"},{"description":"The content height of the object.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the cookie from which to retrieve the value.","isOptional":false,"isVarArg":false,"name":"cookieName","type":"string"},{"default":"","description":"The default value to return if the cookie does not exist.","isOptional":false,"isVarArg":false,"name":"defaultVal","type":"string"}],"description":"Gets the value of a cookie stored by the panel object. This can also be done with {{LibraryFunction|cookie|GetString}}, using the panel's cookie name, a fullstop, and then the actual name of the cookie.\n\nMake sure the panel's cookie name has not changed since writing, or the cookie will not be accessible. This can be done with {{ClassFunction|Panel|GetCookieName}} and {{ClassFunction|Panel|SetCookieName}}.","examples":[],"isConstructor":false,"name":"GetCookie","realm":"client","returns":[{"description":"The value of the stored cookie, or the default value should the cookie not exist.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Gets the name the panel uses to store cookies. This is set with {{ClassFunction|Panel|SetCookieName}}.","examples":[],"isConstructor":false,"name":"GetCookieName","realm":"client","returns":[{"description":"The name the panel uses when reading or writing cookies. The format used is as follows: <code>panelCookieName.individualCookieName</code>","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the cookie from which to retrieve the value.","isOptional":false,"isVarArg":false,"name":"cookieName","type":"string"},{"default":"","description":"The default value to return if the cookie does not exist.","isOptional":false,"isVarArg":false,"name":"defaultVal","type":"number"}],"description":"Gets the value of a cookie stored by the panel object, as a number. This can also be done with {{LibraryFunction|cookie|GetNumber}}, using the panel's cookie name, a fullstop, and then the actual name of the cookie.\n\nMake sure the panel's cookie name has not changed since writing, or the cookie will not be accessible. This can be done with {{ClassFunction|Panel|GetCookieName}} and {{ClassFunction|Panel|SetCookieName}}.","examples":[],"isConstructor":false,"name":"GetCookieNumber","realm":"client","returns":[{"description":"The number value of the stored cookie, or the default value should the cookie not exist.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns a dock enum for the panel's current docking type.","examples":[],"isConstructor":false,"name":"GetDock","realm":"client","returns":[{"description":"The dock enum for the panel. See {{Enum|DOCK}}.","type":"DOCK"}]},{"accessModifier":"public","arguments":[],"description":"Returns the docked margins of the panel. (set by {{ClassFunction|Panel|DockMargin}})","examples":[],"isConstructor":false,"name":"GetDockMargin","realm":"client","returns":[{"description":"Left margin.","type":"number"},{"description":"Top margin.","type":"number"},{"description":"Right margin.","type":"number"},{"description":"Bottom margin.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the docked padding of the panel. (set by {{ClassFunction|Panel|DockPadding}})","examples":[],"isConstructor":false,"name":"GetDockPadding","realm":"client","returns":[{"description":"Left padding.","type":"number"},{"description":"Top padding.","type":"number"},{"description":"Right padding.","type":"number"},{"description":"Bottom padding.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the name of the font that the panel renders its text with.\n\nThis is the same font name set with {{ClassFunction|Panel|SetFontInternal}}.","examples":[],"isConstructor":false,"name":"GetFont","realm":"client","returns":[{"description":"fontName","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the panel's HTML material. Only works with {{Type|Awesomium}}, {{Type|HTML}} and {{Type|DHTML}} panels that have been fully loaded.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[{"code":"AddCSLuaFile()\n\nENT.Type = \"anim\"\nENT.Base = \"base_entity\"\n\nENT.PrintName = \"Web Screen\"\nENT.Author = \"Microflash\"\nENT.Spawnable = true\n\nif ( CLIENT ) then\n\tENT.Mat = nil\n\tENT.Panel = nil\nend\n\nfunction ENT:Initialize()\n\n\tif ( SERVER ) then\n\t\t\n\t\tself:SetModel(\"models/props_phx/rt_screen.mdl\")\n\t\tself:SetMoveType(MOVETYPE_VPHYSICS)\n\t\tself:SetSolid(SOLID_VPHYSICS)\n\t\t\n\t\tself:PhysicsInit(SOLID_VPHYSICS)\n\t\t\n\t\tself:Freeze()\n\t\t\n\telse\n\t\n\t\t-- Reset material and panel and load DHTML panel\n\t\tself.Mat = nil\n\t\tself.Panel = nil\n\t\tself:OpenPage()\n\t\t\n\tend\n\t\nend\n\nfunction ENT:Freeze()\n\tlocal phys = self:GetPhysicsObject()\n\tif (IsValid(phys)) then phys:EnableMotion(false) end\nend\n\n-- Load the DHTML reference panel\nfunction ENT:OpenPage()\n\n\t-- Iff for some reason a panel is already loaded, delete it\n\tif(self.Panel) then\n\t\n\t\tself.Panel:Remove()\n\t\tself.Panel = nil\n\t\n\tend\n\n\t-- Create a web page panel and fill the entire screen\n\tself.Panel = vgui.Create(\"DHTML\")\n\tself.Panel:Dock(FILL)\n\t\n\t-- Wiki page URL\n\tlocal url = <nowiki>\"http://wiki.garrysmod.com/page/Category:Material\"</nowiki>\n\t\n\t-- Load the wiki page\n\tself.Panel:OpenURL(url)\n\t\n\t-- Hide the panel\n\tself.Panel:SetAlpha(0)\n\tself.Panel:SetMouseInputEnabled(false)\n\t\n\t-- Disable HTML messages\n\tfunction self.Panel:ConsoleMessage(msg) end\n\nend\n\nfunction ENT:Draw()\n\n\t-- Iff the material has already been grabbed from the panel\n\tif(self.Mat) then\n\t\t\n\t\t-- Apply it to the screen/model\n\t\tif(render.MaterialOverrideByIndex) then\n\t\t\trender.MaterialOverrideByIndex(1, self.Mat)\n\t\telse\n\t\t\trender.ModelMaterialOverride(self.Mat)\n\t\tend\n\t\t\n\t-- Otherwise, check that the panel is valid and the HTML material is finished loading\n\telseif(self.Panel && self.Panel:GetHTMLMaterial()) then\n\n\t\t-- Get the html material\n\t\tlocal html_mat = self.Panel:GetHTMLMaterial()\n\t\t\n\t\t-- Used to make the material fit the model screen\n\t\t-- May need to be changed iff using a different model\n\t\t-- For the multiplication number it goes in segments of 512\n\t\t-- Based off the players screen resolution\n\t\tlocal scale_x, scale_y = ScrW()/2048, ScrH()/1024\n\t\t\n\t\t-- Create a new material with the proper scaling and shader\n\t\tlocal matdata =\n\t\t{\n\t\t\t[\"$basetexture\"]=html_mat:GetName(),\n\t\t\t[\"$basetexturetransform\"]=\"center 0 0 scale \"..scale_x..\" \"..scale_y..\" rotate 0 translate 0 0\",\n\t\t\t[\"$model\"]=1\n\t\t}\n\t\t-- Unique ID used for material name\n\t\tlocal uid = string.Replace(html_mat:GetName(), \"__vgui_texture_\", \"\")\n\t\t\n\t\t-- Create the model material\n\t\tself.Mat = CreateMaterial(\"WebMaterial_\"..uid, \"VertexLitGeneric\", matdata)\n\t\n\tend\n\n\t-- Render the model\n\tself:DrawModel()\n\t\n\t-- Reset the material override or else everything will have a HTML material!\n\trender.ModelMaterialOverride(nil)\n\nend\n\nfunction ENT:OnRemove()\n\t-- Make sure the panel is removed too\n\tif(self.Panel) then self.Panel:Remove() end\nend","description":"Defines a new entity which can display a web page on a TV screen."}],"isConstructor":false,"name":"GetHTMLMaterial","realm":"client","returns":[{"description":"The HTML material used by the panel. Typically starts with \"__vgui_texture_\" followed by an incremental number.","type":"IMaterial"}]},{"accessModifier":"public","arguments":[],"description":"Returns the internal name of the panel.","examples":[],"isConstructor":false,"name":"GetName","realm":"client","returns":[{"description":"name","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the number of lines in a {{Type|RichText}}. You must wait a couple frames before calling this after using {{ClassFunction|Panel|AppendText}} or {{ClassFunction|Panel|SetText}}, otherwise it will return the number of text lines before the text change.\n\n{{Note|Even though this function can be called on any panel, it will only work with {{Type|RichText}}}}\n\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 224)\nTextFrame:Center()\nTextFrame:SetTitle(\"Generic Frame\")\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Throw some text in the panel\nrichtext:SetText(\"This is a block of text demonstrating how line wrapping and panel size relates to the number of lines shown inside of a RichText panel.\")\n\n-- Keep track of PerformLayout calls\nrichtext.layoutCount = 0\n\n-- Custom function for this example\nfunction richtext:NumLinesExample()\n\tprint(\"PerformLayout called \"..self.layoutCount..\" times: \"..richtext:GetNumLines()..\" line(s) returned\")\t\nend\n\n-- Print # of lines before any layouts\nrichtext:NumLinesExample()\n\n-- Render update\nfunction richtext:PerformLayout()\n\n\tself.layoutCount = self.layoutCount + 1\n\tself:NumLinesExample()\t-- Print current # of lines\n\nend","description":"Creates a rich text panel with a block of text and prints out the number of text lines before and after ''PerformLayout'' is called."}],"isConstructor":false,"name":"GetNumLines","realm":"client","returns":[{"description":"The number of lines.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the parent of the panel, returns nil if there is no parent.","examples":[],"isConstructor":false,"name":"GetParent","realm":"client","returns":[{"description":"The parent of given panel","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns the position of the panel relative to its {{ClassFunction|Panel|GetParent}}.\n\nIf you require the panel's position '''and''' size, consider using {{ClassFunction|Panel|GetBounds}} instead.<br/>\nIf you need the position in screen space, see {{ClassFunction|Panel|LocalToScreen}}.","examples":[],"isConstructor":false,"name":"GetPos","realm":"client","returns":[{"description":"X coordinate, relative to this panels parents top left corner.","type":"number"},{"description":"Y coordinate, relative to this panels parents top left corner.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table of all children of the panel object that are selected. This is recursive, and the returned table will include tables for any child objects that also have children. This means that not all first-level members in the returned table will be of type {{Type|Panel}}.","examples":[],"isConstructor":false,"name":"GetSelectedChildren","realm":"client","returns":[{"description":"A table of any child objects that are selected, including tables for children of the child objects (These tables may also contain table members, as the method is recursive).","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the panel object (''self'') if it has been enabled as a selection canvas. This is achieved using {{ClassFunction|Panel|SetSelectionCanvas}}.","examples":[],"isConstructor":false,"name":"GetSelectionCanvas","realm":"client","returns":[{"description":"The panel object this method was called on if enabled as a selection canvas, otherwise ''nil''.","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns the size of the panel.\n\nIf you require both the panel's position and size, consider using {{ClassFunction|Panel|GetBounds}} instead.","examples":[],"isConstructor":false,"name":"GetSize","realm":"client","returns":[{"description":"width","type":"number"},{"description":"height","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the table for the derma skin currently being used by this panel object.","examples":[],"isConstructor":false,"name":"GetSkin","realm":"client","returns":[{"description":"The derma skin table currently being used by this object.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the internal Lua table of the panel.","examples":[],"isConstructor":false,"name":"GetTable","realm":"client","returns":[{"description":"A table containing all the members of given panel object.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the height of the panel.","examples":[],"isConstructor":false,"name":"GetTall","realm":"client","returns":[{"description":"height","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the panel's text (where applicable).\n\nThis method returns a maximum of 1023 bytes, except for {{Type|DTextEntry}}.","examples":[],"isConstructor":false,"name":"GetText","realm":"client","returns":[{"description":"The panel's text.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Gets the left and top text margins of a text-based panel object, such as a {{Type|DButton}} or {{Type|DLabel}}. This is set with {{ClassFunction|Panel|SetTextInset}}.\n\n[[Category:Label]]","examples":[],"isConstructor":false,"name":"GetTextInset","realm":"client","returns":[{"description":"The left margin of the text, in pixels.","type":"number"},{"description":"The top margin of the text, in pixels.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the size of the text within a {{Type|Label}} derived panel.\n\n{{Bug|Issue=2576|This can return 0 incorrectly.}}\n\n[[Category:Label]]","examples":[],"isConstructor":false,"name":"GetTextSize","realm":"client","returns":[{"description":"The width of the text in the DLabel.","type":"number"},{"description":"The height of the text in the DLabel.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets valid receiver slot of currently dragged panel.","examples":[],"isConstructor":false,"name":"GetValidReceiverSlot","realm":"client","returns":[{"description":"The panel this was called on if a valid receiver slot exists, otherwise false.","type":"Panel"},{"description":"The slot table.","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the value the panel holds.\n\nIn engine is only implemented for {{Type|CheckButton}}, {{Type|Label}} and {{Type|TextEntry}} as a string and for those elements has a hard coded limit of 8092 characters.","examples":[{"code":"local TextEntry = vgui.Create( \"TextEntry\" )\nTextEntry:SetText( \"Hello world!\" )\nprint( TextEntry:GetValue() )","description":"Returns the string typed in a TextEntry."}],"isConstructor":false,"name":"GetValue","realm":"client","returns":[{"description":"The value the panel holds.","type":"any"}]},{"accessModifier":"public","arguments":[],"description":"Returns the width of the panel.","examples":[],"isConstructor":false,"name":"GetWide","realm":"client","returns":[{"description":"width","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the Z position of the panel.","examples":[],"isConstructor":false,"name":"GetZPos","realm":"client","returns":[{"description":"The Z order position of the panel.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Goes back one page in the HTML panel's history if available.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"GoBack","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Goes forward one page in the HTML panel's history if available.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"GoForward","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The offset in the panel's back/forward history, relative to the current page, that you would like to skip to. Because this is relative, 0 = current page while negative goes back and positive goes forward. For example, -2 will go back 2 pages in the history.","isOptional":false,"isVarArg":false,"name":"offset","type":"number"}],"description":"Goes to the page in the HTML panel's history at the specified relative offset.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"GoToHistoryOffset","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Causes a {{Type|RichText}} element to scroll to the bottom of its text.\n\n[[Category:RichText]]","examples":[],"isConstructor":false,"name":"GotoTextEnd","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Causes a {{Type|RichText}} element to scroll to the top of its text.\n\n{{Bug|Issue=2239|This does not work on the same frame as {{ClassFunction|Panel|SetText}}.}}\n\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 200)\nTextFrame:Center()\nTextFrame:SetTitle(\"#ServerBrowser_ServerWarningTitle\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Yellow colored localized text about player capacity\nrichtext:InsertColorChange(255, 255, 192, 255)\nrichtext:AppendText(\"#ServerBrowser_ServerWarning_MaxPlayers\")\n\n-- Create a button that moves the text back to the start\nlocal topbutton = vgui.Create(\"DButton\", richtext)\ntopbutton:SetSize(60, 20)\ntopbutton:SetPos(160, 146)\ntopbutton:SetText(\"Back to Top\")\n\n-- When clicked, go to the start of the text\ntopbutton.DoClick = function() richtext:GotoTextStart()\tend\n\n-- Apply background color and font\nfunction richtext:PerformLayout()\n\t\n\tself:SetFontInternal(\"Trebuchet18\")\n\tself:SetBGColor(Color(64, 64, 84))\n\t\nend","description":"Creates a RichText panel with a \"Back to Top\" button which scrolls the text to the start."}],"isConstructor":false,"name":"GotoTextStart","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to be applied to the DCheckBoxLabel.","isOptional":false,"isVarArg":false,"name":"txt","type":"string"}],"description":"{{Internal}} Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''CheckboxText'' property to a {{Type|DCheckBoxLabel}}. This does exactly the same as {{ClassFunction|Panel|GWEN_SetText}}, but exists to cater for the seperate GWEN properties.","examples":[],"isConstructor":false,"name":"GWEN_SetCheckboxText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new name to apply to the panel.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"{{Internal}} Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''ControlName'' property to a panel. This calls {{ClassFunction|Panel|SetName}}.","examples":[],"isConstructor":false,"name":"GWEN_SetControlName","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The dock mode to pass to the panel's ''Dock'' method. This reads a string and applies the approriate {{Enum|DOCK}}.\n* ''Right'': Dock right.\n* ''Left'': Dock left.\n* ''Bottom'': Dock at the bottom.\n* ''Top'': Dock at the top.\n* ''Fill'': Fill the parent panel.","isOptional":false,"isVarArg":false,"name":"dockState","type":"string"}],"description":"{{Internal}} Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''Dock'' property to a  panel object. This calls {{ClassFunction|Panel|Dock}}.","examples":[],"isConstructor":false,"name":"GWEN_SetDock","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The alignment, as a string, to pass to {{ClassFunction|Panel|SetContentAlignment}}. Accepts:\n* ''Right'': Align mid-right.\n* ''Left'': Align mid-left.\n* ''Center'': Align mid-center.","isOptional":false,"isVarArg":false,"name":"hAlign","type":"string"}],"description":"{{Internal}} Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''HorizontalAlign'' property to a  panel object. This calls {{ClassFunction|Panel|SetContentAlignment}}.","examples":[],"isConstructor":false,"name":"GWEN_SetHorizontalAlign","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A four-membered table containing the margins as numbers:\n* {{FuncArg|number|left|The left margin.}}\n* {{FuncArg|number|top|The top margin.}}\n* {{FuncArg|number|right|The right margin.}}\n* {{FuncArg|number|bottom|The bottom margin.}}","isOptional":false,"isVarArg":false,"name":"margins","type":"table"}],"description":"{{Internal}} Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''Margin'' property to a  panel object. This calls {{ClassFunction|Panel|DockMargin}}.","examples":[],"isConstructor":false,"name":"GWEN_SetMargin","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The maximum value the element is to permit.","isOptional":false,"isVarArg":false,"name":"maxValue","type":"number"}],"description":"{{Internal}} Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''Max'' property to a  {{Type|DNumberWang}}, {{Type|Slider}}, {{Type|DNumSlider}} or {{Type|DNumberScratch}}. This calls ''SetMax'' on one of the previously listed methods.","examples":[],"isConstructor":false,"name":"GWEN_SetMax","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The minimum value the element is to permit.","isOptional":false,"isVarArg":false,"name":"minValue","type":"number"}],"description":"{{Internal}} Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''Min'' property to a  {{Type|DNumberWang}}, {{Type|Slider}}, {{Type|DNumSlider}} or {{Type|DNumberScratch}}. This calls ''SetMin'' on one of the previously listed methods.","examples":[],"isConstructor":false,"name":"GWEN_SetMin","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A two-membered table containing the x and y coordinates as numbers:\n* {{FuncArg|number|x|The x coordinate.}}\n* {{FuncArg|number|y|The y coordinate.}}","isOptional":false,"isVarArg":false,"name":"pos","type":"table"}],"description":"{{Internal}} Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''Position'' property to a  panel object. This calls {{ClassFunction|Panel|SetPos}}.","examples":[],"isConstructor":false,"name":"GWEN_SetPosition","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A two-membered table containing the width and heights as numbers:\n* {{FuncArg|number|w|The width.}}\n* {{FuncArg|number|h|The height.}}","isOptional":false,"isVarArg":false,"name":"size","type":"table"}],"description":"{{Internal}} Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''Size'' property to a  panel object. This calls {{ClassFunction|Panel|SetSize}}.","examples":[],"isConstructor":false,"name":"GWEN_SetSize","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to be applied to the panel.","isOptional":false,"isVarArg":false,"name":"txt","type":"string"}],"description":"{{Internal}} Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''Text'' property to a panel.","examples":[],"isConstructor":false,"name":"GWEN_SetText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the panel has child panels.","examples":[],"isConstructor":false,"name":"HasChildren","realm":"client","returns":[{"description":"hasChilds","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the panel is focused.","examples":[],"isConstructor":false,"name":"HasFocus","realm":"client","returns":[{"description":"hasFocus","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the panel or any of its children(sub children and so on) has the focus.","examples":[],"isConstructor":false,"name":"HasHierarchicalFocus","realm":"client","returns":[{"description":"hasHierarchicalFocus","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"parentPanel","type":"Panel"}],"description":"Returns whether the panel is a descendent of the given panel.","examples":[],"isConstructor":false,"name":"HasParent","realm":"client","returns":[{"description":"True if the panel is contained within parentPanel.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Makes a panel invisible.","examples":[],"isConstructor":false,"name":"Hide","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Marks the end of a clickable text segment in a {{Type|RichText}} element, started with {{ClassFunction|Panel|InsertClickableTextStart}}.\n\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"RichText\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- First segment\nrichtext:InsertColorChange(255, 255, 255, 255)\nrichtext:AppendText(\"This is a Rich Text panel — a panel used in Source MP's default chat box and developer console.\\n\\nSee the \")\n\n-- Second segment\nrichtext:InsertColorChange(192, 192, 255, 255)\nrichtext:InsertClickableTextStart(\"OpenWiki\")\t-- Make incoming text fire the \"OpenWiki\" value when clicked\nrichtext:AppendText(\"Garry's Mod Wiki\")\nrichtext:InsertClickableTextEnd()\t-- End clickable text here\n\n-- Third segment\nrichtext:InsertColorChange(255, 255, 255, 255)\nrichtext:AppendText(\" for information on how to use a Rich Text panel.\")\n\n-- Background color\nfunction richtext:PerformLayout() self:SetBGColor(Color(32, 32, 46)) end\n\n-- Handle any commands we get from the panel\nfunction richtext:ActionSignal(signalName, signalValue)\n\n\t-- Some clickable text was clicked\n\tif(signalName == \"TextClicked\") then\n\t\n\t\t-- Open the wiki\n\t\tif(signalValue == \"OpenWiki\") then\n\t\t\n\t\t\t<nowiki>gui.OpenURL(\"http://wiki.garrysmod.com/page/Category:RichText\")</nowiki>\n\t\t\n\t\tend\n\t\n\tend\n\nend","description":"Creates a panel with some information on RichText panels along with a click-able link to the {{Type|RichText}} page."}],"isConstructor":false,"name":"InsertClickableTextEnd","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text passed as the action signal's value.","isOptional":false,"isVarArg":false,"name":"signalValue","type":"string"}],"description":"Starts the insertion of clickable text for a {{Type|RichText}} element. Any text appended with {{ClassFunction|Panel|AppendText}} between this call and {{ClassFunction|Panel|InsertClickableTextEnd}} will become clickable text.\n\nThe hook {{HookFunction|PANEL|ActionSignal}} is called when the text is clicked, with \"TextClicked\" as the signal name and ''signalValue'' as the signal value.\n\n{{Note|The clickable text is a separate Derma panel which will not inherit the current font from the ''RichText''.}}\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"RichText\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- First segment\nrichtext:InsertColorChange(255, 255, 255, 255)\nrichtext:AppendText(\"This is a Rich Text panel — a panel used in Source MP's default chat box and developer console.\\n\\nSee the \")\n\n-- Second segment\nrichtext:InsertColorChange(192, 192, 255, 255)\nrichtext:InsertClickableTextStart(\"OpenWiki\")\t-- Make incoming text fire the \"OpenWiki\" value when clicked\nrichtext:AppendText(\"Garry's Mod Wiki\")\nrichtext:InsertClickableTextEnd()\t-- End clickable text here\n\n-- Third segment\nrichtext:InsertColorChange(255, 255, 255, 255)\nrichtext:AppendText(\" for information on how to use a Rich Text panel.\")\n\n-- Background color\nfunction richtext:PerformLayout() self:SetBGColor(Color(32, 32, 46)) end\n\n-- Handle any commands we get from the panel\nfunction richtext:ActionSignal(signalName, signalValue)\n\n\t-- Some clickable text was clicked\n\tif (signalName == \"TextClicked\") then\n\t\n\t\t-- Open the wiki\n\t\tif (signalValue == \"OpenWiki\") then\n\t\t\n\t\t\t<nowiki>gui.OpenURL(\"http://wiki.garrysmod.com/page/Category:RichText\")</nowiki>\n\t\t\n\t\tend\n\t\n\tend\n\nend","description":"Creates a panel with some information on Rich Text panels along with a click-able link to the {{Type|RichText}} page."}],"isConstructor":false,"name":"InsertClickableTextStart","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The red value (0 - 255).","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"The green value (0 - 255).","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"The blue value (0 - 255).","isOptional":false,"isVarArg":false,"name":"b","type":"number"},{"default":"","description":"The alpha value (0 - 255).","isOptional":false,"isVarArg":false,"name":"a","type":"number"}],"description":"Inserts a color change in a {{Type|RichText}} element, which affects the color of all text added with {{ClassFunction|Panel|AppendText}} until another color change is applied.\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 200)\nTextFrame:Center()\nTextFrame:SetTitle(\"Colored text\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\nrichtext:SetVerticalScrollbarEnabled(false)\n\n-- Text blocks\nrichtext:InsertColorChange(255, 255, 192, 255)\nrichtext:AppendText(\"This is an example of \")\n\nrichtext:InsertColorChange(0, 255, 0, 255)\nrichtext:AppendText(\"color coding \")\n\nrichtext:InsertColorChange(255, 255, 192, 255)\nrichtext:AppendText(\"different segments of text throughout a \")\n\nrichtext:InsertColorChange(255, 200, 0, 255)\nrichtext:AppendText(\"Rich Text panel.\\n\\n\")\n\nrichtext:InsertColorChange(64, 0, 255, 255)\nrichtext:AppendText(\"Here is another line of text shown in the color \")\n\nrichtext:InsertColorChange(128, 0, 255, 255)\nrichtext:AppendText(\"purple.\")\n\n-- When the panel is ready for layout, apply font and background color\nfunction richtext:PerformLayout()\n\t\n\tself:SetFontInternal(\"Trebuchet18\")\n\tself:SetBGColor(Color(0, 16, 32))\n\t\nend","description":"Creates a RichText panel with color coding on certain segments of text."},{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(300, 200)\nTextFrame:Center()\nTextFrame:SetTitle(\"Randomly Colored Words\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\nrichtext:SetVerticalScrollbarEnabled(false)\n\nlocal txt = \"Here's a fun example involving word by word text coloring. \"..\n\"Each word is separated by a space, colored, and appended to the Rich Text panel individually. \"..\n\"The colors are randomly generated shades of red, orange, yellow, and pink.\"\n\nlocal txt_tbl = string.Explode(\" \", txt, false)\n\nfor _, word in pairs(txt_tbl) do\n\n\trichtext:InsertColorChange(255, math.random(0, 255), math.random(0, 255), 255)\n\trichtext:AppendText(word..\" \")\n\nend\n\nfunction richtext:PerformLayout()\n\t\n\tself:SetFontInternal(\"GModNotify\")\n\tself:SetBGColor(Color(32, 16, 0))\n\t\nend","description":"Word by word coloring using {{LibraryFunction|string|Explode}} and random colors."}],"isConstructor":false,"name":"InsertColorChange","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The number of seconds the text remains visible.","isOptional":false,"isVarArg":false,"name":"sustain","type":"number"},{"default":"","description":"The number of seconds it takes the text to fade out.\n\nIf set '''lower''' than ''sustain'', the text will not begin fading out until (''sustain'' - ''length'') seconds have passed.\n\nIf set '''higher''' than ''sustain'', the text will begin fading out immediately at a fraction of the base alpha.\n\nIf set to '''-1''', the text doesn't fade out.","isOptional":false,"isVarArg":false,"name":"length","type":"number"}],"description":"Begins a text fade for a {{Type|RichText}} element where the last appended text segment is fully faded out after a specific amount of time, at a specific speed.\n\nThe alpha of the text at any given time is determined by the text's base alpha * ((''sustain'' - {{GlobalFunction|CurTime}}) / ''length'') where {{GlobalFunction|CurTime}} is added to ''sustain'' when this method is called.\n\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 200)\nTextFrame:Center()\nTextFrame:SetTitle(\"Fading Text\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Sample text\nrichtext:SetText(\"This is an example of a Rich Text panel using a fade-out with:\\n\\n6 seconds of sustain\\n\\n2 second fade-out length\")\n\t\n-- When the panel is ready for layout, begin the fade\nfunction richtext:PerformLayout()\n\t\n\tself:SetFontInternal(\"Trebuchet18\")\n\tself:SetBGColor(Color(64, 64, 92))\n\t\n\t-- Wait 6 seconds, then fade out in 2 seconds\n\tself:InsertFade(6, 2)\n\t\nend","description":"Creates a Rich Text panel that sustains visibility for 6 seconds with a 2 second long fade-out."},{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(350, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"Kleiner says:\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\t\n\n-- Red text\nrichtext:InsertColorChange(200, 60, 32, 255)\nrichtext:SetVerticalScrollbarEnabled(false)\n\t\nlocal words = {\"There's\", \"only\", \"one\", \"hedy...\"}\nlocal delay = 0\n\n-- Display each word in half second interval\nfor w, txt in pairs(words) do\n\n\tif(w == 1) then delay = 0.2\n\telse delay = (w-1)*0.45 end\n\n\ttimer.Simple(delay, function()\n\t\n\t\trichtext:AppendText(txt..\" \")\n\t\trichtext:InsertFade(2, 1)\t-- Sustain for 2 seconds while fading out after 1 second\n\t\t\n\t\trichtext:SetBGColor(Color(0, 0, 0))\n\t\trichtext:SetFontInternal(\"DermaLarge\")\n\t\n\tend)\n\nend\n\n-- Kleiner read along\nLocalPlayer():EmitSound(\"vo/k_lab2/kl_onehedy.wav\")","description":"Create a Rich Text panel where Dr. Kleiner reads a fading message in sync with text."}],"isConstructor":false,"name":"InsertFade","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"If ''true'', the method will recursively invalidate the layout of all children. Otherwise, only immediate children are affected.","isOptional":true,"isVarArg":false,"name":"recursive","type":"boolean"}],"description":"Invalidates the layout of this panel object and all its children. This will cause these objects to re-layout immediately, calling {{HookFunction|PANEL|PerformLayout}}. If you want to perform the layout in the next frame, you will have loop manually through all children, and call {{ClassFunction|Panel|InvalidateLayout}} on each.","examples":[],"isConstructor":false,"name":"InvalidateChildren","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"If true the panel will re-layout instantly and not wait for the next frame.","isOptional":true,"isVarArg":false,"name":"layoutNow","type":"boolean"}],"description":"Causes the panel to re-layout in the next frame. During the layout process  {{HookFunction|PANEL|PerformLayout}} will be called on the target panel.\n\nYou should avoid calling this function every frame.\n\n{{Bug|Issue=2574|Using this on a panel after clicking on a docked element will cause docked elements to reorient themselves incorrectly. This can be fixed by assigning a unique {{LibraryFunction|Panel|SetZPos}} to each docked element.}}","examples":[],"isConstructor":false,"name":"InvalidateLayout","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"If ''true'', the re-layout will occur immediately, otherwise it will be performed in the next frame.","isOptional":true,"isVarArg":false,"name":"layoutNow","type":"boolean"}],"description":"Invalidates the layout of the parent of this panel object. This will cause it to re-layout, calling {{HookFunction|PANEL|PerformLayout}}.","examples":[],"isConstructor":false,"name":"InvalidateParent","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"Set to true to check only the immediate children of given panel ( first level )","isOptional":true,"isVarArg":false,"name":"immediate","type":"boolean"}],"description":"Determines whether the mouse cursor is hovered over one of this panel object's children. This is a reverse process using {{LibraryFunction|vgui|GetHoveredPanel}}, and looks upward to find the parent.","examples":[],"isConstructor":false,"name":"IsChildHovered","realm":"client","returns":[{"description":"Whether or not one of this panel object's children is being hovered over.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether this panel is draggable ( if user is able to drag it ) or not.","examples":[],"isConstructor":false,"name":"IsDraggable","realm":"client","returns":[{"description":"Whether this panel is draggable ( if user is able to drag it ) or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether this panel is currently being dragged or not.","examples":[],"isConstructor":false,"name":"IsDragging","realm":"client","returns":[{"description":"Whether this panel is currently being dragged or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the the panel is enabled or disabled.\n\nSee {{ClassFunction|Panel|SetEnabled}} for a function that makes the panel enabled or disabled.","examples":[],"isConstructor":false,"name":"IsEnabled","realm":"client","returns":[{"description":"Whether the panel is enabled or disabled.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the mouse cursor is hovering over this panel or not\n\nUses {{LibraryFunction|vgui|GetHoveredPanel}} internally.\n\nRequires {{ClassFunction|Panel|SetMouseInputEnabled}} to be set to true.","examples":[],"isConstructor":false,"name":"IsHovered","realm":"client","returns":[{"description":"true if the panel is hovered","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the panel can receive keyboard input.","examples":[],"isConstructor":false,"name":"IsKeyboardInputEnabled","realm":"client","returns":[{"description":"keyboardInputEnabled","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Determines whether or not a {{Type|HTML}} or {{Type|DHTML}} element is currently loading a page.","examples":[],"isConstructor":false,"name":"IsLoading","realm":"client","returns":[{"description":"Whether or not the (D)HTML object is loading.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the panel is going to be deleted in the next frame.","examples":[],"isConstructor":false,"name":"IsMarkedForDeletion","realm":"client","returns":[{"description":"markedForDeletion","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the panel can receive mouse input.","examples":[],"isConstructor":false,"name":"IsMouseInputEnabled","realm":"client","returns":[{"description":"mouseInputEnabled","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Determines whether or not a text-based panel object, such as a {{Type|DTextEntry}}, is in multi-line mode. This is set with {{ClassFunction|Panel|SetMultiline}}.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"IsMultiline","realm":"client","returns":[{"description":"Whether the object is in multi-line mode or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"childPanel","type":"Panel"}],"description":"Returns whether the panel contains the given panel, recursively.","examples":[],"isConstructor":false,"name":"IsOurChild","realm":"client","returns":[{"description":"True if the panel contains childPanel.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Determines if the panel object is selectable (like icons in the Spawn Menu, holding {{Key|Shift}}). This is set with {{ClassFunction|Panel|SetSelectable}}.","examples":[],"isConstructor":false,"name":"IsSelectable","realm":"client","returns":[{"description":"Whether the panel is selectable or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the panel object is selected (like icons in the Spawn Menu, holding {{Key|Shift}}). This can be set in Lua using {{ClassFunction|Panel|SetSelected}}.","examples":[],"isConstructor":false,"name":"IsSelected","realm":"client","returns":[{"description":"Whether the panel object is selected or not. Always returns false if the object is not selectable. This can be modified using {{ClassFunction|Panel|SetSelectable}}.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Determines if the panel object is a selection canvas or not. This is set with {{ClassFunction|Panel|SetSelectionCanvas}}.","examples":[],"isConstructor":false,"name":"IsSelectionCanvas","realm":"client","returns":[{"description":"The value (if any) set by {{ClassFunction|Panel|SetSelectionCanvas}}.","type":"any"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the panel is valid and not marked for deletion.","examples":[],"isConstructor":false,"name":"IsValid","realm":"client","returns":[{"description":"True if the object is valid.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns if the panel is visible.","examples":[],"isConstructor":false,"name":"IsVisible","realm":"client","returns":[{"description":"isVisible","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Remove the focus from the panel.","examples":[],"isConstructor":false,"name":"KillFocus","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The speed at which to move the panel. This is affected by the value of ''easeOut''. Recommended values are:\n* '''0.1 - 10''' when ''easeOut'' is ''false''.\n* '''0.1 - 1''' when ''easeOut'' is ''true''.","isOptional":false,"isVarArg":false,"name":"speed","type":"number"},{"default":"","description":"This causes the panel object to 'jump' at the target, slowing as it approaches. This affects the ''speed'' value significantly, see above.","isOptional":false,"isVarArg":false,"name":"easeOut","type":"boolean"}],"description":"Redefines the panel object's {{ClassFunction|Panel|SetPos}} method to operate using frame-by-frame linear interpolation (Lerp). When the panel's position is changed, it will move to the target position at the speed defined. You can undo this with {{ClassFunction|Panel|DisableLerp}}.\n\nUnlike the other panel animation functions, such as {{ClassFunction|Panel|MoveTo}}, this animation method will not operate whilst the game is paused. This is because it relies on {{GlobalFunction|FrameTime}}.","examples":[],"isConstructor":false,"name":"LerpPositions","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path to load the controls from.","isOptional":false,"isVarArg":false,"name":"path","type":"string"}],"description":"{{Deprecated}}\n{{Internal}}\nSimilar to {{ClassFunction|Panel|LoadControlsFromString}} but loads controls from a file.\n\n[[Category:EditablePanel]]","examples":[],"isConstructor":false,"name":"LoadControlsFromFile","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The data to load controls from. Format unknown.","isOptional":false,"isVarArg":false,"name":"data","type":"string"}],"description":"{{Deprecated}}\n{{Internal}}\nLoads controls(positions, etc) from given data. This is what the default options menu uses.\n\n[[Category:EditablePanel]]","examples":[],"isConstructor":false,"name":"LoadControlsFromString","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The file to open. The path is relative to garrysmod/garrysmod/.","isOptional":false,"isVarArg":false,"name":"filename","type":"string"},{"default":"\"GAME\"","description":"The path used to look up the file.\n\n* \"GAME\" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)\n* \"LUA\" or \"lsv\" - All Lua folders (lua/) including gamesmodes and addons\n* \"DATA\" Data folder (garrysmod/data)\n* \"MOD\" Strictly the game folder (garrysmod/), ignores mounting.","isOptional":true,"isVarArg":false,"name":"path","type":"string"}],"description":"Loads a .gwen file (created by GWEN Designer) and calls {{ClassFunction|Panel|LoadGWENString}} with the contents of the loaded file.\n\nUsed to load panel controls from a file.","examples":[],"isConstructor":false,"name":"LoadGWENFile","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"JSON string containing information about controls to create.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Loads controls for the panel from a JSON string.","examples":[],"isConstructor":false,"name":"LoadGWENString","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The file path.","isOptional":false,"isVarArg":false,"name":"imageName","type":"string"},{"default":"","description":"The PATH to search in. See [[File Search Paths]].\n\nThis isn't used internally.","isOptional":false,"isVarArg":false,"name":"strPath","type":"string"}],"description":"Sets a new image to be loaded by a {{Type|TGAImage}}.\n\n[[Category:TGAImage]]","examples":[],"isConstructor":false,"name":"LoadTGAImage","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the cursor position local to the position of the panel (usually the upper-left corner).","examples":[{"code":"TestLabel = vgui.Create(\"DLabel\")\nTestLabel:SetSize(100, 20)\nTestLabel:Center()\nTestLabel:SetPaintBackgroundEnabled(true)\nTestLabel:SetColor(Color(255, 0, 0))\n\nlocal x, y = 0, 0\n\nfunction TestLabel:PerformLayout()\n\n\tx, y = self:LocalCursorPos()\n\n\tself:SetText(\" X: \"..x..\" , Y: \"..y)\n\t\nend","description":"Create and center a label panel and update its text with the local cursor position."}],"isConstructor":false,"name":"LocalCursorPos","realm":"client","returns":[{"description":"The x coordinate","type":"number"},{"description":"The y coordinate","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The X coordinate of the position on the panel to translate.","isOptional":false,"isVarArg":false,"name":"posX","type":"number"},{"default":"","description":"The Y coordinate of the position on the panel to translate.","isOptional":false,"isVarArg":false,"name":"posY","type":"number"}],"description":"Gets the absolute screen position of the position specified relative to the panel.\n\nSee also {{ClassFunction|Panel|ScreenToLocal}}.\n\n{{Warning|This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass.<br>\nie. inaccurate results may be returned if the panel or any of its ancestors have been repositioned outside of {{HookFunction|PANEL|Think}} or {{HookFunction|PANEL|PerformLayout}} within the last frame.}}\n\n{{Note|If the panel uses {{ClassFunction|Panel|Dock}}, this function will return 0, 0 when the panel was created. The position will be updated in the next frame.}}","examples":[],"isConstructor":false,"name":"LocalToScreen","realm":"client","returns":[{"description":"The X coordinate relative to the screen.","type":"number"},{"description":"The Y coordinate relative to the screen.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Focuses the panel and enables it to receive input.\n\nThis automatically calls {{ClassFunction|Panel|SetMouseInputEnabled}} and {{ClassFunction|Panel|SetKeyboardInputEnabled}} and sets them to true.\n\n{{Note|Panels derived from {{Type|Panel}} will not work properly with this function. Due to this, any children will not be intractable with keyboard. Derive from {{Type|EditablePanel}} instead.}}","examples":[],"isConstructor":false,"name":"MakePopup","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Set to true to enable, set to false to disable.","isOptional":false,"isVarArg":false,"name":"doCapture","type":"boolean"}],"description":"Allows the panel to receive mouse input even if the mouse cursor is outside the bounds of the panel.","examples":[],"isConstructor":false,"name":"MouseCapture","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to position relatively to.","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"},{"default":"0","description":"The align offset.","isOptional":true,"isVarArg":false,"name":"offset","type":"number"}],"description":"Places the panel above the passed panel with the specified offset.","examples":[],"isConstructor":false,"name":"MoveAbove","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to position relatively to.","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"},{"default":"0","description":"The align offset.","isOptional":true,"isVarArg":false,"name":"offset","type":"number"}],"description":"Places the panel below the passed panel with the specified offset.","examples":[],"isConstructor":false,"name":"MoveBelow","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The number of pixels to move by in the horizontal (x) direction.","isOptional":false,"isVarArg":false,"name":"moveX","type":"number"},{"default":"","description":"The number of pixels to move by in the vertical (y) direction.","isOptional":false,"isVarArg":false,"name":"moveY","type":"number"},{"default":"","description":"The time (in seconds) in which to perform the animation.","isOptional":false,"isVarArg":false,"name":"time","type":"number"},{"default":"0","description":"The delay (in seconds) before the animation begins.","isOptional":true,"isVarArg":false,"name":"delay","type":"number"},{"default":"-1","description":"The easing of the start and/or end speed of the animation. See {{ClassFunction|Panel|NewAnimation}} for how this works.","isOptional":true,"isVarArg":false,"name":"ease","type":"number"},{"default":"nil","description":"The function to be called once the animation is complete. Arguments are:\n* {{FuncArg|table|animData|The {{Struct|AnimationData}} that was used.}}\n* {{FuncArg|Panel|pnl|The panel object that was moved.}}","isOptional":true,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Moves the panel by the specified coordinates using animation.","examples":[],"isConstructor":false,"name":"MoveBy","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to position relatively to.","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"},{"default":"0","description":"The align offset.","isOptional":true,"isVarArg":false,"name":"offset","type":"number"}],"description":"Places the panel left to the passed panel with the specified offset.","examples":[],"isConstructor":false,"name":"MoveLeftOf","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Panel to position relatively to.","isOptional":false,"isVarArg":false,"name":"panel","type":"Panel"},{"default":"0","description":"The align offset.","isOptional":true,"isVarArg":false,"name":"offset","type":"number"}],"description":"Places the panel right to the passed panel with the specified offset.","examples":[],"isConstructor":false,"name":"MoveRightOf","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The target x coordinate of the panel.","isOptional":false,"isVarArg":false,"name":"posX","type":"number"},{"default":"","description":"The target y coordinate of the panel.","isOptional":false,"isVarArg":false,"name":"posY","type":"number"},{"default":"","description":"The time to perform the animation within.","isOptional":false,"isVarArg":false,"name":"time","type":"number"},{"default":"0","description":"The delay before the animation starts.","isOptional":true,"isVarArg":false,"name":"delay","type":"number"},{"default":"-1","description":"The easing of the start and/or end speed of the animation. See {{ClassFunction|Panel|NewAnimation}} for how this works.","isOptional":true,"isVarArg":false,"name":"ease","type":"number"},{"default":"","description":"The function to be called once the animation finishes. Arguments are:\n* {{FuncArg|table|animData|The {{Struct|AnimationData}} that was used.}}\n* {{FuncArg|Panel|pnl|The panel object that was moved.}}","isOptional":true,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Moves the panel to the specified position using animation.","examples":[],"isConstructor":false,"name":"MoveTo","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to move this one in front of. Must be a child of the same parent panel.","isOptional":false,"isVarArg":false,"name":"siblingPanel","type":"Panel"}],"description":"Moves this panel object in front of the specified sibling (child of the same parent) in the render order, and shuffles up the Z-positions of siblings now behind.","examples":[],"isConstructor":false,"name":"MoveToAfter","realm":"client","returns":[{"description":"''false'' if the passed panel is not a sibling, otherwise ''nil''.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Moves the panel object behind all other panels on screen. If the panel has been made a pop-up with {{ClassFunction|Panel|MakePopup}}, it will still draw in front of any panels that haven't.","examples":[],"isConstructor":false,"name":"MoveToBack","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to move this one behind. Must be a child of the same parent panel.","isOptional":false,"isVarArg":false,"name":"siblingPanel","type":"Panel"}],"description":"Moves this panel object behind the specified sibling (child of the same parent) in the render order, and shuffles up the {{ClassFunction|Panel|SetZPos}} of siblings now in front.","examples":[],"isConstructor":false,"name":"MoveToBefore","realm":"client","returns":[{"description":"''false'' if the passed panel is not a sibling, otherwise ''nil''.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Moves the panel in front of all other panels on screen. Unless the panel has been made a pop-up using {{ClassFunction|Panel|MakePopup}}, it will still draw behind any that have.","examples":[{"code":"-- Regular message\nlocal popup1 = vgui.Create(\"DFrame\")\npopup1:SetSize(400, 300)\npopup1:Center()\npopup1:MakePopup()\npopup1:SetTitle(\"This is a normal window.\")\n\n-- Warning message\nlocal popup2 = vgui.Create(\"DFrame\")\npopup2:SetSize(300, 100)\npopup2:Center()\npopup2:MakePopup()\npopup2:SetTitle(\"Warning!\")\n\n-- Warning label\nlocal warning = vgui.Create(\"DLabel\", popup2)\nwarning:SetSize(280, 80)\nwarning:Center()\nwarning:SetText(\"The server will be shutting down in 5 minutes!\")\nwarning:SetFont(\"GModNotify\")\nwarning:SetWrap(true)\n\n-- Move the warning message to front constantly\nfunction popup2:Think()\n\tself:MoveToFront()\nend","description":"Creates two frame panels where one acts normal and the other acts as a persistent warning window that will move in front of all other panels until it is closed."}],"isConstructor":false,"name":"MoveToFront","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The length of the animation in seconds.","isOptional":false,"isVarArg":false,"name":"length","type":"number"},{"default":"0","description":"The delay before the animation starts.","isOptional":true,"isVarArg":false,"name":"delay","type":"number"},{"default":"-1","description":"The power/index to use for easing.\n*Positive values greater than 1 will ease in; the higher the number, the sharper the curve's gradient (less linear).\n*A value of 1 removes all easing.\n*Positive values between 0 and 1 ease out; values closer to 0 increase the curve's gradient (less linear).\n*A value of 0 will break the animation and should be avoided.\n*Any value less than zero will ease in/out; the value has no effect on the gradient.","isOptional":true,"isVarArg":false,"name":"ease","type":"number"},{"default":"nil","description":"The function to be called when the animation ends. Arguments passed are:\n* {{FuncArg|table|animTable|The {{Struct|AnimationData}} that was used.}}\n* {{FuncArg|Panel|tgtPanel|The panel object that was animated.}}","isOptional":true,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Creates a new animation for the panel object.\n\nMethods that use this function:\n* {{ClassFunction|Panel|MoveTo}}\n* {{ClassFunction|Panel|SizeTo}}\n* {{ClassFunction|Panel|SlideUp}}\n* {{ClassFunction|Panel|SlideDown}}\n* {{ClassFunction|Panel|ColorTo}}\n* {{ClassFunction|Panel|AlphaTo}}\n* {{ClassFunction|Panel|MoveBy}}\n* {{ClassFunction|Panel|LerpPositions}}","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 500, 500 )\nframe:Center()\nframe:MakePopup()\n\nlocal butt = frame:Add( \"DButton\" )\nbutt:SetPos( 5, 30 )\nbutt:SetSize( 100, 40 )\n\nfunction butt:doAnim()\n\tlocal anim = self:NewAnimation( 10, 0, 1, function( anim, pnl )\n\t\tself:doAnim()\n\tend )\n\n\tanim.Think = function( anim, pnl, fraction )\n\t\tlocal radius = 200\n\t\tpnl:SetPos( 250 + math.sin( Lerp( fraction, -math.pi, math.pi ) ) * radius - pnl:GetWide() / 2,\n\t\t\t\t\t250 + math.cos( Lerp( fraction, -math.pi, math.pi ) ) * radius - pnl:GetTall() / 2 )\n\n\t\tpnl:SetText( \"Frac: \" .. fraction .. \"\\nTime: \" .. ( SysTime() - anim.StartTime ) )\n\tend\nend\nbutt:doAnim()","description":"Example on how to use this function, makes a button go around in a circle in a DFrame."}],"isConstructor":false,"name":"NewAnimation","realm":"client","returns":[{"description":"Partially filled {{Struct|AnimationData}} with members: \n*{{FuncArg|number|EndTime|Equal to ''length'' and ''delay'' arguments added together, plus either the {{GlobalFunction|SysTime}} if there is no other animation queued or the end time of the last animation in the queue.}}\n*{{FuncArg|number|StartTime|Equal to the ''delay'' argument, plus either the {{GlobalFunction|SysTime}} if there is no other animation queued or the end time of the last animation in the queue.}}\n*{{FuncArg|number|Ease|Equal to the ''ease'' argument.}}\n*{{FuncArg|function|OnEnd|Equal to the ''callback'' argument.}}","type":"AnimationData"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"objectName","type":"string"}],"description":"{{Internal}}\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"NewObject","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"objectName","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"callbackName","type":"string"}],"description":"{{Internal}}\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"NewObjectCallback","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to clip or not.","isOptional":false,"isVarArg":false,"name":"clip","type":"boolean"}],"description":"Sets whether this panel's drawings should be clipped within the parent panel's bounds.\n\nSee also {{GlobalFunction|DisableClipping}} and {{LibraryFunction|surface|DisableClipping}}.","examples":[],"isConstructor":false,"name":"NoClipping","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the number of children of the panel object that are selected. This is equivalent to calling {{ClassFunction|Panel|IsSelected}} on all child objects and counting the number of returns that are ''true''.","examples":[],"isConstructor":false,"name":"NumSelectedChildren","realm":"client","returns":[{"description":"The number of child objects that are currently selected. This does not include the parent object you are calling the method from.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"URL to open","isOptional":false,"isVarArg":false,"name":"URL","type":"string"}],"description":"[[Category:HTML]][[Category:Awesomium]]Instructs a HTML control to download and parse a HTML script using the passed URL.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"HTML Example\" )\nframe:SetSize( ScrW() * 0.75, ScrH() * 0.75 )\nframe:Center()\nframe:MakePopup()\n\nlocal html = vgui.Create( \"HTML\", frame )\nhtml:Dock( FILL )\nhtml:OpenURL( \"wiki.garrysmod.com\" )","description":"Displays the Garry's Mod wiki page."},{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"HTML Example\" )\nframe:SetSize( ScrW() * 0.75, ScrH() * 0.75 )\nframe:Center()\nframe:MakePopup()\n\nlocal html = vgui.Create( \"HTML\", frame )\nhtml:Dock( FILL )\nhtml:OpenURL( \"asset://garrysmod/html/loading.html\" )","description":"Displays the default loading screen from the html folder."}],"isConstructor":false,"name":"OpenURL","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The x coordinate to draw the panel from.","isOptional":false,"isVarArg":false,"name":"posX","type":"number"},{"default":"","description":"The y coordinate to draw the panel from.","isOptional":false,"isVarArg":false,"name":"posY","type":"number"}],"description":"Paints a ghost copy of the panel at the given position.","examples":[],"isConstructor":false,"name":"PaintAt","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Paints the panel at its current position. To use this you must call {{ClassFunction|Panel|SetPaintedManually}}(true).","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetTitle( \"PaintManual Test\" )\nframe:SetSize( 500, 500 )\nframe:SetPaintedManually( true )\n\nhook.Add( \"PostDrawTranslucentRenderables\", \"PaintManual Test\", function()\n\tif IsValid(frame) then\n\t\tlocal eyePos = Entity(1):EyePos()\n\t\tlocal forward = Entity(1):GetForward()\n\t\tlocal forwardAngle = forward:Angle()\n\n\t\tcam.Start3D2D(eyePos + (forward * 250), Angle(0, forwardAngle.y - 90, forwardAngle.r + 90), 0.2)\n\t\t\tframe:PaintManual()\n\t\tcam.End3D2D()\n\tend\nend )","description":"Paints a simple panel inside a 3D rendering context."}],"isConstructor":false,"name":"PaintManual","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Parents the panel to the HUD.\nMakes it invisible on the escape-menu and disables controls.","examples":[{"code":"Panel:ParentToHUD()","description":""}],"isConstructor":false,"name":"ParentToHUD","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Warning|Due to privacy concerns, this function has been disabled}}\n\nOnly works for TextEntries.\n\nPastes the contents of the clipboard into the TextEntry.\n\n{{Note|Tab characters will be dropped from the pasted text}}\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"Paste","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The width to set the label to.","isOptional":false,"isVarArg":false,"name":"lblWidth","type":"number"},{"default":"","description":"The horizontal (x) position at which to place the label.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The vertical (y) position at which to place the label.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The label to resize and position.","isOptional":false,"isVarArg":false,"name":"lbl","type":"Panel"},{"default":"","description":"The panel object to place to the right of the label.","isOptional":false,"isVarArg":false,"name":"panelObj","type":"Panel"}],"description":"Sets the width and position of a {{Type|DLabel}} and places the passed panel object directly to the right of it. Returns the ''y'' value of the bottom of the tallest object. The panel on which this method is run is not relevant; only the passed objects are affected.","examples":[],"isConstructor":false,"name":"PositionLabel","realm":"client","returns":[{"description":"The distance from the top of the parent panel to the bottom of the tallest object (the ''y'' position plus the height of the label or passed panel, depending on which is tallest).","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the message.","isOptional":false,"isVarArg":false,"name":"messageName","type":"string"},{"default":"","description":"The type of the variable to post.","isOptional":false,"isVarArg":false,"name":"valueType","type":"string"},{"default":"","description":"The value to post.","isOptional":false,"isVarArg":false,"name":"value","type":"string"}],"description":"{{Deprecated|Only used in deprecated Derma controls.}}Sends a command to the panel.\n[[Category:Slider]]","examples":[],"isConstructor":false,"name":"PostMessage","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\nInstalls Lua defined functions into the panel.","examples":[],"isConstructor":false,"name":"Prepare","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Enables the queue for panel animations. If enabled, the next new animation will begin after all current animations have ended. This must be called before {{ClassFunction|Panel|NewAnimation}} to work, and only applies to the next new animation. If you want to queue many, you must call this before each.","examples":[],"isConstructor":false,"name":"Queue","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Causes a {{Type|SpawnIcon}} to rebuild its model image.\n[[Category:ModelImage]][[Category:SpawnIcon]]","examples":[],"isConstructor":false,"name":"RebuildSpawnIcon","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A four-membered table containing the information needed to re-render:\n* {{FuncArg|Vector|cam_pos|The relative camera position the model is viewed from.}}\n* {{FuncArg|Angle|cam_ang|The camera angle the model is viewed from.}}\n* {{FuncArg|number|cam_fov|The camera's field of view (FOV).}}\n* {{FuncArg|Entity|ent|The entity object of the model.}}\nSee the example below for how to retrieve these values.","isOptional":false,"isVarArg":false,"name":"data","type":"table"}],"description":"Re-renders a spawn icon with customized cam data.\n\n{{Note|This function does '''not''' accept the standard {{Struct|CamData}}.}}\n[[Category:ModelImage]][[Category:SpawnIcon]]","examples":[{"code":"function PANEL:RenderIcon()\n\t\n\tlocal ent = self.ModelPanel:GetEntity()\n\t\n\tlocal tab = {}\n\ttab.ent\t\t= ent\n\ttab.cam_pos = self.ModelPanel:GetCamPos()\n\ttab.cam_ang = self.ModelPanel:GetLookAng()\n\ttab.cam_fov = self.ModelPanel:GetFOV()\n\n\tself.SpawnIcon:RebuildSpawnIconEx( tab )\nend","description":"The ''RenderIcon'' method used by {{Type|IconEditor}}. ''SpawnIcon'' is a {{Type|SpawnIcon}} and ''ModelPanel'' is a {{Type|DAdjustableModelPanel}}."}],"isConstructor":false,"name":"RebuildSpawnIconEx","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of DnD panels to receive. This is set on the drag'n'drop-able panels via  {{ClassFunction|Panel|Droppable}}","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"This function is called whenever a panel with valid name is hovering above and dropped on this panel. It has next arguments:\n* {{FuncArg|Panel|pnl|The receiver panel}}\n* {{FuncArg|table|tbl|A table of panels dropped onto receiver panel}}\n* {{FuncArg|boolean|dropped|False if hovering over, true if dropped onto}}\n* {{FuncArg|number|menuIndex|Index of clicked menu item from third argument of {{ClassFunction|Panel|Receiver}}}}\n* {{FuncArg|number|x|Cursor pos, relative to the receiver}}\n* {{FuncArg|number|y|Cursor pos, relative to the receiver}}","isOptional":false,"isVarArg":false,"name":"func","type":"Function"},{"default":"","description":"A table of strings that will act as a menu if drag'n'drop was performed with a right click","isOptional":false,"isVarArg":false,"name":"menu","type":"table"}],"description":"Allows the panel to receive drag and drop events. Can be called multiple times with different names to receive multiple different draggable panel events.","examples":[{"code":"local function DoDrop( self, panels, bDoDrop, Command, x, y )\n\tif ( bDoDrop ) then\n\t\tfor k, v in pairs( panels ) do\n\t\t\tself:AddItem( v )\n\t\tend\n\tend\nend\n\nconcommand.Add( \"test2\", function()\n\n\tlocal frame = vgui.Create( \"DFrame\" )\n\tframe:SetSize( 500, 300 )\n\tframe:SetTitle( \"Frame\" )\n\tframe:MakePopup()\n\tframe:Center()\n\n\tlocal left = vgui.Create( \"DScrollPanel\", frame )\n\tleft:Dock( LEFT )\n\tleft:SetWidth( frame:GetWide() / 2 - 7 )\n\tleft:SetPaintBackground( true )\n\tleft:DockMargin( 0, 0, 4, 0 )\n\tleft:Receiver( \"myDNDname\", DoDrop ) -- Make the panel a receiver for drag and drop events\n\n\tlocal right = vgui.Create( \"DScrollPanel\", frame )\n\tright:Dock( FILL )\n\tright:SetPaintBackground( true )\n\tright:Receiver( \"myDNDname\", DoDrop )\n\n\tfor i = 1, 30 do\n\t\tlocal but = vgui.Create( \"DButton\" )\n\t\tbut:SetText( i )\n\t\tbut:SetSize( 36, 24 )\n\t\tbut:Dock( TOP )\n\t\tbut:Droppable( \"myDNDname\" ) -- make the panel be able to be drag'n'dropped onto other panels\n\t\tright:AddItem( but )\n\tend\n\nend )","description":"A very simple drag'n'drop example without using {{Type|DDragBase}}."}],"isConstructor":false,"name":"Receiver","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"If true, the refresh will ignore cached content similar to \"ctrl+f5\" in most browsers.","isOptional":true,"isVarArg":false,"name":"ignoreCache","type":"boolean"}],"description":"Refreshes the HTML panel's current page.\n[[Category:HTML]]\n[[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"Refresh","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Marks a panel for deletion so it will be deleted on the next frame.\n\nWill automatically call {{ClassFunction|Panel|InvalidateParent}}.","examples":[],"isConstructor":false,"name":"Remove","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Attempts to obtain focus for this panel.","examples":[],"isConstructor":false,"name":"RequestFocus","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to reset fades, false otherwise.","isOptional":false,"isVarArg":false,"name":"hold","type":"boolean"},{"default":"","description":"Any value equating to ''true'' will reset fades only on text segments that are completely faded out.","isOptional":false,"isVarArg":false,"name":"expiredOnly","type":"boolean"},{"default":"","description":"The new sustain value of each faded text segment. Set to -1 to keep the old sustain value.","isOptional":false,"isVarArg":false,"name":"newSustain","type":"number"}],"description":"Resets all text fades in a {{Type|RichText}} element made with {{ClassFunction|Panel|InsertFade}}.\n[[Category:RichText]]","examples":[{"code":"-- Window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"ResetAllFades\")\nTextFrame:MakePopup()\n\n-- Rich Text panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Append text and start fading a few frames after creation (won't work otherwise)\ntimer.Simple(0.05, function()\n\n\trichtext:SetBGColor(Color(32, 32, 32))\n\trichtext:SetFontInternal(\"GModNotify\")\n\n\trichtext:AppendText(\"This is \")\n\trichtext:InsertFade(5, 2)\n\t\n\trichtext:AppendText(\"a test...\")\n\trichtext:InsertFade(5, 1)\n\t\nend)\n\n-- 5 seconds after creation, reset all the fades\ntimer.Simple(5, function()\n\n\trichtext:ResetAllFades(true, false, -1)\n\nend)","description":"Creates a RichText panel where two text segments slowly fade out and get reset to full alpha 5 seconds after being created."}],"isConstructor":false,"name":"ResetAllFades","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Specify JavaScript code to be executed.","isOptional":false,"isVarArg":false,"name":"js","type":"string"}],"description":"Runs/Executes a string as JavaScript code in [[:Category:DHTML|DHTML]] panel.\n{{Note|This function does '''NOT''' evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).<br>Because a return value is nil/no value (a.k.a. void).<br>If you wish to pass/return values from JS to Lua, you may want to use {{LibraryFunction|DHTML|AddFunction}} function to accomplish that job.}}","examples":[{"code":"-- First we create a container, in this case it is a full-screen Derma Frame window.\nlocal dframe = vgui.Create( 'DFrame' )\ndframe:SetSize( ScrW(), ScrH() )\ndframe:SetTitle( \"Garry's Mod Wiki\" )\ndframe:Center()\ndframe:MakePopup() -- Enable keyboard and mouse interaction for DFrame panel.\n\n-- Create a new DHTML panel as a child of dframe, and dock-fill it.\nlocal dhtml = vgui.Create( 'DHTML', dframe )\ndhtml:Dock( FILL )\n-- Navigate to Garry's Mod wikipedia website.\ndhtml:OpenURL( 'https://wiki.garrysmod.com/index.php' )\n-- Run JavaScript code.\ndhtml:RunJavascript( [[document.body.innerHTML = 'HTML changed from Lua using JavaScript!';]] )\n\n-- This does not throw an error/exception, but instead returns nil/no value.\n-- That means you can't pass/return values from JavaScript back to Lua context using this function.\nlocal number = dhtml:Call( '22;' )\nprint( number )","description":"Shows how to change [http://www.w3schools.com/jsref/prop_html_innerhtml.asp document.body.innerHTML] property by calling this function on [[:Category:DHTML|DHTML]] panel."}],"isConstructor":false,"name":"RunJavascript","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Saves the current state (caret position and the text inside) of a {{Type|TextEntry}} as an undo state.\n\nSee also {{ClassFunction|Panel|Undo}}.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SaveUndoState","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The x coordinate of the screen position to be translated.","isOptional":false,"isVarArg":false,"name":"screenX","type":"number"},{"default":"","description":"The y coordinate of the screed position be to translated.","isOptional":false,"isVarArg":false,"name":"screenY","type":"number"}],"description":"Translates global screen coordinate to coordinates relative to the panel.\n\nSee also {{ClassFunction|Panel|LocalToScreen}}.\n\n{{Warning|This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass.<br>\nie. inaccurate results may be returned if the panel or any of its ancestors have been repositioned outside of {{HookFunction|PANEL|Think}} or {{HookFunction|PANEL|PerformLayout}} within the last frame.}}","examples":[],"isConstructor":false,"name":"ScreenToLocal","realm":"client","returns":[{"description":"Relativeposition X","type":"number"},{"description":"Relativeposition Y","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Selects all items within a panel or object. For text-based objects, selects all text.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SelectAll","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"If called on a text entry, clicking the text entry for the first time will automatically select all of the text ready to be copied by the user.\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SelectAllOnFocus","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Selects all the text in a panel object. Will not select non-text items; for this, use {{ClassFunction|Panel|SelectAll}}.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SelectAllText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Deselects all items in a panel object. For text-based objects, this will deselect all text.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SelectNone","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Achievement number ID","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Sets the achievement to be displayed by {{Type|AchievementIcon}}.[[Category:AchievementIcon]]","examples":[],"isConstructor":false,"name":"SetAchievement","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Function to call when the {{Type|Button}} is clicked or the {{Type|Slider}} value is changed.\n\nArguments given are:\n* {{FuncArg|Panel|self|The panel itself}}\n* {{FuncArg|string|action|\"Command\" on button press, \"SliderMoved\" on slider move.}}\n* {{FuncArg|number|val|The new value of the {{Type|Slider}}. Will always equal 0 for buttons.}}\n* {{FuncArg|number||Always equals 0.}}","isOptional":false,"isVarArg":false,"name":"func","type":"Button | Slider | Slider"}],"description":"{{Deprecated|Only used in deprecated Derma controls.}}\nUsed in {{Type|Button}} to call a function when the button is clicked and in {{Type|Slider}} when the value changes.\n[[Category:Button]]\n[[Category:Slider]]","examples":[],"isConstructor":false,"name":"SetActionFunction","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Set to true in order not to restrict input characters.","isOptional":false,"isVarArg":false,"name":"allowed","type":"boolean"}],"description":"Configures a text input to allow user to type characters that are not included in the US-ASCII (7-bit ASCII) character set.\n\nCharacters not included in US-ASCII are multi-byte characters in UTF-8. They can be accented characters, non-Latin characters and special characters.\n\n[[Category:TextEntry]]","examples":[{"code":"if vgui.CreateStdRestrict == nil then\n\tvgui.CreateStdRestrict = vgui.Create\nend\nfunction vgui.Create( classname, parent, name )\n\tlocal vgui_elt = vgui.CreateStdRestrict(classname, parent, name)\n\tif classname == \"DTextEntry\" or classname == \"RichText\" or classname == \"TextEntry\" then\n\t\tvgui_elt:SetAllowNonAsciiCharacters(true)\n\tend\n\treturn vgui_elt\nend","description":"Replaces the default vgui.Create() function to always allow non US-ASCII characters for text inputs."}],"isConstructor":false,"name":"SetAllowNonAsciiCharacters","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The alpha value in the range of 0-255.","isOptional":false,"isVarArg":false,"name":"alpha","type":"number"}],"description":"Sets the alpha multiplier for the panel","examples":[],"isConstructor":false,"name":"SetAlpha","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to enable or disable animations.","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Enables or disables animations for the panel object by overriding the {{HookFunction|PANEL|AnimationThink}} hook to nil and back.","examples":[],"isConstructor":false,"name":"SetAnimationEnabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whenever to delete if the parent was removed or not.","isOptional":false,"isVarArg":false,"name":"autoDelete","type":"boolean"}],"description":"Sets whenever the panel should be removed if the parent was removed.","examples":[],"isConstructor":false,"name":"SetAutoDelete","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The red channel of the color, or a {{Struct|Color}}. If you pass the latter, the following three arguments are ignored.","isOptional":false,"isVarArg":false,"name":"r_or_color","type":"number"},{"default":"","description":"The green channel of the color.","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"The blue channel of the color.","isOptional":false,"isVarArg":false,"name":"b","type":"number"},{"default":"","description":"The alpha channel of the color.","isOptional":false,"isVarArg":false,"name":"a","type":"number"}],"description":"Sets the background color of a panel such as a {{Type|RichText}}, {{Type|Label}} or {{Type|DColorCube}}.\n\n{{Note|This doesn't apply to all VGUI elements and its function varies between them}}\n\nFor {{Type|DLabel}} elements, you must use {{ClassFunction|Panel|SetPaintBackgroundEnabled}}( true ) before applying the color.\n\nThis will not work on setup of the panel - you should use this function in a hook like {{HookFunction|PANEL|ApplySchemeSettings}} or {{HookFunction|PANEL|PerformLayout}}.","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(300, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"Windows XP Blue Screen\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Sample text\nrichtext:SetText(\"A problem has been detected and Windows has been shut down to prevent damage to your computer.\\n\\nMOTHERBOARD_FRIED\")\n\n-- When the panel is ready for layout, set the background color to blue\nfunction richtext:PerformLayout()\n\t\n\tself:SetBGColor(Color(0, 0, 255))\n\t\nend","description":"Creates a RichText panel that mimics a [http://en.wikipedia.org/wiki/Blue_Screen_of_Death blue screen of death]."}],"isConstructor":false,"name":"SetBGColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The red channel of the color.","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"The green channel of the color.","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"The blue channel of the color.","isOptional":false,"isVarArg":false,"name":"b","type":"number"},{"default":"","description":"The alpha channel of the color.","isOptional":false,"isVarArg":false,"name":"a","type":"number"}],"description":"{{Internal}}Sets the background color of the panel.","examples":[],"isConstructor":false,"name":"SetBGColorEx","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Caret position/offset from the start of text. A value of ''0'' places the caret before the first character.","isOptional":false,"isVarArg":false,"name":"offset","type":"number"}],"description":"Sets the position of the caret (or text cursor) in a text-based panel object.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SetCaretPos","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Sets the action signal command that's fired when a {{Type|Button}} is clicked. The hook {{HookFunction|PANEL|ActionSignal}} is called as the click response.\n\nThis has no effect on buttons unless it has had its ''AddActionSignalTarget'' method called (an internal function not available by default in Garry's Mod LUA).\n\nA better alternative is calling {{ClassFunction|Panel|Command}} when a {{Type|DButton}} is clicked.","examples":[{"code":"-- Create a regular Frame panel\nTestFrame = vgui.Create(\"Frame\")\nTestFrame:SetSize(200, 200)\nTestFrame:Center()\nTestFrame:MakePopup()\nTestFrame:SetVisible(true)\n\nlocal lbl = vgui.Create(\"DLabel\", TestFrame)\nlbl:Dock(FILL)\nlbl:DockMargin(10, 10, 10, 10)\nlbl:SetText(\"Click the white button in the upper right corner of this window.\")\nlbl:SetFont(\"ChatFont\")\nlbl:SetWrap(true)\n\n-- Create a background panel so we can see the Frame's internal buttons\nlocal bg = vgui.Create(\"DPanel\", TestFrame)\nbg:Dock(FILL)\nbg:SetBackgroundColor(Color(64, 64, 64, 192))\nbg:MoveToBack()\n\n-- Loop through Frame's internal components\nfor _, child in pairs(TestFrame:GetChildren()) do\n\n\t-- Disable frame sizing\n\tif(string.find(child:GetName(), \"Grip\")) then\n\t\n\t\tchild:SetMouseInputEnabled(false)\n\t\t\n\t-- Fire the \"Testing\" command when we click the white button\n\telseif(child:GetName() == \"frame_close\") then\n\t\n\t\tchild:SetCommand(\"Testing\")\n\t\t\n\tend\n\t\nend\n\nfunction TestFrame:ActionSignal(signalName, signalValue)\n\t\n\t-- Show the signal name\n\tlbl:SetText(\"Received command: \\\"\"..signalName..\"\\\"\")\n\nend","description":"Creates an engine-based {{Type|Frame}} panel and changes the command that's fired when you click the white close button (by default the command is set to \"Close\")."}],"isConstructor":false,"name":"SetCommand","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The direction of the content, based on the number pad.\n<table>\n<tr><td>{{Key|7}}: '''top-left'''</td><td>{{Key|8}}: '''top-center'''</td><td>{{Key|9}}: '''top-right'''</td></tr>\n<tr><td>{{Key|4}}: '''middle-left'''</td><td>{{Key|5}}: '''center'''</td><td>{{Key|6}}: '''middle-right'''</td></tr>\n<tr><td>{{Key|1}}: '''bottom-left'''</td><td>{{Key|2}}: '''bottom-center'''</td><td>{{Key|3}}: '''bottom-right'''</td></tr>\n</table>\n[[File:DLabel_SetContentAlignment.gif]]","isOptional":false,"isVarArg":false,"name":"alignment","type":"number"}],"description":"Sets the alignment of the contents.\n\n[[Category:Label]]\n[[Category:DLabel]]","examples":[],"isConstructor":false,"name":"SetContentAlignment","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The console variable to check.","isOptional":false,"isVarArg":false,"name":"convar","type":"string"}],"description":"{{Warning|This function does not exist on all panels}}\n\nSets this panel's convar. When the convar changes this panel will update automatically.\n\nFor developer implementation, see {{GlobalFunction|Derma_Install_Convar_Functions}}.","examples":[{"code":"local checkbox = vgui.Create( \"DCheckBoxLabel\", myFrame )\ncheckbox:SetConVar( \"sv_cheats\" )\ncheckbox:SetText( \"Enable cheats?\" )\ncheckbox:SetPos( 5, 25 )\ncheckbox:SizeToContents()","description":"Makes a checkbox linked to the '''sv_cheats''' convar."}],"isConstructor":false,"name":"SetConVar","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The unique name used to retrieve the cookie later.","isOptional":false,"isVarArg":false,"name":"cookieName","type":"string"},{"default":"","description":"The value to store in the cookie. This can be retrieved later as a {{Type|string}} or {{Type|number}}.","isOptional":false,"isVarArg":false,"name":"value","type":"string"}],"description":"Stores a string in the named cookie using {{ClassFunction|Panel|GetCookieName}} as prefix.\n\nYou can also retrieve and modify this cookie by using the {{Lib|cookie}}. Cookies are stored in this format:\n<code>panelCookieName.cookieName</code>\n\n{{Warning|The panel's cookie name MUST be set for this function to work. See {{ClassFunction|Panel|SetCookieName}}.}}","examples":[],"isConstructor":false,"name":"SetCookie","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel's cookie name. Used as prefix for {{ClassFunction|Panel|SetCookie}}","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Sets the panel's cookie name. Calls {{HookFunction|PANEL|LoadCookies}} if defined.","examples":[],"isConstructor":false,"name":"SetCookieName","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The cursor to be set. Can be one of the following:\n\n* arrow\n* beam\n* hourglass\n* waitarrow\n* crosshair\n* up\n* sizenwse\n* sizenesw\n* sizewe\n* sizens\n* sizeall\n* no\n* hand\n* blank\n\nSet to anything else to set it to \"none\", the default fallback. Do note that a value of \"none\" does not, as one might assume, result in no cursor being drawn - hiding the cursor requires a value of \"blank\" instead.","isOptional":false,"isVarArg":false,"name":"cursor","type":"string"}],"description":"Sets the appearance of the cursor.","examples":[],"isConstructor":false,"name":"SetCursor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to set as drag parent.","isOptional":false,"isVarArg":false,"name":"parent","type":"Panel"}],"description":"Sets the drag parent.\n\nDrag parent means that when we start to drag this panel, we'll really start dragging the defined parent.","examples":[],"isConstructor":false,"name":"SetDragParent","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"true to make it visible, false to hide it.","isOptional":false,"isVarArg":false,"name":"visible","type":"boolean"}],"description":"Sets the visibility of the language selection box in a TextEntry when typing in non-English mode.\n\nSee {{ClassFunction|Panel|SetDrawLanguageIDAtLeft}} for a function that changes the position of the language selection box.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SetDrawLanguageID","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"true = left, false = right","isOptional":false,"isVarArg":false,"name":"left","type":"boolean"}],"description":"Sets where to draw the language selection box.\n\nSee {{ClassFunction|Panel|SetDrawLanguageID}} for a function that hides or shows the language selection box.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SetDrawLanguageIDAtLeft","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"Whether or not to draw the panel in front of all others.","isOptional":true,"isVarArg":false,"name":"drawOnTop","type":"boolean"}],"description":"Makes the panel render in front of all others, including the spawn menu and main menu.\n\nPriority is given based on the last call, so of two panels that call this method, the second will draw in front of the first.\n\n{{Note|This only makes the panel '''draw''' above other panels. If there's another panel that would have otherwise covered it, users will not be able to interact with it.}}","examples":[],"isConstructor":false,"name":"SetDrawOnTop","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The x coordinate of the top-left corner of the drop area.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The y coordinate of the top-left corner of the drop area.","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"The width of the drop area.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The height of the drop area.","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Sets the target area for dropping when an object is being dragged around this panel using the {{Lib|dragndrop}}. \n\nThis draws a target box of the specified size and position, until {{ClassFunction|Panel|DragHoverEnd}} is called. It uses {{ClassFunction|Panel|DrawDragHover}} to draw this area.","examples":[],"isConstructor":false,"name":"SetDropTarget","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to enable or disable the panel object.","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Sets the enabled state of a disable-able panel object, such as a {{Type|DButton}} or {{Type|DTextEntry}}.\n\nSee {{ClassFunction|Panel|IsEnabled}} for a function that retrieves the \"enabled\" state of a panel.","examples":[],"isConstructor":false,"name":"SetEnabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The distance of the shadow from the panel.","isOptional":false,"isVarArg":false,"name":"distance","type":"number"},{"default":"","description":"The color of the shadow. Uses the {{Struct|Color}}.","isOptional":false,"isVarArg":false,"name":"Color","type":"Color"}],"description":"Adds a shadow falling to the bottom right corner of the panel's text. This has no effect on panels that do not derive from Label.\n\n[[Category:Label]]","examples":[],"isConstructor":false,"name":"SetExpensiveShadow","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The red channel of the color, or a {{Struct|Color}}. If you pass the latter, the following three arguments are ignored.","isOptional":false,"isVarArg":false,"name":"r_or_color","type":"number"},{"default":"","description":"The green channel of the color.","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"The blue channel of the color.","isOptional":false,"isVarArg":false,"name":"b","type":"number"},{"default":"","description":"The alpha channel of the color.","isOptional":false,"isVarArg":false,"name":"a","type":"number"}],"description":"Sets the foreground color of a panel.\n\nFor a {{Type|Label}} or {{Type|RichText}}, this is the color of its text.\n\nThis function calls {{ClassFunction|Panel|SetFGColorEx}} internally. \n\n{{Note|This doesn't apply to all VGUI elements (such as {{Type|DLabel}}) and its function varies between them}}","examples":[{"code":"local label = vgui.Create( \"Label\" )\n\nlabel:SetFGColor( Color( 255, 255, 255, 255 ) )","description":"Creates a {{Type|Label}} and sets its text color to white."},{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 50)\nTextFrame:Center()\nTextFrame:SetTitle(\"This is a color test\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Sample text\nrichtext:SetText(\"Here is some light green text.\")\n\n-- When the panel is ready for layout, make the text light green\nfunction richtext:PerformLayout()\n\tself:SetFGColor(Color(153, 255, 153))\nend","description":"Sets the foreground color of a {{Type|RichText}} to match the chat box format."}],"isConstructor":false,"name":"SetFGColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The red channel of the color.","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"The green channel of the color.","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"The blue channel of the color.","isOptional":false,"isVarArg":false,"name":"b","type":"number"},{"default":"","description":"The alpha channel of the color.","isOptional":false,"isVarArg":false,"name":"a","type":"number"}],"description":"{{Internal}}Sets the foreground color of the panel.\n\nFor labels, this is the color of their text.","examples":[],"isConstructor":false,"name":"SetFGColorEx","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"state","type":"boolean"}],"description":"{{Stub}}\n\nSets the panel that owns this FocusNavGroup to be the root in the focus traversal hierarchy.\n\n[[Category:EditablePanel]]","examples":[],"isConstructor":false,"name":"SetFocusTopLevel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the font.\n\nSee [[Default_Fonts|here]] for a list of existing fonts.\nAlternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font.","isOptional":false,"isVarArg":false,"name":"fontName","type":"string"}],"description":"Sets the font used to render this panel's text.\n\nTo retrieve the font used by a panel, call {{ClassFunction|Panel|GetFont}}.\n\n[[Category:Label]]\n[[Category:TextEntry]]\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"This is a font test\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Sample text\nrichtext:SetText(\"This is a sample of text using the chat box font.\")\n\n-- Ensure font and text color changes are applied\nfunction richtext:PerformLayout()\n\n\tself:SetFontInternal(\"ChatFont\")\n\tself:SetFGColor(Color(255, 255, 255))\n\t\nend","description":"Sets the font of a {{Type|RichText}} element to match the chat box font."}],"isConstructor":false,"name":"SetFontInternal","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The height to be set.","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Sets the height of the panel.\n\nCalls {{HookFunction|PANEL|OnSizeChanged}} and marks this panel for layout ({{ClassFunction|Panel|InvalidateLayout}}).<br/>\nSee also {{ClassFunction|Panel|SetSize}}.","examples":[],"isConstructor":false,"name":"SetHeight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The code to set.","isOptional":false,"isVarArg":false,"name":"HTML_code","type":"string"}],"description":"[[Category:HTML]][[Category:Awesomium]]Allows you to set HTML code within a panel.","examples":[{"code":"local HTML = vgui.Create( \"HTML\", DPanel )\nHTML:SetHTML( \"<p>Put HTML code here</p>\" )\nHTML:SetSize( 390, 400 )","description":""}],"isConstructor":false,"name":"SetHTML","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to enable or disable keyboard input.","isOptional":false,"isVarArg":false,"name":"keyboardInput","type":"boolean"}],"description":"{{Deprecated|Alias of {{ClassFunction|Panel|SetKeyboardInputEnabled}}}}Enables or disables the keyboard input for the panel.","examples":[],"isConstructor":false,"name":"SetKeyBoardInputEnabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether keyboard input should be enabled for this panel.","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Allows or disallows the panel to receive keyboard focus and input. This is recursively applied to all children.","examples":[],"isConstructor":false,"name":"SetKeyboardInputEnabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"The minimum width of the object.","isOptional":true,"isVarArg":false,"name":"minW","type":"number"},{"default":"nil","description":"The minimum height of the object.","isOptional":true,"isVarArg":false,"name":"minH","type":"number"}],"description":"Sets the minimum dimensions of the panel or object.\n\nYou can restrict either or both values.\n\nCalling the function without arguments will remove the minimum size.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 800, 600 )\nframe:SetSizable( true )\nframe:SetMinimumSize( nil, 300 )\nframe:MakePopup()","description":"Restricting height but not width"}],"isConstructor":false,"name":"SetMinimumSize","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path of the model to set","isOptional":false,"isVarArg":false,"name":"ModelPath","type":"string"},{"default":"0","description":"The skin to set","isOptional":true,"isVarArg":false,"name":"skin","type":"number"},{"default":"\"\"","description":"The body groups to set. Each single-digit number in the string represents a separate bodygroup, '''up to 9 in total'''.","isOptional":true,"isVarArg":false,"name":"bodygroups","type":"string"}],"description":"[[Category:ModelImage]][[Category:SpawnIcon]]Sets the model to be displayed by {{Type|SpawnIcon}}.\n\n{{Note|This must be called after setting size if you wish to use a different size spawnicon}}","examples":[],"isConstructor":false,"name":"SetModel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whenever to enable or disable mouse input.","isOptional":false,"isVarArg":false,"name":"mouseInput","type":"boolean"}],"description":"Enables or disables the mouse input for the panel.","examples":[],"isConstructor":false,"name":"SetMouseInputEnabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to enable multiline or not.","isOptional":false,"isVarArg":false,"name":"multiline","type":"boolean"}],"description":"Enables or disables the multi-line functionality of a text object, such as a {{Type|DTextEntry}}.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SetMultiline","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new name of the panel.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Sets the internal name of the panel.","examples":[],"isConstructor":false,"name":"SetName","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whenever to draw the background or not.","isOptional":false,"isVarArg":false,"name":"paintBackground","type":"boolean"}],"description":"Sets whenever all the default background of the panel should be drawn or not.","examples":[],"isConstructor":false,"name":"SetPaintBackgroundEnabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whenever to draw the border or not.","isOptional":false,"isVarArg":false,"name":"paintBorder","type":"boolean"}],"description":"Sets whenever all the default border of the panel should be drawn or not.","examples":[],"isConstructor":false,"name":"SetPaintBorderEnabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True if the panel should be painted manually.","isOptional":false,"isVarArg":false,"name":"paintedManually","type":"boolean"}],"description":"Enables or disables painting of the panel manually with {{ClassFunction|Panel|PaintManual}}.","examples":[],"isConstructor":false,"name":"SetPaintedManually","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|This function does nothing.}}\nThis function does nothing.","examples":[],"isConstructor":false,"name":"SetPaintFunction","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new parent of the panel.","isOptional":false,"isVarArg":false,"name":"parent","type":"Panel"}],"description":"Sets the parent of the panel.","examples":[],"isConstructor":false,"name":"SetParent","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player to use avatar of.","isOptional":false,"isVarArg":false,"name":"player","type":"Player"},{"default":"","description":"The size of the avatar to use. Acceptable sizes are 32, 64, 184.","isOptional":false,"isVarArg":false,"name":"size","type":"number"}],"description":"Used by {{Type|AvatarImage}} to load an avatar for given player.[[Category:AvatarImage]]","examples":[],"isConstructor":false,"name":"SetPlayer","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"If ''true'', the popup panel will not draw in front of others when it gets focus, for example when it is clicked.","isOptional":false,"isVarArg":false,"name":"stayAtBack","type":"boolean"}],"description":"If this panel object has been made a popup with {{ClassFunction|Panel|MakePopup}}, this method will prevent it from drawing in front of other panels when it receives input focus.","examples":[],"isConstructor":false,"name":"SetPopupStayAtBack","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The x coordinate of the position.","isOptional":false,"isVarArg":false,"name":"posX","type":"number"},{"default":"","description":"The y coordinate of the position.","isOptional":false,"isVarArg":false,"name":"posY","type":"number"}],"description":"Sets the position of the panel.\n\nThis will trigger {{HookFunction|PANEL|PerformLayout}}. You should avoid calling this function in {{HookFunction|PANEL|PerformLayout}} to avoid infinite loops.\n\n{{Note|If you wish to position and re-size panels without much guesswork and have them look good on different screen resolutions, you may find {{ClassFunction|Panel|Dock}} useful}}","examples":[],"isConstructor":false,"name":"SetPos","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whenever to render or not.","isOptional":false,"isVarArg":false,"name":"renderInScreenshot","type":"boolean"}],"description":"Sets whenever the panel should be rendered in the next screenshot.","examples":[],"isConstructor":false,"name":"SetRenderInScreenshots","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the panel object should be selectable or not.","isOptional":false,"isVarArg":false,"name":"selectable","type":"boolean"}],"description":"Sets whether the panel object can be selected or not (like icons in the Spawn Menu, holding {{Key|Shift}}). If enabled, this will affect the function of a {{Type|DButton}} whilst {{Key|Shift}} is pressed. {{ClassFunction|Panel|SetSelected}} can be used to select/deselect the object.","examples":[],"isConstructor":false,"name":"SetSelectable","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"Whether the object should be selected or deselected. {{ClassFunction|Panel|IsSelected}} can be used to determine the selected state of the object.","isOptional":true,"isVarArg":false,"name":"selected","type":"boolean"}],"description":"Sets the selected state of a selectable panel object. This functionality is set with {{ClassFunction|Panel|SetSelectable}} and checked with {{ClassFunction|Panel|IsSelectable}}.","examples":[],"isConstructor":false,"name":"SetSelected","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Any value other than ''nil'' or ''false'' will enable the panel object for selection. It is recommended to pass ''true''.","isOptional":false,"isVarArg":false,"name":"selCanvas","type":"any"}],"description":"Enables the panel object for selection (much like the spawn menu).","examples":[],"isConstructor":false,"name":"SetSelectionCanvas","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The width of the panel.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The height of the panel.","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Sets the size of the panel.\n\nCalls {{HookFunction|PANEL|OnSizeChanged}} and marks this panel for layout ({{ClassFunction|Panel|InvalidateLayout}}).<br/>\nSee also {{ClassFunction|Panel|SetWidth}} and {{ClassFunction|Panel|SetHeight}}.\n\n{{Note|If you wish to position and re-size panels without much guesswork and have them look good on different screen resolutions, you may find {{ClassFunction|Panel|Dock}} useful}}","examples":[],"isConstructor":false,"name":"SetSize","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the skin to use. The default derma skin is ''Default''.","isOptional":false,"isVarArg":false,"name":"skinName","type":"string"}],"description":"Sets the derma skin that the panel object will use, and refreshes all panels with {{LibraryFunction|derma|RefreshSkins}}.","examples":[],"isConstructor":false,"name":"SetSkin","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A path to the .png material, for example one of the [[Silkicons]] shipped with the game.","isOptional":false,"isVarArg":false,"name":"icon","type":"string"}],"description":"[[Category:ModelImage]][[Category:SpawnIcon]]Sets the .png image to be displayed on a  {{Type|SpawnIcon}} or the panel it is based on {{Type|ModelImage}}.\n\nOnly .png images can be used with this function.","examples":[],"isConstructor":false,"name":"SetSpawnIcon","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The 64bit SteamID of the player to load avatar of","isOptional":false,"isVarArg":false,"name":"steamid","type":"string"},{"default":"","description":"The size of the avatar to use. Acceptable sizes are 32, 64, 184.","isOptional":false,"isVarArg":false,"name":"size","type":"number"}],"description":"Used by {{Type|AvatarImage}} panels to load an avatar by its 64-bit Steam ID (community ID).[[Category:AvatarImage]]","examples":[{"code":"-- Returns a random 64-bit Steam ID between STEAM_0:0:1 and STEAM_0:1:100000000\nfunction GetRandomSteamID()\n\treturn \"7656119\"..tostring(7960265728+math.random(1, 200000000))\nend\n\n-- Create the Steam User Grid\n-- Arg1: the size of each avatar\n-- Arg2: the size to load each avatar (16, 32, 64, 84, 128, 184)\nfunction CreateSteamUserGrid(av_size, av_res)\n\n\t-- Remove this block of code if you do not mind loading thousands of avatars\n\tif(av_size < 64) then\n\t\tError(\"Avatar size cannot be less than 64 square pixels.\\n\")\n\t\treturn\n\tend\n\t\n\t-- Delete existing grid\n\tif(SteamUserGrid) then SteamUserGrid:Remove() end\n\t\n\t-- The amount of avatars we can fit width-wise and height-wise\n\tlocal w_count = math.floor(ScrW()/av_size)\n\tlocal h_count = math.floor((ScrH()-25)/av_size)\t-- 25 = frame header size\n\t\t\n\t-- Container panel\n\tSteamUserGrid = vgui.Create(\"DFrame\")\n\tSteamUserGrid:SetSize(w_count*av_size, (h_count*av_size)+25)\n\tSteamUserGrid:Center()\n\tSteamUserGrid:SetTitle(\"Randomly Generated Grid of Steam Users\")\n\tSteamUserGrid:MakePopup()\n\t\n\t-- Loop variables\n\tlocal avatar, random_id\n\t\n\t-- Create enough avatars to fill up screen without overflowing\n\tfor i = 0, (w_count*h_count)-1 do\n\t\n\t\trandom_id = GetRandomSteamID()\n\t\t\n\t\t-- Add avatar to container panel\n\t\tavatar = vgui.Create(\"AvatarImage\", SteamUserGrid)\n\t\t\n\t\t-- Layout the avatars in a grid\n\t\tavatar:SetPos((i%w_count)*av_size, 25+math.floor(i/w_count)*av_size)\n\t\t\n\t\t-- Load the avatar image\n\t\tavatar:SetSteamID(random_id, av_res)\n\n\t\tavatar:SetSize(av_size, av_size)\n\t\t\n\t\t-- Open user's Steam page on avatar click\n\t\tavatar.OnMousePressed = function(self)\n\t\t\t\n\t\t\tlocal url = <nowiki>\"http://steamcommunity.com/profiles/\"</nowiki>..random_id\n\t\t\t\n\t\t\tgui.OpenURL(url)\n\t\t\t\n\t\tend\n\t\t\n\tend\n\t\nend","description":"Creates a grid of randomly generated Steam avatars which link to their corresponding Steam user pages."}],"isConstructor":false,"name":"SetSteamID","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"position","type":"number"}],"description":"{{Stub}}\n\nPossibly related to in which order pressing TAB should \"select/highlight\" the panels, presumably used on text entries and buttons.","examples":[],"isConstructor":false,"name":"SetTabPosition","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Desired height to set","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Sets height of a panel. An alias of {{ClassFunction|Panel|SetHeight}}.","examples":[],"isConstructor":false,"name":"SetTall","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Delay in seconds after which the panel should be removed.","isOptional":false,"isVarArg":false,"name":"delay","type":"number"}],"description":"Removes the panel after given time in seconds.\n{{Note|This function will not work if {{HookFunction|PANEL|AnimationThink}} is overridden, unless {{ClassFunction|Panel|AnimationThinkInternal}} is called every frame.}}","examples":[],"isConstructor":false,"name":"SetTerm","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text value to set.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.\n\n{{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}\n[[Category:Label]]\n[[Category:DLabel]]\n[[Category:TextEntry]]\n[[Category:RichText]]\n[[Category:DTree_Node]]","examples":[{"code":"-- Window frame for the RichText\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"#VAC_ConnectionRefusedTitle\") -- Results in \"Connection Refused - VAC\"\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Set the text to the message you get when VAC banned\nrichtext:SetText(\"#VAC_ConnectionRefusedDetail\")","description":"Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message."}],"isConstructor":false,"name":"SetText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The left margin for the text, in pixels. This will only affect centered text if the margin is greater than its x-coordinate.","isOptional":false,"isVarArg":false,"name":"insetX","type":"number"},{"default":"","description":"The top margin for the text, in pixels.","isOptional":false,"isVarArg":false,"name":"insetY","type":"number"}],"description":"Sets the left and top text margins of a text-based panel object, such as a {{Type|DButton}} or {{Type|DLabel}}.\n\n[[Category:Label]]","examples":[],"isConstructor":false,"name":"SetTextInset","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Sets the height of a {{Type|RichText}} element to accommodate the text inside.\n\n{{Note|This function internally relies on {{ClassFunction|Panel|GetNumLines}}, so it should be called at least a couple frames after modifying the text using {{ClassFunction|Panel|AppendText}}}}\n\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 210)\nTextFrame:Center()\nTextFrame:SetTitle(\"No set height\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:SetPos(10, 30)\nrichtext:SetWidth(230)\n\n-- Block of text\nrichtext:AppendText(\"#ServerBrowser_ServerWarning_MaxPlayers\")\n\nfunction richtext:PerformLayout() self:SetBGColor(Color(0, 0, 0)) end\n\n-- Set to full height after 2 seconds\ntimer.Simple(2, function()\n\n\trichtext:SetToFullHeight()\n\t\n\tTextFrame:SetTitle(\"Full set height\")\n\t\nend)","description":"Creates a {{Type|RichText}} panel with no set height. The proper height is applied 2 seconds after being created in order to show the difference."}],"isConstructor":false,"name":"SetToFullHeight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|Alias of {{ClassFunction|Panel|SetTooltip}}.}}","examples":[],"isConstructor":false,"name":"SetToolTip","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to be displayed in the tooltip. Set false to disable it.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Sets the tooltip to be displayed when a player hovers over the panel object with their cursor.","examples":[{"code":"local frame = vgui.Create(\"DFrame\")\nframe:SetSize(96, 96)\nframe:Center()\nframe:MakePopup(true)\n\nlocal icon = frame:Add(\"SpawnIcon\")\nicon:SetPos(0, 20)\nicon:SetSize(64, 64)\nicon:SetModel(\"models/props_junk/watermelon01.mdl\")\nicon:SetTooltip(false) -- disable tooltip for this panel","description":"To disable tooltip set first argument to false"}],"isConstructor":false,"name":"SetTooltip","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|Alias of {{ClassFunction|Panel|SetTooltipPanel}}.}}","examples":[],"isConstructor":false,"name":"SetToolTipPanel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"nil","description":"The panel to use as the tooltip.","isOptional":true,"isVarArg":false,"name":"tooltipPanel","type":"Panel"}],"description":"Sets the panel to be displayed as a tooltip when a player hovers over the panel object with their cursor. Note that it will not override the default {{Type|DTooltip}} panel.\n\n{{Note|{{ClassFunction|Panel|SetTooltip}} will override this functionality.}}\n\n{{Warning|Calling this from {{HookFunction|PANEL|OnCursorEntered}} is too late! The tooltip will not be displayed or be updated.}}\n{{Warning|Given panel or the previously set one will NOT be automatically removed.}}","examples":[{"code":"local pnl = vgui.Create( \"DFrame\" )\npnl:SetSize( 500, 500 )\npnl:Center()\npnl:MakePopup()\n\nlocal p = vgui.Create( \"Panel\" )\np:SetSize( 100, 100 )\np:SetVisible( false )\np.Paint = function( s, w, h ) draw.RoundedBox( 0, 0, 0, w, h, Color( 255, 0, 0 ) ) end\n\nlocal c = vgui.Create( \"DButton\", p )\nc:SetText( \"test\" )\nc:SetSize( 50, 50 )\nc:SetPos( 5, 5 )\n\nlocal b = pnl:Add( \"DButton\" )\nb:Dock( TOP )\n--b:SetTooltip( \"test\" ) -- This will stop SetTooltipPanel from working.\nb:SetTooltipPanel( p )","description":"Example usage of this function"}],"isConstructor":false,"name":"SetTooltipPanel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The URL to set. This '''must''' begin with ''<nowiki>http://</nowiki>''.","isOptional":false,"isVarArg":false,"name":"url","type":"string"}],"description":"[[Category:DLabelURL]][[Category:URLLabel]]Sets the URL of a link-based panel such as {{Type|DLabelURL}}.","examples":[],"isConstructor":false,"name":"SetURL","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"True to display the vertical text scroll bar, false to hide it.","isOptional":true,"isVarArg":false,"name":"display","type":"boolean"}],"description":"Sets the visibility of the vertical scrollbar.\n\nWorks for {{Type|RichText}} and {{Type|TextEntry}}.\n\n[[Category:RichText]]\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SetVerticalScrollbarEnabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The visibility of the panel.","isOptional":false,"isVarArg":false,"name":"visible","type":"boolean"}],"description":"Sets the \"visibility\" of the panel.","examples":[],"isConstructor":false,"name":"SetVisible","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Desired width to set","isOptional":false,"isVarArg":false,"name":"width","type":"number"}],"description":"Sets width of a panel. An alias of {{ClassFunction|Panel|SetWidth}}.","examples":[],"isConstructor":false,"name":"SetWide","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new width of the panel.","isOptional":false,"isVarArg":false,"name":"width","type":"number"}],"description":"Sets the width of the panel.\n\nCalls {{HookFunction|PANEL|OnSizeChanged}} and marks this panel for layout ({{ClassFunction|Panel|InvalidateLayout}}).<br/>\nSee also {{ClassFunction|Panel|SetSize}}.","examples":[],"isConstructor":false,"name":"SetWidth","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"enabled","type":"boolean"}],"description":"This makes it so that when you're hovering over this panel you can `click` on the world. Your viewmodel will aim etc.\n\n{{Bug|Issue=3467|This function doesn't scale with custom FOV specified by {{HookFunction|GM|CalcView}} or {{HookFunction|WEAPON|TranslateFOV}}.}}","examples":[],"isConstructor":false,"name":"SetWorldClicker","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to enable text wrapping, false otherwise.","isOptional":false,"isVarArg":false,"name":"wrap","type":"boolean"}],"description":"Sets whether text wrapping should be enabled or disabled on {{Type|Label}} and {{Type|DLabel}} panels.\nUse {{ClassFunction|DLabel|SetAutoStretchVertical}} to automatically correct vertical size; {{ClassFunction|Panel|SizeToContents}} will not set the correct height.","examples":[{"code":"-- Background panel\nBGPanel = vgui.Create(\"DPanel\")\nBGPanel:SetSize(300, 130)\nBGPanel:Center()\nBGPanel:SetBackgroundColor(Color(0, 0, 0))\n\t\t\n-- Label with no text wrapping\nlocal lbl_nowrap = vgui.Create(\"DLabel\", BGPanel)\nlbl_nowrap:SetPos(10, 10)\nlbl_nowrap:SetSize(280, 50)\t\t\nlbl_nowrap:SetFont(\"GModNotify\")\nlbl_nowrap:SetText(\"This is a label that has text wrapping disabled.\")\n\nlbl_nowrap:SetWrap(false)\n\n-- Label with text wrapping\nlocal lbl_wrap = vgui.Create(\"DLabel\", BGPanel)\nlbl_wrap:SetPos(10, 70)\nlbl_wrap:SetSize(280, 50)\nlbl_wrap:SetFont(\"GModNotify\")\nlbl_wrap:SetText(\"This is a label that has text wrapping enabled.\")\n\nlbl_wrap:SetWrap(true)","description":"Creates two labels in a panel and sets the text wrapping to false and true respectively."}],"isConstructor":false,"name":"SetWrap","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The z position of the panel.<br>\nCan't be lower than -32768 or higher than 32767.","isOptional":false,"isVarArg":false,"name":"zIndex","type":"number"}],"description":"Sets the panels z position which determines the rendering order.\n\nPanels with lower z positions appear behind panels with higher z positions.\n\nThis also controls in which order panels docked with {{ClassFunction|Panel|Dock}} appears.","examples":[],"isConstructor":false,"name":"SetZPos","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Makes a panel visible.","examples":[],"isConstructor":false,"name":"Show","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"0","description":"The target width of the panel. Use -1 to retain the current width.","isOptional":true,"isVarArg":false,"name":"sizeW","type":"number"},{"default":"0","description":"The target height of the panel. Use -1 to retain the current height.","isOptional":true,"isVarArg":false,"name":"sizeH","type":"number"},{"default":"","description":"The time to perform the animation within.","isOptional":true,"isVarArg":false,"name":"time","type":"number"},{"default":"0","description":"The delay before the animation starts.","isOptional":true,"isVarArg":false,"name":"delay","type":"number"},{"default":"-1","description":"Easing of the start and/or end speed of the animation. See {{ClassFunction|Panel|NewAnimation}} for how this works.","isOptional":true,"isVarArg":false,"name":"ease","type":"number"},{"default":"","description":"The function to be called once the animation finishes. Arguments are:\n* {{FuncArg|table|animData|The {{Struct|AnimationData}} that was used.}}\n* {{FuncArg|Panel|pnl|The panel object that was resized.}}","isOptional":true,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Uses animation to resize the panel to the specified size.","examples":[],"isConstructor":false,"name":"SizeTo","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Resize with width of the panel.","isOptional":false,"isVarArg":false,"name":"sizeW","type":"boolean"},{"default":"","description":"Resize the height of the panel.","isOptional":false,"isVarArg":false,"name":"sizeH","type":"boolean"}],"description":"Resizes the panel to fit the bounds of its children.\n\n{{Note|Your panel must have its layout updated ({{ClassFunction|Panel|InvalidateLayout}}) for this function to work properly.}}","examples":[{"code":"local Frame = vgui.Create( \"DFrame\" )\nFrame:SetSize( 300, 400 )\nFrame:Center()\nFrame:MakePopup()\nFrame:SetSizable( true )\n\n-- with :InvalidateLayout(true)\nlocal backgroundPanel = vgui.Create( \"DPanel\", Frame )\nbackgroundPanel:Dock( TOP )\nbackgroundPanel:DockPadding( 4, 4, 4, 4 )\nbackgroundPanel:DockMargin( 0, 0, 0, 4 )\n\nlocal button1 = vgui.Create( \"DButton\", backgroundPanel )\nbutton1:Dock( TOP )\nbutton1:DockMargin( 0, 0, 0, 4 )\nbutton1:SetTall( 60 )\nbutton1:SetText( \"c1\" )\n\nlocal button2 = vgui.Create( \"DButton\", backgroundPanel )\nbutton2:Dock( TOP )\nbutton2:SetTall( 60 )\nbutton2:SetText( \"c2\" )\n\nbackgroundPanel:InvalidateLayout( true )\nbackgroundPanel:SizeToChildren( false, true )\n\n\n-- now w/o :InvalidateLayout\nlocal backgroundPanel = vgui.Create( \"DPanel\", Frame )\nbackgroundPanel:Dock( TOP )\nbackgroundPanel:DockPadding( 4, 4, 4, 4 )\n\nlocal button1 = vgui.Create( \"DButton\", backgroundPanel )\nbutton1:Dock( TOP )\nbutton1:DockMargin( 0, 0, 0, 4 )\nbutton1:SetTall( 60 )\nbutton1:SetText( \"c1\" )\n\nlocal button2 = vgui.Create( \"DButton\", backgroundPanel )\nbutton2:Dock( TOP )\nbutton2:SetTall( 60 )\nbutton2:SetText( \"c2\" )\n\nbackgroundPanel:SizeToChildren( false, true )","description":"Using {{ClassFunction|Panel|InvalidateLayout}}"}],"isConstructor":false,"name":"SizeToChildren","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Resizes the panel so that its width and height fit all of the content inside.\n\n{{Note|Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.}}\n\n{{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}\n\n[[Category:DImage]]\n[[Category:DImageButton]]\n[[Category:DNumberWang]]\n[[Category:DListView]]","examples":[],"isConstructor":false,"name":"SizeToContents","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"0","description":"The number of extra pixels to add to the width. Can be a negative number, to reduce the width.","isOptional":true,"isVarArg":false,"name":"addVal","type":"number"}],"description":"Resizes the panel object's width to accommodate all child objects/contents.\n\nOnly works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented {{ClassFunction|Panel|GetContentSize}} method.\n\n{{Note|You must call this function '''AFTER''' setting text/font or adjusting child panels.}}","examples":[],"isConstructor":false,"name":"SizeToContentsX","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"0","description":"The number of extra pixels to add to the height.","isOptional":true,"isVarArg":false,"name":"addVal","type":"number"}],"description":"Resizes the panel object's height to accommodate all child objects/contents.\n\nOnly works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented {{ClassFunction|Panel|GetContentSize}} method.\n\n{{Note|You must call this function '''AFTER''' setting text/font or adjusting child panels.}}","examples":[],"isConstructor":false,"name":"SizeToContentsY","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Time to complete the animation.","isOptional":false,"isVarArg":false,"name":"Length","type":"number"}],"description":"Slides the panel in from above.","examples":[],"isConstructor":false,"name":"SlideDown","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Time to complete the animation.","isOptional":false,"isVarArg":false,"name":"Length","type":"number"}],"description":"Slides the panel out to the top.","examples":[],"isConstructor":false,"name":"SlideUp","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Begins a box selection, enables mouse capture for the panel object, and sets the start point of the selection box to the mouse cursor's position, relative to this object. For this to work, either the object or its parent must be enabled as a selection canvas. This is set using {{ClassFunction|Panel|SetSelectionCanvas}}.","examples":[],"isConstructor":false,"name":"StartBoxSelection","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Stops all panel animations by clearing its animation list. This also clears all delayed animations.","examples":[],"isConstructor":false,"name":"Stop","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to align the bottom of this one with.","isOptional":false,"isVarArg":false,"name":"tgtPanel","type":"Panel"},{"default":"0","description":"The gap to leave between this and the passed panel. Negative values will cause the panel's height to increase, forming an overlap.","isOptional":true,"isVarArg":false,"name":"offset","type":"number"}],"description":"Resizes the panel object's height so that its bottom is aligned with the top of the passed panel. An offset greater than zero will reduce the panel's height to leave a gap between it and the passed panel.","examples":[],"isConstructor":false,"name":"StretchBottomTo","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel to align the right edge of this one with.","isOptional":false,"isVarArg":false,"name":"tgtPanel","type":"Panel"},{"default":"0","description":"The gap to leave between this and the passed panel. Negative values will cause the panel's width to increase, forming an overlap.","isOptional":true,"isVarArg":false,"name":"offset","type":"number"}],"description":"Resizes the panel object's width so that its right edge is aligned with the left of the passed panel. An offset greater than zero will reduce the panel's width to leave a gap between it and the passed panel.","examples":[],"isConstructor":false,"name":"StretchRightTo","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The left offset to the parent.","isOptional":false,"isVarArg":false,"name":"offsetLeft","type":"number"},{"default":"","description":"The top offset to the parent.","isOptional":false,"isVarArg":false,"name":"offsetTop","type":"number"},{"default":"","description":"The right offset to the parent.","isOptional":false,"isVarArg":false,"name":"offsetRight","type":"number"},{"default":"","description":"The bottom offset to the parent.","isOptional":false,"isVarArg":false,"name":"offsetBottom","type":"number"}],"description":"Sets the dimensions of the panel to fill its parent. It will only stretch in directions that aren't nil.","examples":[],"isConstructor":false,"name":"StretchToParent","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Toggles the selected state of a selectable panel object. This functionality is set with {{ClassFunction|Panel|SetSelectable}} and checked with {{ClassFunction|Panel|IsSelectable}}. To check whether the object is selected or not, {{ClassFunction|Panel|IsSelected}} is used.","examples":[],"isConstructor":false,"name":"ToggleSelection","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Toggles the visibility of a panel and all its children.","examples":[],"isConstructor":false,"name":"ToggleVisible","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Restores the last saved state (caret position and the text inside) of a {{Type|TextEntry}}. Should act identically to pressing CTRL+Z in a {{Type|TextEntry}}.\n\nSee also {{ClassFunction|Panel|SaveUndoState}}.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"Undo","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Recursively deselects this panel object and all of its children. This will cascade to all child objects at every level below the parent.","examples":[],"isConstructor":false,"name":"UnselectAll","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Forcibly updates the panels' HTML Material, similar to when Paint is called on it.<br />This is only useful if the panel is not normally visible, i.e the panel exists purely for its HTML Material.\n{{Note|Only works on with panels that have a HTML Material. See {{ClassFunction|Panel|GetHTMLMaterial}} for more details.}}\n{{Note|A good place to call this is in the {{HookFunction|GM|PreRender}} hook}}\n[[Category:HTML]][[Category:Awesomium]]","examples":[],"isConstructor":false,"name":"UpdateHTMLTexture","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|Use {{ClassFunction|Panel|IsValid}} instead.}}Returns if a given panel is valid or not.","examples":[],"isConstructor":false,"name":"Valid","realm":"client","returns":[{"description":"Whether the panel is valid or not, true being it is, false being it isn't.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The time to perform the animation within.","isOptional":false,"isVarArg":false,"name":"time","type":"number"},{"default":"","description":"The function to be called once the animation finishes. Arguments are:\n* {{FuncArg|table|animData|The {{Struct|AnimationData}} that was used.}}\n* {{FuncArg|Panel|pnl|The panel object that was resized.}}","isOptional":false,"isVarArg":false,"name":"callback","type":"Function"}],"description":"Uses animation to resize the panel to the specified size.","examples":[],"isConstructor":false,"name":"SizeTo","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the signal, usually the sender of the signal or the command name.","isOptional":false,"isVarArg":false,"name":"signalName","type":"string"},{"default":"","description":"The value of the signal, usually a command argument.","isOptional":false,"isVarArg":false,"name":"signalValue","type":"string"}],"description":"Called whenever a panel receives a command signal from one of its children.\n\nThis hook is called when using {{ClassFunction|Panel|Command}}, when clicking a {{Type|Button}} with {{ClassFunction|Panel|SetCommand}} set, and when clicking text within a {{Type|RichText}} panel that is marked as click-able.","examples":[],"isConstructor":false,"name":"ActionSignal","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called every frame unless {{ClassFunction|Panel|IsVisible}} is set to false. Similar to {{HookFunction|PANEL|Think}}, but can be disabled by {{ClassFunction|Panel|SetAnimationEnabled}} as explained below.\n\nIf you are overriding this, you must call {{ClassFunction|Panel|AnimationThinkInternal}} every frame, else animations will cease to work.\n\nIf you want to \"disable\" this hook with {{ClassFunction|Panel|SetAnimationEnabled}}, you must call it after defining this hook. Once disabled, a custom hook '''will not''' be re-enabled by {{ClassFunction|Panel|SetAnimationEnabled}} again - the hook will have to be re-defined.","examples":[],"isConstructor":false,"name":"AnimationThink","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called whenever the panel should apply its scheme(style).\n\n<!-- TODO: Specify when it is called -->","examples":[],"isConstructor":false,"name":"ApplySchemeSettings","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The time the object was hovered over this panel.","isOptional":false,"isVarArg":false,"name":"hoverTime","type":"number"}],"description":"Called when an object is dragged and hovered over this panel for 0.1 seconds.\n\nThis is used by {{Type|DPropertySheet}} and {{Type|DTree}}, for example to open a tab or expand a node when an object is hovered over it.","examples":[],"isConstructor":false,"name":"DragHoverClick","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel we are dropped onto","isOptional":false,"isVarArg":false,"name":"pnl","type":"Panel"}],"description":"Called when this panel is dropped onto another panel.\n\nOnly works for panels derived from {{Type|DDragBase}}.","examples":[],"isConstructor":false,"name":"DroppedOn","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The classname of the panel to generate example for. This will be the class name of your panel.","isOptional":false,"isVarArg":false,"name":"classRef","type":"string"},{"default":"","description":"A {{Type|DPropertySheet}} to add your example to. See examples below.","isOptional":false,"isVarArg":false,"name":"dpropertysheet","type":"DPropertySheet"},{"default":"","description":"Width of the property sheet?","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"Width of the property sheet?","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Called when the panel should generate example use case / example code to use for this panel. Used in the panel opened by '''derma_controls''' console command.","examples":[{"code":"function PANEL:GenerateExample( ClassName, PropertySheet, Width, Height )\n\n\tlocal ctrl = vgui.Create( ClassName )\n\tctrl:SetText( \"Example Button\" )\n\tctrl:SetWide( 200 )\n\n\tPropertySheet:AddSheet( ClassName, ctrl, nil, true, true )\n\nend\n\nderma.DefineControl( \"DButton\", \"A standard Button\", PANEL, \"DLabel\" )","description":"Example usage of this hook from DButton's code."}],"isConstructor":false,"name":"GenerateExample","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the panel is created. This is called for each base type that the panel has.","examples":[{"code":"local BASE = {}\nfunction BASE:Init()\n\tprint(\"Base Init Called\")\nend\n\n\nlocal PANEL = {}\nfunction PANEL:Init()\n\tprint(\"Panel Init Called\")\nend\n\n\nvgui.Register(\"MyBase\", BASE, \"DFrame\")\nvgui.Register(\"MyPanel\", PANEL, \"MyBase\")\n\nlocal panel = vgui.Create(\"MyPanel\")","description":"Shows how this method is called recursively for each base type a panel has."}],"isConstructor":false,"name":"Init","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called after {{ClassFunction|Panel|SetCookieName}} is called on this panel to apply the just loaded cookie values for this panel.","examples":[{"code":"function PANEL:LoadCookies()\n\n\tlocal value = self:GetCookieNumber( \"SavedCookieName\", 0 )\n\tprint( value )\n\n\t-- Do your stuff with the loaded value\n\nend","description":""}],"isConstructor":false,"name":"LoadCookies","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}Called when we are activated during level load. Used by the loading screen panel.","examples":[],"isConstructor":false,"name":"OnActivate","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New target URL.","isOptional":false,"isVarArg":false,"name":"targetURL","type":"string"}],"description":"Called by HTML panels when the target URL of the frame has changed, this happens when you hover over a link.","examples":[],"isConstructor":false,"name":"OnChangeTargetURL","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new title of the page.","isOptional":false,"isVarArg":false,"name":"newTitle","type":"string"}],"description":"Called by HTML panels when the title of the loaded page has been changed.","examples":[],"isConstructor":false,"name":"OnChangeTitle","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The child which was added.","isOptional":false,"isVarArg":false,"name":"child","type":"Panel"}],"description":"Called whenever a child was parented to the panel.\n\n{{Bug|Issue=2759|This is called before the panel's metatable is set.}}","examples":[],"isConstructor":false,"name":"OnChildAdded","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The child which is about to be removed.","isOptional":false,"isVarArg":false,"name":"child","type":"Panel"}],"description":"Called whenever a child of the panel is about to removed.","examples":[],"isConstructor":false,"name":"OnChildRemoved","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The URL of the page requesting to create a child.","isOptional":false,"isVarArg":false,"name":"sourceURL","type":"string"},{"default":"","description":"The URL of the requested child.","isOptional":false,"isVarArg":false,"name":"targetURL","type":"string"},{"default":"","description":"True if the requested view is a popup.","isOptional":false,"isVarArg":false,"name":"isPopup","type":"boolean"}],"description":"Called by HTML panels when the page attempts to open a new child view (such as a popup or new tab).","examples":[],"isConstructor":false,"name":"OnChildViewCreated","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called whenever the cursor entered the panels bounds.","examples":[],"isConstructor":false,"name":"OnCursorEntered","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called whenever the cursor left the panels bounds.","examples":[],"isConstructor":false,"name":"OnCursorExited","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new x position of the cursor relative to the panels origin.","isOptional":false,"isVarArg":false,"name":"cursorX","type":"number"},{"default":"","description":"The new y position of the cursor relative to the panels origin.","isOptional":false,"isVarArg":false,"name":"cursorY","type":"number"}],"description":"Called whenever the cursor was moved with the panels bounds.","examples":[],"isConstructor":false,"name":"OnCursorMoved","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}Called when we are deactivated during level load. Used by the loading screen panel.","examples":[],"isConstructor":false,"name":"OnDeactivate","realm":"client and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The URL of the current page.","isOptional":false,"isVarArg":false,"name":"url","type":"string"}],"description":"Called by HTML panels when the panel's DOM has been set up. You can run JavaScript in here.","examples":[],"isConstructor":false,"name":"OnDocumentReady","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"We're being dropped on something\nWe can create a new panel here and return it, so that instead of dropping us - it drops the new panel instead! We remain where we are!\n\nOnly works for panels derived from {{Type|DDragBase}}.","examples":[],"isConstructor":false,"name":"OnDrop","realm":"client","returns":[{"description":"The panel to drop instead of us. By default you should return self.","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Is the focus was gained ( true ) or lost ( false )","isOptional":false,"isVarArg":false,"name":"gained","type":"boolean"}],"description":"Called whenever the panel gained or lost focus.\n\n{{Note|{{ClassFunction|Panel|HasFocus}} will only be updated on the next frame and will return the \"old\" value at the time this hook is run. Same goes for {{LibraryFunction|vgui|GetKeyboardFocus}}.}}","examples":[],"isConstructor":false,"name":"OnFocusChanged","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"They key code of the pressed key, see {{Enum|KEY}}.","isOptional":false,"isVarArg":false,"name":"keyCode","type":"KEY"}],"description":"Called whenever a keyboard key was pressed while the panel is focused.\n\n{{Bug|Issue=2886|This is not run for ESC/\"cancelselect\" binding.}}","examples":[],"isConstructor":false,"name":"OnKeyCodePressed","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"They key code of the released key, see {{Enum|KEY}}.","isOptional":false,"isVarArg":false,"name":"keyCode","type":"KEY"}],"description":"Called whenever a keyboard key was released while the panel is focused.\n\n{{Bug|Issue=2886|This is not run for TILDE/\"toggleconsole\" binding.}}","examples":[],"isConstructor":false,"name":"OnKeyCodeReleased","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"They key code of the key pressed, see {{Enum|MOUSE}}.","isOptional":false,"isVarArg":false,"name":"keyCode","type":"MOUSE"}],"description":"Called whenever a mouse key was pressed while the panel is focused.","examples":[],"isConstructor":false,"name":"OnMousePressed","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"They key code of the key released, see {{Enum|MOUSE}}.","isOptional":false,"isVarArg":false,"name":"keyCode","type":"MOUSE"}],"description":"Called whenever a mouse key was released while the panel is focused.","examples":[],"isConstructor":false,"name":"OnMouseReleased","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The scroll delta, indicating how much the user turned the mouse wheel.","isOptional":false,"isVarArg":false,"name":"scrollDelta","type":"number"}],"description":"Called whenever the mouse wheel was used.","examples":[],"isConstructor":false,"name":"OnMouseWheeled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the panel is about to be removed.","examples":[],"isConstructor":false,"name":"OnRemove","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The previous width  of the game's window","isOptional":false,"isVarArg":false,"name":"oldWidth","type":"number"},{"default":"","description":"The previous height of the game's window","isOptional":false,"isVarArg":false,"name":"oldHeight","type":"number"}],"description":"Called when the player's screen resolution of the game changes.\n\n{{GlobalFunction|ScrW}} and {{GlobalFunction|ScrH}} will return the new values when this hook is called.\n\n{{NextUpdate|Arguments only available in the next update.}}","examples":[],"isConstructor":false,"name":"OnScreenSizeChanged","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new width of the panel","isOptional":false,"isVarArg":false,"name":"newWidth","type":"number"},{"default":"","description":"The new height of the panel","isOptional":false,"isVarArg":false,"name":"newHeight","type":"number"}],"description":"Called just after the panel size changes.\n\nAll size functions will return the new values when this hook is called.\n\n{{Warning|Changing the panel size in this hook will cause an infinite loop!}}\n\n{{NextUpdate}}","examples":[],"isConstructor":false,"name":"OnSizeChanged","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}} Called by {{LibraryFunction|dragndrop|StartDragging}} when the panel starts being dragged.","examples":[],"isConstructor":false,"name":"OnStartDragging","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Internal}} Called by {{ClassFunction|Panel|DragMouseRelease}} when the panel object is released after being dragged.","examples":[],"isConstructor":false,"name":"OnStopDragging","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The panel's width.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The panel's height.","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Called whenever the panel should be drawn. \n\nYou can create panels with a customized appearance by overriding their Paint() function, which will prevent the default appearance from being drawn.\n\n{{Note|Render operations from the {{Lib|surface}} (and consequentially the {{Lib|draw}}) are always offset by the global position of this panel, as seen in the example below}}\n\n{{Note|This hook will not run if the panel is completely off the screen. The hook will still run however if any parts of the panel are still on screen.}}","examples":[{"code":"local panel = vgui.Create( \"DPanel\" )\npanel:SetSize( 100, 100 )\npanel:SetPos( ScrW() / 2 - 50, ScrH() / 2 - 50 )\n\nfunction panel:Paint( w, h )\n    draw.RoundedBox( 8, 0, 0, w, h, Color( 0, 0, 0 ) )\nend","description":"Creates a DPanel and overrides its Paint() function to draw a 100x100 pixel black rounded box in the center of the screen."}],"isConstructor":false,"name":"Paint","realm":"client","returns":[{"description":"Returning true prevents the background from being drawn.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The panels current width.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The panels current height.","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Called whenever the panel and all its children were drawn, return true to override the default drawing.","examples":[],"isConstructor":false,"name":"PaintOver","realm":"client","returns":[{"description":"Should we disable default PaintOver rendering? This is useful in case with Derma panels that use Derma hooks.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The panels current width.","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"The panels current height.","isOptional":false,"isVarArg":false,"name":"height","type":"number"}],"description":"Called whenever the panels layout was invalidated. This means all child panels must be re-positioned to fit the possibly new size of this panel.\n\n{{Warning|Do '''NOT''' call this function directly. Use {{ClassFunction|Panel|InvalidateLayout}} instead!}}","examples":[],"isConstructor":false,"name":"PerformLayout","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Only works on elements defined with {{LibraryFunction|derma|DefineControl}} and only if the panel has '''AllowAutoRefresh''' set to true.\n\nCalled after {{LibraryFunction|derma|DefineControl}} is called with panel's class name.\n\nSee also {{HookFunction|PANEL|PreAutoRefresh}}","examples":[],"isConstructor":false,"name":"PostAutoRefresh","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Only works on elements defined with {{LibraryFunction|derma|DefineControl}} and only if the panel has '''AllowAutoRefresh''' set to true.\n\nCalled when {{LibraryFunction|derma|DefineControl}} is called with this panel's class name before applying changes to this panel.\n\nSee also {{HookFunction|PANEL|PostAutoRefresh}}","examples":[],"isConstructor":false,"name":"PreAutoRefresh","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called every frame while {{ClassFunction|Panel|IsVisible}} is true.","examples":[],"isConstructor":false,"name":"Think","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"Panel"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A panel list with a custom vertical scroll bar that doesn't have up/down buttons and has a momentum to scrolling.\n\n{{Deprecated|You should use {{Type|DScrollPanel}} instead}}","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 300, 500 )\nframe:Center()\nframe:MakePopup()\n\nlocal pnl = frame:Add( \"PanelList\" )\npnl:Dock( FILL )\npnl:EnableVerticalScrollbar()\n\nfor i = 0, 100 do\n\tlocal button = pnl:Add( \"DButton\" )\n\tpnl:AddItem( button )\nend","description":"Example usage of the panel"}],"extends":"Panel","functions":[],"isHook":false,"isPureAbstract":true,"name":"PanelList"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}A preset editor, which can be opened by {{Type|ControlPresets}}.\n\nThis control only exists in Sandbox derived gamemodes.","examples":[],"extends":"DFrame","functions":[],"isHook":false,"isPureAbstract":true,"name":"PresetEditor"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"This is the list of utility functions.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Adds the specified string to the string table.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Adds the specified string to a string table, which will cache it and network it to all clients automatically.<br>\nWhenever you want to create a net message with {{LibraryFunction|net|Start}}, you must add the name of that message as a networked string via this function.\n\nIf the passed string already exists, nothing will happen and the ID of the existing item will be returned.\n\n{{Note|Due to the way string tables work, it's preferable to call this function as soon as the server starts up, such as in {{HookFunction|GM|Initialize}} or even bare in a lua file outside of a function.}}\n{{Note|The string table used for this function does not interfere with the engine string tables and has 2048 slots.}}","examples":[],"isConstructor":false,"name":"AddNetworkString","realm":"server","returns":[{"description":"The id of the string that was added to the string table.<br>\nSame as calling {{LibraryFunction|util|NetworkStringToID}}.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"View angles","isOptional":false,"isVarArg":false,"name":"ViewAngles","type":"Angle"},{"default":"","description":"View Field of View","isOptional":false,"isVarArg":false,"name":"ViewFOV","type":"number"},{"default":"","description":"Mouse X position","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"Mouse Y position","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"Screen width","isOptional":false,"isVarArg":false,"name":"scrWidth","type":"number"},{"default":"","description":"Screen height","isOptional":false,"isVarArg":false,"name":"scrHeight","type":"number"}],"description":"Function used to calculate aim vector from 2D screen position. It is used in SuperDOF calculate Distance.\n\nEssentially a generic version of {{LibraryFunction|gui|ScreenToVector}}.","examples":[],"isConstructor":false,"name":"AimVector","realm":"shared and menu","returns":[{"description":"Calculated aim vector","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"String to encode.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Encodes the specified string to base64.","examples":[],"isConstructor":false,"name":"Base64Encode","realm":"shared and menu","returns":[{"description":"Base 64 encoded string.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity that caused the damage.","isOptional":false,"isVarArg":false,"name":"inflictor","type":"Entity"},{"default":"","description":"The entity that attacked.","isOptional":false,"isVarArg":false,"name":"attacker","type":"Entity"},{"default":"","description":"The center of the explosion","isOptional":false,"isVarArg":false,"name":"damageOrigin","type":"Vector"},{"default":"","description":"The radius in which entities will be damaged.","isOptional":false,"isVarArg":false,"name":"damageRadius","type":"number"},{"default":"","description":"The amount of damage to be applied.","isOptional":false,"isVarArg":false,"name":"damage","type":"number"}],"description":"Applies explosion damage to all entities in the specified radius.","examples":[],"isConstructor":false,"name":"BlastDamage","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The information about the damage","isOptional":false,"isVarArg":false,"name":"dmg","type":"CTakeDamageInfo"},{"default":"","description":"Center of the spherical damage","isOptional":false,"isVarArg":false,"name":"damageOrigin","type":"Vector"},{"default":"","description":"The radius in which entities will be damaged.","isOptional":false,"isVarArg":false,"name":"damageRadius","type":"number"}],"description":"Applies spherical damage based on damage info to all entities in the specified radius.","examples":[],"isConstructor":false,"name":"BlastDamageInfo","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"String to compress.","isOptional":false,"isVarArg":false,"name":"str","type":"string"}],"description":"Compresses the given string using the [[wikipedia:LZMA|LZMA]] algorithm.\n\nUse with {{LibraryFunction|net|WriteData}} and {{LibraryFunction|net|ReadData}} for networking and  {{LibraryFunction|util|Decompress}} to decompress the data.","examples":[],"isConstructor":false,"name":"Compress","realm":"shared and menu","returns":[{"description":"The compressed string, or nil if the input string was zero length (\"\").","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to calculate the checksum of.","isOptional":false,"isVarArg":false,"name":"stringToHash","type":"string"}],"description":"Generates the [[wikipedia:Cyclic redundancy check|CRC checksum]] of the specified string.","examples":[{"code":"print( util.CRC( \"a\" ))","description":"Prints out the CRC-32 checksum of \"a\"."}],"isConstructor":false,"name":"CRC","realm":"shared","returns":[{"description":"The unsigned 32 bit checksum.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current date formatted like '2012-10-31 18-00-00'","examples":[],"isConstructor":false,"name":"DateStamp","realm":"shared and menu","returns":[{"description":"date","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the decal to paint.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The start of the trace.","isOptional":false,"isVarArg":false,"name":"start","type":"Vector"},{"default":"","description":"The end of the trace.","isOptional":false,"isVarArg":false,"name":"end","type":"Vector"},{"default":"NULL","description":"If set, the decal will not be able to be placed on given entity. Can also be a table of entities.","isOptional":true,"isVarArg":false,"name":"filter","type":"Entity"}],"description":"Performs a trace and paints a decal to the surface hit.","examples":[],"isConstructor":false,"name":"Decal","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the decal to paint. Can be retrieved with {{LibraryFunction|util|DecalMaterial}}.","isOptional":false,"isVarArg":false,"name":"material","type":"IMaterial"},{"default":"","description":"The entity to apply the decal to","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The position of the decal.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"The direction of the decal.","isOptional":false,"isVarArg":false,"name":"normal","type":"Vector"},{"default":"","description":"The color of the decal. Uses the {{Struct|Color}}.\n\nThis only works when used on a brush model and only if the decal material has set '''$vertexcolor''' to 1.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"},{"default":"","description":"The width scale of the decal.","isOptional":false,"isVarArg":false,"name":"w","type":"number"},{"default":"","description":"The height scale of the decal.","isOptional":false,"isVarArg":false,"name":"h","type":"number"}],"description":"Performs a trace and paints a decal to the surface hit.\n\n{{Note|This function has trouble spanning across multiple brushes on the map.}}","examples":[],"isConstructor":false,"name":"DecalEx","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the decal.","isOptional":false,"isVarArg":false,"name":"decalName","type":"string"}],"description":"Gets the full material path by the decal name. Used with {{LibraryFunction|util|DecalEx}}.","examples":[],"isConstructor":false,"name":"DecalMaterial","realm":"shared","returns":[{"description":"Material path of the decal.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The compressed string to decompress.","isOptional":false,"isVarArg":false,"name":"compressedString","type":"string"},{"default":"nil","description":"The maximal size in bytes it will decompress.","isOptional":true,"isVarArg":false,"name":"maxSize","type":"number"}],"description":"Decompresses the given string using [[wikipedia:LZMA|LZMA]] algorithm. Used to decompress strings previously compressed with {{LibraryFunction|util|Compress}}.","examples":[],"isConstructor":false,"name":"Decompress","realm":"shared and menu","returns":[{"description":"The original, decompressed string or an empty string on failure or invalid input.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Start of the line.","isOptional":false,"isVarArg":false,"name":"lineStart","type":"Vector"},{"default":"","description":"End of the line.","isOptional":false,"isVarArg":false,"name":"lineEnd","type":"Vector"},{"default":"","description":"The position of the point.","isOptional":false,"isVarArg":false,"name":"pointPos","type":"Vector"}],"description":"Gets the distance between a line and a point in 3d space.","examples":[],"isConstructor":false,"name":"DistanceToLine","realm":"shared","returns":[{"description":"Distance from line.","type":"number"},{"description":"Nearest point on line.","type":"Vector"},{"description":"Distance along line from start.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the effect to create.","isOptional":false,"isVarArg":false,"name":"effectName","type":"string"},{"default":"","description":"The effect data describing the effect.","isOptional":false,"isVarArg":false,"name":"effectData","type":"CEffectData"},{"default":"true","description":"Whether Lua-defined effects should override engine-defined effects with the same name for this/single function call.","isOptional":true,"isVarArg":false,"name":"allowOverride","type":"boolean"},{"default":"nil","description":"Can either be a boolean to ignore the prediction filter or a {{Type|CRecipientFilter}}.\n\nSet this to true if you wish to call this function in multiplayer from server.","isOptional":true,"isVarArg":false,"name":"ignorePredictionOrRecipientFilter","type":"CRecipientFilter"}],"description":"Creates an effect with the specified data.\n\nYou can find a list of built-in engine effects [[Effects|here]]. You can create your own. Example effects can be found [https://github.com/garrynewman/garrysmod/tree/master/garrysmod/gamemodes/sandbox/entities/effects here] and [https://github.com/garrynewman/garrysmod/tree/master/garrysmod/gamemodes/base/entities/effects here].\n\n{{Note|When dispatching an effect from the server, some values may be clamped for networking optimizations. Visit the Set accessors on {{Type|CEffectData}} to see which ones are affected.}}\n{{Note|You will need to couple this function with {{GlobalFunction|IsFirstTimePredicted}} should you use this in a [[:Category:Predicted_Hooks|predicted hook]].}}","examples":[{"code":"local vPoint = Vector( 0, 0, 0 )\nlocal effectdata = EffectData()\neffectdata:SetOrigin( vPoint )\nutil.Effect( \"HelicopterMegaBomb\", effectdata )","description":"Creates a HelicopterMegaBomb effect at the origin of the map. ( 0, 0, 0 )"}],"isConstructor":false,"name":"Effect","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Model path","isOptional":false,"isVarArg":false,"name":"mdl","type":"string"}],"description":"Returns a table containing the info about the model. It seems to be not working serverside, but still exists serverside.\n\n{{Note|This function will silently fail if used on models with following strings in them:\n* _shared\n* _anims\n* _gestures\n* _anim\n* _postures\n* _gst\n* _pst\n* _shd\n* _ss\n* _anm\n* _include}}","examples":[{"code":"local ModelInfo = util.GetModelInfo(\"models/combine_gate_vehicle.mdl\" )\nprint( ModelInfo.SkinCount ) // 1\nPrintTable( util.KeyValuesToTablePreserveOrder( ModelInfo.KeyValues ) ) // A","description":"Example usage of the function. We use {{LibraryFunction|util|KeyValuesToTablePreserveOrder}} in order to preserve multiple keys with the same name."}],"isConstructor":false,"name":"GetModelInfo","realm":"shared","returns":[{"description":"The model info as a table with the following keys:\n*{{FuncArg|number|SkinCount|Identical to {{ClassFunction|Entity|SkinCount}}.}}\n*{{FuncArg|string|KeyValues|Valve key-value formatted info about the model ( Constraint Info, etc )}}","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"SteamID of the player","isOptional":false,"isVarArg":false,"name":"steamID","type":"string"},{"default":"","description":"Variable name to get the value of","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The default value, in case there's nothing stored","isOptional":false,"isVarArg":false,"name":"defaultVal","type":"string"}],"description":"Gets PData of an offline player using their SteamID {{Warning|This function internally uses {{ClassFunction|Player|UniqueID}}, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.}}","examples":[],"isConstructor":false,"name":"GetPData","realm":"shared and menu","returns":[{"description":"The stored value","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Creates a new PixVis handle. See {{LibraryFunction|util|PixelVisible}}.","examples":[],"isConstructor":false,"name":"GetPixelVisibleHandle","realm":"client","returns":[{"description":"PixVis","type":"pixelvis_handle_t"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The player the trace should be based on","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"ply:GetAimVector()","description":"The direction of the trace","isOptional":true,"isVarArg":false,"name":"dir","type":"Vector"}],"description":"Utility function to quickly generate a trace table that starts at the players view position, and ends 16384 units along a specified direction.","examples":[{"code":"local tr = util.TraceLine( util.GetPlayerTrace( LocalPlayer() ) )\nif IsValid(tr.Entity) then print(\"I saw a \"..tr.Entity:GetModel()) end\n\nlocal trground = util.TraceLine( util.GetPlayerTrace( LocalPlayer(), Vector(0,0,-1) ) )\nif IsValid(trground.Entity) then print(\"I'm standing on a \"..trground.Entity:GetModel()) end","description":"Prints the entity's model the local player is looking at to console"}],"isConstructor":false,"name":"GetPlayerTrace","realm":"shared and menu","returns":[{"description":"The trace data. See {{Struct|Trace}}","type":"Trace"}]},{"accessModifier":"public","arguments":[],"description":"Gets information about the sun position and obstruction or nil if there is no sun.","examples":[],"isConstructor":false,"name":"GetSunInfo","realm":"client","returns":[{"description":"The sun info. See {{Struct|SunInfo}}","type":"SunInfo"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Surface property ID. You can get it from {{Struct|TraceResult}}.","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Returns data of a surface property at given ID.","examples":[],"isConstructor":false,"name":"GetSurfaceData","realm":"shared","returns":[{"description":"The data or no value if there is no valid surface property at given index.\n\nSee {{Struct|SurfacePropertyData}}","type":"SurfacePropertyData"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the surface.","isOptional":false,"isVarArg":false,"name":"surfaceName","type":"string"}],"description":"Returns the matching surface property index for the given surface property name.\n\nSee also {{LibraryFunction|util|GetSurfaceData}} and {{LibraryFunction|util|GetSurfacePropName}} for opposite function.","examples":[],"isConstructor":false,"name":"GetSurfaceIndex","realm":"shared","returns":[{"description":"The surface property index, or -1 if name doesn't correspond to a valid surface property.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Surface property ID. You can get it from {{Struct|TraceResult}}.","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Returns the name of a surface property at given ID.\n\nSee also {{LibraryFunction|util|GetSurfaceData}} and {{LibraryFunction|util|GetSurfaceIndex}} for opposite function.","examples":[],"isConstructor":false,"name":"GetSurfacePropName","realm":"shared","returns":[{"description":"The name or an empty string if there is no valid surface property at given index.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns a table of all SteamIDs that have a usergroup.\n\n{{Note|This returns the original usergroups table, changes done to this table are not retroactive and will only affect newly connected users}}","examples":[],"isConstructor":false,"name":"GetUserGroups","realm":"server","returns":[{"description":"The table of users. The table consists of SteamID-Table pairs, where the table has 2 fields:\n{{FuncArg|string|name|Players name}}\n{{FuncArg|string|group|The players user group}}","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Origin/start position of the ray.","isOptional":false,"isVarArg":false,"name":"rayStart","type":"Vector"},{"default":"","description":"The ray vector itself. This can be thought of as: the ray end point relative to the start point.\n\nNote that in this implementation, the ray is not infinite - it's only a segment.","isOptional":false,"isVarArg":false,"name":"rayDelta","type":"Vector"},{"default":"","description":"The center of the box.","isOptional":false,"isVarArg":false,"name":"boxOrigin","type":"Vector"},{"default":"","description":"The angles of the box.","isOptional":false,"isVarArg":false,"name":"boxAngles","type":"Angle"},{"default":"","description":"The min position of the box.","isOptional":false,"isVarArg":false,"name":"boxMins","type":"Vector"},{"default":"","description":"The max position of the box.","isOptional":false,"isVarArg":false,"name":"boxMaxs","type":"Vector"}],"description":"Performs a \"ray\" box intersection and returns position, normal and the fraction.","examples":[],"isConstructor":false,"name":"IntersectRayWithOBB","realm":"shared","returns":[{"description":"Hit position, nil if not hit.","type":"Vector"},{"description":"Normal/direction vector, nil if not hit.","type":"Vector"},{"description":"Fraction of trace used, nil if not hit.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Origin/start position of the ray.","isOptional":false,"isVarArg":false,"name":"rayOrigin","type":"Vector"},{"default":"","description":"The direction of the ray.","isOptional":false,"isVarArg":false,"name":"rayDirection","type":"Vector"},{"default":"","description":"Any position of the plane.","isOptional":false,"isVarArg":false,"name":"planePosition","type":"Vector"},{"default":"","description":"The normal vector of the plane.","isOptional":false,"isVarArg":false,"name":"planeNormal","type":"Vector"}],"description":"Performs a [https://en.wikipedia.org/wiki/Line%E2%80%93plane_intersection ray-plane intersection] and returns the hit position or nil.","examples":[],"isConstructor":false,"name":"IntersectRayWithPlane","realm":"shared","returns":[{"description":"The position of intersection, nil if not hit.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Position to check.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Checks if a certain position in within the world bounds.","examples":[],"isConstructor":false,"name":"IsInWorld","realm":"server","returns":[{"description":"Whether the vector is in world.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name/Path of the model to check.","isOptional":false,"isVarArg":false,"name":"modelName","type":"string"}],"description":"Checks if the model is loaded in the game.","examples":[],"isConstructor":false,"name":"IsModelLoaded","realm":"shared","returns":[{"description":"Returns true if the model is loaded in the game; otherwise false.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The position to check the skybox visibility from.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Check whether the skybox is visibile from the point specified.\n\n{{Note|This will always return true in fullbright maps}}","examples":[],"isConstructor":false,"name":"IsSkyboxVisibleFromPoint","realm":"client","returns":[{"description":"Whether the skybox is visible from the position.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name/Path of the model to check.","isOptional":false,"isVarArg":false,"name":"modelName","type":"string"}],"description":"Checks if the specified model is valid.\n\nA model is considered invalid in following cases:\n* Starts with a space or '''maps'''\n* Doesn't start with '''models'''\n* Contains any of the following:\n** _gestures\n** _animations\n** _postures\n** _gst\n** _pst\n** _shd\n** _ss\n** _anm\n** .bsp\n** cs_fix\n* On server: If the model isn't precached, if the model file doesn't exist on the disk\n* If precache failed\n* Model is the error model","examples":[],"isConstructor":false,"name":"IsValidModel","realm":"shared","returns":[{"description":"Whether the model is valid or not. Returns false clientside if the model is not precached by the server.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"Number of the physics object to test","isOptional":false,"isVarArg":false,"name":"physobj","type":"number"}],"description":"Checks if given numbered physics object of given entity is valid or not. Most useful for ragdolls.","examples":[],"isConstructor":false,"name":"IsValidPhysicsObject","realm":"shared and menu","returns":[{"description":"true is valid, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name/Path of the model to check.","isOptional":false,"isVarArg":false,"name":"modelName","type":"string"}],"description":"Checks if the specified prop is valid.","examples":[],"isConstructor":false,"name":"IsValidProp","realm":"shared","returns":[{"description":"Returns true if the specified prop is valid; otherwise false.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name/Path of the ragdoll model to check.","isOptional":false,"isVarArg":false,"name":"ragdollName","type":"string"}],"description":"Checks if the specified model name points to a valid ragdoll.","examples":[],"isConstructor":false,"name":"IsValidRagdoll","realm":"shared","returns":[{"description":"Returns true if the specified model name points to a valid ragdoll; otherwise false.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The JSON string to convert.","isOptional":false,"isVarArg":false,"name":"json","type":"string"}],"description":"Converts a JSON string to a Lua table.\n\n{{Warning|This function converts keys to numbers whenever possible.}}\n{{Bug|Issue=3561|This will attempt cast the string keys \"inf\", \"nan\", \"true\", and \"false\" to their respective Lua values. This completely ignores nulls in arrays.}}","examples":[],"isConstructor":false,"name":"JSONToTable","realm":"shared and menu","returns":[{"description":"The table containing converted information. Returns nothing on failure.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The KeyValue string to convert.","isOptional":false,"isVarArg":false,"name":"keyValues","type":"string"},{"default":"false","description":"If set to true, will replace \\t, \\n, \\\" and \\\\ in the input text with their escaped variants","isOptional":true,"isVarArg":false,"name":"usesEscapeSequences","type":"boolean"},{"default":"false","description":"Whether we should preserve key case or not.","isOptional":true,"isVarArg":false,"name":"preserveKeyCase","type":"boolean"}],"description":"Converts a KeyValue string to a Lua table.\n\n{{Note|Table keys will not repeat, see {{LibraryFunction|util|KeyValuesToTablePreserveOrder}}.}}","examples":[{"code":"local ModelInfo = util.GetModelInfo(\"models/combine_gate_vehicle.mdl\" )\nPrintTable( util.KeyValuesToTable( ModelInfo.KeyValues ) )","description":"Example usage and output of this function. Note how there's only one \"solid\" key in the table despite the fact that input string contains multiple."}],"isConstructor":false,"name":"KeyValuesToTable","realm":"shared and menu","returns":[{"description":"The converted table","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The key value string","isOptional":false,"isVarArg":false,"name":"keyvals","type":"string"},{"default":"false","description":"If set to true, will replace \\t, \\n, \\\" and \\\\ in the input text with their escaped variants","isOptional":true,"isVarArg":false,"name":"usesEscapeSequences","type":"boolean"},{"default":"false","description":"Whether we should preserve key case or not.","isOptional":true,"isVarArg":false,"name":"preserveKeyCase","type":"boolean"}],"description":"Similar to {{LibraryFunction|util|KeyValuesToTable}} but it also preserves order of keys.","examples":[{"code":"local ModelInfo = util.GetModelInfo(\"models/combine_gate_vehicle.mdl\" )\nPrintTable( util.KeyValuesToTablePreserveOrder( ModelInfo.KeyValues ) )","description":"Example usage and output of this function. Note how there are multiple entries where they key is \"solid\", just like in the input string."}],"isConstructor":false,"name":"KeyValuesToTablePreserveOrder","realm":"shared and menu","returns":[{"description":"The output table","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The entity lpos is local to","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"Coordinates local to the ent","isOptional":false,"isVarArg":false,"name":"lpos","type":"Vector"},{"default":"","description":"The bonenumber of the ent lpos is local to","isOptional":false,"isVarArg":false,"name":"bonenum","type":"number"}],"description":"Returns a vector in world coordinates based on an entity and local coordinates","examples":[],"isConstructor":false,"name":"LocalToWorld","realm":"shared and menu","returns":[{"description":"wpos","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"ID to get the associated string from.","isOptional":false,"isVarArg":false,"name":"stringTableID","type":"number"}],"description":"Returns the networked string associated with the given ID from the string table.","examples":[],"isConstructor":false,"name":"NetworkIDToString","realm":"shared","returns":[{"description":"The networked string, or nil if it wasn't found.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"String to get the associated networked ID from.","isOptional":false,"isVarArg":false,"name":"networkString","type":"string"}],"description":"Returns the networked ID associated with the given string from the string table.","examples":[],"isConstructor":false,"name":"NetworkStringToID","realm":"shared","returns":[{"description":"The networked ID of the string, or 0 if it hasn't been networked with {{LibraryFunction|util|AddNetworkString}}.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The float to format","isOptional":false,"isVarArg":false,"name":"float","type":"number"}],"description":"Formats a float by stripping off extra 0's and .'s","examples":[],"isConstructor":false,"name":"NiceFloat","realm":"shared and menu","returns":[{"description":"Formatted float","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the tracer effect.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The start position of the tracer.","isOptional":false,"isVarArg":false,"name":"startPos","type":"Vector"},{"default":"","description":"The end position of the tracer.","isOptional":false,"isVarArg":false,"name":"endPos","type":"Vector"},{"default":"","description":"Play the hit miss(whiz) sound.","isOptional":false,"isVarArg":false,"name":"doWhiz","type":"boolean"}],"description":"Creates a tracer effect with the given parameters.","examples":[],"isConstructor":false,"name":"ParticleTracer","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the tracer effect.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The start position of the tracer.","isOptional":false,"isVarArg":false,"name":"startPos","type":"Vector"},{"default":"","description":"The end position of the tracer.","isOptional":false,"isVarArg":false,"name":"endPos","type":"Vector"},{"default":"","description":"Play the hit miss(whiz) sound.","isOptional":false,"isVarArg":false,"name":"doWhiz","type":"boolean"},{"default":"","description":"Entity index of the emitting entity.","isOptional":false,"isVarArg":false,"name":"entityIndex","type":"number"},{"default":"","description":"Attachment index to be used as origin.","isOptional":false,"isVarArg":false,"name":"attachmentIndex","type":"number"}],"description":"Creates a tracer effect with the given parameters.","examples":[],"isConstructor":false,"name":"ParticleTracerEx","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The center of the visibility test.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"},{"default":"","description":"The radius of the sphere to check for visibility.","isOptional":false,"isVarArg":false,"name":"radius","type":"number"},{"default":"","description":"The PixVis handle created with {{LibraryFunction|util|GetPixelVisibleHandle}}.\n\n{{Warning|Don't use the same handle twice per tick or it will give unpredictable results.}}","isOptional":false,"isVarArg":false,"name":"PixVis","type":"pixelvis_handle_t"}],"description":"Returns the visibility of a sphere in the world.","examples":[{"code":"local PixVis\nfunction SetupPixVis()\n\tPixVis = util.GetPixelVisibleHandle()\nend\nhook.Add(\"Initialize\", \"SetupPixVis\", SetupPixVis)\n \nfunction TestPixelVisibility()\n\tlocal visible = util.PixelVisible(Vector(0, 0, 0), 16, PixVis)\n \n\tif visible && visible != 0 then\n\t\tdraw.RoundedBox( 10, 0, 0, 100, 100, Color(0, 0, 0, 200 * visible) )\n\tend\nend\nhook.Add(\"HUDPaint\", \"TestPixelVisibility\", TestPixelVisibility)","description":"Draws a box when the center of the map is visible on your screen."}],"isConstructor":false,"name":"PixelVisible","realm":"client","returns":[{"description":"Visibility, ranges from 0-1. 0 when none of the area is visible, 1 when all of it is visible.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Position to get the contents sample from.","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Returns the contents of the position specified.","examples":[{"code":"local tr = Entity( 1 ):GetEyeTrace()\nprint( bit.band( util.PointContents( tr.HitPos ), CONTENTS_WATER ) == CONTENTS_WATER )","description":"Check if the trace position is underwater."}],"isConstructor":false,"name":"PointContents","realm":"shared","returns":[{"description":"Contents bitflag, see {{Enum|CONTENTS}}","type":"CONTENTS"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The model to precache.","isOptional":false,"isVarArg":false,"name":"modelName","type":"string"}],"description":"Precaches a model for later use. Model is cached after being loaded once.","examples":[],"isConstructor":false,"name":"PrecacheModel","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The sound to precache.","isOptional":false,"isVarArg":false,"name":"soundName","type":"string"}],"description":"Precaches a sound for later use. Sound is cached after being loaded once.","examples":[],"isConstructor":false,"name":"PrecacheSound","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The origin of the trace.","isOptional":false,"isVarArg":false,"name":"origin","type":"Vector"},{"default":"","description":"The end point of the trace, relative to the start.\nThis is the direction of the trace times the distance of the trace.","isOptional":false,"isVarArg":false,"name":"endpos","type":"Vector"},{"default":"nil","description":"Entity which should be ignored by the trace. Can also be a table of entities or a function - see {{Struct|Trace}}.","isOptional":true,"isVarArg":false,"name":"filter","type":"Entity"}],"description":"Performs a trace with the given origin, direction and filter.","examples":[],"isConstructor":false,"name":"QuickTrace","realm":"shared and menu","returns":[{"description":"Trace result. See {{Struct|TraceResult}}.","type":"TraceResult"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The file to get the absolute path of.","isOptional":false,"isVarArg":false,"name":"file","type":"string"}],"description":"Returns the absolute system path the file relative to /garrysmod/.","examples":[],"isConstructor":false,"name":"RelativePathToFull","realm":"shared","returns":[{"description":"absolutePath","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"SteamID of the player","isOptional":false,"isVarArg":false,"name":"steamID","type":"string"},{"default":"","description":"Variable name to remove","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Removes PData of offline player using his SteamID {{Warning|This function internally uses {{ClassFunction|Player|UniqueID}}, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.}}","examples":[],"isConstructor":false,"name":"RemovePData","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The origin of the effect","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"The strength of the effect","isOptional":false,"isVarArg":false,"name":"amplitude","type":"number"},{"default":"","description":"The frequency of the effect in hz","isOptional":false,"isVarArg":false,"name":"frequency","type":"number"},{"default":"","description":"The duration of the effect in seconds","isOptional":false,"isVarArg":false,"name":"duration","type":"number"},{"default":"","description":"The range from the origin within which views will be affected, in Hammer Units","isOptional":false,"isVarArg":false,"name":"radius","type":"number"}],"description":"Makes the screen shake","examples":[{"code":"util.ScreenShake( Vector(0,0,0), 5, 5, 10, 5000 )","description":"This will shake the screen, from the position 0 0 0 and 5000 units away, with 5 amp, frequency 5, for 10 seconds."}],"isConstructor":false,"name":"ScreenShake","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"SteamID of the player","isOptional":false,"isVarArg":false,"name":"steamID","type":"string"},{"default":"","description":"Variable name to store the value in","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"The value to store","isOptional":false,"isVarArg":false,"name":"value","type":"any"}],"description":"Sets PData for offline player using his SteamID {{Warning|This function internally uses {{ClassFunction|Player|UniqueID}}, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.}}","examples":[],"isConstructor":false,"name":"SetPData","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The seed for the random value","isOptional":false,"isVarArg":false,"name":"uniqueName","type":"string"},{"default":"","description":"The minimum value of the random range","isOptional":false,"isVarArg":false,"name":"min","type":"number"},{"default":"","description":"The maximum value of the random range","isOptional":false,"isVarArg":false,"name":"max","type":"number"},{"default":"0","description":"The additional seed","isOptional":true,"isVarArg":false,"name":"additionalSeed","type":"number"}],"description":"Generates a random float value that should be the same on client and server.\n\n{{Note|This function is best used in a [[:Category:Predicted_Hooks|Predicted Hook]]}}","examples":[{"code":"print( util.SharedRandom( \"23\", 0, 100 ) )\nprint( util.SharedRandom( \"23\", 0, 100 ) )\nprint( util.SharedRandom( \"23\", 0, 100, 0 ) )\nprint( util.SharedRandom( \"23\", 0, 100, 1337 ) )\nprint( util.SharedRandom( \"lol\", 0, 100, 1337 ) )","description":"Example usage of the function. Generates some random values."}],"isConstructor":false,"name":"SharedRandom","realm":"shared","returns":[{"description":"The random float value","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity to attach trail to","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"Attachment ID of the entitiys model to attach trail to. If you are not sure, set this to 0","isOptional":false,"isVarArg":false,"name":"attachmentID","type":"number"},{"default":"","description":"Color of the trail, use {{GlobalFunction|Color}}","isOptional":false,"isVarArg":false,"name":"color","type":"table"},{"default":"","description":"Should the trail be additive or not","isOptional":false,"isVarArg":false,"name":"additive","type":"boolean"},{"default":"","description":"Start width of the trail","isOptional":false,"isVarArg":false,"name":"startWidth","type":"number"},{"default":"","description":"End width of the trail","isOptional":false,"isVarArg":false,"name":"endWidth","type":"number"},{"default":"","description":"How long it takes to transition from startWidth to endWidth","isOptional":false,"isVarArg":false,"name":"lifetime","type":"number"},{"default":"","description":"The resolution of trails texture. A good value can be calculated using this formula: 1 / ( startWidth + endWidth ) * 0.5","isOptional":false,"isVarArg":false,"name":"textureRes","type":"number"},{"default":"","description":"Path to the texture to use as a trail.","isOptional":false,"isVarArg":false,"name":"texture","type":"string"}],"description":"Adds a trail to the specified entity.","examples":[{"code":"concommand.Add( \"givetrail\", function( ply )\n\tlocal trail = util.SpriteTrail( ply, 0, Color( 255, 0, 0 ), false, 15, 1, 4, 1 / ( 15 + 1 ) * 0.5, \"trails/plasma\" )\n\tprint( trail )\nend )","description":"A console command that gives the player a red trail."}],"isConstructor":false,"name":"SpriteTrail","realm":"server","returns":[{"description":"Entity of created trail ([https://developer.valvesoftware.com/wiki/Env_spritetrail env_spritetrail])","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns a new {{Type|Stack}} object","examples":[],"isConstructor":false,"name":"Stack","realm":"shared and menu","returns":[{"description":"A brand new stack object","type":"Stack"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The 64 bit Steam ID","isOptional":false,"isVarArg":false,"name":"id","type":"string"}],"description":"Given a 64bit SteamID will return a STEAM_0: style Steam ID","examples":[],"isConstructor":false,"name":"SteamIDFrom64","realm":"shared","returns":[{"description":"STEAM_0 style Steam ID","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The STEAM_0 style id","isOptional":false,"isVarArg":false,"name":"id","type":"string"}],"description":"Given a STEAM_0 style Steam ID will return a 64bit Steam ID","examples":[],"isConstructor":false,"name":"SteamIDTo64","realm":"shared","returns":[{"description":"64bit Steam ID","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The string to convert","isOptional":false,"isVarArg":false,"name":"str","type":"string"},{"default":"","description":"The type to attempt to convert the string to. This can be vector, angle, float, int, bool, or string (case insensitive).","isOptional":false,"isVarArg":false,"name":"typename","type":"string"}],"description":"Converts a string to the specified type.\n\nThis can be useful when dealing with ConVars.","examples":[{"code":"local vec = util.StringToType(\"5 6 75\", \"Vector\")","description":"Creates a vector from a string representation."}],"isConstructor":false,"name":"StringToType","realm":"shared and menu","returns":[{"description":"The result of the conversion, or nil if a bad type is specified.","type":"any"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Table to convert.","isOptional":false,"isVarArg":false,"name":"table","type":"table"},{"default":"false","description":"Format and indent the JSON.","isOptional":true,"isVarArg":false,"name":"prettyPrint","type":"boolean"}],"description":"Converts a table to a JSON string.\n{{Warning|All integers will be converted to decimals (5 -> 5.0).}}\n{{Warning|All keys are strings in the JSON format, so all keys will be converted to strings!}}\n{{Bug|Issue=3561|This will produce invalid JSON if the provided table contains nan or inf values.}}","examples":[{"code":"local Players = {}\nfor k, v in pairs(ents.GetAll()) do\n\tif v:IsPlayer() then -- Is a player\n\t\tPlayers[k] = { pos = v:GetPos(), ang = v:GetAngles() }\n\tend\nend\n\t\nlocal tab = util.TableToJSON( Players ) -- Convert the player table to JSON\nfile.CreateDir( \"jsontest\" ) -- Create the directory\nfile.Write( \"jsontest/playerstuff.txt\", tab) -- Write to .txt","description":"Writes the positions and angles of every player to a txt document called playerstuff.txt"}],"isConstructor":false,"name":"TableToJSON","realm":"shared and menu","returns":[{"description":"JSON","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The table to convert.","isOptional":false,"isVarArg":false,"name":"table","type":"table"}],"description":"Converts the given table into a key value string.","examples":[],"isConstructor":false,"name":"TableToKeyValues","realm":"shared and menu","returns":[{"description":"KeyValueString","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"0","description":"How long you want the timer to be.","isOptional":true,"isVarArg":false,"name":"startdelay","type":"number"}],"description":"Creates a timer object.","examples":[],"isConstructor":false,"name":"Timer","realm":"shared and menu","returns":[{"description":"A timer object. It has next methods:\n;Reset() - Resets the timer to nothing\n;Start( time ) - Starts the timer, call with end time\n;Started() - Returns true if the timer has been started\n;Elapsed() - Returns true if the time has elapsed","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the time since this function has been last called","examples":[],"isConstructor":false,"name":"TimerCycle","realm":"shared and menu","returns":[{"description":"Time since this function has been last called in ms","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"A string or a number to convert.","isOptional":false,"isVarArg":false,"name":"input","type":"any"}],"description":"{{Deprecated|You should use {{GlobalFunction|tobool}} instead.}}\n\nConverts string or a number to a bool, if possible. Alias of {{GlobalFunction|tobool}}.","examples":[],"isConstructor":false,"name":"tobool","realm":"shared and menu","returns":[{"description":"False if the input is equal to the string or boolean \"false\", if the input is equal to the string or number \"0\", or if the input is nil. Returns true otherwise.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Trace data. See {{Struct|Trace}}","isOptional":false,"isVarArg":false,"name":"tracedata","type":"Trace"},{"default":"","description":"The entity to use","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Runs a trace using the entity's collisionmodel between two points. This does not take the entity's angles into account and will trace its unrotated collisionmodel.\n\n{{Note|Clientside entities will not be hit by traces.}}","examples":[{"code":"local trace = { start = ent:GetPos(), endpos = ent:GetPos(), filter = ent }\nlocal tr = util.TraceEntity( trace, ent ) \nif ( tr.Hit ) then\n -- Do stuff\nend","description":"From sandbox/gamemode/prop_tools.lua, this checks if there are any entities inside our entity"}],"isConstructor":false,"name":"TraceEntity","realm":"shared","returns":[{"description":"Trace result. See {{Struct|TraceResult}}","type":"TraceResult"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The first entity to trace from","isOptional":false,"isVarArg":false,"name":"ent1","type":"Entity"},{"default":"","description":"The second entity to trace to","isOptional":false,"isVarArg":false,"name":"ent2","type":"Entity"}],"description":"{{Deprecated|This function is broken and returns the same values all the time}}\nTraces from one entity to another.","examples":[],"isConstructor":false,"name":"TraceEntityHull","realm":"shared","returns":[{"description":"Trace result. See {{Struct|TraceResult}}","type":"TraceResult"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The trace data to use. See {{Struct|HullTrace}}","isOptional":false,"isVarArg":false,"name":"TraceData","type":"HullTrace"}],"description":"Performs an AABB hull (axis-aligned bounding box, aka not rotated) trace with the given trace data.\n\n{{Note|Clientside entities will not be hit by traces.}}\n\n{{Note|This function may not always give desired results clientside due to certain physics mechanisms not existing on the client. Use it serverside for accurate results.}}","examples":[{"code":"local tr = util.TraceHull( {\n\tstart = self.Owner:GetShootPos(),\n\tendpos = self.Owner:GetShootPos() + ( self.Owner:GetAimVector() * 100 ),\n\tfilter = self.Owner,\n\tmins = Vector( -10, -10, -10 ),\n\tmaxs = Vector( 10, 10, 10 ),\n\tmask = MASK_SHOT_HULL\n} )","description":"From a SWEP:PrimaryAttack()"},{"code":"function ENT:Draw()\n\n\tself:DrawModel()\n\t\n\tlocal ent = self\n\t\n\tlocal mins = ent:OBBMins()\n\tlocal maxs = ent:OBBMaxs()\n\tlocal startpos = ent:GetPos()\n\tlocal dir = ent:GetUp()\n\tlocal len = 128\n\n\tlocal tr = util.TraceHull( {\n\t\tstart = startpos,\n\t\tendpos = startpos + dir * len,\n\t\tmaxs = maxs,\n\t\tmins = mins,\n\t\tfilter = ent\n\t} )\n\t\n\trender.DrawLine( tr.HitPos, startpos + dir * len, color_white, true )\n\trender.DrawLine( startpos, tr.HitPos, Color( 0, 0, 255 ), true )\n\t\n\tlocal clr = color_white\n\tif ( tr.Hit ) then\n\t\tclr = Color( 255, 0, 0 )\n\tend\n\n\trender.DrawWireframeBox( startpos, Angle( 0, 0, 0 ), mins, maxs, Color( 255, 255, 255 ), true )\n\trender.DrawWireframeBox( tr.HitPos, Angle( 0, 0, 0 ), mins, maxs, clr, true )\n\nend","description":"Visual representation of a Hull Trace."},{"code":"local pos = Entity(1):GetPos() -- Choose your position.\n\nlocal tr = {\n\tstart = pos,\n\tendpos = pos,\n\tmins = Vector( -16, -16, 0 ),\n\tmaxs = Vector( 16, 16, 71 )\n}\n\nlocal hullTrace = util.TraceHull( tr )\nif ( hullTrace.Hit ) then\n    -- Find a new spawnpoint\nend","description":"Trace a player sized hull to detect if a player can spawn here without getting stuck inside anything."}],"isConstructor":false,"name":"TraceHull","realm":"shared","returns":[{"description":"Trace result. See {{Struct|TraceResult}}","type":"TraceResult"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The trace data to use. See {{Struct|Trace}}","isOptional":false,"isVarArg":false,"name":"TraceData","type":"Trace"}],"description":"Performs a trace with the given trace data.\n\n{{Note|Clientside entities will not be hit by traces.}}","examples":[{"code":"local tr = util.TraceLine( {\n\tstart = LocalPlayer():EyePos(),\n\tendpos = LocalPlayer():EyePos() + EyeAngles():Forward() * 10000,\n\tfilter = function( ent ) if ( ent:GetClass() == \"prop_physics\" ) then return true end end\n} )\n\nprint( tr.HitPos, tr.Entity )","description":"Using a function callback as filter."}],"isConstructor":false,"name":"TraceLine","realm":"shared","returns":[{"description":"Trace result. See {{Struct|TraceResult}}.\n\nCan return nil if {{LibraryFunction|game|GetWorld}} or its [[Entity/GetPhysicsObject|physics object]] is invalid. This will be the case for any traces done before {{HookFunction|GM|InitPostEntity}} is called.","type":"TraceResult"}]},{"accessModifier":"public","arguments":[{"default":"","description":"What to convert","isOptional":false,"isVarArg":false,"name":"input","type":"any"}],"description":"Converts a type to a (nice, but still parsable) string","examples":[],"isConstructor":false,"name":"TypeToString","realm":"shared and menu","returns":[{"description":"Converted string","type":"string"}]}],"isHook":false,"isPureAbstract":false,"name":"util"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Used in sandbox tools","examples":[],"extends":"ContextBase","functions":[],"isHook":false,"isPureAbstract":true,"name":"PropSelect"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Internal}}Currently broken?","examples":[],"extends":"","functions":[],"isHook":false,"isPureAbstract":true,"name":"RadioButton"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The vgui library allows you to script and create your own panels using Valve's GUI system.<br />For an alphabetically ordered list of VGUI panels, see [[VGUI Element List]].","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Classname of the panel to create. Valid classnames are listed at: [[VGUI Element List]].","isOptional":false,"isVarArg":false,"name":"classname","type":"string"},{"default":"nil","description":"Parent of the created panel.","isOptional":true,"isVarArg":false,"name":"parent","type":"Panel"},{"default":"nil","description":"Name of the created panel.","isOptional":true,"isVarArg":false,"name":"name","type":"string"}],"description":"Creates a panel by the specified classname.","examples":[],"isConstructor":false,"name":"Create","realm":"client and menu","returns":[{"description":"panel","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Your PANEL table","isOptional":false,"isVarArg":false,"name":"metatable","type":"table"},{"default":"nil","description":"Which panel to parent the newly created panel to","isOptional":true,"isVarArg":false,"name":"parent","type":"Panel"},{"default":"nil","description":"Name of your panel","isOptional":true,"isVarArg":false,"name":"name","type":"string"}],"description":"Creates a panel from table.","examples":[],"isConstructor":false,"name":"CreateFromTable","realm":"client and menu","returns":[{"description":"Created panel","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Class of the panel to create","isOptional":false,"isVarArg":false,"name":"classRef","type":"string"},{"default":"nil","description":"If specified, parents created panel to given one","isOptional":true,"isVarArg":false,"name":"parent","type":"Panel"},{"default":"nil","description":"Name of the created panel","isOptional":true,"isVarArg":false,"name":"name","type":"string"}],"description":"{{Internal}} Creates a engine panel.","examples":[],"isConstructor":false,"name":"CreateX","realm":"client and menu","returns":[{"description":"Created panel","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the cursor is currently active and visible.","examples":[],"isConstructor":false,"name":"CursorVisible","realm":"client and menu","returns":[{"description":"isCursorVisible","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The parent panel to check the currently focused one against. This doesn't need to be a direct parent (focused panel can be a child of a child and so on).","isOptional":false,"isVarArg":false,"name":"parent","type":"Panel"}],"description":"Returns whether the currently focused panel is a child of the given one.","examples":[],"isConstructor":false,"name":"FocusedHasParent","realm":"client and menu","returns":[{"description":"Whether or not the focused panel is a child of the passed one.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the panel","isOptional":false,"isVarArg":false,"name":"Panelname","type":"string"}],"description":"Gets the method table of this panel. Does not return parent methods!","examples":[],"isConstructor":false,"name":"GetControlTable","realm":"client and menu","returns":[{"description":"methods","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Returns the panel the cursor is hovering above.\n\n{{Warning|This returns a cached value that is only updated after rendering and ''before'' the next VGUI Think/Layout pass.\n\nie. it lags one frame behind panel layout and is completely unhelpful for {{HookFunction|PANEL|Paint}} if your panels are moving around under the mouse a lot every frame.}}","examples":[],"isConstructor":false,"name":"GetHoveredPanel","realm":"client and menu","returns":[{"description":"The panel that the user is currently hovering over with their cursor.","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns the panel which is currently receiving keyboard input.","examples":[],"isConstructor":false,"name":"GetKeyboardFocus","realm":"client and menu","returns":[{"description":"The panel with keyboard focus","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns the global world panel which is the parent to all others.\n\nSee also {{GlobalFunction|GetHUDPanel}}.","examples":[],"isConstructor":false,"name":"GetWorldPanel","realm":"client and menu","returns":[{"description":"The world panel","type":"Panel"}]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the cursor is hovering the world panel.","examples":[],"isConstructor":false,"name":"IsHoveringWorld","realm":"client and menu","returns":[{"description":"isHoveringWorld","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Classname of the panel to create.","isOptional":false,"isVarArg":false,"name":"classname","type":"string"},{"default":"","description":"The table containg the panel information.","isOptional":false,"isVarArg":false,"name":"panelTable","type":"table"},{"default":"","description":"Name of the base of the panel.","isOptional":false,"isVarArg":false,"name":"baseName","type":"string"}],"description":"Registers a panel for later creation.","examples":[],"isConstructor":false,"name":"Register","realm":"client and menu","returns":[{"description":"panel","type":"Panel"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The file to register","isOptional":false,"isVarArg":false,"name":"file","type":"string"}],"description":"Registers a new VGUI panel from a file.","examples":[],"isConstructor":false,"name":"RegisterFile","realm":"client and menu","returns":[{"description":"A table containing info about the panel. Can be supplied to {{LibraryFunction|vgui|CreateFromTable}}","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The PANEL table","isOptional":false,"isVarArg":false,"name":"panel","type":"table"},{"default":"Panel","description":"A base for the panel","isOptional":true,"isVarArg":false,"name":"base","type":"string"}],"description":"Registers a table to use as a panel. All this function does is assigns Base key to your table and returns the table.","examples":[],"isConstructor":false,"name":"RegisterTable","realm":"client and menu","returns":[{"description":"The PANEL table","type":"table"}]}],"isHook":false,"isPureAbstract":false,"name":"vgui"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The video library.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The video config. See {{Struct|VideoData}}.","isOptional":false,"isVarArg":false,"name":"config","type":"VideoData"}],"description":"Attempts to create an {{Type|IVideoWriter}}.","examples":[{"code":"local config = {\n\tcontainer = \"webm\",\n\tvideo = \"vp8\",\n\taudio = \"vorbis\",\n\tquality = 50,\n\tbitrate = 200,\n\tfps = 30,\n\tlockfps = 30,\n\tname = \"Test\",\n\twidth = 1280,\n\theight = 720\n}\nlocal iVideoWriter = video.Record( config )\niVideoWriter:SetRecordSound( true )\n\nlocal function Record()\n\tiVideoWriter:AddFrame( FrameTime(), true )\nend\n\nfunction StartRecording()\n\thook.Add( \"DrawOverlay\", \"Record\", Record )\nend\n\nfunction StopRecording()\n\thook.Remove( \"DrawOverlay\", \"Record\" )\n\tiVideoWriter:Finish()\nend","description":"How to create a basic IVideoWriter, and how to use it"}],"isConstructor":false,"name":"Record","realm":"client and menu","returns":[{"description":"The video object (returns '''false''' if there is an error)","type":"IVideoWriter"},{"description":"The error string, if there is an error","type":"string"}]}],"isHook":false,"isPureAbstract":false,"name":"video"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A very versatile text display element that's used to power the default chat and console.\n\nRich Text panels allows multicolored, highlight-able, and interactive text using individual text segment markup (segments are defined by the {{ClassFunction|Panel|AppendText}} method).","examples":[{"code":"-- Window frame for containing text\nlocal frame = vgui.Create(\"DFrame\")\nframe:SetSize(200, 150)\nframe:Center()\nframe:MakePopup()\n\n-- Rich Text panel\nlocal richtext = vgui.Create( \"RichText\", frame )\nrichtext:Dock( FILL )\n\n-- Text segment #1 (grayish color)\nrichtext:InsertColorChange(192, 192, 192, 255)\nrichtext:AppendText(\"This \\nRichText \\nis \\n\")\n\n-- Text segment #2 (light yellow)\nrichtext:InsertColorChange(255, 255, 224, 255)\nrichtext:AppendText(\"AWESOME\\n\\n\")\n\n-- Text segment #3 (red ESRB notice localized string)\nrichtext:InsertColorChange(255, 64, 64, 255)\nrichtext:AppendText(\"#ServerBrowser_ESRBNotice\")","description":"Creates a Rich Text frame with 3 text segments."}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The text to append (add on).","isOptional":false,"isVarArg":false,"name":"txt","type":"string"}],"description":"Appends text to a {{Type|RichText}} element. This does not automatically add a new line.\n\n[[Category:RichText]]","examples":[],"isConstructor":false,"name":"AppendText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the number of lines in a {{Type|RichText}}. You must wait a couple frames before calling this after using {{ClassFunction|Panel|AppendText}} or {{ClassFunction|Panel|SetText}}, otherwise it will return the number of text lines before the text change.\n\n{{Note|Even though this function can be called on any panel, it will only work with {{Type|RichText}}}}\n\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 224)\nTextFrame:Center()\nTextFrame:SetTitle(\"Generic Frame\")\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Throw some text in the panel\nrichtext:SetText(\"This is a block of text demonstrating how line wrapping and panel size relates to the number of lines shown inside of a RichText panel.\")\n\n-- Keep track of PerformLayout calls\nrichtext.layoutCount = 0\n\n-- Custom function for this example\nfunction richtext:NumLinesExample()\n\tprint(\"PerformLayout called \"..self.layoutCount..\" times: \"..richtext:GetNumLines()..\" line(s) returned\")\t\nend\n\n-- Print # of lines before any layouts\nrichtext:NumLinesExample()\n\n-- Render update\nfunction richtext:PerformLayout()\n\n\tself.layoutCount = self.layoutCount + 1\n\tself:NumLinesExample()\t-- Print current # of lines\n\nend","description":"Creates a rich text panel with a block of text and prints out the number of text lines before and after ''PerformLayout'' is called."}],"isConstructor":false,"name":"GetNumLines","realm":"client","returns":[{"description":"The number of lines.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Causes a {{Type|RichText}} element to scroll to the bottom of its text.\n\n[[Category:RichText]]","examples":[],"isConstructor":false,"name":"GotoTextEnd","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Causes a {{Type|RichText}} element to scroll to the top of its text.\n\n{{Bug|Issue=2239|This does not work on the same frame as {{ClassFunction|Panel|SetText}}.}}\n\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 200)\nTextFrame:Center()\nTextFrame:SetTitle(\"#ServerBrowser_ServerWarningTitle\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Yellow colored localized text about player capacity\nrichtext:InsertColorChange(255, 255, 192, 255)\nrichtext:AppendText(\"#ServerBrowser_ServerWarning_MaxPlayers\")\n\n-- Create a button that moves the text back to the start\nlocal topbutton = vgui.Create(\"DButton\", richtext)\ntopbutton:SetSize(60, 20)\ntopbutton:SetPos(160, 146)\ntopbutton:SetText(\"Back to Top\")\n\n-- When clicked, go to the start of the text\ntopbutton.DoClick = function() richtext:GotoTextStart()\tend\n\n-- Apply background color and font\nfunction richtext:PerformLayout()\n\t\n\tself:SetFontInternal(\"Trebuchet18\")\n\tself:SetBGColor(Color(64, 64, 84))\n\t\nend","description":"Creates a RichText panel with a \"Back to Top\" button which scrolls the text to the start."}],"isConstructor":false,"name":"GotoTextStart","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Marks the end of a clickable text segment in a {{Type|RichText}} element, started with {{ClassFunction|Panel|InsertClickableTextStart}}.\n\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"RichText\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- First segment\nrichtext:InsertColorChange(255, 255, 255, 255)\nrichtext:AppendText(\"This is a Rich Text panel — a panel used in Source MP's default chat box and developer console.\\n\\nSee the \")\n\n-- Second segment\nrichtext:InsertColorChange(192, 192, 255, 255)\nrichtext:InsertClickableTextStart(\"OpenWiki\")\t-- Make incoming text fire the \"OpenWiki\" value when clicked\nrichtext:AppendText(\"Garry's Mod Wiki\")\nrichtext:InsertClickableTextEnd()\t-- End clickable text here\n\n-- Third segment\nrichtext:InsertColorChange(255, 255, 255, 255)\nrichtext:AppendText(\" for information on how to use a Rich Text panel.\")\n\n-- Background color\nfunction richtext:PerformLayout() self:SetBGColor(Color(32, 32, 46)) end\n\n-- Handle any commands we get from the panel\nfunction richtext:ActionSignal(signalName, signalValue)\n\n\t-- Some clickable text was clicked\n\tif(signalName == \"TextClicked\") then\n\t\n\t\t-- Open the wiki\n\t\tif(signalValue == \"OpenWiki\") then\n\t\t\n\t\t\t<nowiki>gui.OpenURL(\"http://wiki.garrysmod.com/page/Category:RichText\")</nowiki>\n\t\t\n\t\tend\n\t\n\tend\n\nend","description":"Creates a panel with some information on RichText panels along with a click-able link to the {{Type|RichText}} page."}],"isConstructor":false,"name":"InsertClickableTextEnd","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text passed as the action signal's value.","isOptional":false,"isVarArg":false,"name":"signalValue","type":"string"}],"description":"Starts the insertion of clickable text for a {{Type|RichText}} element. Any text appended with {{ClassFunction|Panel|AppendText}} between this call and {{ClassFunction|Panel|InsertClickableTextEnd}} will become clickable text.\n\nThe hook {{HookFunction|PANEL|ActionSignal}} is called when the text is clicked, with \"TextClicked\" as the signal name and ''signalValue'' as the signal value.\n\n{{Note|The clickable text is a separate Derma panel which will not inherit the current font from the ''RichText''.}}\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"RichText\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- First segment\nrichtext:InsertColorChange(255, 255, 255, 255)\nrichtext:AppendText(\"This is a Rich Text panel — a panel used in Source MP's default chat box and developer console.\\n\\nSee the \")\n\n-- Second segment\nrichtext:InsertColorChange(192, 192, 255, 255)\nrichtext:InsertClickableTextStart(\"OpenWiki\")\t-- Make incoming text fire the \"OpenWiki\" value when clicked\nrichtext:AppendText(\"Garry's Mod Wiki\")\nrichtext:InsertClickableTextEnd()\t-- End clickable text here\n\n-- Third segment\nrichtext:InsertColorChange(255, 255, 255, 255)\nrichtext:AppendText(\" for information on how to use a Rich Text panel.\")\n\n-- Background color\nfunction richtext:PerformLayout() self:SetBGColor(Color(32, 32, 46)) end\n\n-- Handle any commands we get from the panel\nfunction richtext:ActionSignal(signalName, signalValue)\n\n\t-- Some clickable text was clicked\n\tif (signalName == \"TextClicked\") then\n\t\n\t\t-- Open the wiki\n\t\tif (signalValue == \"OpenWiki\") then\n\t\t\n\t\t\t<nowiki>gui.OpenURL(\"http://wiki.garrysmod.com/page/Category:RichText\")</nowiki>\n\t\t\n\t\tend\n\t\n\tend\n\nend","description":"Creates a panel with some information on Rich Text panels along with a click-able link to the {{Type|RichText}} page."}],"isConstructor":false,"name":"InsertClickableTextStart","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The red value (0 - 255).","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"The green value (0 - 255).","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"The blue value (0 - 255).","isOptional":false,"isVarArg":false,"name":"b","type":"number"},{"default":"","description":"The alpha value (0 - 255).","isOptional":false,"isVarArg":false,"name":"a","type":"number"}],"description":"Inserts a color change in a {{Type|RichText}} element, which affects the color of all text added with {{ClassFunction|Panel|AppendText}} until another color change is applied.\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 200)\nTextFrame:Center()\nTextFrame:SetTitle(\"Colored text\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\nrichtext:SetVerticalScrollbarEnabled(false)\n\n-- Text blocks\nrichtext:InsertColorChange(255, 255, 192, 255)\nrichtext:AppendText(\"This is an example of \")\n\nrichtext:InsertColorChange(0, 255, 0, 255)\nrichtext:AppendText(\"color coding \")\n\nrichtext:InsertColorChange(255, 255, 192, 255)\nrichtext:AppendText(\"different segments of text throughout a \")\n\nrichtext:InsertColorChange(255, 200, 0, 255)\nrichtext:AppendText(\"Rich Text panel.\\n\\n\")\n\nrichtext:InsertColorChange(64, 0, 255, 255)\nrichtext:AppendText(\"Here is another line of text shown in the color \")\n\nrichtext:InsertColorChange(128, 0, 255, 255)\nrichtext:AppendText(\"purple.\")\n\n-- When the panel is ready for layout, apply font and background color\nfunction richtext:PerformLayout()\n\t\n\tself:SetFontInternal(\"Trebuchet18\")\n\tself:SetBGColor(Color(0, 16, 32))\n\t\nend","description":"Creates a RichText panel with color coding on certain segments of text."},{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(300, 200)\nTextFrame:Center()\nTextFrame:SetTitle(\"Randomly Colored Words\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\nrichtext:SetVerticalScrollbarEnabled(false)\n\nlocal txt = \"Here's a fun example involving word by word text coloring. \"..\n\"Each word is separated by a space, colored, and appended to the Rich Text panel individually. \"..\n\"The colors are randomly generated shades of red, orange, yellow, and pink.\"\n\nlocal txt_tbl = string.Explode(\" \", txt, false)\n\nfor _, word in pairs(txt_tbl) do\n\n\trichtext:InsertColorChange(255, math.random(0, 255), math.random(0, 255), 255)\n\trichtext:AppendText(word..\" \")\n\nend\n\nfunction richtext:PerformLayout()\n\t\n\tself:SetFontInternal(\"GModNotify\")\n\tself:SetBGColor(Color(32, 16, 0))\n\t\nend","description":"Word by word coloring using {{LibraryFunction|string|Explode}} and random colors."}],"isConstructor":false,"name":"InsertColorChange","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The number of seconds the text remains visible.","isOptional":false,"isVarArg":false,"name":"sustain","type":"number"},{"default":"","description":"The number of seconds it takes the text to fade out.\n\nIf set '''lower''' than ''sustain'', the text will not begin fading out until (''sustain'' - ''length'') seconds have passed.\n\nIf set '''higher''' than ''sustain'', the text will begin fading out immediately at a fraction of the base alpha.\n\nIf set to '''-1''', the text doesn't fade out.","isOptional":false,"isVarArg":false,"name":"length","type":"number"}],"description":"Begins a text fade for a {{Type|RichText}} element where the last appended text segment is fully faded out after a specific amount of time, at a specific speed.\n\nThe alpha of the text at any given time is determined by the text's base alpha * ((''sustain'' - {{GlobalFunction|CurTime}}) / ''length'') where {{GlobalFunction|CurTime}} is added to ''sustain'' when this method is called.\n\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 200)\nTextFrame:Center()\nTextFrame:SetTitle(\"Fading Text\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Sample text\nrichtext:SetText(\"This is an example of a Rich Text panel using a fade-out with:\\n\\n6 seconds of sustain\\n\\n2 second fade-out length\")\n\t\n-- When the panel is ready for layout, begin the fade\nfunction richtext:PerformLayout()\n\t\n\tself:SetFontInternal(\"Trebuchet18\")\n\tself:SetBGColor(Color(64, 64, 92))\n\t\n\t-- Wait 6 seconds, then fade out in 2 seconds\n\tself:InsertFade(6, 2)\n\t\nend","description":"Creates a Rich Text panel that sustains visibility for 6 seconds with a 2 second long fade-out."},{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(350, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"Kleiner says:\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\t\n\n-- Red text\nrichtext:InsertColorChange(200, 60, 32, 255)\nrichtext:SetVerticalScrollbarEnabled(false)\n\t\nlocal words = {\"There's\", \"only\", \"one\", \"hedy...\"}\nlocal delay = 0\n\n-- Display each word in half second interval\nfor w, txt in pairs(words) do\n\n\tif(w == 1) then delay = 0.2\n\telse delay = (w-1)*0.45 end\n\n\ttimer.Simple(delay, function()\n\t\n\t\trichtext:AppendText(txt..\" \")\n\t\trichtext:InsertFade(2, 1)\t-- Sustain for 2 seconds while fading out after 1 second\n\t\t\n\t\trichtext:SetBGColor(Color(0, 0, 0))\n\t\trichtext:SetFontInternal(\"DermaLarge\")\n\t\n\tend)\n\nend\n\n-- Kleiner read along\nLocalPlayer():EmitSound(\"vo/k_lab2/kl_onehedy.wav\")","description":"Create a Rich Text panel where Dr. Kleiner reads a fading message in sync with text."}],"isConstructor":false,"name":"InsertFade","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to reset fades, false otherwise.","isOptional":false,"isVarArg":false,"name":"hold","type":"boolean"},{"default":"","description":"Any value equating to ''true'' will reset fades only on text segments that are completely faded out.","isOptional":false,"isVarArg":false,"name":"expiredOnly","type":"boolean"},{"default":"","description":"The new sustain value of each faded text segment. Set to -1 to keep the old sustain value.","isOptional":false,"isVarArg":false,"name":"newSustain","type":"number"}],"description":"Resets all text fades in a {{Type|RichText}} element made with {{ClassFunction|Panel|InsertFade}}.\n[[Category:RichText]]","examples":[{"code":"-- Window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"ResetAllFades\")\nTextFrame:MakePopup()\n\n-- Rich Text panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Append text and start fading a few frames after creation (won't work otherwise)\ntimer.Simple(0.05, function()\n\n\trichtext:SetBGColor(Color(32, 32, 32))\n\trichtext:SetFontInternal(\"GModNotify\")\n\n\trichtext:AppendText(\"This is \")\n\trichtext:InsertFade(5, 2)\n\t\n\trichtext:AppendText(\"a test...\")\n\trichtext:InsertFade(5, 1)\n\t\nend)\n\n-- 5 seconds after creation, reset all the fades\ntimer.Simple(5, function()\n\n\trichtext:ResetAllFades(true, false, -1)\n\nend)","description":"Creates a RichText panel where two text segments slowly fade out and get reset to full alpha 5 seconds after being created."}],"isConstructor":false,"name":"ResetAllFades","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the font.\n\nSee [[Default_Fonts|here]] for a list of existing fonts.\nAlternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font.","isOptional":false,"isVarArg":false,"name":"fontName","type":"string"}],"description":"Sets the font used to render this panel's text.\n\nTo retrieve the font used by a panel, call {{ClassFunction|Panel|GetFont}}.\n\n[[Category:Label]]\n[[Category:TextEntry]]\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"This is a font test\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Sample text\nrichtext:SetText(\"This is a sample of text using the chat box font.\")\n\n-- Ensure font and text color changes are applied\nfunction richtext:PerformLayout()\n\n\tself:SetFontInternal(\"ChatFont\")\n\tself:SetFGColor(Color(255, 255, 255))\n\t\nend","description":"Sets the font of a {{Type|RichText}} element to match the chat box font."}],"isConstructor":false,"name":"SetFontInternal","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text value to set.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.\n\n{{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}\n[[Category:Label]]\n[[Category:DLabel]]\n[[Category:TextEntry]]\n[[Category:RichText]]\n[[Category:DTree_Node]]","examples":[{"code":"-- Window frame for the RichText\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"#VAC_ConnectionRefusedTitle\") -- Results in \"Connection Refused - VAC\"\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Set the text to the message you get when VAC banned\nrichtext:SetText(\"#VAC_ConnectionRefusedDetail\")","description":"Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message."}],"isConstructor":false,"name":"SetText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Sets the height of a {{Type|RichText}} element to accommodate the text inside.\n\n{{Note|This function internally relies on {{ClassFunction|Panel|GetNumLines}}, so it should be called at least a couple frames after modifying the text using {{ClassFunction|Panel|AppendText}}}}\n\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 210)\nTextFrame:Center()\nTextFrame:SetTitle(\"No set height\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:SetPos(10, 30)\nrichtext:SetWidth(230)\n\n-- Block of text\nrichtext:AppendText(\"#ServerBrowser_ServerWarning_MaxPlayers\")\n\nfunction richtext:PerformLayout() self:SetBGColor(Color(0, 0, 0)) end\n\n-- Set to full height after 2 seconds\ntimer.Simple(2, function()\n\n\trichtext:SetToFullHeight()\n\t\n\tTextFrame:SetTitle(\"Full set height\")\n\t\nend)","description":"Creates a {{Type|RichText}} panel with no set height. The proper height is applied 2 seconds after being created in order to show the difference."}],"isConstructor":false,"name":"SetToFullHeight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"True to display the vertical text scroll bar, false to hide it.","isOptional":true,"isVarArg":false,"name":"display","type":"boolean"}],"description":"Sets the visibility of the vertical scrollbar.\n\nWorks for {{Type|RichText}} and {{Type|TextEntry}}.\n\n[[Category:RichText]]\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SetVerticalScrollbarEnabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text to append (add on).","isOptional":false,"isVarArg":false,"name":"txt","type":"string"}],"description":"Appends text to a {{Type|RichText}} element. This does not automatically add a new line.\n\n[[Category:RichText]]","examples":[],"isConstructor":false,"name":"AppendText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the number of lines in a {{Type|RichText}}. You must wait a couple frames before calling this after using {{ClassFunction|Panel|AppendText}} or {{ClassFunction|Panel|SetText}}, otherwise it will return the number of text lines before the text change.\n\n{{Note|Even though this function can be called on any panel, it will only work with {{Type|RichText}}}}\n\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 224)\nTextFrame:Center()\nTextFrame:SetTitle(\"Generic Frame\")\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Throw some text in the panel\nrichtext:SetText(\"This is a block of text demonstrating how line wrapping and panel size relates to the number of lines shown inside of a RichText panel.\")\n\n-- Keep track of PerformLayout calls\nrichtext.layoutCount = 0\n\n-- Custom function for this example\nfunction richtext:NumLinesExample()\n\tprint(\"PerformLayout called \"..self.layoutCount..\" times: \"..richtext:GetNumLines()..\" line(s) returned\")\t\nend\n\n-- Print # of lines before any layouts\nrichtext:NumLinesExample()\n\n-- Render update\nfunction richtext:PerformLayout()\n\n\tself.layoutCount = self.layoutCount + 1\n\tself:NumLinesExample()\t-- Print current # of lines\n\nend","description":"Creates a rich text panel with a block of text and prints out the number of text lines before and after ''PerformLayout'' is called."}],"isConstructor":false,"name":"GetNumLines","realm":"client","returns":[{"description":"The number of lines.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Causes a {{Type|RichText}} element to scroll to the bottom of its text.\n\n[[Category:RichText]]","examples":[],"isConstructor":false,"name":"GotoTextEnd","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Causes a {{Type|RichText}} element to scroll to the top of its text.\n\n{{Bug|Issue=2239|This does not work on the same frame as {{ClassFunction|Panel|SetText}}.}}\n\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 200)\nTextFrame:Center()\nTextFrame:SetTitle(\"#ServerBrowser_ServerWarningTitle\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Yellow colored localized text about player capacity\nrichtext:InsertColorChange(255, 255, 192, 255)\nrichtext:AppendText(\"#ServerBrowser_ServerWarning_MaxPlayers\")\n\n-- Create a button that moves the text back to the start\nlocal topbutton = vgui.Create(\"DButton\", richtext)\ntopbutton:SetSize(60, 20)\ntopbutton:SetPos(160, 146)\ntopbutton:SetText(\"Back to Top\")\n\n-- When clicked, go to the start of the text\ntopbutton.DoClick = function() richtext:GotoTextStart()\tend\n\n-- Apply background color and font\nfunction richtext:PerformLayout()\n\t\n\tself:SetFontInternal(\"Trebuchet18\")\n\tself:SetBGColor(Color(64, 64, 84))\n\t\nend","description":"Creates a RichText panel with a \"Back to Top\" button which scrolls the text to the start."}],"isConstructor":false,"name":"GotoTextStart","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Marks the end of a clickable text segment in a {{Type|RichText}} element, started with {{ClassFunction|Panel|InsertClickableTextStart}}.\n\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"RichText\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- First segment\nrichtext:InsertColorChange(255, 255, 255, 255)\nrichtext:AppendText(\"This is a Rich Text panel — a panel used in Source MP's default chat box and developer console.\\n\\nSee the \")\n\n-- Second segment\nrichtext:InsertColorChange(192, 192, 255, 255)\nrichtext:InsertClickableTextStart(\"OpenWiki\")\t-- Make incoming text fire the \"OpenWiki\" value when clicked\nrichtext:AppendText(\"Garry's Mod Wiki\")\nrichtext:InsertClickableTextEnd()\t-- End clickable text here\n\n-- Third segment\nrichtext:InsertColorChange(255, 255, 255, 255)\nrichtext:AppendText(\" for information on how to use a Rich Text panel.\")\n\n-- Background color\nfunction richtext:PerformLayout() self:SetBGColor(Color(32, 32, 46)) end\n\n-- Handle any commands we get from the panel\nfunction richtext:ActionSignal(signalName, signalValue)\n\n\t-- Some clickable text was clicked\n\tif(signalName == \"TextClicked\") then\n\t\n\t\t-- Open the wiki\n\t\tif(signalValue == \"OpenWiki\") then\n\t\t\n\t\t\t<nowiki>gui.OpenURL(\"http://wiki.garrysmod.com/page/Category:RichText\")</nowiki>\n\t\t\n\t\tend\n\t\n\tend\n\nend","description":"Creates a panel with some information on RichText panels along with a click-able link to the {{Type|RichText}} page."}],"isConstructor":false,"name":"InsertClickableTextEnd","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text passed as the action signal's value.","isOptional":false,"isVarArg":false,"name":"signalValue","type":"string"}],"description":"Starts the insertion of clickable text for a {{Type|RichText}} element. Any text appended with {{ClassFunction|Panel|AppendText}} between this call and {{ClassFunction|Panel|InsertClickableTextEnd}} will become clickable text.\n\nThe hook {{HookFunction|PANEL|ActionSignal}} is called when the text is clicked, with \"TextClicked\" as the signal name and ''signalValue'' as the signal value.\n\n{{Note|The clickable text is a separate Derma panel which will not inherit the current font from the ''RichText''.}}\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"RichText\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- First segment\nrichtext:InsertColorChange(255, 255, 255, 255)\nrichtext:AppendText(\"This is a Rich Text panel — a panel used in Source MP's default chat box and developer console.\\n\\nSee the \")\n\n-- Second segment\nrichtext:InsertColorChange(192, 192, 255, 255)\nrichtext:InsertClickableTextStart(\"OpenWiki\")\t-- Make incoming text fire the \"OpenWiki\" value when clicked\nrichtext:AppendText(\"Garry's Mod Wiki\")\nrichtext:InsertClickableTextEnd()\t-- End clickable text here\n\n-- Third segment\nrichtext:InsertColorChange(255, 255, 255, 255)\nrichtext:AppendText(\" for information on how to use a Rich Text panel.\")\n\n-- Background color\nfunction richtext:PerformLayout() self:SetBGColor(Color(32, 32, 46)) end\n\n-- Handle any commands we get from the panel\nfunction richtext:ActionSignal(signalName, signalValue)\n\n\t-- Some clickable text was clicked\n\tif (signalName == \"TextClicked\") then\n\t\n\t\t-- Open the wiki\n\t\tif (signalValue == \"OpenWiki\") then\n\t\t\n\t\t\t<nowiki>gui.OpenURL(\"http://wiki.garrysmod.com/page/Category:RichText\")</nowiki>\n\t\t\n\t\tend\n\t\n\tend\n\nend","description":"Creates a panel with some information on Rich Text panels along with a click-able link to the {{Type|RichText}} page."}],"isConstructor":false,"name":"InsertClickableTextStart","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The red value (0 - 255).","isOptional":false,"isVarArg":false,"name":"r","type":"number"},{"default":"","description":"The green value (0 - 255).","isOptional":false,"isVarArg":false,"name":"g","type":"number"},{"default":"","description":"The blue value (0 - 255).","isOptional":false,"isVarArg":false,"name":"b","type":"number"},{"default":"","description":"The alpha value (0 - 255).","isOptional":false,"isVarArg":false,"name":"a","type":"number"}],"description":"Inserts a color change in a {{Type|RichText}} element, which affects the color of all text added with {{ClassFunction|Panel|AppendText}} until another color change is applied.\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 200)\nTextFrame:Center()\nTextFrame:SetTitle(\"Colored text\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\nrichtext:SetVerticalScrollbarEnabled(false)\n\n-- Text blocks\nrichtext:InsertColorChange(255, 255, 192, 255)\nrichtext:AppendText(\"This is an example of \")\n\nrichtext:InsertColorChange(0, 255, 0, 255)\nrichtext:AppendText(\"color coding \")\n\nrichtext:InsertColorChange(255, 255, 192, 255)\nrichtext:AppendText(\"different segments of text throughout a \")\n\nrichtext:InsertColorChange(255, 200, 0, 255)\nrichtext:AppendText(\"Rich Text panel.\\n\\n\")\n\nrichtext:InsertColorChange(64, 0, 255, 255)\nrichtext:AppendText(\"Here is another line of text shown in the color \")\n\nrichtext:InsertColorChange(128, 0, 255, 255)\nrichtext:AppendText(\"purple.\")\n\n-- When the panel is ready for layout, apply font and background color\nfunction richtext:PerformLayout()\n\t\n\tself:SetFontInternal(\"Trebuchet18\")\n\tself:SetBGColor(Color(0, 16, 32))\n\t\nend","description":"Creates a RichText panel with color coding on certain segments of text."},{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(300, 200)\nTextFrame:Center()\nTextFrame:SetTitle(\"Randomly Colored Words\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\nrichtext:SetVerticalScrollbarEnabled(false)\n\nlocal txt = \"Here's a fun example involving word by word text coloring. \"..\n\"Each word is separated by a space, colored, and appended to the Rich Text panel individually. \"..\n\"The colors are randomly generated shades of red, orange, yellow, and pink.\"\n\nlocal txt_tbl = string.Explode(\" \", txt, false)\n\nfor _, word in pairs(txt_tbl) do\n\n\trichtext:InsertColorChange(255, math.random(0, 255), math.random(0, 255), 255)\n\trichtext:AppendText(word..\" \")\n\nend\n\nfunction richtext:PerformLayout()\n\t\n\tself:SetFontInternal(\"GModNotify\")\n\tself:SetBGColor(Color(32, 16, 0))\n\t\nend","description":"Word by word coloring using {{LibraryFunction|string|Explode}} and random colors."}],"isConstructor":false,"name":"InsertColorChange","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The number of seconds the text remains visible.","isOptional":false,"isVarArg":false,"name":"sustain","type":"number"},{"default":"","description":"The number of seconds it takes the text to fade out.\n\nIf set '''lower''' than ''sustain'', the text will not begin fading out until (''sustain'' - ''length'') seconds have passed.\n\nIf set '''higher''' than ''sustain'', the text will begin fading out immediately at a fraction of the base alpha.\n\nIf set to '''-1''', the text doesn't fade out.","isOptional":false,"isVarArg":false,"name":"length","type":"number"}],"description":"Begins a text fade for a {{Type|RichText}} element where the last appended text segment is fully faded out after a specific amount of time, at a specific speed.\n\nThe alpha of the text at any given time is determined by the text's base alpha * ((''sustain'' - {{GlobalFunction|CurTime}}) / ''length'') where {{GlobalFunction|CurTime}} is added to ''sustain'' when this method is called.\n\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 200)\nTextFrame:Center()\nTextFrame:SetTitle(\"Fading Text\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Sample text\nrichtext:SetText(\"This is an example of a Rich Text panel using a fade-out with:\\n\\n6 seconds of sustain\\n\\n2 second fade-out length\")\n\t\n-- When the panel is ready for layout, begin the fade\nfunction richtext:PerformLayout()\n\t\n\tself:SetFontInternal(\"Trebuchet18\")\n\tself:SetBGColor(Color(64, 64, 92))\n\t\n\t-- Wait 6 seconds, then fade out in 2 seconds\n\tself:InsertFade(6, 2)\n\t\nend","description":"Creates a Rich Text panel that sustains visibility for 6 seconds with a 2 second long fade-out."},{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(350, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"Kleiner says:\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\t\n\n-- Red text\nrichtext:InsertColorChange(200, 60, 32, 255)\nrichtext:SetVerticalScrollbarEnabled(false)\n\t\nlocal words = {\"There's\", \"only\", \"one\", \"hedy...\"}\nlocal delay = 0\n\n-- Display each word in half second interval\nfor w, txt in pairs(words) do\n\n\tif(w == 1) then delay = 0.2\n\telse delay = (w-1)*0.45 end\n\n\ttimer.Simple(delay, function()\n\t\n\t\trichtext:AppendText(txt..\" \")\n\t\trichtext:InsertFade(2, 1)\t-- Sustain for 2 seconds while fading out after 1 second\n\t\t\n\t\trichtext:SetBGColor(Color(0, 0, 0))\n\t\trichtext:SetFontInternal(\"DermaLarge\")\n\t\n\tend)\n\nend\n\n-- Kleiner read along\nLocalPlayer():EmitSound(\"vo/k_lab2/kl_onehedy.wav\")","description":"Create a Rich Text panel where Dr. Kleiner reads a fading message in sync with text."}],"isConstructor":false,"name":"InsertFade","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to reset fades, false otherwise.","isOptional":false,"isVarArg":false,"name":"hold","type":"boolean"},{"default":"","description":"Any value equating to ''true'' will reset fades only on text segments that are completely faded out.","isOptional":false,"isVarArg":false,"name":"expiredOnly","type":"boolean"},{"default":"","description":"The new sustain value of each faded text segment. Set to -1 to keep the old sustain value.","isOptional":false,"isVarArg":false,"name":"newSustain","type":"number"}],"description":"Resets all text fades in a {{Type|RichText}} element made with {{ClassFunction|Panel|InsertFade}}.\n[[Category:RichText]]","examples":[{"code":"-- Window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"ResetAllFades\")\nTextFrame:MakePopup()\n\n-- Rich Text panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Append text and start fading a few frames after creation (won't work otherwise)\ntimer.Simple(0.05, function()\n\n\trichtext:SetBGColor(Color(32, 32, 32))\n\trichtext:SetFontInternal(\"GModNotify\")\n\n\trichtext:AppendText(\"This is \")\n\trichtext:InsertFade(5, 2)\n\t\n\trichtext:AppendText(\"a test...\")\n\trichtext:InsertFade(5, 1)\n\t\nend)\n\n-- 5 seconds after creation, reset all the fades\ntimer.Simple(5, function()\n\n\trichtext:ResetAllFades(true, false, -1)\n\nend)","description":"Creates a RichText panel where two text segments slowly fade out and get reset to full alpha 5 seconds after being created."}],"isConstructor":false,"name":"ResetAllFades","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the font.\n\nSee [[Default_Fonts|here]] for a list of existing fonts.\nAlternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font.","isOptional":false,"isVarArg":false,"name":"fontName","type":"string"}],"description":"Sets the font used to render this panel's text.\n\nTo retrieve the font used by a panel, call {{ClassFunction|Panel|GetFont}}.\n\n[[Category:Label]]\n[[Category:TextEntry]]\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"This is a font test\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Sample text\nrichtext:SetText(\"This is a sample of text using the chat box font.\")\n\n-- Ensure font and text color changes are applied\nfunction richtext:PerformLayout()\n\n\tself:SetFontInternal(\"ChatFont\")\n\tself:SetFGColor(Color(255, 255, 255))\n\t\nend","description":"Sets the font of a {{Type|RichText}} element to match the chat box font."}],"isConstructor":false,"name":"SetFontInternal","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text value to set.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.\n\n{{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}\n[[Category:Label]]\n[[Category:DLabel]]\n[[Category:TextEntry]]\n[[Category:RichText]]\n[[Category:DTree_Node]]","examples":[{"code":"-- Window frame for the RichText\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"#VAC_ConnectionRefusedTitle\") -- Results in \"Connection Refused - VAC\"\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Set the text to the message you get when VAC banned\nrichtext:SetText(\"#VAC_ConnectionRefusedDetail\")","description":"Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message."}],"isConstructor":false,"name":"SetText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Sets the height of a {{Type|RichText}} element to accommodate the text inside.\n\n{{Note|This function internally relies on {{ClassFunction|Panel|GetNumLines}}, so it should be called at least a couple frames after modifying the text using {{ClassFunction|Panel|AppendText}}}}\n\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 210)\nTextFrame:Center()\nTextFrame:SetTitle(\"No set height\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:SetPos(10, 30)\nrichtext:SetWidth(230)\n\n-- Block of text\nrichtext:AppendText(\"#ServerBrowser_ServerWarning_MaxPlayers\")\n\nfunction richtext:PerformLayout() self:SetBGColor(Color(0, 0, 0)) end\n\n-- Set to full height after 2 seconds\ntimer.Simple(2, function()\n\n\trichtext:SetToFullHeight()\n\t\n\tTextFrame:SetTitle(\"Full set height\")\n\t\nend)","description":"Creates a {{Type|RichText}} panel with no set height. The proper height is applied 2 seconds after being created in order to show the difference."}],"isConstructor":false,"name":"SetToFullHeight","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"True to display the vertical text scroll bar, false to hide it.","isOptional":true,"isVarArg":false,"name":"display","type":"boolean"}],"description":"Sets the visibility of the vertical scrollbar.\n\nWorks for {{Type|RichText}} and {{Type|TextEntry}}.\n\n[[Category:RichText]]\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SetVerticalScrollbarEnabled","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"RichText"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"","examples":[],"extends":"Panel","functions":[],"isHook":false,"isPureAbstract":true,"name":"SlideBar"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"{{Deprecated|Only exists for backwards compatibility with {{ClassFunction|Panel|SetActionFunction}} and {{ClassFunction|Panel|PostMessage}}. Use {{Type|DNumSlider}} instead.}}A simple slider featuring an numeric display.","examples":[{"code":"local frame = vgui.Create( \"DFrame\" )\nframe:SetSize( 280, 70 )\nframe:Center()\nframe:SetTitle( \"Bilderberg Group Dollar Value Slider\" )\nframe:MakePopup()\n\nlocal DermaSlider = vgui.Create(\"Slider\", frame)\nDermaSlider:SetPos( 0, 30 ) \nDermaSlider:SetWide( 100 )\nDermaSlider:SetMin( 0 )\nDermaSlider:SetMax( 1.0 )\nDermaSlider:SetValue( 0.5 )\nDermaSlider:SetDecimals( 2 )\nDermaSlider.OnValueChanged = function( panel, value )\n\tprint( tostring( value ) )\nend","description":"Creates a slider atop a DFrame which prints its value as it's being dragged."}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The name of the message.","isOptional":false,"isVarArg":false,"name":"messageName","type":"string"},{"default":"","description":"The type of the variable to post.","isOptional":false,"isVarArg":false,"name":"valueType","type":"string"},{"default":"","description":"The value to post.","isOptional":false,"isVarArg":false,"name":"value","type":"string"}],"description":"{{Deprecated|Only used in deprecated Derma controls.}}Sends a command to the panel.\n[[Category:Slider]]","examples":[],"isConstructor":false,"name":"PostMessage","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Function to call when the {{Type|Button}} is clicked or the {{Type|Slider}} value is changed.\n\nArguments given are:\n* {{FuncArg|Panel|self|The panel itself}}\n* {{FuncArg|string|action|\"Command\" on button press, \"SliderMoved\" on slider move.}}\n* {{FuncArg|number|val|The new value of the {{Type|Slider}}. Will always equal 0 for buttons.}}\n* {{FuncArg|number||Always equals 0.}}","isOptional":false,"isVarArg":false,"name":"func","type":"Button | Slider | Slider"}],"description":"{{Deprecated|Only used in deprecated Derma controls.}}\nUsed in {{Type|Button}} to call a function when the button is clicked and in {{Type|Slider}} when the value changes.\n[[Category:Button]]\n[[Category:Slider]]","examples":[],"isConstructor":false,"name":"SetActionFunction","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the message.","isOptional":false,"isVarArg":false,"name":"messageName","type":"string"},{"default":"","description":"The type of the variable to post.","isOptional":false,"isVarArg":false,"name":"valueType","type":"string"},{"default":"","description":"The value to post.","isOptional":false,"isVarArg":false,"name":"value","type":"string"}],"description":"{{Deprecated|Only used in deprecated Derma controls.}}Sends a command to the panel.\n[[Category:Slider]]","examples":[],"isConstructor":false,"name":"PostMessage","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Function to call when the {{Type|Button}} is clicked or the {{Type|Slider}} value is changed.\n\nArguments given are:\n* {{FuncArg|Panel|self|The panel itself}}\n* {{FuncArg|string|action|\"Command\" on button press, \"SliderMoved\" on slider move.}}\n* {{FuncArg|number|val|The new value of the {{Type|Slider}}. Will always equal 0 for buttons.}}\n* {{FuncArg|number||Always equals 0.}}","isOptional":false,"isVarArg":false,"name":"func","type":"Button | Slider | Slider"}],"description":"{{Deprecated|Only used in deprecated Derma controls.}}\nUsed in {{Type|Button}} to call a function when the button is clicked and in {{Type|Slider}} when the value changes.\n[[Category:Button]]\n[[Category:Slider]]","examples":[],"isConstructor":false,"name":"SetActionFunction","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"Slider"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The weapons library allows you to access information about any scripted weapons loaded into the game, as well as register your own weapons.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Class name of weapon to retrieve","isOptional":false,"isVarArg":false,"name":"classname","type":"string"}],"description":"Get copy of weapon table by name. If all you need to do is access a variable from the weapon table, use {{LibraryFunction|weapons|GetStored}} instead.","examples":[],"isConstructor":false,"name":"Get","realm":"shared","returns":[{"description":"The retrieved table or nil","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Get a list of all the registered SWEPs. This does not include weapons added to spawnmenu manually.","examples":[{"code":"PrintTable( weapons.GetList() )","description":"Example structure."}],"isConstructor":false,"name":"GetList","realm":"shared","returns":[{"description":"List of all the registered SWEPs","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Weapon class to retrieve weapon table of","isOptional":false,"isVarArg":false,"name":"weapon_class","type":"string"}],"description":"Gets the REAL weapon table, not a copy.","examples":[],"isConstructor":false,"name":"GetStored","realm":"shared","returns":[{"description":"The weapon table","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Entity's class name to be checked","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"","description":"Base class name to be checked","isOptional":false,"isVarArg":false,"name":"base","type":"string"}],"description":"Checks if name is based on base","examples":[{"code":"print(weapons.IsBasedOn(\"gmod_tool\", \"weapon_base\"), weapons.IsBasedOn(\"weapon_base\", \"weapon_base\"))","description":"See if gmod_tool is based on weapon_base, and whether weapon_base is based on itself."}],"isConstructor":false,"name":"IsBasedOn","realm":"shared","returns":[{"description":"Returns true if class name is based on base, else false.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Internal}}\n\nCalled after all SWEPS have been loaded and runs {{LibraryFunction|baseclass|Set}} on each one.\n\nYou can retrieve all the currently registered SWEPS with {{LibraryFunction|weapons|GetList}}.\n\n{{Note|This is not called after a SWEP auto refresh, and thus the inherited baseclass functions retrieved with {{LibraryFunction|baseclass|Get}} will not be updated}}","examples":[],"isConstructor":false,"name":"OnLoaded","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The SWEP table","isOptional":false,"isVarArg":false,"name":"swep_table","type":"table"},{"default":"","description":"Classname to assign to that swep","isOptional":false,"isVarArg":false,"name":"classname","type":"string"}],"description":"Used to register your SWEP with the engine.\n\n{{Bug|Pull=1300|Sub-tables provided in the first argument will not carry over their metatable, and will receive a BaseClass key if the table was merged with the base's. Userdata references, which includes Vectors, Angles, Entities, etc. will not be copied.}}","examples":[],"isConstructor":false,"name":"Register","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"weapons"},{"classFields":[],"collectionType":"library","customConstructor":"","description":"The widgets library.\n\nWidgets allow the player to have mouse interaction with entities, such as being able to manipulate the [https://www.youtube.com/watch?v=O3gG0t39-pQ bones of an NPC].","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The player","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Player move data","isOptional":false,"isVarArg":false,"name":"mv","type":"CMoveData"}],"description":"{{Internal}} Automatically called to update all widgets.","examples":[{"code":"hook.Add( \"PlayerTick\", \"TickWidgets\", function( pl, mv ) widgets.PlayerTick( pl, mv ) end )","description":"That's how it is used in '''lua/includes/modules/widget.lua'''"}],"isConstructor":false,"name":"PlayerTick","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Widget entity to render","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"}],"description":"Renders a widget. Normally you won't need to call this.","examples":[{"code":"function ENT:Draw()\n\n\twidgets.RenderMe( self )\n\t\nend","description":"Example usage in '''lua/entities/widget_base.lua'''"}],"isConstructor":false,"name":"RenderMe","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"widgets"},{"classFields":[],"collectionType":"class","customConstructor":"ProjectedTexture","description":"A client side projected texture, created by {{GlobalFunction|ProjectedTexture}}.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Creates a new {{Type|ProjectedTexture}}.","examples":[{"code":"function ENT:Initialize()\n\tlocal lamp = ProjectedTexture() -- Create a projected texture\n\tself.lamp = lamp -- Assign it to the entity table so it may be accessed later\n\n\t-- Set it all up\n\tlamp:SetTexture( \"effects/flashlight001\" )\n\tlamp:SetFarZ( 500 ) -- How far the light should shine\n\n\tlamp:SetPos( self:GetPos() ) -- Initial position and angles\n\tlamp:SetAngles( self:GetAngles() )\n\tlamp:Update()\nend\n\nfunction ENT:OnRemove()\n\tif ( IsValid( self.lamp ) ) then\n\t\tself.lamp:Remove()\n\tend\nend\n\nfunction ENT:Think()\n\t-- Keep updating the light so it's attached to our entity\n\t-- you might want to call other functions here, you can do animations here as well\n\tif ( IsValid( self.lamp ) ) then\n\t\tself.lamp:SetPos( self:GetPos() )\n\t\tself.lamp:SetAngles( self:GetAngles() )\n\t\tself.lamp:Update()\n\tend\nend","description":"Creates a simple ProjectedTexture attached to a [[Scripted Entities|Scripted Entity]].\n\nNote that this code must be ran on clientside only, not shared."}],"isConstructor":true,"name":"constructor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the angle of the ProjectedTexture, which were previously set by {{ClassFunction|ProjectedTexture|SetAngles}}","examples":[],"isConstructor":false,"name":"GetAngles","realm":"client","returns":[{"description":"The angles of the ProjectedTexture.","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Returns the brightness of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetBrightness}}","examples":[],"isConstructor":false,"name":"GetBrightness","realm":"client","returns":[{"description":"The brightness of the ProjectedTexture.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the color of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetColor}}.\n\n{{Bug|Issue=2407|The returned color will not have the color metatable.}}","examples":[],"isConstructor":false,"name":"GetColor","realm":"client","returns":[{"description":"{{Struct|Color}}, the color of the ProjectedTexture.","type":"Color"}]},{"accessModifier":"public","arguments":[],"description":"Returns the constant attenuation of the projected texture, which can also be set by {{ClassFunction|ProjectedTexture|SetConstantAttenuation}}.","examples":[],"isConstructor":false,"name":"GetConstantAttenuation","realm":"client","returns":[{"description":"The constant attenuation","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether shadows are enabled for this ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetEnableShadows}}","examples":[],"isConstructor":false,"name":"GetEnableShadows","realm":"client","returns":[{"description":"Whether shadows are enabled.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the projection distance of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetFarZ}}","examples":[],"isConstructor":false,"name":"GetFarZ","realm":"client","returns":[{"description":"The projection distance of the ProjectedTexture.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the horizontal FOV of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetHorizontalFOV}} or {{ClassFunction|ProjectedTexture|SetFOV}}","examples":[],"isConstructor":false,"name":"GetHorizontalFOV","realm":"client","returns":[{"description":"The horizontal FOV of the ProjectedTexture.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the linear attenuation of the projected texture, which can also be set by {{ClassFunction|ProjectedTexture|SetLinearAttenuation}}.","examples":[],"isConstructor":false,"name":"GetLinearAttenuation","realm":"client","returns":[{"description":"The linear attenuation.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the NearZ value of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetNearZ}}","examples":[],"isConstructor":false,"name":"GetNearZ","realm":"client","returns":[{"description":"NearZ of the ProjectedTexture.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current orthographic settings of the Projected Texture. To set these values, use {{ClassFunction|ProjectedTexture|SetOrthographic}}.","examples":[],"isConstructor":false,"name":"GetOrthographic","realm":"client","returns":[{"description":"Whether or not this projected texture is orthographic. When false, nothing else is returned.","type":"boolean"},{"description":"left","type":"number"},{"description":"top","type":"number"},{"description":"right","type":"number"},{"description":"bottom","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the position of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetPos}}","examples":[],"isConstructor":false,"name":"GetPos","realm":"client","returns":[{"description":"The position of the ProjectedTexture.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the quadratic attenuation of the projected texture, which can also be set by {{ClassFunction|ProjectedTexture|SetQuadraticAttenuation}}.","examples":[],"isConstructor":false,"name":"GetQuadraticAttenuation","realm":"client","returns":[{"description":"The quadratic attenuation","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the texture of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetTexture}}","examples":[],"isConstructor":false,"name":"GetTexture","realm":"client","returns":[{"description":"The texture of the ProjectedTexture.","type":"ITexture"}]},{"accessModifier":"public","arguments":[],"description":"Returns the texture frame of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetTextureFrame}}","examples":[],"isConstructor":false,"name":"GetTextureFrame","realm":"client","returns":[{"description":"The texture frame.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the vertical FOV of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetVerticalFOV}} or {{ClassFunction|ProjectedTexture|SetFOV}}","examples":[],"isConstructor":false,"name":"GetVerticalFOV","realm":"client","returns":[{"description":"The vertical FOV of the ProjectedTexture.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the projected texture is valid (i.e. has not been removed), false otherwise.\n\nInstead of calling this directly it's a good idea to call {{GlobalFunction|IsValid}} in case the variable is nil.\n\n<pre>IsValid( ptexture )</pre>\n\nThis not only checks whether the projected texture is valid - but also checks whether it's nil.","examples":[],"isConstructor":false,"name":"IsValid","realm":"client","returns":[{"description":"Whether the projected texture is valid.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Removes the projected texture. After calling this, {{ClassFunction|ProjectedTexture|IsValid}} will return false, and any hooks with the projected texture as the identifier will be automatically deleted.","examples":[],"isConstructor":false,"name":"Remove","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"angle","type":"Angle"}],"description":"Sets the angles (direction) of the projected texture.\n\nYou must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect.","examples":[],"isConstructor":false,"name":"SetAngles","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The brightness to give the projected texture.","isOptional":false,"isVarArg":false,"name":"brightness","type":"number"}],"description":"Sets the brightness of the projected texture.\n\nYou must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect.","examples":[],"isConstructor":false,"name":"SetBrightness","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Must be a {{Struct|Color}}.\n\nUnlike other projected textures, this color can only go up to 255.","isOptional":false,"isVarArg":false,"name":"color","type":"Color"}],"description":"Sets the color of the projected texture.\n\nYou must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect.","examples":[],"isConstructor":false,"name":"SetColor","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"constAtten","type":"number"}],"description":"Sets the constant attenuation of the projected texture.\n\nSee also {{ClassFunction|ProjectedTexture|SetLinearAttenuation}} and {{ClassFunction|ProjectedTexture|SetQuadraticAttenuation}}.\n\nYou must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect.","examples":[],"isConstructor":false,"name":"SetConstantAttenuation","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"newState","type":"boolean"}],"description":"Enable or disable shadows cast from the projected texture.\n\n{{Note|as with all types of projected textures (including the player's flashlight and env_projectedtexture), there can only be 8 projected textures with shadows enabled in total. This limit can be increased with the launch parameter:<br>-numshadowtextures limit<br>where limit is the new limit. Naturally, many projected lights with shadows enabled will drastically decrease framerate.}}\n\nYou must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect.","examples":[],"isConstructor":false,"name":"SetEnableShadows","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"farZ","type":"number"}],"description":"Sets the distance at which the projected texture ends.\n\nYou must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect.","examples":[],"isConstructor":false,"name":"SetFarZ","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Must be higher than 0 and lower than 180","isOptional":false,"isVarArg":false,"name":"fov","type":"number"}],"description":"Sets the angle of projection.\n\nYou must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect.","examples":[],"isConstructor":false,"name":"SetFOV","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new horizontal Field Of View for the projected texture. Must be in range between 0 and 180.","isOptional":false,"isVarArg":false,"name":"hFOV","type":"number"}],"description":"Sets the horizontal angle of projection without affecting the vertical angle.\n\nYou must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect.","examples":[],"isConstructor":false,"name":"SetHorizontalFOV","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"linearAtten","type":"number"}],"description":"Sets the linear attenuation of the projected texture.\n\nSee also {{ClassFunction|ProjectedTexture|SetConstantAttenuation}} and {{ClassFunction|ProjectedTexture|SetQuadraticAttenuation}}.\n\nThe default value of linear attenuation when the projected texture is created is 100. (others are 0, as you are not supposed to mix them)\n\nYou must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect.","examples":[],"isConstructor":false,"name":"SetLinearAttenuation","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"nearZ","type":"number"}],"description":"Sets the distance at which the projected texture begins its projection.\n\nYou must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect.\n\n{{Note|Setting this to 0 will disable the projected texture completely! This may be useful if you want to disable a projected texture without actually removing it}}\n\n{{Note|This seems to affect the rendering of shadows - a higher Near Z value will have shadows begin to render closer to their casting object. Comparing a low Near Z value (like 1) with a normal one (12) or high one (1000) is the easiest way to understand this artifact}}","examples":[],"isConstructor":false,"name":"SetNearZ","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"When false, all other arguments are ignored and the texture is reset to perspective projection.","isOptional":false,"isVarArg":false,"name":"orthographic","type":"boolean"},{"default":"","description":"The amount of units left from the projected texture's origin to project.","isOptional":false,"isVarArg":false,"name":"left","type":"number"},{"default":"","description":"The amount of units upwards from the projected texture's origin to project.","isOptional":false,"isVarArg":false,"name":"top","type":"number"},{"default":"","description":"The amount of units right from the projected texture's origin to project.","isOptional":false,"isVarArg":false,"name":"right","type":"number"},{"default":"","description":"The amount of units downwards from the projected texture's origin to project.","isOptional":false,"isVarArg":false,"name":"bottom","type":"number"}],"description":"Changes the current projected texture between orthographic and perspective projection.\n\nYou must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect.","examples":[{"code":"ProjectedTexture:SetOrthographic( false )\nProjectedTexture:Update()","description":"Set the projected texture back to perspective projection."}],"isConstructor":false,"name":"SetOrthographic","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"position","type":"Vector"}],"description":"Move the Projected Texture to the specified position.\n\nYou must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect.","examples":[],"isConstructor":false,"name":"SetPos","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"quadAtten","type":"number"}],"description":"Sets the quadratic attenuation of the projected texture.\n\nSee also {{ClassFunction|ProjectedTexture|SetLinearAttenuation}} and {{ClassFunction|ProjectedTexture|SetConstantAttenuation}}.\n\nYou must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect.","examples":[],"isConstructor":false,"name":"SetQuadraticAttenuation","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the texture. Can also be an {{Type|ITexture}}.","isOptional":false,"isVarArg":false,"name":"texture","type":"string"}],"description":"Sets the texture to be projected.\n\nYou must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect.","examples":[],"isConstructor":false,"name":"SetTexture","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The frame index to use.","isOptional":false,"isVarArg":false,"name":"frame","type":"number"}],"description":"For animated textures, this will choose which frame in the animation will be projected.\n\nYou must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect.","examples":[],"isConstructor":false,"name":"SetTextureFrame","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new vertical Field Of View for the projected texture. Must be in range between 0 and 180.","isOptional":false,"isVarArg":false,"name":"vFOV","type":"number"}],"description":"Sets the vertical angle of projection without affecting the horizontal angle.\n\nYou must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect.","examples":[],"isConstructor":false,"name":"SetVerticalFOV","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Updates the Projected Light and applies all previously set parameters.","examples":[],"isConstructor":false,"name":"Update","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"ProjectedTexture"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A SpawnIcon displays an image for the given model path. It is mostly used in the Spawn Menu (Q).","examples":[{"code":"local Panel = vgui.Create( \"DFrame\" ) -- Main Frame\nPanel:SetPos( 200, 200 )\nPanel:SetSize( 200, 200 )\nPanel:SetTitle( \"Spawn Icon Test\" )\nPanel:SetVisible( true )\nPanel:SetDraggable( false )\nPanel:ShowCloseButton( true )\nPanel:MakePopup()\n\nlocal SpawnI = vgui.Create( \"SpawnIcon\" , Panel ) -- SpawnIcon\nSpawnI:SetPos( 75, 75 )\nSpawnI:SetModel( \"models/props_borealis/bluebarrel001.mdl\" ) -- Model we want for this spawn icon","description":"Creates a DFrame with a SpawnIcon inside."}],"extends":"DButton","functions":[{"accessModifier":"public","arguments":[],"description":"Causes a {{Type|SpawnIcon}} to rebuild its model image.\n[[Category:ModelImage]][[Category:SpawnIcon]]","examples":[],"isConstructor":false,"name":"RebuildSpawnIcon","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A four-membered table containing the information needed to re-render:\n* {{FuncArg|Vector|cam_pos|The relative camera position the model is viewed from.}}\n* {{FuncArg|Angle|cam_ang|The camera angle the model is viewed from.}}\n* {{FuncArg|number|cam_fov|The camera's field of view (FOV).}}\n* {{FuncArg|Entity|ent|The entity object of the model.}}\nSee the example below for how to retrieve these values.","isOptional":false,"isVarArg":false,"name":"data","type":"table"}],"description":"Re-renders a spawn icon with customized cam data.\n\n{{Note|This function does '''not''' accept the standard {{Struct|CamData}}.}}\n[[Category:ModelImage]][[Category:SpawnIcon]]","examples":[{"code":"function PANEL:RenderIcon()\n\t\n\tlocal ent = self.ModelPanel:GetEntity()\n\t\n\tlocal tab = {}\n\ttab.ent\t\t= ent\n\ttab.cam_pos = self.ModelPanel:GetCamPos()\n\ttab.cam_ang = self.ModelPanel:GetLookAng()\n\ttab.cam_fov = self.ModelPanel:GetFOV()\n\n\tself.SpawnIcon:RebuildSpawnIconEx( tab )\nend","description":"The ''RenderIcon'' method used by {{Type|IconEditor}}. ''SpawnIcon'' is a {{Type|SpawnIcon}} and ''ModelPanel'' is a {{Type|DAdjustableModelPanel}}."}],"isConstructor":false,"name":"RebuildSpawnIconEx","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path of the model to set","isOptional":false,"isVarArg":false,"name":"ModelPath","type":"string"},{"default":"0","description":"The skin to set","isOptional":true,"isVarArg":false,"name":"skin","type":"number"},{"default":"\"\"","description":"The body groups to set. Each single-digit number in the string represents a separate bodygroup, '''up to 9 in total'''.","isOptional":true,"isVarArg":false,"name":"bodygroups","type":"string"}],"description":"[[Category:ModelImage]][[Category:SpawnIcon]]Sets the model to be displayed by {{Type|SpawnIcon}}.\n\n{{Note|This must be called after setting size if you wish to use a different size spawnicon}}","examples":[],"isConstructor":false,"name":"SetModel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A path to the .png material, for example one of the [[Silkicons]] shipped with the game.","isOptional":false,"isVarArg":false,"name":"icon","type":"string"}],"description":"[[Category:ModelImage]][[Category:SpawnIcon]]Sets the .png image to be displayed on a  {{Type|SpawnIcon}} or the panel it is based on {{Type|ModelImage}}.\n\nOnly .png images can be used with this function.","examples":[],"isConstructor":false,"name":"SetSpawnIcon","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Causes a {{Type|SpawnIcon}} to rebuild its model image.\n[[Category:ModelImage]][[Category:SpawnIcon]]","examples":[],"isConstructor":false,"name":"RebuildSpawnIcon","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A four-membered table containing the information needed to re-render:\n* {{FuncArg|Vector|cam_pos|The relative camera position the model is viewed from.}}\n* {{FuncArg|Angle|cam_ang|The camera angle the model is viewed from.}}\n* {{FuncArg|number|cam_fov|The camera's field of view (FOV).}}\n* {{FuncArg|Entity|ent|The entity object of the model.}}\nSee the example below for how to retrieve these values.","isOptional":false,"isVarArg":false,"name":"data","type":"table"}],"description":"Re-renders a spawn icon with customized cam data.\n\n{{Note|This function does '''not''' accept the standard {{Struct|CamData}}.}}\n[[Category:ModelImage]][[Category:SpawnIcon]]","examples":[{"code":"function PANEL:RenderIcon()\n\t\n\tlocal ent = self.ModelPanel:GetEntity()\n\t\n\tlocal tab = {}\n\ttab.ent\t\t= ent\n\ttab.cam_pos = self.ModelPanel:GetCamPos()\n\ttab.cam_ang = self.ModelPanel:GetLookAng()\n\ttab.cam_fov = self.ModelPanel:GetFOV()\n\n\tself.SpawnIcon:RebuildSpawnIconEx( tab )\nend","description":"The ''RenderIcon'' method used by {{Type|IconEditor}}. ''SpawnIcon'' is a {{Type|SpawnIcon}} and ''ModelPanel'' is a {{Type|DAdjustableModelPanel}}."}],"isConstructor":false,"name":"RebuildSpawnIconEx","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The path of the model to set","isOptional":false,"isVarArg":false,"name":"ModelPath","type":"string"},{"default":"0","description":"The skin to set","isOptional":true,"isVarArg":false,"name":"skin","type":"number"},{"default":"\"\"","description":"The body groups to set. Each single-digit number in the string represents a separate bodygroup, '''up to 9 in total'''.","isOptional":true,"isVarArg":false,"name":"bodygroups","type":"string"}],"description":"[[Category:ModelImage]][[Category:SpawnIcon]]Sets the model to be displayed by {{Type|SpawnIcon}}.\n\n{{Note|This must be called after setting size if you wish to use a different size spawnicon}}","examples":[],"isConstructor":false,"name":"SetModel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"A path to the .png material, for example one of the [[Silkicons]] shipped with the game.","isOptional":false,"isVarArg":false,"name":"icon","type":"string"}],"description":"[[Category:ModelImage]][[Category:SpawnIcon]]Sets the .png image to be displayed on a  {{Type|SpawnIcon}} or the panel it is based on {{Type|ModelImage}}.\n\nOnly .png images can be used with this function.","examples":[],"isConstructor":false,"name":"SetSpawnIcon","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"SpawnIcon"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"The object returned by {{LibraryFunction|ai_schedule|New}}.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"Task name, see [https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502 ai_task.h]","isOptional":false,"isVarArg":false,"name":"taskname","type":"string"},{"default":"","description":"Task data as a float","isOptional":false,"isVarArg":false,"name":"taskdata","type":"number"}],"description":"{{Stub}} Adds a task to the schedule.\n\nSee also {{ClassFunction|NPC|StartEngineTask}} and {{ClassFunction|NPC|RunEngineTask}}.","examples":[],"isConstructor":false,"name":"AddTask","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"start","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"run","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"data","type":"number"}],"description":"","examples":[],"isConstructor":false,"name":"AddTaskEx","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Task name.","isOptional":false,"isVarArg":false,"name":"taskname","type":"string"},{"default":"","description":"Task data.","isOptional":false,"isVarArg":false,"name":"taskdata","type":"number"}],"description":"Adds an engine task to the schedule.","examples":[],"isConstructor":false,"name":"EngTask","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Task index.","isOptional":false,"isVarArg":false,"name":"num","type":"number"}],"description":"Returns the task at the given index.","examples":[],"isConstructor":false,"name":"GetTask","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name passed from {{LibraryFunction|ai_schedule|New}}.","isOptional":false,"isVarArg":false,"name":"debugName","type":"string"}],"description":"{{Internal}} Initialises the Schedule. Called by {{LibraryFunction|ai_schedule|New}} when the Schedule is created.","examples":[],"isConstructor":false,"name":"Init","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the number of tasks in the schedule.","examples":[],"isConstructor":false,"name":"NumTasks","realm":"server","returns":[{"description":"The number of tasks in this schedule.","type":"number"}]}],"isHook":false,"isPureAbstract":false,"name":"Schedule"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"An object returned by {{LibraryFunction|util|Stack}}.\n\nLike a Lua table, a Stack is a container. It follows the principle of LIFO (last in, first out).\n\nThe Stack works like a stack of papers: the first page you put down (push) will be the last one you remove (pop). That also means that the last page you put down, will be the first to be removed.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"1","description":"Amount of items you want to pop.","isOptional":true,"isVarArg":false,"name":"amount","type":"number"}],"description":"Pop an item from the stack","examples":[],"isConstructor":false,"name":"Pop","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The item you want to push","isOptional":false,"isVarArg":false,"name":"object","type":"any"}],"description":"Push an item onto the stack","examples":[],"isConstructor":false,"name":"Push","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the size of the stack","examples":[],"isConstructor":false,"name":"Size","realm":"shared","returns":[{"description":"The size of the stack","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Get the item at the top of the stack","examples":[],"isConstructor":false,"name":"Top","realm":"shared","returns":[{"description":"The item at the top of the stack","type":"any"}]}],"isHook":false,"isPureAbstract":false,"name":"Stack"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A single AI task. Returned by {{LibraryFunction|ai_task|New}}.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"{{Internal}} Initialises the AI task. Called by {{LibraryFunction|ai_task|New}}.","examples":[],"isConstructor":false,"name":"Init","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the task.","isOptional":false,"isVarArg":false,"name":"taskname","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"taskdata","type":"number"}],"description":"Initialises the AI task as an engine task.","examples":[],"isConstructor":false,"name":"InitEngine","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the NPC method to call on task start.","isOptional":false,"isVarArg":false,"name":"startname","type":"string"},{"default":"","description":"The name of the NPC method to call on task run.","isOptional":false,"isVarArg":false,"name":"runname","type":"string"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"taskdata","type":"number"}],"description":"Initialises the AI task as NPC method-based.","examples":[],"isConstructor":false,"name":"InitFunctionName","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Determines if the task is an engine task (''TYPE_ENGINE'', 1).","examples":[],"isConstructor":false,"name":"IsEngineType","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Determines if the task is an NPC method-based task (''TYPE_FNAME'', 2).","examples":[],"isConstructor":false,"name":"IsFNameType","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The NPC to run the task on.","isOptional":false,"isVarArg":false,"name":"target","type":"NPC"}],"description":"Runs the AI task.","examples":[],"isConstructor":false,"name":"Run","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The NPC to run the task on.","isOptional":false,"isVarArg":false,"name":"target","type":"NPC"}],"description":"{{Internal}} Runs the AI task as an NPC method. This requires the task to be of type ''TYPE_FNAME''.","examples":[],"isConstructor":false,"name":"Run_FName","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The NPC to start the task on.","isOptional":false,"isVarArg":false,"name":"target","type":"NPC"}],"description":"Starts the AI task.","examples":[],"isConstructor":false,"name":"Start","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The NPC to start the task on.","isOptional":false,"isVarArg":false,"name":"target","type":"NPC"}],"description":"{{Internal}} Starts the AI task as an NPC method.","examples":[],"isConstructor":false,"name":"Start_FName","realm":"server","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"Task"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"Basic text input field.","examples":[],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[],"description":"Performs the \"CONTROL + C\" key combination effect ( Copy selection to clipboard ) on selected text.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"CopySelected","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Performs the \"CONTROL + X\" ( delete text and copy it to clipboard buffer ) action on selected text.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"CutSelected","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The colour of the main text.","isOptional":false,"isVarArg":false,"name":"textCol","type":"table"},{"default":"","description":"The colour of the selection highlight (when selecting text).","isOptional":false,"isVarArg":false,"name":"highlightCol","type":"table"},{"default":"","description":"The colour of the text cursor (or caret).","isOptional":false,"isVarArg":false,"name":"cursorCol","type":"table"}],"description":"Used to draw the text in a {{Type|DTextEntry}} within a derma skin. This should be called within the {{HookFunction|SKIN|PaintTextEntry}} skin hook.\n\n[[Category:TextEntry]]","examples":[{"code":"function SKIN:PaintTextEntry( panel, w, h )\n\n\tif ( panel.m_bBackground ) then\n\t\n\t\tif ( panel:GetDisabled() ) then\n\t\t\tself.tex.TextBox_Disabled( 0, 0, w, h )\n\t\telseif ( panel:HasFocus() ) then\n\t\t\tself.tex.TextBox_Focus( 0, 0, w, h )\n\t\telse\n\t\t\tself.tex.TextBox( 0, 0, w, h )\n\t\tend\n\t\n\tend\n\t\n\tpanel:DrawTextEntryText( panel.m_colText, panel.m_colHighlight, panel.m_colCursor )\n\t\nend","description":"The paint function used in the default derma skin."}],"isConstructor":false,"name":"DrawTextEntryText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the position/offset of the caret (or text cursor) in a text-based panel object.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"GetCaretPos","realm":"client","returns":[{"description":"The caret position/offset from the start of the text. A value of ''0'' means the caret sits before the first character.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Determines whether or not a text-based panel object, such as a {{Type|DTextEntry}}, is in multi-line mode. This is set with {{ClassFunction|Panel|SetMultiline}}.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"IsMultiline","realm":"client","returns":[{"description":"Whether the object is in multi-line mode or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Warning|Due to privacy concerns, this function has been disabled}}\n\nOnly works for TextEntries.\n\nPastes the contents of the clipboard into the TextEntry.\n\n{{Note|Tab characters will be dropped from the pasted text}}\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"Paste","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Saves the current state (caret position and the text inside) of a {{Type|TextEntry}} as an undo state.\n\nSee also {{ClassFunction|Panel|Undo}}.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SaveUndoState","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Selects all items within a panel or object. For text-based objects, selects all text.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SelectAll","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"If called on a text entry, clicking the text entry for the first time will automatically select all of the text ready to be copied by the user.\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SelectAllOnFocus","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Selects all the text in a panel object. Will not select non-text items; for this, use {{ClassFunction|Panel|SelectAll}}.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SelectAllText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Deselects all items in a panel object. For text-based objects, this will deselect all text.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SelectNone","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Set to true in order not to restrict input characters.","isOptional":false,"isVarArg":false,"name":"allowed","type":"boolean"}],"description":"Configures a text input to allow user to type characters that are not included in the US-ASCII (7-bit ASCII) character set.\n\nCharacters not included in US-ASCII are multi-byte characters in UTF-8. They can be accented characters, non-Latin characters and special characters.\n\n[[Category:TextEntry]]","examples":[{"code":"if vgui.CreateStdRestrict == nil then\n\tvgui.CreateStdRestrict = vgui.Create\nend\nfunction vgui.Create( classname, parent, name )\n\tlocal vgui_elt = vgui.CreateStdRestrict(classname, parent, name)\n\tif classname == \"DTextEntry\" or classname == \"RichText\" or classname == \"TextEntry\" then\n\t\tvgui_elt:SetAllowNonAsciiCharacters(true)\n\tend\n\treturn vgui_elt\nend","description":"Replaces the default vgui.Create() function to always allow non US-ASCII characters for text inputs."}],"isConstructor":false,"name":"SetAllowNonAsciiCharacters","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Caret position/offset from the start of text. A value of ''0'' places the caret before the first character.","isOptional":false,"isVarArg":false,"name":"offset","type":"number"}],"description":"Sets the position of the caret (or text cursor) in a text-based panel object.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SetCaretPos","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"true to make it visible, false to hide it.","isOptional":false,"isVarArg":false,"name":"visible","type":"boolean"}],"description":"Sets the visibility of the language selection box in a TextEntry when typing in non-English mode.\n\nSee {{ClassFunction|Panel|SetDrawLanguageIDAtLeft}} for a function that changes the position of the language selection box.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SetDrawLanguageID","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"true = left, false = right","isOptional":false,"isVarArg":false,"name":"left","type":"boolean"}],"description":"Sets where to draw the language selection box.\n\nSee {{ClassFunction|Panel|SetDrawLanguageID}} for a function that hides or shows the language selection box.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SetDrawLanguageIDAtLeft","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the font.\n\nSee [[Default_Fonts|here]] for a list of existing fonts.\nAlternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font.","isOptional":false,"isVarArg":false,"name":"fontName","type":"string"}],"description":"Sets the font used to render this panel's text.\n\nTo retrieve the font used by a panel, call {{ClassFunction|Panel|GetFont}}.\n\n[[Category:Label]]\n[[Category:TextEntry]]\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"This is a font test\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Sample text\nrichtext:SetText(\"This is a sample of text using the chat box font.\")\n\n-- Ensure font and text color changes are applied\nfunction richtext:PerformLayout()\n\n\tself:SetFontInternal(\"ChatFont\")\n\tself:SetFGColor(Color(255, 255, 255))\n\t\nend","description":"Sets the font of a {{Type|RichText}} element to match the chat box font."}],"isConstructor":false,"name":"SetFontInternal","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to enable multiline or not.","isOptional":false,"isVarArg":false,"name":"multiline","type":"boolean"}],"description":"Enables or disables the multi-line functionality of a text object, such as a {{Type|DTextEntry}}.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SetMultiline","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text value to set.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.\n\n{{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}\n[[Category:Label]]\n[[Category:DLabel]]\n[[Category:TextEntry]]\n[[Category:RichText]]\n[[Category:DTree_Node]]","examples":[{"code":"-- Window frame for the RichText\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"#VAC_ConnectionRefusedTitle\") -- Results in \"Connection Refused - VAC\"\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Set the text to the message you get when VAC banned\nrichtext:SetText(\"#VAC_ConnectionRefusedDetail\")","description":"Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message."}],"isConstructor":false,"name":"SetText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"True to display the vertical text scroll bar, false to hide it.","isOptional":true,"isVarArg":false,"name":"display","type":"boolean"}],"description":"Sets the visibility of the vertical scrollbar.\n\nWorks for {{Type|RichText}} and {{Type|TextEntry}}.\n\n[[Category:RichText]]\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SetVerticalScrollbarEnabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Restores the last saved state (caret position and the text inside) of a {{Type|TextEntry}}. Should act identically to pressing CTRL+Z in a {{Type|TextEntry}}.\n\nSee also {{ClassFunction|Panel|SaveUndoState}}.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"Undo","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Performs the \"CONTROL + C\" key combination effect ( Copy selection to clipboard ) on selected text.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"CopySelected","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Performs the \"CONTROL + X\" ( delete text and copy it to clipboard buffer ) action on selected text.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"CutSelected","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The colour of the main text.","isOptional":false,"isVarArg":false,"name":"textCol","type":"table"},{"default":"","description":"The colour of the selection highlight (when selecting text).","isOptional":false,"isVarArg":false,"name":"highlightCol","type":"table"},{"default":"","description":"The colour of the text cursor (or caret).","isOptional":false,"isVarArg":false,"name":"cursorCol","type":"table"}],"description":"Used to draw the text in a {{Type|DTextEntry}} within a derma skin. This should be called within the {{HookFunction|SKIN|PaintTextEntry}} skin hook.\n\n[[Category:TextEntry]]","examples":[{"code":"function SKIN:PaintTextEntry( panel, w, h )\n\n\tif ( panel.m_bBackground ) then\n\t\n\t\tif ( panel:GetDisabled() ) then\n\t\t\tself.tex.TextBox_Disabled( 0, 0, w, h )\n\t\telseif ( panel:HasFocus() ) then\n\t\t\tself.tex.TextBox_Focus( 0, 0, w, h )\n\t\telse\n\t\t\tself.tex.TextBox( 0, 0, w, h )\n\t\tend\n\t\n\tend\n\t\n\tpanel:DrawTextEntryText( panel.m_colText, panel.m_colHighlight, panel.m_colCursor )\n\t\nend","description":"The paint function used in the default derma skin."}],"isConstructor":false,"name":"DrawTextEntryText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the position/offset of the caret (or text cursor) in a text-based panel object.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"GetCaretPos","realm":"client","returns":[{"description":"The caret position/offset from the start of the text. A value of ''0'' means the caret sits before the first character.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Determines whether or not a text-based panel object, such as a {{Type|DTextEntry}}, is in multi-line mode. This is set with {{ClassFunction|Panel|SetMultiline}}.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"IsMultiline","realm":"client","returns":[{"description":"Whether the object is in multi-line mode or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"{{Warning|Due to privacy concerns, this function has been disabled}}\n\nOnly works for TextEntries.\n\nPastes the contents of the clipboard into the TextEntry.\n\n{{Note|Tab characters will be dropped from the pasted text}}\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"Paste","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Saves the current state (caret position and the text inside) of a {{Type|TextEntry}} as an undo state.\n\nSee also {{ClassFunction|Panel|Undo}}.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SaveUndoState","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Selects all items within a panel or object. For text-based objects, selects all text.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SelectAll","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"If called on a text entry, clicking the text entry for the first time will automatically select all of the text ready to be copied by the user.\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SelectAllOnFocus","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Selects all the text in a panel object. Will not select non-text items; for this, use {{ClassFunction|Panel|SelectAll}}.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SelectAllText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Deselects all items in a panel object. For text-based objects, this will deselect all text.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SelectNone","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Set to true in order not to restrict input characters.","isOptional":false,"isVarArg":false,"name":"allowed","type":"boolean"}],"description":"Configures a text input to allow user to type characters that are not included in the US-ASCII (7-bit ASCII) character set.\n\nCharacters not included in US-ASCII are multi-byte characters in UTF-8. They can be accented characters, non-Latin characters and special characters.\n\n[[Category:TextEntry]]","examples":[{"code":"if vgui.CreateStdRestrict == nil then\n\tvgui.CreateStdRestrict = vgui.Create\nend\nfunction vgui.Create( classname, parent, name )\n\tlocal vgui_elt = vgui.CreateStdRestrict(classname, parent, name)\n\tif classname == \"DTextEntry\" or classname == \"RichText\" or classname == \"TextEntry\" then\n\t\tvgui_elt:SetAllowNonAsciiCharacters(true)\n\tend\n\treturn vgui_elt\nend","description":"Replaces the default vgui.Create() function to always allow non US-ASCII characters for text inputs."}],"isConstructor":false,"name":"SetAllowNonAsciiCharacters","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Caret position/offset from the start of text. A value of ''0'' places the caret before the first character.","isOptional":false,"isVarArg":false,"name":"offset","type":"number"}],"description":"Sets the position of the caret (or text cursor) in a text-based panel object.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SetCaretPos","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"true to make it visible, false to hide it.","isOptional":false,"isVarArg":false,"name":"visible","type":"boolean"}],"description":"Sets the visibility of the language selection box in a TextEntry when typing in non-English mode.\n\nSee {{ClassFunction|Panel|SetDrawLanguageIDAtLeft}} for a function that changes the position of the language selection box.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SetDrawLanguageID","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"true = left, false = right","isOptional":false,"isVarArg":false,"name":"left","type":"boolean"}],"description":"Sets where to draw the language selection box.\n\nSee {{ClassFunction|Panel|SetDrawLanguageID}} for a function that hides or shows the language selection box.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SetDrawLanguageIDAtLeft","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the font.\n\nSee [[Default_Fonts|here]] for a list of existing fonts.\nAlternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font.","isOptional":false,"isVarArg":false,"name":"fontName","type":"string"}],"description":"Sets the font used to render this panel's text.\n\nTo retrieve the font used by a panel, call {{ClassFunction|Panel|GetFont}}.\n\n[[Category:Label]]\n[[Category:TextEntry]]\n[[Category:RichText]]","examples":[{"code":"-- Create a window frame\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(200, 100)\nTextFrame:Center()\nTextFrame:SetTitle(\"This is a font test\")\nTextFrame:MakePopup()\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Sample text\nrichtext:SetText(\"This is a sample of text using the chat box font.\")\n\n-- Ensure font and text color changes are applied\nfunction richtext:PerformLayout()\n\n\tself:SetFontInternal(\"ChatFont\")\n\tself:SetFGColor(Color(255, 255, 255))\n\t\nend","description":"Sets the font of a {{Type|RichText}} element to match the chat box font."}],"isConstructor":false,"name":"SetFontInternal","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether to enable multiline or not.","isOptional":false,"isVarArg":false,"name":"multiline","type":"boolean"}],"description":"Enables or disables the multi-line functionality of a text object, such as a {{Type|DTextEntry}}.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SetMultiline","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The text value to set.","isOptional":false,"isVarArg":false,"name":"text","type":"string"}],"description":"Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.\n\n{{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}\n[[Category:Label]]\n[[Category:DLabel]]\n[[Category:TextEntry]]\n[[Category:RichText]]\n[[Category:DTree_Node]]","examples":[{"code":"-- Window frame for the RichText\nTextFrame = vgui.Create(\"DFrame\")\nTextFrame:SetSize(250, 150)\nTextFrame:Center()\nTextFrame:SetTitle(\"#VAC_ConnectionRefusedTitle\") -- Results in \"Connection Refused - VAC\"\n\n-- RichText panel\nlocal richtext = vgui.Create(\"RichText\", TextFrame)\nrichtext:Dock(FILL)\n\n-- Set the text to the message you get when VAC banned\nrichtext:SetText(\"#VAC_ConnectionRefusedDetail\")","description":"Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message."}],"isConstructor":false,"name":"SetText","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"false","description":"True to display the vertical text scroll bar, false to hide it.","isOptional":true,"isVarArg":false,"name":"display","type":"boolean"}],"description":"Sets the visibility of the vertical scrollbar.\n\nWorks for {{Type|RichText}} and {{Type|TextEntry}}.\n\n[[Category:RichText]]\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"SetVerticalScrollbarEnabled","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Restores the last saved state (caret position and the text inside) of a {{Type|TextEntry}}. Should act identically to pressing CTRL+Z in a {{Type|TextEntry}}.\n\nSee also {{ClassFunction|Panel|SaveUndoState}}.\n\n[[Category:TextEntry]]","examples":[],"isConstructor":false,"name":"Undo","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"TextEntry"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A panel capable of loading .tga images.","examples":[{"code":"local panel = vgui.Create( \"DFrame\" )\npanel:SetSize( 500, 500 )\npanel:MakePopup()\npanel:Center()\n\nlocal image = vgui.Create( \"TGAImage\", panel )\nimage:SetSize( 32, 32 )\nimage:SetPos( 50, 50 )\nimage:LoadTGAImage( \"materials/addon.tga\", \"\" )","description":"Creates a TGAImage panel and loads the image defined by line 4."}],"extends":"Panel","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The file path.","isOptional":false,"isVarArg":false,"name":"imageName","type":"string"},{"default":"","description":"The PATH to search in. See [[File Search Paths]].\n\nThis isn't used internally.","isOptional":false,"isVarArg":false,"name":"strPath","type":"string"}],"description":"Sets a new image to be loaded by a {{Type|TGAImage}}.\n\n[[Category:TGAImage]]","examples":[],"isConstructor":false,"name":"LoadTGAImage","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The file path.","isOptional":false,"isVarArg":false,"name":"imageName","type":"string"},{"default":"","description":"The PATH to search in. See [[File Search Paths]].\n\nThis isn't used internally.","isOptional":false,"isVarArg":false,"name":"strPath","type":"string"}],"description":"Sets a new image to be loaded by a {{Type|TGAImage}}.\n\n[[Category:TGAImage]]","examples":[],"isConstructor":false,"name":"LoadTGAImage","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"TGAImage"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A panel similar to {{Type|Label}} used by {{Type|DLabelURL}}.","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"","description":"The URL to set. This '''must''' begin with ''<nowiki>http://</nowiki>''.","isOptional":false,"isVarArg":false,"name":"url","type":"string"}],"description":"[[Category:DLabelURL]][[Category:URLLabel]]Sets the URL of a link-based panel such as {{Type|DLabelURL}}.","examples":[],"isConstructor":false,"name":"SetURL","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":true,"name":"URLLabel"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"A list of functions available inside a TOOL. TOOLs are the Sandbox tools and they are available only in Sandbox and Sandbox derived gamemodes.\n\nYou can find the hooks [[:Category:TOOL_Hooks|here]] and members [[Structures/TOOL|here]].","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[],"description":"Clears all objects previously set with {{ClassFunction|Tool|SetObject}}.","examples":[],"isConstructor":false,"name":"ClearObjects","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The id of the object which was set in {{ClassFunction|Tool|SetObject}}.","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Retrieves a physics bone number previously stored using {{ClassFunction|Tool|SetObject}}.","examples":[],"isConstructor":false,"name":"GetBone","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the convar to retrieve. The function will automatically add the \"mytoolfilename_\" part to it.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Attempts to grab a clientside tool {{Type|ConVar}}.","examples":[],"isConstructor":false,"name":"GetClientInfo","realm":"shared","returns":[{"description":"The value of the requested {{Type|ConVar}}.","type":"string"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the convar to retrieve. The function will automatically add the \"mytoolfilename_\" part to it.","isOptional":false,"isVarArg":false,"name":"name","type":"string"},{"default":"0","description":"The default value to return in case the lookup fails.","isOptional":true,"isVarArg":false,"name":"defaultVal","type":"number"}],"description":"Attempts to grab a clientside tool {{Type|ConVar}}.","examples":[],"isConstructor":false,"name":"GetClientNumber","realm":"shared","returns":[{"description":"The value of the requested {{Type|ConVar}}.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The id of the object which was set in {{ClassFunction|Tool|SetObject}}.","isOptional":false,"isVarArg":false,"name":"id","type":"number"}],"description":"Retrieves an Entity previously stored using {{ClassFunction|Tool|SetObject}}.","examples":[],"isConstructor":false,"name":"GetEnt","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the current operation of the tool set by {{ClassFunction|Tool|SetOperation}}.","examples":[],"isConstructor":false,"name":"GetOperation","realm":"shared","returns":[{"description":"The current operation the tool is at.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the owner of this tool.","examples":[],"isConstructor":false,"name":"GetOwner","realm":"shared","returns":[{"description":"Player using the tool","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the convar to retrieve. The function will automatically add the \"mytoolfilename_\" part to it.","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Attempts to grab a serverside tool {{Type|ConVar}}.\nThis will not do anything on client, despite the function being defined shared.","examples":[],"isConstructor":false,"name":"GetServerInfo","realm":"shared","returns":[{"description":"The value of the requested {{Type|ConVar}}.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current stage of the tool set by {{ClassFunction|Tool|SetStage}}.","examples":[],"isConstructor":false,"name":"GetStage","realm":"shared","returns":[{"description":"The current stage of the current operation the tool is at.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the amount of stored objects ( {{Type|Entity}}s ) the tool has.","examples":[],"isConstructor":false,"name":"NumObjects","realm":"shared","returns":[{"description":"The amount of stored objects, or {{ClassFunction|Tool|GetStage}} clientide.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The id of the object to store.","isOptional":false,"isVarArg":false,"name":"id","type":"number"},{"default":"","description":"The entity to store.","isOptional":false,"isVarArg":false,"name":"ent","type":"Entity"},{"default":"","description":"The position to store. <br> {{Note|this position is in '''global space''' and is internally converted to '''local space''' relative to the object, so when you retrieve it later it will be corrected to the object's new position}}","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"The physics object to store.","isOptional":false,"isVarArg":false,"name":"phys","type":"PhysObj"},{"default":"","description":"The hit bone to store.","isOptional":false,"isVarArg":false,"name":"bone","type":"number"},{"default":"","description":"The hit normal to store.","isOptional":false,"isVarArg":false,"name":"norm","type":"Vector"}],"description":"Stores an {{Type|Entity}} for later use in the tool.","examples":[],"isConstructor":false,"name":"SetObject","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new operation ID to set.","isOptional":false,"isVarArg":false,"name":"operation","type":"number"}],"description":"Sets the current operation of the tool. Does nothing clientside. See also {{ClassFunction|Tool|SetStage}}.\n\nOperations and stages work as follows:\n* Operation 1\n** Stage 1\n** Stage 2\n** Stage 3\n* Operation 2\n** Stage 1\n** Stage 2\n** Stage ...","examples":[],"isConstructor":false,"name":"SetOperation","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new stage to set.","isOptional":false,"isVarArg":false,"name":"stage","type":"number"}],"description":"Sets the current stage of the tool. Does nothing clientside.\n\nSee also {{ClassFunction|Tool|SetOperation}}.","examples":[],"isConstructor":false,"name":"SetStage","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"Tool"},{"classFields":[{"default":"","description":"The X component of the vector","isOptional":false,"name":"x","type":"number"},{"default":"","description":"The Y component of the vector","isOptional":false,"name":"y","type":"number"},{"default":"","description":"The Z component of the vector","isOptional":false,"name":"z","type":"number"}],"collectionType":"class","customConstructor":"Vector","description":"List of all possible functions to manipulate vectors.\n\nCreated by {{GlobalFunction|Vector}} & many more functions.\n{{ClassFields\n|Fields=\n{{ClassField|number|x|The X component of the vector}}\n{{ClassField|number|y|The Y component of the vector}}\n{{ClassField|number|z|The Z component of the vector}}\n}}","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"0","description":"The x component of the vector.<br/>\nIf this is a {{Type|Vector}}, this function will return a copy of the given vector.<br/>\nIf this is a {{Type|string}}, this function will try to parse the string as a vector. If it fails, it returns a 0 vector.\n(See examples)","isOptional":true,"isVarArg":false,"name":"x","type":"number"},{"default":"0","description":"The y component of the vector.","isOptional":true,"isVarArg":false,"name":"y","type":"number"},{"default":"0","description":"The z component of the vector.","isOptional":true,"isVarArg":false,"name":"z","type":"number"}],"description":"Creates a {{Type|Vector}} object.","examples":[{"code":"print( Vector( 1, 2, 3 ) )\nprint( Vector( \"4 5 6\" ) )\nlocal test = Vector( 7, 8, 9 )\nprint( Vector( test ) )\n\nprint( Vector( \"4 5 test\" ) )\nprint( Vector() )","description":"Creates a vector and prints the value to the console."}],"isConstructor":true,"name":"constructor","realm":"shared and menu","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The vector to add.","isOptional":false,"isVarArg":false,"name":"vector","type":"Vector"}],"description":"Adds the values of the argument vector to the orignal vector. This functions the same as vector1 + vector2 without creating a new vector object, skipping object construction and garbage collection.","examples":[{"code":"a = Vector(1, 1, 1)\na:Add(Vector(1, 2, 3))\nprint(a)","description":"Adds the components of the vectors together."},{"code":"a = Vector(1, 1, 1)\nprint(a + Vector(1, 2, 3))","description":"If you don't want to set your vector to the result, and just return a new vector as the result. You can use a '+' operator to add two vectors together. The original vector will remain unchanged."}],"isConstructor":false,"name":"Add","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns an angle representing the normal of the vector.","examples":[],"isConstructor":false,"name":"Angle","realm":"shared","returns":[{"description":"The angle/direction of the vector.","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The up direction vector","isOptional":false,"isVarArg":false,"name":"up","type":"Vector"}],"description":"Returns the angle of the vector, but instead of assuming that up is {{GlobalFunction|Vector}}( 0, 0, 1 ) (Like {{ClassFunction|Vector|Angle}} does) you can specify which direction is 'up' for the angle.","examples":[{"code":"print( Vector( 0, 0, 100 ):AngleEx( Vector( 0, 0, 0 ) ) )","description":"Shows usage of the function"}],"isConstructor":false,"name":"AngleEx","realm":"shared","returns":[{"description":"The angle","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Vector to calculate the cross product with.","isOptional":false,"isVarArg":false,"name":"otherVector","type":"Vector"}],"description":"Calculates the cross product of this vector and the passed one.\n\nThe cross product of two vectors is a 3-dimensional vector with a direction perpendicular (at right angles) to both of them (according to the right-hand rule), and magnitude equal to the area of parallelogram they span. This is defined as the product of the magnitudes, the sine of the angle between them, and unit (normal) vector ''n'' defined by the right-hand rule:\n:'''a''' &times; '''b''' = &#124;'''a'''&#124; &#124;'''b'''&#124; sin(&theta;) '''n&#770;'''\nwhere '''a''' and '''b''' are vectors, and '''n&#770;''' is a unit vector (magnitude of 1) perpendicular to both.","examples":[],"isConstructor":false,"name":"Cross","realm":"shared","returns":[{"description":"The cross product of the two vectors.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The vector to get the distance to.","isOptional":false,"isVarArg":false,"name":"otherVector","type":"Vector"}],"description":"Returns the pythagorean distance between the vector and the other vector.\n\nThis is a relatively expensive process since it uses the square root. It is recommended that you use {{ClassFunction|Vector|DistToSqr}} whenever possible.","examples":[{"code":"print(Vector(0, 0, 0):Distance(Vector(2, 3, 4)))","description":"Gets the distance from A to B."}],"isConstructor":false,"name":"Distance","realm":"shared","returns":[{"description":"Distance between the vectors.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The vector to calculate the distance to.","isOptional":false,"isVarArg":false,"name":"otherVec","type":"Vector"}],"description":"Returns the squared distance of 2 vectors, this is faster than {{ClassFunction|Vector|Distance}} as calculating the square root is an expensive process.","examples":[{"code":"function PlayerWithinBounds(ply,otherPly, dist)\n\treturn ply:GetPos():DistToSqr(otherPly:GetPos()) < (dist*dist)\n\t-- This is computationally faster than:\n\t-- ply:GetPos():Distance(otherPly:GetPos()) < dist\nend\nprint(PlayerWithinBounds(Entity(1),Entity(2),500))","description":"Checks if a player is within `dist` units of another player in the most efficient way possible."}],"isConstructor":false,"name":"DistToSqr","realm":"shared","returns":[{"description":"Squared distance to the vector","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to divide the vector with.","isOptional":false,"isVarArg":false,"name":"divisor","type":"number"}],"description":"Divide the vector by the given number, that means x, y and z are divided by that value. This will change the value of the original vector, see example 2 for division without changing the value.","examples":[{"code":"a = Vector(255, 130, 0)\na:Div(255)\nprint(a)","description":"Divides a vector by 255."},{"code":"a = Vector(255, 255, 255)\nprint(a/255)","description":"If you don't want to set your vector to the result, and just return a new vector as the result. You can use a ' / ' operator to divide a vector with a divisor."}],"isConstructor":false,"name":"Div","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The vector to calculate the dot product with","isOptional":false,"isVarArg":false,"name":"otherVector","type":"Vector"}],"description":"Returns the [[wikipedia:Dot product#Geometric definition|dot product]] of this vector and the passed one.\n\nThe dot product of two vectors is the product of their magnitudes (lengths), and the cosine of the angle between them:\n:'''a &middot; b''' = &#124;'''a'''&#124; &#124;'''b'''&#124; cos(&theta;)\nwhere '''a''' and '''b''' are vectors. See {{ClassFunction|Vector|Length}} for obtaining magnitudes.\n\nA dot product returns just the cosine of the angle if both vectors are normalized, and zero if the vectors are at right angles to each other.","examples":[{"code":"local a = Vector(0, 1, 0)\nlocal b = Vector(0, -1, 0)\n\nlocal dot = a:Dot(b) -- returns the cos(ang) of the two vectors because they're both of length 1\nprint(\"Radians\", math.acos(dot)) -- the inverse of the cosine to get the angle\nprint(\"Degrees\", math.deg(math.acos(dot))) -- Convert radians to degrees","description":"Get the angle of two opposite normalized vectors."},{"code":"local directionAng = math.pi / 8 \nlocal aimvector = ply:GetAimVector()\n-- The vector that goes from the player's shoot pos to the entity's position\nlocal entVector = ent:GetPos() - ply:GetShootPos() \nlocal dot = aimvector:Dot(entVector) / entVector:Length()\nprint(dot < directionAng)","description":"Calculates whether the player is looking in the direction of an entity. This is often faster than traces, but it produces a slightly different result.\n\nThe player is looking in the direction of the entity if the angle between the aimvector and the vector from the player to the entity is less than 45 degrees (or pi / 8 radians)."},{"code":"function IsLookingAt( ply, targetVec )\n return ply:GetAimVector():Dot( ( targetVec - ply:GetPos() + Vector(70) ):GetNormalized() ) < 0.95 \nend","description":"A function to make sure the player is looking somewhere."}],"isConstructor":false,"name":"Dot","realm":"shared","returns":[{"description":"The dot product between the two vectors","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The other vector.","isOptional":false,"isVarArg":false,"name":"Vector","type":"Vector"}],"description":"{{Deprecated|This is an alias of {{ClassFunction|Vector|Dot}}. Use that instead.}}Returns the dot product of the two vectors.","examples":[{"code":"function IsLookingAt( ply, targetVec )\n return ply:GetAimVector():DotProduct( ( targetVec - ply:GetPos() + Vector(70) ):GetNormalized() ) < 0.95 \nend","description":"A function to make sure the player is looking somewhere."}],"isConstructor":false,"name":"DotProduct","realm":"shared","returns":[{"description":"Dot Product","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|Use {{ClassFunction|Vector|GetNormalized}} instead.}}\n\nReturns a normalized version of the vector. This is a alias of {{ClassFunction|Vector|GetNormalized}}.","examples":[],"isConstructor":false,"name":"GetNormal","realm":"shared","returns":[{"description":"Normalized version of the vector.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns a normalized version of the vector. Normalized means vector with same direction but with length of 1.\n\nThis does not affect the vector you call it on; to do this, use {{ClassFunction|Vector|Normalize}}.","examples":[],"isConstructor":false,"name":"GetNormalized","realm":"shared","returns":[{"description":"Normalized version of the vector.","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The vector to compare to.","isOptional":false,"isVarArg":false,"name":"compare","type":"Vector"},{"default":"","description":"The tolerance range.","isOptional":false,"isVarArg":false,"name":"tolerance","type":"number"}],"description":"Returns if the vector is equal to another vector with the given tolerance.","examples":[],"isConstructor":false,"name":"IsEqualTol","realm":"shared","returns":[{"description":"Are the vectors equal or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Checks whenever all fields of the vector are 0.","examples":[{"code":"a = Vector(0, 0, 0)\nprint(a:IsZero())","description":"Confirm that the Vector is indeed 0."}],"isConstructor":false,"name":"IsZero","realm":"shared","returns":[{"description":"Do all fields of the vector equal 0 or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the Euclidean length of the vector: &radic;<span style=\"text-decoration:overline;\">&nbsp;x&sup2; + y&sup2; + z&sup2;&nbsp;</span>","examples":[{"code":"print(Vector(15, 16, 17):Length())","description":"Gets the length of the vector."}],"isConstructor":false,"name":"Length","realm":"shared","returns":[{"description":"Length of the vector.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the length of the vector in two dimensions, without the Z axis.","examples":[],"isConstructor":false,"name":"Length2D","realm":"shared","returns":[{"description":"Length of the vector in two dimensions, &radic;<span style=\"text-decoration:overline;\">&nbsp;x&sup2; + y&sup2;&nbsp;</span>","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the squared length of the vectors x and y value, x&sup2; + y&sup2;.\n\nThis is faster than {{ClassFunction|Vector|Length2D}} as calculating the square root is an expensive process.","examples":[],"isConstructor":false,"name":"Length2DSqr","realm":"shared","returns":[{"description":"Squared length of the vector in two dimensions","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the squared length of the vector, x&sup2; + y&sup2; + z&sup2;.\n\nThis is faster than {{ClassFunction|Vector|Length}} as calculating the square root is an expensive process.","examples":[],"isConstructor":false,"name":"LengthSqr","realm":"shared","returns":[{"description":"Squared length of the vector","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to scale the vector with.","isOptional":false,"isVarArg":false,"name":"multiplier","type":"number"}],"description":"Scales the vector by the given number, that means x, y and z are multiplied by that value.","examples":[{"code":"a = Vector(1, 1, 1)\na:Mul(250)\nprint(a)","description":"Scales a vector by 250."},{"code":"a = Vector(1, 1, 1)\nprint(a*250)","description":"If you don't want to set your vector to the result, and just return a new vector as the result. You can use a ' * ' operator to multiply a vector with a scalar."}],"isConstructor":false,"name":"Mul","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Normalizes the given vector. This changes the vector you call it on, if you want to return a normalized copy without affecting the original, use {{ClassFunction|Vector|GetNormalized}}.","examples":[{"code":"local test = Vector(4, 3, 2)\ntest:Normalize()\nMsgN( test )","description":"Normalizes Vector(4, 3, 2)."}],"isConstructor":false,"name":"Normalize","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The angle to rotate the vector by.","isOptional":false,"isVarArg":false,"name":"rotation","type":"Angle"}],"description":"Rotates a vector by the given angle.\nDoesn't return anything, but rather changes the original vector.","examples":[],"isConstructor":false,"name":"Rotate","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The vector to copy from.","isOptional":false,"isVarArg":false,"name":"vector","type":"Vector"}],"description":"Copies the values from the second vector to the first vector.","examples":[{"code":"","description":""}],"isConstructor":false,"name":"Set","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The other vector.","isOptional":false,"isVarArg":false,"name":"vector","type":"Vector"}],"description":"Substracts the values of the second vector from the orignal vector, this function can be used to avoid garbage collection.","examples":[{"code":"a = Vector(5, 6, 7)\na:Sub(Vector(1, 2, 3))\nprint(a)","description":"Subtracts vector A's components with the other vector."},{"code":"a = Vector(5, 6, 7)\nprint(a-Vector(1, 2, 3))","description":"If you don't want to set your vector to the result, and just return a new vector as the result. You can use a ' - ' operator to subtract two vectors from each other."}],"isConstructor":false,"name":"Sub","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Translates the vector normalized vector ( length is 1 ) into a {{Struct|Color}}.\n\nx * 255 -> r<br>\ny * 255 -> g<br>\nz * 255 -> b","examples":[],"isConstructor":false,"name":"ToColor","realm":"shared","returns":[{"description":"The created {{Struct|Color}}.","type":"Color"}]},{"accessModifier":"public","arguments":[],"description":"Returns where on the screen the specified position vector would appear. A related function is {{LibraryFunction|gui|ScreenToVector}}, which converts a 2D coordinate to a 3D direction.\n\n{{Note|Should be called from a 3D rendering environment or after {{LibraryFunction|cam|Start3D}} or it may not work correctly.}}\n\n{{Bug|Issue=462|Errors in a render hook can make this value incorrect until the player restarts their game.}}\n\n{{Bug|Issue=1404|{{LibraryFunction|cam|Start3D}} or 3D context {{LibraryFunction|cam|Start}} with non-default parameters incorrectly sets the reference FOV for this function, causing incorrect return values. This can be fixed by creating and ending a default 3D context ({{LibraryFunction|cam|Start3D}} with no arguments).}}","examples":[],"isConstructor":false,"name":"ToScreen","realm":"client","returns":[{"description":"The created {{Struct|ToScreenData}}.","type":"ToScreenData"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The first vector.","isOptional":false,"isVarArg":false,"name":"boxStart","type":"Vector"},{"default":"","description":"The second vector.","isOptional":false,"isVarArg":false,"name":"boxEnd","type":"Vector"}],"description":"Returns whenever the given vector is in a box created by the 2 other vectors.","examples":[{"code":"-- Position to test, we get the position of first player on the server\nlocal testPos = Entity( 1 ):GetPos()\n\n-- Positions to test, in this case we test if the player is in spawn area of gm_construct\nlocal pos1 = Vector( 1119, 895, 63 )\nlocal pos2 = Vector( 656, -896, -144 )\n\n-- This will return true if the player is within the tested area\nprint( testPos:WithinAABox( pos1, pos2 ) )","description":"Checks if player is within a certain area on the map."}],"isConstructor":false,"name":"WithinAABox","realm":"shared","returns":[{"description":"Is the vector in the box or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Sets x, y and z to 0.","examples":[],"isConstructor":false,"name":"Zero","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"Vector"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"This is a list of all methods only available for vehicles. It is also possible to call [http://wiki.garrysmod.com/index.php?title=Category:Entity Entity] functions on vehicles.","examples":[],"extends":"Entity","functions":[{"accessModifier":"public","arguments":[],"description":"Returns the remaining boosting time left.","examples":[],"isConstructor":false,"name":"BoostTimeLeft","realm":"server","returns":[{"description":"The remaining boosting time left","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"yaw","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"distance","type":"number"},{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"endPoint","type":"Vector"}],"description":"","examples":[],"isConstructor":false,"name":"CheckExitPoint","realm":"server","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Enable or disable the engine","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Sets whether the engine is enabled or disabled, i.e. can be started or not.","examples":[],"isConstructor":false,"name":"EnableEngine","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns information about the ammo of the vehicle","examples":[],"isConstructor":false,"name":"GetAmmo","realm":"client","returns":[{"description":"Ammo type of the vehicle ammo","type":"number"},{"description":"Clip size","type":"number"},{"description":"Count","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns third person camera distance.","examples":[],"isConstructor":false,"name":"GetCameraDistance","realm":"shared","returns":[{"description":"Camera distance","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the driver of the vehicle, returns NULL if no driver is present.","examples":[],"isConstructor":false,"name":"GetDriver","realm":"server","returns":[{"description":"The driver of the vehicle","type":"Entity"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current speed of the vehicle in Half-Life Hammer Units (in/s). Same as {{ClassFunction|Entity|GetVelocity}} + {{ClassFunction|Vector|Length}}.","examples":[],"isConstructor":false,"name":"GetHLSpeed","realm":"server","returns":[{"description":"The speed of the vehicle","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the max speed of the vehicle in MPH.","examples":[],"isConstructor":false,"name":"GetMaxSpeed","realm":"server","returns":[{"description":"The max speed of the vehicle in MPH","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns some info about the vehicle.","examples":[{"code":"PrintTable( Entity(1):GetVehicle():GetOperatingParams() )","description":"Example output on a default Half-Life 2 Jeep."}],"isConstructor":false,"name":"GetOperatingParams","realm":"server","returns":[{"description":"The operating params. See {{Struct|OperatingParams}}.","type":"OperatingParams"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The index of the passenger","isOptional":false,"isVarArg":false,"name":"passenger","type":"number"}],"description":"Gets the passenger of the vehicle, returns NULL if no drivers is present.","examples":[],"isConstructor":false,"name":"GetPassenger","realm":"server","returns":[{"description":"The passenger","type":"Entity"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The passenger role. ( 1 is the driver )","isOptional":false,"isVarArg":false,"name":"role","type":"number"}],"description":"Returns the seat position and angle of a given passenger seat.","examples":[],"isConstructor":false,"name":"GetPassengerSeatPoint","realm":"server","returns":[{"description":"The seat position","type":"Vector"},{"description":"The seat angle","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current RPM of the vehicle. This value is fake and doesn't actually affect the vehicle movement.","examples":[],"isConstructor":false,"name":"GetRPM","realm":"server","returns":[{"description":"The RPM.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current speed of the vehicle in MPH.","examples":[],"isConstructor":false,"name":"GetSpeed","realm":"server","returns":[{"description":"The speed of the vehicle in MPH","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current steering of the vehicle.","examples":[],"isConstructor":false,"name":"GetSteering","realm":"server","returns":[{"description":"The current steering of the vehicle.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the maximum steering degree of the vehicle","examples":[],"isConstructor":false,"name":"GetSteeringDegrees","realm":"server","returns":[{"description":"The maximum steering degree of the vehicle","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns if vehicle has thirdperson mode enabled or not.","examples":[],"isConstructor":false,"name":"GetThirdPersonMode","realm":"shared","returns":[{"description":"Returns true if third person mode enabled, false otherwise","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the current throttle of the vehicle.","examples":[],"isConstructor":false,"name":"GetThrottle","realm":"server","returns":[{"description":"The current throttle of the vehicle","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the vehicle class name. This is only useful for Sandbox spawned vehicles or any vehicle that properly sets the vehicle class with {{ClassFunction|Vehicle|SetVehicleClass}}.","examples":[{"code":"local c = Entity(1):GetVehicle():GetVehicleClass()\nif ( !list.Get( \"Vehicles\" )[ c ] ) then return end\nlocal t = list.Get( \"Vehicles\" )[ c ]\nprint( t.Name )","description":"Prints the spawn menu name of the vehicle the player is currently in."}],"isConstructor":false,"name":"GetVehicleClass","realm":"shared","returns":[{"description":"The class name of the vehicle.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the vehicle parameters of given vehicle.","examples":[],"isConstructor":false,"name":"GetVehicleParams","realm":"server","returns":[{"description":"The vehicle parameters. See {{Struct|VehicleParams}}","type":"VehicleParams"}]},{"accessModifier":"public","arguments":[{"default":"0","description":"The passenger role. 0 is the driver. This parameter seems to be ignored by the game engine and is therefore optional.","isOptional":true,"isVarArg":false,"name":"role","type":"number"}],"description":"Returns the view position and forward angle of a given passenger seat.","examples":[],"isConstructor":false,"name":"GetVehicleViewPosition","realm":"server","returns":[{"description":"The view position, will be 0, 0, 0 on failure","type":"Vector"},{"description":"The view angles, will be 0, 0, 0 on failure","type":"Angle"},{"description":"The field of view, will be 0 on failure","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The wheel to retrieve","isOptional":false,"isVarArg":false,"name":"wheel","type":"number"}],"description":"Returns the {{Type|PhysObj}} of given wheel.","examples":[],"isConstructor":false,"name":"GetWheel","realm":"server","returns":[{"description":"The wheel","type":"PhysObj"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The wheel to get the base wheel height of.","isOptional":false,"isVarArg":false,"name":"wheel","type":"number"}],"description":"Returns the base wheel height.","examples":[],"isConstructor":false,"name":"GetWheelBaseHeight","realm":"server","returns":[{"description":"The base wheel height.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The wheel to check","isOptional":false,"isVarArg":false,"name":"wheel","type":"number"}],"description":"Returns the wheel contact point.","examples":[],"isConstructor":false,"name":"GetWheelContactPoint","realm":"server","returns":[{"description":"The contact position","type":"Vector"},{"description":"The Surface Properties ID of hit surface.","type":"number"},{"description":"Whether the wheel is on ground or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the wheel count of the vehicle","examples":[],"isConstructor":false,"name":"GetWheelCount","realm":"server","returns":[{"description":"The amount of wheels","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The wheel to get the base wheel height of.","isOptional":false,"isVarArg":false,"name":"wheel","type":"number"}],"description":"Returns the total wheel height.","examples":[],"isConstructor":false,"name":"GetWheelTotalHeight","realm":"server","returns":[{"description":"The total wheel height.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether this vehicle has boost at all.","examples":[],"isConstructor":false,"name":"HasBoost","realm":"server","returns":[{"description":"Whether this vehicle has boost at all.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether this vehicle has a brake pedal. See {{ClassFunction|Vehicle|SetHasBrakePedal}}.","examples":[],"isConstructor":false,"name":"HasBrakePedal","realm":"server","returns":[{"description":"Whether this vehicle has a brake pedal or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether this vehicle is currently boosting or not.","examples":[],"isConstructor":false,"name":"IsBoosting","realm":"server","returns":[{"description":"Whether this vehicle is currently boosting or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the engine is enabled or not, i.e. whether it can be started.","examples":[],"isConstructor":false,"name":"IsEngineEnabled","realm":"server","returns":[{"description":"Whether the engine is enabled","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the engine is started or not.","examples":[],"isConstructor":false,"name":"IsEngineStarted","realm":"server","returns":[{"description":"Whether the engine is started or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns true if the vehicle object is a valid or not. This will return false when {{Type|Vehicle}} functions are not usable on the vehicle.","examples":[],"isConstructor":false,"name":"IsValidVehicle","realm":"shared","returns":[{"description":"Is the vehicle a valid vehicle or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether this vehicle's engine is underwater or not. ( Internally the attachment point \"engine\" or \"vehicle_engine\" is checked )","examples":[],"isConstructor":false,"name":"IsVehicleBodyInWater","realm":"server","returns":[{"description":"Whether this vehicle's engine is underwater or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"","examples":[],"isConstructor":false,"name":"ReleaseHandbrake","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new boost value","isOptional":false,"isVarArg":false,"name":"boost","type":"number"}],"description":"Sets the boost. It is possible that this function does not work while the vehicle has a valid driver in it.","examples":[],"isConstructor":false,"name":"SetBoost","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Camera distance to set to","isOptional":false,"isVarArg":false,"name":"distance","type":"number"}],"description":"Sets the third person camera distance of the vehicle.","examples":[],"isConstructor":false,"name":"SetCameraDistance","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"","isOptional":false,"isVarArg":false,"name":"handbrake","type":"boolean"}],"description":"","examples":[],"isConstructor":false,"name":"SetHandbrake","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether this vehicle has a brake pedal","isOptional":false,"isVarArg":false,"name":"brakePedal","type":"boolean"}],"description":"Sets whether this vehicle has a brake pedal.","examples":[],"isConstructor":false,"name":"SetHasBrakePedal","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new maximum throttle. This number must be negative.","isOptional":false,"isVarArg":false,"name":"maxRevThrottle","type":"number"}],"description":"Sets maximum reverse throttle","examples":[],"isConstructor":false,"name":"SetMaxReverseThrottle","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new maximum throttle.","isOptional":false,"isVarArg":false,"name":"maxThrottle","type":"number"}],"description":"Sets maximum forward throttle","examples":[],"isConstructor":false,"name":"SetMaxThrottle","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The wheel to change spring length of","isOptional":false,"isVarArg":false,"name":"wheel","type":"number"},{"default":"","description":"The new spring length","isOptional":false,"isVarArg":false,"name":"length","type":"number"}],"description":"Sets spring length of given wheel","examples":[],"isConstructor":false,"name":"SetSpringLength","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Angle of the front wheels (-1 to 1)","isOptional":false,"isVarArg":false,"name":"front","type":"number"},{"default":"","description":"Angle of the rear wheels (-1 to 1)","isOptional":false,"isVarArg":false,"name":"rear","type":"number"}],"description":"Sets the steering of the vehicle.\n{{Validate|The correct range, 0 to 1 or -1 to 1}}","examples":[],"isConstructor":false,"name":"SetSteering","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new maximum steering degree","isOptional":false,"isVarArg":false,"name":"steeringDegrees","type":"number"}],"description":"Sets the maximum steering degrees of the vehicle","examples":[],"isConstructor":false,"name":"SetSteeringDegrees","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Enable or disable the third person mode for this vehicle","isOptional":false,"isVarArg":false,"name":"enable","type":"boolean"}],"description":"Sets the third person mode state.","examples":[],"isConstructor":false,"name":"SetThirdPersonMode","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new throttle.","isOptional":false,"isVarArg":false,"name":"throttle","type":"number"}],"description":"Sets the throttle of the vehicle. It is possible that this function does not work with a valid driver in it.","examples":[],"isConstructor":false,"name":"SetThrottle","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The vehicle class name to set","isOptional":false,"isVarArg":false,"name":"classRef","type":"string"}],"description":"{{Internal}}Sets the vehicle class name.","examples":[],"isConstructor":false,"name":"SetVehicleClass","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Whether the entry or exit camera animation should be played or not.","isOptional":false,"isVarArg":false,"name":"bOn","type":"boolean"}],"description":"Sets whether the entry or exit camera animation should be played or not.","examples":[],"isConstructor":false,"name":"SetVehicleEntryAnim","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The new new vehicle parameters. See {{Struct|VehicleParams}}","isOptional":false,"isVarArg":false,"name":"params","type":"VehicleParams"}],"description":"Sets the vehicle parameters for given vehicle.\n\n{{Note|Not all variables from the {{Struct|VehicleParams}} can be set.}}\n\n{{Bug|Issue=2625|Because this method uses miles per hour but {{ClassFunction|Vehicle|GetVehicleParams}} returns Hammer units per second, this method incorrectly modifies the vehicle engine's \"boostMaxSpeed\", \"maxRevSpeed\" and \"maxSpeed\" even when not explicitly set in a call to this method.\n\n'''Workaround''': In order to retain the original values for these fields, call {{ClassFunction|Vehicle|GetVehicleParams}} yourself, convert the mentioned fields from Hammer units per second to miles per hour (1 MPH &asymp; 17.6 HU/s in this case) and add them to the table passed into the call to this setter. Avoid doing this repeatedly to avoid floating point inaccuracies over time (store the ready-calculated value for next time if possible).}}","examples":[],"isConstructor":false,"name":"SetVehicleParams","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The wheel to change the friction of","isOptional":false,"isVarArg":false,"name":"wheel","type":"number"},{"default":"","description":"The new friction to set","isOptional":false,"isVarArg":false,"name":"friction","type":"number"}],"description":"Sets friction of given wheel. {{Validate}} This function may be broken.","examples":[],"isConstructor":false,"name":"SetWheelFriction","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"True to start, false to stop","isOptional":false,"isVarArg":false,"name":"start","type":"boolean"}],"description":"Starts or stops the engine.","examples":[],"isConstructor":false,"name":"StartEngine","realm":"server","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"Vehicle"},{"classFields":[],"collectionType":"class","customConstructor":"Matrix","description":"List of all possible functions to manipulate matrices.\nThis object can be created by {{GlobalFunction|Matrix}}","examples":[],"extends":"","functions":[{"accessModifier":"public","arguments":[{"default":"{{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}","description":"Initial data to initialize the matrix with. Leave empty to initialize an identity matrix. See examples for usage.","isOptional":true,"isVarArg":false,"name":"data","type":"table"}],"description":"Returns a {{Type|VMatrix}} object.","examples":[{"code":"local M = Matrix()\nM:Translate( Vector( 4, 5, 6 ) )\nM:Scale( Vector( 1, 2, 3 ) )\n\n-- This matrix is equivalent:\nlocal M2 = Matrix( {\n\t{ 1, 0, 0, 4 },\n\t{ 0, 2, 0, 5 },\n\t{ 0, 0, 3, 6 },\n\t{ 0, 0, 0, 1 }\n} )","description":"Initializes a matrix, translates it by Vector( 4, 5, 6 ) and then scales it by Vector( 1, 2, 3 )."}],"isConstructor":true,"name":"constructor","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns the absolute rotation of the matrix.","examples":[],"isConstructor":false,"name":"GetAngles","realm":"shared","returns":[{"description":"Absolute rotation of the matrix","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Row of the field whose value is to be retrieved, from 1 to 4","isOptional":false,"isVarArg":false,"name":"row","type":"number"},{"default":"","description":"Column of the field whose value is to be retrieved, from 1 to 4","isOptional":false,"isVarArg":false,"name":"column","type":"number"}],"description":"Returns a specific field in the matrix.","examples":[],"isConstructor":false,"name":"GetField","realm":"shared","returns":[{"description":"The value of the specified field","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the forward direction of the matrix.\n\nie. The first column of the matrix, excluding the w coordinate.","examples":[],"isConstructor":false,"name":"GetForward","realm":"shared","returns":[{"description":"The forward direction of the matrix.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns an inverted matrix without modifying the original matrix.\n\nInverting the matrix will fail if its [https://en.wikipedia.org/wiki/Determinant determinant] is 0 or close to 0. (ie. its \"scale\" in any direction is 0.)\n\nSee also {{ClassFunction|VMatrix|GetInverseTR}}.","examples":[],"isConstructor":false,"name":"GetInverse","realm":"shared","returns":[{"description":"The inverted matrix if possible, nil otherwise","type":"VMatrix"}]},{"accessModifier":"public","arguments":[],"description":"Returns an inverted matrix without modifying the original matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.\n\nUsing this function on a matrix with modified scale may return an incorrect inverted matrix.\n\nTo get the inverse of a matrix that contains other modifications, see {{ClassFunction|VMatrix|GetInverse}}.","examples":[],"isConstructor":false,"name":"GetInverseTR","realm":"shared","returns":[{"description":"The inverted matrix.","type":"VMatrix"}]},{"accessModifier":"public","arguments":[],"description":"Gets the right direction of the matrix.\n\nie. The second column of the matrix, negated, excluding the w coordinate.","examples":[],"isConstructor":false,"name":"GetRight","realm":"shared","returns":[{"description":"The right direction of the matrix.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the absolute scale of the matrix.","examples":[],"isConstructor":false,"name":"GetScale","realm":"shared","returns":[{"description":"Absolute scale of the matrix","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Returns the absolute translation of the matrix.","examples":[],"isConstructor":false,"name":"GetTranslation","realm":"shared","returns":[{"description":"Absolute translation of the matrix","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Gets the up direction of the matrix.\n\nie. The third column of the matrix, excluding the w coordinate.","examples":[],"isConstructor":false,"name":"GetUp","realm":"shared","returns":[{"description":"The up direction of the matrix.","type":"Vector"}]},{"accessModifier":"public","arguments":[],"description":"Initializes the matrix as Identity matrix.","examples":[],"isConstructor":false,"name":"Identity","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Inverts the matrix.\n\nInverting the matrix will fail if its [https://en.wikipedia.org/wiki/Determinant determinant] is 0 or close to 0. (ie. its \"scale\" in any direction is 0.)\n\nIf the matrix cannot be inverted, it does not get modified.\n\nSee also {{ClassFunction|VMatrix|InvertTR}}.","examples":[],"isConstructor":false,"name":"Invert","realm":"shared","returns":[{"description":"Whether the matrix was inverted or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Inverts the matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.\n\nUsing this function on a matrix with modified scale may return an incorrect inverted matrix.\n\nTo invert a matrix that contains other modifications, see {{ClassFunction|VMatrix|Invert}}.","examples":[],"isConstructor":false,"name":"InvertTR","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns whether the matrix is equal to Identity matrix or not.","examples":[],"isConstructor":false,"name":"IsIdentity","realm":"shared","returns":[{"description":"Is the matrix an Identity matrix or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the matrix is a rotation matrix or not.\n\nTechnically it checks if the forward, right and up vectors are orthogonal and normalized.","examples":[],"isConstructor":false,"name":"IsRotationMatrix","realm":"shared","returns":[{"description":"Is the matrix a rotation matrix or not","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Rotation.","isOptional":false,"isVarArg":false,"name":"rotation","type":"Angle"}],"description":"Rotates the matrix by the given angle.\n\nPostmultiplies the matrix by a rotation matrix (A = AR).","examples":[],"isConstructor":false,"name":"Rotate","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Vector to scale with matrix with.","isOptional":false,"isVarArg":false,"name":"scale","type":"Vector"}],"description":"Scales the matrix by the given vector.\n\nPostmultiplies the matrix by a scaling matrix (A = AS).","examples":[],"isConstructor":false,"name":"Scale","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Value to scale the translation with.","isOptional":false,"isVarArg":false,"name":"scale","type":"number"}],"description":"Scales the absolute translation with the given value.","examples":[],"isConstructor":false,"name":"ScaleTranslation","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The matrix to copy values from.","isOptional":false,"isVarArg":false,"name":"src","type":"VMatrix"}],"description":"Copies values from the given matrix object.","examples":[],"isConstructor":false,"name":"Set","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New angles.","isOptional":false,"isVarArg":false,"name":"angle","type":"Angle"}],"description":"Sets the absolute rotation of the matrix.","examples":[],"isConstructor":false,"name":"SetAngles","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Row of the field to be set, from 1 to 4","isOptional":false,"isVarArg":false,"name":"row","type":"number"},{"default":"","description":"Column of the field to be set, from 1 to 4","isOptional":false,"isVarArg":false,"name":"column","type":"number"},{"default":"","description":"The value to set in that field","isOptional":false,"isVarArg":false,"name":"value","type":"number"}],"description":"Sets a specific field in the matrix.","examples":[],"isConstructor":false,"name":"SetField","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The forward direction of the matrix.","isOptional":false,"isVarArg":false,"name":"forward","type":"Vector"}],"description":"Sets the forward direction of the matrix.\n\nie. The first column of the matrix, excluding the w coordinate.","examples":[],"isConstructor":false,"name":"SetForward","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The right direction of the matrix.","isOptional":false,"isVarArg":false,"name":"forward","type":"Vector"}],"description":"Sets the right direction of the matrix.\n\nie. The second column of the matrix, negated, excluding the w coordinate.","examples":[],"isConstructor":false,"name":"SetRight","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The scale to set.","isOptional":false,"isVarArg":false,"name":"scale","type":"Vector"}],"description":"Modifies the scale of the matrix while preserving the rotation and translation.","examples":[],"isConstructor":false,"name":"SetScale","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"New translation.","isOptional":false,"isVarArg":false,"name":"translation","type":"Vector"}],"description":"Sets the absolute translation of the matrix.","examples":[],"isConstructor":false,"name":"SetTranslation","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The up direction of the matrix.","isOptional":false,"isVarArg":false,"name":"forward","type":"Vector"}],"description":"Sets the up direction of the matrix.\n\nie. The third column of the matrix, excluding the w coordinate.","examples":[],"isConstructor":false,"name":"SetUp","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Converts the matrix to a 4x4 table. See {{GlobalFunction|Matrix}} function.","examples":[],"isConstructor":false,"name":"ToTable","realm":"shared","returns":[{"description":"The 4x4 table.","type":"table"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Vector to translate the matrix by.","isOptional":false,"isVarArg":false,"name":"translation","type":"Vector"}],"description":"Translates the matrix by the given vector aka. adds the vector to the translation.\n\nPostmultiplies the matrix by a translation matrix (A = AT).","examples":[],"isConstructor":false,"name":"Translate","realm":"shared","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"VMatrix"},{"classFields":[],"collectionType":"class","customConstructor":"","description":"This is a list of all methods only available for weapons. It is also possible to call [http://wiki.garrysmod.com/index.php?title=Category:Entity Entity] functions on weapons.","examples":[],"extends":"Entity","functions":[{"accessModifier":"public","arguments":[],"description":"Returns whether the weapon allows to being switched from when a better ( {{ClassFunction|Weapon|GetWeight}} ) weapon is being picked up.","examples":[],"isConstructor":false,"name":"AllowsAutoSwitchFrom","realm":"shared","returns":[{"description":"Whether the weapon allows to being switched from.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the weapon allows to being switched to when a better ( {{ClassFunction|Weapon|GetWeight}} ) weapon is being picked up.","examples":[],"isConstructor":false,"name":"AllowsAutoSwitchTo","realm":"shared","returns":[{"description":"Whether the weapon allows to being switched to.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of function to call. If you want to call SWEP:MyFunc() on client, you type in \"MyFunc\"","isOptional":false,"isVarArg":false,"name":"functionName","type":"string"},{"default":"\"\"","description":"Arguments for the function, separated by spaces.\n{{Note|Only the second argument is passed as argument and must be a string}}","isOptional":true,"isVarArg":false,"name":"arguments","type":"string"}],"description":"Calls a SWEP function on client.\n\n{{Warning|This uses the {{Lib|usermessage}} internally, because of that, the combined length of the arguments of this function may not exceed 254 bytes/characters or the function will cease to function!}}","examples":[],"isConstructor":false,"name":"CallOnClient","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Returns how much primary ammo is in the magazine.","examples":[{"code":"print( player.GetByID( 1 ):GetActiveWeapon():Clip1() )","description":"Prints the amount of primary ammo in the magazine of the weapon the 1st player has equipped."}],"isConstructor":false,"name":"Clip1","realm":"shared","returns":[{"description":"The amount of primary ammo in the magazine.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns how much secondary ammo is in magazine.","examples":[{"code":"print( player.GetByID( 1 ):GetActiveWeapon():Clip2() )","description":"Prints the amount of seconday ammo in the magazine of the weapon the 1st player has equipped."}],"isConstructor":false,"name":"Clip2","realm":"shared","returns":[{"description":"The amount of secondary ammo in the magazine.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Sequence to use as reload animation. Uses the {{Enum|ACT}}.","isOptional":false,"isVarArg":false,"name":"act","type":"ACT"}],"description":"Forces the weapon to reload while playing given animation.","examples":[],"isConstructor":false,"name":"DefaultReload","realm":"shared","returns":[{"description":"Did reloading actually take place","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the sequence enumeration number that the weapon is playing.\n\n{{Bug|Issue=2543|This can return inconsistent results between the server and client.}}","examples":[{"code":"local wep = Entity(1):GetActiveWeapon()\n \nif ( IsValid( wep ) ) then // Makes sure that wep exists\n \n    print( wep:GetActivity() ) // Prints the sequence number\n \nend","description":"This will return the ACT_ENUM that is currently active for the weapon."}],"isConstructor":false,"name":"GetActivity","realm":"shared","returns":[{"description":"Current activity, see {{Enum|ACT}}. Returns 0 if the weapon doesn't have active sequence.","type":"ACT"}]},{"accessModifier":"public","arguments":[],"description":"Returns the hold type of the weapon.","examples":[],"isConstructor":false,"name":"GetHoldType","realm":"shared","returns":[{"description":"The hold type of the weapon. You can find a list of default hold types [[Hold_Types|here]].","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns maximum primary clip size","examples":[],"isConstructor":false,"name":"GetMaxClip1","realm":"shared","returns":[{"description":"Maximum primary clip size","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns maximum secondary clip size","examples":[],"isConstructor":false,"name":"GetMaxClip2","realm":"shared","returns":[{"description":"Maximum secondary clip size","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the next time the weapon can primary fire. ( Can call {{HookFunction|WEAPON|PrimaryAttack}} )","examples":[],"isConstructor":false,"name":"GetNextPrimaryFire","realm":"shared","returns":[{"description":"The time, relative to {{GlobalFunction|CurTime}}","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the next time the weapon can secondary fire. ( Can call {{HookFunction|WEAPON|SecondaryAttack}} )","examples":[],"isConstructor":false,"name":"GetNextSecondaryFire","realm":"shared","returns":[{"description":"The time, relative to {{GlobalFunction|CurTime}}","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Gets the primary ammo type of the given weapon.","examples":[],"isConstructor":false,"name":"GetPrimaryAmmoType","realm":"shared","returns":[{"description":"The ammo type ID.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the non-internal name of the weapon, that should be for displaying.\n\n{{Note|If that returns an untranslated message (#HL2_XX), use {{LibraryFunction|language|GetPhrase}} to see the \"nice\" name.}}\n{{Note|If SWEP.PrintName is not set in the Weapon or the Weapon Base then \"<MISSING SWEP PRINT NAME>\" will be returned.}}","examples":[],"isConstructor":false,"name":"GetPrintName","realm":"shared","returns":[{"description":"The \"nice\" name of the weapon.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Gets the ammo type of the given weapons secondary fire.","examples":[],"isConstructor":false,"name":"GetSecondaryAmmoType","realm":"shared","returns":[{"description":"The secondary ammo type ID.","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the slot of the weapon (slot numbers start from 0)","examples":[{"code":"local function IsSlotEmpty( ply, slot )\n\n\tslot = slot - 1 -- take away 1 from the slot number you want since it starts from 0\n\n\tlocal weptbl = ply:GetWeapons() -- get all the weapons the player has\n\n\tfor k,v in pairs( weptbl ) do -- loop through them\n\t\tif v:GetSlot() == slot then return false end -- check if the slot is the slot you wanted to check, if it is, return false\n\tend\n\n\treturn true -- otherwise return true\n\nend","description":"How you could use this function to check if a weapon slot was empty or not"}],"isConstructor":false,"name":"GetSlot","realm":"shared","returns":[{"description":"The slot of the weapon","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns slot position of the weapon","examples":[],"isConstructor":false,"name":"GetSlotPos","realm":"shared","returns":[{"description":"The slot position of the weapon","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns the view model of the weapon.","examples":[],"isConstructor":false,"name":"GetWeaponViewModel","realm":"shared","returns":[{"description":"The view model of the weapon.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the world model of the weapon.","examples":[],"isConstructor":false,"name":"GetWeaponWorldModel","realm":"shared","returns":[{"description":"The world model of the weapon.","type":"string"}]},{"accessModifier":"public","arguments":[],"description":"Returns the \"weight\" of the weapon, which is used when deciding which {{Type|Weapon}} is better by the engine.","examples":[],"isConstructor":false,"name":"GetWeight","realm":"shared","returns":[{"description":"The weapon \"weight\".","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the weapon has ammo left or not. It will return false when there's no ammo left in the magazine '''and''' when there's no reserve ammo left.\n\n{{Note|This will return true for weapons like crowbar, gravity gun, etc.}}","examples":[],"isConstructor":false,"name":"HasAmmo","realm":"shared","returns":[{"description":"Whether the weapon has ammo or not.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whenever the weapon is carried by the local player.","examples":[],"isConstructor":false,"name":"IsCarriedByLocalPlayer","realm":"client","returns":[{"description":"Is the weapon is carried by the local player or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Checks if the weapon is a SWEP or a built-in weapon.","examples":[],"isConstructor":false,"name":"IsScripted","realm":"shared","returns":[{"description":"Returns true if weapon is scripted ( SWEP ), false if not ( A built-in HL2 weapon )","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns whether the weapon is visible. The term visibility is not exactly what gets checked here, first it checks if the owner is a player, then checks if the active view model has EF_NODRAW flag NOT set.","examples":[],"isConstructor":false,"name":"IsWeaponVisible","realm":"shared","returns":[{"description":"Is visible or not","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Returns the time since this weapon last fired a bullet with {{ClassFunction|Entity|FireBullets}} in seconds. It is not networked.","examples":[],"isConstructor":false,"name":"LastShootTime","realm":"shared","returns":[{"description":"The time in seconds when the last bullet was fired.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Activity to play. See the {{Enum|ACT}} (specifically ACT_VM_).","isOptional":false,"isVarArg":false,"name":"act","type":"ACT"}],"description":"Forces weapon to play activity/animation.","examples":[],"isConstructor":false,"name":"SendWeaponAnim","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The amount of bullets the clip should contain","isOptional":false,"isVarArg":false,"name":"ammo","type":"number"}],"description":"Lets you change the number of bullets in the given weapons primary clip.","examples":[],"isConstructor":false,"name":"SetClip1","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The amount of bullets the clip should contain","isOptional":false,"isVarArg":false,"name":"ammo","type":"number"}],"description":"Lets you change the number of bullets in the given weapons secondary clip.","examples":[],"isConstructor":false,"name":"SetClip2","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the hold type. You can find all default hold types [[Hold_Types|here]]","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Sets the hold type of the weapon. This function also calls {{HookFunction|WEAPON|SetWeaponHoldType}} and properly networks it to all clients.\n\n{{Note|This only works on scripted weapons.}}\n\n{{Bug|Using this function on weapons held by bots will not network holdtype changes to clients if the world model is set to an empty string (SWEP.WorldModel {{eq}} \"\").}}","examples":[{"code":"function SWEP:Reload()\n\tself:SetHoldType( \"normal\" )\nend","description":"Puts a players hands down by its sides on [[WEAPON/Reload|reload]]."}],"isConstructor":false,"name":"SetHoldType","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"CurTime()","description":"The time in seconds when the last time the weapon was fired.","isOptional":true,"isVarArg":false,"name":"time","type":"number"}],"description":"Sets the time since this weapon last fired in seconds. Used in conjunction with {{ClassFunction|Weapon|LastShootTime}}","examples":[],"isConstructor":false,"name":"SetLastShootTime","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Time when player should be able to use primary fire again","isOptional":false,"isVarArg":false,"name":"time","type":"number"}],"description":"Sets when the weapon can fire again. Time should be based on {{GlobalFunction|CurTime}}.","examples":[],"isConstructor":false,"name":"SetNextPrimaryFire","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Time when player should be able to use secondary fire again","isOptional":false,"isVarArg":false,"name":"time","type":"number"}],"description":"Sets when the weapon can alt-fire again. Time should be based on {{GlobalFunction|CurTime}}.","examples":[],"isConstructor":false,"name":"SetNextSecondaryFire","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The name of the input that was triggered.","isOptional":false,"isVarArg":false,"name":"inputName","type":"string"},{"default":"","description":"The initial cause for the input getting triggered.","isOptional":false,"isVarArg":false,"name":"activator","type":"Entity"},{"default":"","description":"The entity that directly trigger the input.","isOptional":false,"isVarArg":false,"name":"called","type":"Entity"},{"default":"","description":"The data passed.","isOptional":false,"isVarArg":false,"name":"data","type":"string"}],"description":"Called when another entity fires an event to this entity.","examples":[{"code":"function SWEP:AcceptInput( name, activator, caller, data )\n\n\t-- Check for input and spawnflag\n\tif ( name == \"ConstraintBroken\" && self:HasSpawnFlags( 1 ) ) then\n\n\t\t-- Freeze the weapon\n\t\tlocal phys = self:GetPhysicsObject()\n\t\tif ( IsValid( phys ) ) then phys:EnableMotion( false ) end\n\t\n\t\t-- Remove the spawnflag so it doesn't freeze the weapon when it is dropped\n\t\tlocal newflags = bit.band( self:GetSpawnFlags(), bit.bnot( 1 ) )\n\t\tself:SetKeyValue( \"spawnflags\", newflags )\n\tend\nend","description":"A workaround for weapons created by maps not taking into account spawnflags."}],"isConstructor":false,"name":"AcceptInput","realm":"server","returns":[{"description":"Should we suppress the default action for this input?","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Allows you to adjust the mouse sensitivity. This hook only works if you haven't overridden {{HookFunction|GM|AdjustMouseSensitivity}}.","examples":[{"code":"function SWEP:AdjustMouseSensitivity()\n\treturn 0.5\nend","description":"Makes your sensitivity twice slower"}],"isConstructor":false,"name":"AdjustMouseSensitivity","realm":"client","returns":[{"description":"Sensitivity scale","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns how much of primary ammo the player has.","examples":[{"code":"function SWEP:Ammo1()\n\treturn self.Owner:GetAmmoCount( self.Weapon:GetPrimaryAmmoType() )\nend","description":"As defined in weapon_base"}],"isConstructor":false,"name":"Ammo1","realm":"shared","returns":[{"description":"The amount of primary ammo player has","type":"number"}]},{"accessModifier":"public","arguments":[],"description":"Returns how much of secondary ammo the player has.","examples":[{"code":"function SWEP:Ammo2()\n\treturn self.Owner:GetAmmoCount( self.Weapon:GetSecondaryAmmoType() )\nend","description":"As defined in weapon_base"}],"isConstructor":false,"name":"Ammo2","realm":"shared","returns":[{"description":"The amount of secondary ammo player has","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The owner of weapon","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"},{"default":"","description":"Current position of players view","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"Current angles of players view","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"},{"default":"","description":"Current FOV of players view","isOptional":false,"isVarArg":false,"name":"fov","type":"number"}],"description":"Allows you to adjust player view while this weapon in use.\n\nThis hook is called from the default implementation of {{HookFunction|GM|CalcView}} ([https://github.com/garrynewman/garrysmod/blob/master/garrysmod/gamemodes/base/gamemode/cl_init.lua#L376-L383]). Therefore, it will not be called if any other hook added to CalcView returns any value, or if the current gamemode overrides the default hook and does not call the SWEP function.\n\n{{Bug|Pull=1348|SWEPs that define this function will not work with the [[Global/TauntCamera|taunt camera.]]}}","examples":[],"isConstructor":false,"name":"CalcView","realm":"client","returns":[{"description":"New position of players view","type":"Vector"},{"description":"New angle of players view","type":"Angle"},{"description":"New FOV of players view","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The viewmodel entity","isOptional":false,"isVarArg":false,"name":"vm","type":"Entity"},{"default":"","description":"Original position (before viewmodel bobbing and swaying)","isOptional":false,"isVarArg":false,"name":"oldPos","type":"Vector"},{"default":"","description":"Original angle (before viewmodel bobbing and swaying)","isOptional":false,"isVarArg":false,"name":"oldAng","type":"Angle"},{"default":"","description":"Current position","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"Current angle","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"Allows overriding the position and angle of the viewmodel. This hook only works if you haven't overridden {{HookFunction|GM|CalcViewModelView}}.","examples":[],"isConstructor":false,"name":"CalcViewModelView","realm":"client","returns":[{"description":"New position","type":"Vector"},{"description":"New angle","type":"Angle"}]},{"accessModifier":"public","arguments":[],"description":"Helper function for checking for no ammo.","examples":[{"code":"function SWEP:CanPrimaryAttack()\n\n\tif ( self.Weapon:Clip1() <= 0 ) then\n\t\n\t\tself:EmitSound( \"Weapon_Pistol.Empty\" )\n\t\tself:SetNextPrimaryFire( CurTime() + 0.2 )\n\t\tself:Reload()\n\t\treturn false\n\t\t\n\tend\n\n\treturn true\n\nend","description":"As defined in weapon_base"}],"isConstructor":false,"name":"CanPrimaryAttack","realm":"shared","returns":[{"description":"Can use primary attack","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Helper function for checking for no ammo.","examples":[{"code":"function SWEP:CanSecondaryAttack()\n\n\tif ( self.Weapon:Clip2() <= 0 ) then\n\t\n\t\tself.Weapon:EmitSound( \"Weapon_Pistol.Empty\" )\n\t\tself.Weapon:SetNextSecondaryFire( CurTime() + 0.2 )\n\t\treturn false\n\t\t\n\tend\n\n\treturn true\n\nend","description":"As defined in weapon_base"}],"isConstructor":false,"name":"CanSecondaryAttack","realm":"shared","returns":[{"description":"Can use secondary attack","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Allows you to use any numbers you want for the ammo display on the HUD.\n\nCan be useful for weapons that don't use standard ammo.","examples":[{"code":"function SWEP:CustomAmmoDisplay()\n\tself.AmmoDisplay = self.AmmoDisplay or {} \n \n\tself.AmmoDisplay.Draw = true //draw the display?\n \n\tif self.Primary.ClipSize > 0 then\n\t\tself.AmmoDisplay.PrimaryClip = self:Clip1() //amount in clip\n\t\tself.AmmoDisplay.PrimaryAmmo = self:Ammo1() //amount in reserve\n\tend\n\tif self.Secondary.ClipSize > 0 then\n\t\tself.AmmoDisplay.SecondaryAmmo = self:Ammo2() // amount of secondary ammo\n\tend\n \n\treturn self.AmmoDisplay //return the table\nend","description":"How it would look with standard information"}],"isConstructor":false,"name":"CustomAmmoDisplay","realm":"client","returns":[{"description":"The new ammo display settings. A table with 4 possible keys:\n* {{FuncArg|boolean|Draw|Whether to draw the ammo display or not}}\n* {{FuncArg|number|PrimaryClip|Amount of primary ammo in the clip}}\n* {{FuncArg|number|PrimaryAmmo|Amount of primary ammo in the reserves}}\n* {{FuncArg|number|SecondaryAmmo|Amount of secondary ammo. It is shown like alt-fire for SMG1 and AR2 are shown.}}\n\nThere is '''no''' SecondaryClip!","type":"table"}]},{"accessModifier":"public","arguments":[],"description":"Called when player has just switched to this weapon.\n\n{{Note|Due to this hook being predicted, it is not called clientside in singleplayer at all, and in multiplayer it will not be called clientside if the weapon is switched with {{ClassFunction|Player|SelectWeapon}} or the \"use\" console command, however it will be called clientside with the default weapon selection menu and when using {{ClassFunction|CUserCmd|SelectWeapon}}}}","examples":[],"isConstructor":false,"name":"Deploy","realm":"shared","returns":[{"description":"Return true to allow switching away from this weapon using lastinv command","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"X coordinate of the crosshair.","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"Y coordinate of the crosshair.","isOptional":false,"isVarArg":false,"name":"y","type":"number"}],"description":"Called when the crosshair is about to get drawn, and allows you to override it.\n\n{{Note|This function will not be called if '''SWEP.DrawCrosshair''' set to false.}}\n\n{{Bug|Issue=2117|The arguments passed to this function are not affected by '''SWEP.AccurateCrosshair'''.}}","examples":[{"code":"function SWEP:DoDrawCrosshair( x, y )\n\tsurface.SetDrawColor( 0, 250, 255, 255 )\n\tsurface.DrawOutlinedRect( x - 32, y - 32, 64, 64 )\n\treturn true\nend","description":"Draws an outlined rectangle in place of the crosshair."}],"isConstructor":false,"name":"DoDrawCrosshair","realm":"client","returns":[{"description":"Return true to override the default crosshair.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"A {{Struct|TraceResult}} from player's eyes to the impact point","isOptional":false,"isVarArg":false,"name":"tr","type":"TraceResult"},{"default":"","description":"The damage type of bullet","isOptional":false,"isVarArg":false,"name":"damageType","type":"number"}],"description":"Called so the weapon can override the impact effects it makes.","examples":[{"code":"function SWEP:DoImpactEffect( tr, nDamageType )\n\n\tif ( tr.HitSky ) then return end\n\t\n\tlocal effectdata = EffectData()\n\teffectdata:SetOrigin( tr.HitPos + tr.HitNormal )\n\teffectdata:SetNormal( tr.HitNormal )\n\tutil.Effect( \"AR2Impact\", effectdata )\n\nend","description":"Makes the SWEP have the AR2 bullet impact effect."}],"isConstructor":false,"name":"DoImpactEffect","realm":"shared","returns":[{"description":"Return true to not do the default thing - which is to call UTIL_ImpactTrace in C++","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"This hook allows you to draw on screen while this weapon is in use.\n\nIf you want to draw a custom crosshair, consider using {{HookFunction|WEAPON|DoDrawCrosshair}} instead.","examples":[{"code":"function SWEP:DrawHUD()\n\n\t-- No crosshair when ironsights is on\n\tif ( self.Weapon:GetNetworkedBool( \"Ironsights\" ) ) then return end\n\n\tlocal x, y -- local, always\n\n\t-- If we're drawing the local player, draw the crosshair where they're aiming\n\t-- instead of in the center of the screen.\n\tif ( self.Owner == LocalPlayer() && self.Owner:ShouldDrawLocalPlayer() ) then\n\t\tlocal tr = util.GetPlayerTrace( self.Owner )\n\t\ttr.mask = ( CONTENTS_SOLID+CONTENTS_MOVEABLE+CONTENTS_MONSTER+CONTENTS_WINDOW+CONTENTS_DEBRIS+CONTENTS_GRATE+CONTENTS_AUX ) -- List the enums that should mask the crosshair on camrea/thridperson\n\t\tlocal trace = util.TraceLine( tr )\n\t\t\n\t\tlocal coords = trace.HitPos:ToScreen()\n\t\tx, y = coords.x, coords.y\n\n\telse\n\t\tx, y = ScrW() / 2.0, ScrH() / 2.0 -- Center of screen\n\tend\n\t\n\tlocal scale = 10 * self.Primary.Cone\n\tlocal LastShootTime = self.Weapon:GetNetworkedFloat( \"LastShootTime\", 0 )\n        -- Scale the size of the crosshair according to how long ago we fired our weapon\n\tscale = scale * (2 - math.Clamp( (CurTime() - LastShootTime) * 5, 0.0, 1.0 ))\n\t--                    R   G    B  Alpha\n\tsurface.SetDrawColor( 0, 255, 0, 255 ) -- Sets the color of the lines we're drawing\n\t\n-- Draw a crosshair\n\tlocal gap = 40 * scale\n\tlocal length = gap + 20 * scale\n        --                 x1,        y1, x2,     y2\n\tsurface.DrawLine( x - length, y, x - gap, y )\t-- Left\n\tsurface.DrawLine( x + length, y, x + gap, y )\t-- Right\n\tsurface.DrawLine( x, y - length, x, y - gap )\t-- Top\n\tsurface.DrawLine( x, y + length, x, y + gap )\t-- Bottom\n\nend","description":"Weapon:DrawHud() as defined in weapon_cs_base, with more notes"}],"isConstructor":false,"name":"DrawHUD","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"This hook allows you to draw on screen while this weapon is in use. This hook is called '''before''' {{HookFunction|WEAPON|DrawHUD}} and is equivalent of {{HookFunction|GM|HUDPaintBackground}}.","examples":[],"isConstructor":false,"name":"DrawHUDBackground","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"X coordinate of the selection panel","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"Y coordinate of the selection panel","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"Width of the selection panel","isOptional":false,"isVarArg":false,"name":"width","type":"number"},{"default":"","description":"Height of the selection panel","isOptional":false,"isVarArg":false,"name":"height","type":"number"},{"default":"","description":"Alpha value of the selection panel","isOptional":false,"isVarArg":false,"name":"alpha","type":"number"}],"description":"This hook draws the selection icon in the weapon selection menu.","examples":[{"code":"function SWEP:DrawWeaponSelection( x, y, wide, tall, alpha )\n\t\n\t-- Set us up the texture\n\tsurface.SetDrawColor( 255, 255, 255, alpha )\n\tsurface.SetTexture( self.WepSelectIcon )\n\t\n\t-- Lets get a sin wave to make it bounce\n\tlocal fsin = 0\n\t\n\tif ( self.BounceWeaponIcon == true ) then\n\t\tfsin = math.sin( CurTime() * 10 ) * 5\n\tend\n\t\n\t-- Borders\n\ty = y + 10\n\tx = x + 10\n\twide = wide - 20\n\t\n\t-- Draw that mother\n\tsurface.DrawTexturedRect( x + (fsin), y - (fsin),  wide-fsin*2 , ( wide / 2 ) + (fsin) )\n\t\n\t-- Draw weapon info box\n\tself:PrintWeaponInfo( x + wide + 20, y + tall * 0.95, alpha )\n\t\nend","description":"As defined in weapon_base"}],"isConstructor":false,"name":"DrawWeaponSelection","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when we are about to draw the world model.","examples":[{"code":"function SWEP:DrawWorldModel()\n\tself:DrawModel()\nend","description":"The default action - render the world model."}],"isConstructor":false,"name":"DrawWorldModel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when we are about to draw the translucent world model.","examples":[{"code":"function SWEP:DrawWorldModelTranslucent()\n\tself:DrawModel()\nend","description":"Do the default action - render it without any changes."}],"isConstructor":false,"name":"DrawWorldModelTranslucent","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The one who picked the weapon up. Can be {{Type|Player}} or {{Type|NPC}}.","isOptional":false,"isVarArg":false,"name":"NewOwner","type":"Player | NPC"}],"description":"Called when a player or NPC has picked the weapon up.","examples":[],"isConstructor":false,"name":"Equip","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The player who picked up the weapon","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"The player has picked up the weapon and has taken the ammo from it.\nThe weapon will be removed immidiately after this call.","examples":[],"isConstructor":false,"name":"EquipAmmo","realm":"server","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Position of the effect.","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"Angle of the effect.","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"},{"default":"","description":"The event ID of happened even. See [http://developer.valvesoftware.com/wiki/Animation_Events this page].","isOptional":false,"isVarArg":false,"name":"event","type":"number"},{"default":"","description":"Name or options of the event.","isOptional":false,"isVarArg":false,"name":"options","type":"string"}],"description":"Called before firing animation events, such as muzzle flashes or shell ejections.\n\nThis will only be called serverside for 3000-range events, and clientside for 5000-range  and other events.","examples":[{"code":"function SWEP:FireAnimationEvent( pos, ang, event, options )\n\t\n\t-- Disables animation based muzzle event\n\tif ( event == 21 ) then return true end\t\n\n\t-- Disable thirdperson muzzle flash\n\tif ( event == 5003 ) then return true end\n\nend","description":"Disables muzzle flashes. Taken from tool gun source code."},{"code":"function SWEP:FireAnimationEvent( pos, ang, event, options )\n\n\tif ( !self.CSMuzzleFlashes ) then return end\n\n\t-- CS Muzzle flashes\n\tif ( event == 5001 or event == 5011 or event == 5021 or event == 5031 ) then\n\t\n\t\tlocal data = EffectData()\n\t\tdata:SetFlags( 0 )\n\t\tdata:SetEntity( self.Owner:GetViewModel() )\n\t\tdata:SetAttachment( math.floor( ( event - 4991 ) / 10 ) )\n\t\tdata:SetScale( 1 ) -- Change me\n\n\t\tif ( self.CSMuzzleX ) then\n\t\t\tutil.Effect( \"CS_MuzzleFlash_X\", data )\n\t\telse\n\t\t\tutil.Effect( \"CS_MuzzleFlash\", data )\n\t\tend\n\t\n\t\treturn true\n\tend\n\nend","description":"Counter-Strike: Source like muzzle flashes."}],"isConstructor":false,"name":"FireAnimationEvent","realm":"shared","returns":[{"description":"Return true to disable the effect.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"This hook allows you to freeze players screen.<br>\n{{Note|Player will still be able to move or shoot}}","examples":[],"isConstructor":false,"name":"FreezeMovement","realm":"client","returns":[{"description":"Return true to freeze moving the view","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"This hook is for NPCs, you return what they should try to do with it.","examples":[{"code":"function SWEP:GetCapabilities()\n\n\treturn bit.bor( CAP_WEAPON_RANGE_ATTACK1, CAP_INNATE_RANGE_ATTACK1 )\n\nend","description":"As defined in weapon_base"}],"isConstructor":false,"name":"GetCapabilities","realm":"server","returns":[{"description":"A number defining what NPC should do with the weapon. Use the {{Enum|CAP}}.","type":"CAP"}]},{"accessModifier":"public","arguments":[],"description":"Allows you to override where the tracer effect comes from. ( Visual bullets )","examples":[],"isConstructor":false,"name":"GetTracerOrigin","realm":"client","returns":[{"description":"The new position to start tracer effect from","type":"Vector"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Current position","isOptional":false,"isVarArg":false,"name":"pos","type":"Vector"},{"default":"","description":"Current angle","isOptional":false,"isVarArg":false,"name":"ang","type":"Angle"}],"description":"This hook allows you to adjust view model position and angles.","examples":[],"isConstructor":false,"name":"GetViewModelPosition","realm":"client","returns":[{"description":"New position","type":"Vector"},{"description":"New angle","type":"Angle"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The weapon we are trying switch to.","isOptional":false,"isVarArg":false,"name":"weapon","type":"Entity"}],"description":"Called when weapon tries to holster.\n\n{{Bug|Issue=2854|This is called twice for every holster clientside, one in [[Prediction|prediction]] and one not.}}\n\n{{Bug|Issue=3133|This function is called serverside only before {{HookFunction|WEAPON|OnRemove}} is called.}}","examples":[{"code":"function SWEP:Holster( wep )\n\tif not IsFirstTimePredicted() then return end\n\tLocalPlayer():ChatPrint(\"Switched to: \"..(wep.PrintName or wep:GetClass()))\nend","description":"Returns the weapon switched to when when the weapon is being holstered."}],"isConstructor":false,"name":"Holster","realm":"shared","returns":[{"description":"Return true to allow weapon to holster","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The HUD element in question","isOptional":false,"isVarArg":false,"name":"element","type":"string"}],"description":"This hook determines which parts of the HUD to draw.","examples":[],"isConstructor":false,"name":"HUDShouldDraw","realm":"client","returns":[{"description":"Return false to hide this HUD element","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called when the weapon entity is created.\n\n{{Bug|Issue=2732|This is sometimes not called clientside. You can work around this by setting a variable in Initialize and check if it exists in {{HookFunction|WEAPON|Think}}. See the example below.}}\n\n{{Bug|Issue=3015|This is not called serverside after a quicksave.}}","examples":[{"code":"function SWEP:Initialize()\n\n\tself:SetHoldType( self.HoldType )\n\nend","description":"Sets the weapon hold type to SWEP.HoldType."},{"code":"function SWEP:Initialize()\n\tself.m_bInitialized = true\n\n\t-- Other code\nend\n\nfunction SWEP:Think()\n\tif (not self.m_bInitialized) then\n\t\tself:Initialize()\n\tend\n\n\t-- Other code\nend","description":"Fixes the function not being called clientside."}],"isConstructor":false,"name":"Initialize","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The key that was affected.","isOptional":false,"isVarArg":false,"name":"key","type":"string"},{"default":"","description":"The new value.","isOptional":false,"isVarArg":false,"name":"value","type":"string"}],"description":"Called when the engine sets a value for this scripted weapon.\n\nSee {{HookFunction|GM|EntityKeyValue}} for a hook that works for all entities.<br/>\nSee {{HookFunction|ENTITY|KeyValue}} for an [[:Category:WEAPON Hooks|SENT]] hook that works for scripted entities.","examples":[],"isConstructor":false,"name":"KeyValue","realm":"server","returns":[{"description":"Return true to suppress this KeyValue or return false or nothing to apply this key value.","type":"boolean"}]},{"accessModifier":"public","arguments":[],"description":"Called when weapon is dropped by {{ClassFunction|Player|DropWeapon}}.\n\nSee also {{HookFunction|WEAPON|OwnerChanged}}.","examples":[],"isConstructor":false,"name":"OnDrop","realm":"server","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called whenever the weapons Lua script is reloaded.","examples":[],"isConstructor":false,"name":"OnReloaded","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the swep is about to be removed.","examples":[],"isConstructor":false,"name":"OnRemove","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the weapon entity is reloaded from a Source Engine save (not the Sandbox saves or dupes) or on a changelevel (for example Half-Life 2 campaign level transitions).\n\nFor the {{Lib|duplicator}} callbacks, see {{HookFunction|ENTITY|OnDuplicated}}.\n\nSee also {{Lib|saverestore}} for relevant functions.","examples":[],"isConstructor":false,"name":"OnRestore","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when weapon is dropped or picked up by a new player.\n\nSee also {{HookFunction|WEAPON|OnDrop}}.","examples":[],"isConstructor":false,"name":"OwnerChanged","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"This is the view model entity after it is drawn","isOptional":false,"isVarArg":false,"name":"vm","type":"Entity"},{"default":"","description":"This is the weapon that is from the view model (same as self)","isOptional":false,"isVarArg":false,"name":"weapon","type":"Weapon"},{"default":"","description":"The owner of the view model","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Called after the view model has been drawn while the weapon in use. This hook is called from the default implementation of {{HookFunction|GM|PostDrawViewModel}}, and as such, will not occur if it has been overridden.\n\n{{HookFunction|WEAPON|ViewModelDrawn}} is an alternative hook which is always called before {{HookFunction|GM|PostDrawViewModel}}.","examples":[],"isConstructor":false,"name":"PostDrawViewModel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"This is the view model entity before it is drawn.","isOptional":false,"isVarArg":false,"name":"vm","type":"Entity"},{"default":"","description":"This is the weapon that is from the view model.","isOptional":false,"isVarArg":false,"name":"weapon","type":"Weapon"},{"default":"","description":"The the owner of the view model.","isOptional":false,"isVarArg":false,"name":"ply","type":"Player"}],"description":"Allows you to modify viewmodel while the weapon in use before it is drawn. This hook only works if you haven't overridden {{HookFunction|GM|PreDrawViewModel}}.","examples":[],"isConstructor":false,"name":"PreDrawViewModel","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when primary attack button ( +attack ) is pressed.\n\nSince this is a [[Prediction|predicted]] hook, as mentioned on the bottom of the page, it has some additional behaviour to it. This is the same with all [[:Category:Predicted_Hooks|predicted SWEP hooks]].\n\nWhen in singleplayer, this function is only called in the server realm. When in multiplayer, the hook will be called on both the server and the client in order to allow for [[Prediction|prediction]].\n\nYou can force the hook to always be called on client like this:\n<pre>\nif ( game.SinglePlayer() ) then self:CallOnClient( \"PrimaryAttack\" ) end\n</pre>\n\nNote that due to prediction, in multiplayer SWEP:PrimaryAttack is called multiple times per one \"shot\" with the gun. To work around that, use {{GlobalFunction|IsFirstTimePredicted}}.","examples":[{"code":"function SWEP:PrimaryAttack()\n\n\t-- Make sure we can shoot first\n\tif ( !self:CanPrimaryAttack() ) then return end\n\n\t-- Play shoot sound\n\tself.Weapon:EmitSound(\"Weapon_AR2.Single\")\n\t\n\t-- Shoot 1 bullet, 150 damage, 0.01 aimcone\n\tself:ShootBullet( 150, 1, 0.01 )\n\t\n\t-- Remove 1 bullet from our clip\n\tself:TakePrimaryAmmo( 1 )\n\t\n\t-- Punch the player's view\n\tself.Owner:ViewPunch( Angle( -1, 0, 0 ) )\n\nend","description":"This is how it is defined in weapon_base"}],"isConstructor":false,"name":"PrimaryAttack","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The x co-ordinate of box position","isOptional":false,"isVarArg":false,"name":"x","type":"number"},{"default":"","description":"The y co-ordinate of box position","isOptional":false,"isVarArg":false,"name":"y","type":"number"},{"default":"","description":"Alpha value for the box","isOptional":false,"isVarArg":false,"name":"alpha","type":"number"}],"description":"A convenience function that draws the weapon info box, used in {{HookFunction|WEAPON|DrawWeaponSelection}}.","examples":[{"code":"function SWEP:PrintWeaponInfo( x, y, alpha )\n\n\tif ( self.DrawWeaponInfoBox == false ) then return end\n\n\tif (self.InfoMarkup == nil ) then\n\t\tlocal str\n\t\tlocal title_color = \"<color=230,230,230,255>\"\n\t\tlocal text_color = \"<color=150,150,150,255>\"\n\t\t\n\t\tstr = \"<font=HudSelectionText>\"\n\t\tif ( self.Author != \"\" ) then str = str .. title_color .. \"Author:</color>\\t\"..text_color..self.Author..\"</color>\\n\" end\n\t\tif ( self.Contact != \"\" ) then str = str .. title_color .. \"Contact:</color>\\t\"..text_color..self.Contact..\"</color>\\n\\n\" end\n\t\tif ( self.Purpose != \"\" ) then str = str .. title_color .. \"Purpose:</color>\\n\"..text_color..self.Purpose..\"</color>\\n\\n\" end\n\t\tif ( self.Instructions != \"\" ) then str = str .. title_color .. \"Instructions:</color>\\n\"..text_color..self.Instructions..\"</color>\\n\" end\n\t\tstr = str .. \"</font>\"\n\t\t\n\t\tself.InfoMarkup = markup.Parse( str, 250 )\n\tend\n\t\n\tsurface.SetDrawColor( 60, 60, 60, alpha )\n\tsurface.SetTexture( self.SpeechBubbleLid )\n\t\n\tsurface.DrawTexturedRect( x, y - 64 - 5, 128, 64 ) \n\tdraw.RoundedBox( 8, x - 5, y - 6, 260, self.InfoMarkup:GetHeight() + 18, Color( 60, 60, 60, alpha ) )\n\t\n\tself.InfoMarkup:Draw( x+5, y+5, nil, nil, alpha )\n\t\nend","description":"As defined in weapon_base"}],"isConstructor":false,"name":"PrintWeaponInfo","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the reload key ( +reload ) is pressed.","examples":[],"isConstructor":false,"name":"Reload","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"{{Deprecated|This appears to be a left over from early GMod 12? days}}. Called every frame just before {{HookFunction|GM|RenderScene}}. Used by tool gun to render screens.","examples":[],"isConstructor":false,"name":"RenderScreen","realm":"client","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when secondary attack button ( +attack2 ) is pressed.\n\nFor issues with this hook being called rapidly on the client side, see the global function {{GlobalFunction|IsFirstTimePredicted}}.","examples":[{"code":"function SWEP:SecondaryAttack()\n\n\t-- Make sure we can shoot first\n\tif ( !self:CanSecondaryAttack() ) then return end\n\n\t-- Play shoot sound\n\tself.Weapon:EmitSound(\"Weapon_Shotgun.Single\")\n\t\n\t-- Shoot 9 bullets, 150 damage, 0.75 aimcone\n\tself:ShootBullet( 150, 9, 0.2 )\n\t\n\t-- Remove 1 bullet from our clip\n\tself:TakeSecondaryAmmo( 1 )\n\t\n\t-- Punch the player's view\n\tself.Owner:ViewPunch( Angle( -10, 0, 0 ) )\n\nend","description":"This is how it is defined in weapon_base"}],"isConstructor":false,"name":"SecondaryAttack","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The value to set deploy speed to. Negative will slow down playback.","isOptional":false,"isVarArg":false,"name":"speed","type":"number"}],"description":"Sets the weapon deploy speed. This value needs to match on client and server.","examples":[{"code":"function SWEP:SetDeploySpeed( speed )\n\tself.m_WeaponDeploySpeed = tonumber( speed )\nend","description":"As defined in weapon_base"}],"isConstructor":false,"name":"SetDeploySpeed","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the SWEP should set up its [[Networking Entities| Data Tables]].","examples":[{"code":"function SWEP:SetupDataTables()\n\tself:NetworkVar( \"Float\", 0, \"Damage\" )\n\tself:NetworkVar( \"Vector\", 0, \"MuzzlePos\" )\nend","description":"Sets up networked variables, adds functions SetDamage, GetDamage, SetMuzzlePos and GetMuzzlePos."}],"isConstructor":false,"name":"SetupDataTables","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"Name of the hold type. You can find all default hold types [[Hold_Types|here]]","isOptional":false,"isVarArg":false,"name":"name","type":"string"}],"description":"Sets the hold type of the weapon. This must be called on '''both''' the server and the client to work properly.\n\n'''NOTE:''' You should avoid calling this function and call {{ClassFunction|Weapon|SetHoldType}} now.","examples":[],"isConstructor":false,"name":"SetWeaponHoldType","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"The damage of the bullet","isOptional":false,"isVarArg":false,"name":"damage","type":"number"},{"default":"","description":"Amount of bullets to shoot","isOptional":false,"isVarArg":false,"name":"num_bullets","type":"number"},{"default":"","description":"Spread of bullets","isOptional":false,"isVarArg":false,"name":"aimcone","type":"number"}],"description":"A convenience function to shoot bullets.\n\n{{Bug|Pull=1502|This does not take SWEP.Primary/Secondary.Ammo into account.}}","examples":[{"code":"function SWEP:ShootBullet( damage, num_bullets, aimcone )\n\t\n\tlocal bullet = {}\n\tbullet.Num \t= num_bullets\n\tbullet.Src \t= self.Owner:GetShootPos() -- Source\n\tbullet.Dir \t= self.Owner:GetAimVector() -- Dir of bullet\n\tbullet.Spread \t= Vector( aimcone, aimcone, 0 )\t -- Aim Cone\n\tbullet.Tracer\t= 5 -- Show a tracer on every x bullets \n\tbullet.Force\t= 1 -- Amount of force to give to phys objects\n\tbullet.Damage\t= damage\n\tbullet.AmmoType = \"Pistol\"\n\t\n\tself.Owner:FireBullets( bullet )\n\t\n\tself:ShootEffects()\n\t\nend","description":"As defined in weapon_base"}],"isConstructor":false,"name":"ShootBullet","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"A convenience function to create shoot effects.","examples":[{"code":"function SWEP:ShootEffects()\n\n\tself.Weapon:SendWeaponAnim( ACT_VM_PRIMARYATTACK )  -- View model animation\n\tself.Owner:MuzzleFlash() -- Crappy muzzle light\n\tself.Owner:SetAnimation( PLAYER_ATTACK1 ) -- 3rd Person Animation\n\nend","description":"As defined in weapon_base"}],"isConstructor":false,"name":"ShootEffects","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Should this weapon be dropped when its owner dies?\n\nThis only works if the player has {{ClassFunction|Player|ShouldDropWeapon}} set to true.","examples":[],"isConstructor":false,"name":"ShouldDropOnDie","realm":"server","returns":[{"description":"Return true to drop the weapon, false otherwise. Default ( if you don't return anything ) is false.","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Amount of primary ammo to remove","isOptional":false,"isVarArg":false,"name":"amount","type":"number"}],"description":"A convenience function to remove primary ammo from clip.","examples":[{"code":"function SWEP:TakePrimaryAmmo( num )\n\t\n\t-- Doesn't use clips\n\tif ( self.Weapon:Clip1() <= 0 ) then \n\t\n\t\tif ( self:Ammo1() <= 0 ) then return end\n\t\t\n\t\tself.Owner:RemoveAmmo( num, self.Weapon:GetPrimaryAmmoType() )\n\t\n\treturn end\n\t\n\tself.Weapon:SetClip1( self.Weapon:Clip1() - num )\t\n\t\nend","description":"As defined in weapon_base"}],"isConstructor":false,"name":"TakePrimaryAmmo","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[{"default":"","description":"How much of secondary ammo to remove","isOptional":false,"isVarArg":false,"name":"amount","type":"number"}],"description":"A convenience function to remove secondary ammo from clip.","examples":[{"code":"function SWEP:TakeSecondaryAmmo( num )\n\t\n\t-- Doesn't use clips\n\tif ( self.Weapon:Clip2() <= 0 ) then \n\t\n\t\tif ( self:Ammo2() <= 0 ) then return end\n\t\t\n\t\tself.Owner:RemoveAmmo( num, self.Weapon:GetSecondaryAmmoType() )\n\t\n\treturn end\n\t\n\tself.Weapon:SetClip2( self.Weapon:Clip2() - num )\t\n\t\nend","description":"As defined in weapon_base"}],"isConstructor":false,"name":"TakeSecondaryAmmo","realm":"shared","returns":[]},{"accessModifier":"public","arguments":[],"description":"Called when the swep thinks.\n\nThis hook won't be called during the deploy animation and when using {{ClassFunction|Weapon|DefaultReload}}.\n\n{{Note|Despite being a predicted hook, this hook is called clientside in single player, however it will not be recognized as a predicted hook to {{ClassFunction|Player|GetCurrentCommand}}.}}\n\n{{Note|This hook will be called before Player movement is processed on the client, and after on the server.}}\n\n{{Bug|Issue=2855|This will not be run during deploy animations after a serverside-only deploy. This usually happens after picking up and dropping an object with +use.}}","examples":[],"isConstructor":false,"name":"Think","realm":"shared","returns":[{"description":"","type":"boolean"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The activity to translate","isOptional":false,"isVarArg":false,"name":"act","type":"number"}],"description":"Translate a player's Activity into a weapon's activity, depending on how you want the player to be holding the weapon.\n\nFor example, ACT_MP_RUN becomes ACT_HL2MP_RUN_PISTOL.","examples":[{"code":"function SWEP:TranslateActivity( act )\n\n\tif ( self.Owner:IsNPC() ) then\n\t\tif ( self.ActivityTranslateAI[ act ] ) then\n\t\t\treturn self.ActivityTranslateAI[ act ]\n\t\tend\n\t\treturn -1\n\tend\n\n\tif ( self.ActivityTranslate[ act ] != nil ) then\n\t\treturn self.ActivityTranslate[ act ]\n\tend\n\n\treturn -1\n\nend","description":"Default action"}],"isConstructor":false,"name":"TranslateActivity","realm":"shared","returns":[{"description":"The translated activity","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"The current/default FOV.","isOptional":false,"isVarArg":false,"name":"fov","type":"number"}],"description":"Allows to change players field of view while player holds the weapon.\n\n{{Bug|Issue=3564|This doesn't affect the opening of func_areaportals - {{ClassFunction|Player|GetFOV}} takes priority.}}","examples":[{"code":"function SWEP:TranslateFOV( fov )\n\treturn fov - 30\nend","description":"Reduces players FOV by 30."}],"isConstructor":false,"name":"TranslateFOV","realm":"client","returns":[{"description":"The target FOV.","type":"number"}]},{"accessModifier":"public","arguments":[{"default":"","description":"Players view model","isOptional":false,"isVarArg":false,"name":"ViewModel","type":"Entity"}],"description":"Called straight after the view model has been drawn. This is called before {{HookFunction|GM|PostDrawViewModel}} and {{HookFunction|WEAPON|PostDrawViewModel}}.","examples":[],"isConstructor":false,"name":"ViewModelDrawn","realm":"client","returns":[]}],"isHook":false,"isPureAbstract":false,"name":"Weapon"}],"structures":[{"description":"Tables used for bullets see {{LibraryFunction|game|AddAmmoType}}.","name":"AmmoData","structureFields":[{"default":"DMG_BULLET\n","description":"Damage type using {{Enum|DMG}}.\n\nRelated function is {{LibraryFunction|game|GetAmmoDamageType}}.","isOptional":true,"name":"dmgtype","type":"DMG"},{"default":"1000\n","description":"The force of the ammo.\n\nRelated function is {{LibraryFunction|game|GetAmmoForce}}.","isOptional":true,"name":"force","type":"number"},{"default":"0","description":"The maximum water splash size.","isOptional":true,"name":"maxsplash","type":"number"},{"default":"0","description":"The minimum water splash size.","isOptional":true,"name":"minsplash","type":"number"},{"default":"","description":"Name of the ammo.\n\nRelated functions are {{LibraryFunction|game|GetAmmoName}} and {{LibraryFunction|game|GetAmmoID}}.\n","isOptional":false,"name":"name","type":"string"},{"default":"10\n","description":"{{Note|Can also be a string pointing to a convar. The value will automatically update with the convar's.}}\n\nThe damage dealt to NPCs.\n\nRelated function is {{LibraryFunction|game|GetAmmoNPCDamage}}.","isOptional":true,"name":"npcdmg","type":"number"},{"default":"10\n","description":"{{Note|Can also be a string pointing to a convar. The value will automatically update with the convar's.}}\n\nThe damage dealt to players.\n\nRelated function is {{LibraryFunction|game|GetAmmoPlayerDamage}}.","isOptional":true,"name":"plydmg","type":"number"},{"default":"TRACER_NONE","description":"Tracer type using {{Enum|TRACER}}.","isOptional":true,"name":"tracer","type":"TRACER"},{"default":"9999\n","description":"{{Note|Can also be a string pointing to a convar. The value will automatically update with the convar's.}}\n\n{{Note|This does not actually affect ammo max carry. 9999 will always be the max.}}\n\nMaximum amount of ammo of this type the player should be able to carry in reserve.\n\nRelated function is {{LibraryFunction|game|GetAmmoMax}}.","isOptional":true,"name":"maxcarry","type":"number"},{"default":"0","description":"Flags for the ammo type using {{Enum|AMMO}}.","isOptional":true,"name":"flags","type":"AMMO"}]},{"description":"Table used by various functions, such as {{ClassFunction|Entity|GetAttachment}}.","name":"AngPos","structureFields":[{"default":"","description":"Angle object","isOptional":false,"name":"Ang","type":"Angle"},{"default":"","description":"Vector object","isOptional":false,"name":"Pos","type":"Vector"}]},{"description":"Table used by panel animation methods, primarily {{ClassFunction|Panel|AnimationThinkInternal}}, and returned by {{ClassFunction|Panel|NewAnimation}}.","name":"AnimationData","structureFields":[{"default":"","description":"The system time value returned by {{GlobalFunction|SysTime}} when the animation starts/will start.","isOptional":false,"name":"StartTime","type":"number"},{"default":"","description":"The system time value returned by {{GlobalFunction|SysTime}} when the animation ends/will end.","isOptional":false,"name":"EndTime","type":"number"},{"default":"-1","description":"The ease in/out level of the animation.","isOptional":true,"name":"Ease","type":"number"},{"default":"","description":"The callback function that will be called upon completion of the animation. The arguments passed to it are:\n* {{FuncArg|table|animData|This structure.}}\n* {{FuncArg|Panel|tgtPanel|The panel the animation was run on.}}\n","isOptional":false,"name":"OnEnd","type":"Function"},{"default":"","description":"The ''think'' function called every frame that will animate the panel object. This varies based on the animation. You can create a custom function for this if you aren't using the stock panel methods. The arguments passed to it are:\n* {{FuncArg|table|animData|This structure.}}\n* {{FuncArg|Panel|tgtPanel|The panel the animation is being run on.}}\n* {{FuncArg|number|fraction|The progress fraction of the animation, between 0 and 1. The change rate of this number will not be linear if you are easing.}}\n","isOptional":false,"name":"Think","type":"Function"},{"default":"","description":"The target position, or target translation of the panel object. Used by {{ClassFunction|Panel|MoveTo}} and {{ClassFunction|Panel|MoveBy}} respectively.","isOptional":false,"name":"Pos","type":"Vector"},{"default":"","description":"The position of the panel object when the animation started. Used by {{ClassFunction|Panel|MoveTo}} and {{ClassFunction|Panel|MoveBy}}.","isOptional":false,"name":"StartPos","type":"Vector"},{"default":"","description":"Whether to resize the panel horizontally or not. Only used by {{ClassFunction|Panel|SizeTo}}.","isOptional":false,"name":"SizeX","type":"boolean"},{"default":"","description":"Whether to resize the panel vertically or not. Only used by {{ClassFunction|Panel|SizeTo}}.","isOptional":false,"name":"SizeY","type":"boolean"},{"default":"(0, 0, 0)","description":"The target size of the panel object. Only used by {{ClassFunction|Panel|SizeTo}}.","isOptional":true,"name":"Size","type":"Vector"},{"default":"","description":"The size of the panel object when the animation started. Only used by {{ClassFunction|Panel|SizeTo}}.","isOptional":false,"name":"StartSize","type":"Vector"},{"default":"","description":"The target colour of the panel object. Only used by {{ClassFunction|Panel|ColorTo}}.","isOptional":false,"name":"Color","type":"table"},{"default":"","description":"The colour of the panel object when the animation started. Only used by {{ClassFunction|Panel|ColorTo}}.","isOptional":false,"name":"StartColor","type":"table"},{"default":"","description":"The target alpha (0-255) of the panel object. Only used by {{ClassFunction|Panel|AlphaTo}}.","isOptional":false,"name":"Alpha","type":"number"},{"default":"","description":"The alpha (0-255) of the panel object when the animation started. Only used by {{ClassFunction|Panel|AlphaTo}}.","isOptional":false,"name":"StartAlpha","type":"number"},{"default":"","description":"The speed to use for transitions when using linear interpolation (Lerp) animations. Only used by {{ClassFunction|Panel|LerpPositions}}.","isOptional":false,"name":"Speed","type":"number"},{"default":"","description":"Whether or not to use easing to make the panel 'jump' at its target, slowing as it approaches. Only used by {{ClassFunction|Panel|LerpPositions}}.","isOptional":false,"name":"UseGravity","type":"boolean"}]},{"description":"Table returned by {{ClassFunction|Entity|GetAttachments}}.","name":"AttachmentData","structureFields":[{"default":"","description":"Index of the attachment.","isOptional":false,"name":"id","type":"number"},{"default":"","description":"Name of the attachment.","isOptional":false,"name":"name","type":"string"}]},{"description":"Table returned by {{ClassFunction|Entity|GetBodyGroups}}.","name":"BodyGroupData","structureFields":[{"default":"","description":"Index of the body group.","isOptional":false,"name":"id","type":"number"},{"default":"","description":"Name of the body group.","isOptional":false,"name":"name","type":"string"},{"default":"","description":"Amount of subgroups.","isOptional":false,"name":"num","type":"number"}]},{"description":"Structure used for storing/restoring bone manipulations.\nData is stored from {{ClassFunction|Entity|GetManipulateBoneScale}}, {{ClassFunction|Entity|GetManipulateBoneAngles}}, and {{ClassFunction|Entity|GetManipulateBonePosition}}.\nData is restored using {{ClassFunction|Entity|ManipulateBoneScale}}, {{ClassFunction|Entity|ManipulateBoneAngles}}, and {{ClassFunction|Entity|ManipulateBonePosition}}.\n\nThe function {{LibraryFunction|duplicator|DoBoneManipulator}} and {{Struct|EntityCopyData}} use a table\ncontaining a BoneManipulationData structure for each bone (that has manipulations applied) with the bone ID as the struct index in the table.\n\nFields '''s''', '''a''', and '''p''' are set if they don't equal '''Vector( 1, 1, 1 )''', '''Angle( 0, 0, 0 )''', and '''Vector( 0, 0, 0 )''' respectively.","name":"BoneManipulationData","structureFields":[{"default":"nil","description":"The entity's scale manipulation of the bone","isOptional":true,"name":"s","type":"Vector"},{"default":"nil","description":"The entity's angle manipulation of the bone","isOptional":true,"name":"a","type":"Angle"},{"default":"nil","description":"The entity's position manipulation of the given bone","isOptional":true,"name":"p","type":"Vector"}]},{"description":"Tables used for bullets see {{ClassFunction|Entity|FireBullets}} and {{HookFunction|GM|EntityFireBullets}}.","name":"Bullet","structureFields":[{"default":"self\n","description":"The entity that should be reported as attacker eg. a player\n\nBy default this would be set to the entity {{ClassFunction|Entity|FireBullets}} is called on.","isOptional":true,"name":"Attacker","type":"Entity"},{"default":"nil\n","description":"Function to be called '''after''' the bullet was fired. The arguments are:\n* {{FuncArg|Entity|attacker}}\n* {{FuncArg|table|tr|See {{Struct|TraceResult}}}}\n* {{FuncArg|CTakeDamageInfo|dmgInfo}}","isOptional":true,"name":"Callback","type":"Function"},{"default":"1","description":"The damage dealt by the bullet","isOptional":true,"name":"Damage","type":"number"},{"default":"1","description":"The force of the bullets","isOptional":true,"name":"Force","type":"number"},{"default":"56756","description":"Maximum distance the bullet can travel","isOptional":true,"name":"Distance","type":"number"},{"default":"0","description":"The hull size of the bullet","isOptional":true,"name":"HullSize","type":"number"},{"default":"1","description":"The amount of bullets to fire","isOptional":true,"name":"Num","type":"number"},{"default":"1","description":"Show tracer for every x bullets","isOptional":true,"name":"Tracer","type":"number"},{"default":"\"\"","description":"The ammunition name","isOptional":true,"name":"AmmoType","type":"string"},{"default":"nil","description":"The tracer name. You can find a list of default effects [[Effects|here]].","isOptional":true,"name":"TracerName","type":"string"},{"default":"Vector( 0, 0, 0 )","description":"The fire direction","isOptional":true,"name":"Dir","type":"Vector"},{"default":"Vector( 0, 0, 0 )","description":"The spread, only x and y are needed","isOptional":true,"name":"Spread","type":"Vector"},{"default":"Vector( 0, 0, 0 )","description":"The position to fire the bullets from","isOptional":true,"name":"Src","type":"Vector"},{"default":"NULL","description":"The entity that the bullet will ignore when it will be shot.","isOptional":true,"name":"IgnoreEntity","type":"Entity"}]},{"description":"Table structure used {{HookFunction|GM|CalcView}} and {{HookFunction|GM|CalcVehicleView}} hook.","name":"CamData","structureFields":[{"default":"","description":"The camera's position","isOptional":false,"name":"origin","type":"Vector"},{"default":"","description":"The camera's angles","isOptional":false,"name":"angles","type":"Angle"},{"default":"","description":"The camera's FOV","isOptional":false,"name":"fov","type":"number"},{"default":"","description":"Distance to near clipping plane","isOptional":false,"name":"znear","type":"number"},{"default":"","description":"Distance to far clipping plane","isOptional":false,"name":"zfar","type":"number"},{"default":"false","description":"Set true to draw local players player model.","isOptional":true,"name":"drawviewer","type":"boolean"},{"default":"nil\n","description":"If set, enables orthographic mode. The table has following arguments:\n* {{FuncArg|number|left}}\n* {{FuncArg|number|right}}\n* {{FuncArg|number|top}}\n* {{FuncArg|number|bottom}}","isOptional":true,"name":"ortho","type":"table"}]},{"description":"Passed as argument of {{HookFunction|ENTITY|PhysicsCollide}}.\n\n{{Note|Sometimes, the value of 'Speed' can be different from getting the length calculated from 'OurOldVelocity', even though they should be the same, or close to same. It's recommended to do 'OurOldVelocity:Length()' instead. \n<pre>\nENT:PhysicsCollide( colData, collider )\n    -- you may get two completely different values, and the second one should be more accurate.\n    print(colData.Speed)\n    print(colData.OurOldVelocity:Length())\nend\n</pre> }}","name":"CollisionData","structureFields":[{"default":"","description":"The collision position","isOptional":false,"name":"HitPos","type":"Vector"},{"default":"","description":"The other collision entity","isOptional":false,"name":"HitEntity","type":"Entity"},{"default":"","description":"The entity's velocity before the collision","isOptional":false,"name":"OurOldVelocity","type":"Vector"},{"default":"","description":"Other entity's physics object","isOptional":false,"name":"HitObject","type":"PhysObj"},{"default":"","description":"Time since the last collision ''with this HitEntity''","isOptional":false,"name":"DeltaTime","type":"number"},{"default":"","description":"Speed of the other entity before the collision","isOptional":false,"name":"TheirOldVelocity","type":"Vector"},{"default":"","description":"The speed of the entity before the collision","isOptional":false,"name":"Speed","type":"number"},{"default":"","description":"Normal of the surface that hit the other entity","isOptional":false,"name":"HitNormal","type":"Vector"},{"default":"","description":"Entity's physics object","isOptional":false,"name":"PhysObject","type":"PhysObj"}]},{"description":"Table created by the {{GlobalFunction|Color}} function and used in various situations.","name":"Color","structureFields":[{"default":"","description":"The red channel","isOptional":false,"name":"r","type":"number"},{"default":"","description":"The green channel","isOptional":false,"name":"g","type":"number"},{"default":"","description":"The blue channel","isOptional":false,"name":"b","type":"number"},{"default":"","description":"The alpha channel","isOptional":false,"name":"a","type":"number"}]},{"description":"Table that maintains information on the creation menu tabs. Each key of the table represents the name of the tab. See {{LibraryFunction|spawnmenu|AddCreationTab}} and {{LibraryFunction|spawnmenu|GetCreationTabs}}.","name":"CreationMenus","structureFields":[{"default":"","description":"The function used to generate the content of the tab.","isOptional":false,"name":"Function","type":"Function"},{"default":"","description":"The icon material that will accompany the title of the tab.","isOptional":false,"name":"Icon","type":"string"},{"default":"","description":"The order in which a tab will be displayed relative to the other tabs.","isOptional":false,"name":"Order","type":"number"},{"default":"","description":"The tooltip to be shown with the tab.","isOptional":false,"name":"Tooltip","type":"string"}]},{"description":"Table returned by {{LibraryFunction|os|date}} and used by {{LibraryFunction|os|time}}.","name":"DateData","structureFields":[{"default":"","description":"Day of the month","isOptional":false,"name":"day","type":"number"},{"default":"","description":"Hour","isOptional":false,"name":"hour","type":"number"},{"default":"","description":"Daylight saving enabled","isOptional":false,"name":"isdst","type":"boolean"},{"default":"","description":"Minute","isOptional":false,"name":"min","type":"number"},{"default":"","description":"Month<br>\nJanuary: 1, December: 12\n","isOptional":false,"name":"month","type":"number"},{"default":"","description":"Second","isOptional":false,"name":"sec","type":"number"},{"default":"","description":"Day of the week<br>\nSunday: 1, Saturday: 7\n","isOptional":false,"name":"wday","type":"number"},{"default":"","description":"Day of the year","isOptional":false,"name":"yday","type":"number"},{"default":"","description":"Year","isOptional":false,"name":"year","type":"number"}]},{"description":"Table returned by {{LibraryFunction|debug|getinfo}}.\n\n{{Note|If a filter is applied to {{LibraryFunction|debug|getinfo}}, some members may not exist!}}\n\nFor functions defined in C/C++, the following members will always have the given values: \n* what = \"C\"\n* source = \"[C]\"\n* nparams = 0\n* isvararg = true\n* namewhat = \"\"\n* short_src = \"[C]\"\n* linedefined = -1\n* currentline = -1\n* lastlinedefined = -1","name":"DebugInfo","structureFields":[{"default":"","description":"Reference to the function that was passed in. If a stack level was specified, this will be the function at that stack level. 0 {{eq}} debug.getinfo, 1 {{eq}} function that called debug.getinfo, etc.\n\n'''Option: f'''\n","isOptional":false,"name":"func","type":"Function"},{"default":"","description":"The line where the function definiton starts (where \"function\" is located).\n\n'''Option: S'''\n","isOptional":false,"name":"linedefined","type":"number"},{"default":"","description":"The line the function definition ended (where \"end\" is located).\n\n'''Option: S'''\n","isOptional":false,"name":"lastlinedefined","type":"number"},{"default":"","description":"The path to the file where the passed function is defined prepended by an @ (ex. \"@lua/autorun/mytestfile.lua\"). This will be the {{GlobalFunction|CompileString}} or {{GlobalFunction|RunString}} identifier if the function wasn't defined in a file, also prepended by an @.\n\n'''Option: S'''\n","isOptional":false,"name":"source","type":"string"},{"default":"","description":"The shortened name of the source (without the @). May be truncated if the source path is long.\n\n'''Option: S'''\n","isOptional":false,"name":"short_src","type":"string"},{"default":"","description":"The language used. Either \"Lua\" or \"C\".\n\n'''Option: S'''\n","isOptional":false,"name":"what","type":"string"},{"default":"","description":"The current line. This will be -1 if the code is not executed from a file.\n\n'''Option: l''' (lowercase L)\n","isOptional":false,"name":"currentline","type":"number"},{"default":"","description":"The function name. This will be nil if the name cannot be found. Only works if stack level is passed rather than function pointer.\n\n'''Option: n'''\n","isOptional":false,"name":"name","type":"string"},{"default":"","description":"The function \"type\". This will be \"global\", \"local\", \"method\", \"field\". Can also be an empty string if the function name could not be found. Only works if stack level is passed rather than function pointer.\n\n'''Option: n'''\n","isOptional":false,"name":"namewhat","type":"string"},{"default":"","description":"Whether the function is variadic (has a <kbd>...</kbd> argument).\n\n'''Option: u'''\n","isOptional":false,"name":"isvararg","type":"boolean"},{"default":"","description":"The number of arguments the function uses excluding varargs.\n\n'''Option: u'''\n","isOptional":false,"name":"nparams","type":"number"},{"default":"","description":"Upvalue count. Max index that can be used with {{LibraryFunction|debug|getupvalue}}. C functions can have upvalues but they cannot be accessed from Lua.\n\n'''Option: u'''\n","isOptional":false,"name":"nups","type":"number"},{"default":"","description":"A table of all the active lines in the function - that is, lines with code that actually does something (not blank lines or lines with comments only).\n\nThe table keys will be line numbers, and their values will all be true. Lines that are inactive are simply not included in the table - they have the value nil.\n\n'''Option: L'''\n","isOptional":false,"name":"activelines","type":"table"}]},{"description":"Structure for {{GlobalFunction|DynamicLight}}.\nAll members are case insensitive.\n\n{{Note|This is an actual class named '''dlight_t''', not a table.}}","name":"DynamicLight","structureFields":[{"default":"","description":"The brightness of the light.","isOptional":false,"name":"brightness","type":"number"},{"default":"","description":"Fade out speed.\nHere's a formula for calculating Decay for your light: 1000 / fadeOutTimeInSeconds. For example setting decay to 1000 would fade out the light in 1 second, 2000 - 0.5 seconds.\n","isOptional":false,"name":"decay","type":"number"},{"default":"","description":"Time after which light will be removed.\n\nThis is relative to {{GlobalFunction|CurTime}}. If you put in a value that is less than or equal to {{GlobalFunction|CurTime}}, the light will not behave properly.\n\nNote, that it does not affect fading out. Light will be removed regardless of it being fully faded out or not.\n","isOptional":false,"name":"dietime","type":"number"},{"default":"Vector( 0, 0, 0 )","description":"The light direction. Used with '''InnerAngle''' and '''OuterAngle'''.","isOptional":true,"name":"dir","type":"Vector"},{"default":"0","description":"The closer this is to zero, the smoother the light will be. Requires '''Dir''' and '''OuterAngle''' to be set.","isOptional":true,"name":"innerangle","type":"number"},{"default":"0","description":"The angle of the Dynamic Light. Requires '''Dir''' to be set.","isOptional":true,"name":"outerangle","type":"number"},{"default":"","description":"Makes the light brighter and flicker? Changing the value does not seem to affect anything.","isOptional":false,"name":"key","type":"number"},{"default":"0","description":"Minimum light","isOptional":true,"name":"minlight","type":"number"},{"default":"false","description":"Don't light the world","isOptional":true,"name":"noworld","type":"boolean"},{"default":"false","description":"Don't light models","isOptional":true,"name":"nomodel","type":"boolean"},{"default":"","description":"Position of the light","isOptional":false,"name":"pos","type":"Vector"},{"default":"","description":"Radius of the light","isOptional":false,"name":"size","type":"number"},{"default":"","description":"Flicker style, see [https://developer.valvesoftware.com/wiki/Light_dynamic#Appearances this page] for examples.","isOptional":false,"name":"style","type":"number"},{"default":"","description":"The blue part of the color","isOptional":false,"name":"b","type":"number"},{"default":"","description":"The green part of the color","isOptional":false,"name":"g","type":"number"},{"default":"","description":"The red part of the color","isOptional":false,"name":"r","type":"number"}]},{"description":"Passed as argument of {{HookFunction|GM|EntityEmitSound}}.","name":"EmitSoundInfo","structureFields":[{"default":"","description":"The file path of the played sound.\n\nSounds prefixed with ) tell the sound engine that it is a spatial sound; this allows the sound to emit from a specific location within the world.\n\nSounds prefixed with ^ tell the sound engine that it is a distance based sound. The left channel of the .wav is the 'near' sound that will play when the sound originates close to you, and the right channel is the 'far' sound that will play when the sound originates far from you.\n","isOptional":false,"name":"SoundName","type":"string"},{"default":"","description":"The original file path or soundscript name.\n\nEven if the SoundName value is changed, the OriginalSoundName value will remain the same.\n\nSounds may be returned as soundscripts (for example, \"Weapon_357.Single\") instead of the sound's file path. You can use {{LibraryFunction|sound|GetProperties}} to retrieve the actual file path.\n","isOptional":false,"name":"OriginalSoundName","type":"string"},{"default":"0\n","description":"The time at which the sound should be played.\n\nIf equal to 0 or CurTime(), the sound is played immediately. If greater than CurTime(), the sound is played with a delay. If less than CurTime(), part of the sound is skipped.","isOptional":true,"name":"SoundTime","type":"number"},{"default":"0\n","description":"The DSP (digital signal processing) preset applied to the sound.\n\nThere are approximately 134 different presets defined by the Source engine between 0 and 133. These presets represent different types of 'rooms' or environments.\n\n[https://developer.valvesoftware.com/wiki/Dsp_presets List of DSP's]","isOptional":true,"name":"DSP","type":"number"},{"default":"75\n","description":"The sound's attenuation, a number between 0 (low) and 511 (high)\n\nThis determines how fast the sound drops away. A higher value means the sound can be heard farther away.\n\nSee {{Enum|SNDLVL}}.","isOptional":true,"name":"SoundLevel","type":"SNDLVL"},{"default":"100","description":"The pitch of the played sound, a number between 0 (low) and 255 (high), where 100 is the sound's original pitch.","isOptional":true,"name":"Pitch","type":"number"},{"default":"0","description":"The bit flags of the played sound. See {{Enum|SND}} for available options.","isOptional":true,"name":"Flags","type":"SND"},{"default":"","description":"The sound's channel. See {{Enum|CHAN}} for available options.","isOptional":false,"name":"Channel","type":"CHAN"},{"default":"","description":"The volume of the played sound, return as a decimal number between 0 (low) and 1 (high).","isOptional":false,"name":"Volume","type":"number"},{"default":"","description":"The entity that played the sound.","isOptional":false,"name":"Entity","type":"Entity"},{"default":"","description":"The origin of the played sound.","isOptional":false,"name":"Pos","type":"Vector"}]},{"description":"Information about the ENT structure.<br/>\nTo learn more about scripted entities, [[Scripted_Entities|see this page]].\n<br/>\nFor list of callbacks, see [[:Category:ENTITY_Hooks|ENT Hooks]].\n\nWhile some of the fields may be serverside or clientside only, it is recommended to provide them on both so addons could use their values.","name":"Entity","structureFields":[{"default":"\"base_entity\"","description":"The base entity to derive from. This '''must''' be a valid Lua entity","isOptional":true,"name":"Base","type":"string"},{"default":"anim\n","description":"Type of the entity. This '''must be one of these:'''\n* '''anim'''\n* '''brush'''\n* '''point'''\n* '''ai'''\n* '''nextbot'''\n* '''filter'''\n\nSee [[Scripted Entities]] for a more detailed explanation of what each one is.\n\n{{Bug|You must set this in your entity. This is currently not set to \"anim\" by default.|2745||1521||No}}","isOptional":true,"name":"Type","type":"string"},{"default":"","description":"Entity class name of the ENT (File or folder name of your ENT).\n'''This is set automatically ''after'' the entity file is loaded.'''\n","isOptional":false,"name":"ClassName","type":"string"},{"default":"","description":"The folder from where the entity was loaded. This should always be \"entity/ent_myentity\", regardless whether your ENT is stored as a file, or multiple files in a folder. '''This is set automatically ''before'' the entity file is loaded.'''","isOptional":false,"name":"Folder","type":"string"},{"default":"false","description":"(Clientside) Set this to true if your entity has animations.","isOptional":true,"name":"AutomaticFrameAdvance","type":"boolean"},{"default":"Other","description":"(Clientside) Category the ENT is in","isOptional":true,"name":"Category","type":"string"},{"default":"false","description":"Whether this ENT should be displayed in the Q menu","isOptional":true,"name":"Spawnable","type":"boolean"},{"default":"false","description":"Whether the entity supports Editing. See [[Editable Entities]] for more info.","isOptional":true,"name":"Editable","type":"boolean"},{"default":"false","description":"Whether or not only admins can spawn the ENT from their Q menu","isOptional":true,"name":"AdminOnly","type":"boolean"},{"default":"\"\"","description":"(Clientside) Nice name of the ENT","isOptional":true,"name":"PrintName","type":"string"},{"default":"\"\"","description":"(Clientside) The author of the ENT","isOptional":true,"name":"Author","type":"string"},{"default":"\"\"","description":"(Clientside) The contacts of the ENT creator","isOptional":true,"name":"Contact","type":"string"},{"default":"\"\"","description":"(Clientside) The purpose of the ENT creation","isOptional":true,"name":"Purpose","type":"string"},{"default":"\"\"","description":"(Clientside) How to use your entity","isOptional":true,"name":"Instructions","type":"string"},{"default":"RENDERGROUP_OPAQUE","description":"(Clientside) The SENT's render group, see {{Enum|RENDERGROUP}}.","isOptional":true,"name":"RenderGroup","type":"RENDERGROUP"},{"default":"false","description":"(Serverside) Disable the ability for players to duplicate this SENT.","isOptional":true,"name":"DisableDuplicator","type":"boolean"},{"default":"\"entity\"\n","description":"(Clientside) Sets the spawnmenu content icon type for the entity, used by spawnmenu in the Sandbox-derived gamemodes.\nSee {{LibraryFunction|spawnmenu|AddContentType}} for more information.","isOptional":true,"name":"ScriptedEntityType","type":"string"}]},{"description":"Data structure used by the {{Lib|duplicator}} to store and load entity data.\n\nIt is created by {{LibraryFunction|duplicator|CopyEntTable}} and can be loaded by {{LibraryFunction|duplicator|CreateEntityFromTable}}.\n\nIt also shows up in several other contexts:\n* {{LibraryFunction|duplicator|RegisterEntityClass}}\n* {{HookFunction|ENTITY|OnEntityCopyTableFinish}}\n* {{HookFunction|ENTITY|OnDuplicated}}\n<nowiki />\n{{Note|1=In addition to all fields listed here, any field saved on the entity will be saved as-is to this table. For example, if you set ent.FavoriteFood = \"Steak\" before duplicating it, this structure will also contain the field FavoriteFood with the value \"Steak\".}}","name":"EntityCopyData","structureFields":[{"default":"","description":"The entity's name, see {{ClassFunction|Entity|GetName}}.","isOptional":false,"name":"Name","type":"string"},{"default":"","description":"The entity's class name, see {{ClassFunction|Entity|GetClass}}.","isOptional":false,"name":"Class","type":"string"},{"default":"","description":"The entity's position, relative to the duplication origin point.","isOptional":false,"name":"Pos","type":"Vector"},{"default":"","description":"The entity's angle, relative to the duplication angle.","isOptional":false,"name":"Angle","type":"Angle"},{"default":"","description":"The entity's Network Vars, see {{HookFunction|ENTITY|SetupDataTables}} and [[Networking Entities]].","isOptional":false,"name":"DT","type":"table"},{"default":"","description":"The entity's model, see {{ClassFunction|Entity|GetModel}}.","isOptional":false,"name":"Model","type":"string"},{"default":"","description":"The entity's model scale, see {{ClassFunction|Entity|GetModelScale}}. This will only be present if the model scale isn't 1.","isOptional":false,"name":"ModelScale","type":"number"},{"default":"","description":"The entity's active skin, see {{ClassFunction|Entity|GetSkin}}.","isOptional":false,"name":"Skin","type":"number"},{"default":"","description":"The entity's collision group, see {{ClassFunction|Entity|GetCollisionGroup}}. Uses the {{Enum|COLLISION_GROUP}}.","isOptional":false,"name":"ColGroup","type":"COLLISION_GROUP"},{"default":"","description":"The entity's collision bound minimums, see {{ClassFunction|Entity|GetCollisionBounds}}.","isOptional":false,"name":"Mins","type":"Vector"},{"default":"","description":"The entity's collision bound maximums, see {{ClassFunction|Entity|GetCollisionBounds}}.","isOptional":false,"name":"Maxs","type":"Vector"},{"default":"","description":"Data about the entity's {{Type|PhysObj}}s, see {{ClassFunction|Entity|GetPhysicsObjectNum}}. The key is the physics object index (starts from 0), and the value is a {{Struct|PhysicsObjectSave}}. Unlike other tables in this structure, if there are no physics objects for this entity this will be an empty table.","isOptional":false,"name":"PhysicsObjects","type":"PhysicsObjectSave"},{"default":"","description":"The entity's Flex Scale, see {{ClassFunction|Entity|GetFlexScale}}.","isOptional":false,"name":"FlexScale","type":"number"},{"default":"","description":"Each flex bone's flex weight, see {{ClassFunction|Entity|GetFlexWeight}}. The key is the flex's index and the value is the weight. Only flexes with a non-default (nonzero) weight are listed, and if none exist, this field will be nil.","isOptional":false,"name":"Flex","type":"table"},{"default":"","description":"The entity's body groups, see {{ClassFunction|Entity|GetBodygroup}}. The key is the bodygroup ID and the value is the assigned bodygroup number. Only body groups with a non-default (> 0) value are listed, and if none exist, this field will be nil.","isOptional":false,"name":"BodyG","type":"table"},{"default":"","description":"Bone manipulation data, see {{ClassFunction|Entity|HasBoneManipulations}}. The key is the bone index and the value is a {{Struct|BoneManipulationData}}. Only bones that have been manipulated with non-default values are listed, and if none exist, this field will be nil.","isOptional":false,"name":"BoneManip","type":"BoneManipulationData"},{"default":"","description":"The entity's MapCreationID, only exists for entities that were created by the map. See {{ClassFunction|Entity|MapCreationID}}.","isOptional":false,"name":"MapCreationID","type":"number"},{"default":"","description":"Deprecated, always 0. See {{ClassFunction|Entity|GetWorkshopID}}.","isOptional":false,"name":"WorkshopID","type":"number"}]},{"description":"Used for {{LibraryFunction|surface|CreateFont}}.","name":"FontData","structureFields":[{"default":"\"Arial\"\n","description":"The font source. This must be the actual name of the font, not a file name.\nFont files are stored in resource/fonts/. This cannot be an existing game font, i.e. \"ChatText\", \"Trebuchet18\", etc. ([[Default Fonts]])\n\nThe length is limited to 31 characters maximum.","isOptional":true,"name":"font","type":"string"},{"default":"false","description":"Allow the font to display glyphs that are outside of the Latin-1 range. Unicode code points above 0xFFFF are not supported.","isOptional":true,"name":"extended","type":"boolean"},{"default":"13\n","description":"The font height in pixels\n\n''Maximum:'' 128","isOptional":true,"name":"size","type":"number"},{"default":"500","description":"The font boldness","isOptional":true,"name":"weight","type":"number"},{"default":"0\n","description":"The strength of the font blurring\n\n{{Bug|Calling {{LibraryFunction|surface|CreateFont}} with a blursize >{{eq}} 100 will crash the game.|2699||||No}}\n{{Bug|Calling {{LibraryFunction|surface|CreateFont}} with a blursize < 0 will crash the game.|3579||||No}}","isOptional":true,"name":"blursize","type":"number"},{"default":"0\n","description":"The \"scanline\" interval\nMust be > 1 to work. This setting is per blursize per font - so if you create a font using \"Arial\" without scanlines, you cannot create an Arial font using scanlines with the same blursize","isOptional":true,"name":"scanlines","type":"number"},{"default":"true","description":"Smooth the font","isOptional":true,"name":"antialias","type":"boolean"},{"default":"false","description":"Add an underline to the font","isOptional":true,"name":"underline","type":"boolean"},{"default":"false","description":"Make the font italic","isOptional":true,"name":"italic","type":"boolean"},{"default":"false","description":"Add a strike through","isOptional":true,"name":"strikeout","type":"boolean"},{"default":"false","description":"Enables the use of symbolic fonts such as Webdings","isOptional":true,"name":"symbol","type":"boolean"},{"default":"false","description":"Seems to add a line in the middle of each letter","isOptional":true,"name":"rotary","type":"boolean"},{"default":"false","description":"Add shadow casting to the font","isOptional":true,"name":"shadow","type":"boolean"},{"default":"false","description":"Additive rendering","isOptional":true,"name":"additive","type":"boolean"},{"default":"false\n","description":"Add a black outline to the font.\n\nThis does not work well with antialias, and only allows black 1-pixel outlines. It may be preferable to not use this parameter, and instead use {{LibraryFunction|draw|SimpleTextOutlined}} when drawing text that you want outlined.","isOptional":true,"name":"outline","type":"boolean"}]},{"description":"Information about a gamemode, used in [[Gamemode Creation]]. For list of hooks, see [[:Category:GM_Hooks|GM Hooks]].\n\nWhile some of the fields may be serverside or clientside only, it is recommended to provide them on both so addons could use their values.","name":"Gamemode","structureFields":[{"default":"","description":"The fancy name of your gamemode.","isOptional":false,"name":"Name","type":"string"},{"default":"","description":"The name/contact info of the gamemode author.","isOptional":false,"name":"Author","type":"string"},{"default":"","description":"The contact email associated with the gamemode.","isOptional":false,"name":"Email","type":"string"},{"default":"","description":"The website associated with the gamemode.","isOptional":false,"name":"Website","type":"string"},{"default":"","description":"The name of the gamemode folder, automatically set.","isOptional":false,"name":"FolderName","type":"string"},{"default":"","description":"The name of the gamemode folder prepended with \"gamemodes/\" (such as \"gamemodes/sandbox\"), automatically set.","isOptional":false,"name":"Folder","type":"string"},{"default":"","description":"Set this to true if your gamemode is team-based. Used to enable/disable the base gamemode team system.","isOptional":false,"name":"TeamBased","type":"boolean"},{"default":"","description":"True if the gamemode is derived from sandbox.","isOptional":false,"name":"IsSandboxDerived","type":"boolean"},{"default":"","description":"The name of the gamemode folder prepended with \"gamemode_\" (such as \"gamemode_sandbox\"), automatically set.","isOptional":false,"name":"ThisClass","type":"string"},{"default":"","description":"The table of the base gamemode to derive from, set automatically by {{GlobalFunction|DeriveGamemode}}.\n\n{{Note|It is recommended to use {{GlobalFunction|DEFINE_BASECLASS}} when referencing the gamemode's BaseClass to prevent unintended behavior}}\n\n{{Note|{{GlobalFunction|DeriveGamemode}} modifies the main gamemode's BaseClass, which is shared with parent gamemodes. Because of this, in parent gamemodes the BaseClass can be incorrect, so for instance you need to use ''self.BaseClass.BaseClass'' in the 1st parent instead}}\n","isOptional":false,"name":"BaseClass","type":"table"}]},{"description":"Table used by {{GlobalFunction|HTTP}} function.","name":"HTTPRequest","structureFields":[{"default":"","description":"Function to be called on failure. Arguments are\n* {{FuncArg|string|reason}}\n","isOptional":false,"name":"failed","type":"Function"},{"default":"","description":"Function to be called on success. Arguments are\n* {{FuncArg|number|code}}\n* {{FuncArg|string|body}}\n* {{FuncArg|table|headers}}\n","isOptional":false,"name":"success","type":"Function"},{"default":"","description":"Request method, case insensitive. Possible values are:\n* GET\n* POST\n* HEAD\n* PUT\n* DELETE\n* PATCH\n* OPTIONS\n","isOptional":false,"name":"method","type":"string"},{"default":"","description":"The target url","isOptional":false,"name":"url","type":"string"},{"default":"","description":"KeyValue table for parameters. This is only applicable to the following request methods:\n* GET\n* POST\n* HEAD\n","isOptional":false,"name":"parameters","type":"table"},{"default":"","description":"KeyValue table for headers","isOptional":false,"name":"headers","type":"table"},{"default":"","description":"Body string for POST data. If set, will override parameters","isOptional":false,"name":"body","type":"string"},{"default":"\"text/plain; charset&#61;utf-8\"","description":"Content type for body.","isOptional":true,"name":"type","type":"string"}]},{"description":"Table used by {{LibraryFunction|util|TraceHull}}.","name":"HullTrace","structureFields":[{"default":"","description":"The start position of the trace","isOptional":false,"name":"start","type":"Vector"},{"default":"","description":"The end position of the trace","isOptional":false,"name":"endpos","type":"Vector"},{"default":"","description":"The 3D vector local to the start/endpos with the highest values. This will represent the corner with the upper bounds of the box.","isOptional":false,"name":"maxs","type":"Vector"},{"default":"","description":"The 3D vector local to the start/endpos with the lowest (often negative) values. This will represent the corner with the lower bounds of the box.","isOptional":false,"name":"mins","type":"Vector"},{"default":"{}\n","description":"Things the trace should not hit. Can also be a table of entities or a function with one argument:<br/>\n* {{FuncArg|Entity|ent|The entity that the trace hit}}\n\nUsing a function here is super slow. Try to avoid it.","isOptional":true,"name":"filter","type":"Entity"},{"default":"MASK_SOLID","description":"The trace mask {{Enum|MASK}}. This determines what the trace should hit and what it shouldn't hit.","isOptional":true,"name":"mask","type":"MASK"},{"default":"COLLISION_GROUP_NONE","description":"The collision group {{Enum|COLLISION_GROUP}}. This determines what the trace should hit in regards to the entity's collision group.","isOptional":true,"name":"collisiongroup","type":"COLLISION_GROUP"},{"default":"false","description":"Should the trace ignore world or not.","isOptional":true,"name":"ignoreworld","type":"boolean"},{"default":"nil","description":"If set, the trace result will be written to the supplied table instead of returning a new table","isOptional":true,"name":"output","type":"table"}]},{"description":"Table structure used for {{LibraryFunction|render|SetLocalModelLights}}.","name":"LocalLight","structureFields":[{"default":"MATERIAL_LIGHT_POINT","description":"The type of the light source, see {{Enum|MATERIAL_LIGHT}}.","isOptional":true,"name":"type","type":"MATERIAL_LIGHT"},{"default":"vector_origin","description":"The color of the light source (x is red, y is green, z is blue). Values are not restricted to a specific range, higher values will result in a brighter light.","isOptional":true,"name":"color","type":"Vector"},{"default":"vector_origin","description":"The origin of the light in world coordinates.","isOptional":true,"name":"pos","type":"Vector"},{"default":"vector_origin","description":"The direction of the light. Only required for directional and spot lights.","isOptional":true,"name":"dir","type":"Vector"},{"default":"0","description":"The maximum range of the light source. Does not actually control light attenuation. Usually left at 0 for infinite range.","isOptional":true,"name":"range","type":"number"},{"default":"5","description":"Angular falloff exponent for spot lights. Higher values result in a sharper transition between the inner cone and the outer cone.","isOptional":true,"name":"angularFalloff","type":"number"},{"default":"45","description":"The inner cone angle for spot lights, in degrees. No angular falloff will occur inside that cone.","isOptional":true,"name":"innerAngle","type":"number"},{"default":"45","description":"The outer cone angle for spot lights, in degrees.","isOptional":true,"name":"outerAngle","type":"number"},{"default":"","description":"The distance at which the light will fade to 50% of its brightness.","isOptional":false,"name":"fiftyPercentDistance","type":"number"},{"default":"","description":"The distance at which the light will completely fade out.","isOptional":false,"name":"zeroPercentDistance","type":"number"},{"default":"0","description":"The quadratic term of the light falloff. This will only be used if fiftyPercentDistance and zeroPercentDistance are not supplied, and allows finer control over light attenuation.","isOptional":true,"name":"quadraticFalloff","type":"number"},{"default":"0","description":"The linear term of the light falloff. This will only be used if fiftyPercentDistance and zeroPercentDistance are not supplied, and allows finer control over light attenuation.","isOptional":true,"name":"linearFalloff","type":"number"},{"default":"1","description":"The constant term of the light falloff. This will only be used if fiftyPercentDistance and zeroPercentDistance are not supplied, and allows finer control over light attenuation.","isOptional":true,"name":"constantFalloff","type":"number"}]},{"description":"Table structure used by {{LibraryFunction|matproxy|Add}}.","name":"MatProxyData","structureFields":[{"default":"","description":"The name of the material proxy","isOptional":false,"name":"name","type":"string"},{"default":"","description":"The function used to get variables from the \".vmt\". Called once per each \".vmt\". Arguments are:\n* {{FuncArg|table|self}}\n* {{FuncArg|string|materialName}}\n* {{FuncArg|table|values}}\n","isOptional":false,"name":"init","type":"Function"},{"default":"","description":"The function used to apply the proxy. This is called every frame while any materials with this proxy are used in world. Arguments are:\n* {{FuncArg|table|self}}\n* {{FuncArg|string|materialName}}\n* {{FuncArg|Entity|ent}}\n","isOptional":false,"name":"bind","type":"Function"}]},{"description":"Table used by various functions, such as {{ClassFunction|IMesh|BuildFromTriangles}}.","name":"MeshVertex","structureFields":[{"default":"","description":"The vertex color. Uses the {{Struct|Color}}.","isOptional":false,"name":"color","type":"Color"},{"default":"","description":"The triangles normal required to calculate lighting(optional).","isOptional":false,"name":"normal","type":"Vector"},{"default":"","description":"The triangles tangent. Not used by the VertexLitGeneric shader.","isOptional":false,"name":"tangent","type":"Vector"},{"default":"","description":"The triangles binormal. Not used by the VertexLitGeneric shader.","isOptional":false,"name":"binormal","type":"Vector"},{"default":"","description":"The vertex position.","isOptional":false,"name":"pos","type":"Vector"},{"default":"","description":"The u texture scale.","isOptional":false,"name":"u","type":"number"},{"default":"","description":"The v texture scale.","isOptional":false,"name":"v","type":"number"},{"default":"","description":"A table of four numbers. This is used by most shaders in Source to hold tangent information of the vertex ( tangentX, tangentY, tangentZ, tangentHandedness ).\n","isOptional":false,"name":"userdata","type":"table"}]},{"description":"The structure used by {{ClassFunction|Vehicle|GetOperatingParams}}.","name":"OperatingParams","structureFields":[{"default":"","description":"The current RPM of the vehicle","isOptional":false,"name":"RPM","type":"number"},{"default":"","description":"The current gear of the vehicle, starting from 0","isOptional":false,"name":"gear","type":"number"},{"default":"","description":"Is the vehicle boosting?","isOptional":false,"name":"isTorqueBoosting","type":"boolean"},{"default":"","description":"The current speed, in inches per second","isOptional":false,"name":"speed","type":"number"},{"default":"","description":"Steering angle","isOptional":false,"name":"steeringAngle","type":"number"},{"default":"","description":"Wheels on ground","isOptional":false,"name":"wheelsInContact","type":"number"}]},{"description":"Structure represents a path segment, returned by {{ClassFunction|PathFollower|GetCurrentGoal}}, {{ClassFunction|PathFollower|FirstSegment}} and {{ClassFunction|PathFollower|LastSegment}}.","name":"PathSegment","structureFields":[{"default":"","description":"The navmesh area this segment occupies.","isOptional":false,"name":"area","type":"CNavArea"},{"default":"","description":"How much of a curve should the bot execute when navigating this segment. 0 = none, 1 = 180°","isOptional":false,"name":"curvature","type":"number"},{"default":"","description":"Distance of this segment from the start of the path.","isOptional":false,"name":"distanceFromStart","type":"number"},{"default":"","description":"The direction of travel to reach the end of this segment from the start, represented as a normalised vector.","isOptional":false,"name":"forward","type":"Vector"},{"default":"","description":"The direction of travel to reach the end of this segment from the start, represented as a cardinal direction integer 0 to 3, or 9 for vertical movement.","isOptional":false,"name":"how","type":"number"},{"default":"","description":"The navmesh ladder this segment occupies, if any.","isOptional":false,"name":"ladder","type":"CNavLadder"},{"default":"","description":"Length of this segment.","isOptional":false,"name":"length","type":"number"},{"default":"","description":"","isOptional":false,"name":"m_portalCenter","type":"Vector"},{"default":"","description":"","isOptional":false,"name":"m_portalHalfWidth","type":"number"},{"default":"","description":"The position of the end of this segment.","isOptional":false,"name":"pos","type":"Vector"},{"default":"","description":"The movement type of this segment, indicating how bots are expected to move along this segment.<br>\n* 0 is ground movement\n* 1 is falling down\n* 2 is climbing up or jumping\n* 3 is jumping over a gap\n* 4 is climbing a ladder up (unused)\n* 5 is climbing a ladder down (unused)\n","isOptional":false,"name":"type","type":"number"}]},{"description":"Table used by {{LibraryFunction|physenv|SetPerformanceSettings}}.","name":"PhysEnvPerformanceSettings","structureFields":[{"default":"","description":"Maximum amount of seconds to precalculate collisions with objects.","isOptional":false,"name":"LookAheadTimeObjectsVsObject","type":"number"},{"default":"","description":"Maximum amount of seconds to precalculate collisions with world.","isOptional":false,"name":"LookAheadTimeObjectsVsWorld","type":"number"},{"default":"","description":"Maximum rotation velocity.","isOptional":false,"name":"MaxAngularVelocity","type":"number"},{"default":"","description":"Maximum collision checks per tick.","isOptional":false,"name":"MaxCollisionChecksPerTimestep","type":"number"},{"default":"","description":"Maximum collision per object per tick.","isOptional":false,"name":"MaxCollisionsPerObjectPerTimestep","type":"number"},{"default":"","description":"Maximum mass of an object to be affected by friction.","isOptional":false,"name":"MaxFrictionMass","type":"number"},{"default":"","description":"Maximum speed of an object.","isOptional":false,"name":"MaxVelocity","type":"number"},{"default":"","description":"Minimum mass of an object to be affected by friction.","isOptional":false,"name":"MinFrictionMass","type":"number"}]},{"description":"Structure used in storing/restoring physics object attributes.\n{{LibraryFunction|duplicator|GenericDuplicatorFunction}} and {{LibraryFunction|duplicator|DoGenericPhysics}} use a table of PhysicsObjectSaves with the struct's index in the table being the physics object ID.\n\nPos and Angle are set by the following:\n<pre>\nPos, Angle = WorldToLocal(phys:GetPos(), phys:GetAngle(), Vector( 0, 0, 0 ), Angle( 0, 0, 0 ))\n</pre>","name":"PhysicsObjectSave","structureFields":[{"default":"","description":"The entity's world position made local with {{GlobalFunction|WorldToLocal}}","isOptional":false,"name":"Pos","type":"Vector"},{"default":"","description":"The entity's world angles made local with {{GlobalFunction|WorldToLocal}}","isOptional":false,"name":"Angle","type":"Angle"},{"default":"","description":"Whether the entity is moveable. Equal to (''not'' {{ClassFunction|PhysObj|IsMoveable}})","isOptional":false,"name":"Frozen","type":"boolean"},{"default":"","description":"Whether the entity's gravity is affected by gravity or not. {{ClassFunction|PhysObj|IsGravityEnabled}}","isOptional":false,"name":"NoGrav","type":"boolean"},{"default":"","description":"Whether the entity is dormant or not. {{ClassFunction|PhysObj|IsAsleep}}","isOptional":false,"name":"Sleep","type":"boolean"}]},{"description":"Structure used by {{LibraryFunction|construct|SetPhysProp}}.","name":"PhysProperties","structureFields":[{"default":"nil","description":"Enables or disables gravity for the entity","isOptional":true,"name":"GravityToggle","type":"boolean"},{"default":"nil","description":"Sets the physics material for the entity","isOptional":true,"name":"Material","type":"string"}]},{"description":"A structure containing vertex information for use with {{LibraryFunction|surface|DrawPoly}}.\n\nUV coordinates describe which part of a given texture should be drawn at a vertex - your graphics card's interpolator will fill in space between vertices. UV coords range from 0-1, with 0 being top/left and 1 being bottom/right. If you're using a texture these are mandatory.\n\n{{Note|You must pass a table of tables with this structure to the function. '''You need to pass at least 3 points.'''}}{{Note|Your points must be defined in a '''clockwise order.''' Otherwise, your shape will not render.}}","name":"PolygonVertex","structureFields":[{"default":"","description":"The x coordinate of the vertex.","isOptional":false,"name":"x","type":"number"},{"default":"","description":"The y coordinate of the vertex.","isOptional":false,"name":"y","type":"number"},{"default":"","description":"The u texture coordinate of the vertex. ''Can be left blank.''","isOptional":false,"name":"u","type":"number"},{"default":"","description":"The v texture coordinate of the vertex. ''Can be left blank.''","isOptional":false,"name":"v","type":"number"}]},{"description":"Structure used for {{LibraryFunction|properties|Add}}.","name":"PropertyAdd","structureFields":[{"default":"\"simple\"","description":"Can be set to \"toggle\" to make this property a toggle property.","isOptional":true,"name":"Type","type":"string"},{"default":"","description":"Label to show on opened menu","isOptional":false,"name":"MenuLabel","type":"string"},{"default":"nil","description":"Icon to show on opened menu for this item. Optional for simple properties and unused for toggle properties.","isOptional":true,"name":"MenuIcon","type":"string"},{"default":"","description":"Where in the list should the property be positioned, relative to other properties.\n\nFor reference, here are the default properties and their Order values:\n{{{!}} class{{eq}}\"mw-collapsible mw-collapsed wikitable\"\n! Property\n! Order\n{{!}}-\n{{!}} Make Persistent\n{{!}} 400\n{{!}}-\n{{!}} Bone Manipulate\n{{!}} 500\n{{!}}-\n{{!}} Bodygroups\n{{!}} 600\n{{!}}-\n{{!}} Skin\n{{!}} 601\n{{!}}-\n{{!}} Keep Upright\n{{!}} 900\n{{!}}-\n{{!}} Ignite/Extinguish\n{{!}} 999\n{{!}}-\n{{!}} Remove\n{{!}} 1000\n{{!}}-\n{{!}} Gravity\n{{!}} 1001\n{{!}}-\n{{!}} Drive\n{{!}} 1100\n{{!}}-\n{{!}} Collision\n{{!}} 1500\n{{!}}-\n{{!}} Statue\n{{!}} 1501\n{{!}}-\n{{!}} NPC Biggify/Smallify\n{{!}} 1799, 1800\n{{!}}-\n{{!}} Motion Control (Kinect)\n{{!}} 2500\n{{!}}-\n{{!}} [[Editable Entities|Edit Properties]]\n{{!}} 90001\n{{!}}}\n","isOptional":false,"name":"Order","type":"number"},{"default":"false","description":"Whether to add a spacer before this property. This should generally be true for the first property in a group of properties.","isOptional":true,"name":"PrependSpacer","type":"boolean"},{"default":"","description":"Used '''clientside''' to decide whether this property should be shown for an entity. Gets these arguments:\n* {{FuncArg|table|self|the property table}}\n* {{FuncArg|Entity|ent|the entity the player clicked}}\n\nReturn true if the property should be shown for this entity. It's good practice to call {{HookFunction|SANDBOX|CanProperty}} in this hook via {{LibraryFunction|gamemode|Call}} or {{LibraryFunction|hook|Run}}.\n","isOptional":false,"name":"Filter","type":"Function"},{"default":"","description":"Required for toggle properties (clientside). Must return a boolean value to either check or uncheck the toggle property.\n* {{FuncArg|table|self|the property table}}\n* {{FuncArg|Entity|ent|the entity the player clicked}}\n* {{FuncArg|table|tr|the player's eye trace}}\n","isOptional":false,"name":"Checked","type":"Function"},{"default":"","description":"Called '''clientside''' when the property is clicked with these arguments:\n* {{FuncArg|table|self|the property table}}\n* {{FuncArg|Entity|ent|the entity the player clicked}}\n* {{FuncArg|table|tr|the player's eye trace}}\n\nWhen appropriate, within this function you can call <kbd>self:MsgStart()</kbd>, write data with the {{Lib|net}} 'Write' functions, and finish with <kbd>self:MsgEnd()</kbd>. This will activate the 'Receive' function on the server. In most cases, you will want to send the entity to the server, as it's not done by default.\n","isOptional":false,"name":"Action","type":"Function"},{"default":"nil\n","description":"Called '''serverside''' if the client sends a message in the 'Action' function (see above).\n* {{FuncArg|table|self|the property table}}\n* {{FuncArg|number|len|the net message length, although this includes the property identifier used internally (the name of the property)}}\n* {{FuncArg|table|ply|the player who clicked the property}}\n\nYou can read data received from the client with the {{Lib|net}} 'Read' functions. It's good practice to check {{HookFunction|SANDBOX|CanProperty}} here via {{LibraryFunction|gamemode|Call}} or {{LibraryFunction|hook|Run}}.","isOptional":true,"name":"Receive","type":"Function"},{"default":"nil\n","description":"Called '''clientside''' when the property option has been created in the right-click menu. This is not called for toggle properties!\n* {{FuncArg|table|self|the property table}}\n* {{FuncArg|Panel|option|the menu option <!-- to do: what type of panel? -->}}\n* {{FuncArg|Entity|ent|the entity the player right-clicked}}\n* {{FuncArg|table|tr|the player's eye trace}}","isOptional":true,"name":"MenuOpen","type":"Function"},{"default":"nil\n","description":"Same as MenuOpen, but also called for toggle properties and has different arguments. This is called immediately after MenuOpen, but nothing happens in between so you should only ever use one or the other.\n* {{FuncArg|table|self|the property table}}\n* {{FuncArg|Panel|menu|the property menu <!-- to do: what type of panel? -->}}\n* {{FuncArg|Panel|option|the menu option <!-- to do: what type of panel? -->}}","isOptional":true,"name":"OnCreate","type":"Function"}]},{"description":"Used for {{LibraryFunction|cam|Start}}.\n\nUnless stated otherwise, the default values for all these keys would be inherited from the engine's current CViewSetup and do not have static representations.","name":"RenderCamData","structureFields":[{"default":"","description":"The x position of the view port","isOptional":false,"name":"x","type":"number"},{"default":"","description":"The y position of the view port","isOptional":false,"name":"y","type":"number"},{"default":"","description":"The width of the view port","isOptional":false,"name":"w","type":"number"},{"default":"","description":"The height of the view port","isOptional":false,"name":"h","type":"number"},{"default":"\"3D\"\n","description":"The type of cam. Valid types are:\n* \"2D\" - No additional arguments are required\n* \"3D\" - Only origin and angles are needed, all other parameters are optional.","isOptional":true,"name":"type","type":"string"},{"default":"","description":"The position to render from","isOptional":false,"name":"origin","type":"Vector"},{"default":"","description":"The angles to render from","isOptional":false,"name":"angles","type":"Angle"},{"default":"","description":"The field of view","isOptional":false,"name":"fov","type":"number"},{"default":"","description":"The aspect ratio of the view port (Note that this is NOT set to w/h by default)","isOptional":false,"name":"aspect","type":"number"},{"default":"","description":"The distance to the far clipping plane","isOptional":false,"name":"zfar","type":"number"},{"default":"","description":"The distance to the near clipping plane","isOptional":false,"name":"znear","type":"number"},{"default":"","description":"m_bRenderToSubrectOfLargerScreen","isOptional":false,"name":"subrect","type":"boolean"},{"default":"false","description":"m_bDoBloomAndToneMapping","isOptional":true,"name":"bloomtone","type":"boolean"},{"default":"","description":"A table having these keys: ( all floats )\n* left\n* right\n* bottom\n* top\n","isOptional":false,"name":"offcenter","type":"table"},{"default":"","description":"If set, makes the view/camera orthogonal. A table having these keys: ( all floats )\n* left\n* right\n* bottom\n* top\n","isOptional":false,"name":"ortho","type":"table"}]},{"description":"Used for {{LibraryFunction|render|Capture}}.","name":"RenderCaptureData","structureFields":[{"default":"","description":"Format of the capture. Valid formats are: jpeg, png","isOptional":false,"name":"format","type":"string"},{"default":"","description":"X coordinate of the capture origin","isOptional":false,"name":"x","type":"number"},{"default":"","description":"Y coordinate of the capture origin","isOptional":false,"name":"y","type":"number"},{"default":"","description":"Width of the capture","isOptional":false,"name":"w","type":"number"},{"default":"","description":"Height of the capture","isOptional":false,"name":"h","type":"number"},{"default":"","description":"The quality of the capture. Affects jpeg only.","isOptional":false,"name":"quality","type":"number"},{"default":"true","description":"Set to false to capture an image with alpha channel set to fully opaque. Affects png only.","isOptional":true,"name":"alpha","type":"boolean"}]},{"description":"Used for {{LibraryFunction|serverlist|Query}}.","name":"ServerQueryData","structureFields":[{"default":"garrysmod","description":"The game directory to get the servers for","isOptional":true,"name":"GameDir","type":"string"},{"default":"","description":"Type of servers to retrieve. Valid values are:\n* \"internet\"\n* \"favorite\"\n* \"history\"\n* \"lan\"\n","isOptional":false,"name":"Type","type":"string"},{"default":"4000","description":"Steam application ID to get the servers for","isOptional":true,"name":"AppID","type":"number"},{"default":"","description":"Called when a new server is found and queried. Arguments:<br/>\n{{FuncArg|number|ping|Latency to the server.}}<br/>\n{{FuncArg|string|name|Name of the server}}<br/>\n{{FuncArg|string|desc|\"Nice\" gamemode name}}<br/>\n{{FuncArg|string|map|Current map}}<br/>\n{{FuncArg|number|players|Total player number ( bot + human )}}<br/>\n{{FuncArg|number|maxplayers|Maximum reported amount of players}}<br/>\n{{FuncArg|number|botplayers|Amount of bots on the server}}<br/>\n{{FuncArg|boolean|pass|Whether this server has password or not}}<br/>\n{{FuncArg|number|lastplayed|Time when you last played on this server, as UNIX timestamp or 0}}<br/>\n{{FuncArg|string|address|IP Address of the server}}<br/>\n{{FuncArg|string|gamemode|Gamemode folder name}}<br/>\n{{FuncArg|number|workshopid|Gamemode Steam Workshop ID}}<br/>\n<br/>\nReturn false to stop the query.\n","isOptional":false,"name":"Callback","type":"Function"},{"default":"","description":"Called when the query is finished. No arguments","isOptional":false,"name":"Finished","type":"Function"}]},{"description":"Table used in {{LibraryFunction|sound|Add}} and {{LibraryFunction|sound|GetProperties}}.","name":"SoundData","structureFields":[{"default":"","description":"The sound channel to play in. See {{Enum|CHAN}}","isOptional":false,"name":"channel","type":"CHAN"},{"default":"","description":"The name of the sound.","isOptional":false,"name":"name","type":"string"},{"default":"","description":"The pitch end. Deprecated, use pitch.","isOptional":false,"name":"pitchend","type":"number"},{"default":"","description":"The initial pitch. Deprecated, use pitch.","isOptional":false,"name":"pitchstart","type":"number"},{"default":"","description":"The soundlevel of the sound in dB. See {{Enum|SNDLVL}}.","isOptional":false,"name":"level","type":"SNDLVL"},{"default":"","description":"The sound file to be used in this sound effect. Can be a table of sound files. Relative to \"sound\" directory.","isOptional":false,"name":"sound","type":"string"},{"default":"1.0","description":"The volume of the sound as a decimal between 0 and 1. Can be a table of two numbers, a minimum and a maximum value.","isOptional":true,"name":"volume","type":"number"},{"default":"100","description":"The pitch of the sound. Can be a table of two numbers, a minimum and a maximum value.","isOptional":true,"name":"pitch","type":"number"}]},{"description":"Returned by {{LibraryFunction|util|GetSunInfo}}.","name":"SunInfo","structureFields":[{"default":"","description":"The suns direction relative to 0,0,0","isOptional":false,"name":"direction","type":"Vector"},{"default":"","description":"Indicates how obstructed the sun is, 1 not visible, 0 fully visible","isOptional":false,"name":"obstruction","type":"number"}]},{"description":"Table returned by {{LibraryFunction|util|GetSurfaceData}}.","name":"SurfacePropertyData","structureFields":[{"default":"","description":"The name of the surface property, identical to {{LibraryFunction|util|GetSurfacePropName}}.","isOptional":false,"name":"name","type":"string"},{"default":"","description":"How hard a surface is. If this is greater than or equal to another surfaces's hardThreshold, a hard impact sound will be used.","isOptional":false,"name":"hardnessFactor","type":"number"},{"default":"","description":"Hardness threshold for impact sounds. HitSurface.hardnessFactor >{{eq}} InflictorSurface.hardThreshold - hard impact sound (depends on hardVelocityThreshold's value), HitSurface.hardnessFactor < InflictorSurface.hardThreshold - soft impact sound (always).","isOptional":false,"name":"hardThreshold","type":"number"},{"default":"","description":"Velocity threshold for impact sounds. impactSpeed >{{eq}} HitSurface.hardVelocityThreshold - hard impact sound (depends on hardThreshold's value), impactSpeed < HitSurface.hardVelocityThreshold - soft impact sound (always).","isOptional":false,"name":"hardVelocityThreshold","type":"number"},{"default":"","description":"Amount of sound reflected from the surface represented as a number 0.0 - 1.0. 0 - no reflection, 1 - fully reflected.","isOptional":false,"name":"reflectivity","type":"number"},{"default":"","description":"How rough a surface is. If this is greater than or equal to another surfaces's roughThreshold, a rough scrape sound will be used.","isOptional":false,"name":"roughnessFactor","type":"number"},{"default":"","description":"Roughness threshold for friction sounds. HitSurface.roughnessFactor >{{eq}} InflictorSurface.roughThreshold - rough friction sound, HitSurface.roughnessFactor < InflictorSurface.roughThreshold - soft friction sound.","isOptional":false,"name":"roughThreshold","type":"number"},{"default":"","description":"Indicates whether or not the surface is a ladder. Used to detect whether a player is on a ladder. 0 - false, > 0 - true.","isOptional":false,"name":"climbable","type":"number"},{"default":"","description":"Scalar multiplier for player jump height - or more accurately, applied z-axis velocity on a surface. For example, 1 - normal jump, 2 - twice as high, and 0.5 - half as high.","isOptional":false,"name":"jumpFactor","type":"number"},{"default":"","description":"The surface material. See {{Enum|MAT}}.","isOptional":false,"name":"material","type":"MAT"},{"default":"","description":"Scalar multiplier for player speed. Achieves this by multiplying {{ClassFunction|CMoveData|SetMaxSpeed}} in {{HookFunction|GM|Move}}.","isOptional":false,"name":"maxSpeedFactor","type":"number"},{"default":"","description":"This is the physical drag on an object when in contact with this surface (0 - x, 0 none to x a lot).\n\n{{Validate}}\n","isOptional":false,"name":"dampening","type":"number"},{"default":"","description":"Material density in kg / m^3 (water is 1000). If a surface's density is < 1000, it will float in water. This is used to calculate the total mass of an object.","isOptional":false,"name":"density","type":"number"},{"default":"","description":"Collision elasticity - used to compute coefficient of restitution represented as a number 0.0 - 1.0. 0.01 is soft, 1.0 is hard.","isOptional":false,"name":"elasticity","type":"number"},{"default":"","description":"Physical friction used to slow entities touching the surface represented as a number 0.0 - 1.0. 0.01 is slick, 1.0 is completely rough.","isOptional":false,"name":"friction","type":"number"},{"default":"","description":"Material thickness. If this is 0, the material is not volumetrically solid, and thus the object mass will be calculated as \"volume * 0.0254^3 * density\" where 0.0254 is meters per inch. If non-zero, the mass will be \"surfacearea * thickness * 0.0254^3 * density\".","isOptional":false,"name":"thickness","type":"number"},{"default":"","description":"Sound to play when a prop or func_breakable is broken.","isOptional":false,"name":"breakSound","type":"string"},{"default":"","description":"Bullet impact sound with this surface.","isOptional":false,"name":"bulletImpactSound","type":"string"},{"default":"","description":"Physical impact sound when hitting surfaces hard.","isOptional":false,"name":"impactHardSound","type":"string"},{"default":"","description":"Physical impact sound when hitting surfaces softly.","isOptional":false,"name":"impactSoftSound","type":"string"},{"default":"","description":"Unused sound.","isOptional":false,"name":"rollingSound","type":"string"},{"default":"","description":"Friction sound when roughly scraping against an entity.","isOptional":false,"name":"scrapeRoughSound","type":"string"},{"default":"","description":"Friction sound when smoothly scraping against an entity.","isOptional":false,"name":"scrapeSmoothSound","type":"string"},{"default":"","description":"Footstep sound for left foot.","isOptional":false,"name":"stepLeftSound","type":"string"},{"default":"","description":"Footstep sound for right foot.","isOptional":false,"name":"stepRightSound","type":"string"},{"default":"","description":"Unused sound.","isOptional":false,"name":"strainSound","type":"string"}]},{"description":"Information about a SWEP, used by {{HookFunction|SANDBOX|PlayerGiveSWEP}} and SWEP creation. For list of callbacks, see [[:Category:WEAPON_Hooks]].\n\nWhile some of the fields may be serverside or clientside only, it is recommended to provide them on both so addons could use their values.","name":"Weapon","structureFields":[{"default":"","description":"Entity class name of the SWEP (file or folder name of your SWEP). This is set automatically","isOptional":false,"name":"ClassName","type":"string"},{"default":"\"Other\"","description":"(Clientside) Category the SWEP is in","isOptional":true,"name":"Category","type":"string"},{"default":"false","description":"Whether this SWEP should be displayed in the Q menu","isOptional":true,"name":"Spawnable","type":"boolean"},{"default":"false","description":"Whether or not only admins can spawn the SWEP from their Q menu","isOptional":true,"name":"AdminOnly","type":"boolean"},{"default":"\"Scripted Weapon\"","description":"Nice name of the SWEP","isOptional":true,"name":"PrintName","type":"string"},{"default":"\"weapon_base\"","description":"The base weapon to derive from. This '''must''' be a Lua weapon","isOptional":true,"name":"Base","type":"string"},{"default":"1","description":"Multiplier of deploy speed","isOptional":true,"name":"m_WeaponDeploySpeed","type":"number"},{"default":"","description":"The entity that owns/wields this SWEP, if any","isOptional":false,"name":"Owner","type":"Entity"},{"default":"\"\"","description":"(Clientside) The author of the SWEP to be shown in weapon selection","isOptional":true,"name":"Author","type":"string"},{"default":"\"\"","description":"(Clientside) The contacts of the SWEP creator to be shown in weapon selection","isOptional":true,"name":"Contact","type":"string"},{"default":"\"\"","description":"(Clientside) The purpose of the SWEP creator to be shown in weapon selection","isOptional":true,"name":"Purpose","type":"string"},{"default":"\"\"","description":"(Clientside) How to use your weapon, to be shown in weapon selection","isOptional":true,"name":"Instructions","type":"string"},{"default":"\"models/weapons/v_pistol.mdl\"","description":"Path to the view model for your SWEP (what the wielder will see)","isOptional":true,"name":"ViewModel","type":"string"},{"default":"false","description":"(Clientside) Should we flip the view model? This is needed for some CS:S view models","isOptional":true,"name":"ViewModelFlip","type":"boolean"},{"default":"false\n","description":"(Clientside) Same as ViewModelFlip, but for the second viewmodel\n\n{{Bug|Issue=3633|Fixed=|The second and third viewmodel will not flip with these variables.}}","isOptional":true,"name":"ViewModelFlip1","type":"boolean"},{"default":"false","description":"(Clientside) Same as ViewModelFlip, but for the third viewmodel","isOptional":true,"name":"ViewModelFlip2","type":"boolean"},{"default":"62","description":"(Clientside) An angle of FOV used for the view model (Half-Life value is 90; Half-Life 2 is 54; Counter-Strike: Source is 74; Day of Defeat: Source is 45)","isOptional":true,"name":"ViewModelFOV","type":"number"},{"default":"\"models/weapons/w_357.mdl\"","description":"The world model for your SWEP (what you will see in other players hands)","isOptional":true,"name":"WorldModel","type":"string"},{"default":"true","description":"(Serverside) Whether this weapon can be autoswitched away from when the player runs out of ammo in this weapon or picks up another weapon or ammo","isOptional":true,"name":"AutoSwitchFrom","type":"boolean"},{"default":"true","description":"(Serverside) Whether this weapon can be autoswitched to when the player runs out of ammo in their current weapon or they pick this weapon up","isOptional":true,"name":"AutoSwitchTo","type":"boolean"},{"default":"5","description":"(Serverside) Decides whether we should switch from/to this","isOptional":true,"name":"Weight","type":"number"},{"default":"1","description":"(Clientside) The scale of the viewmodel bob (viewmodel movement from left to right when walking around)","isOptional":true,"name":"BobScale","type":"number"},{"default":"1","description":"(Clientside) The scale of the viewmodel sway (viewmodel position lerp when looking around).","isOptional":true,"name":"SwayScale","type":"number"},{"default":"true","description":"(Clientside) Should the weapon icon bounce in weapon selection?","isOptional":true,"name":"BounceWeaponIcon","type":"boolean"},{"default":"true","description":"(Clientside) Should draw the weapon selection info box, containing SWEP.Instructions, etc.","isOptional":true,"name":"DrawWeaponInfoBox","type":"boolean"},{"default":"true","description":"(Clientside) Should we draw the default HL2 ammo counter?","isOptional":true,"name":"DrawAmmo","type":"boolean"},{"default":"true","description":"(Clientside) Should we draw the default crosshair?","isOptional":true,"name":"DrawCrosshair","type":"boolean"},{"default":"RENDERGROUP_OPAQUE","description":"(Clientside) The SWEP render group, see {{Enum|RENDERGROUP}}","isOptional":true,"name":"RenderGroup","type":"RENDERGROUP"},{"default":"0","description":"Slot in the weapon selection menu, starts with 0","isOptional":true,"name":"Slot","type":"number"},{"default":"10","description":"Position in the slot, should be in the range 0-128","isOptional":true,"name":"SlotPos","type":"number"},{"default":"surface.GetTextureID( \"gui/speech_lid\" )","description":"(Clientside) Internal variable for drawing the info box in weapon selection","isOptional":true,"name":"SpeechBubbleLid","type":"number"},{"default":"surface.GetTextureID( \"weapons/swep\" )","description":"(Clientside) Path to an texture. Override this in your SWEP to set the icon in the weapon selection. This must be the texture ID, see {{LibraryFunction|surface|GetTextureID}}","isOptional":true,"name":"WepSelectIcon","type":"number"},{"default":"false","description":"(Clientside) Should we use Counter-Strike muzzle flashes upon firing? This is required for DoD:S or CS:S view models to fix their muzzle flashes.","isOptional":true,"name":"CSMuzzleFlashes","type":"boolean"},{"default":"false","description":"(Clientside) Use the X shape muzzle flash instead of the default Counter-Strike muzzle flash. Requires CSMuzzleFlashes to be set to true","isOptional":true,"name":"CSMuzzleX","type":"boolean"},{"default":"","description":"Primary attack settings. The table contains these fields:\n* {{FuncArg|string|Ammo|Ammo type (\"Pistol\", \"SMG1\" etc)}}\n* {{FuncArg|number|ClipSize|The maximum amount of bullets one clip can hold}}\n* {{FuncArg|number|DefaultClip|Default ammo in the clip, making it higher than ClipSize will give player additional ammo on spawn}}\n* {{FuncArg|boolean|Automatic|If true makes the weapon shoot automatically as long as the player has primary attack button held down}}\n","isOptional":false,"name":"Primary","type":"table"},{"default":"","description":"Secondary attack settings, has same fields as Primary attack settings","isOptional":false,"name":"Secondary","type":"table"},{"default":"false\n","description":"(Clientside) Makes the player models hands bonemerged onto the view model\n\n{{Warning|The gamemode and view models '''must''' support this feature for it to work!\nYou can find more information here: [[Using_Viewmodel_Hands|Using Viewmodel Hands]]}}","isOptional":true,"name":"UseHands","type":"boolean"},{"default":"","description":"The folder from where the weapon was loaded. This should always be \"weapons/weapon_myweapon\", regardless whether your SWEP is stored as a file, or multiple files in a folder. It is set automatically on load","isOptional":false,"name":"Folder","type":"string"},{"default":"false","description":"(Clientside) Makes the default SWEP crosshair be positioned in 3D space where your aim actually is (like on Jeep), instead of simply sitting in the middle of the screen at all times","isOptional":true,"name":"AccurateCrosshair","type":"boolean"},{"default":"false","description":"Disable the ability for players to duplicate this SWEP","isOptional":true,"name":"DisableDuplicator","type":"boolean"},{"default":"\"weapon\"\n","description":"(Clientside) Sets the spawnmenu content icon type for the entity, used by spawnmenu in the Sandbox-derived gamemodes.\nSee {{LibraryFunction|spawnmenu|AddContentType}} for more information.","isOptional":true,"name":"ScriptedEntityType","type":"string"},{"default":"true","description":"If set to false, the weapon will not play the weapon pick up sound when picked up.","isOptional":true,"name":"m_bPlayPickupSound","type":"boolean"}]},{"description":"Table is one element from {{LibraryFunction|team|GetAllTeams}}.","name":"TeamData","structureFields":[{"default":"","description":"Color of the team","isOptional":false,"name":"Color","type":"table"},{"default":"","description":"Whether the team is joinable or not.","isOptional":false,"name":"Joinable","type":"boolean"},{"default":"","description":"Name of the team","isOptional":false,"name":"Name","type":"string"},{"default":"","description":"Score of the team","isOptional":false,"name":"Score","type":"number"}]},{"description":"Used for {{LibraryFunction|draw|Text}}.","name":"TextData","structureFields":[{"default":"","description":"Text to be drawn.","isOptional":false,"name":"text","type":"string"},{"default":"\"DermaDefault\"","description":"The font to draw with. List of default fonts can be found [[Default_Fonts|here]].","isOptional":true,"name":"font","type":"string"},{"default":"","description":"This holds the X and Y coordinates. Key value 1 is x, key value 2 is y.","isOptional":false,"name":"pos","type":"table"},{"default":"TEXT_ALIGN_LEFT","description":"The alignment of the X position. See {{Enum|TEXT_ALIGN}}","isOptional":true,"name":"xalign","type":"TEXT_ALIGN"},{"default":"TEXT_ALIGN_TOP","description":"The alignment of the Y position. See {{Enum|TEXT_ALIGN}}","isOptional":true,"name":"yalign","type":"TEXT_ALIGN"},{"default":"color_white","description":"The text color","isOptional":true,"name":"color","type":"table"}]},{"description":"Used for {{LibraryFunction|draw|TexturedQuad}}.","name":"TextureData","structureFields":[{"default":"","description":"surface.GetTextureID number of the texture to be drawn.","isOptional":false,"name":"texture","type":"number"},{"default":"","description":"The x Coordinate.","isOptional":false,"name":"x","type":"number"},{"default":"","description":"The y Coordinate.","isOptional":false,"name":"y","type":"number"},{"default":"","description":"The width of the texture.","isOptional":false,"name":"w","type":"number"},{"default":"","description":"The height of the texture.","isOptional":false,"name":"h","type":"number"},{"default":"color_white","description":"The texture color","isOptional":true,"name":"color","type":"number"}]},{"description":"The TOOL table is used in Sandbox tool creation. You can find a list of callbacks on the [[:Category:TOOL Hooks|TOOL Hooks]] page and a list of methods on the [[:Category:Tool|Tool Functions]] page. Do note that some of the fields below have no effect on server-side operations.\n\nThe tool information box drawn on the HUD while your tool is selected has 2 values that are set by {{LibraryFunction|language|Add}}.<br />\n\"tool.[tool mode].name\" - The tool name (Note this is NOT the same as TOOL.Name)<br />\n\"tool.[tool mode].desc\" - The tool description\n\nEnsure that all tool file names are entirely lowercase.  Including capital letters can lead to unintended behavior.","name":"TOOL","structureFields":[{"default":"true","description":"If set to false, the tool won't be added to the tool menu and players will have to access it by other means.","isOptional":true,"name":"AddToMenu","type":"boolean"},{"default":"\"New Category\"","description":"The tool menu category under which the tool should be listed.","isOptional":true,"name":"Category","type":"string"},{"default":"\"gmod_toolmode [tool]\"","description":"The console command to execute upon being selected in the Q menu.","isOptional":true,"name":"Command","type":"string"},{"default":"\"#[tool mode]\"\n","description":"The name of the tool in the Q menu.\nCommon practice is to set this to \"#tool.[lua filename].name\" to match the name displayed in the tool information box.","isOptional":true,"name":"Name","type":"string"},{"default":"nil","description":"The name of the configuration file.","isOptional":true,"name":"ConfigName","type":"string"},{"default":"","description":"A key-value ( convar name-default value ) table containing the client-side convars to create. All convars will be prefixed with the filename of the tool.\n\nYou can later use {{ClassFunction|Tool|GetClientNumber}} or {{ClassFunction|Tool|GetClientInfo}} to retrieve these values.\n","isOptional":false,"name":"ClientConVar","type":"table"},{"default":"","description":"Same as above, but created server-side instead.","isOptional":false,"name":"ServerConVar","type":"table"},{"default":"","description":"The function that is called to build the context menu for your tool. It has one argument, namely the context menu's base panel to which all of your custom panels are going to be parented to.\n\nWhile it might sound like a hook, it isn't - you won't receive a self argument inside the function.\n","isOptional":false,"name":"BuildCPanel","type":"Function"},{"default":"","description":"Allows you to override the tool usage information shown when the tool is equipped.\nSee [[Tool Information Display]] for more information.\n","isOptional":false,"name":"Information","type":"table"},{"default":"0","description":"Set this to CurTime() on the client to make the tools information box on the HUD flash white.","isOptional":true,"name":"LastMessage","type":"number"},{"default":"\"start\"\n","description":"{{Deprecated}}\n\nDoes nothing. Was used in conjunction with LastMessage in very old versions of the game.","isOptional":true,"name":"Message","type":"string"},{"default":"","description":"Class name of the tool. (name of the .lua file)\n\nThis is set automatically.\n","isOptional":false,"name":"Mode","type":"string"}]},{"description":"Table returned by {{ClassFunction|Vector|ToScreen}}.","name":"ToScreenData","structureFields":[{"default":"","description":"The x coordinate on the players screen","isOptional":false,"name":"x","type":"number"},{"default":"","description":"The y coordinate on the players screen","isOptional":false,"name":"y","type":"number"},{"default":"","description":"The coordinate is not behind the player. '''This does not mean the coordinate is on the screen.''' When this is false, it means that the coordinate would not be on the screen even if the player had a full 180 degree FOV.","isOptional":false,"name":"visible","type":"boolean"}]},{"description":"Table structure used for {{LibraryFunction|util|TraceLine}}.","name":"Trace","structureFields":[{"default":"Vector(0, 0, 0)","description":"The start position of the trace","isOptional":true,"name":"start","type":"Vector"},{"default":"Vector(0, 0, 0)","description":"The end position of the trace","isOptional":true,"name":"endpos","type":"Vector"},{"default":"{}\n","description":"Things the trace should not hit. Can also be a table of entities or a function with one argument:<br/>\n* {{FuncArg|Entity|ent|The entity that the trace hit}}\n\nReturn true in the function to hit the entity, false to skip it.\n\n{{Warning|Using a function here is super slow - try to avoid it.}}","isOptional":true,"name":"filter","type":"Entity"},{"default":"MASK_SOLID","description":"The trace mask {{Enum|MASK}}. This determines what the trace should hit and what it shouldn't hit. A mask is a combination of {{Enum|CONTENTS}} - you can use these for more advanced masks.","isOptional":true,"name":"mask","type":"MASK | CONTENTS"},{"default":"COLLISION_GROUP_NONE","description":"The collision group {{Enum|COLLISION_GROUP}}. This determines what the trace should hit in regards to the entity's collision group.","isOptional":true,"name":"collisiongroup","type":"COLLISION_GROUP"},{"default":"false","description":"Should the trace ignore world or not","isOptional":true,"name":"ignoreworld","type":"boolean"},{"default":"nil","description":"If set, the trace result will be written to the supplied table instead of returning a new table","isOptional":true,"name":"output","type":"table"}]},{"description":"Table structure used as trace result. Default values are when the trace hits nothing.","name":"TraceResult","structureFields":[{"default":"NULL","description":"The entity hit by the trace.","isOptional":true,"name":"Entity","type":"Entity"},{"default":"1","description":"This indicates the how much of your trace length was used from 0-1 (resultLength/originalLength).","isOptional":true,"name":"Fraction","type":"number"},{"default":"0","description":"Given the trace started in a solid enviroment, this will return at what distance the trace left the solid from 0-1. Doesn't work if the trace hit a non-worldspawn entity.","isOptional":true,"name":"FractionLeftSolid","type":"number"},{"default":"false","description":"Indicates whether the trace hit something.","isOptional":true,"name":"Hit","type":"boolean"},{"default":"0","description":"The ID of the hitbox hit by the trace.","isOptional":true,"name":"HitBox","type":"number"},{"default":"0","description":"{{Enum|HITGROUP}} describing what hitgroup the trace hit (not the same as HitBox).","isOptional":true,"name":"HitGroup","type":"HITGROUP"},{"default":"false","description":"Indicates whenever the trace hit a no-draw brush.","isOptional":true,"name":"HitNoDraw","type":"boolean"},{"default":"false","description":"Indicates whenever the trace did not hit the world.","isOptional":true,"name":"HitNonWorld","type":"boolean"},{"default":"{{GlobalFunction|Vector}}(0, 0, 0)","description":"The direction of the surface that was hit as a normal vector (vector with [[Vector/Length|length]] of 1).","isOptional":true,"name":"HitNormal","type":"Vector"},{"default":"","description":"The position the trace stopped. This will be the provided endpos if the trace hit nothing.","isOptional":false,"name":"HitPos","type":"Vector"},{"default":"false","description":"Indicates whenever the trace hit the sky.","isOptional":true,"name":"HitSky","type":"boolean"},{"default":"\"**empty**\"","description":"The surface material (not texture) of whatever the trace hit. Will be \"**displacement**\" if the trace hit a displacement, and **studio** if it hit a prop.","isOptional":true,"name":"HitTexture","type":"string"},{"default":"false","description":"Indicates whenever the trace hit the world.","isOptional":true,"name":"HitWorld","type":"boolean"},{"default":"0","description":"{{Enum|MAT}} of the material hit by the trace.","isOptional":true,"name":"MatType","type":"MAT"},{"default":"","description":"The direction of the trace as a normal vector (vector with [[Vector/Length|length]] of 1).","isOptional":false,"name":"Normal","type":"Vector"},{"default":"0\n","description":"The {{Type|PhysObj}} ID that was hit.\n\nUsed for {{ClassFunction|Entity|GetPhysicsObjectNum}}.","isOptional":true,"name":"PhysicsBone","type":"number"},{"default":"","description":"The origin of the trace. Will match the provided startpos.","isOptional":false,"name":"StartPos","type":"Vector"},{"default":"0\n","description":"ID of hit surface property from scripts/surfaceproperties.txt.\nYou can get the name using {{LibraryFunction|util|GetSurfacePropName}}.\n\nUsed for {{ClassFunction|CEffectData|SetSurfaceProp}}.","isOptional":true,"name":"SurfaceProps","type":"number"},{"default":"false","description":"Indicates whenever the trace started in a solid enviroment.","isOptional":true,"name":"StartSolid","type":"boolean"},{"default":"false","description":"True if the entire trace is inside a solid.","isOptional":true,"name":"AllSolid","type":"boolean"}]},{"description":"Table structure used by {{LibraryFunction|undo|Do_Undo}}.","name":"Undo","structureFields":[{"default":"","description":"The player responsible who owns the undo","isOptional":false,"name":"Owner","type":"Player"},{"default":"","description":"The name of the text to report to the player","isOptional":false,"name":"Name","type":"string"},{"default":"","description":"A table of entities to be removed by the undo","isOptional":false,"name":"Entities","type":"table"},{"default":"","description":"A table of {function_to_call, func_arg2, func_arg3} ","isOptional":false,"name":"Functions","type":"table"},{"default":"","description":"A custom undo text to show the client","isOptional":false,"name":"CustomUndoText","type":"string"}]},{"description":"The structure used by {{ClassFunction|Vehicle|SetVehicleParams}} and {{ClassFunction|Vehicle|GetVehicleParams}}.","name":"VehicleParams","structureFields":[{"default":"","description":"Wheels per axle","isOptional":false,"name":"wheelsPerAxle","type":"number"},{"default":"","description":"Number of axles","isOptional":false,"name":"axleCount","type":"number"},{"default":"","description":"A table of {{Struct|VehicleParamsAxle}} tables.","isOptional":false,"name":"axles","type":"VehicleParamsAxle[]"},{"default":"","description":"See {{Struct|VehicleParamsBody}}","isOptional":false,"name":"body","type":"VehicleParamsBody"},{"default":"","description":"See {{Struct|VehicleParamsEngine}}","isOptional":false,"name":"engine","type":"VehicleParamsEngine"},{"default":"","description":"See {{Struct|VehicleParamsSteering}}","isOptional":false,"name":"steering","type":"VehicleParamsSteering"}]},{"description":"The structure used by {{Struct|VehicleParams}}.","name":"VehicleParamsAxle","structureFields":[{"default":"","description":"","isOptional":false,"name":"brakeFactor","type":"number"},{"default":"","description":"","isOptional":false,"name":"offset","type":"Vector"},{"default":"","description":"","isOptional":false,"name":"raytraceCenterOffset","type":"Vector"},{"default":"","description":"","isOptional":false,"name":"raytraceOffset","type":"Vector"},{"default":"","description":"","isOptional":false,"name":"suspension_maxBodyForce","type":"number"},{"default":"","description":"","isOptional":false,"name":"suspension_springConstant","type":"number"},{"default":"","description":"","isOptional":false,"name":"suspension_springDamping","type":"number"},{"default":"","description":"","isOptional":false,"name":"suspension_springDampingCompression","type":"number"},{"default":"","description":"","isOptional":false,"name":"suspension_stabilizerConstant","type":"number"},{"default":"","description":"","isOptional":false,"name":"torqueFactor","type":"number"},{"default":"","description":"","isOptional":false,"name":"wheelOffset","type":"Vector"},{"default":"","description":"Material index of braking material of the wheels. Upon braking, the wheels will be set to this material.","isOptional":false,"name":"wheels_brakeMaterialIndex","type":"number"},{"default":"","description":"","isOptional":false,"name":"wheels_damping","type":"number"},{"default":"","description":"","isOptional":false,"name":"wheels_frictionScale","type":"number"},{"default":"","description":"","isOptional":false,"name":"wheels_inertia","type":"number"},{"default":"","description":"Mass of each wheel.","isOptional":false,"name":"wheels_mass","type":"number"},{"default":"","description":"Material index of the wheels by default.","isOptional":false,"name":"wheels_materialIndex","type":"number"},{"default":"","description":"Radius of the wheels.","isOptional":false,"name":"wheels_radius","type":"number"},{"default":"","description":"","isOptional":false,"name":"wheels_rotdamping","type":"number"},{"default":"","description":"Material index of skid material of the wheels. Upon skidding ( pressing Space and sliding the vehicle ), the wheels will be set to this material.","isOptional":false,"name":"wheels_skidMaterialIndex","type":"number"},{"default":"","description":"","isOptional":false,"name":"wheels_springAdditionalLength","type":"number"}]},{"description":"The structure used by {{Struct|VehicleParams}}.","name":"VehicleParamsBody","structureFields":[{"default":"","description":"Additional gravity to be applied to the vehicle","isOptional":false,"name":"addGravity","type":"number"},{"default":"","description":"","isOptional":false,"name":"counterTorqueFactor","type":"number"},{"default":"","description":"","isOptional":false,"name":"keepUprightTorque","type":"number"},{"default":"","description":"Mass center override","isOptional":false,"name":"massCenterOverride","type":"Vector"},{"default":"","description":"Mass override","isOptional":false,"name":"massOverride","type":"number"},{"default":"","description":"Maximum angular velocity","isOptional":false,"name":"maxAngularVelocity","type":"number"},{"default":"","description":"","isOptional":false,"name":"tiltForce","type":"number"},{"default":"","description":"","isOptional":false,"name":"tiltForceHeight","type":"number"}]},{"description":"The structure used by {{Struct|VehicleParams}}.","name":"VehicleParamsEngine","structureFields":[{"default":"","description":"","isOptional":false,"name":"autobrakeSpeedFactor","type":"number"},{"default":"","description":"","isOptional":false,"name":"autobrakeSpeedGain","type":"number"},{"default":"","description":"This acts as the final ratio of the gearbox.\n\nIt's like a master coefficient of the gearbox.\n","isOptional":false,"name":"axleRatio","type":"number"},{"default":"","description":"Amount of seconds between being able to use the boost ( by pressing Shift key by default )","isOptional":false,"name":"boostDelay","type":"number"},{"default":"","description":"Duration of the boost in seconds","isOptional":false,"name":"boostDuration","type":"number"},{"default":"","description":"","isOptional":false,"name":"boostForce","type":"number"},{"default":"","description":"Maximum speed while boosting\n\n{{Warning|The {{ClassFunction|Vehicle|SetVehicleParams}} function takes this in '''miles per hour''', but {{ClassFunction|Vehicle|GetVehicleParams}} returns this in '''hammer units per second'''!\n\n1 MPH is roughly 17.6 HU/s.}}\n","isOptional":false,"name":"boostMaxSpeed","type":"number"},{"default":"","description":"Amount of gears this vehicle has","isOptional":false,"name":"gearCount","type":"number"},{"default":"","description":"A table of numbers, of gear rations.<br/>Table length is equal to \"gearCount\" member of this table.","isOptional":false,"name":"gearRatio","type":"table"},{"default":"","description":"The HP amount of the vehicle\n\nThis value is used to calculate the effectively applied torque, along with ratios and ''maxRPM''.\n","isOptional":false,"name":"horsepower","type":"number"},{"default":"","description":"If ''true'', the gearbox shifts gears, if ''false'' the gearbox stays stuck to the 1st gear (gear number 0).","isOptional":false,"name":"isAutoTransmission","type":"boolean"},{"default":"","description":"Maximum RPM of the vehicle.<br/>Despite this being a maximum value, the vehicle can exceed it.\n\n{{Warning|Attempts to exceed the max RPM will force the active gear ratio to be that of the 1st gear, which will provide even more torque. This is the opposite of a rev limiter. This value is only used for the calculation of the effectively applied torque.}}\n","isOptional":false,"name":"maxRPM","type":"number"},{"default":"","description":"Maximum reverse speed of the vehicle\n\n{{Warning|The {{ClassFunction|Vehicle|SetVehicleParams}} function takes this in '''miles per hour''', but {{ClassFunction|Vehicle|GetVehicleParams}} returns this in '''hammer units per second'''!\n\n1 MPH is roughly 17.6 HU/s.}}\n","isOptional":false,"name":"maxRevSpeed","type":"number"},{"default":"","description":"Maximum forward going speed of the vehicle without boosting\n\n{{Warning|The {{ClassFunction|Vehicle|SetVehicleParams}} function takes this in '''miles per hour''', but {{ClassFunction|Vehicle|GetVehicleParams}} returns this in '''hammer units per second'''!\n\n1 MPH is roughly 17.6 HU/s.}}\n","isOptional":false,"name":"maxSpeed","type":"number"},{"default":"","description":"Amount of RPM to automatically shift one gear down","isOptional":false,"name":"shiftDownRPM","type":"number"},{"default":"","description":"Amount of RPM to automatically shift one gear up","isOptional":false,"name":"shiftUpRPM","type":"number"},{"default":"","description":"","isOptional":false,"name":"throttleTime","type":"number"},{"default":"","description":"","isOptional":false,"name":"torqueBoost","type":"boolean"}]},{"description":"The structure used by {{Struct|VehicleParams}}.","name":"VehicleParamsSteering","structureFields":[{"default":"","description":"","isOptional":false,"name":"boostSteeringRateFactor","type":"number"},{"default":"","description":"","isOptional":false,"name":"boostSteeringRestRateFactor","type":"number"},{"default":"","description":"","isOptional":false,"name":"brakeSteeringRateFactor","type":"number"},{"default":"","description":"The maximum angle at which the vehicle can turn while boosting","isOptional":false,"name":"degreesBoost","type":"number"},{"default":"","description":"The maximum angle at which the vehicle can turn while moving at max speed and not boosting","isOptional":false,"name":"degreesFast","type":"number"},{"default":"","description":"The maximum angle at which the vehicle can turn while moving slowest","isOptional":false,"name":"degreesSlow","type":"number"},{"default":"","description":"Disabled in Garry's Mod. In Half-Life 2: Episode 2 this dictates whether the vehicle should leave wheel dust effects when driving around","isOptional":false,"name":"dustCloud","type":"boolean"},{"default":"","description":"Whether the vehicle is allowed to skid/drift","isOptional":false,"name":"isSkidAllowed","type":"boolean"},{"default":"","description":"In Hammer Units","isOptional":false,"name":"powerSlideAccel","type":"number"},{"default":"","description":"","isOptional":false,"name":"speedFast","type":"number"},{"default":"","description":"","isOptional":false,"name":"speedSlow","type":"number"},{"default":"","description":"","isOptional":false,"name":"steeringExponent","type":"number"},{"default":"","description":"","isOptional":false,"name":"steeringRateFast","type":"number"},{"default":"","description":"","isOptional":false,"name":"steeringRateSlow","type":"number"},{"default":"","description":"","isOptional":false,"name":"steeringRestRateFast","type":"number"},{"default":"","description":"","isOptional":false,"name":"steeringRestRateSlow","type":"number"},{"default":"","description":"","isOptional":false,"name":"throttleSteeringRestRateFactor","type":"number"},{"default":"","description":"","isOptional":false,"name":"turnThrottleReduceFast","type":"number"},{"default":"","description":"","isOptional":false,"name":"turnThrottleReduceSlow","type":"number"}]},{"description":"Table used by {{LibraryFunction|video|Record}}.","name":"VideoData","structureFields":[{"default":"","description":"The video container format.<br/><br/>'''Valid options are:''' webm, ogg","isOptional":false,"name":"container","type":"string"},{"default":"","description":"The video codec.<br/><br/>'''Valid options are:''' vp8, theora","isOptional":false,"name":"video","type":"string"},{"default":"","description":"The audio codec.<br/><br/>'''Valid options are:''' vorbis","isOptional":false,"name":"audio","type":"string"},{"default":"","description":"The video quality","isOptional":false,"name":"quality","type":"number"},{"default":"","description":"The record bitrate","isOptional":false,"name":"bitrate","type":"number"},{"default":"","description":"Frames per second","isOptional":false,"name":"fps","type":"number"},{"default":"","description":"Lock the frame count per second","isOptional":false,"name":"lockfps","type":"boolean"},{"default":"","description":"The file name for the video","isOptional":false,"name":"name","type":"string"},{"default":"","description":"The videos width","isOptional":false,"name":"width","type":"number"},{"default":"","description":"The videos height","isOptional":false,"name":"height","type":"number"}]},{"description":"Table structure used for {{LibraryFunction|render|RenderView}}.\n\nUnless stated otherwise, the default values for all these keys would be inherited from the engine's CViewSetup and do not have static representations.","name":"ViewData","structureFields":[{"default":"","description":"The view's original position","isOptional":false,"name":"origin","type":"Vector"},{"default":"","description":"The view's angles","isOptional":false,"name":"angles","type":"Angle"},{"default":"","description":"Default width divided by height","isOptional":false,"name":"aspectratio","type":"number"},{"default":"","description":"The x position of the viewport to render in","isOptional":false,"name":"x","type":"number"},{"default":"","description":"The y position of the viewport to render in","isOptional":false,"name":"y","type":"number"},{"default":"","description":"The width of the viewport to render in","isOptional":false,"name":"w","type":"number"},{"default":"","description":"The height of the viewport to render in","isOptional":false,"name":"h","type":"number"},{"default":"false","description":"Draw the HUD and call the hud painting related hooks","isOptional":true,"name":"drawhud","type":"boolean"},{"default":"false","description":"Draw monitors","isOptional":true,"name":"drawmonitors","type":"boolean"},{"default":"true","description":"The weapon's viewmodel","isOptional":true,"name":"drawviewmodel","type":"boolean"},{"default":"","description":"The viewmodel's FOV","isOptional":false,"name":"viewmodelfov","type":"number"},{"default":"","description":"The main view's FOV","isOptional":false,"name":"fov","type":"number"},{"default":"false\n","description":"Render the view orthogonal. Can also be a table with these keys: ( In which case orthogonal view is automatically set to true )\n* left\n* right\n* top\n* bottom","isOptional":true,"name":"ortho","type":"boolean"},{"default":"","description":"Coordinate for the left clipping plane","isOptional":false,"name":"ortholeft","type":"number"},{"default":"","description":"Coordinate for the right clipping plane","isOptional":false,"name":"orthoright","type":"number"},{"default":"","description":"Coordinate for the top clipping plane","isOptional":false,"name":"orthotop","type":"number"},{"default":"","description":"Coordinate for the bottom clipping plane","isOptional":false,"name":"orthobottom","type":"number"},{"default":"","description":"The distance of the view's origin to the near clipping plane","isOptional":false,"name":"znear","type":"number"},{"default":"","description":"The distance of the view's origin to the far clipping plane","isOptional":false,"name":"zfar","type":"number"},{"default":"","description":"The distance of the view's origin to the near clipping plane for the viewmodel","isOptional":false,"name":"znearviewmodel","type":"number"},{"default":"","description":"The distance of the view's origin to the far clipping plane for the viewmodel","isOptional":false,"name":"zfarviewmodel","type":"number"},{"default":"false\n","description":"<!--Call the {{HookFunction|GM|RenderScreenspaceEffects}} hook-->\nCurrently works identically to the \"bloomtone\" option (it also overrides it if you set this to false).","isOptional":true,"name":"dopostprocess","type":"boolean"},{"default":"true","description":"Disables default engine bloom and pauses the \"brightness changes\" on HDR maps.","isOptional":true,"name":"bloomtone","type":"boolean"},{"default":"","description":"This allows you to \"zoom in\" on a part of the screen - for example, the top-left quarter of the screen. This is similar to how [https://garry.tv/2012/02/25/poster-screenshots/ poster splits the screen] into separate renders.\n\nIt's a table with 4 keys, controlling what portion of the screen to draw:\n* left - where the left edge starts. Natural value is 0.\n* right - where the right edge ends. Natural value is equal to w (the width of the viewport).\n* top - where the ''bottom'' edge starts. Natural value is 0.\n* bottom - where the ''top'' edge ends. Natural value is equal to h (the height of the viewport).\n\nNote that top and bottom are reversed.\n\nValues outside the viewport are allowed, but not recommended - instead you should increase the view FOV.\n","isOptional":false,"name":"offcenter","type":"table"}]},{"description":"Information about a SWEP, used by {{HookFunction|SANDBOX|PlayerGiveSWEP}} and SWEP creation. For list of callbacks, see [[:Category:WEAPON_Hooks]].\n\nWhile some of the fields may be serverside or clientside only, it is recommended to provide them on both so addons could use their values.","name":"SWEP","structureFields":[{"default":"","description":"Entity class name of the SWEP (file or folder name of your SWEP). This is set automatically","isOptional":false,"name":"ClassName","type":"string"},{"default":"\"Other\"","description":"(Clientside) Category the SWEP is in","isOptional":true,"name":"Category","type":"string"},{"default":"false","description":"Whether this SWEP should be displayed in the Q menu","isOptional":true,"name":"Spawnable","type":"boolean"},{"default":"false","description":"Whether or not only admins can spawn the SWEP from their Q menu","isOptional":true,"name":"AdminOnly","type":"boolean"},{"default":"\"Scripted Weapon\"","description":"Nice name of the SWEP","isOptional":true,"name":"PrintName","type":"string"},{"default":"\"weapon_base\"","description":"The base weapon to derive from. This '''must''' be a Lua weapon","isOptional":true,"name":"Base","type":"string"},{"default":"1","description":"Multiplier of deploy speed","isOptional":true,"name":"m_WeaponDeploySpeed","type":"number"},{"default":"","description":"The entity that owns/wields this SWEP, if any","isOptional":false,"name":"Owner","type":"Entity"},{"default":"\"\"","description":"(Clientside) The author of the SWEP to be shown in weapon selection","isOptional":true,"name":"Author","type":"string"},{"default":"\"\"","description":"(Clientside) The contacts of the SWEP creator to be shown in weapon selection","isOptional":true,"name":"Contact","type":"string"},{"default":"\"\"","description":"(Clientside) The purpose of the SWEP creator to be shown in weapon selection","isOptional":true,"name":"Purpose","type":"string"},{"default":"\"\"","description":"(Clientside) How to use your weapon, to be shown in weapon selection","isOptional":true,"name":"Instructions","type":"string"},{"default":"\"models/weapons/v_pistol.mdl\"","description":"Path to the view model for your SWEP (what the wielder will see)","isOptional":true,"name":"ViewModel","type":"string"},{"default":"false","description":"(Clientside) Should we flip the view model? This is needed for some CS:S view models","isOptional":true,"name":"ViewModelFlip","type":"boolean"},{"default":"false\n","description":"(Clientside) Same as ViewModelFlip, but for the second viewmodel\n\n{{Bug|Issue=3633|Fixed=|The second and third viewmodel will not flip with these variables.}}","isOptional":true,"name":"ViewModelFlip1","type":"boolean"},{"default":"false","description":"(Clientside) Same as ViewModelFlip, but for the third viewmodel","isOptional":true,"name":"ViewModelFlip2","type":"boolean"},{"default":"62","description":"(Clientside) An angle of FOV used for the view model (Half-Life value is 90; Half-Life 2 is 54; Counter-Strike: Source is 74; Day of Defeat: Source is 45)","isOptional":true,"name":"ViewModelFOV","type":"number"},{"default":"\"models/weapons/w_357.mdl\"","description":"The world model for your SWEP (what you will see in other players hands)","isOptional":true,"name":"WorldModel","type":"string"},{"default":"true","description":"(Serverside) Whether this weapon can be autoswitched away from when the player runs out of ammo in this weapon or picks up another weapon or ammo","isOptional":true,"name":"AutoSwitchFrom","type":"boolean"},{"default":"true","description":"(Serverside) Whether this weapon can be autoswitched to when the player runs out of ammo in their current weapon or they pick this weapon up","isOptional":true,"name":"AutoSwitchTo","type":"boolean"},{"default":"5","description":"(Serverside) Decides whether we should switch from/to this","isOptional":true,"name":"Weight","type":"number"},{"default":"1","description":"(Clientside) The scale of the viewmodel bob (viewmodel movement from left to right when walking around)","isOptional":true,"name":"BobScale","type":"number"},{"default":"1","description":"(Clientside) The scale of the viewmodel sway (viewmodel position lerp when looking around).","isOptional":true,"name":"SwayScale","type":"number"},{"default":"true","description":"(Clientside) Should the weapon icon bounce in weapon selection?","isOptional":true,"name":"BounceWeaponIcon","type":"boolean"},{"default":"true","description":"(Clientside) Should draw the weapon selection info box, containing SWEP.Instructions, etc.","isOptional":true,"name":"DrawWeaponInfoBox","type":"boolean"},{"default":"true","description":"(Clientside) Should we draw the default HL2 ammo counter?","isOptional":true,"name":"DrawAmmo","type":"boolean"},{"default":"true","description":"(Clientside) Should we draw the default crosshair?","isOptional":true,"name":"DrawCrosshair","type":"boolean"},{"default":"RENDERGROUP_OPAQUE","description":"(Clientside) The SWEP render group, see {{Enum|RENDERGROUP}}","isOptional":true,"name":"RenderGroup","type":"RENDERGROUP"},{"default":"0","description":"Slot in the weapon selection menu, starts with 0","isOptional":true,"name":"Slot","type":"number"},{"default":"10","description":"Position in the slot, should be in the range 0-128","isOptional":true,"name":"SlotPos","type":"number"},{"default":"surface.GetTextureID( \"gui/speech_lid\" )","description":"(Clientside) Internal variable for drawing the info box in weapon selection","isOptional":true,"name":"SpeechBubbleLid","type":"number"},{"default":"surface.GetTextureID( \"weapons/swep\" )","description":"(Clientside) Path to an texture. Override this in your SWEP to set the icon in the weapon selection. This must be the texture ID, see {{LibraryFunction|surface|GetTextureID}}","isOptional":true,"name":"WepSelectIcon","type":"number"},{"default":"false","description":"(Clientside) Should we use Counter-Strike muzzle flashes upon firing? This is required for DoD:S or CS:S view models to fix their muzzle flashes.","isOptional":true,"name":"CSMuzzleFlashes","type":"boolean"},{"default":"false","description":"(Clientside) Use the X shape muzzle flash instead of the default Counter-Strike muzzle flash. Requires CSMuzzleFlashes to be set to true","isOptional":true,"name":"CSMuzzleX","type":"boolean"},{"default":"","description":"Primary attack settings. The table contains these fields:\n* {{FuncArg|string|Ammo|Ammo type (\"Pistol\", \"SMG1\" etc)}}\n* {{FuncArg|number|ClipSize|The maximum amount of bullets one clip can hold}}\n* {{FuncArg|number|DefaultClip|Default ammo in the clip, making it higher than ClipSize will give player additional ammo on spawn}}\n* {{FuncArg|boolean|Automatic|If true makes the weapon shoot automatically as long as the player has primary attack button held down}}\n","isOptional":false,"name":"Primary","type":"table"},{"default":"","description":"Secondary attack settings, has same fields as Primary attack settings","isOptional":false,"name":"Secondary","type":"table"},{"default":"false\n","description":"(Clientside) Makes the player models hands bonemerged onto the view model\n\n{{Warning|The gamemode and view models '''must''' support this feature for it to work!\nYou can find more information here: [[Using_Viewmodel_Hands|Using Viewmodel Hands]]}}","isOptional":true,"name":"UseHands","type":"boolean"},{"default":"","description":"The folder from where the weapon was loaded. This should always be \"weapons/weapon_myweapon\", regardless whether your SWEP is stored as a file, or multiple files in a folder. It is set automatically on load","isOptional":false,"name":"Folder","type":"string"},{"default":"false","description":"(Clientside) Makes the default SWEP crosshair be positioned in 3D space where your aim actually is (like on Jeep), instead of simply sitting in the middle of the screen at all times","isOptional":true,"name":"AccurateCrosshair","type":"boolean"},{"default":"false","description":"Disable the ability for players to duplicate this SWEP","isOptional":true,"name":"DisableDuplicator","type":"boolean"},{"default":"\"weapon\"\n","description":"(Clientside) Sets the spawnmenu content icon type for the entity, used by spawnmenu in the Sandbox-derived gamemodes.\nSee {{LibraryFunction|spawnmenu|AddContentType}} for more information.","isOptional":true,"name":"ScriptedEntityType","type":"string"},{"default":"true","description":"If set to false, the weapon will not play the weapon pick up sound when picked up.","isOptional":true,"name":"m_bPlayPickupSound","type":"boolean"}]},{"description":"Information about the ENT structure.<br/>\nTo learn more about scripted entities, [[Scripted_Entities|see this page]].\n<br/>\nFor list of callbacks, see [[:Category:ENTITY_Hooks|ENT Hooks]].\n\nWhile some of the fields may be serverside or clientside only, it is recommended to provide them on both so addons could use their values.","name":"ENT","structureFields":[{"default":"\"base_entity\"","description":"The base entity to derive from. This '''must''' be a valid Lua entity","isOptional":true,"name":"Base","type":"string"},{"default":"anim\n","description":"Type of the entity. This '''must be one of these:'''\n* '''anim'''\n* '''brush'''\n* '''point'''\n* '''ai'''\n* '''nextbot'''\n* '''filter'''\n\nSee [[Scripted Entities]] for a more detailed explanation of what each one is.\n\n{{Bug|You must set this in your entity. This is currently not set to \"anim\" by default.|2745||1521||No}}","isOptional":true,"name":"Type","type":"string"},{"default":"","description":"Entity class name of the ENT (File or folder name of your ENT).\n'''This is set automatically ''after'' the entity file is loaded.'''\n","isOptional":false,"name":"ClassName","type":"string"},{"default":"","description":"The folder from where the entity was loaded. This should always be \"entity/ent_myentity\", regardless whether your ENT is stored as a file, or multiple files in a folder. '''This is set automatically ''before'' the entity file is loaded.'''","isOptional":false,"name":"Folder","type":"string"},{"default":"false","description":"(Clientside) Set this to true if your entity has animations.","isOptional":true,"name":"AutomaticFrameAdvance","type":"boolean"},{"default":"Other","description":"(Clientside) Category the ENT is in","isOptional":true,"name":"Category","type":"string"},{"default":"false","description":"Whether this ENT should be displayed in the Q menu","isOptional":true,"name":"Spawnable","type":"boolean"},{"default":"false","description":"Whether the entity supports Editing. See [[Editable Entities]] for more info.","isOptional":true,"name":"Editable","type":"boolean"},{"default":"false","description":"Whether or not only admins can spawn the ENT from their Q menu","isOptional":true,"name":"AdminOnly","type":"boolean"},{"default":"\"\"","description":"(Clientside) Nice name of the ENT","isOptional":true,"name":"PrintName","type":"string"},{"default":"\"\"","description":"(Clientside) The author of the ENT","isOptional":true,"name":"Author","type":"string"},{"default":"\"\"","description":"(Clientside) The contacts of the ENT creator","isOptional":true,"name":"Contact","type":"string"},{"default":"\"\"","description":"(Clientside) The purpose of the ENT creation","isOptional":true,"name":"Purpose","type":"string"},{"default":"\"\"","description":"(Clientside) How to use your entity","isOptional":true,"name":"Instructions","type":"string"},{"default":"RENDERGROUP_OPAQUE","description":"(Clientside) The SENT's render group, see {{Enum|RENDERGROUP}}.","isOptional":true,"name":"RenderGroup","type":"RENDERGROUP"},{"default":"false","description":"(Serverside) Disable the ability for players to duplicate this SENT.","isOptional":true,"name":"DisableDuplicator","type":"boolean"},{"default":"\"entity\"\n","description":"(Clientside) Sets the spawnmenu content icon type for the entity, used by spawnmenu in the Sandbox-derived gamemodes.\nSee {{LibraryFunction|spawnmenu|AddContentType}} for more information.","isOptional":true,"name":"ScriptedEntityType","type":"string"}]}]}